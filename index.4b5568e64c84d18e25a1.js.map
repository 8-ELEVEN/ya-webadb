{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../event/src/event-emitter.ts","webpack:///../event/src/async-event-emitter.ts","webpack:///../event/src/disposable.ts","webpack:///../adb/src/crypto.ts","webpack:///../struct/src/field/descriptor.ts","webpack:///../struct/src/field/array.ts","webpack:///../struct/src/field/definition.ts","webpack:///../struct/src/field/number.ts","webpack:///../struct/src/field/variable-length-array.ts","webpack:///../struct/src/field/fixed-length-array.ts","webpack:///../struct/src/struct.ts","webpack:///../adb/src/utils/auto-reset-event.ts","webpack:///../adb/src/utils/base64.ts","webpack:///../adb/src/utils/event-iterator.ts","webpack:///../adb/src/buffered-stream.ts","webpack:///../adb/src/packet.ts","webpack:///../adb/src/auth.ts","webpack:///../adb/src/stream.ts","webpack:///../adb/src/sync.ts","webpack:///../adb/src/adb.ts","webpack:///../adb-backend-web/src/index.ts","webpack:///./src/with-display-name.ts","webpack:///./src/error-dialog.tsx","webpack:///./src/connect.tsx","webpack:///./src/router.tsx","webpack:///./src/routes/file-manager.tsx","webpack:///./src/routes/intro.tsx","webpack:///./src/resize-observer.tsx","webpack:///./src/routes/shell.tsx","webpack:///./src/routes/tcp-ip.tsx","webpack:///./src/index.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","EventEmitter","listeners","this","event","listener","thisArg","args","info","remove","index","indexOf","dispose","e","AutoDisposable","disposables","disposable","DisposableList","addDisposable","BigInt0","BigInt","BigInt1","BigInt2","BigInt2To64","getBig","buffer","offset","byteLength","view","DataView","getBigUint64","setBigLE","setBigUint64","parsePrivateKey","calculatePublicKey","privateKey","output","outputOffset","outputType","Error","ArrayBuffer","outputView","setUint32","n0inv","a","Number","isNaN","NaN","b","x","y","Math","floor","modInverse","asUintN","Sha1DigestInfo","sign","padded","Uint8Array","fillLength","set","signature","base","exponent","modulus","powMod","uint64Array","setBig","BackingField","Array","getBackingField","setBackingField","initialize","field","subType","configurable","string","registry","getFieldTypeDefinition","type","registerFieldTypeDefinition","_field","methods","undefined","context","read","options","decodeUtf8","getSize","init","dataView","backingField","encodeUtf8","SizeMap","DataViewGetterMap","DataViewSetterMap","littleEndian","VariableLengthArray","getLengthBackingField","lengthField","setLengthBackingField","descriptor","getOwnPropertyDescriptor","emptyBehavior","getDynamicSize","StructDefaultOptions","_size","fields","_extra","array","arrayBuffer","_afterParsed","clone","size","_typescriptType","number","getOwnPropertyDescriptors","callback","defineProperties","deserialize","fieldSize","serialize","initialSet","list","blocking","Promise","resolve","resolver","promise","pop","item","reject","ranges","chars","padding","charCodeAt","addRange","start","end","startCharCode","endCharCode","toValue","char","charCode","range","encodeBase64","input","arg1","arg2","_arg3","_arg4","inputOffset","inputLength","outputArgumentIndex","paddingLength","outputLength","maybeOutput","arguments","maybeOutputOffset","bufferInputStart","byteOffset","bufferOutputStart","inputIndex","outputIndex","z","sort","IteratorReturnUndefinedResult","done","freeze","pullQueue","pushQueue","ended","waterMark","pendingLowWaterEvent","lowWaterEvent","EventIteratorController","state","maxConsumerCount","Infinity","highWaterMark","lowWaterMark","cleanup","map","initializer","asyncIterator","controller","fire","return","BufferedStream","stream","subarray","close","AdbBufferedStream","backend","localId","remoteId","super","write","iterator","resetEvent","add","onData","wait","onClose","onLowWater","notify","next","AdbCommand","AdbPacketWithoutPayload","uint32","int32","extra","checksum","command","AdbPacketStruct","afterParsed","magic","AdbPacket","AdbAuthType","async","bufferUsed","packet","payload","AdbDefaultAuthenticators","iteratorDone","iterateKeys","arg0","Token","Auth","Signature","generateKey","publicKeyBase64Length","publicKeyBuffer","PublicKey","authenticators","Constructor","tryAuth","dispatcher","writeLock","dataEvent","closeEvent","sendPacket","Write","Close","initializers","streams","Map","packetEvent","errorEvent","_running","receiveLoop","service","Open","AdbStream","packetOrCommand","values","clear","OK","has","ack","delete","handled","AdbSyncRequestId","AdbSyncResponseId","AdbSyncStringRequest","LinuxFileType","AdbSyncStatResponse","id","Stat","lastModifiedTime","AdbSyncEntryResponse","Entry","AdbSyncDataResponse","Data","AdbSyncDoneResponse","Done","instance","AdbSyncFailResponse","message","readResponse","structReader","Fail","sendLock","path","response","List","results","entry","opendir","Receive","AdbPropKey","_connected","packetDispatcher","onDisconnected","_product","_model","_device","_features","features","join","authHandler","disposableList","onPacket","Connect","parseBanner","authPacket","tryNextAuth","onError","banner","pieces","split","props","prop","keyValue","Product","Model","Device","Features","createStreamAndReadAll","createStream","propAddr","shell","trim","port","readAll","WebUsbDeviceFilter","classCode","subclassCode","protocolCode","Utf8Encoder","TextEncoder","Utf8Decoder","TextDecoder","encode","decode","device","inEndPointNumber","outEndPointNumber","onDisconnectedEvent","_inEndpointNumber","_outEndpointNumber","open","configuration","configurations","interface_","interfaces","alternate","alternates","interfaceSubclass","interfaceClass","inEndpointNumber","outEndpointNumber","configurationValue","selectConfiguration","claimed","claimInterface","interfaceNumber","alternateSetting","selectAlternateInterface","endpoint","endpoints","direction","endpointNumber","navigator","usb","requestDevice","filters","fromDevice","productName","localStorage","getItem","sIndex","dIndex","decodeBase64","cryptoKey","crypto","subtle","modulusLength","publicExponent","hash","exportKey","setItem","transferOut","transferIn","status","clearHalt","withDisplayName","Component","displayName","ErrorDialogContext","createContext","errorDialogVisible","setTrue","showErrorDialog","setFalse","hideErrorDialog","useBoolean","errorMessage","setErrorMessage","Provider","children","Dialog","hidden","dialogContentProps","normal","title","subText","DialogFooter","PrimaryButton","text","onClick","onDeviceChange","show","connecting","setConnecting","connect","pickDevice","disconnect","Stack","horizontal","verticalAlign","tokens","childrenGap","StackItem","DefaultButton","ProgressIndicator","RouteStackProps","verticalFill","className","slideUpIn10","styles","root","overflow","CacheRoute","match","everMatched","current","stackProps","display","CacheSwitch","location","element","computedMatch","contextMatch","cached","Children","forEach","child","isValidElement","isCacheRoute","from","pathname","cloneElement","toListItem","initializeFileTypeIcons","mitm","classNames","cursor","textDecoration","units","extensionName","fileName","lastIndexOf","renderDetailsHeader","defaultRender","paddingTop","delay","time","setTimeout","createReadableStreamFromBufferIterator","ReadableStream","desiredSize","written","enqueue","currentPath","setCurrentPath","currentPathRef","breadcrumbItems","part","filter","Boolean","segment","unshift","isCurrentItem","items","setItems","loading","setLoading","listRef","load","sync","linkItems","intervalId","setInterval","lastBreak","Date","now","Link","followLinkPath","lstat","File","permission","scrollToIndex","clearInterval","sortedList","setSortedList","sortKey","setSortKey","sortDescending","setSortDescendent","aIsFile","bIsFile","aSortKey","bSortKey","columns","iconName","isIconOnly","minWidth","maxWidth","isCollapsible","Icon","getFileTypeIconProps","FileIconType","linkedFolder","Directory","folder","extension","isRowHeader","onRender","toString","toLocaleString","maximumFractionDigits","formatSize","onColumnClick","column","isSorted","isSortedDescending","previewUrl","setPreviewUrl","previewImage","readableStream","receive","Response","blob","url","URL","createObjectURL","hidePreview","handleItemInvoked","selection","useConst","Selection","contextMenuItems","setContextMenuItems","contextMenuTarget","setContextMenuTarget","showContextMenu","selectedItems","getSelection","itemPath","writeableStream","createWriteStream","pipeTo","hideContextMenu","useCallback","MarqueeSelection","Breadcrumb","grow","minHeight","ShimmeredDetailsList","componentRef","setKey","layoutMode","justified","enableShimmer","onItemInvoked","onItemContextMenu","onRenderDetailsHeader","usePageCache","Layer","Overlay","style","width","height","alignItems","justifyContent","src","maxHeight","ContextualMenu","directionalHint","DirectionalHint","bottomLeftEdge","target","onDismiss","callout","CopyLink","href","calloutTarget","calloutVisible","showCallout","hideCallout","copyLink","clipboard","writeText","Callout","topCenter","Text","block","fontWeight","iframeStyle","position","top","left","visibility","onResize","rest","onResizeRef","handleResize","handleIframeRef","contentWindow","addEventListener","containerStyle","useMemo","ref","findKeyword","setFindKeyword","findAddonRef","handleFindKeywordChange","newValue","findNext","incremental","findPrevious","terminal","setTerminal","fitAddonRef","handleContainerRef","scrollback","findAddon","loadAddon","fitAddon","fit","reset","SearchBox","placeholder","onChange","onSearch","IconButton","disabled","iconProps","tcpPort","setTcpAddresses","queryTcpAddress","getDaemonTcpAddresses","tcpPortValue","setTcpPortValue","tcpPortInputId","useId","enableTcp","setDaemonTcpPort","parseInt","console","log","disableTcp","disableDaemonTcp","MessageBar","Label","htmlFor","TextField","render","setDevice","routes","exact","product","model","variant","Separator","Nav","groups","links","route","selectedKey","to","document","getElementById"],"mappings":"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","file":"index.4b5568e64c84d18e25a1.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"2YZa\",1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Disposable } from './disposable';\nimport { EventListener, RemoveEventListener } from './event';\n\ninterface EventListenerInfo<TEvent, TResult = unknown> {\n    listener: EventListener<TEvent, any, any, TResult>;\n\n    thisArg: unknown;\n\n    args: unknown[];\n}\n\nexport class EventEmitter<TEvent, TResult = unknown> implements Disposable {\n    protected listeners: EventListenerInfo<TEvent, TResult>[] = [];\n\n    public constructor() {\n        this.event = this.event.bind(this);\n    }\n\n    public event(\n        listener: EventListener<TEvent, unknown, [], TResult>\n    ): RemoveEventListener;\n    public event<TThis, TArgs extends unknown[]>(\n        listener: EventListener<TEvent, TThis, TArgs, TResult>,\n        thisArg: TThis,\n        ...args: TArgs\n    ): RemoveEventListener;\n    public event<TThis, TArgs extends unknown[]>(\n        listener: EventListener<TEvent, TThis, TArgs, TResult>,\n        thisArg?: TThis,\n        ...args: TArgs\n    ): RemoveEventListener {\n        const info: EventListenerInfo<TEvent, TResult> = {\n            listener,\n            thisArg,\n            args,\n        };\n        this.listeners.push(info);\n\n        const remove: RemoveEventListener = () => {\n            const index = this.listeners.indexOf(info);\n            if (index > 0) {\n                this.listeners.splice(index, 1);\n            }\n        };\n        remove.dispose = remove;\n        return remove;\n    }\n\n    public fire(e: TEvent) {\n        for (const info of this.listeners.slice()) {\n            info.listener.apply(info.thisArg, [e, ...info.args]);\n        }\n    }\n\n    public dispose() {\n        this.listeners.length = 0;\n    }\n}\n","import { Event } from './event';\nimport { EventEmitter } from './event-emitter';\n\nexport type AsyncEventResult = void | Promise<void>;\n\nexport type AsyncEvent<TEvent> = Event<TEvent, AsyncEventResult>;\n\nexport class AsyncEventEmitter<TEvent> extends EventEmitter<TEvent, AsyncEventResult> {\n    public async fire(e: TEvent) {\n        for (const info of this.listeners) {\n            await info.listener.apply(info.thisArg, [e, ...info.args]);\n        }\n    }\n}\n","export interface Disposable {\n    dispose(): void;\n}\n\nexport class AutoDisposable implements Disposable {\n    private disposables: Disposable[] = [];\n\n    protected addDisposable<T extends Disposable>(disposable: T): T {\n        this.disposables.push(disposable);\n        return disposable;\n    }\n\n    public dispose() {\n        for (const disposable of this.disposables) {\n            disposable.dispose();\n        }\n\n        this.disposables = [];\n    }\n}\n\nexport class DisposableList extends AutoDisposable {\n    public add<T extends Disposable>(disposable: T): T {\n        return this.addDisposable(disposable);\n    }\n}\n","const BigInt0 = BigInt(0);\nconst BigInt1 = BigInt(1);\nconst BigInt2 = BigInt(2);\n\nconst BigInt2To64 = BigInt2 ** BigInt(64);\n\nexport function getBig(\n    buffer: ArrayBuffer,\n    offset = 0,\n    length = buffer.byteLength - offset\n): bigint {\n    const view = new DataView(buffer);\n\n    let result = BigInt0;\n\n    // Now `length` must be a multiplication of 8\n    // Support for arbitrary length can be easily added\n\n    for (let i = offset; i < offset + length; i += 8) {\n        result *= BigInt2To64;\n        const value = view.getBigUint64(i, false);\n        result += value;\n    }\n\n    return result;\n}\n\nexport function setBig(buffer: ArrayBuffer, value: bigint, offset: number = 0) {\n    const uint64Array: bigint[] = [];\n    while (value > BigInt0) {\n        uint64Array.push(BigInt.asUintN(64, value));\n        value /= BigInt2To64;\n    }\n\n    const view = new DataView(buffer);\n    for (let i = uint64Array.length - 1; i >= 0; i -= 1) {\n        view.setBigUint64(offset, uint64Array[i], false);\n        offset += 8;\n    }\n}\n\nexport function setBigLE(buffer: ArrayBuffer, value: bigint, offset = 0) {\n    const view = new DataView(buffer);\n    while (value > BigInt0) {\n        view.setBigUint64(offset, value, true);\n        offset += 8;\n        value /= BigInt2To64;\n    }\n}\n\n// These values are correct only if\n// modulus length is 2048 and\n// public exponent (e) is 65537\n// Anyway, that's how this library generates keys\n\n// To support other parameters,\n// a proper ASN.1 parser can be used\n\n// References:\n//\n//   https://tools.ietf.org/html/rfc8017#appendix-A.1.2\n//   PKCS #1: RSA Cryptography Specifications Version 2.2\n//     A.1.2.  RSA Private Key Syntax\n//\n//   https://lapo.it/asn1js/\n//   https://github.com/lapo-luchini/asn1js\n//   ASN.1 JavaScript decoder\n//\n//   https://www.itu.int/rec/T-REC-X.690-201508-I/en\n//   X.690: Specification of Distinguished Encoding Rules (DER)\n\nconst RsaPrivateKeyNOffset = 38;\nconst RsaPrivateKeyNLength = 2048 / 8;\nconst RsaPrivateKeyDOffset = 303;\nconst RsaPrivateKeyDLength = 2048 / 8;\n\nexport function parsePrivateKey(key: ArrayBuffer): [n: bigint, d: bigint] {\n    let n = getBig(key, RsaPrivateKeyNOffset, RsaPrivateKeyNLength);\n    let d = getBig(key, RsaPrivateKeyDOffset, RsaPrivateKeyDLength);\n\n    return [n, d];\n}\n\n// Taken from https://stackoverflow.com/a/51562038\n// I can't understand, but it does work\n// Only used with numbers less than 2^32 so doesn't need BigInt\nexport function modInverse(a: number, m: number) {\n    // validate inputs\n    [a, m] = [Number(a), Number(m)];\n    if (Number.isNaN(a) || Number.isNaN(m)) {\n        return NaN; // invalid input\n    }\n    a = (a % m + m) % m;\n    if (!a || m < 2) {\n        return NaN; // invalid input\n    }\n    // find the gcd\n    const s = [];\n    let b = m;\n    while (b) {\n        [a, b] = [b, a % b];\n        s.push({ a, b });\n    }\n    if (a !== 1) {\n        return NaN; // inverse does not exists\n    }\n    // find the inverse\n    let x = 1;\n    let y = 0;\n    for (let i = s.length - 2; i >= 0; --i) {\n        [x, y] = [y, x - y * Math.floor(s[i].a / s[i].b)];\n    }\n    return (y % m + m) % m;\n}\n\nexport function calculatePublicKeyLength() {\n    return 4 + 4 + 2048 / 8 + 2048 / 8 + 4;\n}\n\nexport function calculatePublicKey(\n    privateKey: ArrayBuffer\n): ArrayBuffer;\nexport function calculatePublicKey(\n    privateKey: ArrayBuffer,\n    output: ArrayBuffer,\n    outputOffset?: number\n): number;\nexport function calculatePublicKey(\n    privateKey: ArrayBuffer,\n    output?: ArrayBuffer,\n    outputOffset: number = 0\n): ArrayBuffer | number {\n    // Android has its own public key generation algorithm\n    // See https://github.com/aosp-mirror/platform_system_core/blob/e5c9bbd45381d7bd72fef232d1c6668946253ac8/libcrypto_utils/android_pubkey.cpp#L111\n\n    // The public key is an array of\n    //\n    // [\n    //   modulusLengthInWords, // 32-bit integer, a \"word\" is 32-bit so it must be 2048 / 8 / 4\n    //                         // Actually the comment in Android source code was wrong\n    //   n0inv,                // 32-bit integer, the modular inverse of (lower 32 bits of) n\n    //   modulus,              // n\n    //   rr,                   // Montgomery parameter R^2\n    //   exponent,             // 32-bit integer, must be 65537\n    // ]\n    //\n    // (All in little endian)\n    // See https://github.com/aosp-mirror/platform_system_core/blob/e5c9bbd45381d7bd72fef232d1c6668946253ac8/libcrypto_utils/android_pubkey.cpp#L38\n\n    // extract `n` from private key\n    const [n] = parsePrivateKey(privateKey);\n\n    let outputType: 'ArrayBuffer' | 'number';\n    const outputLength = calculatePublicKeyLength();\n    if (!output) {\n        output = new ArrayBuffer(outputLength);\n        outputType = 'ArrayBuffer';\n    } else {\n        if (output.byteLength - outputOffset < outputLength) {\n            throw new Error('output buffer is too small');\n        }\n\n        outputType = 'number';\n    }\n\n    const outputView = new DataView(output);\n\n    // modulusLengthInWords\n    outputView.setUint32(outputOffset, 2048 / 8 / 4, true);\n    outputOffset += 4;\n\n    // Calculate `n0inv`\n    // Don't know why need to multiple -1\n    // Didn't exist in Android codebase\n    const n0inv = modInverse(Number(BigInt.asUintN(32, n) * BigInt(-1)), 2 ** 32);\n    outputView.setUint32(outputOffset, n0inv, true);\n    outputOffset += 4;\n\n    // Write n\n    setBigLE(output, n, outputOffset);\n    outputOffset += 256;\n\n    // Calculate rr = (2^(rsa_size)) ^ 2 mod n\n    let rr = BigInt(2) ** BigInt(4096) % n;\n    setBigLE(output, rr, outputOffset);\n    outputOffset += 256;\n\n    // exponent\n    outputView.setUint32(outputOffset, 65537, true);\n    outputOffset += 4;\n\n    if (outputType === 'ArrayBuffer') {\n        return output;\n    } else {\n        return outputLength;\n    }\n}\n\n// Modular exponentiation\n// See https://en.wikipedia.org/wiki/Modular_exponentiation#Implementation_in_Lua\nexport function powMod(base: bigint, exponent: bigint, modulus: bigint): bigint {\n    if (modulus === BigInt1) {\n        return BigInt0;\n    }\n\n    let r = BigInt1;\n    base = base % modulus;\n\n    while (exponent > BigInt0) {\n        if (BigInt.asUintN(1, exponent) === BigInt1) {\n            r = r * base % modulus;\n        }\n\n        exponent >>= BigInt1;\n        base = base ** BigInt2 % modulus;\n    }\n\n    return r;\n}\n\nexport const Sha1DigestLength = 20;\n\nexport const Asn1Sequence = 0x30;\nexport const Asn1OctetString = 0x04;\nexport const Asn1Null = 0x05;\nexport const Asn1Oid = 0x06;\n\n// PKCS#1 SHA-1 hash digest info\nexport const Sha1DigestInfo = [\n    Asn1Sequence, 0x0d + Sha1DigestLength,\n    Asn1Sequence, 0x09,\n    // SHA-1 (1 3 14 3 2 26)\n    Asn1Oid, 0x05, 1 * 40 + 3, 14, 3, 2, 26,\n    Asn1Null, 0x00,\n    Asn1OctetString, Sha1DigestLength\n];\n\n// SubtleCrypto.sign() will hash the given data and sign the hash\n// But we don't need the hashing step\n// (In another word, ADB just requires the client to\n// encrypt the given data with its private key)\n// However SubtileCrypto.encrypt() doesn't accept 'RSASSA-PKCS1-v1_5' algorithm\n// So we need to implement the encryption by ourself\nexport function sign(privateKey: ArrayBuffer, data: ArrayBuffer): ArrayBuffer {\n    const [n, d] = parsePrivateKey(privateKey);\n\n    // PKCS#1 padding\n    const padded = new Uint8Array(256);\n    let index = 0;\n\n    padded[index] = 0;\n    index += 1;\n\n    padded[index] = 1;\n    index += 1;\n\n    const fillLength = padded.length - Sha1DigestInfo.length - data.byteLength - 1;\n    while (index < fillLength) {\n        padded[index] = 0xff;\n        index++;\n    }\n\n    padded[index] = 0;\n    index += 1;\n\n    padded.set(new Uint8Array(Sha1DigestInfo), index);\n    index += Sha1DigestInfo.length;\n\n    padded.set(new Uint8Array(data), index);\n\n    // Encryption\n    // signature = padded ** d % n\n    let signature = powMod(getBig(padded.buffer), d, n);\n\n    // Put into an ArrayBuffer\n    const result = new ArrayBuffer(256);\n    setBig(result, signature);\n\n    return result;\n}\n","export const BackingField = Symbol('BackingField');\n\nexport const enum FieldType {\n    Number,\n    FixedLengthArray,\n    VariableLengthArray,\n}\n\nexport interface FieldDescriptorBaseOptions {\n\n}\n\nexport interface FieldDescriptorBase<\n    TName extends string = string,\n    TResultObject = {},\n    TInitObject = {},\n    TOptions extends FieldDescriptorBaseOptions = FieldDescriptorBaseOptions\n    > {\n    type: FieldType | string;\n\n    name: TName;\n\n    options: TOptions;\n\n    resultObject?: TResultObject;\n\n    initObject?: TInitObject;\n}\n","import { BackingField, FieldDescriptorBase, FieldDescriptorBaseOptions } from './descriptor';\n\nexport namespace Array {\n    export const enum SubType {\n        ArrayBuffer,\n        String,\n    }\n\n    export type TypeScriptType<TType extends SubType = SubType> =\n        TType extends SubType.ArrayBuffer ? ArrayBuffer :\n        TType extends SubType.String ? string :\n        ArrayBuffer | string;\n\n    export interface BackingField {\n        buffer?: ArrayBuffer;\n\n        string?: string;\n    }\n\n    export function getBackingField(object: any, name: string): BackingField {\n        return object[BackingField][name];\n    }\n\n    export function setBackingField(object: any, name: string, value: BackingField): void {\n        object[BackingField][name] = value;\n    }\n\n    export function initialize(object: any, field: Array, value: BackingField): void {\n        switch (field.subType) {\n            case SubType.ArrayBuffer:\n                Object.defineProperty(object, field.name, {\n                    configurable: true,\n                    enumerable: true,\n                    get(): ArrayBuffer {\n                        return getBackingField(object, field.name).buffer!;\n                    },\n                    set(buffer: ArrayBuffer) {\n                        setBackingField(object, field.name, { buffer });\n                    },\n                });\n                break;\n            case SubType.String:\n                Object.defineProperty(object, field.name, {\n                    configurable: true,\n                    enumerable: true,\n                    get(): string {\n                        return getBackingField(object, field.name).string!;\n                    },\n                    set(string: string) {\n                        setBackingField(object, field.name, { string });\n                    },\n                });\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n        setBackingField(object, field.name, value);\n    }\n}\n\nexport interface Array<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TResultObject = {},\n    TInitObject = {},\n    TOptions extends FieldDescriptorBaseOptions = FieldDescriptorBaseOptions\n    > extends FieldDescriptorBase<\n    TName,\n    TResultObject,\n    TInitObject,\n    TOptions\n    > {\n    subType: TType;\n}\n","import { FieldDescriptorBase, FieldType } from './descriptor';\n\nexport interface StructSerializationContext {\n    encodeUtf8(input: string): ArrayBuffer;\n}\n\nexport interface StructDeserializationContext extends StructSerializationContext {\n    decodeUtf8(buffer: ArrayBuffer): string;\n\n    read(length: number): ArrayBuffer | Promise<ArrayBuffer>;\n}\n\nexport interface StructOptions {\n    littleEndian: boolean;\n}\n\nexport interface FieldTypeDefinition<\n    TDescriptor extends FieldDescriptorBase = FieldDescriptorBase,\n    > {\n    type: FieldType | string;\n\n    deserialize(options: {\n        context: StructDeserializationContext;\n        field: TDescriptor;\n        object: any;\n        options: StructOptions;\n    }): Promise<void>;\n\n    getSize(options: {\n        field: TDescriptor;\n        options: StructOptions;\n    }): number;\n\n    getDynamicSize?(options: {\n        context: StructSerializationContext,\n        field: TDescriptor,\n        object: any,\n        options: StructOptions,\n    }): number;\n\n    initialize?(options: {\n        context: StructSerializationContext;\n        field: TDescriptor;\n        init: any;\n        object: any;\n        options: StructOptions;\n    }): void;\n\n    serialize(options: {\n        context: StructSerializationContext;\n        dataView: DataView;\n        field: TDescriptor;\n        object: any;\n        offset: number;\n        options: StructOptions;\n    }): void;\n}\n\nconst registry: Record<number | string, FieldTypeDefinition> = {};\n\nexport function getFieldTypeDefinition(type: FieldType | string): FieldTypeDefinition {\n    return registry[type];\n}\n\nexport function registerFieldTypeDefinition<\n    TDescriptor extends FieldDescriptorBase,\n    TDefinition extends FieldTypeDefinition<TDescriptor>\n>(\n    _field: TDescriptor,\n    methods: TDefinition\n): void {\n    registry[methods.type] = methods;\n}\n","import { registerFieldTypeDefinition } from './definition';\nimport { BackingField, FieldDescriptorBase, FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace Number {\n    export type TypeScriptType = number;\n\n    export const enum SubType {\n        Int32,\n        Uint32,\n    }\n\n    export const SizeMap: Record<SubType, number> = {\n        [SubType.Int32]: 4,\n        [SubType.Uint32]: 4,\n    };\n\n    export const DataViewGetterMap = {\n        [SubType.Int32]: 'getInt32',\n        [SubType.Uint32]: 'getUint32',\n    } as const;\n\n    export const DataViewSetterMap = {\n        [SubType.Int32]: 'setInt32',\n        [SubType.Uint32]: 'setUint32',\n    } as const;\n}\n\nexport interface Number<\n    TName extends string = string,\n    TTypeScriptType = Number.TypeScriptType,\n    TOptions extends FieldDescriptorBaseOptions = FieldDescriptorBaseOptions\n    > extends FieldDescriptorBase<\n    TName,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType>,\n    TOptions\n    > {\n    type: FieldType.Number;\n\n    subType: Number.SubType;\n}\n\nregisterFieldTypeDefinition(undefined as unknown as Number, {\n    type: FieldType.Number,\n\n    getSize({ field }) {\n        return Number.SizeMap[field.subType];\n    },\n\n    async deserialize({ context, field, object, options }) {\n        const buffer = await context.read(Number.SizeMap[field.subType]);\n        const view = new DataView(buffer);\n        const value = view[Number.DataViewGetterMap[field.subType]](\n            0,\n            options.littleEndian\n        );\n        object[BackingField][field.name] = value;\n        Object.defineProperty(object, field.name, {\n            configurable: true,\n            enumerable: true,\n            get() { return object[BackingField][field.name]; },\n            set(value) { object[BackingField][field.name] = value; },\n        });\n    },\n\n    serialize({ dataView, field, object, offset, options }) {\n        dataView[Number.DataViewSetterMap[field.subType]](\n            offset,\n            object[field.name],\n            options.littleEndian\n        );\n    },\n});\n","import { Identity } from '../utils';\nimport { Array } from './array';\nimport { registerFieldTypeDefinition, StructSerializationContext } from './definition';\nimport { BackingField, FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace VariableLengthArray {\n    export type TypeScriptTypeCanBeUndefined<\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > =\n        TEmptyBehavior extends EmptyBehavior.Empty ? never :\n        undefined;\n\n    export type TypeScriptType<\n        TType extends Array.SubType = Array.SubType,\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > =\n        Identity<\n            Array.TypeScriptType<TType> |\n            TypeScriptTypeCanBeUndefined<TEmptyBehavior>\n        >;\n\n    export const enum EmptyBehavior {\n        Undefined,\n        Empty,\n    }\n\n    export type KeyOfType<TObject, TProperty> =\n        {\n            [TKey in keyof TObject]:\n            TObject[TKey] extends TProperty ? TKey : never\n        }[keyof TObject];\n\n    export interface Options<\n        TInit = object,\n        TLengthField extends KeyOfType<TInit, number> = any,\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > extends FieldDescriptorBaseOptions {\n        lengthField: TLengthField;\n\n        emptyBehavior?: TEmptyBehavior;\n    }\n\n    export function getLengthBackingField(object: any, field: VariableLengthArray): number | undefined {\n        return object[BackingField][field.options.lengthField];\n    }\n\n    export function setLengthBackingField(\n        object: any,\n        field: VariableLengthArray,\n        value: number | undefined\n    ) {\n        object[BackingField][field.options.lengthField] = value;\n    }\n\n    export function initialize(\n        object: any,\n        field: VariableLengthArray,\n        value: Array.BackingField,\n        context: StructSerializationContext,\n    ): void {\n        Array.initialize(object, field, value);\n        const descriptor = Object.getOwnPropertyDescriptor(object, field.name)!;\n        delete object[field.name];\n\n        switch (field.subType) {\n            case Array.SubType.ArrayBuffer:\n                Object.defineProperty(object, field.name, {\n                    ...descriptor,\n                    set(buffer: ArrayBuffer | undefined) {\n                        descriptor.set!.call(object, buffer);\n                        setLengthBackingField(object, field, buffer?.byteLength ?? 0);\n                    },\n                });\n\n                delete object[field.options.lengthField];\n                Object.defineProperty(object, field.options.lengthField, {\n                    configurable: true,\n                    enumerable: true,\n                    get() {\n                        return getLengthBackingField(object, field);\n                    }\n                });\n                break;\n            case Array.SubType.String:\n                Object.defineProperty(object, field.name, {\n                    ...descriptor,\n                    set(string: string | undefined) {\n                        descriptor.set!.call(object, string);\n                        if (string) {\n                            setLengthBackingField(object, field, undefined);\n                        } else {\n                            setLengthBackingField(object, field, 0);\n                        }\n                    },\n                });\n\n                delete object[field.options.lengthField];\n                Object.defineProperty(object, field.options.lengthField, {\n                    configurable: true,\n                    enumerable: true,\n                    get() {\n                        let value = getLengthBackingField(object, field);\n                        if (value === undefined) {\n                            const backingField = Array.getBackingField(object, field.name);\n                            const buffer = context.encodeUtf8(backingField.string!);\n                            backingField.buffer = buffer;\n\n                            value = buffer.byteLength;\n                            setLengthBackingField(object, field, value);\n                        }\n                        return value;\n                    }\n                });\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n        Array.setBackingField(object, field.name, value);\n        if (value.buffer) {\n            setLengthBackingField(object, field, value.buffer.byteLength);\n        }\n    }\n}\n\nexport interface VariableLengthArray<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TInit = object,\n    TLengthField extends VariableLengthArray.KeyOfType<TInit, number> = any,\n    TEmptyBehavior extends VariableLengthArray.EmptyBehavior = VariableLengthArray.EmptyBehavior,\n    TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>,\n    TOptions extends VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior> = VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>\n    > extends Array<\n    TName,\n    TType,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType> & Record<TLengthField, never>,\n    TOptions\n    > {\n    type: FieldType.VariableLengthArray;\n\n    options: TOptions;\n}\n\nregisterFieldTypeDefinition(undefined as unknown as VariableLengthArray, {\n    type: FieldType.VariableLengthArray,\n\n    async deserialize({ context, field, object }) {\n        const value: Array.BackingField = {};\n        const length = object[field.options.lengthField];\n        if (length === 0) {\n            if (field.options.emptyBehavior === VariableLengthArray.EmptyBehavior.Empty) {\n                value.buffer = new ArrayBuffer(0);\n                value.string = '';\n            }\n\n            VariableLengthArray.initialize(object, field, value, context);\n            return;\n        }\n\n        value.buffer = await context.read(length);\n        switch (field.subType) {\n            case Array.SubType.ArrayBuffer:\n                break;\n            case Array.SubType.String:\n                value.string = context.decodeUtf8(value.buffer);\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n        VariableLengthArray.initialize(object, field, value, context);\n    },\n\n    getSize() { return 0; },\n\n    getDynamicSize({ field, object }) {\n        return object[field.options.lengthField];\n    },\n\n    initialize({ context, field, init, object }) {\n        VariableLengthArray.initialize(object, field, {}, context);\n        object[field.name] = init[field.name];\n    },\n\n    serialize({ dataView, field, object, offset }) {\n        const backingField = Array.getBackingField(object, field.name);\n        new Uint8Array(dataView.buffer).set(\n            new Uint8Array(backingField.buffer!),\n            offset\n        );\n    },\n});\n","import { Array } from './array';\nimport { registerFieldTypeDefinition } from './definition';\nimport { FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace FixedLengthArray {\n    export interface Options extends FieldDescriptorBaseOptions {\n        length: number;\n    }\n}\n\nexport interface FixedLengthArray<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TTypeScriptType = Array.TypeScriptType<TType>,\n    TOptions extends FixedLengthArray.Options = FixedLengthArray.Options\n    > extends Array<\n    TName,\n    TType,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType>,\n    TOptions\n    > {\n    type: FieldType.FixedLengthArray;\n\n    options: TOptions;\n};\n\nregisterFieldTypeDefinition(undefined as unknown as FixedLengthArray, {\n    type: FieldType.FixedLengthArray,\n\n    async deserialize({ context, field, object, }) {\n        const value: Array.BackingField = {\n            buffer: await context.read(field.options.length),\n        };\n\n        switch (field.subType) {\n            case Array.SubType.ArrayBuffer:\n                break;\n            case Array.SubType.String:\n                value.string = context.decodeUtf8(value.buffer!);\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n\n        Array.initialize(object, field, value);\n    },\n\n    getSize({ field }) {\n        return field.options.length;\n    },\n\n    initialize({ field, init, object }) {\n        Array.initialize(object, field, {});\n        object[field.name] = init[field.name];\n    },\n\n    serialize({ context, dataView, field, object, offset }) {\n        const backingField = Array.getBackingField(object, field.name);\n        backingField.buffer ??=\n            context.encodeUtf8(backingField.string!);\n\n        new Uint8Array(dataView.buffer).set(\n            new Uint8Array(backingField.buffer),\n            offset\n        );\n    }\n});\n","import { Array, BackingField, FieldDescriptorBase, FieldDescriptorBaseOptions, FieldType, FixedLengthArray, getFieldTypeDefinition, Number, StructDeserializationContext, StructOptions, StructSerializationContext, VariableLengthArray } from './field';\nimport { Evaluate, Identity } from './utils';\n\nexport type StructValueType<T extends Struct<object, object, unknown>> =\n    T extends { deserialize(reader: StructDeserializationContext): Promise<infer R>; } ? R : never;\n\nexport type StructInitType<T extends Struct<object, object, unknown>> =\n    T extends { create(value: infer R, ...args: any): any; } ? R : never;\n\nexport const StructDefaultOptions: Readonly<StructOptions> = {\n    littleEndian: false,\n};\n\ninterface AddArrayFieldDescriptor<\n    TResult extends object,\n    TInit extends object,\n    TAfterParsed\n    > {\n    <\n        TName extends string,\n        TType extends Array.SubType,\n        TTypeScriptType = Array.TypeScriptType<TType>\n        >(\n        name: TName,\n        type: TType,\n        options: FixedLengthArray.Options,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TAfterParsed,\n        FixedLengthArray<\n            TName,\n            TType,\n            TTypeScriptType\n        >\n    >;\n\n    <\n        TName extends string,\n        TType extends Array.SubType,\n        TLengthField extends VariableLengthArray.KeyOfType<TInit, number>,\n        TEmptyBehavior extends VariableLengthArray.EmptyBehavior,\n        TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>\n        >(\n        name: TName,\n        type: TType,\n        options: VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TAfterParsed,\n        VariableLengthArray<\n            TName,\n            TType,\n            TInit,\n            TLengthField,\n            TEmptyBehavior,\n            TTypeScriptType\n        >\n    >;\n}\n\ninterface AddArraySubTypeFieldDescriptor<\n    TResult extends object,\n    TInit extends object,\n    TAfterParsed,\n    TType extends Array.SubType\n    > {\n    <\n        TName extends string,\n        TTypeScriptType = Array.TypeScriptType<TType>\n        >(\n        name: TName,\n        options: FixedLengthArray.Options,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TAfterParsed,\n        FixedLengthArray<\n            TName,\n            TType,\n            TTypeScriptType\n        >\n    >;\n\n    <\n        TName extends string,\n        TLengthField extends VariableLengthArray.KeyOfType<TInit, number>,\n        TEmptyBehavior extends VariableLengthArray.EmptyBehavior,\n        TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>\n        >(\n        name: TName,\n        options: VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>,\n        _typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TAfterParsed,\n        VariableLengthArray<\n            TName,\n            TType,\n            TInit,\n            TLengthField,\n            TEmptyBehavior,\n            TTypeScriptType\n        >\n    >;\n}\n\nexport type OmitNever<T> = Pick<T, { [K in keyof T]: [T[K]] extends [never] ? never : K }[keyof T]>;\n\ntype MergeStruct<\n    TResult extends object,\n    TInit extends object,\n    TAfterParsed,\n    TDescriptor extends FieldDescriptorBase\n    > =\n    Identity<Struct<\n        Evaluate<TResult & Exclude<TDescriptor['resultObject'], undefined>>,\n        Evaluate<OmitNever<TInit & Exclude<TDescriptor['initObject'], undefined>>>,\n        TAfterParsed\n    >>;\n\ntype WithBackingField<T> = T & { [BackingField]: any; };\n\nexport type StructExtraResult<TResult, TExtra> =\n    Evaluate<Omit<TResult, keyof TExtra> & TExtra>;\n\nexport type StructAfterParsed<TResult, TAfterParsed> =\n    (this: WithBackingField<TResult>, object: WithBackingField<TResult>) => TAfterParsed;\n\nexport default class Struct<\n    TResult extends object = {},\n    TInit extends object = {},\n    TAfterParsed = undefined,\n    > {\n    public readonly options: Readonly<StructOptions>;\n\n    private _size = 0;\n    public get size() { return this._size; }\n\n    private fields: FieldDescriptorBase[] = [];\n\n    private _extra: PropertyDescriptorMap = {};\n\n    private _afterParsed?: StructAfterParsed<any, any>;\n\n    public constructor(options: Partial<StructOptions> = StructDefaultOptions) {\n        this.options = { ...StructDefaultOptions, ...options };\n    }\n\n    private clone(): Struct<any, any, any> {\n        const result = new Struct<any, any, any>(this.options);\n        result.fields = this.fields.slice();\n        result._size = this._size;\n        result._extra = this._extra;\n        result._afterParsed = this._afterParsed;\n        return result;\n    }\n\n    public field<TDescriptor extends FieldDescriptorBase>(\n        field: TDescriptor,\n    ): MergeStruct<TResult, TInit, TAfterParsed, TDescriptor> {\n        const result = this.clone();\n        result.fields.push(field);\n\n        const definition = getFieldTypeDefinition(field.type);\n        const size = definition.getSize({ field, options: this.options });\n        result._size += size;\n\n        return result;\n    }\n\n    private number<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType\n    >(\n        name: TName,\n        type: Number.SubType,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: () => TTypeScriptType,\n    ) {\n        return this.field<Number<TName, TTypeScriptType>>({\n            type: FieldType.Number,\n            name,\n            subType: type,\n            options,\n        });\n    }\n\n    public int32<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: () => TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Int32,\n            options,\n            _typescriptType\n        );\n    }\n\n    public uint32<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: () => TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Uint32,\n            options,\n            _typescriptType\n        );\n    }\n\n    private array: AddArrayFieldDescriptor<TResult, TInit, TAfterParsed> = (\n        name: string,\n        type: Array.SubType,\n        options: FixedLengthArray.Options | VariableLengthArray.Options\n    ): Struct<any, any, any> => {\n        if ('length' in options) {\n            return this.field<FixedLengthArray>({\n                type: FieldType.FixedLengthArray,\n                name,\n                subType: type,\n                options: options,\n            });\n        } else {\n            return this.field<VariableLengthArray>({\n                type: FieldType.VariableLengthArray,\n                name,\n                subType: type,\n                options: options,\n            });\n        }\n    };\n\n    public arrayBuffer: AddArraySubTypeFieldDescriptor<\n        TResult,\n        TInit,\n        TAfterParsed,\n        Array.SubType.ArrayBuffer\n    > = <TName extends string>(\n        name: TName,\n        options: any\n    ) => {\n            return this.array(name, Array.SubType.ArrayBuffer, options);\n        };\n\n    public string: AddArraySubTypeFieldDescriptor<\n        TResult,\n        TInit,\n        TAfterParsed,\n        Array.SubType.String\n    > = <TName extends string>(\n        name: TName,\n        options: any\n    ) => {\n            return this.array(name, Array.SubType.String, options);\n        };\n\n    public extra<TExtra extends object>(\n        value: TExtra & ThisType<WithBackingField<StructExtraResult<TResult, TExtra>>>\n    ): Struct<\n        StructExtraResult<TResult, TExtra>,\n        Evaluate<Omit<TInit, keyof TExtra>>,\n        TAfterParsed\n    > {\n        const result = this.clone();\n        result._extra = { ...result._extra, ...Object.getOwnPropertyDescriptors(value) };\n        return result;\n    }\n\n    public afterParsed(\n        callback: StructAfterParsed<TResult, never>\n    ): Struct<TResult, TInit, never>;\n    public afterParsed(\n        callback?: StructAfterParsed<TResult, void>\n    ): Struct<TResult, TInit, undefined>;\n    public afterParsed<TAfterParsed>(\n        callback?: StructAfterParsed<TResult, TAfterParsed>\n    ): Struct<TResult, TInit, TAfterParsed>;\n    public afterParsed(\n        callback?: StructAfterParsed<TResult, any>\n    ): Struct<any, any, any> {\n        const result = this.clone();\n        result._afterParsed = callback;\n        return result;\n    }\n\n    public create(init: TInit, context: StructSerializationContext): TResult {\n        const object: any = {\n            [BackingField]: {},\n        };\n\n        for (const field of this.fields) {\n            const type = getFieldTypeDefinition(field.type);\n            if (type.initialize) {\n                type.initialize({\n                    context,\n                    field,\n                    init,\n                    object,\n                    options: this.options,\n                });\n            } else {\n                object[BackingField][field.name] = (init as any)[field.name];\n                Object.defineProperty(object, field.name, {\n                    configurable: true,\n                    enumerable: true,\n                    get() { return object[BackingField][field.name]; },\n                    set(value) { object[BackingField][field.name] = value; },\n                });\n            }\n        }\n\n        Object.defineProperties(object, this._extra);\n        return object;\n    }\n\n    public async deserialize(\n        context: StructDeserializationContext\n    ): Promise<TAfterParsed extends undefined ? TResult : TAfterParsed> {\n        const object: any = {\n            [BackingField]: {},\n        };\n\n        for (const field of this.fields) {\n            await getFieldTypeDefinition(field.type).deserialize({\n                context,\n                field,\n                object,\n                options: this.options,\n            });\n        }\n\n        Object.defineProperties(object, this._extra);\n\n        if (this._afterParsed) {\n            const result = this._afterParsed.call(object, object);\n            if (result) {\n                return result;\n            }\n        }\n\n        return object;\n    }\n\n    public serialize(init: TInit, context: StructSerializationContext): ArrayBuffer {\n        const object = this.create(init, context) as any;\n\n        let size = this._size;\n        let fieldSize: number[] = [];\n        for (let i = 0; i < this.fields.length; i++) {\n            const field = this.fields[i];\n            const type = getFieldTypeDefinition(field.type);\n            if (type.getDynamicSize) {\n                fieldSize[i] = type.getDynamicSize({\n                    context,\n                    field,\n                    object,\n                    options: this.options,\n                });\n                size += fieldSize[i];\n            } else {\n                fieldSize[i] = type.getSize({ field, options: this.options });\n            }\n        }\n\n        const buffer = new ArrayBuffer(size);\n        const dataView = new DataView(buffer);\n        let offset = 0;\n        for (let i = 0; i < this.fields.length; i++) {\n            const field = this.fields[i];\n            const type = getFieldTypeDefinition(field.type);\n            type.serialize({\n                context,\n                dataView,\n                field,\n                object,\n                offset,\n                options: this.options,\n            });\n            offset += fieldSize[i];\n        }\n        return buffer;\n    }\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { Disposable } from '@yume-chan/event';\n\nexport class AutoResetEvent implements Disposable {\n    private readonly list: PromiseResolver<void>[] = [];\n\n    private blocking: boolean;\n\n    public constructor(initialSet = false) {\n        this.blocking = initialSet;\n    }\n\n    public wait(): Promise<void> {\n        if (!this.blocking) {\n            this.blocking = true;\n\n            if (this.list.length === 0) {\n                return Promise.resolve();\n            }\n        }\n\n        const resolver = new PromiseResolver<void>();\n        this.list.push(resolver);\n        return resolver.promise;\n    }\n\n    public notify() {\n        if (this.list.length !== 0) {\n            this.list.pop()!.resolve();\n        } else {\n            this.blocking = false;\n        }\n    }\n\n    public dispose() {\n        for (const item of this.list) {\n            item.reject(new Error('The AutoResetEvent has been disposed'));\n        }\n        this.list.length = 0;\n    }\n}\n","interface Base64CharRange {\n    start: number;\n\n    length: number;\n\n    end: number;\n\n    offset: number;\n}\n\nlet ranges: Base64CharRange[] = [];\nconst chars: number[] = [];\nconst padding = '='.charCodeAt(0);\n\nlet offset = 0;\nfunction addRange(start: string, end: string) {\n    const startCharCode = start.charCodeAt(0);\n    const endCharCode = end.charCodeAt(0);\n    const length = endCharCode - startCharCode + 1;\n\n    for (let i = startCharCode; i <= endCharCode; i++) {\n        chars.push(i);\n    }\n\n    ranges.push({\n        start: startCharCode,\n        length: length,\n        end: endCharCode,\n        offset: startCharCode - offset,\n    });\n\n    offset += length;\n}\n\naddRange('A', 'Z');\naddRange('a', 'z');\naddRange('0', '9');\naddRange('+', '+');\naddRange('/', '/');\n\nranges = ranges.sort((a, b) => a.end - b.end);\n\nfunction toValue(char: string): number {\n    const charCode = char.charCodeAt(0);\n\n    let start = 0;\n    let end = ranges.length - 1;\n    let i = end >> 1;\n\n    while (true) {\n        const range = ranges[i];\n        if (charCode < range.start) {\n            end = i - 1;\n        } else if (charCode > range.end) {\n            start = i + 1;\n        } else {\n            return charCode - range.offset;\n        }\n        i = (start + end) >> 1;\n    }\n}\n\nexport function calculateBase64EncodedLength(inputLength: number): number {\n    const paddingLength = inputLength % 3;\n    return (inputLength + 3 - paddingLength) / 3 * 4;\n}\n\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    inputOffset?: number,\n    inputLength?: number,\n): ArrayBuffer;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    output: ArrayBuffer | Uint8Array,\n    outputOffset?: number\n): number;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    inputOffset: number,\n    output: ArrayBuffer | Uint8Array,\n    outputOffset?: number\n): number;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    inputOffset: number,\n    inputLength: number,\n    output: ArrayBuffer | Uint8Array,\n    outputOffset?: number\n): number;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    arg1?: number | ArrayBuffer | Uint8Array,\n    arg2?: number | ArrayBuffer | Uint8Array,\n    _arg3?: number | ArrayBuffer | Uint8Array,\n    _arg4?: number,\n): ArrayBuffer | Uint8Array | number {\n    if (input instanceof ArrayBuffer) {\n        input = new Uint8Array(input);\n    }\n\n    // Because `Uint8Array` is type compatible with `ArrayBuffer`,\n    // TypeScript doesn't correctly narrow `input` to `Uint8Array` when assigning.\n    // Manually eliminate `ArrayBuffer` from `input` with a type guard.\n    if (input instanceof ArrayBuffer) {\n        return input;\n    }\n\n    let inputOffset: number;\n    let inputLength: number;\n    let output: Uint8Array;\n    let outputOffset: number;\n\n    let outputArgumentIndex: number;\n    if (typeof arg1 !== 'number') {\n        inputOffset = 0;\n        inputLength = input.byteLength;\n        outputArgumentIndex = 1;\n    } else {\n        inputOffset = arg1;\n\n        if (typeof arg2 !== 'number') {\n            inputLength = input.byteLength - inputOffset;\n            outputArgumentIndex = 2;\n        } else {\n            inputLength = arg2;\n            outputArgumentIndex = 3;\n        }\n    }\n\n    const paddingLength = inputLength % 3;\n    const outputLength = (inputLength + 3 - paddingLength) / 3 * 4;\n\n    let maybeOutput: ArrayBuffer | Uint8Array | undefined = arguments[outputArgumentIndex];\n    let outputType: 'ArrayBuffer' | 'number';\n    if (maybeOutput) {\n        let maybeOutputOffset: number | undefined = arguments[outputArgumentIndex + 1];\n        if (typeof maybeOutputOffset === 'number') {\n            outputOffset = maybeOutputOffset;\n        } else {\n            outputOffset = 0;\n        }\n\n        if (maybeOutput.byteLength - outputOffset < outputLength) {\n            throw new Error('output buffer is too small');\n        }\n\n        if (maybeOutput instanceof ArrayBuffer) {\n            output = new Uint8Array(maybeOutput);\n        } else {\n            output = maybeOutput;\n        }\n\n        outputType = 'number';\n    } else {\n        const buffer = new ArrayBuffer(outputLength);\n        output = new Uint8Array(buffer);\n        outputOffset = 0;\n        outputType = 'ArrayBuffer';\n    }\n\n    // Because `Uint8Array` is type compatible with `ArrayBuffer`,\n    // TypeScript doesn't correctly narrow `output` to `Uint8Array` when assigning.\n    // Manually eliminate `ArrayBuffer` from `output` with a type guard.\n    if (output instanceof ArrayBuffer) {\n        return output;\n    }\n\n    if (input.buffer === output.buffer) {\n        const bufferInputStart = input.byteOffset + inputOffset;\n        const bufferOutputStart = output.byteOffset + outputOffset;\n        if (bufferOutputStart < bufferInputStart - 1) {\n            const bufferOutputEnd = bufferOutputStart + outputLength;\n            if (bufferOutputEnd >= bufferInputStart) {\n                throw new Error('input and output buffer can not be overlapping');\n            }\n        }\n    }\n\n    let inputIndex = inputOffset + inputLength - 1;\n    let outputIndex = outputOffset + outputLength - 1;\n\n    if (paddingLength === 1) {\n        // aaaaaabb\n        const x = input[inputIndex];\n        inputIndex -= 1;\n\n        output[outputIndex] = padding;\n        outputIndex -= 1;\n\n        output[outputIndex] = padding;\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((x & 0b11) << 4)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[x >> 2];\n        outputIndex -= 1;\n    } else if (paddingLength === 2) {\n        // bbbbcccc\n        const y = input[inputIndex];\n        inputIndex -= 1;\n\n        // aaaaaabb\n        const x = input[inputIndex];\n\n        output[outputIndex] = padding;\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((y & 0b1111) << 2)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((x & 0b11) << 4) | (y >> 4)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[x >> 2];\n        outputIndex -= 1;\n    }\n\n    while (inputIndex >= inputOffset) {\n        // ccdddddd\n        const z = input[inputIndex];\n        inputIndex -= 1;\n\n        // bbbbcccc\n        const y = input[inputIndex];\n        inputIndex -= 1;\n\n        // aaaaaabb\n        const x = input[inputIndex];\n        inputIndex -= 1;\n\n        output[outputIndex] = chars[z & 0b111111];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((y & 0b1111) << 2) | (z >> 6)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((x & 0b11) << 4) | (y >> 4)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[x >> 2];\n        outputIndex -= 1;\n    }\n\n    if (outputType === 'ArrayBuffer') {\n        return output.buffer;\n    } else {\n        return outputLength;\n    }\n}\n\nexport function decodeBase64(input: string): ArrayBuffer {\n    let padding: number;\n    if (input[input.length - 2] === '=') {\n        padding = 2;\n    } else if (input[input.length - 1] === '=') {\n        padding = 1;\n    } else {\n        padding = 0;\n    }\n\n    const result = new Uint8Array(input.length / 4 * 3 - padding);\n    let sIndex = 0;\n    let dIndex = 0;\n\n    while (sIndex < input.length - (padding !== 0 ? 4 : 0)) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const c = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const d = toValue(input[sIndex]);\n        sIndex += 1;\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n        dIndex += 1;\n\n        result[dIndex] = ((b & 0b1111) << 4) | ((c & 0b11_1100) >> 2);\n        dIndex += 1;\n\n        result[dIndex] = ((c & 0b11) << 6) | d;\n        dIndex += 1;\n    }\n\n    if (padding === 1) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const c = toValue(input[sIndex]);\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n        dIndex += 1;\n\n        result[dIndex] = ((b & 0b1111) << 4) | ((c & 0b11_1100) >> 2);\n    } else if (padding === 2) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n    }\n\n    return result.buffer;\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { EventEmitter } from '@yume-chan/event';\n\nconst IteratorReturnUndefinedResult: IteratorReturnResult<void> = {\n    done: true,\n    value: undefined,\n};\nObject.freeze(IteratorReturnUndefinedResult);\n\nexport type EventIteratorDestroyer<T> = (items: T[]) => void;\n\nexport class EventIteratorState<T> {\n    public pullQueue: PromiseResolver<IteratorResult<T>>[] = [];\n\n    public pushQueue: [value: T, size: number][] = [];\n\n    public ended = false;\n\n    public waterMark = 0;\n\n    public pendingLowWaterEvent = false;\n\n    public lowWaterEvent = new EventEmitter<void>();\n\n    public get onLowWater() { return this.lowWaterEvent.event; }\n\n    public cleanup!: EventIteratorDestroyer<T>;\n}\n\nexport class EventIteratorController<T> {\n    private state: EventIteratorState<T>;\n\n    public maxConsumerCount = Infinity;\n\n    public highWaterMark: number = 10;\n\n    public lowWaterMark: number = 0;\n\n    public get waterMark() { return this.state.waterMark; }\n\n    public get onLowWater() { return this.state.lowWaterEvent.event; }\n\n    public constructor(state: EventIteratorState<T>) {\n        this.state = state;\n    }\n\n    public push(value: T, size = 1): boolean {\n        if (this.state.pullQueue.length) {\n            this.state.pullQueue.shift()!.resolve({ done: false, value });\n            return true;\n        }\n\n        this.state.pushQueue.push([value, size]);\n        this.state.waterMark += size;\n        if (this.state.waterMark < this.highWaterMark) {\n            return true;\n        }\n\n        this.state.pendingLowWaterEvent = true;\n        return false;\n    }\n\n    public end(): void {\n        this.state.ended = true;\n        while (this.state.pullQueue.length) {\n            this.state.pullQueue.shift()!.resolve(IteratorReturnUndefinedResult);\n        }\n        this.state.cleanup(this.state.pushQueue.map(([value]) => value));\n    }\n}\n\nexport interface EventIteratorInitializer<T> {\n    (controller: EventIteratorController<T>): EventIteratorDestroyer<T>;\n}\n\nexport class EventIterable<T> implements AsyncIterable<T> {\n    private initializer: EventIteratorInitializer<T>;\n\n    public constructor(initializer: EventIteratorInitializer<T>) {\n        this.initializer = initializer;\n    }\n\n    public [Symbol.asyncIterator](): AsyncIterator<T> {\n        const state = new EventIteratorState<T>();\n        const controller = new EventIteratorController<T>(state);\n        state.cleanup = this.initializer(controller);\n        return {\n            next() {\n                if (state.pushQueue.length) {\n                    const [value, size] = state.pushQueue.shift()!;\n                    state.waterMark -= size;\n                    if (state.pendingLowWaterEvent &&\n                        state.waterMark <= controller.lowWaterMark) {\n                        state.lowWaterEvent.fire();\n                    }\n                    return Promise.resolve({ done: false, value });\n                }\n\n                if (state.ended) {\n                    return Promise.resolve(IteratorReturnUndefinedResult);\n                }\n\n                if (state.pullQueue.length < controller.maxConsumerCount) {\n                    const resolver = new PromiseResolver<IteratorResult<T>>();\n                    state.pullQueue.push(resolver);\n                    return resolver.promise;\n                }\n\n                return Promise.reject(new Error('Max consumer count exceeded'));\n            },\n            return() {\n                controller.end();\n                return Promise.resolve(IteratorReturnUndefinedResult);\n            },\n        };\n    }\n}\n","import { DisposableList } from '@yume-chan/event';\nimport { AdbStream } from './stream';\nimport { AutoResetEvent, EventIterable } from './utils';\n\nexport interface Stream {\n    /**\n     * @param length A hint of how much data should be read.\n     * @returns Data, which can be either more or less than `length`\n     */\n    read(length: number): ArrayBuffer | Promise<ArrayBuffer>;\n\n    close?(): void;\n}\n\nexport class BufferedStream<T extends Stream> {\n    protected readonly stream: T;\n\n    private buffer: Uint8Array | undefined;\n\n    public constructor(stream: T) {\n        this.stream = stream;\n    }\n\n    public async read(length: number): Promise<ArrayBuffer> {\n        let array: Uint8Array;\n        let index: number;\n        if (this.buffer) {\n            const buffer = this.buffer;\n            if (buffer.byteLength > length) {\n                this.buffer = buffer.subarray(length);\n                return buffer.slice(0, length).buffer;\n            }\n\n            array = new Uint8Array(length);\n            array.set(buffer);\n            index = buffer.byteLength;\n            this.buffer = undefined;\n        } else {\n            array = new Uint8Array(length);\n            index = 0;\n        }\n\n        while (index < length) {\n            const buffer = await this.stream.read(length - index);\n            if (buffer.byteLength > length - index) {\n                array.set(new Uint8Array(buffer, 0, length), index);\n                this.buffer = new Uint8Array(buffer, length);\n                return array.buffer;\n            }\n\n            array.set(new Uint8Array(buffer), index);\n            index += buffer.byteLength;\n        }\n\n        return array.buffer;\n    }\n\n    public close() {\n        this.stream.close?.();\n    }\n}\n\nexport class AdbBufferedStream extends BufferedStream<AdbReadableStream> {\n    public get backend() { return this.stream.backend; }\n\n    public get localId() { return this.stream.localId; }\n\n    public get remoteId() { return this.stream.remoteId; }\n\n    public constructor(stream: AdbStream) {\n        super(new AdbReadableStream(stream));\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.stream.write(data);\n    }\n}\n\nexport class AdbReadableStream {\n    private stream: AdbStream;\n\n    private iterator: AsyncIterator<ArrayBuffer> | undefined;\n\n    public get backend() { return this.stream.backend; }\n\n    public get localId() { return this.stream.localId; }\n\n    public get remoteId() { return this.stream.remoteId; }\n\n    public constructor(stream: AdbStream) {\n        this.stream = stream;\n    }\n\n    public async read(): Promise<ArrayBuffer> {\n        if (!this.iterator) {\n            this.iterator = new EventIterable<ArrayBuffer>(controller => {\n                controller.maxConsumerCount = 1;\n                controller.highWaterMark = 16 * 1024;\n\n                const disposable = new DisposableList();\n                const resetEvent = new AutoResetEvent(true);\n                disposable.add(this.stream.onData(buffer => {\n                    if (!controller.push(buffer, buffer.byteLength)) {\n                        return resetEvent.wait();\n                    }\n                    return;\n                }));\n                disposable.add(this.stream.onClose(() => {\n                    controller.end();\n                }));\n                disposable.add(controller.onLowWater(() => {\n                    resetEvent.notify();\n                }));\n\n                return () => {\n                    disposable.dispose();\n                };\n            })[Symbol.asyncIterator]();\n        }\n\n        const result = await this.iterator.next();\n        if (result.done) {\n            return new ArrayBuffer(0);\n        }\n\n        return result.value;\n    }\n\n    public async readAll(): Promise<string> {\n        let output = '';\n        while (true) {\n            const buffer = await this.read();\n            if (buffer.byteLength === 0) {\n                return output;\n            }\n\n            output += this.stream.backend.decodeUtf8(buffer);\n        }\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.stream.write(data);\n    }\n\n    close(): void {\n        this.iterator?.return?.();\n        this.stream.close();\n    }\n}\n","import { BackingField, Struct, StructInitType, StructValueType } from '@yume-chan/struct';\nimport { AdbBackend } from './backend';\nimport { BufferedStream } from './buffered-stream';\n\nexport enum AdbCommand {\n    Auth = 0x48545541,    // 'AUTH'\n    Close = 0x45534c43,   // 'CLSE'\n    Connect = 0x4e584e43, // 'CNXN'\n    OK = 0x59414b4f,      // 'OKAY'\n    Open = 0x4e45504f,    // 'OPEN'\n    Write = 0x45545257,   // 'WRTE'\n}\n\nconst AdbPacketWithoutPayload =\n    new Struct({ littleEndian: true })\n        .uint32('command', undefined)\n        .uint32('arg0')\n        .uint32('arg1')\n        .uint32('payloadLength')\n        .uint32('checksum')\n        .int32('magic')\n        .extra({\n            checksum: 0,\n            get magic() { return this.command ^ 0xFFFFFFFF; },\n        });\n\nconst AdbPacketStruct =\n    AdbPacketWithoutPayload\n        .arrayBuffer('payload', { lengthField: 'payloadLength' })\n        .afterParsed((value) => {\n            if (value[BackingField].magic !== value.magic) {\n                throw new Error('Invalid command');\n            }\n        });\n\nexport type AdbPacket = StructValueType<typeof AdbPacketStruct>;\n\nexport namespace AdbPacket {\n    export function create(init: StructInitType<typeof AdbPacketStruct>, backend: AdbBackend): AdbPacket {\n        return AdbPacketStruct.create(init, backend);\n    }\n\n    export async function read(backend: AdbBackend): Promise<AdbPacket> {\n        let buffer = await backend.read(24);\n        if (buffer.byteLength !== 24) {\n            // Maybe it's a payload from last connection.\n            // Ignore and try again\n            buffer = await backend.read(24);\n        }\n\n        let bufferUsed = false;\n        const stream = new BufferedStream({\n            read(length: number) {\n                if (!bufferUsed) {\n                    bufferUsed = true;\n                    return buffer;\n                }\n                return backend.read(length);\n            }\n        });\n\n        return AdbPacketStruct.deserialize({\n            read: stream.read.bind(stream),\n            decodeUtf8: backend.decodeUtf8.bind(backend),\n            encodeUtf8: backend.encodeUtf8.bind(backend),\n        });\n    }\n\n    export async function write(packet: AdbPacket, backend: AdbBackend): Promise<void> {\n        await backend.write(AdbPacketWithoutPayload.serialize(packet, backend));\n        if (packet.payload) {\n            await backend.write(packet.payload);\n        }\n    }\n}\n","import { AutoDisposable, Disposable } from '@yume-chan/event';\nimport { AdbBackend, AdbKeyIterator } from './backend';\nimport { calculatePublicKey, calculatePublicKeyLength, sign } from './crypto';\nimport { AdbCommand, AdbPacket } from './packet';\nimport { calculateBase64EncodedLength, encodeBase64 } from './utils';\n\nexport enum AdbAuthType {\n    Token = 1,\n    Signature = 2,\n    PublicKey = 3,\n}\n\nexport interface AdbAuthenticator extends Disposable {\n    tryAuth(packet: AdbPacket): Promise<AdbPacket | undefined>;\n}\n\nexport interface AdbAuthenticatorConstructor {\n    new(backend: AdbBackend): AdbAuthenticator;\n}\n\nexport class AdbSignatureAuthenticator implements AdbAuthenticator {\n    private readonly backend: AdbBackend;\n\n    private readonly iterator: AdbKeyIterator;\n\n    private iteratorDone = false;\n\n    public constructor(backend: AdbBackend) {\n        this.backend = backend;\n        this.iterator = backend.iterateKeys();\n    }\n\n    public async tryAuth(packet: AdbPacket): Promise<AdbPacket | undefined> {\n        if (packet.arg0 !== AdbAuthType.Token) {\n            return undefined;\n        }\n\n        const next = await this.iterator.next();\n        if (next.done) {\n            this.iteratorDone = true;\n            return undefined;\n        }\n\n        const signature = sign(next.value, packet.payload!);\n\n        return AdbPacket.create({\n            command: AdbCommand.Auth,\n            arg0: AdbAuthType.Signature,\n            arg1: 0,\n            payload: signature\n        }, this.backend);\n    }\n\n    public dispose() {\n        if (!this.iteratorDone) {\n            this.iterator.return?.();\n        }\n    }\n}\n\nexport class AdbPublicKeyAuthenticator implements AdbAuthenticator {\n    private backend: AdbBackend;\n\n    public constructor(backend: AdbBackend) {\n        this.backend = backend;\n    }\n\n    public async tryAuth(): Promise<AdbPacket> {\n        let privateKey: ArrayBuffer;\n\n        const iterator = this.backend.iterateKeys();\n        const next = await iterator.next();\n        if (!next.done) {\n            privateKey = next.value;\n            await iterator.return?.();\n        } else {\n            privateKey = await this.backend.generateKey();\n        }\n\n        const publicKeyLength = calculatePublicKeyLength();\n        const publicKeyBase64Length = calculateBase64EncodedLength(publicKeyLength);\n\n        // ADBd needs an extra null terminator,\n        // So we allocate the buffer with one extra byte.\n        const publicKeyBuffer = new ArrayBuffer(publicKeyBase64Length + 1);\n\n        calculatePublicKey(privateKey, publicKeyBuffer);\n        encodeBase64(publicKeyBuffer, 0, publicKeyLength, publicKeyBuffer);\n\n        return AdbPacket.create({\n            command: AdbCommand.Auth,\n            arg0: AdbAuthType.PublicKey,\n            arg1: 0,\n            payload: publicKeyBuffer\n        }, this.backend);\n    }\n\n    public dispose() {\n        // do nothing\n    }\n}\n\nexport const AdbDefaultAuthenticators: AdbAuthenticatorConstructor[] = [\n    AdbSignatureAuthenticator,\n    AdbPublicKeyAuthenticator\n];\n\nexport class AdbAuthenticationHandler extends AutoDisposable {\n    public readonly authenticators: readonly AdbAuthenticator[];\n\n    private index = 0;\n\n    public constructor(\n        authenticators: readonly AdbAuthenticatorConstructor[],\n        backend: AdbBackend\n    ) {\n        super();\n\n        this.authenticators = authenticators.map(\n            Constructor => this.addDisposable(new Constructor(backend))\n        );\n    }\n\n    public async tryNextAuth(packet: AdbPacket): Promise<AdbPacket> {\n        while (this.index < this.authenticators.length) {\n            const result = await this.authenticators[this.index].tryAuth(packet);\n            if (result) {\n                return result;\n            }\n\n            this.index += 1;\n        }\n\n        throw new Error('Cannot authenticate with device');\n    }\n}\n","import AsyncOperationManager from '@yume-chan/async-operation-manager';\nimport { AsyncEventEmitter, AutoDisposable, EventEmitter } from '@yume-chan/event';\nimport { AdbBackend } from './backend';\nimport { AdbCommand, AdbPacket } from './packet';\nimport { AutoResetEvent } from './utils';\n\nexport class AdbStreamController extends AutoDisposable {\n    private readonly writeLock = this.addDisposable(new AutoResetEvent());\n\n    public readonly dispatcher: AdbPacketDispatcher;\n\n    public get backend() { return this.dispatcher.backend; }\n\n    public readonly localId: number;\n\n    public readonly remoteId: number;\n\n    public readonly dataEvent = this.addDisposable(new AsyncEventEmitter<ArrayBuffer>());\n\n    private readonly closeEvent = this.addDisposable(new EventEmitter<void>());\n\n    public get onClose() { return this.closeEvent.event; }\n\n    public constructor(localId: number, remoteId: number, dispatcher: AdbPacketDispatcher) {\n        super();\n\n        this.localId = localId;\n        this.remoteId = remoteId;\n        this.dispatcher = dispatcher;\n    }\n\n    public async write(data: ArrayBuffer): Promise<void> {\n        await this.writeLock.wait();\n        await this.dispatcher.sendPacket(AdbCommand.Write, this.localId, this.remoteId, data);\n    }\n\n    public ack() {\n        this.writeLock.notify();\n    }\n\n    public close() {\n        return this.dispatcher.sendPacket(AdbCommand.Close, this.localId, this.remoteId);\n    }\n\n    public dispose() {\n        this.closeEvent.fire();\n        super.dispose();\n    }\n}\n\nexport interface AdbPacketArrivedEventArgs {\n    handled: boolean;\n\n    packet: AdbPacket;\n}\n\nexport class AdbPacketDispatcher extends AutoDisposable {\n    public readonly backend: AdbBackend;\n\n    // ADB requires stream id to start from 1\n    // (0 means open failed)\n    private readonly initializers = new AsyncOperationManager(1);\n    private readonly streams = new Map<number, AdbStreamController>();\n\n    private readonly packetEvent = this.addDisposable(new EventEmitter<AdbPacketArrivedEventArgs>());\n    public get onPacket() { return this.packetEvent.event; }\n\n    private readonly errorEvent = this.addDisposable(new EventEmitter<Error>());\n    public get onError() { return this.errorEvent.event; }\n\n    private _running = true;\n    public get running() { return this._running; }\n\n    public constructor(backend: AdbBackend) {\n        super();\n\n        this.backend = backend;\n        this.receiveLoop();\n    }\n\n    public async createStream(service: string): Promise<AdbStream> {\n        const [localId, initializer] = this.initializers.add<number>();\n        await this.sendPacket(AdbCommand.Open, localId, 0, service);\n\n        const remoteId = await initializer;\n        const controller = new AdbStreamController(localId, remoteId, this);\n        this.streams.set(controller.localId, controller);\n\n        return new AdbStream(controller);\n    }\n\n    public sendPacket(packet: AdbPacket): Promise<void>;\n    public sendPacket(\n        command: AdbCommand,\n        arg0: number,\n        arg1: number,\n        payload?: string | ArrayBuffer\n    ): Promise<void>;\n    public sendPacket(\n        packetOrCommand: AdbPacket | AdbCommand,\n        arg0?: number,\n        arg1?: number,\n        payload?: string | ArrayBuffer\n    ): Promise<void> {\n        let packet: AdbPacket;\n        if (arguments.length === 1) {\n            packet = packetOrCommand as AdbPacket;\n        } else {\n            if (typeof payload === 'string') {\n                payload = this.backend.encodeUtf8(payload);\n            }\n\n            packet = AdbPacket.create({\n                command: packetOrCommand as AdbCommand,\n                arg0: arg0 as number,\n                arg1: arg1 as number,\n                payload,\n            }, this.backend);\n        }\n\n        return AdbPacket.write(packet, this.backend);\n    }\n\n    public dispose() {\n        this._running = false;\n\n        for (const stream of this.streams.values()) {\n            stream.dispose();\n        }\n        this.streams.clear();\n\n        super.dispose();\n    }\n\n    private async receiveLoop() {\n        try {\n            while (this._running) {\n                const packet = await AdbPacket.read(this.backend);\n                switch (packet.command) {\n                    case AdbCommand.OK:\n                        // OKAY has two meanings\n                        if (this.initializers.resolve(packet.arg1, packet.arg0)) {\n                            // 1. The device has created the Stream\n                            continue;\n                        }\n\n                        if (this.streams.has(packet.arg1)) {\n                            // 2. The device has received last WRTE to the Stream\n                            this.streams.get(packet.arg1)!.ack();\n                            continue;\n                        }\n\n                        // Maybe the device is responding to a packet of last connection\n                        // Tell the device to close the stream\n                        this.sendPacket(AdbCommand.Close, packet.arg1, packet.arg0);\n                        continue;\n                    case AdbCommand.Close:\n                        // CLSE also has two meanings\n                        if (packet.arg0 === 0) {\n                            // 1. The device don't want to create the Stream\n                            this.initializers.reject(packet.arg1, new Error('open failed'));\n                            continue;\n                        }\n\n                        if (this.streams.has(packet.arg1)) {\n                            // 2. The device has closed the Stream\n                            this.streams.get(packet.arg1)!.dispose();\n                            this.streams.delete(packet.arg1);\n                            continue;\n                        }\n\n                        // Maybe the device is responding to a packet of last connection\n                        // Just ignore it\n                        continue;\n                    case AdbCommand.Write:\n                        if (this.streams.has(packet.arg1)) {\n                            await this.streams.get(packet.arg1)!.dataEvent.fire(packet.payload!);\n                            await this.sendPacket(AdbCommand.OK, packet.arg1, packet.arg0);\n                        }\n\n                        // Maybe the device is responding to a packet of last connection\n                        // Just ignore it\n                        continue;\n                }\n\n                const args: AdbPacketArrivedEventArgs = {\n                    handled: false,\n                    packet,\n                };\n                this.packetEvent.fire(args);\n                if (!args.handled) {\n                    this.dispose();\n                    return;\n                }\n            }\n        } catch (e) {\n            if (!this._running) {\n                // ignore error\n                return;\n            }\n\n            this.errorEvent.fire(e);\n        }\n    }\n}\n\nexport class AdbStream {\n    private controller: AdbStreamController;\n\n    public get backend() { return this.controller.backend; }\n\n    public get localId() { return this.controller.localId; }\n\n    public get remoteId() { return this.controller.remoteId; }\n\n    public get onData() { return this.controller.dataEvent.event; }\n\n    public get onClose() { return this.controller.onClose; }\n\n    public constructor(controller: AdbStreamController) {\n        this.controller = controller;\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.controller.write(data);\n    }\n\n    public close(): Promise<void> {\n        return this.controller.close();\n    }\n}\n","import { AutoDisposable } from '@yume-chan/event';\nimport { Struct, StructInitType, StructValueType } from '@yume-chan/struct';\nimport { AdbBufferedStream } from './buffered-stream';\nimport { AdbStream } from './stream';\nimport { AutoResetEvent } from './utils';\n\nexport enum AdbSyncRequestId {\n    List = 'LIST',\n    Send = 'SEND',\n    Stat = 'STAT',\n    Data = 'DATA',\n    Done = 'DONE',\n    Receive = 'RECV',\n}\n\nexport enum AdbSyncResponseId {\n    Entry = 'DENT',\n    Stat = 'STAT',\n    Done = 'DONE',\n    Data = 'DATA',\n    Ok = 'OKAY',\n    Fail = 'FAIL',\n}\n\nexport type AdbSyncNumberRequestId =\n    AdbSyncRequestId.Done;\n\nexport type AdbSyncStringRequestId =\n    AdbSyncRequestId.List |\n    AdbSyncRequestId.Send |\n    AdbSyncRequestId.Stat |\n    AdbSyncRequestId.Receive;\n\nconst AdbSyncStringRequest =\n    new Struct({ littleEndian: true })\n        .string('id', { length: 4 })\n        .uint32('valueLength')\n        .string('value', { lengthField: 'valueLength' });\n\n// https://github.com/python/cpython/blob/4e581d64b8aff3e2eda99b12f080c877bb78dfca/Lib/stat.py#L36\nexport enum LinuxFileType {\n    Directory = 0o04,\n    File = 0o10,\n    Link = 0o12,\n}\n\nexport const AdbSyncStatResponse =\n    new Struct({ littleEndian: true })\n        .int32('mode')\n        .int32('size')\n        .int32('lastModifiedTime')\n        .extra({\n            id: AdbSyncResponseId.Stat as const,\n            get type() { return this.mode >> 12 as LinuxFileType; },\n            get permission() { return this.mode & 0b00001111_11111111; },\n        })\n        .afterParsed((object) => {\n            if (object.mode === 0 &&\n                object.size === 0 &&\n                object.lastModifiedTime === 0\n            ) {\n                throw new Error('lstat failed');\n            }\n        });\n\nexport const AdbSyncEntryResponse =\n    AdbSyncStatResponse\n        .afterParsed()\n        .uint32('nameLength')\n        .string('name', { lengthField: 'nameLength' })\n        .extra({ id: AdbSyncResponseId.Entry as const });\n\nexport type AdbSyncEntryResponse = StructValueType<typeof AdbSyncEntryResponse>;\n\nexport const AdbSyncDataResponse =\n    new Struct({ littleEndian: true })\n        .uint32('dataLength')\n        .arrayBuffer('data', { lengthField: 'dataLength' })\n        .extra({ id: AdbSyncResponseId.Data } as const);\n\nexport class AdbSyncDoneResponse {\n    public static readonly instance = new AdbSyncDoneResponse();\n\n    public readonly id = AdbSyncResponseId.Done;\n}\n\nexport const AdbSyncFailResponse =\n    new Struct({ littleEndian: true })\n        .uint32('messageLength')\n        .string('message', { lengthField: 'messageLength' })\n        .afterParsed(object => {\n            throw new Error(object.message);\n        });\n\nasync function readResponse(stream: AdbBufferedStream, size: number) {\n    // DONE responses' size are always same as the request's normal response.\n    // For example DONE responses for LIST requests are 16 bytes (same as DENT responses),\n    // but DONE responses for STAT requests are 12 bytes (same as STAT responses)\n    // So we need to know responses' size in advance.\n    const id = stream.backend.decodeUtf8(await stream.read(4)) as AdbSyncResponseId;\n    const structReader = {\n        read: stream.read.bind(stream),\n        decodeUtf8: stream.backend.decodeUtf8.bind(stream.backend),\n        encodeUtf8: stream.backend.encodeUtf8.bind(stream.backend),\n    };\n    switch (id) {\n        case AdbSyncResponseId.Entry:\n            return AdbSyncEntryResponse.deserialize(structReader);\n        case AdbSyncResponseId.Stat:\n            return AdbSyncStatResponse.deserialize(structReader);\n        case AdbSyncResponseId.Data:\n            return AdbSyncDataResponse.deserialize(structReader);\n        case AdbSyncResponseId.Done:\n            await stream.read(size);\n            return AdbSyncDoneResponse.instance;\n        case AdbSyncResponseId.Fail:\n            return AdbSyncFailResponse.deserialize(structReader);\n        default:\n            throw new Error('Unexpected response id');\n    }\n}\n\nexport class AdbSync extends AutoDisposable {\n    private stream: AdbBufferedStream;\n\n    private sendLock = this.addDisposable(new AutoResetEvent());\n\n    public constructor(stream: AdbStream) {\n        super();\n\n        this.stream = new AdbBufferedStream(stream);\n    }\n\n    public async lstat(path: string) {\n        await this.sendLock.wait();\n\n        try {\n            await this.write(AdbSyncStringRequest, { id: AdbSyncRequestId.Stat, value: path });\n            const response = await readResponse(this.stream, AdbSyncStatResponse.size);\n            if (response.id !== AdbSyncResponseId.Stat) {\n                throw new Error('Unexpected response id');\n            }\n            return response;\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async *opendir(path: string) {\n        await this.sendLock.wait();\n\n        try {\n            await this.write(AdbSyncStringRequest, { id: AdbSyncRequestId.List, value: path });\n\n            while (true) {\n                const response = await readResponse(this.stream, AdbSyncEntryResponse.size);\n                switch (response.id) {\n                    case AdbSyncResponseId.Entry:\n                        yield response;\n                        break;\n                    case AdbSyncResponseId.Done:\n                        return;\n                    default:\n                        throw new Error('Unexpected response id');\n                }\n            }\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async readdir(path: string) {\n        const results: AdbSyncEntryResponse[] = [];\n        for await (const entry of this.opendir(path)) {\n            results.push(entry);\n        }\n        return results;\n    }\n\n    public async *receive(path: string): AsyncGenerator<ArrayBuffer, void, void> {\n        await this.sendLock.wait();\n\n        try {\n            await this.write(AdbSyncStringRequest, { id: AdbSyncRequestId.Receive, value: path });\n            while (true) {\n                const response = await readResponse(this.stream, AdbSyncDataResponse.size);\n                switch (response.id) {\n                    case AdbSyncResponseId.Data:\n                        yield response.data!;\n                        break;\n                    case AdbSyncResponseId.Done:\n                        return;\n                    default:\n                        throw new Error('Unexpected response id');\n                }\n            }\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public dispose() {\n        super.dispose();\n        this.stream.close();\n    }\n\n    private write<T extends Struct<object, object, unknown>>(\n        type: T,\n        value: StructInitType<T>\n    ) {\n        return this.stream.write(type.serialize(value, this.stream.backend));\n    }\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { DisposableList } from '@yume-chan/event';\nimport { AdbAuthenticationHandler, AdbDefaultAuthenticators } from './auth';\nimport { AdbBackend } from './backend';\nimport { AdbReadableStream } from './buffered-stream';\nimport { AdbCommand } from './packet';\nimport { AdbPacketDispatcher, AdbStream } from './stream';\nimport { AdbSync } from './sync';\n\nexport enum AdbPropKey {\n    Product = 'ro.product.name',\n    Model = 'ro.product.model',\n    Device = 'ro.product.device',\n    Features = 'features',\n}\n\nexport class Adb {\n    private backend: AdbBackend;\n    public get onDisconnected() { return this.backend.onDisconnected; }\n\n    private _connected = false;\n    public get connected() { return this._connected; }\n\n    public get name() { return this.backend.name; }\n\n    private _product: string | undefined;\n    public get product() { return this._product; }\n\n    private _model: string | undefined;\n    public get model() { return this._model; }\n\n    private _device: string | undefined;\n    public get device() { return this._device; }\n\n    private _features: string[] | undefined;\n    public get features() { return this._features; }\n\n    private packetDispatcher: AdbPacketDispatcher;\n\n    public constructor(backend: AdbBackend) {\n        this.backend = backend;\n        this.packetDispatcher = new AdbPacketDispatcher(backend);\n\n        backend.onDisconnected(this.dispose, this);\n    }\n\n    public async connect(authenticators = AdbDefaultAuthenticators) {\n        const version = 0x01000001;\n\n        const features = [\n            'shell_v2',\n            'cmd',\n            'stat_v2',\n            'ls_v2',\n            'fixed_push_mkdir',\n            'apex',\n            'abb',\n            'fixed_push_symlink_timestamp',\n            'abb_exec',\n            'remount_shell',\n            'track_app',\n            'sendrecv_v2',\n            'sendrecv_v2_brotli',\n            'sendrecv_v2_lz4',\n            'sendrecv_v2_zstd',\n            'sendrecv_v2_dry_run_send',\n        ].join(',');\n\n        const resolver = new PromiseResolver<void>();\n        const authHandler = new AdbAuthenticationHandler(authenticators, this.backend);\n        const disposableList = new DisposableList();\n        disposableList.add(this.packetDispatcher.onPacket(async (e) => {\n            e.handled = true;\n\n            const { packet } = e;\n            try {\n                switch (packet.command) {\n                    case AdbCommand.Connect:\n                        if (packet.arg0 !== version) {\n                            throw new Error('Version mismatch');\n                        }\n\n                        this.parseBanner(this.backend.decodeUtf8(packet.payload!));\n                        resolver.resolve();\n                        break;\n                    case AdbCommand.Auth:\n                        const authPacket = await authHandler.tryNextAuth(e.packet);\n                        await this.packetDispatcher.sendPacket(authPacket);\n                        break;\n                    case AdbCommand.Close:\n                        // Last connection was interrupted\n                        // Ignore this packet, device will recover\n                        break;\n                    default:\n                        throw new Error('Device not in correct state. Reconnect your device and try again');\n                }\n            } catch (e) {\n                resolver.reject(e);\n            }\n        }));\n\n        disposableList.add(this.packetDispatcher.onError(e => {\n            resolver.reject(e);\n        }));\n\n        await this.packetDispatcher.sendPacket(\n            AdbCommand.Connect,\n            version,\n            0x100000,\n            `host::features=${features}`\n        );\n\n        try {\n            await resolver.promise;\n            this._connected = true;\n        } finally {\n            disposableList.dispose();\n        }\n    }\n\n    private parseBanner(banner: string) {\n        const pieces = banner.split('::');\n        if (pieces.length > 1) {\n            const props = pieces[1];\n            for (const prop of props.split(';')) {\n                if (!prop) {\n                    continue;\n                }\n\n                const keyValue = prop.split('=');\n                if (keyValue.length !== 2) {\n                    continue;\n                }\n\n                const [key, value] = keyValue;\n                switch (key) {\n                    case AdbPropKey.Product:\n                        this._product = value;\n                        break;\n                    case AdbPropKey.Model:\n                        this._model = value;\n                        break;\n                    case AdbPropKey.Device:\n                        this._device = value;\n                        break;\n                    case AdbPropKey.Features:\n                        this._features = value.split(',');\n                        break;\n                }\n            }\n        }\n    }\n\n    public shell(command: string, ...args: string[]): Promise<string>;\n    public shell(): Promise<AdbStream>;\n    public shell(command?: string, ...args: string[]): Promise<AdbStream | string> {\n        // TODO: use shell protocol\n        if (!command) {\n            return this.createStream('shell:');\n        } else {\n            return this.createStreamAndReadAll(`shell:${command} ${args.join(' ')}`);\n        }\n    }\n\n    public async getDaemonTcpAddresses(): Promise<string[]> {\n        const propAddr = (await this.shell('getprop', 'service.adb.listen_addrs')).trim();\n        if (propAddr) {\n            return propAddr.split(',');\n        }\n\n        let port = (await this.shell('getprop', 'service.adb.tcp.port')).trim();\n        if (port) {\n            return [`0.0.0.0:${port}`];\n        }\n\n        port = (await this.shell('getprop', 'persist.adb.tcp.port')).trim();\n        if (port) {\n            return [`0.0.0.0:${port}`];\n        }\n\n        return [];\n    }\n\n    public setDaemonTcpPort(port = 5555): Promise<string> {\n        return this.createStreamAndReadAll(`tcpip:${port}`);\n    }\n\n    public disableDaemonTcp(): Promise<string> {\n        return this.createStreamAndReadAll('usb:');\n    }\n\n    public async sync(): Promise<AdbSync> {\n        const stream = await this.createStream('sync:');\n        return new AdbSync(stream);\n    }\n\n    public async createStream(service: string): Promise<AdbStream> {\n        return this.packetDispatcher.createStream(service);\n    }\n\n    public async createStreamAndReadAll(service: string): Promise<string> {\n        const stream = await this.createStream(service);\n        const readable = new AdbReadableStream(stream);\n        return readable.readAll();\n    }\n\n    public async dispose() {\n        this.packetDispatcher.dispose();\n        await this.backend.dispose();\n    }\n}\n","import { AdbBackend, decodeBase64, encodeBase64 } from '@yume-chan/adb';\nimport { EventEmitter } from '@yume-chan/event';\n\nexport const WebUsbDeviceFilter: USBDeviceFilter = {\n    classCode: 0xFF,\n    subclassCode: 0x42,\n    protocolCode: 1,\n};\n\nconst PrivateKeyStorageKey = 'private-key';\n\nconst Utf8Encoder = new TextEncoder();\nconst Utf8Decoder = new TextDecoder();\n\nexport function encodeUtf8(input: string): ArrayBuffer {\n    return Utf8Encoder.encode(input);\n}\n\nexport function decodeUtf8(buffer: ArrayBuffer): string {\n    return Utf8Decoder.decode(buffer);\n}\n\nexport default class AdbWebBackend implements AdbBackend {\n    public static async fromDevice(device: USBDevice): Promise<AdbWebBackend> {\n        await device.open();\n\n        for (const configuration of device.configurations) {\n            for (const interface_ of configuration.interfaces) {\n                for (const alternate of interface_.alternates) {\n                    if (alternate.interfaceSubclass === WebUsbDeviceFilter.subclassCode &&\n                        alternate.interfaceClass === WebUsbDeviceFilter.classCode &&\n                        alternate.interfaceSubclass === WebUsbDeviceFilter.subclassCode) {\n                        if (device.configuration?.configurationValue !== configuration.configurationValue) {\n                            await device.selectConfiguration(configuration.configurationValue);\n                        }\n\n                        if (!interface_.claimed) {\n                            await device.claimInterface(interface_.interfaceNumber);\n                        }\n\n                        if (interface_.alternate.alternateSetting !== alternate.alternateSetting) {\n                            await device.selectAlternateInterface(interface_.interfaceNumber, alternate.alternateSetting);\n                        }\n\n                        let inEndpointNumber: number | undefined;\n                        let outEndpointNumber: number | undefined;\n\n                        for (const endpoint of alternate.endpoints) {\n                            switch (endpoint.direction) {\n                                case 'in':\n                                    inEndpointNumber = endpoint.endpointNumber;\n                                    if (outEndpointNumber !== undefined) {\n                                        return new AdbWebBackend(device, inEndpointNumber, outEndpointNumber);\n                                    }\n                                    break;\n                                case 'out':\n                                    outEndpointNumber = endpoint.endpointNumber;\n                                    if (inEndpointNumber !== undefined) {\n                                        return new AdbWebBackend(device, inEndpointNumber, outEndpointNumber);\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        throw new Error('Unknown error');\n    }\n\n    public static async pickDevice(): Promise<AdbWebBackend | undefined> {\n        try {\n            const device = await navigator.usb.requestDevice({ filters: [WebUsbDeviceFilter] });\n            return AdbWebBackend.fromDevice(device);\n        } catch (e) {\n            switch (e.name) {\n                case 'NotFoundError':\n                    return undefined;\n                default:\n                    throw e;\n            }\n        }\n    }\n\n    private _device: USBDevice;\n\n    public get name() { return this._device.productName; }\n\n    private readonly onDisconnectedEvent = new EventEmitter<void>();\n    public readonly onDisconnected = this.onDisconnectedEvent.event;\n\n    private _inEndpointNumber!: number;\n    private _outEndpointNumber!: number;\n\n    private constructor(device: USBDevice, inEndPointNumber: number, outEndPointNumber: number) {\n        this._device = device;\n        this._inEndpointNumber = inEndPointNumber;\n        this._outEndpointNumber = outEndPointNumber;\n    }\n\n    public *iterateKeys(): Generator<ArrayBuffer, void, void> {\n        const privateKey = window.localStorage.getItem(PrivateKeyStorageKey);\n        if (privateKey) {\n            yield decodeBase64(privateKey);\n        }\n    }\n\n    public async generateKey(): Promise<ArrayBuffer> {\n        const { privateKey: cryptoKey } = await crypto.subtle.generateKey(\n            {\n                name: 'RSASSA-PKCS1-v1_5',\n                modulusLength: 2048,\n                // 65537\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                hash: 'SHA-1',\n            },\n            true,\n            ['sign', 'verify']\n        );\n\n        const privateKey = await crypto.subtle.exportKey('pkcs8', cryptoKey);\n        window.localStorage.setItem(PrivateKeyStorageKey, decodeUtf8(encodeBase64(privateKey)));\n        return privateKey;\n    }\n\n    public encodeUtf8(input: string): ArrayBuffer {\n        return encodeUtf8(input);\n    }\n\n    public decodeUtf8(buffer: ArrayBuffer): string {\n        return decodeUtf8(buffer);\n    }\n\n    public async write(buffer: ArrayBuffer): Promise<void> {\n        await this._device.transferOut(this._outEndpointNumber, buffer);\n    }\n\n    public async read(length: number): Promise<ArrayBuffer> {\n        try {\n            const result = await this._device.transferIn(this._inEndpointNumber, length);\n\n            if (result.status === 'stall') {\n                await this._device.clearHalt('in', this._inEndpointNumber);\n            }\n\n            const { buffer } = result.data!;\n            return buffer;\n        } catch (e) {\n            if (e instanceof Error && e.name === 'NotFoundError') {\n                this.onDisconnectedEvent.fire();\n            }\n\n            throw e;\n        }\n    }\n\n    public async dispose() {\n        this.onDisconnectedEvent.dispose();\n        await this._device.close();\n    }\n}\n","import { memo, NamedExoticComponent } from 'react';\n\nexport default function withDisplayName<P extends object>(\n    name: string,\n    Component: React.FunctionComponent<P>\n): NamedExoticComponent<P> {\n    Component.displayName = name;\n    return memo(Component);\n}\n","import { Dialog, DialogFooter, DialogType, PrimaryButton } from '@fluentui/react';\nimport { useBoolean } from '@uifabric/react-hooks';\nimport React, { PropsWithChildren, useMemo, useState } from 'react';\nimport withDisplayName from './with-display-name';\n\nexport interface ErrorDialogContext {\n    show(message: string): void;\n}\n\nexport const ErrorDialogContext = React.createContext<ErrorDialogContext>({\n    show() { }\n});\n\nexport default withDisplayName('ErrorDialogProvider', (props: PropsWithChildren<{}>) => {\n    const [errorDialogVisible, { setTrue: showErrorDialog, setFalse: hideErrorDialog }] = useBoolean(false);\n    const [errorMessage, setErrorMessage] = useState<string | undefined>();\n\n    const context = useMemo((): ErrorDialogContext => ({\n        show(message) {\n            setErrorMessage(message);\n            showErrorDialog();\n        }\n    }), []);\n\n    return (\n        <ErrorDialogContext.Provider value={context}>\n            {props.children}\n\n            <Dialog\n                hidden={!errorDialogVisible}\n                dialogContentProps={{\n                    type: DialogType.normal,\n                    title: 'Error',\n                    subText: errorMessage,\n                }}\n            >\n                <DialogFooter>\n                    <PrimaryButton text=\"OK\" onClick={hideErrorDialog} />\n                </DialogFooter>\n            </Dialog>\n        </ErrorDialogContext.Provider>\n    );\n});\n","import { DefaultButton, Dialog, PrimaryButton, ProgressIndicator, Stack, StackItem } from '@fluentui/react';\nimport { Adb } from '@yume-chan/adb';\nimport AdbWebBackend from '@yume-chan/adb-backend-web';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { ErrorDialogContext } from './error-dialog';\nimport withDisplayName from './with-display-name';\n\ninterface ConnectProps {\n    device: Adb | undefined;\n\n    onDeviceChange: (device: Adb | undefined) => void;\n}\n\nexport default withDisplayName('Connect', ({\n    device,\n    onDeviceChange,\n}: ConnectProps): JSX.Element | null => {\n    const { show: showErrorDialog } = useContext(ErrorDialogContext);\n\n    const [connecting, setConnecting] = useState(false);\n    const connect = useCallback(async () => {\n        try {\n            const backend = await AdbWebBackend.pickDevice();\n            if (backend) {\n                const device = new Adb(backend);\n                try {\n                    setConnecting(true);\n                    await device.connect();\n                    onDeviceChange(device);\n                } catch (e) {\n                    device.dispose();\n                    throw e;\n                }\n            }\n        } catch (e) {\n            showErrorDialog(e.message);\n        } finally {\n            setConnecting(false);\n        }\n    }, [onDeviceChange]);\n    const disconnect = useCallback(async () => {\n        try {\n            await device!.dispose();\n            onDeviceChange(undefined);\n        } catch (e) {\n            showErrorDialog(e.message);\n        }\n    }, [device]);\n    useEffect(() => {\n        return device?.onDisconnected(() => {\n            onDeviceChange(undefined);\n        });\n    }, [device, onDeviceChange]);\n\n    return (\n        <>\n            <Stack horizontal verticalAlign=\"center\" tokens={{ childrenGap: 8, padding: 8 }}>\n                {!device && <StackItem>\n                    <PrimaryButton text=\"Connect\" onClick={connect} />\n                </StackItem>}\n                {device && <StackItem>\n                    <DefaultButton text=\"Disconnect\" onClick={disconnect} />\n                </StackItem>}\n                <StackItem>\n                    {device && `Connected to ${device.name}`}\n                </StackItem>\n            </Stack>\n\n            <Dialog\n                hidden={!connecting}\n                dialogContentProps={{\n                    title: 'Connecting',\n                    subText: 'Please authorize the connection on your device'\n                }}\n            >\n                <ProgressIndicator />\n            </Dialog>\n        </>\n    );\n});\n","import { AnimationClassNames, concatStyleSets, IStackProps, Stack } from '@fluentui/react';\nimport React, { useMemo, useRef } from 'react';\nimport { match, matchPath, RedirectProps, RouteProps, useLocation, useRouteMatch } from 'react-router-dom';\nimport withDisplayName from './with-display-name';\n\nexport const DefaultStackProps: IStackProps = {\n    tokens: { childrenGap: 8, padding: 8 },\n    verticalFill: true,\n};\n\nexport const RouteStackProps: IStackProps = {\n    ...DefaultStackProps,\n    className: AnimationClassNames.slideUpIn10,\n    styles: { root: { overflow: 'auto' } },\n};\n\nexport const CacheRoute = withDisplayName('CacheRoute', (props: RouteProps) => {\n    const match = useRouteMatch(props);\n\n    const everMatched = useRef(!!match);\n    if (!everMatched.current && match) {\n        everMatched.current = true;\n    }\n\n    const stackProps = useMemo((): IStackProps => ({\n        ...RouteStackProps,\n        styles: concatStyleSets(\n            RouteStackProps.styles,\n            { root: { display: match ? 'flex' : 'none' } }\n        ),\n    }), [!!match]);\n\n    if (!everMatched.current) {\n        return null;\n    }\n\n    return (\n        <Stack {...stackProps} >\n            {props.children}\n        </Stack>\n    );\n});\n\nexport interface CacheSwitchProps {\n    children: React.ReactNodeArray;\n}\n\nexport const CacheSwitch = withDisplayName('CacheSwitch', (props: CacheSwitchProps) => {\n    const location = useLocation();\n    let contextMatch = useRouteMatch();\n\n    let element: React.ReactElement | undefined;\n    let computedMatch: match | null | undefined;\n    let cached: React.ReactElement[] = [];\n    React.Children.forEach(props.children, child => {\n        if (React.isValidElement<RouteProps & RedirectProps>(child)) {\n            // Always render all cached routes\n            const isCacheRoute = child.type === CacheRoute;\n            if (isCacheRoute) {\n                cached.push(child);\n            }\n\n            // If we already found the matched route,\n            // Don't care about others\n            if (computedMatch) {\n                return;\n            }\n\n            const path = child.props.path ?? child.props.from;\n            const match = path\n                ? matchPath(location.pathname, { ...child.props, path })\n                : contextMatch;\n\n            if (match) {\n                computedMatch = match;\n\n                if (isCacheRoute) {\n                    // Don't render a CacheRoute twice\n                    element = undefined;\n                } else {\n                    element = child;\n                }\n            }\n        }\n    });\n\n    return (\n        <>\n            {cached}\n            {element ? React.cloneElement(element, { location, computedMatch }) : null}\n        </>\n    );\n});\n","import { Breadcrumb, concatStyleSets, ContextualMenu, DetailsListLayoutMode, DirectionalHint, IBreadcrumbItem, IColumn, Icon, IContextualMenuItem, IDetailsHeaderProps, IDetailsList, IRenderFunction, Layer, MarqueeSelection, mergeStyleSets, Overlay, Selection, ShimmeredDetailsList, StackItem } from '@fluentui/react';\nimport { FileIconType, getFileTypeIconProps, initializeFileTypeIcons } from '@uifabric/file-type-icons';\nimport { useConst } from '@uifabric/react-hooks';\nimport { AdbSyncEntryResponse, LinuxFileType } from '@yume-chan/adb';\nimport { encodeUtf8 } from '@yume-chan/adb-backend-web';\nimport path from 'path';\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport StreamSaver from 'streamsaver';\nimport { ErrorDialogContext } from '../error-dialog';\nimport withDisplayName from '../with-display-name';\nimport { RouteProps } from './type';\n\ninitializeFileTypeIcons();\nStreamSaver.mitm = 'streamsaver/mitm.html';\n\ninterface ListItem extends AdbSyncEntryResponse {\n    key: string;\n}\n\nfunction toListItem(item: AdbSyncEntryResponse): ListItem {\n    return { ...item, key: item.name! };\n}\n\nconst classNames = mergeStyleSets({\n    name: {\n        cursor: 'pointer',\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    },\n});\n\nconst units = [' B', ' KB', ' MB', ' GB'];\nfunction formatSize(value: number): string {\n    let index = 0;\n    while (index < units.length && value > 1024) {\n        index += 1;\n        value /= 1024;\n    }\n    return value.toLocaleString(undefined, { maximumFractionDigits: 2 }) + units[index];\n}\n\nfunction extensionName(fileName: string): string {\n    const index = fileName.lastIndexOf('.');\n    if (index === -1) {\n        return '';\n    } else {\n        return fileName.slice(index);\n    }\n}\n\nconst renderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (props?, defaultRender?) => {\n    if (!props || !defaultRender) {\n        return null;\n    }\n\n    return defaultRender({\n        ...props,\n        styles: concatStyleSets(props.styles, { root: { paddingTop: 0 } })\n    });\n};\n\nfunction delay(time: number): Promise<void> {\n    return new Promise(resolve => {\n        setTimeout(resolve, time);\n    });\n}\n\nfunction createReadableStreamFromBufferIterator(\n    iterator: AsyncIterator<ArrayBuffer>\n): ReadableStream<Uint8Array> {\n    return new ReadableStream<Uint8Array>({\n        async pull(controller) {\n            const { desiredSize } = controller;\n            if (!desiredSize || desiredSize < 0) {\n                return;\n            }\n\n            let written = 0;\n            while (written < desiredSize) {\n                const result = await iterator.next();\n                if (result.done) {\n                    controller.close();\n                    return;\n                }\n\n                controller.enqueue(new Uint8Array(result.value));\n                written += result.value.byteLength;\n            }\n        },\n    });\n}\n\nexport default withDisplayName('FileManager', ({\n    device,\n}: RouteProps): JSX.Element | null => {\n    const { show: showErrorDialog } = useContext(ErrorDialogContext);\n\n    const [currentPath, setCurrentPath] = useState('/');\n    const currentPathRef = useRef(currentPath);\n    currentPathRef.current = currentPath;\n\n    const breadcrumbItems = useMemo((): IBreadcrumbItem[] => {\n        let part = '';\n        const list: IBreadcrumbItem[] = currentPath.split('/').filter(Boolean).map(segment => {\n            part += '/' + segment;\n            return {\n                key: part,\n                text: segment,\n                onClick: (e, item) => {\n                    if (!item) {\n                        return;\n                    }\n                    setCurrentPath(item.key);\n                },\n            };\n        });\n        list.unshift({\n            key: '/',\n            text: '/',\n            onClick: () => setCurrentPath('/'),\n        });\n        list[list.length - 1].isCurrentItem = true;\n        list[list.length - 1].onClick = undefined;\n        return list;\n    }, [currentPath]);\n\n    const [items, setItems] = useState<ListItem[]>([]);\n    const [loading, setLoading] = useState(false);\n    const listRef = useRef<IDetailsList | null>(null);\n    const load = useCallback(async () => {\n        setItems([]);\n\n        if (!device) {\n            setCurrentPath('/');\n            return;\n        }\n\n        setLoading(true);\n        const sync = await device.sync();\n\n        const items: ListItem[] = [];\n        const linkItems: AdbSyncEntryResponse[] = [];\n        const intervalId = setInterval(() => {\n            setItems(items.slice());\n        }, 1000);\n\n        try {\n            let lastBreak = Date.now();\n\n            for await (const entry of sync.opendir(currentPath)) {\n                if (currentPath !== currentPathRef.current) {\n                    break;\n                }\n\n                if (entry.name === '.' || entry.name === '..') {\n                    continue;\n                }\n\n                if (entry.type === LinuxFileType.Link) {\n                    linkItems.push(entry);\n                } else {\n                    items.push(toListItem(entry));\n                }\n\n                const now = Date.now();\n                if (now - lastBreak > 16) {\n                    await delay(0);\n                    lastBreak = now;\n                }\n            }\n\n            for (const entry of linkItems) {\n                try {\n                    const followLinkPath = path.resolve(currentPath, entry.name!) + '/';\n                    await sync.lstat(followLinkPath);\n                    items.push(toListItem(entry));\n                } catch (e) {\n                    items.push(toListItem(AdbSyncEntryResponse.create({\n                        mode: (LinuxFileType.File << 12) | entry.permission,\n                        size: 0,\n                        lastModifiedTime: entry.lastModifiedTime,\n                        name: entry.name,\n                    }, { encodeUtf8 })));\n                }\n            }\n\n            setItems(items);\n            listRef.current?.scrollToIndex(0);\n        } finally {\n            if (currentPath === currentPathRef.current) {\n                setLoading(false);\n            }\n            clearInterval(intervalId);\n            sync.dispose();\n        }\n    }, [device, currentPath]);\n    useEffect(() => {\n        load();\n    }, [load]);\n\n    const [sortedList, setSortedList] = useState<ListItem[]>([]);\n    const [sortKey, setSortKey] = useState<keyof ListItem>('name');\n    const [sortDescending, setSortDescendent] = useState(false);\n    useEffect(() => {\n        const list = items.slice();\n        list.sort((a, b) => {\n            const aIsFile = a.type === LinuxFileType.File ? 1 : 0;\n            const bIsFile = b.type === LinuxFileType.File ? 1 : 0;\n\n            let result: number;\n            if (aIsFile !== bIsFile) {\n                result = aIsFile - bIsFile;\n            } else {\n                const aSortKey = a[sortKey]!;\n                const bSortKey = b[sortKey]!;\n\n                if (aSortKey === bSortKey) {\n                    result = a.name! < b.name! ? -1 : 1;\n                } else {\n                    result = aSortKey < bSortKey ? -1 : 1;\n                }\n            }\n\n            if (sortDescending) {\n                result *= -1;\n            }\n            return result;\n        });\n        setSortedList(list);\n    }, [items, sortKey, sortDescending]);\n\n    const columns: IColumn[] = useMemo(() => {\n        const list: IColumn[] = [\n            {\n                key: 'type',\n                name: 'File Type',\n                iconName: 'Page',\n                isIconOnly: true,\n                minWidth: 20,\n                maxWidth: 20,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    switch (item.type) {\n                        case LinuxFileType.Link:\n                            return <Icon {...getFileTypeIconProps({ size: 20, type: FileIconType.linkedFolder })} />;\n                        case LinuxFileType.Directory:\n                            return <Icon {...getFileTypeIconProps({ size: 20, type: FileIconType.folder })} />;\n                        case LinuxFileType.File:\n                            return <Icon {...getFileTypeIconProps({ size: 20, extension: extensionName(item.name!) })} />;\n                        default:\n                            return <Icon {...getFileTypeIconProps({ size: 20, extension: 'txt' })} />;\n                    }\n                }\n            },\n            {\n                key: 'name',\n                name: 'Name',\n                minWidth: 0,\n                isRowHeader: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    return (\n                        <span className={classNames.name} data-selection-invoke>\n                            {item.name}\n                        </span>\n                    );\n                }\n            },\n            {\n                key: 'mode',\n                name: 'Mode',\n                minWidth: 0,\n                onRender(item: AdbSyncEntryResponse) {\n                    return `0${(item.mode >> 6 & 0b100).toString(8)}${(item.mode >> 3 & 0b100).toString(8)}${(item.mode & 0b100).toString(8)}`;\n                }\n            },\n            {\n                key: 'logicalSize',\n                name: 'Size',\n                minWidth: 0,\n                onRender(item: AdbSyncEntryResponse) {\n                    if (item.type === LinuxFileType.File) {\n                        return formatSize(item.size);\n                    }\n                    return '';\n                }\n            },\n            {\n                key: 'lastModifiedTime',\n                name: 'Last Modified Time',\n                minWidth: 150,\n                onRender(item: AdbSyncEntryResponse) {\n                    return new Date(item.lastModifiedTime * 1000).toLocaleString();\n                },\n            }\n        ];\n\n        for (const item of list) {\n            item.onColumnClick = (e, column) => {\n                if (sortKey === column.key) {\n                    setSortDescendent(!sortDescending);\n                } else {\n                    setSortKey(column.key as keyof ListItem);\n                    setSortDescendent(false);\n                }\n            };\n\n            if (item.key === sortKey) {\n                item.isSorted = true;\n                item.isSortedDescending = sortDescending;\n            }\n        }\n\n        return list;\n    }, [sortKey, sortDescending]);\n\n    const [previewUrl, setPreviewUrl] = useState<string | undefined>();\n    const previewImage = useCallback(async (path: string) => {\n        const sync = await device!.sync();\n        try {\n            const readableStream = createReadableStreamFromBufferIterator(sync.receive(path));\n            const response = new Response(readableStream);\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            setPreviewUrl(url);\n        } finally {\n            sync.dispose();\n        }\n    }, [device]);\n    const hidePreview = useCallback(() => {\n        setPreviewUrl(undefined);\n    }, []);\n\n    const handleItemInvoked = useCallback((item: AdbSyncEntryResponse) => {\n        switch (item.type) {\n            case LinuxFileType.Link:\n            case LinuxFileType.Directory:\n                setCurrentPath(path.resolve(currentPath, item.name!));\n                break;\n            case LinuxFileType.File:\n                switch (extensionName(item.name!)) {\n                    case '.jpg':\n                    case '.png':\n                    case '.svg':\n                    case '.gif':\n                        previewImage(path.resolve(currentPath, item.name!));\n                        break;\n                }\n                break;\n        }\n    }, [currentPath, previewImage]);\n\n    const selection = useConst(() => new Selection());\n\n    const [contextMenuItems, setContextMenuItems] = useState<IContextualMenuItem[]>([]);\n    const [contextMenuTarget, setContextMenuTarget] = useState<MouseEvent>();\n    const showContextMenu = useCallback((\n        item?: AdbSyncEntryResponse,\n        index?: number,\n        e?: Event\n    ) => {\n        if (!e) {\n            return false;\n        }\n\n        const selectedItems = selection.getSelection() as ListItem[];\n\n        let contextMenuItems: IContextualMenuItem[] = [];\n\n        if (selectedItems.length === 1 &&\n            selectedItems[0].type === LinuxFileType.File) {\n            contextMenuItems.push({\n                key: 'download',\n                text: 'Download',\n                onClick() {\n                    (async () => {\n                        const sync = await device!.sync();\n                        try {\n                            const itemPath = path.resolve(currentPath, selectedItems[0].name!);\n                            const readableStream = createReadableStreamFromBufferIterator(sync.receive(itemPath));\n\n                            const writeableStream = StreamSaver.createWriteStream(selectedItems[0].name!, {\n                                size: selectedItems[0].size,\n                            });\n                            await readableStream.pipeTo(writeableStream);\n                        } catch (e) {\n                            showErrorDialog(e.message);\n                        } finally {\n                            sync.dispose();\n                        }\n                    })();\n                    return false;\n                },\n            });\n        }\n\n        contextMenuItems.push({\n            key: 'delete',\n            text: 'Delete',\n            onClick() {\n                (async () => {\n                    try {\n                        for (const item of selectedItems) {\n                            const output = await device!.shell('rm', '-rf', `\"${path.resolve(currentPath, item.name!)}\"`);\n                            if (output) {\n                                showErrorDialog(output);\n                                return;\n                            }\n                        }\n                    } catch (e) {\n                        showErrorDialog(e.message);\n                    } finally {\n                        load();\n                    }\n                })();\n                return false;\n            }\n        });\n\n        if (!contextMenuItems.length) {\n            return false;\n        }\n\n        setContextMenuItems(contextMenuItems);\n        setContextMenuTarget(e as MouseEvent);\n        return false;\n    }, [currentPath, device]);\n    const hideContextMenu = React.useCallback(() => {\n        setContextMenuTarget(undefined);\n    }, []);\n\n    return (\n        <MarqueeSelection selection={selection}>\n            {device && (\n                <StackItem>\n                    <Breadcrumb items={breadcrumbItems} />\n                </StackItem>\n            )}\n\n            <StackItem\n                grow\n                styles={{ root: { minHeight: 0 } }}\n            >\n                <ShimmeredDetailsList\n                    componentRef={listRef}\n                    items={sortedList}\n                    columns={columns}\n                    setKey={currentPath}\n                    selection={selection}\n                    layoutMode={DetailsListLayoutMode.justified}\n                    enableShimmer={loading && items.length === 0}\n                    onItemInvoked={handleItemInvoked}\n                    onItemContextMenu={showContextMenu}\n                    onRenderDetailsHeader={renderDetailsHeader}\n                    usePageCache\n                />\n            </StackItem>\n\n            {previewUrl && (\n                <Layer>\n                    <Overlay onClick={hidePreview}>\n                        <div style={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                            <img src={previewUrl} style={{ maxWidth: '100%', maxHeight: '100%' }} />\n                        </div>\n                    </Overlay>\n                </Layer>\n            )}\n\n            <ContextualMenu\n                items={contextMenuItems}\n                hidden={!contextMenuTarget}\n                directionalHint={DirectionalHint.bottomLeftEdge}\n                target={contextMenuTarget}\n                onDismiss={hideContextMenu}\n            />\n        </MarqueeSelection>\n    );\n});\n","import { Callout, DirectionalHint, Link, mergeStyleSets, Text } from '@fluentui/react';\nimport { useBoolean } from '@uifabric/react-hooks';\nimport React, { useCallback, useRef } from 'react';\nimport withDisplayName from '../with-display-name';\n\nconst classNames = mergeStyleSets({\n    callout: {\n        padding: '8px 12px',\n    },\n});\n\ninterface CopyLinkProps {\n    href: string;\n}\n\nconst CopyLink = withDisplayName('CopyLink', ({\n    href,\n}: CopyLinkProps) => {\n    const calloutTarget = useRef<HTMLButtonElement | null>(null);\n    const [calloutVisible, { setTrue: showCallout, setFalse: hideCallout }] = useBoolean(false);\n    const copyLink = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n        navigator.clipboard.writeText(href);\n        calloutTarget.current = e.target as HTMLButtonElement;\n        showCallout();\n        setTimeout(hideCallout, 3000);\n    }, [href]);\n\n    return (\n        <>\n            <Link onClick={copyLink}>{href}</Link>\n            <Callout\n                directionalHint={DirectionalHint.topCenter}\n                hidden={!calloutVisible}\n                target={calloutTarget}\n                onDismiss={hideCallout}\n            >\n                <div className={classNames.callout}>\n                    Link copied. Open a new tab and paste into address bar.\n                </div>\n            </Callout>\n        </>\n    );\n});\n\nexport default withDisplayName('Intro', () => {\n    return (\n        <>\n            <Text block>\n                This page is a demo of my {' '}\n                <Link href=\"https://github.com/yume-chan/ya-webadb/\" target=\"_blank\">WebADB</Link>{' '}\n                library, which can connect to your Android devices with the {' '}\n                <Link href=\"https://developer.mozilla.org/en-US/docs/Web/API/USB\" target=\"_blank\">WebUSB</Link>{' '}\n                API.\n            </Text>\n            <Text block>\n                The latest version of Google Chrome (or Microsoft Edge) is recommended for best compatibility.\n            </Text>\n\n            <Text block styles={{ root: { fontWeight: '600' } }}>\n                Windows user?\n            </Text>\n            <Text block>\n                The experimental new backend is required. Enable from  {' '}\n                <CopyLink href=\"chrome://flags/#new-usb-backend\" />\n                .\n            </Text>\n\n            <Text block styles={{ root: { fontWeight: '600' } }}>\n                Got \"Unable to claim interface\" error?\n            </Text>\n            <Text block>\n                Only one software can connect to your device at a time.<br />\n                1. Make sure ADB server is not running (run `adb kill-server` to stop it).<br />\n                2. Make sure no other Android management tools are running\n            </Text>\n            <Text block styles={{ root: { fontWeight: '600' } }}>\n                Got \"Access denied\" error?\n            </Text>\n            <Text block>\n                If you have a Samsung device, it's caused by the custom driver. See {' '}\n                <Link href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1127206\">\n                    https://bugs.chromium.org/p/chromium/issues/detail?id=1127206\n                </Link>\n            </Text>\n            <Text block styles={{ root: { fontWeight: '600' } }}>\n                Can I connect my device wirelessly (ADB over WiFi)?\n            </Text>\n            <Text block>\n                No. Web browsers doesn't support TCP connections.<br />\n                Or maybe, with {' '}\n                <Link href=\"https://github.com/novnc/websockify\">websockify</Link>{' '}\n                running on your device and a WebSocket backend for WebADB.\n            </Text>\n        </>\n    );\n});\n","import React, { CSSProperties, HTMLAttributes, PropsWithChildren, useCallback, useRef } from 'react';\nimport withDisplayName from './with-display-name';\n\nexport interface ResizeObserverProps extends HTMLAttributes<HTMLDivElement>, PropsWithChildren<{}> {\n    onResize: () => void;\n}\n\nconst iframeStyle: CSSProperties = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    visibility: 'hidden',\n};\n\nexport default withDisplayName('ResizeObserver', ({\n    onResize,\n    style,\n    children,\n    ...rest\n}: ResizeObserverProps): JSX.Element | null => {\n    const onResizeRef = useRef<() => void>(onResize);\n    onResizeRef.current = onResize;\n\n    const handleResize = useCallback(() => {\n        onResizeRef.current();\n    }, []);\n\n    const handleIframeRef = useCallback((element: HTMLIFrameElement | null) => {\n        if (element) {\n            element.contentWindow!.addEventListener('resize', handleResize);\n        }\n    }, []);\n\n    const containerStyle: CSSProperties = React.useMemo(() => {\n        if (!style) {\n            return { position: 'relative' };\n        }\n\n        if (!style.position) {\n            return { ...style, position: 'relative' };\n        }\n\n        return style;\n    }, [style]);\n\n    return (\n        <div style={containerStyle} {...rest}>\n            <iframe ref={handleIframeRef} style={iframeStyle} />\n            {children}\n        </div>\n    );\n});\n","import { IconButton, SearchBox, Stack, StackItem } from '@fluentui/react';\nimport { encodeUtf8 } from '@yume-chan/adb-backend-web';\nimport React, { CSSProperties, useCallback, useEffect, useRef, useState } from 'react';\nimport { Terminal } from 'xterm';\nimport { FitAddon } from 'xterm-addon-fit';\nimport { SearchAddon } from 'xterm-addon-search';\nimport 'xterm/css/xterm.css';\nimport ResizeObserver from '../resize-observer';\nimport withDisplayName from '../with-display-name';\nimport { RouteProps } from './type';\n\nconst containerStyle: CSSProperties = {\n    width: '100%',\n    height: '100%',\n};\n\nexport default withDisplayName('Shell', ({\n    device,\n}: RouteProps): JSX.Element | null => {\n    const [findKeyword, setFindKeyword] = useState('');\n    const findAddonRef = useRef<SearchAddon>();\n    const handleFindKeywordChange = useCallback((e, newValue?: string) => {\n        setFindKeyword(newValue ?? '');\n        if (newValue) {\n            findAddonRef.current!.findNext(newValue, { incremental: true });\n        }\n    }, []);\n    const findPrevious = useCallback(() => {\n        findAddonRef.current!.findPrevious(findKeyword);\n    }, [findKeyword]);\n    const findNext = useCallback(() => {\n        findAddonRef.current!.findNext(findKeyword);\n    }, [findKeyword]);\n\n    const [terminal, setTerminal] = useState<Terminal>();\n    const fitAddonRef = useRef<FitAddon>();\n    const handleContainerRef = useCallback((element: HTMLDivElement | null) => {\n        if (!element) {\n            return;\n        }\n\n        const terminal = new Terminal({\n            scrollback: 9001,\n        });\n\n        const findAddon = new SearchAddon();\n        findAddonRef.current = findAddon;\n        terminal.loadAddon(findAddon);\n\n        const fitAddon = new FitAddon();\n        fitAddonRef.current = fitAddon;\n        terminal.loadAddon(fitAddon);\n\n        setTerminal(terminal);\n        terminal.open(element);\n        fitAddon.fit();\n    }, []);\n    useEffect(() => {\n        return () => terminal?.dispose();\n    }, []);\n\n    useEffect(() => {\n        if (!device || !terminal) {\n            return;\n        }\n\n        (async () => {\n            const shell = await device.shell();\n            terminal.onData(data => {\n                const buffer = encodeUtf8(data);\n                shell.write(buffer);\n            });\n            shell.onData(data => {\n                terminal.write(new Uint8Array(data));\n            });\n        })();\n\n        return () => {\n            terminal.reset();\n            terminal.clear();\n        };\n    }, [device, terminal]);\n\n    const handleResize = useCallback(() => {\n        fitAddonRef.current?.fit();\n    }, []);\n\n    return (\n        <>\n            <StackItem>\n                <Stack horizontal>\n                    <StackItem grow>\n                        <SearchBox\n                            placeholder=\"Find\"\n                            value={findKeyword}\n                            onChange={handleFindKeywordChange}\n                            onSearch={findNext}\n                        />\n                    </StackItem>\n                    <StackItem>\n                        <IconButton\n                            disabled={!findKeyword}\n                            iconProps={{ iconName: 'ChevronUp' }}\n                            onClick={findPrevious}\n                        />\n                    </StackItem>\n                    <StackItem>\n                        <IconButton\n                            disabled={!findKeyword}\n                            iconProps={{ iconName: 'ChevronDown' }}\n                            onClick={findNext}\n                        />\n                    </StackItem>\n                </Stack>\n            </StackItem>\n            <StackItem grow styles={{ root: { minHeight: 0 } }}>\n                <ResizeObserver style={containerStyle} onResize={handleResize}>\n                    <div ref={handleContainerRef} style={{ height: '100%' }} />\n                </ResizeObserver>\n            </StackItem>\n        </>\n    );\n});\n","import { Label, MessageBar, PrimaryButton, Stack, StackItem, Text, TextField } from '@fluentui/react';\nimport { useId } from '@uifabric/react-hooks';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport withDisplayName from '../with-display-name';\nimport { RouteProps } from './type';\n\nexport default withDisplayName('TcpIp', ({\n    device\n}: RouteProps): JSX.Element | null => {\n    const [tcpPort, setTcpAddresses] = useState<string[] | undefined>();\n    useEffect(() => {\n        if (!device) {\n            setTcpAddresses(undefined);\n        }\n    }, [device]);\n\n    const queryTcpAddress = useCallback(async () => {\n        if (!device) {\n            return;\n        }\n\n        const result = await device.getDaemonTcpAddresses();\n        setTcpAddresses(result);\n    }, [device]);\n\n    const [tcpPortValue, setTcpPortValue] = useState('5555');\n    const tcpPortInputId = useId('tcpPort');\n    const enableTcp = useCallback(async () => {\n        if (!device) {\n            return;\n        }\n\n        const result = await device.setDaemonTcpPort(Number.parseInt(tcpPortValue, 10));\n        console.log(result);\n    }, [device, tcpPortValue]);\n\n    const disableTcp = useCallback(async () => {\n        if (!device) {\n            return;\n        }\n\n        const result = await device.disableDaemonTcp();\n        console.log(result);\n    }, [device]);\n\n    return (\n        <>\n            <StackItem>\n                <MessageBar>\n                    <Text>Although WebADB can enable ADB over WiFi for you, it can't connect to your device wirelessly.</Text>\n                </MessageBar>\n            </StackItem>\n            <StackItem>\n                <MessageBar >\n                    <Text>Your device will disconnect after changing ADB over WiFi config.</Text>\n                </MessageBar>\n            </StackItem>\n            <Stack horizontal verticalAlign=\"center\" tokens={{ childrenGap: 8 }}>\n                <StackItem>\n                    <PrimaryButton text=\"Update Status\" disabled={!device} onClick={queryTcpAddress} />\n                </StackItem>\n                <StackItem>\n                    {tcpPort !== undefined &&\n                        (tcpPort.length !== 0\n                            ? `Enabled at ${tcpPort.join(', ')}`\n                            : 'Disabled')}\n                </StackItem>\n            </Stack>\n            <Stack horizontal verticalAlign=\"center\" tokens={{ childrenGap: 8 }}>\n                <StackItem>\n                    <Label htmlFor={tcpPortInputId}>Port: </Label>\n                </StackItem>\n                <StackItem>\n                    <TextField\n                        id={tcpPortInputId}\n                        width={300}\n                        disabled={!device}\n                        value={tcpPortValue}\n                        onChange={(e, value) => setTcpPortValue(value!)}\n                    />\n                </StackItem>\n                <StackItem>\n                    <PrimaryButton\n                        text=\"Enable\"\n                        disabled={!device}\n                        onClick={enableTcp}\n                    />\n                </StackItem>\n            </Stack>\n            <StackItem>\n                <PrimaryButton\n                    text=\"Disable\"\n                    disabled={!device || tcpPort === undefined || tcpPort.length === 0}\n                    onClick={disableTcp}\n                />\n            </StackItem>\n        </>\n    );\n});\n","import { Nav, Separator, Stack, StackItem, Text } from '@fluentui/react';\nimport { initializeIcons } from '@uifabric/icons';\nimport { Adb } from '@yume-chan/adb';\nimport React, { useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Redirect, useLocation } from 'react-router-dom';\nimport Connect from './connect';\nimport ErrorDialogProvider from './error-dialog';\nimport './index.css';\nimport { CacheRoute, CacheSwitch } from './router';\nimport FileManager from './routes/file-manager';\nimport Intro from './routes/intro';\nimport Shell from './routes/shell';\nimport TcpIp from './routes/tcp-ip';\n\ninitializeIcons();\n\ninterface RouteInfo {\n    path: string;\n\n    exact?: boolean;\n\n    name: string;\n\n    children: JSX.Element | null;\n}\n\nfunction App(): JSX.Element | null {\n    const location = useLocation();\n\n    const [device, setDevice] = useState<Adb | undefined>();\n\n    const routes = useMemo((): RouteInfo[] => [\n        {\n            path: '/',\n            exact: true,\n            name: 'Introduction',\n            children: (\n                <Intro />\n            )\n        },\n        {\n            path: '/device-info',\n            name: 'Device Info',\n            children: (\n                <>\n                    <StackItem>\n                        Product: {device?.product}\n                    </StackItem>\n                    <StackItem>\n                        Model: {device?.model}\n                    </StackItem>\n                    <StackItem>\n                        Device: {device?.device}\n                    </StackItem>\n                    <StackItem>\n                        Features: {device?.features?.join(',')}\n                    </StackItem>\n                </>\n            )\n        },\n        {\n            path: '/adb-over-wifi',\n            name: 'ADB over WiFi',\n            children: (\n                <TcpIp device={device} />\n            )\n        },\n        {\n            path: '/shell',\n            name: 'Interactive Shell',\n            children: (\n                <Shell device={device} />\n            ),\n        },\n        {\n            path: '/file-manager',\n            name: 'File Manager',\n            children: (\n                <FileManager device={device} />\n            ),\n        },\n    ], [device]);\n\n    return (\n        <Stack verticalFill>\n            <StackItem tokens={{ padding: 8 }}>\n                <Text variant=\"xxLarge\">WebADB Demo</Text>\n            </StackItem>\n            <StackItem>\n                <Connect device={device} onDeviceChange={setDevice} />\n            </StackItem>\n            <StackItem>\n                <Separator />\n            </StackItem>\n            <StackItem grow styles={{ root: { minHeight: 0 } }}>\n                <Stack horizontal verticalFill tokens={{ childrenGap: 8 }}>\n                    <StackItem>\n                        <Nav\n                            styles={{ root: { width: 250 } }}\n                            groups={[{\n                                links: routes.map(route => ({\n                                    key: route.path,\n                                    name: route.name,\n                                    url: `#${route.path}`,\n                                })),\n                            }]}\n                            selectedKey={location.pathname}\n                        />\n                    </StackItem>\n                    <StackItem grow styles={{ root: { minHeight: 0, overflow: 'hidden' } }}>\n                        <CacheSwitch>\n                            {routes.map<React.ReactElement>(route => (\n                                <CacheRoute exact={route.exact} path={route.path}>\n                                    {route.children}\n                                </CacheRoute>\n                            ))}\n\n                            <Redirect to=\"/\" />\n                        </CacheSwitch>\n                    </StackItem>\n                </Stack>\n            </StackItem>\n        </Stack>\n    );\n}\n\nReactDOM.render(\n    <HashRouter>\n        <ErrorDialogProvider>\n            <App />\n        </ErrorDialogProvider>\n    </HashRouter>,\n    document.getElementById('container')\n);\n"],"sourceRoot":""}