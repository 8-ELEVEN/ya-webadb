!function(e){var n={};function I(g){if(n[g])return n[g].exports;var t=n[g]={i:g,l:!1,exports:{}};return e[g].call(t.exports,t,t.exports,I),t.l=!0,t.exports}I.m=e,I.c=n,I.d=function(e,n,g){I.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:g})},I.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},I.t=function(e,n){if(1&n&&(e=I(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var g=Object.create(null);if(I.r(g),Object.defineProperty(g,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var t in e)I.d(g,t,function(n){return e[n]}.bind(null,t));return g},I.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return I.d(n,"a",n),n},I.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},I.p="/lib/",I(I.s=49)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(39);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanM/YWI1YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLElBQXFDO0FBQ3pDLG1CQUFtQixtQkFBTyxDQUFDLEVBQStCO0FBQzFELENBQUMsTUFBTSxFQUVOIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")},,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _inheritsLoose; });\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcz83NDhlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n')},,function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (false) {}\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (true) {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = __webpack_require__(40);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzPzhiYzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sS0FBcUMsRUFBRSxFQVMxQztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUksSUFBcUM7QUFDekM7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsRUFBbUM7QUFDOUQsQ0FBQyxNQUFNLEVBRU4iLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (false) { var throwOnDirectAccess, ReactIs; } else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = __webpack_require__(45)();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcz9kN2JjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLEtBQXFDLEVBQUUscUNBTzFDO0FBQ0Q7QUFDQTtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLEVBQTRCO0FBQ3ZEIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n")},,,,function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PromiseResolver = void 0;\r\nvar PromiseResolver = /** @class */ (function () {\r\n    function PromiseResolver() {\r\n        var _this = this;\r\n        this._state = 'running';\r\n        this._promise = new Promise(function (resolve, reject) {\r\n            _this._resolve = resolve;\r\n            _this._reject = reject;\r\n        });\r\n    }\r\n    Object.defineProperty(PromiseResolver.prototype, \"promise\", {\r\n        get: function () { return this._promise; },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PromiseResolver.prototype, \"state\", {\r\n        get: function () { return this._state; },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    PromiseResolver.prototype.resolve = function (value) {\r\n        this._resolve(value);\r\n        this._state = 'resolved';\r\n    };\r\n    PromiseResolver.prototype.reject = function (reason) {\r\n        this._reject(reason);\r\n        this._state = 'rejected';\r\n    };\r\n    return PromiseResolver;\r\n}());\r\nexports.PromiseResolver = PromiseResolver;\r\nvar AsyncOperationManager = /** @class */ (function () {\r\n    function AsyncOperationManager(initialId) {\r\n        if (initialId === void 0) { initialId = 0; }\r\n        this.operations = new Map();\r\n        this.operationId = initialId;\r\n    }\r\n    AsyncOperationManager.prototype.add = function () {\r\n        var id = this.operationId++;\r\n        var resolver = new PromiseResolver();\r\n        this.operations.set(id, resolver);\r\n        return { id: id, promise: resolver.promise };\r\n    };\r\n    AsyncOperationManager.prototype.getResolver = function (id) {\r\n        if (!this.operations.has(id)) {\r\n            return null;\r\n        }\r\n        var resolver = this.operations.get(id);\r\n        this.operations.delete(id);\r\n        return resolver;\r\n    };\r\n    AsyncOperationManager.prototype.resolve = function (id, result) {\r\n        var resolver = this.getResolver(id);\r\n        if (resolver !== null) {\r\n            resolver.resolve(result);\r\n        }\r\n    };\r\n    AsyncOperationManager.prototype.reject = function (id, reason) {\r\n        var resolver = this.getResolver(id);\r\n        if (resolver !== null) {\r\n            resolver.reject(reason);\r\n        }\r\n    };\r\n    return AsyncOperationManager;\r\n}());\r\nexports.default = AsyncOperationManager;\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vd2ViYWRiL25vZGVfbW9kdWxlcy9AeXVtZS1jaGFuL2FzeW5jLW9wZXJhdGlvbi1tYW5hZ2VyL2xpYi9pbmRleC5qcz9jMTFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMEJBQTBCLHNCQUFzQixFQUFFO0FBQ2xEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSwwQkFBMEIsb0JBQW9CLEVBQUU7QUFDaEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGVBQWU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuUHJvbWlzZVJlc29sdmVyID0gdm9pZCAwO1xyXG52YXIgUHJvbWlzZVJlc29sdmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHJvbWlzZVJlc29sdmVyKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5fc3RhdGUgPSAncnVubmluZyc7XHJcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgICAgICAgICBfdGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByb21pc2VSZXNvbHZlci5wcm90b3R5cGUsIFwicHJvbWlzZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9taXNlOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHJvbWlzZVJlc29sdmVyLnByb3RvdHlwZSwgXCJzdGF0ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9zdGF0ZTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgUHJvbWlzZVJlc29sdmVyLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fcmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5fc3RhdGUgPSAncmVzb2x2ZWQnO1xyXG4gICAgfTtcclxuICAgIFByb21pc2VSZXNvbHZlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgIHRoaXMuX3JlamVjdChyZWFzb24pO1xyXG4gICAgICAgIHRoaXMuX3N0YXRlID0gJ3JlamVjdGVkJztcclxuICAgIH07XHJcbiAgICByZXR1cm4gUHJvbWlzZVJlc29sdmVyO1xyXG59KCkpO1xyXG5leHBvcnRzLlByb21pc2VSZXNvbHZlciA9IFByb21pc2VSZXNvbHZlcjtcclxudmFyIEFzeW5jT3BlcmF0aW9uTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFzeW5jT3BlcmF0aW9uTWFuYWdlcihpbml0aWFsSWQpIHtcclxuICAgICAgICBpZiAoaW5pdGlhbElkID09PSB2b2lkIDApIHsgaW5pdGlhbElkID0gMDsgfVxyXG4gICAgICAgIHRoaXMub3BlcmF0aW9ucyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLm9wZXJhdGlvbklkID0gaW5pdGlhbElkO1xyXG4gICAgfVxyXG4gICAgQXN5bmNPcGVyYXRpb25NYW5hZ2VyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGlkID0gdGhpcy5vcGVyYXRpb25JZCsrO1xyXG4gICAgICAgIHZhciByZXNvbHZlciA9IG5ldyBQcm9taXNlUmVzb2x2ZXIoKTtcclxuICAgICAgICB0aGlzLm9wZXJhdGlvbnMuc2V0KGlkLCByZXNvbHZlcik7XHJcbiAgICAgICAgcmV0dXJuIHsgaWQ6IGlkLCBwcm9taXNlOiByZXNvbHZlci5wcm9taXNlIH07XHJcbiAgICB9O1xyXG4gICAgQXN5bmNPcGVyYXRpb25NYW5hZ2VyLnByb3RvdHlwZS5nZXRSZXNvbHZlciA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcGVyYXRpb25zLmhhcyhpZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXNvbHZlciA9IHRoaXMub3BlcmF0aW9ucy5nZXQoaWQpO1xyXG4gICAgICAgIHRoaXMub3BlcmF0aW9ucy5kZWxldGUoaWQpO1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlcjtcclxuICAgIH07XHJcbiAgICBBc3luY09wZXJhdGlvbk1hbmFnZXIucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiAoaWQsIHJlc3VsdCkge1xyXG4gICAgICAgIHZhciByZXNvbHZlciA9IHRoaXMuZ2V0UmVzb2x2ZXIoaWQpO1xyXG4gICAgICAgIGlmIChyZXNvbHZlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXNvbHZlci5yZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFzeW5jT3BlcmF0aW9uTWFuYWdlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24gKGlkLCByZWFzb24pIHtcclxuICAgICAgICB2YXIgcmVzb2x2ZXIgPSB0aGlzLmdldFJlc29sdmVyKGlkKTtcclxuICAgICAgICBpZiAocmVzb2x2ZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZXIucmVqZWN0KHJlYXNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBBc3luY09wZXJhdGlvbk1hbmFnZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IEFzeW5jT3BlcmF0aW9uTWFuYWdlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* reexport */ setVersion; });\n\n// CONCATENATED MODULE: ./node_modules/@uifabric/set-version/lib/setVersion.js\n// A packages cache that makes sure that we don't inject the same packageName twice in the same bundle -\n// this cache is local to the module closure inside this bundle\nvar packagesCache = {};\n// Cache access to window to avoid IE11 memory leak.\nvar _win = undefined;\ntry {\n    _win = window;\n}\ncatch (e) {\n    /* no-op */\n}\nfunction setVersion(packageName, packageVersion) {\n    if (typeof _win !== 'undefined') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var packages = (_win.__packages__ = _win.__packages__ || {});\n        // We allow either the global packages or local packages caches to invalidate so testing can\n        // just clear the global to set this state\n        if (!packages[packageName] || !packagesCache[packageName]) {\n            packagesCache[packageName] = packageVersion;\n            var versions = (packages[packageName] = packages[packageName] || []);\n            versions.push(packageVersion);\n        }\n    }\n}\n//# sourceMappingURL=setVersion.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/set-version/lib/index.js\n\n\nsetVersion('@uifabric/set-version', '6.0.0');\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHVpZmFicmljL3NldC12ZXJzaW9uL2xpYi9zZXRWZXJzaW9uLmpzPzExZWIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B1aWZhYnJpYy9zZXQtdmVyc2lvbi9saWIvaW5kZXguanM/NGJmMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0M7O0FDeEIwQztBQUNwQjtBQUN0QixVQUFVO0FBQ1YiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBIHBhY2thZ2VzIGNhY2hlIHRoYXQgbWFrZXMgc3VyZSB0aGF0IHdlIGRvbid0IGluamVjdCB0aGUgc2FtZSBwYWNrYWdlTmFtZSB0d2ljZSBpbiB0aGUgc2FtZSBidW5kbGUgLVxuLy8gdGhpcyBjYWNoZSBpcyBsb2NhbCB0byB0aGUgbW9kdWxlIGNsb3N1cmUgaW5zaWRlIHRoaXMgYnVuZGxlXG52YXIgcGFja2FnZXNDYWNoZSA9IHt9O1xuLy8gQ2FjaGUgYWNjZXNzIHRvIHdpbmRvdyB0byBhdm9pZCBJRTExIG1lbW9yeSBsZWFrLlxudmFyIF93aW4gPSB1bmRlZmluZWQ7XG50cnkge1xuICAgIF93aW4gPSB3aW5kb3c7XG59XG5jYXRjaCAoZSkge1xuICAgIC8qIG5vLW9wICovXG59XG5leHBvcnQgZnVuY3Rpb24gc2V0VmVyc2lvbihwYWNrYWdlTmFtZSwgcGFja2FnZVZlcnNpb24pIHtcbiAgICBpZiAodHlwZW9mIF93aW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHZhciBwYWNrYWdlcyA9IChfd2luLl9fcGFja2FnZXNfXyA9IF93aW4uX19wYWNrYWdlc19fIHx8IHt9KTtcbiAgICAgICAgLy8gV2UgYWxsb3cgZWl0aGVyIHRoZSBnbG9iYWwgcGFja2FnZXMgb3IgbG9jYWwgcGFja2FnZXMgY2FjaGVzIHRvIGludmFsaWRhdGUgc28gdGVzdGluZyBjYW5cbiAgICAgICAgLy8ganVzdCBjbGVhciB0aGUgZ2xvYmFsIHRvIHNldCB0aGlzIHN0YXRlXG4gICAgICAgIGlmICghcGFja2FnZXNbcGFja2FnZU5hbWVdIHx8ICFwYWNrYWdlc0NhY2hlW3BhY2thZ2VOYW1lXSkge1xuICAgICAgICAgICAgcGFja2FnZXNDYWNoZVtwYWNrYWdlTmFtZV0gPSBwYWNrYWdlVmVyc2lvbjtcbiAgICAgICAgICAgIHZhciB2ZXJzaW9ucyA9IChwYWNrYWdlc1twYWNrYWdlTmFtZV0gPSBwYWNrYWdlc1twYWNrYWdlTmFtZV0gfHwgW10pO1xuICAgICAgICAgICAgdmVyc2lvbnMucHVzaChwYWNrYWdlVmVyc2lvbik7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRWZXJzaW9uLmpzLm1hcCIsImltcG9ydCB7IHNldFZlcnNpb24gfSBmcm9tICcuL3NldFZlcnNpb24nO1xuZXhwb3J0IHsgc2V0VmVyc2lvbiB9O1xuc2V0VmVyc2lvbignQHVpZmFicmljL3NldC12ZXJzaW9uJywgJzYuMC4wJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///12\n")},,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _disposable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(19);\n/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20);\n/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_event__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony reexport (checked) */ if(__webpack_require__.o(_event__WEBPACK_IMPORTED_MODULE_1__, "EventEmitter")) __webpack_require__.d(__webpack_exports__, "EventEmitter", function() { return _event__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]; });\n\n/* harmony import */ var _event_emitter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(21);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EventEmitter", function() { return _event_emitter__WEBPACK_IMPORTED_MODULE_2__["a"]; });\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZXZlbnQvbGliL2luZGV4LmpzPzFhMDEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUE2QjtBQUNMO0FBQ1E7QUFDaEMiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2Rpc3Bvc2FibGUnO1xuZXhwb3J0ICogZnJvbSAnLi9ldmVudCc7XG5leHBvcnQgKiBmcm9tICcuL2V2ZW50LWVtaXR0ZXInO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n\nvar MAX_SIGNED_31_BIT_INT = 1073741823;\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};\n\nfunction getUniqueId() {\n  var key = '__global_unique_id__';\n  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;\n}\n\nfunction objectIs(x, y) {\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction createEventEmitter(value) {\n  var handlers = [];\n  return {\n    on: function on(handler) {\n      handlers.push(handler);\n    },\n    off: function off(handler) {\n      handlers = handlers.filter(function (h) {\n        return h !== handler;\n      });\n    },\n    get: function get() {\n      return value;\n    },\n    set: function set(newValue, changedBits) {\n      value = newValue;\n      handlers.forEach(function (handler) {\n        return handler(value, changedBits);\n      });\n    }\n  };\n}\n\nfunction onlyChild(children) {\n  return Array.isArray(children) ? children[0] : children;\n}\n\nfunction createReactContext(defaultValue, calculateChangedBits) {\n  var _Provider$childContex, _Consumer$contextType;\n\n  var contextProp = '__create-react-context-' + getUniqueId() + '__';\n\n  var Provider = /*#__PURE__*/function (_Component) {\n    Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(Provider, _Component);\n\n    function Provider() {\n      var _this;\n\n      _this = _Component.apply(this, arguments) || this;\n      _this.emitter = createEventEmitter(_this.props.value);\n      return _this;\n    }\n\n    var _proto = Provider.prototype;\n\n    _proto.getChildContext = function getChildContext() {\n      var _ref;\n\n      return _ref = {}, _ref[contextProp] = this.emitter, _ref;\n    };\n\n    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      if (this.props.value !== nextProps.value) {\n        var oldValue = this.props.value;\n        var newValue = nextProps.value;\n        var changedBits;\n\n        if (objectIs(oldValue, newValue)) {\n          changedBits = 0;\n        } else {\n          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;\n\n          if (false) {}\n\n          changedBits |= 0;\n\n          if (changedBits !== 0) {\n            this.emitter.set(nextProps.value, changedBits);\n          }\n        }\n      }\n    };\n\n    _proto.render = function render() {\n      return this.props.children;\n    };\n\n    return Provider;\n  }(react__WEBPACK_IMPORTED_MODULE_0__[\"Component\"]);\n\n  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object.isRequired, _Provider$childContex);\n\n  var Consumer = /*#__PURE__*/function (_Component2) {\n    Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(Consumer, _Component2);\n\n    function Consumer() {\n      var _this2;\n\n      _this2 = _Component2.apply(this, arguments) || this;\n      _this2.state = {\n        value: _this2.getValue()\n      };\n\n      _this2.onUpdate = function (newValue, changedBits) {\n        var observedBits = _this2.observedBits | 0;\n\n        if ((observedBits & changedBits) !== 0) {\n          _this2.setState({\n            value: _this2.getValue()\n          });\n        }\n      };\n\n      return _this2;\n    }\n\n    var _proto2 = Consumer.prototype;\n\n    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      var observedBits = nextProps.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentDidMount = function componentDidMount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].on(this.onUpdate);\n      }\n\n      var observedBits = this.props.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentWillUnmount = function componentWillUnmount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].off(this.onUpdate);\n      }\n    };\n\n    _proto2.getValue = function getValue() {\n      if (this.context[contextProp]) {\n        return this.context[contextProp].get();\n      } else {\n        return defaultValue;\n      }\n    };\n\n    _proto2.render = function render() {\n      return onlyChild(this.props.children)(this.state.value);\n    };\n\n    return Consumer;\n  }(react__WEBPACK_IMPORTED_MODULE_0__[\"Component\"]);\n\n  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object, _Consumer$contextType);\n  return {\n    Provider: Provider,\n    Consumer: Consumer\n  };\n}\n\nvar index = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext || createReactContext;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (index);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(23)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n")},function(module,exports,__webpack_require__){eval("var isarray = __webpack_require__(47)\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n")},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* unused harmony export AutoDisposable */\n/* unused harmony export DisposableList */\nclass AutoDisposable {\n    constructor() {\n        this.disposables = [];\n    }\n    addDisposable(disposable) {\n        this.disposables.push(disposable);\n        return disposable;\n    }\n    dispose() {\n        for (const disposable of this.disposables) {\n            disposable.dispose();\n        }\n        this.disposables = [];\n    }\n}\nclass DisposableList extends AutoDisposable {\n    add(disposable) {\n        return this.addDisposable(disposable);\n    }\n}\n//# sourceMappingURL=disposable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZXZlbnQvbGliL2Rpc3Bvc2FibGUuanM/Njk5NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEF1dG9EaXNwb3NhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlcyA9IFtdO1xuICAgIH1cbiAgICBhZGREaXNwb3NhYmxlKGRpc3Bvc2FibGUpIHtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlcy5wdXNoKGRpc3Bvc2FibGUpO1xuICAgICAgICByZXR1cm4gZGlzcG9zYWJsZTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgZm9yIChjb25zdCBkaXNwb3NhYmxlIG9mIHRoaXMuZGlzcG9zYWJsZXMpIHtcbiAgICAgICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBbXTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRGlzcG9zYWJsZUxpc3QgZXh0ZW5kcyBBdXRvRGlzcG9zYWJsZSB7XG4gICAgYWRkKGRpc3Bvc2FibGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRGlzcG9zYWJsZShkaXNwb3NhYmxlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXNwb3NhYmxlLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n")},function(module,exports){eval("//# sourceMappingURL=event.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZXZlbnQvbGliL2V2ZW50LmpzPzM1YjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudC5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EventEmitter; });\nclass EventEmitter {\n    constructor() {\n        this.listeners = [];\n        this.event = this.event.bind(this);\n    }\n    event(listener, thisArg, ...args) {\n        const info = {\n            listener,\n            thisArg,\n            args,\n        };\n        this.listeners.push(info);\n        const remove = () => {\n            const index = this.listeners.indexOf(info);\n            if (index > 0) {\n                this.listeners.splice(index, 1);\n            }\n        };\n        remove.dispose = remove;\n        return remove;\n    }\n    fire(e) {\n        for (const info of this.listeners) {\n            info.listener.apply(info.thisArg, [e, ...info.args]);\n        }\n    }\n    dispose() {\n        this.listeners.length = 0;\n    }\n}\n//# sourceMappingURL=event-emitter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZXZlbnQvbGliL2V2ZW50LWVtaXR0ZXIuanM/NTg4MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0gW107XG4gICAgICAgIHRoaXMuZXZlbnQgPSB0aGlzLmV2ZW50LmJpbmQodGhpcyk7XG4gICAgfVxuICAgIGV2ZW50KGxpc3RlbmVyLCB0aGlzQXJnLCAuLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGluZm8gPSB7XG4gICAgICAgICAgICBsaXN0ZW5lcixcbiAgICAgICAgICAgIHRoaXNBcmcsXG4gICAgICAgICAgICBhcmdzLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGluZm8pO1xuICAgICAgICBjb25zdCByZW1vdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMubGlzdGVuZXJzLmluZGV4T2YoaW5mbyk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmVtb3ZlLmRpc3Bvc2UgPSByZW1vdmU7XG4gICAgICAgIHJldHVybiByZW1vdmU7XG4gICAgfVxuICAgIGZpcmUoZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGluZm8gb2YgdGhpcy5saXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIGluZm8ubGlzdGVuZXIuYXBwbHkoaW5mby50aGlzQXJnLCBbZSwgLi4uaW5mby5hcmdzXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMubGVuZ3RoID0gMDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudC1lbWl0dGVyLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){"use strict";eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcz8zMjBjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixzQkFBc0I7QUFDdEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n")},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(48);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanM/NGNlYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLElBQXFDO0FBQ3pDLG1CQUFtQixtQkFBTyxDQUFDLEVBQWtDO0FBQzdELENBQUMsTUFBTSxFQUVOIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n")},function(module,exports,__webpack_require__){eval('!function(e,t){if(true)module.exports=t();else { var i, r; }}(window,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=34)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.forwardEvent=t.EventEmitter=void 0;var i=function(){function e(){this._listeners=[],this._disposed=!1}return Object.defineProperty(e.prototype,"event",{get:function(){var e=this;return this._event||(this._event=function(t){return e._listeners.push(t),{dispose:function(){if(!e._disposed)for(var r=0;r<e._listeners.length;r++)if(e._listeners[r]===t)return void e._listeners.splice(r,1)}}}),this._event},enumerable:!1,configurable:!0}),e.prototype.fire=function(e,t){for(var r=[],i=0;i<this._listeners.length;i++)r.push(this._listeners[i]);for(i=0;i<r.length;i++)r[i].call(void 0,e,t)},e.prototype.dispose=function(){this._listeners&&(this._listeners.length=0),this._disposed=!0},e}();t.EventEmitter=i,t.forwardEvent=function(e,t){return e((function(e){return t.fire(e)}))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IUnicodeService=t.IOptionsService=t.ILogService=t.IInstantiationService=t.IDirtyRowService=t.ICharsetService=t.ICoreService=t.ICoreMouseService=t.IBufferService=void 0;var i=r(14);t.IBufferService=i.createDecorator("BufferService"),t.ICoreMouseService=i.createDecorator("CoreMouseService"),t.ICoreService=i.createDecorator("CoreService"),t.ICharsetService=i.createDecorator("CharsetService"),t.IDirtyRowService=i.createDecorator("DirtyRowService"),t.IInstantiationService=i.createDecorator("InstantiationService"),t.ILogService=i.createDecorator("LogService"),t.IOptionsService=i.createDecorator("OptionsService"),t.IUnicodeService=i.createDecorator("UnicodeService")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getDisposeArrayDisposable=t.disposeArray=t.Disposable=void 0;var i=function(){function e(){this._disposables=[],this._isDisposed=!1}return e.prototype.dispose=function(){this._isDisposed=!0;for(var e=0,t=this._disposables;e<t.length;e++){t[e].dispose()}this._disposables.length=0},e.prototype.register=function(e){return this._disposables.push(e),e},e.prototype.unregister=function(e){var t=this._disposables.indexOf(e);-1!==t&&this._disposables.splice(t,1)},e}();function n(e){for(var t=0,r=e;t<r.length;t++){r[t].dispose()}e.length=0}t.Disposable=i,t.disposeArray=n,t.getDisposeArrayDisposable=function(e){return{dispose:function(){return n(e)}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WHITESPACE_CELL_CODE=t.WHITESPACE_CELL_WIDTH=t.WHITESPACE_CELL_CHAR=t.NULL_CELL_CODE=t.NULL_CELL_WIDTH=t.NULL_CELL_CHAR=t.CHAR_DATA_CODE_INDEX=t.CHAR_DATA_WIDTH_INDEX=t.CHAR_DATA_CHAR_INDEX=t.CHAR_DATA_ATTR_INDEX=t.DEFAULT_ATTR=t.DEFAULT_COLOR=void 0,t.DEFAULT_COLOR=256,t.DEFAULT_ATTR=256|t.DEFAULT_COLOR<<9,t.CHAR_DATA_ATTR_INDEX=0,t.CHAR_DATA_CHAR_INDEX=1,t.CHAR_DATA_WIDTH_INDEX=2,t.CHAR_DATA_CODE_INDEX=3,t.NULL_CELL_CHAR="",t.NULL_CELL_WIDTH=1,t.NULL_CELL_CODE=0,t.WHITESPACE_CELL_CHAR=" ",t.WHITESPACE_CELL_WIDTH=1,t.WHITESPACE_CELL_CODE=32},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.CellData=void 0;var o=r(8),s=r(3),a=r(6),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.content=0,t.fg=0,t.bg=0,t.extended=new a.ExtendedAttrs,t.combinedData="",t}return n(t,e),t.fromCharData=function(e){var r=new t;return r.setFromCharData(e),r},t.prototype.isCombined=function(){return 2097152&this.content},t.prototype.getWidth=function(){return this.content>>22},t.prototype.getChars=function(){return 2097152&this.content?this.combinedData:2097151&this.content?o.stringFromCodePoint(2097151&this.content):""},t.prototype.getCode=function(){return this.isCombined()?this.combinedData.charCodeAt(this.combinedData.length-1):2097151&this.content},t.prototype.setFromCharData=function(e){this.fg=e[s.CHAR_DATA_ATTR_INDEX],this.bg=0;var t=!1;if(e[s.CHAR_DATA_CHAR_INDEX].length>2)t=!0;else if(2===e[s.CHAR_DATA_CHAR_INDEX].length){var r=e[s.CHAR_DATA_CHAR_INDEX].charCodeAt(0);if(55296<=r&&r<=56319){var i=e[s.CHAR_DATA_CHAR_INDEX].charCodeAt(1);56320<=i&&i<=57343?this.content=1024*(r-55296)+i-56320+65536|e[s.CHAR_DATA_WIDTH_INDEX]<<22:t=!0}else t=!0}else this.content=e[s.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|e[s.CHAR_DATA_WIDTH_INDEX]<<22;t&&(this.combinedData=e[s.CHAR_DATA_CHAR_INDEX],this.content=2097152|e[s.CHAR_DATA_WIDTH_INDEX]<<22)},t.prototype.getAsCharData=function(){return[this.fg,this.getChars(),this.getWidth(),this.getCode()]},t}(a.AttributeData);t.CellData=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ISoundService=t.ISelectionService=t.IRenderService=t.IMouseService=t.ICoreBrowserService=t.ICharSizeService=void 0;var i=r(14);t.ICharSizeService=i.createDecorator("CharSizeService"),t.ICoreBrowserService=i.createDecorator("CoreBrowserService"),t.IMouseService=i.createDecorator("MouseService"),t.IRenderService=i.createDecorator("RenderService"),t.ISelectionService=i.createDecorator("SelectionService"),t.ISoundService=i.createDecorator("SoundService")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ExtendedAttrs=t.AttributeData=void 0;var i=function(){function e(){this.fg=0,this.bg=0,this.extended=new n}return e.toColorRGB=function(e){return[e>>>16&255,e>>>8&255,255&e]},e.fromColorRGB=function(e){return(255&e[0])<<16|(255&e[1])<<8|255&e[2]},e.prototype.clone=function(){var t=new e;return t.fg=this.fg,t.bg=this.bg,t.extended=this.extended.clone(),t},e.prototype.isInverse=function(){return 67108864&this.fg},e.prototype.isBold=function(){return 134217728&this.fg},e.prototype.isUnderline=function(){return 268435456&this.fg},e.prototype.isBlink=function(){return 536870912&this.fg},e.prototype.isInvisible=function(){return 1073741824&this.fg},e.prototype.isItalic=function(){return 67108864&this.bg},e.prototype.isDim=function(){return 134217728&this.bg},e.prototype.getFgColorMode=function(){return 50331648&this.fg},e.prototype.getBgColorMode=function(){return 50331648&this.bg},e.prototype.isFgRGB=function(){return 50331648==(50331648&this.fg)},e.prototype.isBgRGB=function(){return 50331648==(50331648&this.bg)},e.prototype.isFgPalette=function(){return 16777216==(50331648&this.fg)||33554432==(50331648&this.fg)},e.prototype.isBgPalette=function(){return 16777216==(50331648&this.bg)||33554432==(50331648&this.bg)},e.prototype.isFgDefault=function(){return 0==(50331648&this.fg)},e.prototype.isBgDefault=function(){return 0==(50331648&this.bg)},e.prototype.isAttributeDefault=function(){return 0===this.fg&&0===this.bg},e.prototype.getFgColor=function(){switch(50331648&this.fg){case 16777216:case 33554432:return 255&this.fg;case 50331648:return 16777215&this.fg;default:return-1}},e.prototype.getBgColor=function(){switch(50331648&this.bg){case 16777216:case 33554432:return 255&this.bg;case 50331648:return 16777215&this.bg;default:return-1}},e.prototype.hasExtendedAttrs=function(){return 268435456&this.bg},e.prototype.updateExtended=function(){this.extended.isEmpty()?this.bg&=-268435457:this.bg|=268435456},e.prototype.getUnderlineColor=function(){if(268435456&this.bg&&~this.extended.underlineColor)switch(50331648&this.extended.underlineColor){case 16777216:case 33554432:return 255&this.extended.underlineColor;case 50331648:return 16777215&this.extended.underlineColor;default:return this.getFgColor()}return this.getFgColor()},e.prototype.getUnderlineColorMode=function(){return 268435456&this.bg&&~this.extended.underlineColor?50331648&this.extended.underlineColor:this.getFgColorMode()},e.prototype.isUnderlineColorRGB=function(){return 268435456&this.bg&&~this.extended.underlineColor?50331648==(50331648&this.extended.underlineColor):this.isFgRGB()},e.prototype.isUnderlineColorPalette=function(){return 268435456&this.bg&&~this.extended.underlineColor?16777216==(50331648&this.extended.underlineColor)||33554432==(50331648&this.extended.underlineColor):this.isFgPalette()},e.prototype.isUnderlineColorDefault=function(){return 268435456&this.bg&&~this.extended.underlineColor?0==(50331648&this.extended.underlineColor):this.isFgDefault()},e.prototype.getUnderlineStyle=function(){return 268435456&this.fg?268435456&this.bg?this.extended.underlineStyle:1:0},e}();t.AttributeData=i;var n=function(){function e(e,t){void 0===e&&(e=0),void 0===t&&(t=-1),this.underlineStyle=e,this.underlineColor=t}return e.prototype.clone=function(){return new e(this.underlineStyle,this.underlineColor)},e.prototype.isEmpty=function(){return 0===this.underlineStyle},e}();t.ExtendedAttrs=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addDisposableDomListener=void 0,t.addDisposableDomListener=function(e,t,r,i){e.addEventListener(t,r,i);var n=!1;return{dispose:function(){n||(n=!0,e.removeEventListener(t,r,i))}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Utf8ToUtf32=t.StringToUtf32=t.utf32ToString=t.stringFromCodePoint=void 0,t.stringFromCodePoint=function(e){return e>65535?(e-=65536,String.fromCharCode(55296+(e>>10))+String.fromCharCode(e%1024+56320)):String.fromCharCode(e)},t.utf32ToString=function(e,t,r){void 0===t&&(t=0),void 0===r&&(r=e.length);for(var i="",n=t;n<r;++n){var o=e[n];o>65535?(o-=65536,i+=String.fromCharCode(55296+(o>>10))+String.fromCharCode(o%1024+56320)):i+=String.fromCharCode(o)}return i};var i=function(){function e(){this._interim=0}return e.prototype.clear=function(){this._interim=0},e.prototype.decode=function(e,t){var r=e.length;if(!r)return 0;var i=0,n=0;this._interim&&(56320<=(a=e.charCodeAt(n++))&&a<=57343?t[i++]=1024*(this._interim-55296)+a-56320+65536:(t[i++]=this._interim,t[i++]=a),this._interim=0);for(var o=n;o<r;++o){var s=e.charCodeAt(o);if(55296<=s&&s<=56319){if(++o>=r)return this._interim=s,i;var a;56320<=(a=e.charCodeAt(o))&&a<=57343?t[i++]=1024*(s-55296)+a-56320+65536:(t[i++]=s,t[i++]=a)}else t[i++]=s}return i},e}();t.StringToUtf32=i;var n=function(){function e(){this.interim=new Uint8Array(3)}return e.prototype.clear=function(){this.interim.fill(0)},e.prototype.decode=function(e,t){var r=e.length;if(!r)return 0;var i,n,o,s,a=0,c=0,l=0;if(this.interim[0]){var h=!1,u=this.interim[0];u&=192==(224&u)?31:224==(240&u)?15:7;for(var f=0,_=void 0;(_=63&this.interim[++f])&&f<4;)u<<=6,u|=_;for(var d=192==(224&this.interim[0])?2:224==(240&this.interim[0])?3:4,p=d-f;l<p;){if(l>=r)return 0;if(128!=(192&(_=e[l++]))){l--,h=!0;break}this.interim[f++]=_,u<<=6,u|=63&_}h||(2===d?u<128?l--:t[a++]=u:3===d?u<2048||u>=55296&&u<=57343||(t[a++]=u):u<65536||u>1114111||(t[a++]=u)),this.interim.fill(0)}for(var v=r-4,g=l;g<r;){for(;!(!(g<v)||128&(i=e[g])||128&(n=e[g+1])||128&(o=e[g+2])||128&(s=e[g+3]));)t[a++]=i,t[a++]=n,t[a++]=o,t[a++]=s,g+=4;if((i=e[g++])<128)t[a++]=i;else if(192==(224&i)){if(g>=r)return this.interim[0]=i,a;if(128!=(192&(n=e[g++]))){g--;continue}if((c=(31&i)<<6|63&n)<128){g--;continue}t[a++]=c}else if(224==(240&i)){if(g>=r)return this.interim[0]=i,a;if(128!=(192&(n=e[g++]))){g--;continue}if(g>=r)return this.interim[0]=i,this.interim[1]=n,a;if(128!=(192&(o=e[g++]))){g--;continue}if((c=(15&i)<<12|(63&n)<<6|63&o)<2048||c>=55296&&c<=57343)continue;t[a++]=c}else if(240==(248&i)){if(g>=r)return this.interim[0]=i,a;if(128!=(192&(n=e[g++]))){g--;continue}if(g>=r)return this.interim[0]=i,this.interim[1]=n,a;if(128!=(192&(o=e[g++]))){g--;continue}if(g>=r)return this.interim[0]=i,this.interim[1]=n,this.interim[2]=o,a;if(128!=(192&(s=e[g++]))){g--;continue}if((c=(7&i)<<18|(63&n)<<12|(63&o)<<6|63&s)<65536||c>1114111)continue;t[a++]=c}}return a},e}();t.Utf8ToUtf32=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CHAR_ATLAS_CELL_SPACING=t.DIM_OPACITY=t.INVERTED_DEFAULT_COLOR=void 0,t.INVERTED_DEFAULT_COLOR=257,t.DIM_OPACITY=.5,t.CHAR_ATLAS_CELL_SPACING=1},function(e,t,r){"use strict";var i,n,o,s;function a(e){var t=e.toString(16);return t.length<2?"0"+t:t}function c(e,t){return e<t?(t+.05)/(e+.05):(e+.05)/(t+.05)}Object.defineProperty(t,"__esModule",{value:!0}),t.contrastRatio=t.toPaddedHex=t.rgba=t.rgb=t.css=t.color=t.channels=void 0,function(e){e.toCss=function(e,t,r,i){return void 0!==i?"#"+a(e)+a(t)+a(r)+a(i):"#"+a(e)+a(t)+a(r)},e.toRgba=function(e,t,r,i){return void 0===i&&(i=255),(e<<24|t<<16|r<<8|i)>>>0}}(i=t.channels||(t.channels={})),(n=t.color||(t.color={})).blend=function(e,t){var r=(255&t.rgba)/255;if(1===r)return{css:t.css,rgba:t.rgba};var n=t.rgba>>24&255,o=t.rgba>>16&255,s=t.rgba>>8&255,a=e.rgba>>24&255,c=e.rgba>>16&255,l=e.rgba>>8&255,h=a+Math.round((n-a)*r),u=c+Math.round((o-c)*r),f=l+Math.round((s-l)*r);return{css:i.toCss(h,u,f),rgba:i.toRgba(h,u,f)}},n.isOpaque=function(e){return 255==(255&e.rgba)},n.ensureContrastRatio=function(e,t,r){var i=s.ensureContrastRatio(e.rgba,t.rgba,r);if(i)return s.toColor(i>>24&255,i>>16&255,i>>8&255)},n.opaque=function(e){var t=(255|e.rgba)>>>0,r=s.toChannels(t),n=r[0],o=r[1],a=r[2];return{css:i.toCss(n,o,a),rgba:t}},n.opacity=function(e,t){var r=Math.round(255*t),n=s.toChannels(e.rgba),o=n[0],a=n[1],c=n[2];return{css:i.toCss(o,a,c,r),rgba:i.toRgba(o,a,c,r)}},(t.css||(t.css={})).toColor=function(e){switch(e.length){case 7:return{css:e,rgba:(parseInt(e.slice(1),16)<<8|255)>>>0};case 9:return{css:e,rgba:parseInt(e.slice(1),16)>>>0}}throw new Error("css.toColor: Unsupported css format")},function(e){function t(e,t,r){var i=e/255,n=t/255,o=r/255;return.2126*(i<=.03928?i/12.92:Math.pow((i+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))+.0722*(o<=.03928?o/12.92:Math.pow((o+.055)/1.055,2.4))}e.relativeLuminance=function(e){return t(e>>16&255,e>>8&255,255&e)},e.relativeLuminance2=t}(o=t.rgb||(t.rgb={})),function(e){function t(e,t,r){for(var i=e>>24&255,n=e>>16&255,s=e>>8&255,a=t>>24&255,l=t>>16&255,h=t>>8&255,u=c(o.relativeLuminance2(a,h,l),o.relativeLuminance2(i,n,s));u<r&&(a>0||l>0||h>0);)a-=Math.max(0,Math.ceil(.1*a)),l-=Math.max(0,Math.ceil(.1*l)),h-=Math.max(0,Math.ceil(.1*h)),u=c(o.relativeLuminance2(a,h,l),o.relativeLuminance2(i,n,s));return(a<<24|l<<16|h<<8|255)>>>0}function r(e,t,r){for(var i=e>>24&255,n=e>>16&255,s=e>>8&255,a=t>>24&255,l=t>>16&255,h=t>>8&255,u=c(o.relativeLuminance2(a,h,l),o.relativeLuminance2(i,n,s));u<r&&(a<255||l<255||h<255);)a=Math.min(255,a+Math.ceil(.1*(255-a))),l=Math.min(255,l+Math.ceil(.1*(255-l))),h=Math.min(255,h+Math.ceil(.1*(255-h))),u=c(o.relativeLuminance2(a,h,l),o.relativeLuminance2(i,n,s));return(a<<24|l<<16|h<<8|255)>>>0}e.ensureContrastRatio=function(e,i,n){var s=o.relativeLuminance(e>>8),a=o.relativeLuminance(i>>8);if(c(s,a)<n)return a<s?t(e,i,n):r(e,i,n)},e.reduceLuminance=t,e.increaseLuminance=r,e.toChannels=function(e){return[e>>24&255,e>>16&255,e>>8&255,255&e]},e.toColor=function(e,t,r){return{css:i.toCss(e,t,r),rgba:i.toRgba(e,t,r)}}}(s=t.rgba||(t.rgba={})),t.toPaddedHex=a,t.contrastRatio=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isLinux=t.isWindows=t.isIphone=t.isIpad=t.isMac=t.isSafari=t.isFirefox=void 0;var i="undefined"==typeof navigator,n=i?"node":navigator.userAgent,o=i?"node":navigator.platform;function s(e,t){return e.indexOf(t)>=0}t.isFirefox=!!~n.indexOf("Firefox"),t.isSafari=/^((?!chrome|android).)*safari/i.test(n),t.isMac=s(["Macintosh","MacIntel","MacPPC","Mac68K"],o),t.isIpad="iPad"===o,t.isIphone="iPhone"===o,t.isWindows=s(["Windows","Win16","Win32","WinCE"],o),t.isLinux=o.indexOf("Linux")>=0},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.C1=t.C0=void 0,function(e){e.NUL="\\0",e.SOH="",e.STX="",e.ETX="",e.EOT="",e.ENQ="",e.ACK="",e.BEL="",e.BS="\\b",e.HT="\\t",e.LF="\\n",e.VT="\\v",e.FF="\\f",e.CR="\\r",e.SO="",e.SI="",e.DLE="",e.DC1="",e.DC2="",e.DC3="",e.DC4="",e.NAK="",e.SYN="",e.ETB="",e.CAN="",e.EM="",e.SUB="",e.ESC="",e.FS="",e.GS="",e.RS="",e.US="",e.SP=" ",e.DEL=""}(t.C0||(t.C0={})),function(e){e.PAD="",e.HOP="",e.BPH="",e.NBH="",e.IND="",e.NEL="",e.SSA="",e.ESA="",e.HTS="",e.HTJ="",e.VTS="",e.PLD="",e.PLU="",e.RI="",e.SS2="",e.SS3="",e.DCS="",e.PU1="",e.PU2="",e.STS="",e.CCH="",e.MW="",e.SPA="",e.EPA="",e.SOS="",e.SGCI="",e.SCI="",e.CSI="",e.ST="",e.OSC="",e.PM="",e.APC=""}(t.C1||(t.C1={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseRenderLayer=void 0;var i=r(3),n=r(9),o=r(25),s=r(6),a=r(28),c=r(10),l=r(17),h=function(){function e(e,t,r,i,n,o,s,a){this._container=e,this._alpha=i,this._colors=n,this._rendererId=o,this._bufferService=s,this._optionsService=a,this._scaledCharWidth=0,this._scaledCharHeight=0,this._scaledCellWidth=0,this._scaledCellHeight=0,this._scaledCharLeft=0,this._scaledCharTop=0,this._currentGlyphIdentifier={chars:"",code:0,bg:0,fg:0,bold:!1,dim:!1,italic:!1},this._canvas=document.createElement("canvas"),this._canvas.classList.add("xterm-"+t+"-layer"),this._canvas.style.zIndex=r.toString(),this._initCanvas(),this._container.appendChild(this._canvas)}return e.prototype.dispose=function(){var e;l.removeElementFromParent(this._canvas),null===(e=this._charAtlas)||void 0===e||e.dispose()},e.prototype._initCanvas=function(){this._ctx=a.throwIfFalsy(this._canvas.getContext("2d",{alpha:this._alpha})),this._alpha||this._clearAll()},e.prototype.onOptionsChanged=function(){},e.prototype.onBlur=function(){},e.prototype.onFocus=function(){},e.prototype.onCursorMove=function(){},e.prototype.onGridChanged=function(e,t){},e.prototype.onSelectionChanged=function(e,t,r){void 0===r&&(r=!1)},e.prototype.setColors=function(e){this._refreshCharAtlas(e)},e.prototype._setTransparency=function(e){if(e!==this._alpha){var t=this._canvas;this._alpha=e,this._canvas=this._canvas.cloneNode(),this._initCanvas(),this._container.replaceChild(this._canvas,t),this._refreshCharAtlas(this._colors),this.onGridChanged(0,this._bufferService.rows-1)}},e.prototype._refreshCharAtlas=function(e){this._scaledCharWidth<=0&&this._scaledCharHeight<=0||(this._charAtlas=o.acquireCharAtlas(this._optionsService.options,this._rendererId,e,this._scaledCharWidth,this._scaledCharHeight),this._charAtlas.warmUp())},e.prototype.resize=function(e){this._scaledCellWidth=e.scaledCellWidth,this._scaledCellHeight=e.scaledCellHeight,this._scaledCharWidth=e.scaledCharWidth,this._scaledCharHeight=e.scaledCharHeight,this._scaledCharLeft=e.scaledCharLeft,this._scaledCharTop=e.scaledCharTop,this._canvas.width=e.scaledCanvasWidth,this._canvas.height=e.scaledCanvasHeight,this._canvas.style.width=e.canvasWidth+"px",this._canvas.style.height=e.canvasHeight+"px",this._alpha||this._clearAll(),this._refreshCharAtlas(this._colors)},e.prototype._fillCells=function(e,t,r,i){this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight)},e.prototype._fillBottomLineAtCells=function(e,t,r){void 0===r&&(r=1),this._ctx.fillRect(e*this._scaledCellWidth,(t+1)*this._scaledCellHeight-window.devicePixelRatio-1,r*this._scaledCellWidth,window.devicePixelRatio)},e.prototype._fillLeftLineAtCell=function(e,t,r){this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,window.devicePixelRatio*r,this._scaledCellHeight)},e.prototype._strokeRectAtCell=function(e,t,r,i){this._ctx.lineWidth=window.devicePixelRatio,this._ctx.strokeRect(e*this._scaledCellWidth+window.devicePixelRatio/2,t*this._scaledCellHeight+window.devicePixelRatio/2,r*this._scaledCellWidth-window.devicePixelRatio,i*this._scaledCellHeight-window.devicePixelRatio)},e.prototype._clearAll=function(){this._alpha?this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(0,0,this._canvas.width,this._canvas.height))},e.prototype._clearCells=function(e,t,r,i){this._alpha?this._ctx.clearRect(e*this._scaledCellWidth,t*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight))},e.prototype._fillCharTrueColor=function(e,t,r){this._ctx.font=this._getFont(!1,!1),this._ctx.textBaseline="middle",this._clipRow(r),this._ctx.fillText(e.getChars(),t*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop+this._scaledCharHeight/2)},e.prototype._drawChars=function(e,t,r){var o,s,a=this._getContrastColor(e);a||e.isFgRGB()||e.isBgRGB()?this._drawUncachedChars(e,t,r,a):(e.isInverse()?(o=e.isBgDefault()?n.INVERTED_DEFAULT_COLOR:e.getBgColor(),s=e.isFgDefault()?n.INVERTED_DEFAULT_COLOR:e.getFgColor()):(s=e.isBgDefault()?i.DEFAULT_COLOR:e.getBgColor(),o=e.isFgDefault()?i.DEFAULT_COLOR:e.getFgColor()),o+=this._optionsService.options.drawBoldTextInBrightColors&&e.isBold()&&o<8?8:0,this._currentGlyphIdentifier.chars=e.getChars()||i.WHITESPACE_CELL_CHAR,this._currentGlyphIdentifier.code=e.getCode()||i.WHITESPACE_CELL_CODE,this._currentGlyphIdentifier.bg=s,this._currentGlyphIdentifier.fg=o,this._currentGlyphIdentifier.bold=!!e.isBold(),this._currentGlyphIdentifier.dim=!!e.isDim(),this._currentGlyphIdentifier.italic=!!e.isItalic(),this._charAtlas&&this._charAtlas.draw(this._ctx,this._currentGlyphIdentifier,t*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop)||this._drawUncachedChars(e,t,r))},e.prototype._drawUncachedChars=function(e,t,r,i){if(this._ctx.save(),this._ctx.font=this._getFont(!!e.isBold(),!!e.isItalic()),this._ctx.textBaseline="middle",e.isInverse())if(i)this._ctx.fillStyle=i.css;else if(e.isBgDefault())this._ctx.fillStyle=c.color.opaque(this._colors.background).css;else if(e.isBgRGB())this._ctx.fillStyle="rgb("+s.AttributeData.toColorRGB(e.getBgColor()).join(",")+")";else{var o=e.getBgColor();this._optionsService.options.drawBoldTextInBrightColors&&e.isBold()&&o<8&&(o+=8),this._ctx.fillStyle=this._colors.ansi[o].css}else if(i)this._ctx.fillStyle=i.css;else if(e.isFgDefault())this._ctx.fillStyle=this._colors.foreground.css;else if(e.isFgRGB())this._ctx.fillStyle="rgb("+s.AttributeData.toColorRGB(e.getFgColor()).join(",")+")";else{var a=e.getFgColor();this._optionsService.options.drawBoldTextInBrightColors&&e.isBold()&&a<8&&(a+=8),this._ctx.fillStyle=this._colors.ansi[a].css}this._clipRow(r),e.isDim()&&(this._ctx.globalAlpha=n.DIM_OPACITY),this._ctx.fillText(e.getChars(),t*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop+this._scaledCharHeight/2),this._ctx.restore()},e.prototype._clipRow=function(e){this._ctx.beginPath(),this._ctx.rect(0,e*this._scaledCellHeight,this._bufferService.cols*this._scaledCellWidth,this._scaledCellHeight),this._ctx.clip()},e.prototype._getFont=function(e,t){return(t?"italic":"")+" "+(e?this._optionsService.options.fontWeightBold:this._optionsService.options.fontWeight)+" "+this._optionsService.options.fontSize*window.devicePixelRatio+"px "+this._optionsService.options.fontFamily},e.prototype._getContrastColor=function(e){if(1!==this._optionsService.options.minimumContrastRatio){var t=this._colors.contrastCache.getColor(e.bg,e.fg);if(void 0!==t)return t||void 0;var r=e.getFgColor(),i=e.getFgColorMode(),n=e.getBgColor(),o=e.getBgColorMode(),s=!!e.isInverse(),a=!!e.isInverse();if(s){var l=r;r=n,n=l;var h=i;i=o,o=h}var u=this._resolveBackgroundRgba(o,n,s),f=this._resolveForegroundRgba(i,r,s,a),_=c.rgba.ensureContrastRatio(u,f,this._optionsService.options.minimumContrastRatio);if(_){var d={css:c.channels.toCss(_>>24&255,_>>16&255,_>>8&255),rgba:_};return this._colors.contrastCache.setColor(e.bg,e.fg,d),d}this._colors.contrastCache.setColor(e.bg,e.fg,null)}},e.prototype._resolveBackgroundRgba=function(e,t,r){switch(e){case 16777216:case 33554432:return this._colors.ansi[t].rgba;case 50331648:return t<<8;case 0:default:return r?this._colors.foreground.rgba:this._colors.background.rgba}},e.prototype._resolveForegroundRgba=function(e,t,r,i){switch(e){case 16777216:case 33554432:return this._optionsService.options.drawBoldTextInBrightColors&&i&&t<8&&(t+=8),this._colors.ansi[t].rgba;case 50331648:return t<<8;case 0:default:return r?this._colors.background.rgba:this._colors.foreground.rgba}},e}();t.BaseRenderLayer=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createDecorator=t.getServiceDependencies=t.serviceRegistry=void 0;function i(e,t,r){t.di$target===t?t.di$dependencies.push({id:e,index:r}):(t.di$dependencies=[{id:e,index:r}],t.di$target=t)}t.serviceRegistry=new Map,t.getServiceDependencies=function(e){return e.di$dependencies||[]},t.createDecorator=function(e){if(t.serviceRegistry.has(e))return t.serviceRegistry.get(e);var r=function(e,t,n){if(3!==arguments.length)throw new Error("@IServiceName-decorator can only be used to decorate a parameter");i(r,e,n)};return r.toString=function(){return e},t.serviceRegistry.set(e,r),r}},function(e,t,r){"use strict";function i(e,t,r,i){if(void 0===r&&(r=0),void 0===i&&(i=e.length),r>=e.length)return e;r=(e.length+r)%e.length,i=i>=e.length?e.length:(e.length+i)%e.length;for(var n=r;n<i;++n)e[n]=t;return e}Object.defineProperty(t,"__esModule",{value:!0}),t.concat=t.fillFallback=t.fill=void 0,t.fill=function(e,t,r,n){return e.fill?e.fill(t,r,n):i(e,t,r,n)},t.fillFallback=i,t.concat=function(e,t){var r=new e.constructor(e.length+t.length);return r.set(e),r.set(t,e.length),r}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BufferLine=t.DEFAULT_ATTR_DATA=void 0;var i=r(8),n=r(3),o=r(4),s=r(6);t.DEFAULT_ATTR_DATA=Object.freeze(new s.AttributeData);var a=function(){function e(e,t,r){void 0===r&&(r=!1),this.isWrapped=r,this._combined={},this._extendedAttrs={},this._data=new Uint32Array(3*e);for(var i=t||o.CellData.fromCharData([0,n.NULL_CELL_CHAR,n.NULL_CELL_WIDTH,n.NULL_CELL_CODE]),s=0;s<e;++s)this.setCell(s,i);this.length=e}return e.prototype.get=function(e){var t=this._data[3*e+0],r=2097151&t;return[this._data[3*e+1],2097152&t?this._combined[e]:r?i.stringFromCodePoint(r):"",t>>22,2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):r]},e.prototype.set=function(e,t){this._data[3*e+1]=t[n.CHAR_DATA_ATTR_INDEX],t[n.CHAR_DATA_CHAR_INDEX].length>1?(this._combined[e]=t[1],this._data[3*e+0]=2097152|e|t[n.CHAR_DATA_WIDTH_INDEX]<<22):this._data[3*e+0]=t[n.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|t[n.CHAR_DATA_WIDTH_INDEX]<<22},e.prototype.getWidth=function(e){return this._data[3*e+0]>>22},e.prototype.hasWidth=function(e){return 12582912&this._data[3*e+0]},e.prototype.getFg=function(e){return this._data[3*e+1]},e.prototype.getBg=function(e){return this._data[3*e+2]},e.prototype.hasContent=function(e){return 4194303&this._data[3*e+0]},e.prototype.getCodePoint=function(e){var t=this._data[3*e+0];return 2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):2097151&t},e.prototype.isCombined=function(e){return 2097152&this._data[3*e+0]},e.prototype.getString=function(e){var t=this._data[3*e+0];return 2097152&t?this._combined[e]:2097151&t?i.stringFromCodePoint(2097151&t):""},e.prototype.loadCell=function(e,t){var r=3*e;return t.content=this._data[r+0],t.fg=this._data[r+1],t.bg=this._data[r+2],2097152&t.content&&(t.combinedData=this._combined[e]),268435456&t.bg&&(t.extended=this._extendedAttrs[e]),t},e.prototype.setCell=function(e,t){2097152&t.content&&(this._combined[e]=t.combinedData),268435456&t.bg&&(this._extendedAttrs[e]=t.extended),this._data[3*e+0]=t.content,this._data[3*e+1]=t.fg,this._data[3*e+2]=t.bg},e.prototype.setCellFromCodePoint=function(e,t,r,i,n,o){268435456&n&&(this._extendedAttrs[e]=o),this._data[3*e+0]=t|r<<22,this._data[3*e+1]=i,this._data[3*e+2]=n},e.prototype.addCodepointToCell=function(e,t){var r=this._data[3*e+0];2097152&r?this._combined[e]+=i.stringFromCodePoint(t):(2097151&r?(this._combined[e]=i.stringFromCodePoint(2097151&r)+i.stringFromCodePoint(t),r&=-2097152,r|=2097152):r=t|1<<22,this._data[3*e+0]=r)},e.prototype.insertCells=function(e,t,r,i){if((e%=this.length)&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs),t<this.length-e){for(var n=new o.CellData,a=this.length-e-t-1;a>=0;--a)this.setCell(e+t+a,this.loadCell(e+a,n));for(a=0;a<t;++a)this.setCell(e+a,r)}else for(a=e;a<this.length;++a)this.setCell(a,r);2===this.getWidth(this.length-1)&&this.setCellFromCodePoint(this.length-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs)},e.prototype.deleteCells=function(e,t,r,i){if(e%=this.length,t<this.length-e){for(var n=new o.CellData,a=0;a<this.length-e-t;++a)this.setCell(e+a,this.loadCell(e+t+a,n));for(a=this.length-t;a<this.length;++a)this.setCell(a,r)}else for(a=e;a<this.length;++a)this.setCell(a,r);e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs),0!==this.getWidth(e)||this.hasContent(e)||this.setCellFromCodePoint(e,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs)},e.prototype.replaceCells=function(e,t,r,i){for(e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs),t<this.length&&2===this.getWidth(t-1)&&this.setCellFromCodePoint(t,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs);e<t&&e<this.length;)this.setCell(e++,r)},e.prototype.resize=function(e,t){if(e!==this.length){if(e>this.length){var r=new Uint32Array(3*e);this.length&&(3*e<this._data.length?r.set(this._data.subarray(0,3*e)):r.set(this._data)),this._data=r;for(var i=this.length;i<e;++i)this.setCell(i,t)}else if(e){(r=new Uint32Array(3*e)).set(this._data.subarray(0,3*e)),this._data=r;var n=Object.keys(this._combined);for(i=0;i<n.length;i++){var o=parseInt(n[i],10);o>=e&&delete this._combined[o]}}else this._data=new Uint32Array(0),this._combined={};this.length=e}},e.prototype.fill=function(e){this._combined={},this._extendedAttrs={};for(var t=0;t<this.length;++t)this.setCell(t,e)},e.prototype.copyFrom=function(e){for(var t in this.length!==e.length?this._data=new Uint32Array(e._data):this._data.set(e._data),this.length=e.length,this._combined={},e._combined)this._combined[t]=e._combined[t];for(var t in this._extendedAttrs={},e._extendedAttrs)this._extendedAttrs[t]=e._extendedAttrs[t];this.isWrapped=e.isWrapped},e.prototype.clone=function(){var t=new e(0);for(var r in t._data=new Uint32Array(this._data),t.length=this.length,this._combined)t._combined[r]=this._combined[r];for(var r in this._extendedAttrs)t._extendedAttrs[r]=this._extendedAttrs[r];return t.isWrapped=this.isWrapped,t},e.prototype.getTrimmedLength=function(){for(var e=this.length-1;e>=0;--e)if(4194303&this._data[3*e+0])return e+(this._data[3*e+0]>>22);return 0},e.prototype.copyCellsFrom=function(e,t,r,i,n){var o=e._data;if(n)for(var s=i-1;s>=0;s--)for(var a=0;a<3;a++)this._data[3*(r+s)+a]=o[3*(t+s)+a];else for(s=0;s<i;s++)for(a=0;a<3;a++)this._data[3*(r+s)+a]=o[3*(t+s)+a];var c=Object.keys(e._combined);for(a=0;a<c.length;a++){var l=parseInt(c[a],10);l>=t&&(this._combined[l-t+r]=e._combined[l])}},e.prototype.translateToString=function(e,t,r){void 0===e&&(e=!1),void 0===t&&(t=0),void 0===r&&(r=this.length),e&&(r=Math.min(r,this.getTrimmedLength()));for(var o="";t<r;){var s=this._data[3*t+0],a=2097151&s;o+=2097152&s?this._combined[t]:a?i.stringFromCodePoint(a):n.WHITESPACE_CELL_CHAR,t+=s>>22||1}return o},e}();t.BufferLine=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeElementFromParent=void 0,t.removeElementFromParent=function(){for(var e,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var i=0,n=t;i<n.length;i++){var o=n[i];null===(e=null==o?void 0:o.parentElement)||void 0===e||e.removeChild(o)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tooMuchOutput=t.promptLabel=void 0,t.promptLabel="Terminal input",t.tooMuchOutput="Too much output to announce, navigate to rows manually to read"},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.InputHandler=t.WindowsOptionsReportType=void 0;var o,s=r(12),a=r(20),c=r(39),l=r(2),h=r(15),u=r(8),f=r(16),_=r(0),d=r(3),p=r(4),v=r(6),g=r(22),y=r(24),b={"(":0,")":1,"*":2,"+":3,"-":1,".":2};function S(e,t){if(e>24)return t.setWinLines||!1;switch(e){case 1:return!!t.restoreWin;case 2:return!!t.minimizeWin;case 3:return!!t.setWinPosition;case 4:return!!t.setWinSizePixels;case 5:return!!t.raiseWin;case 6:return!!t.lowerWin;case 7:return!!t.refreshWin;case 8:return!!t.setWinSizeChars;case 9:return!!t.maximizeWin;case 10:return!!t.fullscreenWin;case 11:return!!t.getWinState;case 13:return!!t.getWinPosition;case 14:return!!t.getWinSizePixels;case 15:return!!t.getScreenSizePixels;case 16:return!!t.getCellSizePixels;case 18:return!!t.getWinSizeChars;case 19:return!!t.getScreenSizeChars;case 20:return!!t.getIconTitle;case 21:return!!t.getWinTitle;case 22:return!!t.pushTitle;case 23:return!!t.popTitle;case 24:return!!t.setWinLines}return!1}!function(e){e[e.GET_WIN_SIZE_PIXELS=0]="GET_WIN_SIZE_PIXELS",e[e.GET_CELL_SIZE_PIXELS=1]="GET_CELL_SIZE_PIXELS"}(o=t.WindowsOptionsReportType||(t.WindowsOptionsReportType={}));var m=function(){function e(e,t,r,i){this._bufferService=e,this._coreService=t,this._logService=r,this._optionsService=i,this._data=new Uint32Array(0)}return e.prototype.hook=function(e){this._data=new Uint32Array(0)},e.prototype.put=function(e,t,r){this._data=h.concat(this._data,e.subarray(t,r))},e.prototype.unhook=function(e){if(e){var t=u.utf32ToString(this._data);switch(this._data=new Uint32Array(0),t){case\'"q\':return this._coreService.triggerDataEvent(s.C0.ESC+\'P1$r0"q\'+s.C0.ESC+"\\\\");case\'"p\':return this._coreService.triggerDataEvent(s.C0.ESC+\'P1$r61;1"p\'+s.C0.ESC+"\\\\");case"r":var r=this._bufferService.buffer.scrollTop+1+";"+(this._bufferService.buffer.scrollBottom+1)+"r";return this._coreService.triggerDataEvent(s.C0.ESC+"P1$r"+r+s.C0.ESC+"\\\\");case"m":return this._coreService.triggerDataEvent(s.C0.ESC+"P1$r0m"+s.C0.ESC+"\\\\");case" q":var i={block:2,underline:4,bar:6}[this._optionsService.options.cursorStyle];return i-=this._optionsService.options.cursorBlink?1:0,this._coreService.triggerDataEvent(s.C0.ESC+"P1$r"+i+" q"+s.C0.ESC+"\\\\");default:this._logService.debug("Unknown DCS $q %s",t),this._coreService.triggerDataEvent(s.C0.ESC+"P0$r"+s.C0.ESC+"\\\\")}}else this._data=new Uint32Array(0)},e}(),C=function(e){function t(t,r,i,n,o,l,h,d,v){void 0===v&&(v=new c.EscapeSequenceParser);var y=e.call(this)||this;y._bufferService=t,y._charsetService=r,y._coreService=i,y._dirtyRowService=n,y._logService=o,y._optionsService=l,y._coreMouseService=h,y._unicodeService=d,y._parser=v,y._parseBuffer=new Uint32Array(4096),y._stringDecoder=new u.StringToUtf32,y._utf8Decoder=new u.Utf8ToUtf32,y._workCell=new p.CellData,y._windowTitle="",y._iconName="",y._windowTitleStack=[],y._iconNameStack=[],y._curAttrData=f.DEFAULT_ATTR_DATA.clone(),y._eraseAttrDataInternal=f.DEFAULT_ATTR_DATA.clone(),y._onRequestBell=new _.EventEmitter,y._onRequestRefreshRows=new _.EventEmitter,y._onRequestReset=new _.EventEmitter,y._onRequestScroll=new _.EventEmitter,y._onRequestSyncScrollBar=new _.EventEmitter,y._onRequestWindowsOptionsReport=new _.EventEmitter,y._onA11yChar=new _.EventEmitter,y._onA11yTab=new _.EventEmitter,y._onCursorMove=new _.EventEmitter,y._onLineFeed=new _.EventEmitter,y._onScroll=new _.EventEmitter,y._onTitleChange=new _.EventEmitter,y.register(y._parser),y._parser.setCsiHandlerFallback((function(e,t){y._logService.debug("Unknown CSI code: ",{identifier:y._parser.identToString(e),params:t.toArray()})})),y._parser.setEscHandlerFallback((function(e){y._logService.debug("Unknown ESC code: ",{identifier:y._parser.identToString(e)})})),y._parser.setExecuteHandlerFallback((function(e){y._logService.debug("Unknown EXECUTE code: ",{code:e})})),y._parser.setOscHandlerFallback((function(e,t,r){y._logService.debug("Unknown OSC code: ",{identifier:e,action:t,data:r})})),y._parser.setDcsHandlerFallback((function(e,t,r){"HOOK"===t&&(r=r.toArray()),y._logService.debug("Unknown DCS code: ",{identifier:y._parser.identToString(e),action:t,payload:r})})),y._parser.setPrintHandler((function(e,t,r){return y.print(e,t,r)})),y._parser.setCsiHandler({final:"@"},(function(e){return y.insertChars(e)})),y._parser.setCsiHandler({intermediates:" ",final:"@"},(function(e){return y.scrollLeft(e)})),y._parser.setCsiHandler({final:"A"},(function(e){return y.cursorUp(e)})),y._parser.setCsiHandler({intermediates:" ",final:"A"},(function(e){return y.scrollRight(e)})),y._parser.setCsiHandler({final:"B"},(function(e){return y.cursorDown(e)})),y._parser.setCsiHandler({final:"C"},(function(e){return y.cursorForward(e)})),y._parser.setCsiHandler({final:"D"},(function(e){return y.cursorBackward(e)})),y._parser.setCsiHandler({final:"E"},(function(e){return y.cursorNextLine(e)})),y._parser.setCsiHandler({final:"F"},(function(e){return y.cursorPrecedingLine(e)})),y._parser.setCsiHandler({final:"G"},(function(e){return y.cursorCharAbsolute(e)})),y._parser.setCsiHandler({final:"H"},(function(e){return y.cursorPosition(e)})),y._parser.setCsiHandler({final:"I"},(function(e){return y.cursorForwardTab(e)})),y._parser.setCsiHandler({final:"J"},(function(e){return y.eraseInDisplay(e)})),y._parser.setCsiHandler({prefix:"?",final:"J"},(function(e){return y.eraseInDisplay(e)})),y._parser.setCsiHandler({final:"K"},(function(e){return y.eraseInLine(e)})),y._parser.setCsiHandler({prefix:"?",final:"K"},(function(e){return y.eraseInLine(e)})),y._parser.setCsiHandler({final:"L"},(function(e){return y.insertLines(e)})),y._parser.setCsiHandler({final:"M"},(function(e){return y.deleteLines(e)})),y._parser.setCsiHandler({final:"P"},(function(e){return y.deleteChars(e)})),y._parser.setCsiHandler({final:"S"},(function(e){return y.scrollUp(e)})),y._parser.setCsiHandler({final:"T"},(function(e){return y.scrollDown(e)})),y._parser.setCsiHandler({final:"X"},(function(e){return y.eraseChars(e)})),y._parser.setCsiHandler({final:"Z"},(function(e){return y.cursorBackwardTab(e)})),y._parser.setCsiHandler({final:"`"},(function(e){return y.charPosAbsolute(e)})),y._parser.setCsiHandler({final:"a"},(function(e){return y.hPositionRelative(e)})),y._parser.setCsiHandler({final:"b"},(function(e){return y.repeatPrecedingCharacter(e)})),y._parser.setCsiHandler({final:"c"},(function(e){return y.sendDeviceAttributesPrimary(e)})),y._parser.setCsiHandler({prefix:">",final:"c"},(function(e){return y.sendDeviceAttributesSecondary(e)})),y._parser.setCsiHandler({final:"d"},(function(e){return y.linePosAbsolute(e)})),y._parser.setCsiHandler({final:"e"},(function(e){return y.vPositionRelative(e)})),y._parser.setCsiHandler({final:"f"},(function(e){return y.hVPosition(e)})),y._parser.setCsiHandler({final:"g"},(function(e){return y.tabClear(e)})),y._parser.setCsiHandler({final:"h"},(function(e){return y.setMode(e)})),y._parser.setCsiHandler({prefix:"?",final:"h"},(function(e){return y.setModePrivate(e)})),y._parser.setCsiHandler({final:"l"},(function(e){return y.resetMode(e)})),y._parser.setCsiHandler({prefix:"?",final:"l"},(function(e){return y.resetModePrivate(e)})),y._parser.setCsiHandler({final:"m"},(function(e){return y.charAttributes(e)})),y._parser.setCsiHandler({final:"n"},(function(e){return y.deviceStatus(e)})),y._parser.setCsiHandler({prefix:"?",final:"n"},(function(e){return y.deviceStatusPrivate(e)})),y._parser.setCsiHandler({intermediates:"!",final:"p"},(function(e){return y.softReset(e)})),y._parser.setCsiHandler({intermediates:" ",final:"q"},(function(e){return y.setCursorStyle(e)})),y._parser.setCsiHandler({final:"r"},(function(e){return y.setScrollRegion(e)})),y._parser.setCsiHandler({final:"s"},(function(e){return y.saveCursor(e)})),y._parser.setCsiHandler({final:"t"},(function(e){return y.windowOptions(e)})),y._parser.setCsiHandler({final:"u"},(function(e){return y.restoreCursor(e)})),y._parser.setCsiHandler({intermediates:"\'",final:"}"},(function(e){return y.insertColumns(e)})),y._parser.setCsiHandler({intermediates:"\'",final:"~"},(function(e){return y.deleteColumns(e)})),y._parser.setExecuteHandler(s.C0.BEL,(function(){return y.bell()})),y._parser.setExecuteHandler(s.C0.LF,(function(){return y.lineFeed()})),y._parser.setExecuteHandler(s.C0.VT,(function(){return y.lineFeed()})),y._parser.setExecuteHandler(s.C0.FF,(function(){return y.lineFeed()})),y._parser.setExecuteHandler(s.C0.CR,(function(){return y.carriageReturn()})),y._parser.setExecuteHandler(s.C0.BS,(function(){return y.backspace()})),y._parser.setExecuteHandler(s.C0.HT,(function(){return y.tab()})),y._parser.setExecuteHandler(s.C0.SO,(function(){return y.shiftOut()})),y._parser.setExecuteHandler(s.C0.SI,(function(){return y.shiftIn()})),y._parser.setExecuteHandler(s.C1.IND,(function(){return y.index()})),y._parser.setExecuteHandler(s.C1.NEL,(function(){return y.nextLine()})),y._parser.setExecuteHandler(s.C1.HTS,(function(){return y.tabSet()})),y._parser.setOscHandler(0,new g.OscHandler((function(e){y.setTitle(e),y.setIconName(e)}))),y._parser.setOscHandler(1,new g.OscHandler((function(e){return y.setIconName(e)}))),y._parser.setOscHandler(2,new g.OscHandler((function(e){return y.setTitle(e)}))),y._parser.setEscHandler({final:"7"},(function(){return y.saveCursor()})),y._parser.setEscHandler({final:"8"},(function(){return y.restoreCursor()})),y._parser.setEscHandler({final:"D"},(function(){return y.index()})),y._parser.setEscHandler({final:"E"},(function(){return y.nextLine()})),y._parser.setEscHandler({final:"H"},(function(){return y.tabSet()})),y._parser.setEscHandler({final:"M"},(function(){return y.reverseIndex()})),y._parser.setEscHandler({final:"="},(function(){return y.keypadApplicationMode()})),y._parser.setEscHandler({final:">"},(function(){return y.keypadNumericMode()})),y._parser.setEscHandler({final:"c"},(function(){return y.fullReset()})),y._parser.setEscHandler({final:"n"},(function(){return y.setgLevel(2)})),y._parser.setEscHandler({final:"o"},(function(){return y.setgLevel(3)})),y._parser.setEscHandler({final:"|"},(function(){return y.setgLevel(3)})),y._parser.setEscHandler({final:"}"},(function(){return y.setgLevel(2)})),y._parser.setEscHandler({final:"~"},(function(){return y.setgLevel(1)})),y._parser.setEscHandler({intermediates:"%",final:"@"},(function(){return y.selectDefaultCharset()})),y._parser.setEscHandler({intermediates:"%",final:"G"},(function(){return y.selectDefaultCharset()}));var b=function(e){S._parser.setEscHandler({intermediates:"(",final:e},(function(){return y.selectCharset("("+e)})),S._parser.setEscHandler({intermediates:")",final:e},(function(){return y.selectCharset(")"+e)})),S._parser.setEscHandler({intermediates:"*",final:e},(function(){return y.selectCharset("*"+e)})),S._parser.setEscHandler({intermediates:"+",final:e},(function(){return y.selectCharset("+"+e)})),S._parser.setEscHandler({intermediates:"-",final:e},(function(){return y.selectCharset("-"+e)})),S._parser.setEscHandler({intermediates:".",final:e},(function(){return y.selectCharset("."+e)})),S._parser.setEscHandler({intermediates:"/",final:e},(function(){return y.selectCharset("/"+e)}))},S=this;for(var C in a.CHARSETS)b(C);return y._parser.setEscHandler({intermediates:"#",final:"8"},(function(){return y.screenAlignmentPattern()})),y._parser.setErrorHandler((function(e){return y._logService.error("Parsing error: ",e),e})),y._parser.setDcsHandler({intermediates:"$",final:"q"},new m(y._bufferService,y._coreService,y._logService,y._optionsService)),y}return n(t,e),Object.defineProperty(t.prototype,"onRequestBell",{get:function(){return this._onRequestBell.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestRefreshRows",{get:function(){return this._onRequestRefreshRows.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestReset",{get:function(){return this._onRequestReset.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestScroll",{get:function(){return this._onRequestScroll.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestSyncScrollBar",{get:function(){return this._onRequestSyncScrollBar.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestWindowsOptionsReport",{get:function(){return this._onRequestWindowsOptionsReport.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yChar",{get:function(){return this._onA11yChar.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yTab",{get:function(){return this._onA11yTab.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onCursorMove",{get:function(){return this._onCursorMove.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onLineFeed",{get:function(){return this._onLineFeed.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onScroll",{get:function(){return this._onScroll.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onTitleChange",{get:function(){return this._onTitleChange.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){e.prototype.dispose.call(this)},t.prototype.parse=function(e){var t=this._bufferService.buffer,r=t.x,i=t.y;if(this._logService.debug("parsing data",e),this._parseBuffer.length<e.length&&this._parseBuffer.length<131072&&(this._parseBuffer=new Uint32Array(Math.min(e.length,131072))),this._dirtyRowService.clearRange(),e.length>131072)for(var n=0;n<e.length;n+=131072){var o=n+131072<e.length?n+131072:e.length,s="string"==typeof e?this._stringDecoder.decode(e.substring(n,o),this._parseBuffer):this._utf8Decoder.decode(e.subarray(n,o),this._parseBuffer);this._parser.parse(this._parseBuffer,s)}else{s="string"==typeof e?this._stringDecoder.decode(e,this._parseBuffer):this._utf8Decoder.decode(e,this._parseBuffer);this._parser.parse(this._parseBuffer,s)}(t=this._bufferService.buffer).x===r&&t.y===i||this._onCursorMove.fire(),this._onRequestRefreshRows.fire(this._dirtyRowService.start,this._dirtyRowService.end)},t.prototype.print=function(e,t,r){var i,n,o=this._bufferService.buffer,s=this._charsetService.charset,a=this._optionsService.options.screenReaderMode,c=this._bufferService.cols,l=this._coreService.decPrivateModes.wraparound,h=this._coreService.modes.insertMode,f=this._curAttrData,_=o.lines.get(o.ybase+o.y);this._dirtyRowService.markDirty(o.y),o.x&&r-t>0&&2===_.getWidth(o.x-1)&&_.setCellFromCodePoint(o.x-1,0,1,f.fg,f.bg,f.extended);for(var p=t;p<r;++p){if(i=e[p],n=this._unicodeService.wcwidth(i),i<127&&s){var v=s[String.fromCharCode(i)];v&&(i=v.charCodeAt(0))}if(a&&this._onA11yChar.fire(u.stringFromCodePoint(i)),n||!o.x){if(o.x+n-1>=c)if(l){for(;o.x<c;)_.setCellFromCodePoint(o.x++,0,1,f.fg,f.bg,f.extended);o.x=0,o.y++,o.y===o.scrollBottom+1?(o.y--,this._onRequestScroll.fire(this._eraseAttrData(),!0)):(o.y>=this._bufferService.rows&&(o.y=this._bufferService.rows-1),o.lines.get(o.ybase+o.y).isWrapped=!0),_=o.lines.get(o.ybase+o.y)}else if(o.x=c-1,2===n)continue;if(h&&(_.insertCells(o.x,n,o.getNullCell(f),f),2===_.getWidth(c-1)&&_.setCellFromCodePoint(c-1,d.NULL_CELL_CODE,d.NULL_CELL_WIDTH,f.fg,f.bg,f.extended)),_.setCellFromCodePoint(o.x++,i,n,f.fg,f.bg,f.extended),n>0)for(;--n;)_.setCellFromCodePoint(o.x++,0,0,f.fg,f.bg,f.extended)}else _.getWidth(o.x-1)?_.addCodepointToCell(o.x-1,i):_.addCodepointToCell(o.x-2,i)}r-t>0&&(_.loadCell(o.x-1,this._workCell),2===this._workCell.getWidth()||this._workCell.getCode()>65535?this._parser.precedingCodepoint=0:this._workCell.isCombined()?this._parser.precedingCodepoint=this._workCell.getChars().charCodeAt(0):this._parser.precedingCodepoint=this._workCell.content),o.x<c&&r-t>0&&0===_.getWidth(o.x)&&!_.hasContent(o.x)&&_.setCellFromCodePoint(o.x,0,1,f.fg,f.bg,f.extended),this._dirtyRowService.markDirty(o.y)},t.prototype.addCsiHandler=function(e,t){var r=this;return"t"!==e.final||e.prefix||e.intermediates?this._parser.addCsiHandler(e,t):this._parser.addCsiHandler(e,(function(e){return!S(e.params[0],r._optionsService.options.windowOptions)||t(e)}))},t.prototype.addDcsHandler=function(e,t){return this._parser.addDcsHandler(e,new y.DcsHandler(t))},t.prototype.addEscHandler=function(e,t){return this._parser.addEscHandler(e,t)},t.prototype.addOscHandler=function(e,t){return this._parser.addOscHandler(e,new g.OscHandler(t))},t.prototype.bell=function(){this._onRequestBell.fire()},t.prototype.lineFeed=function(){var e=this._bufferService.buffer;this._dirtyRowService.markDirty(e.y),this._optionsService.options.convertEol&&(e.x=0),e.y++,e.y===e.scrollBottom+1?(e.y--,this._onRequestScroll.fire(this._eraseAttrData())):e.y>=this._bufferService.rows&&(e.y=this._bufferService.rows-1),e.x>=this._bufferService.cols&&e.x--,this._dirtyRowService.markDirty(e.y),this._onLineFeed.fire()},t.prototype.carriageReturn=function(){this._bufferService.buffer.x=0},t.prototype.backspace=function(){var e,t=this._bufferService.buffer;if(!this._coreService.decPrivateModes.reverseWraparound)return this._restrictCursor(),void(t.x>0&&t.x--);if(this._restrictCursor(this._bufferService.cols),t.x>0)t.x--;else if(0===t.x&&t.y>t.scrollTop&&t.y<=t.scrollBottom&&(null===(e=t.lines.get(t.ybase+t.y))||void 0===e?void 0:e.isWrapped)){t.lines.get(t.ybase+t.y).isWrapped=!1,t.y--,t.x=this._bufferService.cols-1;var r=t.lines.get(t.ybase+t.y);r.hasWidth(t.x)&&!r.hasContent(t.x)&&t.x--}this._restrictCursor()},t.prototype.tab=function(){if(!(this._bufferService.buffer.x>=this._bufferService.cols)){var e=this._bufferService.buffer.x;this._bufferService.buffer.x=this._bufferService.buffer.nextStop(),this._optionsService.options.screenReaderMode&&this._onA11yTab.fire(this._bufferService.buffer.x-e)}},t.prototype.shiftOut=function(){this._charsetService.setgLevel(1)},t.prototype.shiftIn=function(){this._charsetService.setgLevel(0)},t.prototype._restrictCursor=function(e){void 0===e&&(e=this._bufferService.cols-1),this._bufferService.buffer.x=Math.min(e,Math.max(0,this._bufferService.buffer.x)),this._bufferService.buffer.y=this._coreService.decPrivateModes.origin?Math.min(this._bufferService.buffer.scrollBottom,Math.max(this._bufferService.buffer.scrollTop,this._bufferService.buffer.y)):Math.min(this._bufferService.rows-1,Math.max(0,this._bufferService.buffer.y)),this._dirtyRowService.markDirty(this._bufferService.buffer.y)},t.prototype._setCursor=function(e,t){this._dirtyRowService.markDirty(this._bufferService.buffer.y),this._coreService.decPrivateModes.origin?(this._bufferService.buffer.x=e,this._bufferService.buffer.y=this._bufferService.buffer.scrollTop+t):(this._bufferService.buffer.x=e,this._bufferService.buffer.y=t),this._restrictCursor(),this._dirtyRowService.markDirty(this._bufferService.buffer.y)},t.prototype._moveCursor=function(e,t){this._restrictCursor(),this._setCursor(this._bufferService.buffer.x+e,this._bufferService.buffer.y+t)},t.prototype.cursorUp=function(e){var t=this._bufferService.buffer.y-this._bufferService.buffer.scrollTop;t>=0?this._moveCursor(0,-Math.min(t,e.params[0]||1)):this._moveCursor(0,-(e.params[0]||1))},t.prototype.cursorDown=function(e){var t=this._bufferService.buffer.scrollBottom-this._bufferService.buffer.y;t>=0?this._moveCursor(0,Math.min(t,e.params[0]||1)):this._moveCursor(0,e.params[0]||1)},t.prototype.cursorForward=function(e){this._moveCursor(e.params[0]||1,0)},t.prototype.cursorBackward=function(e){this._moveCursor(-(e.params[0]||1),0)},t.prototype.cursorNextLine=function(e){this.cursorDown(e),this._bufferService.buffer.x=0},t.prototype.cursorPrecedingLine=function(e){this.cursorUp(e),this._bufferService.buffer.x=0},t.prototype.cursorCharAbsolute=function(e){this._setCursor((e.params[0]||1)-1,this._bufferService.buffer.y)},t.prototype.cursorPosition=function(e){this._setCursor(e.length>=2?(e.params[1]||1)-1:0,(e.params[0]||1)-1)},t.prototype.charPosAbsolute=function(e){this._setCursor((e.params[0]||1)-1,this._bufferService.buffer.y)},t.prototype.hPositionRelative=function(e){this._moveCursor(e.params[0]||1,0)},t.prototype.linePosAbsolute=function(e){this._setCursor(this._bufferService.buffer.x,(e.params[0]||1)-1)},t.prototype.vPositionRelative=function(e){this._moveCursor(0,e.params[0]||1)},t.prototype.hVPosition=function(e){this.cursorPosition(e)},t.prototype.tabClear=function(e){var t=e.params[0];0===t?delete this._bufferService.buffer.tabs[this._bufferService.buffer.x]:3===t&&(this._bufferService.buffer.tabs={})},t.prototype.cursorForwardTab=function(e){if(!(this._bufferService.buffer.x>=this._bufferService.cols))for(var t=e.params[0]||1;t--;)this._bufferService.buffer.x=this._bufferService.buffer.nextStop()},t.prototype.cursorBackwardTab=function(e){if(!(this._bufferService.buffer.x>=this._bufferService.cols))for(var t=e.params[0]||1,r=this._bufferService.buffer;t--;)r.x=r.prevStop()},t.prototype._eraseInBufferLine=function(e,t,r,i){void 0===i&&(i=!1);var n=this._bufferService.buffer.lines.get(this._bufferService.buffer.ybase+e);n.replaceCells(t,r,this._bufferService.buffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i&&(n.isWrapped=!1)},t.prototype._resetBufferLine=function(e){var t=this._bufferService.buffer.lines.get(this._bufferService.buffer.ybase+e);t.fill(this._bufferService.buffer.getNullCell(this._eraseAttrData())),t.isWrapped=!1},t.prototype.eraseInDisplay=function(e){var t;switch(this._restrictCursor(),e.params[0]){case 0:for(t=this._bufferService.buffer.y,this._dirtyRowService.markDirty(t),this._eraseInBufferLine(t++,this._bufferService.buffer.x,this._bufferService.cols,0===this._bufferService.buffer.x);t<this._bufferService.rows;t++)this._resetBufferLine(t);this._dirtyRowService.markDirty(t);break;case 1:for(t=this._bufferService.buffer.y,this._dirtyRowService.markDirty(t),this._eraseInBufferLine(t,0,this._bufferService.buffer.x+1,!0),this._bufferService.buffer.x+1>=this._bufferService.cols&&(this._bufferService.buffer.lines.get(t+1).isWrapped=!1);t--;)this._resetBufferLine(t);this._dirtyRowService.markDirty(0);break;case 2:for(t=this._bufferService.rows,this._dirtyRowService.markDirty(t-1);t--;)this._resetBufferLine(t);this._dirtyRowService.markDirty(0);break;case 3:var r=this._bufferService.buffer.lines.length-this._bufferService.rows;r>0&&(this._bufferService.buffer.lines.trimStart(r),this._bufferService.buffer.ybase=Math.max(this._bufferService.buffer.ybase-r,0),this._bufferService.buffer.ydisp=Math.max(this._bufferService.buffer.ydisp-r,0),this._onScroll.fire(0))}},t.prototype.eraseInLine=function(e){switch(this._restrictCursor(),e.params[0]){case 0:this._eraseInBufferLine(this._bufferService.buffer.y,this._bufferService.buffer.x,this._bufferService.cols);break;case 1:this._eraseInBufferLine(this._bufferService.buffer.y,0,this._bufferService.buffer.x+1);break;case 2:this._eraseInBufferLine(this._bufferService.buffer.y,0,this._bufferService.cols)}this._dirtyRowService.markDirty(this._bufferService.buffer.y)},t.prototype.insertLines=function(e){this._restrictCursor();var t=e.params[0]||1,r=this._bufferService.buffer;if(!(r.y>r.scrollBottom||r.y<r.scrollTop)){for(var i=r.ybase+r.y,n=this._bufferService.rows-1-r.scrollBottom,o=this._bufferService.rows-1+r.ybase-n+1;t--;)r.lines.splice(o-1,1),r.lines.splice(i,0,r.getBlankLine(this._eraseAttrData()));this._dirtyRowService.markRangeDirty(r.y,r.scrollBottom),r.x=0}},t.prototype.deleteLines=function(e){this._restrictCursor();var t=e.params[0]||1,r=this._bufferService.buffer;if(!(r.y>r.scrollBottom||r.y<r.scrollTop)){var i,n=r.ybase+r.y;for(i=this._bufferService.rows-1-r.scrollBottom,i=this._bufferService.rows-1+r.ybase-i;t--;)r.lines.splice(n,1),r.lines.splice(i,0,r.getBlankLine(this._eraseAttrData()));this._dirtyRowService.markRangeDirty(r.y,r.scrollBottom),r.x=0}},t.prototype.insertChars=function(e){this._restrictCursor();var t=this._bufferService.buffer.lines.get(this._bufferService.buffer.ybase+this._bufferService.buffer.y);t&&(t.insertCells(this._bufferService.buffer.x,e.params[0]||1,this._bufferService.buffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._bufferService.buffer.y))},t.prototype.deleteChars=function(e){this._restrictCursor();var t=this._bufferService.buffer.lines.get(this._bufferService.buffer.ybase+this._bufferService.buffer.y);t&&(t.deleteCells(this._bufferService.buffer.x,e.params[0]||1,this._bufferService.buffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._bufferService.buffer.y))},t.prototype.scrollUp=function(e){for(var t=e.params[0]||1,r=this._bufferService.buffer;t--;)r.lines.splice(r.ybase+r.scrollTop,1),r.lines.splice(r.ybase+r.scrollBottom,0,r.getBlankLine(this._eraseAttrData()));this._dirtyRowService.markRangeDirty(r.scrollTop,r.scrollBottom)},t.prototype.scrollDown=function(e){for(var t=e.params[0]||1,r=this._bufferService.buffer;t--;)r.lines.splice(r.ybase+r.scrollBottom,1),r.lines.splice(r.ybase+r.scrollTop,0,r.getBlankLine(f.DEFAULT_ATTR_DATA));this._dirtyRowService.markRangeDirty(r.scrollTop,r.scrollBottom)},t.prototype.scrollLeft=function(e){var t=this._bufferService.buffer;if(!(t.y>t.scrollBottom||t.y<t.scrollTop)){for(var r=e.params[0]||1,i=t.scrollTop;i<=t.scrollBottom;++i){var n=t.lines.get(t.ybase+i);n.deleteCells(0,r,t.getNullCell(this._eraseAttrData()),this._eraseAttrData()),n.isWrapped=!1}this._dirtyRowService.markRangeDirty(t.scrollTop,t.scrollBottom)}},t.prototype.scrollRight=function(e){var t=this._bufferService.buffer;if(!(t.y>t.scrollBottom||t.y<t.scrollTop)){for(var r=e.params[0]||1,i=t.scrollTop;i<=t.scrollBottom;++i){var n=t.lines.get(t.ybase+i);n.insertCells(0,r,t.getNullCell(this._eraseAttrData()),this._eraseAttrData()),n.isWrapped=!1}this._dirtyRowService.markRangeDirty(t.scrollTop,t.scrollBottom)}},t.prototype.insertColumns=function(e){var t=this._bufferService.buffer;if(!(t.y>t.scrollBottom||t.y<t.scrollTop)){for(var r=e.params[0]||1,i=t.scrollTop;i<=t.scrollBottom;++i){var n=this._bufferService.buffer.lines.get(t.ybase+i);n.insertCells(t.x,r,t.getNullCell(this._eraseAttrData()),this._eraseAttrData()),n.isWrapped=!1}this._dirtyRowService.markRangeDirty(t.scrollTop,t.scrollBottom)}},t.prototype.deleteColumns=function(e){var t=this._bufferService.buffer;if(!(t.y>t.scrollBottom||t.y<t.scrollTop)){for(var r=e.params[0]||1,i=t.scrollTop;i<=t.scrollBottom;++i){var n=t.lines.get(t.ybase+i);n.deleteCells(t.x,r,t.getNullCell(this._eraseAttrData()),this._eraseAttrData()),n.isWrapped=!1}this._dirtyRowService.markRangeDirty(t.scrollTop,t.scrollBottom)}},t.prototype.eraseChars=function(e){this._restrictCursor();var t=this._bufferService.buffer.lines.get(this._bufferService.buffer.ybase+this._bufferService.buffer.y);t&&(t.replaceCells(this._bufferService.buffer.x,this._bufferService.buffer.x+(e.params[0]||1),this._bufferService.buffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._bufferService.buffer.y))},t.prototype.repeatPrecedingCharacter=function(e){if(this._parser.precedingCodepoint){for(var t=e.params[0]||1,r=new Uint32Array(t),i=0;i<t;++i)r[i]=this._parser.precedingCodepoint;this.print(r,0,r.length)}},t.prototype.sendDeviceAttributesPrimary=function(e){e.params[0]>0||(this._is("xterm")||this._is("rxvt-unicode")||this._is("screen")?this._coreService.triggerDataEvent(s.C0.ESC+"[?1;2c"):this._is("linux")&&this._coreService.triggerDataEvent(s.C0.ESC+"[?6c"))},t.prototype.sendDeviceAttributesSecondary=function(e){e.params[0]>0||(this._is("xterm")?this._coreService.triggerDataEvent(s.C0.ESC+"[>0;276;0c"):this._is("rxvt-unicode")?this._coreService.triggerDataEvent(s.C0.ESC+"[>85;95;0c"):this._is("linux")?this._coreService.triggerDataEvent(e.params[0]+"c"):this._is("screen")&&this._coreService.triggerDataEvent(s.C0.ESC+"[>83;40003;0c"))},t.prototype._is=function(e){return 0===(this._optionsService.options.termName+"").indexOf(e)},t.prototype.setMode=function(e){for(var t=0;t<e.length;t++)switch(e.params[t]){case 4:this._coreService.modes.insertMode=!0}},t.prototype.setModePrivate=function(e){for(var t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!0;break;case 2:this._charsetService.setgCharset(0,a.DEFAULT_CHARSET),this._charsetService.setgCharset(1,a.DEFAULT_CHARSET),this._charsetService.setgCharset(2,a.DEFAULT_CHARSET),this._charsetService.setgCharset(3,a.DEFAULT_CHARSET);break;case 3:this._optionsService.options.windowOptions.setWinLines&&(this._bufferService.resize(132,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!0,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!0;break;case 12:break;case 45:this._coreService.decPrivateModes.reverseWraparound=!0;break;case 66:this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire();break;case 9:this._coreMouseService.activeProtocol="X10";break;case 1e3:this._coreMouseService.activeProtocol="VT200";break;case 1002:this._coreMouseService.activeProtocol="DRAG";break;case 1003:this._coreMouseService.activeProtocol="ANY";break;case 1004:this._coreService.decPrivateModes.sendFocus=!0;break;case 1005:this._logService.debug("DECSET 1005 not supported (see #2507)");break;case 1006:this._coreMouseService.activeEncoding="SGR";break;case 1015:this._logService.debug("DECSET 1015 not supported (see #2507)");break;case 25:this._coreService.isCursorHidden=!1;break;case 1048:this.saveCursor();break;case 1049:this.saveCursor();case 47:case 1047:this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!0}},t.prototype.resetMode=function(e){for(var t=0;t<e.length;t++)switch(e.params[t]){case 4:this._coreService.modes.insertMode=!1}},t.prototype.resetModePrivate=function(e){for(var t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!1;break;case 3:this._optionsService.options.windowOptions.setWinLines&&(this._bufferService.resize(80,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!1,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!1;break;case 12:break;case 45:this._coreService.decPrivateModes.reverseWraparound=!1;break;case 66:this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire();break;case 9:case 1e3:case 1002:case 1003:this._coreMouseService.activeProtocol="NONE";break;case 1004:this._coreService.decPrivateModes.sendFocus=!1;break;case 1005:this._logService.debug("DECRST 1005 not supported (see #2507)");break;case 1006:this._coreMouseService.activeEncoding="DEFAULT";break;case 1015:this._logService.debug("DECRST 1015 not supported (see #2507)");break;case 25:this._coreService.isCursorHidden=!0;break;case 1048:this.restoreCursor();break;case 1049:case 47:case 1047:this._bufferService.buffers.activateNormalBuffer(),1049===e.params[t]&&this.restoreCursor(),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!1}},t.prototype._updateAttrColor=function(e,t,r,i,n){return 2===t?(e|=50331648,e&=-16777216,e|=v.AttributeData.fromColorRGB([r,i,n])):5===t&&(e&=-50331904,e|=33554432|255&r),e},t.prototype._extractColor=function(e,t,r){var i=[0,0,-1,0,0,0],n=0,o=0;do{if(i[o+n]=e.params[t+o],e.hasSubParams(t+o)){var s=e.getSubParams(t+o),a=0;do{5===i[1]&&(n=1),i[o+a+1+n]=s[a]}while(++a<s.length&&a+o+1+n<i.length);break}if(5===i[1]&&o+n>=2||2===i[1]&&o+n>=5)break;i[1]&&(n=1)}while(++o+t<e.length&&o+n<i.length);for(a=2;a<i.length;++a)-1===i[a]&&(i[a]=0);switch(i[0]){case 38:r.fg=this._updateAttrColor(r.fg,i[1],i[3],i[4],i[5]);break;case 48:r.bg=this._updateAttrColor(r.bg,i[1],i[3],i[4],i[5]);break;case 58:r.extended=r.extended.clone(),r.extended.underlineColor=this._updateAttrColor(r.extended.underlineColor,i[1],i[3],i[4],i[5])}return o},t.prototype._processUnderline=function(e,t){t.extended=t.extended.clone(),(!~e||e>5)&&(e=1),t.extended.underlineStyle=e,t.fg|=268435456,0===e&&(t.fg&=-268435457),t.updateExtended()},t.prototype.charAttributes=function(e){if(1===e.length&&0===e.params[0])return this._curAttrData.fg=f.DEFAULT_ATTR_DATA.fg,void(this._curAttrData.bg=f.DEFAULT_ATTR_DATA.bg);for(var t,r=e.length,i=this._curAttrData,n=0;n<r;n++)(t=e.params[n])>=30&&t<=37?(i.fg&=-50331904,i.fg|=16777216|t-30):t>=40&&t<=47?(i.bg&=-50331904,i.bg|=16777216|t-40):t>=90&&t<=97?(i.fg&=-50331904,i.fg|=16777224|t-90):t>=100&&t<=107?(i.bg&=-50331904,i.bg|=16777224|t-100):0===t?(i.fg=f.DEFAULT_ATTR_DATA.fg,i.bg=f.DEFAULT_ATTR_DATA.bg):1===t?i.fg|=134217728:3===t?i.bg|=67108864:4===t?(i.fg|=268435456,this._processUnderline(e.hasSubParams(n)?e.getSubParams(n)[0]:1,i)):5===t?i.fg|=536870912:7===t?i.fg|=67108864:8===t?i.fg|=1073741824:2===t?i.bg|=134217728:21===t?this._processUnderline(2,i):22===t?(i.fg&=-134217729,i.bg&=-134217729):23===t?i.bg&=-67108865:24===t?i.fg&=-268435457:25===t?i.fg&=-536870913:27===t?i.fg&=-67108865:28===t?i.fg&=-1073741825:39===t?(i.fg&=-67108864,i.fg|=16777215&f.DEFAULT_ATTR_DATA.fg):49===t?(i.bg&=-67108864,i.bg|=16777215&f.DEFAULT_ATTR_DATA.bg):38===t||48===t||58===t?n+=this._extractColor(e,n,i):59===t?(i.extended=i.extended.clone(),i.extended.underlineColor=-1,i.updateExtended()):100===t?(i.fg&=-67108864,i.fg|=16777215&f.DEFAULT_ATTR_DATA.fg,i.bg&=-67108864,i.bg|=16777215&f.DEFAULT_ATTR_DATA.bg):this._logService.debug("Unknown SGR attribute: %d.",t)},t.prototype.deviceStatus=function(e){switch(e.params[0]){case 5:this._coreService.triggerDataEvent(s.C0.ESC+"[0n");break;case 6:var t=this._bufferService.buffer.y+1,r=this._bufferService.buffer.x+1;this._coreService.triggerDataEvent(s.C0.ESC+"["+t+";"+r+"R")}},t.prototype.deviceStatusPrivate=function(e){switch(e.params[0]){case 6:var t=this._bufferService.buffer.y+1,r=this._bufferService.buffer.x+1;this._coreService.triggerDataEvent(s.C0.ESC+"[?"+t+";"+r+"R")}},t.prototype.softReset=function(e){this._coreService.isCursorHidden=!1,this._onRequestSyncScrollBar.fire(),this._bufferService.buffer.scrollTop=0,this._bufferService.buffer.scrollBottom=this._bufferService.rows-1,this._curAttrData=f.DEFAULT_ATTR_DATA.clone(),this._coreService.reset(),this._charsetService.reset(),this._bufferService.buffer.savedX=0,this._bufferService.buffer.savedY=this._bufferService.buffer.ybase,this._bufferService.buffer.savedCurAttrData.fg=this._curAttrData.fg,this._bufferService.buffer.savedCurAttrData.bg=this._curAttrData.bg,this._bufferService.buffer.savedCharset=this._charsetService.charset,this._coreService.decPrivateModes.origin=!1},t.prototype.setCursorStyle=function(e){var t=e.params[0]||1;switch(t){case 1:case 2:this._optionsService.options.cursorStyle="block";break;case 3:case 4:this._optionsService.options.cursorStyle="underline";break;case 5:case 6:this._optionsService.options.cursorStyle="bar"}var r=t%2==1;this._optionsService.options.cursorBlink=r},t.prototype.setScrollRegion=function(e){var t,r=e.params[0]||1;(e.length<2||(t=e.params[1])>this._bufferService.rows||0===t)&&(t=this._bufferService.rows),t>r&&(this._bufferService.buffer.scrollTop=r-1,this._bufferService.buffer.scrollBottom=t-1,this._setCursor(0,0))},t.prototype.windowOptions=function(e){if(S(e.params[0],this._optionsService.options.windowOptions)){var t=e.length>1?e.params[1]:0;switch(e.params[0]){case 14:2!==t&&this._onRequestWindowsOptionsReport.fire(o.GET_WIN_SIZE_PIXELS);break;case 16:this._onRequestWindowsOptionsReport.fire(o.GET_CELL_SIZE_PIXELS);break;case 18:this._bufferService&&this._coreService.triggerDataEvent(s.C0.ESC+"[8;"+this._bufferService.rows+";"+this._bufferService.cols+"t");break;case 22:0!==t&&2!==t||(this._windowTitleStack.push(this._windowTitle),this._windowTitleStack.length>10&&this._windowTitleStack.shift()),0!==t&&1!==t||(this._iconNameStack.push(this._iconName),this._iconNameStack.length>10&&this._iconNameStack.shift());break;case 23:0!==t&&2!==t||this._windowTitleStack.length&&this.setTitle(this._windowTitleStack.pop()),0!==t&&1!==t||this._iconNameStack.length&&this.setIconName(this._iconNameStack.pop())}}},t.prototype.saveCursor=function(e){this._bufferService.buffer.savedX=this._bufferService.buffer.x,this._bufferService.buffer.savedY=this._bufferService.buffer.ybase+this._bufferService.buffer.y,this._bufferService.buffer.savedCurAttrData.fg=this._curAttrData.fg,this._bufferService.buffer.savedCurAttrData.bg=this._curAttrData.bg,this._bufferService.buffer.savedCharset=this._charsetService.charset},t.prototype.restoreCursor=function(e){this._bufferService.buffer.x=this._bufferService.buffer.savedX||0,this._bufferService.buffer.y=Math.max(this._bufferService.buffer.savedY-this._bufferService.buffer.ybase,0),this._curAttrData.fg=this._bufferService.buffer.savedCurAttrData.fg,this._curAttrData.bg=this._bufferService.buffer.savedCurAttrData.bg,this._charsetService.charset=this._savedCharset,this._bufferService.buffer.savedCharset&&(this._charsetService.charset=this._bufferService.buffer.savedCharset),this._restrictCursor()},t.prototype.setTitle=function(e){this._windowTitle=e,this._onTitleChange.fire(e)},t.prototype.setIconName=function(e){this._iconName=e},t.prototype.nextLine=function(){this._bufferService.buffer.x=0,this.index()},t.prototype.keypadApplicationMode=function(){this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire()},t.prototype.keypadNumericMode=function(){this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire()},t.prototype.selectDefaultCharset=function(){this._charsetService.setgLevel(0),this._charsetService.setgCharset(0,a.DEFAULT_CHARSET)},t.prototype.selectCharset=function(e){2===e.length?"/"!==e[0]&&this._charsetService.setgCharset(b[e[0]],a.CHARSETS[e[1]]||a.DEFAULT_CHARSET):this.selectDefaultCharset()},t.prototype.index=function(){this._restrictCursor();var e=this._bufferService.buffer;this._bufferService.buffer.y++,e.y===e.scrollBottom+1?(e.y--,this._onRequestScroll.fire(this._eraseAttrData())):e.y>=this._bufferService.rows&&(e.y=this._bufferService.rows-1),this._restrictCursor()},t.prototype.tabSet=function(){this._bufferService.buffer.tabs[this._bufferService.buffer.x]=!0},t.prototype.reverseIndex=function(){this._restrictCursor();var e=this._bufferService.buffer;if(e.y===e.scrollTop){var t=e.scrollBottom-e.scrollTop;e.lines.shiftElements(e.ybase+e.y,t,1),e.lines.set(e.ybase+e.y,e.getBlankLine(this._eraseAttrData())),this._dirtyRowService.markRangeDirty(e.scrollTop,e.scrollBottom)}else e.y--,this._restrictCursor()},t.prototype.fullReset=function(){this._parser.reset(),this._onRequestReset.fire()},t.prototype.reset=function(){this._curAttrData=f.DEFAULT_ATTR_DATA.clone(),this._eraseAttrDataInternal=f.DEFAULT_ATTR_DATA.clone()},t.prototype._eraseAttrData=function(){return this._eraseAttrDataInternal.bg&=-67108864,this._eraseAttrDataInternal.bg|=67108863&this._curAttrData.bg,this._eraseAttrDataInternal},t.prototype.setgLevel=function(e){this._charsetService.setgLevel(e)},t.prototype.screenAlignmentPattern=function(){var e=new p.CellData;e.content=1<<22|"E".charCodeAt(0),e.fg=this._curAttrData.fg,e.bg=this._curAttrData.bg;var t=this._bufferService.buffer;this._setCursor(0,0);for(var r=0;r<this._bufferService.rows;++r){var i=t.ybase+t.y+r,n=t.lines.get(i);n&&(n.fill(e),n.isWrapped=!1)}this._dirtyRowService.markAllDirty(),this._setCursor(0,0)},t}(l.Disposable);t.InputHandler=C},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_CHARSET=t.CHARSETS=void 0,t.CHARSETS={},t.DEFAULT_CHARSET=t.CHARSETS.B,t.CHARSETS[0]={"`":"◆",a:"▒",b:"␉",c:"␌",d:"␍",e:"␊",f:"°",g:"±",h:"␤",i:"␋",j:"┘",k:"┐",l:"┌",m:"└",n:"┼",o:"⎺",p:"⎻",q:"─",r:"⎼",s:"⎽",t:"├",u:"┤",v:"┴",w:"┬",x:"│",y:"≤",z:"≥","{":"π","|":"≠","}":"£","~":"·"},t.CHARSETS.A={"#":"£"},t.CHARSETS.B=void 0,t.CHARSETS[4]={"#":"£","@":"¾","[":"ij","\\\\":"½","]":"|","{":"¨","|":"f","}":"¼","~":"´"},t.CHARSETS.C=t.CHARSETS[5]={"[":"Ä","\\\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},t.CHARSETS.R={"#":"£","@":"à","[":"°","\\\\":"ç","]":"§","{":"é","|":"ù","}":"è","~":"¨"},t.CHARSETS.Q={"@":"à","[":"â","\\\\":"ç","]":"ê","^":"î","`":"ô","{":"é","|":"ù","}":"è","~":"û"},t.CHARSETS.K={"@":"§","[":"Ä","\\\\":"Ö","]":"Ü","{":"ä","|":"ö","}":"ü","~":"ß"},t.CHARSETS.Y={"#":"£","@":"§","[":"°","\\\\":"ç","]":"é","`":"ù","{":"à","|":"ò","}":"è","~":"ì"},t.CHARSETS.E=t.CHARSETS[6]={"@":"Ä","[":"Æ","\\\\":"Ø","]":"Å","^":"Ü","`":"ä","{":"æ","|":"ø","}":"å","~":"ü"},t.CHARSETS.Z={"#":"£","@":"§","[":"¡","\\\\":"Ñ","]":"¿","{":"°","|":"ñ","}":"ç"},t.CHARSETS.H=t.CHARSETS[7]={"@":"É","[":"Ä","\\\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},t.CHARSETS["="]={"#":"ù","@":"à","[":"é","\\\\":"ç","]":"ê","^":"î",_:"è","`":"ô","{":"ä","|":"ö","}":"ü","~":"û"}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Params=void 0;var i=function(){function e(e,t){if(void 0===e&&(e=32),void 0===t&&(t=32),this.maxLength=e,this.maxSubParamsLength=t,t>256)throw new Error("maxSubParamsLength must not be greater than 256");this.params=new Int32Array(e),this.length=0,this._subParams=new Int32Array(t),this._subParamsLength=0,this._subParamsIdx=new Uint16Array(e),this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1}return e.fromArray=function(t){var r=new e;if(!t.length)return r;for(var i=t[0]instanceof Array?1:0;i<t.length;++i){var n=t[i];if(n instanceof Array)for(var o=0;o<n.length;++o)r.addSubParam(n[o]);else r.addParam(n)}return r},e.prototype.clone=function(){var t=new e(this.maxLength,this.maxSubParamsLength);return t.params.set(this.params),t.length=this.length,t._subParams.set(this._subParams),t._subParamsLength=this._subParamsLength,t._subParamsIdx.set(this._subParamsIdx),t._rejectDigits=this._rejectDigits,t._rejectSubDigits=this._rejectSubDigits,t._digitIsSub=this._digitIsSub,t},e.prototype.toArray=function(){for(var e=[],t=0;t<this.length;++t){e.push(this.params[t]);var r=this._subParamsIdx[t]>>8,i=255&this._subParamsIdx[t];i-r>0&&e.push(Array.prototype.slice.call(this._subParams,r,i))}return e},e.prototype.reset=function(){this.length=0,this._subParamsLength=0,this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1},e.prototype.addParam=function(e){if(this._digitIsSub=!1,this.length>=this.maxLength)this._rejectDigits=!0;else{if(e<-1)throw new Error("values lesser than -1 are not allowed");this._subParamsIdx[this.length]=this._subParamsLength<<8|this._subParamsLength,this.params[this.length++]=e>2147483647?2147483647:e}},e.prototype.addSubParam=function(e){if(this._digitIsSub=!0,this.length)if(this._rejectDigits||this._subParamsLength>=this.maxSubParamsLength)this._rejectSubDigits=!0;else{if(e<-1)throw new Error("values lesser than -1 are not allowed");this._subParams[this._subParamsLength++]=e>2147483647?2147483647:e,this._subParamsIdx[this.length-1]++}},e.prototype.hasSubParams=function(e){return(255&this._subParamsIdx[e])-(this._subParamsIdx[e]>>8)>0},e.prototype.getSubParams=function(e){var t=this._subParamsIdx[e]>>8,r=255&this._subParamsIdx[e];return r-t>0?this._subParams.subarray(t,r):null},e.prototype.getSubParamsAll=function(){for(var e={},t=0;t<this.length;++t){var r=this._subParamsIdx[t]>>8,i=255&this._subParamsIdx[t];i-r>0&&(e[t]=this._subParams.slice(r,i))}return e},e.prototype.addDigit=function(e){var t;if(!(this._rejectDigits||!(t=this._digitIsSub?this._subParamsLength:this.length)||this._digitIsSub&&this._rejectSubDigits)){var r=this._digitIsSub?this._subParams:this.params,i=r[t-1];r[t-1]=~i?Math.min(10*i+e,2147483647):e}},e}();t.Params=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OscHandler=t.OscParser=void 0;var i=r(23),n=r(8),o=function(){function e(){this._state=0,this._id=-1,this._handlers=Object.create(null),this._handlerFb=function(){}}return e.prototype.addHandler=function(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);var r=this._handlers[e];return r.push(t),{dispose:function(){var e=r.indexOf(t);-1!==e&&r.splice(e,1)}}},e.prototype.setHandler=function(e,t){this._handlers[e]=[t]},e.prototype.clearHandler=function(e){this._handlers[e]&&delete this._handlers[e]},e.prototype.setHandlerFallback=function(e){this._handlerFb=e},e.prototype.dispose=function(){this._handlers=Object.create(null),this._handlerFb=function(){}},e.prototype.reset=function(){2===this._state&&this.end(!1),this._id=-1,this._state=0},e.prototype._start=function(){var e=this._handlers[this._id];if(e)for(var t=e.length-1;t>=0;t--)e[t].start();else this._handlerFb(this._id,"START")},e.prototype._put=function(e,t,r){var i=this._handlers[this._id];if(i)for(var o=i.length-1;o>=0;o--)i[o].put(e,t,r);else this._handlerFb(this._id,"PUT",n.utf32ToString(e,t,r))},e.prototype._end=function(e){var t=this._handlers[this._id];if(t){for(var r=t.length-1;r>=0&&!1===t[r].end(e);r--);for(r--;r>=0;r--)t[r].end(!1)}else this._handlerFb(this._id,"END",e)},e.prototype.start=function(){this.reset(),this._id=-1,this._state=1},e.prototype.put=function(e,t,r){if(3!==this._state){if(1===this._state)for(;t<r;){var i=e[t++];if(59===i){this._state=2,this._start();break}if(i<48||57<i)return void(this._state=3);-1===this._id&&(this._id=0),this._id=10*this._id+i-48}2===this._state&&r-t>0&&this._put(e,t,r)}},e.prototype.end=function(e){0!==this._state&&(3!==this._state&&(1===this._state&&this._start(),this._end(e)),this._id=-1,this._state=0)},e}();t.OscParser=o;var s=function(){function e(e){this._handler=e,this._data="",this._hitLimit=!1}return e.prototype.start=function(){this._data="",this._hitLimit=!1},e.prototype.put=function(e,t,r){this._hitLimit||(this._data+=n.utf32ToString(e,t,r),this._data.length>i.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0))},e.prototype.end=function(e){var t;return this._hitLimit?t=!1:e&&(t=this._handler(this._data)),this._data="",this._hitLimit=!1,t},e}();t.OscHandler=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PAYLOAD_LIMIT=void 0,t.PAYLOAD_LIMIT=1e7},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DcsHandler=t.DcsParser=void 0;var i=r(8),n=r(21),o=r(23),s=[],a=function(){function e(){this._handlers=Object.create(null),this._active=s,this._ident=0,this._handlerFb=function(){}}return e.prototype.dispose=function(){this._handlers=Object.create(null),this._handlerFb=function(){}},e.prototype.addHandler=function(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);var r=this._handlers[e];return r.push(t),{dispose:function(){var e=r.indexOf(t);-1!==e&&r.splice(e,1)}}},e.prototype.setHandler=function(e,t){this._handlers[e]=[t]},e.prototype.clearHandler=function(e){this._handlers[e]&&delete this._handlers[e]},e.prototype.setHandlerFallback=function(e){this._handlerFb=e},e.prototype.reset=function(){this._active.length&&this.unhook(!1),this._active=s,this._ident=0},e.prototype.hook=function(e,t){if(this.reset(),this._ident=e,this._active=this._handlers[e]||s,this._active.length)for(var r=this._active.length-1;r>=0;r--)this._active[r].hook(t);else this._handlerFb(this._ident,"HOOK",t)},e.prototype.put=function(e,t,r){if(this._active.length)for(var n=this._active.length-1;n>=0;n--)this._active[n].put(e,t,r);else this._handlerFb(this._ident,"PUT",i.utf32ToString(e,t,r))},e.prototype.unhook=function(e){if(this._active.length){for(var t=this._active.length-1;t>=0&&!1===this._active[t].unhook(e);t--);for(t--;t>=0;t--)this._active[t].unhook(!1)}else this._handlerFb(this._ident,"UNHOOK",e);this._active=s,this._ident=0},e}();t.DcsParser=a;var c=function(){function e(e){this._handler=e,this._data="",this._hitLimit=!1}return e.prototype.hook=function(e){this._params=e.clone(),this._data="",this._hitLimit=!1},e.prototype.put=function(e,t,r){this._hitLimit||(this._data+=i.utf32ToString(e,t,r),this._data.length>o.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0))},e.prototype.unhook=function(e){var t;return this._hitLimit?t=!1:e&&(t=this._handler(this._data,this._params||new n.Params)),this._params=void 0,this._data="",this._hitLimit=!1,t},e}();t.DcsHandler=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeTerminalFromCache=t.acquireCharAtlas=void 0;var i=r(26),n=r(43),o=[];t.acquireCharAtlas=function(e,t,r,s,a){for(var c=i.generateConfig(s,a,e,r),l=0;l<o.length;l++){var h=(u=o[l]).ownedBy.indexOf(t);if(h>=0){if(i.configEquals(u.config,c))return u.atlas;1===u.ownedBy.length?(u.atlas.dispose(),o.splice(l,1)):u.ownedBy.splice(h,1);break}}for(l=0;l<o.length;l++){var u=o[l];if(i.configEquals(u.config,c))return u.ownedBy.push(t),u.atlas}var f={atlas:new n.DynamicCharAtlas(document,c),config:c,ownedBy:[t]};return o.push(f),f.atlas},t.removeTerminalFromCache=function(e){for(var t=0;t<o.length;t++){var r=o[t].ownedBy.indexOf(e);if(-1!==r){1===o[t].ownedBy.length?(o[t].atlas.dispose(),o.splice(t,1)):o[t].ownedBy.splice(r,1);break}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.is256Color=t.configEquals=t.generateConfig=void 0;var i=r(3);t.generateConfig=function(e,t,r,i){var n={foreground:i.foreground,background:i.background,cursor:void 0,cursorAccent:void 0,selection:void 0,ansi:i.ansi.slice(0,16)};return{devicePixelRatio:window.devicePixelRatio,scaledCharWidth:e,scaledCharHeight:t,fontFamily:r.fontFamily,fontSize:r.fontSize,fontWeight:r.fontWeight,fontWeightBold:r.fontWeightBold,allowTransparency:r.allowTransparency,colors:n}},t.configEquals=function(e,t){for(var r=0;r<e.colors.ansi.length;r++)if(e.colors.ansi[r].rgba!==t.colors.ansi[r].rgba)return!1;return e.devicePixelRatio===t.devicePixelRatio&&e.fontFamily===t.fontFamily&&e.fontSize===t.fontSize&&e.fontWeight===t.fontWeight&&e.fontWeightBold===t.fontWeightBold&&e.allowTransparency===t.allowTransparency&&e.scaledCharWidth===t.scaledCharWidth&&e.scaledCharHeight===t.scaledCharHeight&&e.colors.foreground===t.colors.foreground&&e.colors.background===t.colors.background},t.is256Color=function(e){return e<i.DEFAULT_COLOR}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColorManager=t.DEFAULT_ANSI_COLORS=void 0;var i=r(10),n=r(45),o=i.css.toColor("#ffffff"),s=i.css.toColor("#000000"),a=i.css.toColor("#ffffff"),c=i.css.toColor("#000000"),l={css:"rgba(255, 255, 255, 0.3)",rgba:4294967117};t.DEFAULT_ANSI_COLORS=function(){for(var e=[i.css.toColor("#2e3436"),i.css.toColor("#cc0000"),i.css.toColor("#4e9a06"),i.css.toColor("#c4a000"),i.css.toColor("#3465a4"),i.css.toColor("#75507b"),i.css.toColor("#06989a"),i.css.toColor("#d3d7cf"),i.css.toColor("#555753"),i.css.toColor("#ef2929"),i.css.toColor("#8ae234"),i.css.toColor("#fce94f"),i.css.toColor("#729fcf"),i.css.toColor("#ad7fa8"),i.css.toColor("#34e2e2"),i.css.toColor("#eeeeec")],t=[0,95,135,175,215,255],r=0;r<216;r++){var n=t[r/36%6|0],o=t[r/6%6|0],s=t[r%6];e.push({css:i.channels.toCss(n,o,s),rgba:i.channels.toRgba(n,o,s)})}for(r=0;r<24;r++){var a=8+10*r;e.push({css:i.channels.toCss(a,a,a),rgba:i.channels.toRgba(a,a,a)})}return e}();var h=function(){function e(e,r){this.allowTransparency=r;var h=e.createElement("canvas");h.width=1,h.height=1;var u=h.getContext("2d");if(!u)throw new Error("Could not get rendering context");this._ctx=u,this._ctx.globalCompositeOperation="copy",this._litmusColor=this._ctx.createLinearGradient(0,0,1,1),this._contrastCache=new n.ColorContrastCache,this.colors={foreground:o,background:s,cursor:a,cursorAccent:c,selectionTransparent:l,selectionOpaque:i.color.blend(s,l),ansi:t.DEFAULT_ANSI_COLORS.slice(),contrastCache:this._contrastCache}}return e.prototype.onOptionsChange=function(e){"minimumContrastRatio"===e&&this._contrastCache.clear()},e.prototype.setTheme=function(e){if(void 0===e&&(e={}),this.colors.foreground=this._parseColor(e.foreground,o),this.colors.background=this._parseColor(e.background,s),this.colors.cursor=this._parseColor(e.cursor,a,!0),this.colors.cursorAccent=this._parseColor(e.cursorAccent,c,!0),this.colors.selectionTransparent=this._parseColor(e.selection,l,!0),this.colors.selectionOpaque=i.color.blend(this.colors.background,this.colors.selectionTransparent),i.color.isOpaque(this.colors.selectionTransparent)){this.colors.selectionTransparent=i.color.opacity(this.colors.selectionTransparent,.3)}this.colors.ansi[0]=this._parseColor(e.black,t.DEFAULT_ANSI_COLORS[0]),this.colors.ansi[1]=this._parseColor(e.red,t.DEFAULT_ANSI_COLORS[1]),this.colors.ansi[2]=this._parseColor(e.green,t.DEFAULT_ANSI_COLORS[2]),this.colors.ansi[3]=this._parseColor(e.yellow,t.DEFAULT_ANSI_COLORS[3]),this.colors.ansi[4]=this._parseColor(e.blue,t.DEFAULT_ANSI_COLORS[4]),this.colors.ansi[5]=this._parseColor(e.magenta,t.DEFAULT_ANSI_COLORS[5]),this.colors.ansi[6]=this._parseColor(e.cyan,t.DEFAULT_ANSI_COLORS[6]),this.colors.ansi[7]=this._parseColor(e.white,t.DEFAULT_ANSI_COLORS[7]),this.colors.ansi[8]=this._parseColor(e.brightBlack,t.DEFAULT_ANSI_COLORS[8]),this.colors.ansi[9]=this._parseColor(e.brightRed,t.DEFAULT_ANSI_COLORS[9]),this.colors.ansi[10]=this._parseColor(e.brightGreen,t.DEFAULT_ANSI_COLORS[10]),this.colors.ansi[11]=this._parseColor(e.brightYellow,t.DEFAULT_ANSI_COLORS[11]),this.colors.ansi[12]=this._parseColor(e.brightBlue,t.DEFAULT_ANSI_COLORS[12]),this.colors.ansi[13]=this._parseColor(e.brightMagenta,t.DEFAULT_ANSI_COLORS[13]),this.colors.ansi[14]=this._parseColor(e.brightCyan,t.DEFAULT_ANSI_COLORS[14]),this.colors.ansi[15]=this._parseColor(e.brightWhite,t.DEFAULT_ANSI_COLORS[15]),this._contrastCache.clear()},e.prototype._parseColor=function(e,t,r){if(void 0===r&&(r=this.allowTransparency),void 0===e)return t;if(this._ctx.fillStyle=this._litmusColor,this._ctx.fillStyle=e,"string"!=typeof this._ctx.fillStyle)return console.warn("Color: "+e+" is invalid using fallback "+t.css),t;this._ctx.fillRect(0,0,1,1);var n=this._ctx.getImageData(0,0,1,1).data;if(255!==n[3]){if(!r)return console.warn("Color: "+e+" is using transparency, but allowTransparency is false. Using fallback "+t.css+"."),t;var o=this._ctx.fillStyle.substring(5,this._ctx.fillStyle.length-1).split(",").map((function(e){return Number(e)})),s=o[0],a=o[1],c=o[2],l=o[3],h=Math.round(255*l);return{rgba:i.channels.toRgba(s,a,c,h),css:e}}return{css:this._ctx.fillStyle,rgba:i.channels.toRgba(n[0],n[1],n[2],n[3])}},e}();t.ColorManager=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.throwIfFalsy=void 0,t.throwIfFalsy=function(e){if(!e)throw new Error("value must not be falsy");return e}},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.CharacterJoinerRegistry=t.JoinedCellData=void 0;var o=r(6),s=r(3),a=r(4),c=function(e){function t(t,r,i){var n=e.call(this)||this;return n.content=0,n.combinedData="",n.fg=t.fg,n.bg=t.bg,n.combinedData=r,n._width=i,n}return n(t,e),t.prototype.isCombined=function(){return 2097152},t.prototype.getWidth=function(){return this._width},t.prototype.getChars=function(){return this.combinedData},t.prototype.getCode=function(){return 2097151},t.prototype.setFromCharData=function(e){throw new Error("not implemented")},t.prototype.getAsCharData=function(){return[this.fg,this.getChars(),this.getWidth(),this.getCode()]},t}(o.AttributeData);t.JoinedCellData=c;var l=function(){function e(e){this._bufferService=e,this._characterJoiners=[],this._nextCharacterJoinerId=0,this._workCell=new a.CellData}return e.prototype.registerCharacterJoiner=function(e){var t={id:this._nextCharacterJoinerId++,handler:e};return this._characterJoiners.push(t),t.id},e.prototype.deregisterCharacterJoiner=function(e){for(var t=0;t<this._characterJoiners.length;t++)if(this._characterJoiners[t].id===e)return this._characterJoiners.splice(t,1),!0;return!1},e.prototype.getJoinedCharacters=function(e){if(0===this._characterJoiners.length)return[];var t=this._bufferService.buffer.lines.get(e);if(!t||0===t.length)return[];for(var r=[],i=t.translateToString(!0),n=0,o=0,a=0,c=t.getFg(0),l=t.getBg(0),h=0;h<t.getTrimmedLength();h++)if(t.loadCell(h,this._workCell),0!==this._workCell.getWidth()){if(this._workCell.fg!==c||this._workCell.bg!==l){if(h-n>1)for(var u=this._getJoinedRanges(i,a,o,t,n),f=0;f<u.length;f++)r.push(u[f]);n=h,a=o,c=this._workCell.fg,l=this._workCell.bg}o+=this._workCell.getChars().length||s.WHITESPACE_CELL_CHAR.length}if(this._bufferService.cols-n>1)for(u=this._getJoinedRanges(i,a,o,t,n),f=0;f<u.length;f++)r.push(u[f]);return r},e.prototype._getJoinedRanges=function(t,r,i,n,o){for(var s=t.substring(r,i),a=this._characterJoiners[0].handler(s),c=1;c<this._characterJoiners.length;c++)for(var l=this._characterJoiners[c].handler(s),h=0;h<l.length;h++)e._mergeRanges(a,l[h]);return this._stringRangesToCellRanges(a,n,o),a},e.prototype._stringRangesToCellRanges=function(e,t,r){var i=0,n=!1,o=0,a=e[i];if(a){for(var c=r;c<this._bufferService.cols;c++){var l=t.getWidth(c),h=t.getString(c).length||s.WHITESPACE_CELL_CHAR.length;if(0!==l){if(!n&&a[0]<=o&&(a[0]=c,n=!0),a[1]<=o){if(a[1]=c,!(a=e[++i]))break;a[0]<=o?(a[0]=c,n=!0):n=!1}o+=h}}a&&(a[1]=this._bufferService.cols)}},e._mergeRanges=function(e,t){for(var r=!1,i=0;i<e.length;i++){var n=e[i];if(r){if(t[1]<=n[0])return e[i-1][1]=t[1],e;if(t[1]<=n[1])return e[i-1][1]=Math.max(t[1],n[1]),e.splice(i,1),e;e.splice(i,1),i--}else{if(t[1]<=n[0])return e.splice(i,0,t),e;if(t[1]<=n[1])return n[0]=Math.min(t[0],n[0]),e;t[0]<n[1]&&(n[0]=Math.min(t[0],n[0]),r=!0)}}return r?e[e.length-1][1]=t[1]:e.push(t),e},e}();t.CharacterJoinerRegistry=l},function(e,t,r){"use strict";function i(e,t){var r=t.getBoundingClientRect();return[e.clientX-r.left,e.clientY-r.top]}Object.defineProperty(t,"__esModule",{value:!0}),t.getRawByteCoords=t.getCoords=t.getCoordsRelativeToElement=void 0,t.getCoordsRelativeToElement=i,t.getCoords=function(e,t,r,n,o,s,a,c){if(o){var l=i(e,t);if(l)return l[0]=Math.ceil((l[0]+(c?s/2:0))/s),l[1]=Math.ceil(l[1]/a),l[0]=Math.min(Math.max(l[0],1),r+(c?1:0)),l[1]=Math.min(Math.max(l[1],1),n),l}},t.getRawByteCoords=function(e){if(e)return{x:e[0]+32,y:e[1]+32}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RenderDebouncer=void 0;var i=function(){function e(e){this._renderCallback=e}return e.prototype.dispose=function(){this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0)},e.prototype.refresh=function(e,t,r){var i=this;this._rowCount=r,e=void 0!==e?e:0,t=void 0!==t?t:this._rowCount-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,e):e,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,t):t,this._animationFrame||(this._animationFrame=window.requestAnimationFrame((function(){return i._innerRefresh()})))},e.prototype._innerRefresh=function(){if(void 0!==this._rowStart&&void 0!==this._rowEnd&&void 0!==this._rowCount){var e=Math.max(this._rowStart,0),t=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._animationFrame=void 0,this._renderCallback(e,t)}},e}();t.RenderDebouncer=i},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.ScreenDprMonitor=void 0;var o=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._currentDevicePixelRatio=window.devicePixelRatio,t}return n(t,e),t.prototype.setListener=function(e){var t=this;this._listener&&this.clearListener(),this._listener=e,this._outerListener=function(){t._listener&&(t._listener(window.devicePixelRatio,t._currentDevicePixelRatio),t._updateDpr())},this._updateDpr()},t.prototype.dispose=function(){e.prototype.dispose.call(this),this.clearListener()},t.prototype._updateDpr=function(){var e;this._outerListener&&(null===(e=this._resolutionMediaMatchList)||void 0===e||e.removeListener(this._outerListener),this._currentDevicePixelRatio=window.devicePixelRatio,this._resolutionMediaMatchList=window.matchMedia("screen and (resolution: "+window.devicePixelRatio+"dppx)"),this._resolutionMediaMatchList.addListener(this._outerListener))},t.prototype.clearListener=function(){this._resolutionMediaMatchList&&this._listener&&this._outerListener&&(this._resolutionMediaMatchList.removeListener(this._outerListener),this._resolutionMediaMatchList=void 0,this._listener=void 0,this._outerListener=void 0)},t}(r(2).Disposable);t.ScreenDprMonitor=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clone=void 0,t.clone=function e(t,r){if(void 0===r&&(r=5),"object"!=typeof t)return t;var i=Array.isArray(t)?[]:{};for(var n in t)i[n]=r<=1?t[n]:t[n]?e(t[n],r-1):t[n];return i}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Terminal=void 0;var i=r(4),n=r(35),o=r(18),s=r(0),a=r(83),c=function(){function e(e){this._core=new n.Terminal(e),this._addonManager=new a.AddonManager}return e.prototype._checkProposedApi=function(){if(!this._core.optionsService.options.allowProposedApi)throw new Error("You must set the allowProposedApi option to true to use proposed API")},Object.defineProperty(e.prototype,"onCursorMove",{get:function(){return this._core.onCursorMove},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onLineFeed",{get:function(){return this._core.onLineFeed},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onSelectionChange",{get:function(){return this._core.onSelectionChange},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onData",{get:function(){return this._core.onData},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onBinary",{get:function(){return this._core.onBinary},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onTitleChange",{get:function(){return this._core.onTitleChange},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onScroll",{get:function(){return this._core.onScroll},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onKey",{get:function(){return this._core.onKey},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onRender",{get:function(){return this._core.onRender},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onResize",{get:function(){return this._core.onResize},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"element",{get:function(){return this._core.element},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"parser",{get:function(){return this._checkProposedApi(),this._parser||(this._parser=new f(this._core)),this._parser},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"unicode",{get:function(){return this._checkProposedApi(),new _(this._core)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"textarea",{get:function(){return this._core.textarea},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rows",{get:function(){return this._core.rows},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cols",{get:function(){return this._core.cols},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"buffer",{get:function(){return this._checkProposedApi(),new h(this._core.buffers)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"markers",{get:function(){return this._checkProposedApi(),this._core.markers},enumerable:!1,configurable:!0}),e.prototype.blur=function(){this._core.blur()},e.prototype.focus=function(){this._core.focus()},e.prototype.resize=function(e,t){this._verifyIntegers(e,t),this._core.resize(e,t)},e.prototype.open=function(e){this._core.open(e)},e.prototype.attachCustomKeyEventHandler=function(e){this._core.attachCustomKeyEventHandler(e)},e.prototype.registerLinkMatcher=function(e,t,r){return this._checkProposedApi(),this._core.registerLinkMatcher(e,t,r)},e.prototype.deregisterLinkMatcher=function(e){this._checkProposedApi(),this._core.deregisterLinkMatcher(e)},e.prototype.registerLinkProvider=function(e){return this._checkProposedApi(),this._core.registerLinkProvider(e)},e.prototype.registerCharacterJoiner=function(e){return this._checkProposedApi(),this._core.registerCharacterJoiner(e)},e.prototype.deregisterCharacterJoiner=function(e){this._checkProposedApi(),this._core.deregisterCharacterJoiner(e)},e.prototype.registerMarker=function(e){return this._checkProposedApi(),this._verifyIntegers(e),this._core.addMarker(e)},e.prototype.addMarker=function(e){return this.registerMarker(e)},e.prototype.hasSelection=function(){return this._core.hasSelection()},e.prototype.select=function(e,t,r){this._verifyIntegers(e,t,r),this._core.select(e,t,r)},e.prototype.getSelection=function(){return this._core.getSelection()},e.prototype.getSelectionPosition=function(){return this._core.getSelectionPosition()},e.prototype.clearSelection=function(){this._core.clearSelection()},e.prototype.selectAll=function(){this._core.selectAll()},e.prototype.selectLines=function(e,t){this._verifyIntegers(e,t),this._core.selectLines(e,t)},e.prototype.dispose=function(){this._addonManager.dispose(),this._core.dispose()},e.prototype.scrollLines=function(e){this._verifyIntegers(e),this._core.scrollLines(e)},e.prototype.scrollPages=function(e){this._verifyIntegers(e),this._core.scrollPages(e)},e.prototype.scrollToTop=function(){this._core.scrollToTop()},e.prototype.scrollToBottom=function(){this._core.scrollToBottom()},e.prototype.scrollToLine=function(e){this._verifyIntegers(e),this._core.scrollToLine(e)},e.prototype.clear=function(){this._core.clear()},e.prototype.write=function(e,t){this._core.write(e,t)},e.prototype.writeUtf8=function(e,t){this._core.write(e,t)},e.prototype.writeln=function(e,t){this._core.write(e),this._core.write("\\r\\n",t)},e.prototype.paste=function(e){this._core.paste(e)},e.prototype.getOption=function(e){return this._core.optionsService.getOption(e)},e.prototype.setOption=function(e,t){this._core.optionsService.setOption(e,t)},e.prototype.refresh=function(e,t){this._verifyIntegers(e,t),this._core.refresh(e,t)},e.prototype.reset=function(){this._core.reset()},e.prototype.loadAddon=function(e){return this._addonManager.loadAddon(this,e)},Object.defineProperty(e,"strings",{get:function(){return o},enumerable:!1,configurable:!0}),e.prototype._verifyIntegers=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var r=0,i=e;r<i.length;r++){var n=i[r];if(n===1/0||isNaN(n)||n%1!=0)throw new Error("This API only accepts integers")}},e}();t.Terminal=c;var l=function(){function e(e,t){this._buffer=e,this.type=t}return e.prototype.init=function(e){return this._buffer=e,this},Object.defineProperty(e.prototype,"cursorY",{get:function(){return this._buffer.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cursorX",{get:function(){return this._buffer.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"viewportY",{get:function(){return this._buffer.ydisp},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"baseY",{get:function(){return this._buffer.ybase},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._buffer.lines.length},enumerable:!1,configurable:!0}),e.prototype.getLine=function(e){var t=this._buffer.lines.get(e);if(t)return new u(t)},e.prototype.getNullCell=function(){return new i.CellData},e}(),h=function(){function e(e){var t=this;this._buffers=e,this._onBufferChange=new s.EventEmitter,this._normal=new l(this._buffers.normal,"normal"),this._alternate=new l(this._buffers.alt,"alternate"),this._buffers.onBufferActivate((function(){return t._onBufferChange.fire(t.active)}))}return Object.defineProperty(e.prototype,"onBufferChange",{get:function(){return this._onBufferChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"active",{get:function(){if(this._buffers.active===this._buffers.normal)return this.normal;if(this._buffers.active===this._buffers.alt)return this.alternate;throw new Error("Active buffer is neither normal nor alternate")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"normal",{get:function(){return this._normal.init(this._buffers.normal)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"alternate",{get:function(){return this._alternate.init(this._buffers.alt)},enumerable:!1,configurable:!0}),e}(),u=function(){function e(e){this._line=e}return Object.defineProperty(e.prototype,"isWrapped",{get:function(){return this._line.isWrapped},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._line.length},enumerable:!1,configurable:!0}),e.prototype.getCell=function(e,t){if(!(e<0||e>=this._line.length))return t?(this._line.loadCell(e,t),t):this._line.loadCell(e,new i.CellData)},e.prototype.translateToString=function(e,t,r){return this._line.translateToString(e,t,r)},e}(),f=function(){function e(e){this._core=e}return e.prototype.registerCsiHandler=function(e,t){return this._core.addCsiHandler(e,(function(e){return t(e.toArray())}))},e.prototype.addCsiHandler=function(e,t){return this.registerCsiHandler(e,t)},e.prototype.registerDcsHandler=function(e,t){return this._core.addDcsHandler(e,(function(e,r){return t(e,r.toArray())}))},e.prototype.addDcsHandler=function(e,t){return this.registerDcsHandler(e,t)},e.prototype.registerEscHandler=function(e,t){return this._core.addEscHandler(e,t)},e.prototype.addEscHandler=function(e,t){return this.registerEscHandler(e,t)},e.prototype.registerOscHandler=function(e,t){return this._core.addOscHandler(e,t)},e.prototype.addOscHandler=function(e,t){return this.registerOscHandler(e,t)},e}(),_=function(){function e(e){this._core=e}return e.prototype.register=function(e){this._core.unicodeService.register(e)},Object.defineProperty(e.prototype,"versions",{get:function(){return this._core.unicodeService.versions},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeVersion",{get:function(){return this._core.unicodeService.activeVersion},set:function(e){this._core.unicodeService.activeVersion=e},enumerable:!1,configurable:!0}),e}()},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Terminal=void 0;var o=r(36),s=r(37),a=r(38),c=r(12),l=r(19),h=r(40),u=r(50),f=r(51),_=r(11),d=r(7),p=r(18),v=r(54),g=r(55),y=r(56),b=r(57),S=r(59),m=r(0),C=r(16),w=r(27),E=r(60),L=r(5),A=r(61),R=r(62),k=r(63),x=r(64),D=r(65),T="undefined"!=typeof window?window.document:null,O=function(e){function t(t){void 0===t&&(t={});var r=e.call(this,t)||this;return r.browser=_,r._keyDownHandled=!1,r._onCursorMove=new m.EventEmitter,r._onKey=new m.EventEmitter,r._onRender=new m.EventEmitter,r._onSelectionChange=new m.EventEmitter,r._onTitleChange=new m.EventEmitter,r._onFocus=new m.EventEmitter,r._onBlur=new m.EventEmitter,r._onA11yCharEmitter=new m.EventEmitter,r._onA11yTabEmitter=new m.EventEmitter,r._setup(),r.linkifier=r._instantiationService.createInstance(u.Linkifier),r.linkifier2=r.register(r._instantiationService.createInstance(k.Linkifier2)),r.register(r._inputHandler.onRequestBell((function(){return r.bell()}))),r.register(r._inputHandler.onRequestRefreshRows((function(e,t){return r.refresh(e,t)}))),r.register(r._inputHandler.onRequestReset((function(){return r.reset()}))),r.register(r._inputHandler.onRequestScroll((function(e,t){return r.scroll(e,t||void 0)}))),r.register(r._inputHandler.onRequestWindowsOptionsReport((function(e){return r._reportWindowsOptions(e)}))),r.register(m.forwardEvent(r._inputHandler.onCursorMove,r._onCursorMove)),r.register(m.forwardEvent(r._inputHandler.onTitleChange,r._onTitleChange)),r.register(m.forwardEvent(r._inputHandler.onA11yChar,r._onA11yCharEmitter)),r.register(m.forwardEvent(r._inputHandler.onA11yTab,r._onA11yTabEmitter)),r.register(r._bufferService.onResize((function(e){return r._afterResize(e.cols,e.rows)}))),r}return n(t,e),Object.defineProperty(t.prototype,"options",{get:function(){return this.optionsService.options},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onCursorMove",{get:function(){return this._onCursorMove.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onKey",{get:function(){return this._onKey.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRender",{get:function(){return this._onRender.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onSelectionChange",{get:function(){return this._onSelectionChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onTitleChange",{get:function(){return this._onTitleChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onFocus",{get:function(){return this._onFocus.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onBlur",{get:function(){return this._onBlur.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yChar",{get:function(){return this._onA11yCharEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yTab",{get:function(){return this._onA11yTabEmitter.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){var t,r,i;this._isDisposed||(e.prototype.dispose.call(this),null===(t=this._renderService)||void 0===t||t.dispose(),this._customKeyEventHandler=void 0,this.write=function(){},null===(i=null===(r=this.element)||void 0===r?void 0:r.parentNode)||void 0===i||i.removeChild(this.element))},t.prototype._setup=function(){e.prototype._setup.call(this),this._customKeyEventHandler=void 0},Object.defineProperty(t.prototype,"buffer",{get:function(){return this.buffers.active},enumerable:!1,configurable:!0}),t.prototype.focus=function(){this.textarea&&this.textarea.focus({preventScroll:!0})},t.prototype._updateOptions=function(t){var r,i,n,o;switch(e.prototype._updateOptions.call(this,t),t){case"fontFamily":case"fontSize":null===(r=this._renderService)||void 0===r||r.clear(),null===(i=this._charSizeService)||void 0===i||i.measure();break;case"cursorBlink":case"cursorStyle":this.refresh(this.buffer.y,this.buffer.y);break;case"drawBoldTextInBrightColors":case"letterSpacing":case"lineHeight":case"fontWeight":case"fontWeightBold":case"minimumContrastRatio":this._renderService&&(this._renderService.clear(),this._renderService.onResize(this.cols,this.rows),this.refresh(0,this.rows-1));break;case"rendererType":this._renderService&&(this._renderService.setRenderer(this._createRenderer()),this._renderService.onResize(this.cols,this.rows));break;case"scrollback":null===(n=this.viewport)||void 0===n||n.syncScrollArea();break;case"screenReaderMode":this.optionsService.options.screenReaderMode?!this._accessibilityManager&&this._renderService&&(this._accessibilityManager=new y.AccessibilityManager(this,this._renderService)):(null===(o=this._accessibilityManager)||void 0===o||o.dispose(),this._accessibilityManager=void 0);break;case"tabStopWidth":this.buffers.setupTabStops();break;case"theme":this._setTheme(this.optionsService.options.theme)}},t.prototype._onTextAreaFocus=function(e){this._coreService.decPrivateModes.sendFocus&&this._coreService.triggerDataEvent(c.C0.ESC+"[I"),this.updateCursorStyle(e),this.element.classList.add("focus"),this._showCursor(),this._onFocus.fire()},t.prototype.blur=function(){var e;return null===(e=this.textarea)||void 0===e?void 0:e.blur()},t.prototype._onTextAreaBlur=function(){this.textarea.value="",this.refresh(this.buffer.y,this.buffer.y),this._coreService.decPrivateModes.sendFocus&&this._coreService.triggerDataEvent(c.C0.ESC+"[O"),this.element.classList.remove("focus"),this._onBlur.fire()},t.prototype._syncTextArea=function(){if(this.textarea&&this.buffer.isCursorInViewport&&!this._compositionHelper.isComposing){var e=Math.ceil(this._charSizeService.height*this.optionsService.options.lineHeight),t=this._bufferService.buffer.y*e,r=this._bufferService.buffer.x*this._charSizeService.width;this.textarea.style.left=r+"px",this.textarea.style.top=t+"px",this.textarea.style.width=this._charSizeService.width+"px",this.textarea.style.height=e+"px",this.textarea.style.lineHeight=e+"px",this.textarea.style.zIndex="-5"}},t.prototype._initGlobal=function(){var e=this;this._bindKeys(),this.register(d.addDisposableDomListener(this.element,"copy",(function(t){e.hasSelection()&&a.copyHandler(t,e._selectionService)})));var t=function(t){return a.handlePasteEvent(t,e.textarea,e._coreService)};this.register(d.addDisposableDomListener(this.textarea,"paste",t)),this.register(d.addDisposableDomListener(this.element,"paste",t)),_.isFirefox?this.register(d.addDisposableDomListener(this.element,"mousedown",(function(t){2===t.button&&a.rightClickHandler(t,e.textarea,e.screenElement,e._selectionService,e.options.rightClickSelectsWord)}))):this.register(d.addDisposableDomListener(this.element,"contextmenu",(function(t){a.rightClickHandler(t,e.textarea,e.screenElement,e._selectionService,e.options.rightClickSelectsWord)}))),_.isLinux&&this.register(d.addDisposableDomListener(this.element,"auxclick",(function(t){1===t.button&&a.moveTextAreaUnderMouseCursor(t,e.textarea,e.screenElement)})))},t.prototype._bindKeys=function(){var e=this;this.register(d.addDisposableDomListener(this.textarea,"keyup",(function(t){return e._keyUp(t)}),!0)),this.register(d.addDisposableDomListener(this.textarea,"keydown",(function(t){return e._keyDown(t)}),!0)),this.register(d.addDisposableDomListener(this.textarea,"keypress",(function(t){return e._keyPress(t)}),!0)),this.register(d.addDisposableDomListener(this.textarea,"compositionstart",(function(){return e._compositionHelper.compositionstart()}))),this.register(d.addDisposableDomListener(this.textarea,"compositionupdate",(function(t){return e._compositionHelper.compositionupdate(t)}))),this.register(d.addDisposableDomListener(this.textarea,"compositionend",(function(){return e._compositionHelper.compositionend()}))),this.register(this.onRender((function(){return e._compositionHelper.updateCompositionElements()}))),this.register(this.onRender((function(t){return e._queueLinkification(t.start,t.end)})))},t.prototype.open=function(e){var t=this;if(!e)throw new Error("Terminal requires a parent element.");T.body.contains(e)||this._logService.debug("Terminal.open was called on an element that was not attached to the DOM"),this._document=e.ownerDocument,this.element=this._document.createElement("div"),this.element.dir="ltr",this.element.classList.add("terminal"),this.element.classList.add("xterm"),this.element.setAttribute("tabindex","0"),e.appendChild(this.element);var r=T.createDocumentFragment();this._viewportElement=T.createElement("div"),this._viewportElement.classList.add("xterm-viewport"),r.appendChild(this._viewportElement),this._viewportScrollArea=T.createElement("div"),this._viewportScrollArea.classList.add("xterm-scroll-area"),this._viewportElement.appendChild(this._viewportScrollArea),this.screenElement=T.createElement("div"),this.screenElement.classList.add("xterm-screen"),this._helperContainer=T.createElement("div"),this._helperContainer.classList.add("xterm-helpers"),this.screenElement.appendChild(this._helperContainer),r.appendChild(this.screenElement),this.textarea=T.createElement("textarea"),this.textarea.classList.add("xterm-helper-textarea"),this.textarea.setAttribute("aria-label",p.promptLabel),this.textarea.setAttribute("aria-multiline","false"),this.textarea.setAttribute("autocorrect","off"),this.textarea.setAttribute("autocapitalize","off"),this.textarea.setAttribute("spellcheck","false"),this.textarea.tabIndex=0,this.register(d.addDisposableDomListener(this.textarea,"focus",(function(e){return t._onTextAreaFocus(e)}))),this.register(d.addDisposableDomListener(this.textarea,"blur",(function(){return t._onTextAreaBlur()}))),this._helperContainer.appendChild(this.textarea);var i=this._instantiationService.createInstance(x.CoreBrowserService,this.textarea);this._instantiationService.setService(L.ICoreBrowserService,i),this._charSizeService=this._instantiationService.createInstance(A.CharSizeService,this._document,this._helperContainer),this._instantiationService.setService(L.ICharSizeService,this._charSizeService),this._compositionView=T.createElement("div"),this._compositionView.classList.add("composition-view"),this._compositionHelper=this._instantiationService.createInstance(o.CompositionHelper,this.textarea,this._compositionView),this._helperContainer.appendChild(this._compositionView),this.element.appendChild(r),this._theme=this.options.theme||this._theme,this._colorManager=new w.ColorManager(T,this.options.allowTransparency),this.register(this.optionsService.onOptionChange((function(e){return t._colorManager.onOptionsChange(e)}))),this._colorManager.setTheme(this._theme);var n=this._createRenderer();this._renderService=this.register(this._instantiationService.createInstance(E.RenderService,n,this.rows,this.screenElement)),this._instantiationService.setService(L.IRenderService,this._renderService),this.register(this._renderService.onRenderedBufferChange((function(e){return t._onRender.fire(e)}))),this.onResize((function(e){return t._renderService.resize(e.cols,e.rows)})),this._soundService=this._instantiationService.createInstance(v.SoundService),this._instantiationService.setService(L.ISoundService,this._soundService),this._mouseService=this._instantiationService.createInstance(R.MouseService),this._instantiationService.setService(L.IMouseService,this._mouseService),this.viewport=this._instantiationService.createInstance(s.Viewport,(function(e,r){return t.scrollLines(e,r)}),this._viewportElement,this._viewportScrollArea),this.viewport.onThemeChange(this._colorManager.colors),this.register(this._inputHandler.onRequestSyncScrollBar((function(){return t.viewport.syncScrollArea()}))),this.register(this.viewport),this.register(this.onCursorMove((function(){t._renderService.onCursorMove(),t._syncTextArea()}))),this.register(this.onResize((function(){return t._renderService.onResize(t.cols,t.rows)}))),this.register(this.onBlur((function(){return t._renderService.onBlur()}))),this.register(this.onFocus((function(){return t._renderService.onFocus()}))),this.register(this._renderService.onDimensionsChange((function(){return t.viewport.syncScrollArea()}))),this._selectionService=this.register(this._instantiationService.createInstance(f.SelectionService,this.element,this.screenElement)),this._instantiationService.setService(L.ISelectionService,this._selectionService),this.register(this._selectionService.onRequestScrollLines((function(e){return t.scrollLines(e.amount,e.suppressScrollEvent)}))),this.register(this._selectionService.onSelectionChange((function(){return t._onSelectionChange.fire()}))),this.register(this._selectionService.onRequestRedraw((function(e){return t._renderService.onSelectionChanged(e.start,e.end,e.columnSelectMode)}))),this.register(this._selectionService.onLinuxMouseSelection((function(e){t.textarea.value=e,t.textarea.focus(),t.textarea.select()}))),this.register(this.onScroll((function(){t.viewport.syncScrollArea(),t._selectionService.refresh()}))),this.register(d.addDisposableDomListener(this._viewportElement,"scroll",(function(){return t._selectionService.refresh()}))),this._mouseZoneManager=this._instantiationService.createInstance(g.MouseZoneManager,this.element,this.screenElement),this.register(this._mouseZoneManager),this.register(this.onScroll((function(){return t._mouseZoneManager.clearAll()}))),this.linkifier.attachToDom(this.element,this._mouseZoneManager),this.linkifier2.attachToDom(this.element,this._mouseService,this._renderService),this.register(d.addDisposableDomListener(this.element,"mousedown",(function(e){return t._selectionService.onMouseDown(e)}))),this._coreMouseService.areMouseEventsActive?(this._selectionService.disable(),this.element.classList.add("enable-mouse-events")):this._selectionService.enable(),this.options.screenReaderMode&&(this._accessibilityManager=new y.AccessibilityManager(this,this._renderService)),this._charSizeService.measure(),this.refresh(0,this.rows-1),this._initGlobal(),this.bindMouse()},t.prototype._createRenderer=function(){switch(this.options.rendererType){case"canvas":return this._instantiationService.createInstance(h.Renderer,this._colorManager.colors,this.screenElement,this.linkifier,this.linkifier2);case"dom":return this._instantiationService.createInstance(b.DomRenderer,this._colorManager.colors,this.element,this.screenElement,this._viewportElement,this.linkifier,this.linkifier2);default:throw new Error(\'Unrecognized rendererType "\'+this.options.rendererType+\'"\')}},t.prototype._setTheme=function(e){var t,r,i;this._theme=e,null===(t=this._colorManager)||void 0===t||t.setTheme(e),null===(r=this._renderService)||void 0===r||r.setColors(this._colorManager.colors),null===(i=this.viewport)||void 0===i||i.onThemeChange(this._colorManager.colors)},t.prototype.bindMouse=function(){var e=this,t=this,r=this.element;function i(e){var r,i,n=t._mouseService.getRawByteCoords(e,t.screenElement,t.cols,t.rows);if(!n)return!1;switch(e.overrideType||e.type){case"mousemove":i=32,void 0===e.buttons?(r=3,void 0!==e.button&&(r=e.button<3?e.button:3)):r=1&e.buttons?0:4&e.buttons?1:2&e.buttons?2:3;break;case"mouseup":i=0,r=e.button<3?e.button:3;break;case"mousedown":i=1,r=e.button<3?e.button:3;break;case"wheel":0!==e.deltaY&&(i=e.deltaY<0?0:1),r=4;break;default:return!1}return!(void 0===i||void 0===r||r>4)&&t._coreMouseService.triggerMouseEvent({col:n.x-33,row:n.y-33,button:r,action:i,ctrl:e.ctrlKey,alt:e.altKey,shift:e.shiftKey})}var n={mouseup:null,wheel:null,mousedrag:null,mousemove:null},o=function(t){return i(t),t.buttons||(e._document.removeEventListener("mouseup",n.mouseup),n.mousedrag&&e._document.removeEventListener("mousemove",n.mousedrag)),e.cancel(t)},s=function(t){return i(t),t.preventDefault(),e.cancel(t)},a=function(e){e.buttons&&i(e)},l=function(e){e.buttons||i(e)};this.register(this._coreMouseService.onProtocolChange((function(t){t?("debug"===e.optionsService.options.logLevel&&e._logService.debug("Binding to mouse events:",e._coreMouseService.explainEvents(t)),e.element.classList.add("enable-mouse-events"),e._selectionService.disable()):(e._logService.debug("Unbinding from mouse events."),e.element.classList.remove("enable-mouse-events"),e._selectionService.enable()),8&t?n.mousemove||(r.addEventListener("mousemove",l),n.mousemove=l):(r.removeEventListener("mousemove",n.mousemove),n.mousemove=null),16&t?n.wheel||(r.addEventListener("wheel",s,{passive:!1}),n.wheel=s):(r.removeEventListener("wheel",n.wheel),n.wheel=null),2&t?n.mouseup||(n.mouseup=o):(e._document.removeEventListener("mouseup",n.mouseup),n.mouseup=null),4&t?n.mousedrag||(n.mousedrag=a):(e._document.removeEventListener("mousemove",n.mousedrag),n.mousedrag=null)}))),this._coreMouseService.activeProtocol=this._coreMouseService.activeProtocol,this.register(d.addDisposableDomListener(r,"mousedown",(function(t){if(t.preventDefault(),e.focus(),e._coreMouseService.areMouseEventsActive&&!e._selectionService.shouldForceSelection(t))return i(t),n.mouseup&&e._document.addEventListener("mouseup",n.mouseup),n.mousedrag&&e._document.addEventListener("mousemove",n.mousedrag),e.cancel(t)}))),this.register(d.addDisposableDomListener(r,"wheel",(function(t){if(n.wheel);else if(!e.buffer.hasScrollback){var r=e.viewport.getLinesScrolled(t);if(0===r)return;for(var i=c.C0.ESC+(e._coreService.decPrivateModes.applicationCursorKeys?"O":"[")+(t.deltaY<0?"A":"B"),o="",s=0;s<Math.abs(r);s++)o+=i;e._coreService.triggerDataEvent(o,!0)}}),{passive:!0})),this.register(d.addDisposableDomListener(r,"wheel",(function(t){if(!n.wheel)return e.viewport.onWheel(t)?void 0:e.cancel(t)}),{passive:!1})),this.register(d.addDisposableDomListener(r,"touchstart",(function(t){if(!e._coreMouseService.areMouseEventsActive)return e.viewport.onTouchStart(t),e.cancel(t)}),{passive:!0})),this.register(d.addDisposableDomListener(r,"touchmove",(function(t){if(!e._coreMouseService.areMouseEventsActive)return e.viewport.onTouchMove(t)?void 0:e.cancel(t)}),{passive:!1}))},t.prototype.refresh=function(e,t){var r;null===(r=this._renderService)||void 0===r||r.refreshRows(e,t)},t.prototype._queueLinkification=function(e,t){var r;null===(r=this.linkifier)||void 0===r||r.linkifyRows(e,t)},t.prototype.updateCursorStyle=function(e){this._selectionService&&this._selectionService.shouldColumnSelect(e)?this.element.classList.add("column-select"):this.element.classList.remove("column-select")},t.prototype._showCursor=function(){this._coreService.isCursorInitialized||(this._coreService.isCursorInitialized=!0,this.refresh(this.buffer.y,this.buffer.y))},t.prototype.scrollLines=function(t,r){e.prototype.scrollLines.call(this,t,r),this.refresh(0,this.rows-1)},t.prototype.paste=function(e){a.paste(e,this.textarea,this._coreService)},t.prototype.attachCustomKeyEventHandler=function(e){this._customKeyEventHandler=e},t.prototype.registerLinkMatcher=function(e,t,r){var i=this.linkifier.registerLinkMatcher(e,t,r);return this.refresh(0,this.rows-1),i},t.prototype.deregisterLinkMatcher=function(e){this.linkifier.deregisterLinkMatcher(e)&&this.refresh(0,this.rows-1)},t.prototype.registerLinkProvider=function(e){return this.linkifier2.registerLinkProvider(e)},t.prototype.registerCharacterJoiner=function(e){var t=this._renderService.registerCharacterJoiner(e);return this.refresh(0,this.rows-1),t},t.prototype.deregisterCharacterJoiner=function(e){this._renderService.deregisterCharacterJoiner(e)&&this.refresh(0,this.rows-1)},Object.defineProperty(t.prototype,"markers",{get:function(){return this.buffer.markers},enumerable:!1,configurable:!0}),t.prototype.addMarker=function(e){if(this.buffer===this.buffers.normal)return this.buffer.addMarker(this.buffer.ybase+this.buffer.y+e)},t.prototype.hasSelection=function(){return!!this._selectionService&&this._selectionService.hasSelection},t.prototype.select=function(e,t,r){this._selectionService.setSelection(e,t,r)},t.prototype.getSelection=function(){return this._selectionService?this._selectionService.selectionText:""},t.prototype.getSelectionPosition=function(){if(this._selectionService&&this._selectionService.hasSelection)return{startColumn:this._selectionService.selectionStart[0],startRow:this._selectionService.selectionStart[1],endColumn:this._selectionService.selectionEnd[0],endRow:this._selectionService.selectionEnd[1]}},t.prototype.clearSelection=function(){var e;null===(e=this._selectionService)||void 0===e||e.clearSelection()},t.prototype.selectAll=function(){var e;null===(e=this._selectionService)||void 0===e||e.selectAll()},t.prototype.selectLines=function(e,t){var r;null===(r=this._selectionService)||void 0===r||r.selectLines(e,t)},t.prototype._keyDown=function(e){if(this._keyDownHandled=!1,this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return!1;if(!this._compositionHelper.keydown(e))return this.buffer.ybase!==this.buffer.ydisp&&this.scrollToBottom(),!1;var t=S.evaluateKeyboardEvent(e,this._coreService.decPrivateModes.applicationCursorKeys,this.browser.isMac,this.options.macOptionIsMeta);if(this.updateCursorStyle(e),3===t.type||2===t.type){var r=this.rows-1;return this.scrollLines(2===t.type?-r:r),this.cancel(e,!0)}return 1===t.type&&this.selectAll(),!!this._isThirdLevelShift(this.browser,e)||(t.cancel&&this.cancel(e,!0),!t.key||(t.key!==c.C0.ETX&&t.key!==c.C0.CR||(this.textarea.value=""),this._onKey.fire({key:t.key,domEvent:e}),this._showCursor(),this._coreService.triggerDataEvent(t.key,!0),this.optionsService.options.screenReaderMode?void(this._keyDownHandled=!0):this.cancel(e,!0)))},t.prototype._isThirdLevelShift=function(e,t){var r=e.isMac&&!this.options.macOptionIsMeta&&t.altKey&&!t.ctrlKey&&!t.metaKey||e.isWindows&&t.altKey&&t.ctrlKey&&!t.metaKey;return"keypress"===t.type?r:r&&(!t.keyCode||t.keyCode>47)},t.prototype._keyUp=function(e){this._customKeyEventHandler&&!1===this._customKeyEventHandler(e)||(function(e){return 16===e.keyCode||17===e.keyCode||18===e.keyCode}(e)||this.focus(),this.updateCursorStyle(e))},t.prototype._keyPress=function(e){var t;if(this._keyDownHandled)return!1;if(this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return!1;if(this.cancel(e),e.charCode)t=e.charCode;else if(null===e.which||void 0===e.which)t=e.keyCode;else{if(0===e.which||0===e.charCode)return!1;t=e.which}return!(!t||(e.altKey||e.ctrlKey||e.metaKey)&&!this._isThirdLevelShift(this.browser,e))&&(t=String.fromCharCode(t),this._onKey.fire({key:t,domEvent:e}),this._showCursor(),this._coreService.triggerDataEvent(t,!0),!0)},t.prototype.bell=function(){this._soundBell()&&this._soundService.playBellSound()},t.prototype.resize=function(t,r){t!==this.cols||r!==this.rows?e.prototype.resize.call(this,t,r):this._charSizeService&&!this._charSizeService.hasValidSize&&this._charSizeService.measure()},t.prototype._afterResize=function(e,t){var r,i;null===(r=this._charSizeService)||void 0===r||r.measure(),null===(i=this.viewport)||void 0===i||i.syncScrollArea(!0)},t.prototype.clear=function(){if(0!==this.buffer.ybase||0!==this.buffer.y){this.buffer.lines.set(0,this.buffer.lines.get(this.buffer.ybase+this.buffer.y)),this.buffer.lines.length=1,this.buffer.ydisp=0,this.buffer.ybase=0,this.buffer.y=0;for(var e=1;e<this.rows;e++)this.buffer.lines.push(this.buffer.getBlankLine(C.DEFAULT_ATTR_DATA));this.refresh(0,this.rows-1),this._onScroll.fire(this.buffer.ydisp)}},t.prototype.reset=function(){var t,r;this.options.rows=this.rows,this.options.cols=this.cols;var i=this._customKeyEventHandler;this._setup(),e.prototype.reset.call(this),null===(t=this._selectionService)||void 0===t||t.reset(),this._customKeyEventHandler=i,this.refresh(0,this.rows-1),null===(r=this.viewport)||void 0===r||r.syncScrollArea()},t.prototype._reportWindowsOptions=function(e){if(this._renderService)switch(e){case l.WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:var t=this._renderService.dimensions.scaledCanvasWidth.toFixed(0),r=this._renderService.dimensions.scaledCanvasHeight.toFixed(0);this._coreService.triggerDataEvent(c.C0.ESC+"[4;"+r+";"+t+"t");break;case l.WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:var i=this._renderService.dimensions.scaledCellWidth.toFixed(0),n=this._renderService.dimensions.scaledCellHeight.toFixed(0);this._coreService.triggerDataEvent(c.C0.ESC+"[6;"+n+";"+i+"t")}},t.prototype.cancel=function(e,t){if(this.options.cancelEvents||t)return e.preventDefault(),e.stopPropagation(),!1},t.prototype._visualBell=function(){return!1},t.prototype._soundBell=function(){return"sound"===this.options.bellStyle},t}(D.CoreTerminal);t.Terminal=O},function(e,t,r){"use strict";var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CompositionHelper=void 0;var o=r(5),s=r(1),a=function(){function e(e,t,r,i,n,o){this._textarea=e,this._compositionView=t,this._bufferService=r,this._optionsService=i,this._charSizeService=n,this._coreService=o,this._isComposing=!1,this._isSendingComposition=!1,this._compositionPosition={start:0,end:0}}return Object.defineProperty(e.prototype,"isComposing",{get:function(){return this._isComposing},enumerable:!1,configurable:!0}),e.prototype.compositionstart=function(){this._isComposing=!0,this._compositionPosition.start=this._textarea.value.length,this._compositionView.textContent="",this._compositionView.classList.add("active")},e.prototype.compositionupdate=function(e){var t=this;this._compositionView.textContent=e.data,this.updateCompositionElements(),setTimeout((function(){t._compositionPosition.end=t._textarea.value.length}),0)},e.prototype.compositionend=function(){this._finalizeComposition(!0)},e.prototype.keydown=function(e){if(this._isComposing||this._isSendingComposition){if(229===e.keyCode)return!1;if(16===e.keyCode||17===e.keyCode||18===e.keyCode)return!1;this._finalizeComposition(!1)}return 229!==e.keyCode||(this._handleAnyTextareaChanges(),!1)},e.prototype._finalizeComposition=function(e){var t=this;if(this._compositionView.classList.remove("active"),this._isComposing=!1,e){var r={start:this._compositionPosition.start,end:this._compositionPosition.end};this._isSendingComposition=!0,setTimeout((function(){if(t._isSendingComposition){t._isSendingComposition=!1;var e=void 0;e=t._isComposing?t._textarea.value.substring(r.start,r.end):t._textarea.value.substring(r.start),t._coreService.triggerDataEvent(e,!0)}}),0)}else{this._isSendingComposition=!1;var i=this._textarea.value.substring(this._compositionPosition.start,this._compositionPosition.end);this._coreService.triggerDataEvent(i,!0)}},e.prototype._handleAnyTextareaChanges=function(){var e=this,t=this._textarea.value;setTimeout((function(){if(!e._isComposing){var r=e._textarea.value.replace(t,"");r.length>0&&e._coreService.triggerDataEvent(r,!0)}}),0)},e.prototype.updateCompositionElements=function(e){var t=this;if(this._isComposing){if(this._bufferService.buffer.isCursorInViewport){var r=Math.ceil(this._charSizeService.height*this._optionsService.options.lineHeight),i=this._bufferService.buffer.y*r,n=this._bufferService.buffer.x*this._charSizeService.width;this._compositionView.style.left=n+"px",this._compositionView.style.top=i+"px",this._compositionView.style.height=r+"px",this._compositionView.style.lineHeight=r+"px",this._compositionView.style.fontFamily=this._optionsService.options.fontFamily,this._compositionView.style.fontSize=this._optionsService.options.fontSize+"px";var o=this._compositionView.getBoundingClientRect();this._textarea.style.left=n+"px",this._textarea.style.top=i+"px",this._textarea.style.width=o.width+"px",this._textarea.style.height=o.height+"px",this._textarea.style.lineHeight=o.height+"px"}e||setTimeout((function(){return t.updateCompositionElements(!0)}),0)}},e=i([n(2,s.IBufferService),n(3,s.IOptionsService),n(4,o.ICharSizeService),n(5,s.ICoreService)],e)}();t.CompositionHelper=a},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.Viewport=void 0;var a=r(2),c=r(7),l=r(5),h=r(1),u=function(e){function t(t,r,i,n,o,s,a){var l=e.call(this)||this;return l._scrollLines=t,l._viewportElement=r,l._scrollArea=i,l._bufferService=n,l._optionsService=o,l._charSizeService=s,l._renderService=a,l.scrollBarWidth=0,l._currentRowHeight=0,l._lastRecordedBufferLength=0,l._lastRecordedViewportHeight=0,l._lastRecordedBufferHeight=0,l._lastTouchY=0,l._lastScrollTop=0,l._wheelPartialScroll=0,l._refreshAnimationFrame=null,l._ignoreNextScrollEvent=!1,l.scrollBarWidth=l._viewportElement.offsetWidth-l._scrollArea.offsetWidth||15,l.register(c.addDisposableDomListener(l._viewportElement,"scroll",l._onScroll.bind(l))),setTimeout((function(){return l.syncScrollArea()}),0),l}return n(t,e),t.prototype.onThemeChange=function(e){this._viewportElement.style.backgroundColor=e.background.css},t.prototype._refresh=function(e){var t=this;if(e)return this._innerRefresh(),void(null!==this._refreshAnimationFrame&&cancelAnimationFrame(this._refreshAnimationFrame));null===this._refreshAnimationFrame&&(this._refreshAnimationFrame=requestAnimationFrame((function(){return t._innerRefresh()})))},t.prototype._innerRefresh=function(){if(this._charSizeService.height>0){this._currentRowHeight=this._renderService.dimensions.scaledCellHeight/window.devicePixelRatio,this._lastRecordedViewportHeight=this._viewportElement.offsetHeight;var e=Math.round(this._currentRowHeight*this._lastRecordedBufferLength)+(this._lastRecordedViewportHeight-this._renderService.dimensions.canvasHeight);this._lastRecordedBufferHeight!==e&&(this._lastRecordedBufferHeight=e,this._scrollArea.style.height=this._lastRecordedBufferHeight+"px")}var t=this._bufferService.buffer.ydisp*this._currentRowHeight;this._viewportElement.scrollTop!==t&&(this._ignoreNextScrollEvent=!0,this._viewportElement.scrollTop=t),this._refreshAnimationFrame=null},t.prototype.syncScrollArea=function(e){if(void 0===e&&(e=!1),this._lastRecordedBufferLength!==this._bufferService.buffer.lines.length)return this._lastRecordedBufferLength=this._bufferService.buffer.lines.length,void this._refresh(e);if(this._lastRecordedViewportHeight===this._renderService.dimensions.canvasHeight){var t=this._bufferService.buffer.ydisp*this._currentRowHeight;this._lastScrollTop===t&&this._lastScrollTop===this._viewportElement.scrollTop&&this._renderService.dimensions.scaledCellHeight/window.devicePixelRatio===this._currentRowHeight||this._refresh(e)}else this._refresh(e)},t.prototype._onScroll=function(e){if(this._lastScrollTop=this._viewportElement.scrollTop,this._viewportElement.offsetParent)if(this._ignoreNextScrollEvent)this._ignoreNextScrollEvent=!1;else{var t=Math.round(this._lastScrollTop/this._currentRowHeight)-this._bufferService.buffer.ydisp;this._scrollLines(t,!0)}},t.prototype._bubbleScroll=function(e,t){var r=this._viewportElement.scrollTop+this._lastRecordedViewportHeight;return!(t<0&&0!==this._viewportElement.scrollTop||t>0&&r<this._lastRecordedBufferHeight)||(e.cancelable&&e.preventDefault(),!1)},t.prototype.onWheel=function(e){var t=this._getPixelsScrolled(e);return 0!==t&&(this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))},t.prototype._getPixelsScrolled=function(e){if(0===e.deltaY)return 0;var t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_LINE?t*=this._currentRowHeight:e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._currentRowHeight*this._bufferService.rows),t},t.prototype.getLinesScrolled=function(e){if(0===e.deltaY)return 0;var t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_PIXEL?(t/=this._currentRowHeight+0,this._wheelPartialScroll+=t,t=Math.floor(Math.abs(this._wheelPartialScroll))*(this._wheelPartialScroll>0?1:-1),this._wheelPartialScroll%=1):e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._bufferService.rows),t},t.prototype._applyScrollModifier=function(e,t){var r=this._optionsService.options.fastScrollModifier;return"alt"===r&&t.altKey||"ctrl"===r&&t.ctrlKey||"shift"===r&&t.shiftKey?e*this._optionsService.options.fastScrollSensitivity*this._optionsService.options.scrollSensitivity:e*this._optionsService.options.scrollSensitivity},t.prototype.onTouchStart=function(e){this._lastTouchY=e.touches[0].pageY},t.prototype.onTouchMove=function(e){var t=this._lastTouchY-e.touches[0].pageY;return this._lastTouchY=e.touches[0].pageY,0!==t&&(this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))},t=o([s(3,h.IBufferService),s(4,h.IOptionsService),s(5,l.ICharSizeService),s(6,l.IRenderService)],t)}(a.Disposable);t.Viewport=u},function(e,t,r){"use strict";function i(e){return e.replace(/\\r?\\n/g,"\\r")}function n(e,t){return t?"[200~"+e+"[201~":e}function o(e,t,r){e=n(e=i(e),r.decPrivateModes.bracketedPasteMode),r.triggerDataEvent(e,!0),t.value=""}function s(e,t,r){var i=r.getBoundingClientRect(),n=e.clientX-i.left-10,o=e.clientY-i.top-10;t.style.width="20px",t.style.height="20px",t.style.left=n+"px",t.style.top=o+"px",t.style.zIndex="1000",t.focus()}Object.defineProperty(t,"__esModule",{value:!0}),t.rightClickHandler=t.moveTextAreaUnderMouseCursor=t.paste=t.handlePasteEvent=t.copyHandler=t.bracketTextForPaste=t.prepareTextForTerminal=void 0,t.prepareTextForTerminal=i,t.bracketTextForPaste=n,t.copyHandler=function(e,t){e.clipboardData&&e.clipboardData.setData("text/plain",t.selectionText),e.preventDefault()},t.handlePasteEvent=function(e,t,r){e.stopPropagation(),e.clipboardData&&o(e.clipboardData.getData("text/plain"),t,r)},t.paste=o,t.moveTextAreaUnderMouseCursor=s,t.rightClickHandler=function(e,t,r,i,n){s(e,t,r),n&&!i.isClickInSelection(e)&&i.selectWordAtCursor(e),t.value=i.selectionText,t.select()}},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.EscapeSequenceParser=t.VT500_TRANSITION_TABLE=t.TransitionTable=void 0;var o=r(2),s=r(15),a=r(21),c=r(22),l=r(24),h=function(){function e(e){this.table=new Uint8Array(e)}return e.prototype.setDefault=function(e,t){s.fill(this.table,e<<4|t)},e.prototype.add=function(e,t,r,i){this.table[t<<8|e]=r<<4|i},e.prototype.addMany=function(e,t,r,i){for(var n=0;n<e.length;n++)this.table[t<<8|e[n]]=r<<4|i},e}();t.TransitionTable=h;t.VT500_TRANSITION_TABLE=function(){var e=new h(4095),t=Array.apply(null,Array(256)).map((function(e,t){return t})),r=function(e,r){return t.slice(e,r)},i=r(32,127),n=r(0,24);n.push(25),n.push.apply(n,r(28,32));var o,s=r(0,14);for(o in e.setDefault(1,0),e.addMany(i,0,2,0),s)e.addMany([24,26,153,154],o,3,0),e.addMany(r(128,144),o,3,0),e.addMany(r(144,152),o,3,0),e.add(156,o,0,0),e.add(27,o,11,1),e.add(157,o,4,8),e.addMany([152,158,159],o,0,7),e.add(155,o,11,3),e.add(144,o,11,9);return e.addMany(n,0,3,0),e.addMany(n,1,3,1),e.add(127,1,0,1),e.addMany(n,8,0,8),e.addMany(n,3,3,3),e.add(127,3,0,3),e.addMany(n,4,3,4),e.add(127,4,0,4),e.addMany(n,6,3,6),e.addMany(n,5,3,5),e.add(127,5,0,5),e.addMany(n,2,3,2),e.add(127,2,0,2),e.add(93,1,4,8),e.addMany(i,8,5,8),e.add(127,8,5,8),e.addMany([156,27,24,26,7],8,6,0),e.addMany(r(28,32),8,0,8),e.addMany([88,94,95],1,0,7),e.addMany(i,7,0,7),e.addMany(n,7,0,7),e.add(156,7,0,0),e.add(127,7,0,7),e.add(91,1,11,3),e.addMany(r(64,127),3,7,0),e.addMany(r(48,60),3,8,4),e.addMany([60,61,62,63],3,9,4),e.addMany(r(48,60),4,8,4),e.addMany(r(64,127),4,7,0),e.addMany([60,61,62,63],4,0,6),e.addMany(r(32,64),6,0,6),e.add(127,6,0,6),e.addMany(r(64,127),6,0,0),e.addMany(r(32,48),3,9,5),e.addMany(r(32,48),5,9,5),e.addMany(r(48,64),5,0,6),e.addMany(r(64,127),5,7,0),e.addMany(r(32,48),4,9,5),e.addMany(r(32,48),1,9,2),e.addMany(r(32,48),2,9,2),e.addMany(r(48,127),2,10,0),e.addMany(r(48,80),1,10,0),e.addMany(r(81,88),1,10,0),e.addMany([89,90,92],1,10,0),e.addMany(r(96,127),1,10,0),e.add(80,1,11,9),e.addMany(n,9,0,9),e.add(127,9,0,9),e.addMany(r(28,32),9,0,9),e.addMany(r(32,48),9,9,12),e.addMany(r(48,60),9,8,10),e.addMany([60,61,62,63],9,9,10),e.addMany(n,11,0,11),e.addMany(r(32,128),11,0,11),e.addMany(r(28,32),11,0,11),e.addMany(n,10,0,10),e.add(127,10,0,10),e.addMany(r(28,32),10,0,10),e.addMany(r(48,60),10,8,10),e.addMany([60,61,62,63],10,0,11),e.addMany(r(32,48),10,9,12),e.addMany(n,12,0,12),e.add(127,12,0,12),e.addMany(r(28,32),12,0,12),e.addMany(r(32,48),12,9,12),e.addMany(r(48,64),12,0,11),e.addMany(r(64,127),12,12,13),e.addMany(r(64,127),10,12,13),e.addMany(r(64,127),9,12,13),e.addMany(n,13,13,13),e.addMany(i,13,13,13),e.add(127,13,0,13),e.addMany([27,156,24,26],13,14,0),e.add(160,0,2,0),e.add(160,8,5,8),e.add(160,6,0,6),e.add(160,11,0,11),e.add(160,13,13,13),e}();var u=function(e){function r(r){void 0===r&&(r=t.VT500_TRANSITION_TABLE);var i=e.call(this)||this;return i._transitions=r,i.initialState=0,i.currentState=i.initialState,i._params=new a.Params,i._params.addParam(0),i._collect=0,i.precedingCodepoint=0,i._printHandlerFb=function(e,t,r){},i._executeHandlerFb=function(e){},i._csiHandlerFb=function(e,t){},i._escHandlerFb=function(e){},i._errorHandlerFb=function(e){return e},i._printHandler=i._printHandlerFb,i._executeHandlers=Object.create(null),i._csiHandlers=Object.create(null),i._escHandlers=Object.create(null),i._oscParser=new c.OscParser,i._dcsParser=new l.DcsParser,i._errorHandler=i._errorHandlerFb,i.setEscHandler({final:"\\\\"},(function(){})),i}return n(r,e),r.prototype._identifier=function(e,t){void 0===t&&(t=[64,126]);var r=0;if(e.prefix){if(e.prefix.length>1)throw new Error("only one byte as prefix supported");if((r=e.prefix.charCodeAt(0))&&60>r||r>63)throw new Error("prefix must be in range 0x3c .. 0x3f")}if(e.intermediates){if(e.intermediates.length>2)throw new Error("only two bytes as intermediates are supported");for(var i=0;i<e.intermediates.length;++i){var n=e.intermediates.charCodeAt(i);if(32>n||n>47)throw new Error("intermediate must be in range 0x20 .. 0x2f");r<<=8,r|=n}}if(1!==e.final.length)throw new Error("final must be a single byte");var o=e.final.charCodeAt(0);if(t[0]>o||o>t[1])throw new Error("final must be in range "+t[0]+" .. "+t[1]);return r<<=8,r|=o},r.prototype.identToString=function(e){for(var t=[];e;)t.push(String.fromCharCode(255&e)),e>>=8;return t.reverse().join("")},r.prototype.dispose=function(){this._csiHandlers=Object.create(null),this._executeHandlers=Object.create(null),this._escHandlers=Object.create(null),this._oscParser.dispose(),this._dcsParser.dispose()},r.prototype.setPrintHandler=function(e){this._printHandler=e},r.prototype.clearPrintHandler=function(){this._printHandler=this._printHandlerFb},r.prototype.addEscHandler=function(e,t){var r=this._identifier(e,[48,126]);void 0===this._escHandlers[r]&&(this._escHandlers[r]=[]);var i=this._escHandlers[r];return i.push(t),{dispose:function(){var e=i.indexOf(t);-1!==e&&i.splice(e,1)}}},r.prototype.setEscHandler=function(e,t){this._escHandlers[this._identifier(e,[48,126])]=[t]},r.prototype.clearEscHandler=function(e){this._escHandlers[this._identifier(e,[48,126])]&&delete this._escHandlers[this._identifier(e,[48,126])]},r.prototype.setEscHandlerFallback=function(e){this._escHandlerFb=e},r.prototype.setExecuteHandler=function(e,t){this._executeHandlers[e.charCodeAt(0)]=t},r.prototype.clearExecuteHandler=function(e){this._executeHandlers[e.charCodeAt(0)]&&delete this._executeHandlers[e.charCodeAt(0)]},r.prototype.setExecuteHandlerFallback=function(e){this._executeHandlerFb=e},r.prototype.addCsiHandler=function(e,t){var r=this._identifier(e);void 0===this._csiHandlers[r]&&(this._csiHandlers[r]=[]);var i=this._csiHandlers[r];return i.push(t),{dispose:function(){var e=i.indexOf(t);-1!==e&&i.splice(e,1)}}},r.prototype.setCsiHandler=function(e,t){this._csiHandlers[this._identifier(e)]=[t]},r.prototype.clearCsiHandler=function(e){this._csiHandlers[this._identifier(e)]&&delete this._csiHandlers[this._identifier(e)]},r.prototype.setCsiHandlerFallback=function(e){this._csiHandlerFb=e},r.prototype.addDcsHandler=function(e,t){return this._dcsParser.addHandler(this._identifier(e),t)},r.prototype.setDcsHandler=function(e,t){this._dcsParser.setHandler(this._identifier(e),t)},r.prototype.clearDcsHandler=function(e){this._dcsParser.clearHandler(this._identifier(e))},r.prototype.setDcsHandlerFallback=function(e){this._dcsParser.setHandlerFallback(e)},r.prototype.addOscHandler=function(e,t){return this._oscParser.addHandler(e,t)},r.prototype.setOscHandler=function(e,t){this._oscParser.setHandler(e,t)},r.prototype.clearOscHandler=function(e){this._oscParser.clearHandler(e)},r.prototype.setOscHandlerFallback=function(e){this._oscParser.setHandlerFallback(e)},r.prototype.setErrorHandler=function(e){this._errorHandler=e},r.prototype.clearErrorHandler=function(){this._errorHandler=this._errorHandlerFb},r.prototype.reset=function(){this.currentState=this.initialState,this._oscParser.reset(),this._dcsParser.reset(),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0},r.prototype.parse=function(e,t){for(var r=0,i=0,n=this.currentState,o=this._oscParser,s=this._dcsParser,a=this._collect,c=this._params,l=this._transitions.table,h=0;h<t;++h){switch((i=l[n<<8|((r=e[h])<160?r:160)])>>4){case 2:for(var u=h+1;;++u){if(u>=t||(r=e[u])<32||r>126&&r<160){this._printHandler(e,h,u),h=u-1;break}if(++u>=t||(r=e[u])<32||r>126&&r<160){this._printHandler(e,h,u),h=u-1;break}if(++u>=t||(r=e[u])<32||r>126&&r<160){this._printHandler(e,h,u),h=u-1;break}if(++u>=t||(r=e[u])<32||r>126&&r<160){this._printHandler(e,h,u),h=u-1;break}}break;case 3:this._executeHandlers[r]?this._executeHandlers[r]():this._executeHandlerFb(r),this.precedingCodepoint=0;break;case 0:break;case 1:if(this._errorHandler({position:h,code:r,currentState:n,collect:a,params:c,abort:!1}).abort)return;break;case 7:for(var f=this._csiHandlers[a<<8|r],_=f?f.length-1:-1;_>=0&&!1===f[_](c);_--);_<0&&this._csiHandlerFb(a<<8|r,c),this.precedingCodepoint=0;break;case 8:do{switch(r){case 59:c.addParam(0);break;case 58:c.addSubParam(-1);break;default:c.addDigit(r-48)}}while(++h<t&&(r=e[h])>47&&r<60);h--;break;case 9:a<<=8,a|=r;break;case 10:for(var d=this._escHandlers[a<<8|r],p=d?d.length-1:-1;p>=0&&!1===d[p]();p--);p<0&&this._escHandlerFb(a<<8|r),this.precedingCodepoint=0;break;case 11:c.reset(),c.addParam(0),a=0;break;case 12:s.hook(a<<8|r,c);break;case 13:for(var v=h+1;;++v)if(v>=t||24===(r=e[v])||26===r||27===r||r>127&&r<160){s.put(e,h,v),h=v-1;break}break;case 14:s.unhook(24!==r&&26!==r),27===r&&(i|=1),c.reset(),c.addParam(0),a=0,this.precedingCodepoint=0;break;case 4:o.start();break;case 5:for(var g=h+1;;g++)if(g>=t||(r=e[g])<32||r>127&&r<=159){o.put(e,h,g),h=g-1;break}break;case 6:o.end(24!==r&&26!==r),27===r&&(i|=1),c.reset(),c.addParam(0),a=0,this.precedingCodepoint=0}n=15&i}this._collect=a,this.currentState=n},r}(o.Disposable);t.EscapeSequenceParser=u},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.Renderer=void 0;var a=r(41),c=r(47),l=r(48),h=r(49),u=r(29),f=r(2),_=r(5),d=r(1),p=r(25),v=r(0),g=1,y=function(e){function t(t,r,i,n,o,s,f,_,d){var p=e.call(this)||this;p._colors=t,p._screenElement=r,p._bufferService=o,p._charSizeService=s,p._optionsService=f,p._id=g++,p._onRequestRedraw=new v.EventEmitter;var y=p._optionsService.options.allowTransparency;return p._characterJoinerRegistry=new u.CharacterJoinerRegistry(p._bufferService),p._renderLayers=[new a.TextRenderLayer(p._screenElement,0,p._colors,p._characterJoinerRegistry,y,p._id,p._bufferService,f),new c.SelectionRenderLayer(p._screenElement,1,p._colors,p._id,p._bufferService,f),new h.LinkRenderLayer(p._screenElement,2,p._colors,p._id,i,n,p._bufferService,f),new l.CursorRenderLayer(p._screenElement,3,p._colors,p._id,p._onRequestRedraw,p._bufferService,f,_,d)],p.dimensions={scaledCharWidth:0,scaledCharHeight:0,scaledCellWidth:0,scaledCellHeight:0,scaledCharLeft:0,scaledCharTop:0,scaledCanvasWidth:0,scaledCanvasHeight:0,canvasWidth:0,canvasHeight:0,actualCellWidth:0,actualCellHeight:0},p._devicePixelRatio=window.devicePixelRatio,p._updateDimensions(),p.onOptionsChanged(),p}return n(t,e),Object.defineProperty(t.prototype,"onRequestRedraw",{get:function(){return this._onRequestRedraw.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){for(var t=0,r=this._renderLayers;t<r.length;t++){r[t].dispose()}e.prototype.dispose.call(this),p.removeTerminalFromCache(this._id)},t.prototype.onDevicePixelRatioChange=function(){this._devicePixelRatio!==window.devicePixelRatio&&(this._devicePixelRatio=window.devicePixelRatio,this.onResize(this._bufferService.cols,this._bufferService.rows))},t.prototype.setColors=function(e){this._colors=e;for(var t=0,r=this._renderLayers;t<r.length;t++){var i=r[t];i.setColors(this._colors),i.reset()}},t.prototype.onResize=function(e,t){this._updateDimensions();for(var r=0,i=this._renderLayers;r<i.length;r++){i[r].resize(this.dimensions)}this._screenElement.style.width=this.dimensions.canvasWidth+"px",this._screenElement.style.height=this.dimensions.canvasHeight+"px"},t.prototype.onCharSizeChanged=function(){this.onResize(this._bufferService.cols,this._bufferService.rows)},t.prototype.onBlur=function(){this._runOperation((function(e){return e.onBlur()}))},t.prototype.onFocus=function(){this._runOperation((function(e){return e.onFocus()}))},t.prototype.onSelectionChanged=function(e,t,r){void 0===r&&(r=!1),this._runOperation((function(i){return i.onSelectionChanged(e,t,r)}))},t.prototype.onCursorMove=function(){this._runOperation((function(e){return e.onCursorMove()}))},t.prototype.onOptionsChanged=function(){this._runOperation((function(e){return e.onOptionsChanged()}))},t.prototype.clear=function(){this._runOperation((function(e){return e.reset()}))},t.prototype._runOperation=function(e){for(var t=0,r=this._renderLayers;t<r.length;t++){e(r[t])}},t.prototype.renderRows=function(e,t){for(var r=0,i=this._renderLayers;r<i.length;r++){i[r].onGridChanged(e,t)}},t.prototype._updateDimensions=function(){this._charSizeService.hasValidSize&&(this.dimensions.scaledCharWidth=Math.floor(this._charSizeService.width*window.devicePixelRatio),this.dimensions.scaledCharHeight=Math.ceil(this._charSizeService.height*window.devicePixelRatio),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._optionsService.options.lineHeight),this.dimensions.scaledCharTop=1===this._optionsService.options.lineHeight?0:Math.round((this.dimensions.scaledCellHeight-this.dimensions.scaledCharHeight)/2),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._optionsService.options.letterSpacing),this.dimensions.scaledCharLeft=Math.floor(this._optionsService.options.letterSpacing/2),this.dimensions.scaledCanvasHeight=this._bufferService.rows*this.dimensions.scaledCellHeight,this.dimensions.scaledCanvasWidth=this._bufferService.cols*this.dimensions.scaledCellWidth,this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/window.devicePixelRatio),this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/window.devicePixelRatio),this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._bufferService.rows,this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._bufferService.cols)},t.prototype.registerCharacterJoiner=function(e){return this._characterJoinerRegistry.registerCharacterJoiner(e)},t.prototype.deregisterCharacterJoiner=function(e){return this._characterJoinerRegistry.deregisterCharacterJoiner(e)},t=o([s(4,d.IBufferService),s(5,_.ICharSizeService),s(6,d.IOptionsService),s(7,d.ICoreService),s(8,_.ICoreBrowserService)],t)}(f.Disposable);t.Renderer=y},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.TextRenderLayer=void 0;var o=r(42),s=r(13),a=r(6),c=r(3),l=r(29),h=r(4),u=function(e){function t(t,r,i,n,s,a,c,l){var u=e.call(this,t,"text",r,s,i,a,c,l)||this;return u._characterWidth=0,u._characterFont="",u._characterOverlapCache={},u._workCell=new h.CellData,u._state=new o.GridCache,u._characterJoinerRegistry=n,u}return n(t,e),t.prototype.resize=function(t){e.prototype.resize.call(this,t);var r=this._getFont(!1,!1);this._characterWidth===t.scaledCharWidth&&this._characterFont===r||(this._characterWidth=t.scaledCharWidth,this._characterFont=r,this._characterOverlapCache={}),this._state.clear(),this._state.resize(this._bufferService.cols,this._bufferService.rows)},t.prototype.reset=function(){this._state.clear(),this._clearAll()},t.prototype._forEachCell=function(e,t,r,i){for(var n=e;n<=t;n++)for(var o=n+this._bufferService.buffer.ydisp,s=this._bufferService.buffer.lines.get(o),a=r?r.getJoinedCharacters(o):[],h=0;h<this._bufferService.cols;h++){s.loadCell(h,this._workCell);var u=this._workCell,f=!1,_=h;if(0!==u.getWidth()){if(a.length>0&&h===a[0][0]){f=!0;var d=a.shift();u=new l.JoinedCellData(this._workCell,s.translateToString(!0,d[0],d[1]),d[1]-d[0]),_=d[1]-1}!f&&this._isOverlapping(u)&&_<s.length-1&&s.getCodePoint(_+1)===c.NULL_CELL_CODE&&(u.content&=-12582913,u.content|=2<<22),i(u,h,n),h=_}}},t.prototype._drawBackground=function(e,t){var r=this,i=this._ctx,n=this._bufferService.cols,o=0,s=0,c=null;i.save(),this._forEachCell(e,t,null,(function(e,t,l){var h=null;e.isInverse()?h=e.isFgDefault()?r._colors.foreground.css:e.isFgRGB()?"rgb("+a.AttributeData.toColorRGB(e.getFgColor()).join(",")+")":r._colors.ansi[e.getFgColor()].css:e.isBgRGB()?h="rgb("+a.AttributeData.toColorRGB(e.getBgColor()).join(",")+")":e.isBgPalette()&&(h=r._colors.ansi[e.getBgColor()].css),null===c&&(o=t,s=l),l!==s?(i.fillStyle=c||"",r._fillCells(o,s,n-o,1),o=t,s=l):c!==h&&(i.fillStyle=c||"",r._fillCells(o,s,t-o,1),o=t,s=l),c=h})),null!==c&&(i.fillStyle=c,this._fillCells(o,s,n-o,1)),i.restore()},t.prototype._drawForeground=function(e,t){var r=this;this._forEachCell(e,t,this._characterJoinerRegistry,(function(e,t,i){if(!e.isInvisible()&&(r._drawChars(e,t,i),e.isUnderline())){if(r._ctx.save(),e.isInverse())if(e.isBgDefault())r._ctx.fillStyle=r._colors.background.css;else if(e.isBgRGB())r._ctx.fillStyle="rgb("+a.AttributeData.toColorRGB(e.getBgColor()).join(",")+")";else{var n=e.getBgColor();r._optionsService.options.drawBoldTextInBrightColors&&e.isBold()&&n<8&&(n+=8),r._ctx.fillStyle=r._colors.ansi[n].css}else if(e.isFgDefault())r._ctx.fillStyle=r._colors.foreground.css;else if(e.isFgRGB())r._ctx.fillStyle="rgb("+a.AttributeData.toColorRGB(e.getFgColor()).join(",")+")";else{var o=e.getFgColor();r._optionsService.options.drawBoldTextInBrightColors&&e.isBold()&&o<8&&(o+=8),r._ctx.fillStyle=r._colors.ansi[o].css}r._fillBottomLineAtCells(t,i,e.getWidth()),r._ctx.restore()}}))},t.prototype.onGridChanged=function(e,t){0!==this._state.cache.length&&(this._charAtlas&&this._charAtlas.beginFrame(),this._clearCells(0,e,this._bufferService.cols,t-e+1),this._drawBackground(e,t),this._drawForeground(e,t))},t.prototype.onOptionsChanged=function(){this._setTransparency(this._optionsService.options.allowTransparency)},t.prototype._isOverlapping=function(e){if(1!==e.getWidth())return!1;if(e.getCode()<256)return!1;var t=e.getChars();if(this._characterOverlapCache.hasOwnProperty(t))return this._characterOverlapCache[t];this._ctx.save(),this._ctx.font=this._characterFont;var r=Math.floor(this._ctx.measureText(t).width)>this._characterWidth;return this._ctx.restore(),this._characterOverlapCache[t]=r,r},t}(s.BaseRenderLayer);t.TextRenderLayer=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GridCache=void 0;var i=function(){function e(){this.cache=[]}return e.prototype.resize=function(e,t){for(var r=0;r<e;r++){this.cache.length<=r&&this.cache.push([]);for(var i=this.cache[r].length;i<t;i++)this.cache[r].push(void 0);this.cache[r].length=t}this.cache.length=e},e.prototype.clear=function(){for(var e=0;e<this.cache.length;e++)for(var t=0;t<this.cache[e].length;t++)this.cache[e][t]=void 0},e}();t.GridCache=i},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.NoneCharAtlas=t.DynamicCharAtlas=t.getGlyphCacheKey=void 0;var o=r(9),s=r(44),a=r(27),c=r(46),l=r(11),h=r(28),u=r(10),f={css:"rgba(0, 0, 0, 0)",rgba:0};function _(e){return e.code<<21|e.bg<<12|e.fg<<3|(e.bold?0:4)+(e.dim?0:2)+(e.italic?0:1)}t.getGlyphCacheKey=_;var d=function(e){function t(t,r){var i=e.call(this)||this;i._config=r,i._drawToCacheCount=0,i._glyphsWaitingOnBitmap=[],i._bitmapCommitTimeout=null,i._bitmap=null,i._cacheCanvas=t.createElement("canvas"),i._cacheCanvas.width=1024,i._cacheCanvas.height=1024,i._cacheCtx=h.throwIfFalsy(i._cacheCanvas.getContext("2d",{alpha:!0}));var n=t.createElement("canvas");n.width=i._config.scaledCharWidth,n.height=i._config.scaledCharHeight,i._tmpCtx=h.throwIfFalsy(n.getContext("2d",{alpha:i._config.allowTransparency})),i._width=Math.floor(1024/i._config.scaledCharWidth),i._height=Math.floor(1024/i._config.scaledCharHeight);var o=i._width*i._height;return i._cacheMap=new c.LRUMap(o),i._cacheMap.prealloc(o),i}return n(t,e),t.prototype.dispose=function(){null!==this._bitmapCommitTimeout&&(window.clearTimeout(this._bitmapCommitTimeout),this._bitmapCommitTimeout=null)},t.prototype.beginFrame=function(){this._drawToCacheCount=0},t.prototype.draw=function(e,t,r,i){if(32===t.code)return!0;if(!this._canCache(t))return!1;var n=_(t),o=this._cacheMap.get(n);if(null!=o)return this._drawFromCache(e,o,r,i),!0;if(this._drawToCacheCount<100){var s=void 0;s=this._cacheMap.size<this._cacheMap.capacity?this._cacheMap.size:this._cacheMap.peek().index;var a=this._drawToCache(t,s);return this._cacheMap.set(n,a),this._drawFromCache(e,a,r,i),!0}return!1},t.prototype._canCache=function(e){return e.code<256},t.prototype._toCoordinateX=function(e){return e%this._width*this._config.scaledCharWidth},t.prototype._toCoordinateY=function(e){return Math.floor(e/this._width)*this._config.scaledCharHeight},t.prototype._drawFromCache=function(e,t,r,i){if(!t.isEmpty){var n=this._toCoordinateX(t.index),o=this._toCoordinateY(t.index);e.drawImage(t.inBitmap?this._bitmap:this._cacheCanvas,n,o,this._config.scaledCharWidth,this._config.scaledCharHeight,r,i,this._config.scaledCharWidth,this._config.scaledCharHeight)}},t.prototype._getColorFromAnsiIndex=function(e){return e<this._config.colors.ansi.length?this._config.colors.ansi[e]:a.DEFAULT_ANSI_COLORS[e]},t.prototype._getBackgroundColor=function(e){return this._config.allowTransparency?f:e.bg===o.INVERTED_DEFAULT_COLOR?this._config.colors.foreground:e.bg<256?this._getColorFromAnsiIndex(e.bg):this._config.colors.background},t.prototype._getForegroundColor=function(e){return e.fg===o.INVERTED_DEFAULT_COLOR?u.color.opaque(this._config.colors.background):e.fg<256?this._getColorFromAnsiIndex(e.fg):this._config.colors.foreground},t.prototype._drawToCache=function(e,t){this._drawToCacheCount++,this._tmpCtx.save();var r=this._getBackgroundColor(e);this._tmpCtx.globalCompositeOperation="copy",this._tmpCtx.fillStyle=r.css,this._tmpCtx.fillRect(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),this._tmpCtx.globalCompositeOperation="source-over";var i=e.bold?this._config.fontWeightBold:this._config.fontWeight,n=e.italic?"italic":"";this._tmpCtx.font=n+" "+i+" "+this._config.fontSize*this._config.devicePixelRatio+"px "+this._config.fontFamily,this._tmpCtx.textBaseline="middle",this._tmpCtx.fillStyle=this._getForegroundColor(e).css,e.dim&&(this._tmpCtx.globalAlpha=o.DIM_OPACITY),this._tmpCtx.fillText(e.chars,0,this._config.scaledCharHeight/2),this._tmpCtx.restore();var s=this._tmpCtx.getImageData(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),a=!1;this._config.allowTransparency||(a=function(e,t){for(var r=!0,i=t.rgba>>>24,n=t.rgba>>>16&255,o=t.rgba>>>8&255,s=0;s<e.data.length;s+=4)e.data[s]===i&&e.data[s+1]===n&&e.data[s+2]===o?e.data[s+3]=0:r=!1;return r}(s,r));var c=this._toCoordinateX(t),l=this._toCoordinateY(t);this._cacheCtx.putImageData(s,c,l);var h={index:t,isEmpty:a,inBitmap:!1};return this._addGlyphToBitmap(h),h},t.prototype._addGlyphToBitmap=function(e){var t=this;!("createImageBitmap"in window)||l.isFirefox||l.isSafari||(this._glyphsWaitingOnBitmap.push(e),null===this._bitmapCommitTimeout&&(this._bitmapCommitTimeout=window.setTimeout((function(){return t._generateBitmap()}),100)))},t.prototype._generateBitmap=function(){var e=this,t=this._glyphsWaitingOnBitmap;this._glyphsWaitingOnBitmap=[],window.createImageBitmap(this._cacheCanvas).then((function(r){e._bitmap=r;for(var i=0;i<t.length;i++){t[i].inBitmap=!0}})),this._bitmapCommitTimeout=null},t}(s.BaseCharAtlas);t.DynamicCharAtlas=d;var p=function(e){function t(t,r){return e.call(this)||this}return n(t,e),t.prototype.draw=function(e,t,r,i){return!1},t}(s.BaseCharAtlas);t.NoneCharAtlas=p},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseCharAtlas=void 0;var i=function(){function e(){this._didWarmUp=!1}return e.prototype.dispose=function(){},e.prototype.warmUp=function(){this._didWarmUp||(this._doWarmUp(),this._didWarmUp=!0)},e.prototype._doWarmUp=function(){},e.prototype.beginFrame=function(){},e}();t.BaseCharAtlas=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColorContrastCache=void 0;var i=function(){function e(){this._color={},this._rgba={}}return e.prototype.clear=function(){this._color={},this._rgba={}},e.prototype.setCss=function(e,t,r){this._rgba[e]||(this._rgba[e]={}),this._rgba[e][t]=r},e.prototype.getCss=function(e,t){return this._rgba[e]?this._rgba[e][t]:void 0},e.prototype.setColor=function(e,t,r){this._color[e]||(this._color[e]={}),this._color[e][t]=r},e.prototype.getColor=function(e,t){return this._color[e]?this._color[e][t]:void 0},e}();t.ColorContrastCache=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LRUMap=void 0;var i=function(){function e(e){this.capacity=e,this._map={},this._head=null,this._tail=null,this._nodePool=[],this.size=0}return e.prototype._unlinkNode=function(e){var t=e.prev,r=e.next;e===this._head&&(this._head=r),e===this._tail&&(this._tail=t),null!==t&&(t.next=r),null!==r&&(r.prev=t)},e.prototype._appendNode=function(e){var t=this._tail;null!==t&&(t.next=e),e.prev=t,e.next=null,this._tail=e,null===this._head&&(this._head=e)},e.prototype.prealloc=function(e){for(var t=this._nodePool,r=0;r<e;r++)t.push({prev:null,next:null,key:null,value:null})},e.prototype.get=function(e){var t=this._map[e];return void 0!==t?(this._unlinkNode(t),this._appendNode(t),t.value):null},e.prototype.peekValue=function(e){var t=this._map[e];return void 0!==t?t.value:null},e.prototype.peek=function(){var e=this._head;return null===e?null:e.value},e.prototype.set=function(e,t){var r=this._map[e];if(void 0!==r)r=this._map[e],this._unlinkNode(r),r.value=t;else if(this.size>=this.capacity)r=this._head,this._unlinkNode(r),delete this._map[r.key],r.key=e,r.value=t,this._map[e]=r;else{var i=this._nodePool;i.length>0?((r=i.pop()).key=e,r.value=t):r={prev:null,next:null,key:e,value:t},this._map[e]=r,this.size++}this._appendNode(r)},e}();t.LRUMap=i},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionRenderLayer=void 0;var o=function(e){function t(t,r,i,n,o,s){var a=e.call(this,t,"selection",r,!0,i,n,o,s)||this;return a._clearState(),a}return n(t,e),t.prototype._clearState=function(){this._state={start:void 0,end:void 0,columnSelectMode:void 0,ydisp:void 0}},t.prototype.resize=function(t){e.prototype.resize.call(this,t),this._clearState()},t.prototype.reset=function(){this._state.start&&this._state.end&&(this._clearState(),this._clearAll())},t.prototype.onSelectionChanged=function(e,t,r){if(this._didStateChange(e,t,r,this._bufferService.buffer.ydisp))if(this._clearAll(),e&&t){var i=e[1]-this._bufferService.buffer.ydisp,n=t[1]-this._bufferService.buffer.ydisp,o=Math.max(i,0),s=Math.min(n,this._bufferService.rows-1);if(!(o>=this._bufferService.rows||s<0)){if(this._ctx.fillStyle=this._colors.selectionTransparent.css,r){var a=e[0],c=t[0]-a,l=s-o+1;this._fillCells(a,o,c,l)}else{a=i===o?e[0]:0;var h=o===s?t[0]:this._bufferService.cols;this._fillCells(a,o,h-a,1);var u=Math.max(s-o-1,0);if(this._fillCells(0,o+1,this._bufferService.cols,u),o!==s){var f=n===s?t[0]:this._bufferService.cols;this._fillCells(0,s,f,1)}}this._state.start=[e[0],e[1]],this._state.end=[t[0],t[1]],this._state.columnSelectMode=r,this._state.ydisp=this._bufferService.buffer.ydisp}}else this._clearState()},t.prototype._didStateChange=function(e,t,r,i){return!this._areCoordinatesEqual(e,this._state.start)||!this._areCoordinatesEqual(t,this._state.end)||r!==this._state.columnSelectMode||i!==this._state.ydisp},t.prototype._areCoordinatesEqual=function(e,t){return!(!e||!t)&&(e[0]===t[0]&&e[1]===t[1])},t}(r(13).BaseRenderLayer);t.SelectionRenderLayer=o},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.CursorRenderLayer=void 0;var o=r(13),s=r(4),a=function(e){function t(t,r,i,n,o,a,c,l,h){var u=e.call(this,t,"cursor",r,!0,i,n,a,c)||this;return u._onRequestRedraw=o,u._coreService=l,u._coreBrowserService=h,u._cell=new s.CellData,u._state={x:0,y:0,isFocused:!1,style:"",width:0},u._cursorRenderers={bar:u._renderBarCursor.bind(u),block:u._renderBlockCursor.bind(u),underline:u._renderUnderlineCursor.bind(u)},u}return n(t,e),t.prototype.resize=function(t){e.prototype.resize.call(this,t),this._state={x:0,y:0,isFocused:!1,style:"",width:0}},t.prototype.reset=function(){this._clearCursor(),this._cursorBlinkStateManager&&(this._cursorBlinkStateManager.dispose(),this._cursorBlinkStateManager=void 0,this.onOptionsChanged())},t.prototype.onBlur=function(){this._cursorBlinkStateManager&&this._cursorBlinkStateManager.pause(),this._onRequestRedraw.fire({start:this._bufferService.buffer.y,end:this._bufferService.buffer.y})},t.prototype.onFocus=function(){this._cursorBlinkStateManager?this._cursorBlinkStateManager.resume():this._onRequestRedraw.fire({start:this._bufferService.buffer.y,end:this._bufferService.buffer.y})},t.prototype.onOptionsChanged=function(){var e,t=this;this._optionsService.options.cursorBlink?this._cursorBlinkStateManager||(this._cursorBlinkStateManager=new c(this._coreBrowserService.isFocused,(function(){t._render(!0)}))):(null===(e=this._cursorBlinkStateManager)||void 0===e||e.dispose(),this._cursorBlinkStateManager=void 0),this._onRequestRedraw.fire({start:this._bufferService.buffer.y,end:this._bufferService.buffer.y})},t.prototype.onCursorMove=function(){this._cursorBlinkStateManager&&this._cursorBlinkStateManager.restartBlinkAnimation()},t.prototype.onGridChanged=function(e,t){!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isPaused?this._render(!1):this._cursorBlinkStateManager.restartBlinkAnimation()},t.prototype._render=function(e){if(this._coreService.isCursorInitialized&&!this._coreService.isCursorHidden){var t=this._bufferService.buffer.ybase+this._bufferService.buffer.y,r=t-this._bufferService.buffer.ydisp;if(r<0||r>=this._bufferService.rows)this._clearCursor();else{var i=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1);if(this._bufferService.buffer.lines.get(t).loadCell(i,this._cell),void 0!==this._cell.content){if(!this._coreBrowserService.isFocused){this._clearCursor(),this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css;var n=this._optionsService.options.cursorStyle;return n&&"block"!==n?this._cursorRenderers[n](i,r,this._cell):this._renderBlurCursor(i,r,this._cell),this._ctx.restore(),this._state.x=i,this._state.y=r,this._state.isFocused=!1,this._state.style=n,void(this._state.width=this._cell.getWidth())}if(!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isCursorVisible){if(this._state){if(this._state.x===i&&this._state.y===r&&this._state.isFocused===this._coreBrowserService.isFocused&&this._state.style===this._optionsService.options.cursorStyle&&this._state.width===this._cell.getWidth())return;this._clearCursor()}this._ctx.save(),this._cursorRenderers[this._optionsService.options.cursorStyle||"block"](i,r,this._cell),this._ctx.restore(),this._state.x=i,this._state.y=r,this._state.isFocused=!1,this._state.style=this._optionsService.options.cursorStyle,this._state.width=this._cell.getWidth()}else this._clearCursor()}}}else this._clearCursor()},t.prototype._clearCursor=function(){this._state&&(this._clearCells(this._state.x,this._state.y,this._state.width,1),this._state={x:0,y:0,isFocused:!1,style:"",width:0})},t.prototype._renderBarCursor=function(e,t,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillLeftLineAtCell(e,t,this._optionsService.options.cursorWidth),this._ctx.restore()},t.prototype._renderBlockCursor=function(e,t,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillCells(e,t,r.getWidth(),1),this._ctx.fillStyle=this._colors.cursorAccent.css,this._fillCharTrueColor(r,e,t),this._ctx.restore()},t.prototype._renderUnderlineCursor=function(e,t,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillBottomLineAtCells(e,t),this._ctx.restore()},t.prototype._renderBlurCursor=function(e,t,r){this._ctx.save(),this._ctx.strokeStyle=this._colors.cursor.css,this._strokeRectAtCell(e,t,r.getWidth(),1),this._ctx.restore()},t}(o.BaseRenderLayer);t.CursorRenderLayer=a;var c=function(){function e(e,t){this._renderCallback=t,this.isCursorVisible=!0,e&&this._restartInterval()}return Object.defineProperty(e.prototype,"isPaused",{get:function(){return!(this._blinkStartTimeout||this._blinkInterval)},enumerable:!1,configurable:!0}),e.prototype.dispose=function(){this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=void 0),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0)},e.prototype.restartBlinkAnimation=function(){var e=this;this.isPaused||(this._animationTimeRestarted=Date.now(),this.isCursorVisible=!0,this._animationFrame||(this._animationFrame=window.requestAnimationFrame((function(){e._renderCallback(),e._animationFrame=void 0}))))},e.prototype._restartInterval=function(e){var t=this;void 0===e&&(e=600),this._blinkInterval&&window.clearInterval(this._blinkInterval),this._blinkStartTimeout=window.setTimeout((function(){if(t._animationTimeRestarted){var e=600-(Date.now()-t._animationTimeRestarted);if(t._animationTimeRestarted=void 0,e>0)return void t._restartInterval(e)}t.isCursorVisible=!1,t._animationFrame=window.requestAnimationFrame((function(){t._renderCallback(),t._animationFrame=void 0})),t._blinkInterval=window.setInterval((function(){if(t._animationTimeRestarted){var e=600-(Date.now()-t._animationTimeRestarted);return t._animationTimeRestarted=void 0,void t._restartInterval(e)}t.isCursorVisible=!t.isCursorVisible,t._animationFrame=window.requestAnimationFrame((function(){t._renderCallback(),t._animationFrame=void 0}))}),600)}),e)},e.prototype.pause=function(){this.isCursorVisible=!0,this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=void 0),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0)},e.prototype.resume=function(){this.pause(),this._animationTimeRestarted=void 0,this._restartInterval(),this.restartBlinkAnimation()},e}()},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.LinkRenderLayer=void 0;var o=r(13),s=r(9),a=r(26),c=function(e){function t(t,r,i,n,o,s,a,c){var l=e.call(this,t,"link",r,!0,i,n,a,c)||this;return o.onShowLinkUnderline((function(e){return l._onShowLinkUnderline(e)})),o.onHideLinkUnderline((function(e){return l._onHideLinkUnderline(e)})),s.onShowLinkUnderline((function(e){return l._onShowLinkUnderline(e)})),s.onHideLinkUnderline((function(e){return l._onHideLinkUnderline(e)})),l}return n(t,e),t.prototype.resize=function(t){e.prototype.resize.call(this,t),this._state=void 0},t.prototype.reset=function(){this._clearCurrentLink()},t.prototype._clearCurrentLink=function(){if(this._state){this._clearCells(this._state.x1,this._state.y1,this._state.cols-this._state.x1,1);var e=this._state.y2-this._state.y1-1;e>0&&this._clearCells(0,this._state.y1+1,this._state.cols,e),this._clearCells(0,this._state.y2,this._state.x2,1),this._state=void 0}},t.prototype._onShowLinkUnderline=function(e){if(e.fg===s.INVERTED_DEFAULT_COLOR?this._ctx.fillStyle=this._colors.background.css:e.fg&&a.is256Color(e.fg)?this._ctx.fillStyle=this._colors.ansi[e.fg].css:this._ctx.fillStyle=this._colors.foreground.css,e.y1===e.y2)this._fillBottomLineAtCells(e.x1,e.y1,e.x2-e.x1);else{this._fillBottomLineAtCells(e.x1,e.y1,e.cols-e.x1);for(var t=e.y1+1;t<e.y2;t++)this._fillBottomLineAtCells(0,t,e.cols);this._fillBottomLineAtCells(0,e.y2,e.x2)}this._state=e},t.prototype._onHideLinkUnderline=function(e){this._clearCurrentLink()},t}(o.BaseRenderLayer);t.LinkRenderLayer=c},function(e,t,r){"use strict";var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseZone=t.Linkifier=void 0;var o=r(0),s=r(1),a=function(){function e(e,t,r){this._bufferService=e,this._logService=t,this._unicodeService=r,this._linkMatchers=[],this._nextLinkMatcherId=0,this._onShowLinkUnderline=new o.EventEmitter,this._onHideLinkUnderline=new o.EventEmitter,this._onLinkTooltip=new o.EventEmitter,this._rowsToLinkify={start:void 0,end:void 0}}return Object.defineProperty(e.prototype,"onShowLinkUnderline",{get:function(){return this._onShowLinkUnderline.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onHideLinkUnderline",{get:function(){return this._onHideLinkUnderline.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onLinkTooltip",{get:function(){return this._onLinkTooltip.event},enumerable:!1,configurable:!0}),e.prototype.attachToDom=function(e,t){this._element=e,this._mouseZoneManager=t},e.prototype.linkifyRows=function(t,r){var i=this;this._mouseZoneManager&&(void 0===this._rowsToLinkify.start||void 0===this._rowsToLinkify.end?(this._rowsToLinkify.start=t,this._rowsToLinkify.end=r):(this._rowsToLinkify.start=Math.min(this._rowsToLinkify.start,t),this._rowsToLinkify.end=Math.max(this._rowsToLinkify.end,r)),this._mouseZoneManager.clearAll(t,r),this._rowsTimeoutId&&clearTimeout(this._rowsTimeoutId),this._rowsTimeoutId=setTimeout((function(){return i._linkifyRows()}),e._timeBeforeLatency))},e.prototype._linkifyRows=function(){this._rowsTimeoutId=void 0;var e=this._bufferService.buffer;if(void 0!==this._rowsToLinkify.start&&void 0!==this._rowsToLinkify.end){var t=e.ydisp+this._rowsToLinkify.start;if(!(t>=e.lines.length)){for(var r=e.ydisp+Math.min(this._rowsToLinkify.end,this._bufferService.rows)+1,i=Math.ceil(2e3/this._bufferService.cols),n=this._bufferService.buffer.iterator(!1,t,r,i,i);n.hasNext();)for(var o=n.next(),s=0;s<this._linkMatchers.length;s++)this._doLinkifyRow(o.range.first,o.content,this._linkMatchers[s]);this._rowsToLinkify.start=void 0,this._rowsToLinkify.end=void 0}}else this._logService.debug("_rowToLinkify was unset before _linkifyRows was called")},e.prototype.registerLinkMatcher=function(e,t,r){if(void 0===r&&(r={}),!t)throw new Error("handler must be defined");var i={id:this._nextLinkMatcherId++,regex:e,handler:t,matchIndex:r.matchIndex,validationCallback:r.validationCallback,hoverTooltipCallback:r.tooltipCallback,hoverLeaveCallback:r.leaveCallback,willLinkActivate:r.willLinkActivate,priority:r.priority||0};return this._addLinkMatcherToList(i),i.id},e.prototype._addLinkMatcherToList=function(e){if(0!==this._linkMatchers.length){for(var t=this._linkMatchers.length-1;t>=0;t--)if(e.priority<=this._linkMatchers[t].priority)return void this._linkMatchers.splice(t+1,0,e);this._linkMatchers.splice(0,0,e)}else this._linkMatchers.push(e)},e.prototype.deregisterLinkMatcher=function(e){for(var t=0;t<this._linkMatchers.length;t++)if(this._linkMatchers[t].id===e)return this._linkMatchers.splice(t,1),!0;return!1},e.prototype._doLinkifyRow=function(e,t,r){for(var i,n=this,o=new RegExp(r.regex.source,(r.regex.flags||"")+"g"),s=-1,a=function(){var a=i["number"!=typeof r.matchIndex?0:r.matchIndex];if(!a)return c._logService.debug("match found without corresponding matchIndex",i,r),"break";if(s=t.indexOf(a,s+1),o.lastIndex=s+a.length,s<0)return"break";var l=c._bufferService.buffer.stringIndexToBufferIndex(e,s);if(l[0]<0)return"break";var h=c._bufferService.buffer.lines.get(l[0]);if(!h)return"break";var u=h.getFg(l[1]),f=u?u>>9&511:void 0;r.validationCallback?r.validationCallback(a,(function(e){n._rowsTimeoutId||e&&n._addLink(l[1],l[0]-n._bufferService.buffer.ydisp,a,r,f)})):c._addLink(l[1],l[0]-c._bufferService.buffer.ydisp,a,r,f)},c=this;null!==(i=o.exec(t));){if("break"===a())break}},e.prototype._addLink=function(e,t,r,i,n){var o=this;if(this._mouseZoneManager&&this._element){var s=this._unicodeService.getStringCellWidth(r),a=e%this._bufferService.cols,l=t+Math.floor(e/this._bufferService.cols),h=(a+s)%this._bufferService.cols,u=l+Math.floor((a+s)/this._bufferService.cols);0===h&&(h=this._bufferService.cols,u--),this._mouseZoneManager.add(new c(a+1,l+1,h+1,u+1,(function(e){if(i.handler)return i.handler(e,r);var t=window.open();t?(t.opener=null,t.location.href=r):console.warn("Opening link blocked as opener could not be cleared")}),(function(){o._onShowLinkUnderline.fire(o._createLinkHoverEvent(a,l,h,u,n)),o._element.classList.add("xterm-cursor-pointer")}),(function(e){o._onLinkTooltip.fire(o._createLinkHoverEvent(a,l,h,u,n)),i.hoverTooltipCallback&&i.hoverTooltipCallback(e,r,{start:{x:a,y:l},end:{x:h,y:u}})}),(function(){o._onHideLinkUnderline.fire(o._createLinkHoverEvent(a,l,h,u,n)),o._element.classList.remove("xterm-cursor-pointer"),i.hoverLeaveCallback&&i.hoverLeaveCallback()}),(function(e){return!i.willLinkActivate||i.willLinkActivate(e,r)})))}},e.prototype._createLinkHoverEvent=function(e,t,r,i,n){return{x1:e,y1:t,x2:r,y2:i,cols:this._bufferService.cols,fg:n}},e._timeBeforeLatency=200,e=i([n(0,s.IBufferService),n(1,s.ILogService),n(2,s.IUnicodeService)],e)}();t.Linkifier=a;var c=function(e,t,r,i,n,o,s,a,c){this.x1=e,this.y1=t,this.x2=r,this.y2=i,this.clickCallback=n,this.hoverCallback=o,this.tooltipCallback=s,this.leaveCallback=a,this.willLinkActivate=c};t.MouseZone=c},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionService=void 0;var a=r(11),c=r(52),l=r(4),h=r(0),u=r(5),f=r(1),_=r(30),d=r(53),p=r(2),v=String.fromCharCode(160),g=new RegExp(v,"g"),y=function(e){function t(t,r,i,n,o,s,a){var u=e.call(this)||this;return u._element=t,u._screenElement=r,u._bufferService=i,u._coreService=n,u._mouseService=o,u._optionsService=s,u._renderService=a,u._dragScrollAmount=0,u._enabled=!0,u._workCell=new l.CellData,u._mouseDownTimeStamp=0,u._onLinuxMouseSelection=u.register(new h.EventEmitter),u._onRedrawRequest=u.register(new h.EventEmitter),u._onSelectionChange=u.register(new h.EventEmitter),u._onRequestScrollLines=u.register(new h.EventEmitter),u._mouseMoveListener=function(e){return u._onMouseMove(e)},u._mouseUpListener=function(e){return u._onMouseUp(e)},u._coreService.onUserInput((function(){u.hasSelection&&u.clearSelection()})),u._trimListener=u._bufferService.buffer.lines.onTrim((function(e){return u._onTrim(e)})),u.register(u._bufferService.buffers.onBufferActivate((function(e){return u._onBufferActivate(e)}))),u.enable(),u._model=new c.SelectionModel(u._bufferService),u._activeSelectionMode=0,u}return n(t,e),Object.defineProperty(t.prototype,"onLinuxMouseSelection",{get:function(){return this._onLinuxMouseSelection.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestRedraw",{get:function(){return this._onRedrawRequest.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onSelectionChange",{get:function(){return this._onSelectionChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestScrollLines",{get:function(){return this._onRequestScrollLines.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this._removeMouseDownListeners()},t.prototype.reset=function(){this.clearSelection()},t.prototype.disable=function(){this.clearSelection(),this._enabled=!1},t.prototype.enable=function(){this._enabled=!0},Object.defineProperty(t.prototype,"selectionStart",{get:function(){return this._model.finalSelectionStart},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectionEnd",{get:function(){return this._model.finalSelectionEnd},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hasSelection",{get:function(){var e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;return!(!e||!t)&&(e[0]!==t[0]||e[1]!==t[1])},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectionText",{get:function(){var e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;if(!e||!t)return"";var r=this._bufferService.buffer,i=[];if(3===this._activeSelectionMode){if(e[0]===t[0])return"";for(var n=e[1];n<=t[1];n++){var o=r.translateBufferLineToString(n,!0,e[0],t[0]);i.push(o)}}else{var s=e[1]===t[1]?t[0]:void 0;i.push(r.translateBufferLineToString(e[1],!0,e[0],s));for(n=e[1]+1;n<=t[1]-1;n++){var c=r.lines.get(n);o=r.translateBufferLineToString(n,!0);c&&c.isWrapped?i[i.length-1]+=o:i.push(o)}if(e[1]!==t[1]){c=r.lines.get(t[1]),o=r.translateBufferLineToString(t[1],!0,0,t[0]);c&&c.isWrapped?i[i.length-1]+=o:i.push(o)}}return i.map((function(e){return e.replace(g," ")})).join(a.isWindows?"\\r\\n":"\\n")},enumerable:!1,configurable:!0}),t.prototype.clearSelection=function(){this._model.clearSelection(),this._removeMouseDownListeners(),this.refresh(),this._onSelectionChange.fire()},t.prototype.refresh=function(e){var t=this;(this._refreshAnimationFrame||(this._refreshAnimationFrame=window.requestAnimationFrame((function(){return t._refresh()}))),a.isLinux&&e)&&(this.selectionText.length&&this._onLinuxMouseSelection.fire(this.selectionText))},t.prototype._refresh=function(){this._refreshAnimationFrame=void 0,this._onRedrawRequest.fire({start:this._model.finalSelectionStart,end:this._model.finalSelectionEnd,columnSelectMode:3===this._activeSelectionMode})},t.prototype.isClickInSelection=function(e){var t=this._getMouseBufferCoords(e),r=this._model.finalSelectionStart,i=this._model.finalSelectionEnd;return!!(r&&i&&t)&&this._areCoordsInSelection(t,r,i)},t.prototype._areCoordsInSelection=function(e,t,r){return e[1]>t[1]&&e[1]<r[1]||t[1]===r[1]&&e[1]===t[1]&&e[0]>=t[0]&&e[0]<r[0]||t[1]<r[1]&&e[1]===r[1]&&e[0]<r[0]||t[1]<r[1]&&e[1]===t[1]&&e[0]>=t[0]},t.prototype.selectWordAtCursor=function(e){var t=this._getMouseBufferCoords(e);t&&(this._selectWordAt(t,!1),this._model.selectionEnd=void 0,this.refresh(!0))},t.prototype.selectAll=function(){this._model.isSelectAllActive=!0,this.refresh(),this._onSelectionChange.fire()},t.prototype.selectLines=function(e,t){this._model.clearSelection(),e=Math.max(e,0),t=Math.min(t,this._bufferService.buffer.lines.length-1),this._model.selectionStart=[0,e],this._model.selectionEnd=[this._bufferService.cols,t],this.refresh(),this._onSelectionChange.fire()},t.prototype._onTrim=function(e){this._model.onTrim(e)&&this.refresh()},t.prototype._getMouseBufferCoords=function(e){var t=this._mouseService.getCoords(e,this._screenElement,this._bufferService.cols,this._bufferService.rows,!0);if(t)return t[0]--,t[1]--,t[1]+=this._bufferService.buffer.ydisp,t},t.prototype._getMouseEventScrollAmount=function(e){var t=_.getCoordsRelativeToElement(e,this._screenElement)[1],r=this._renderService.dimensions.canvasHeight;return t>=0&&t<=r?0:(t>r&&(t-=r),t=Math.min(Math.max(t,-50),50),(t/=50)/Math.abs(t)+Math.round(14*t))},t.prototype.shouldForceSelection=function(e){return a.isMac?e.altKey&&this._optionsService.options.macOptionClickForcesSelection:e.shiftKey},t.prototype.onMouseDown=function(e){if(this._mouseDownTimeStamp=e.timeStamp,(2!==e.button||!this.hasSelection)&&0===e.button){if(!this._enabled){if(!this.shouldForceSelection(e))return;e.stopPropagation()}e.preventDefault(),this._dragScrollAmount=0,this._enabled&&e.shiftKey?this._onIncrementalClick(e):1===e.detail?this._onSingleClick(e):2===e.detail?this._onDoubleClick(e):3===e.detail&&this._onTripleClick(e),this._addMouseDownListeners(),this.refresh(!0)}},t.prototype._addMouseDownListeners=function(){var e=this;this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.addEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.addEventListener("mouseup",this._mouseUpListener)),this._dragScrollIntervalTimer=window.setInterval((function(){return e._dragScroll()}),50)},t.prototype._removeMouseDownListeners=function(){this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.removeEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.removeEventListener("mouseup",this._mouseUpListener)),clearInterval(this._dragScrollIntervalTimer),this._dragScrollIntervalTimer=void 0},t.prototype._onIncrementalClick=function(e){this._model.selectionStart&&(this._model.selectionEnd=this._getMouseBufferCoords(e))},t.prototype._onSingleClick=function(e){if(this._model.selectionStartLength=0,this._model.isSelectAllActive=!1,this._activeSelectionMode=this.shouldColumnSelect(e)?3:0,this._model.selectionStart=this._getMouseBufferCoords(e),this._model.selectionStart){this._model.selectionEnd=void 0;var t=this._bufferService.buffer.lines.get(this._model.selectionStart[1]);t&&t.length!==this._model.selectionStart[0]&&0===t.hasWidth(this._model.selectionStart[0])&&this._model.selectionStart[0]++}},t.prototype._onDoubleClick=function(e){var t=this._getMouseBufferCoords(e);t&&(this._activeSelectionMode=1,this._selectWordAt(t,!0))},t.prototype._onTripleClick=function(e){var t=this._getMouseBufferCoords(e);t&&(this._activeSelectionMode=2,this._selectLineAt(t[1]))},t.prototype.shouldColumnSelect=function(e){return e.altKey&&!(a.isMac&&this._optionsService.options.macOptionClickForcesSelection)},t.prototype._onMouseMove=function(e){if(e.stopImmediatePropagation(),this._model.selectionStart){var t=this._model.selectionEnd?[this._model.selectionEnd[0],this._model.selectionEnd[1]]:null;if(this._model.selectionEnd=this._getMouseBufferCoords(e),this._model.selectionEnd){2===this._activeSelectionMode?this._model.selectionEnd[1]<this._model.selectionStart[1]?this._model.selectionEnd[0]=0:this._model.selectionEnd[0]=this._bufferService.cols:1===this._activeSelectionMode&&this._selectToWordAt(this._model.selectionEnd),this._dragScrollAmount=this._getMouseEventScrollAmount(e),3!==this._activeSelectionMode&&(this._dragScrollAmount>0?this._model.selectionEnd[0]=this._bufferService.cols:this._dragScrollAmount<0&&(this._model.selectionEnd[0]=0));var r=this._bufferService.buffer;if(this._model.selectionEnd[1]<r.lines.length){var i=r.lines.get(this._model.selectionEnd[1]);i&&0===i.hasWidth(this._model.selectionEnd[0])&&this._model.selectionEnd[0]++}t&&t[0]===this._model.selectionEnd[0]&&t[1]===this._model.selectionEnd[1]||this.refresh(!0)}else this.refresh(!0)}},t.prototype._dragScroll=function(){if(this._model.selectionEnd&&this._model.selectionStart&&this._dragScrollAmount){this._onRequestScrollLines.fire({amount:this._dragScrollAmount,suppressScrollEvent:!1});var e=this._bufferService.buffer;this._dragScrollAmount>0?(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=this._bufferService.cols),this._model.selectionEnd[1]=Math.min(e.ydisp+this._bufferService.rows,e.lines.length-1)):(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=0),this._model.selectionEnd[1]=e.ydisp),this.refresh()}},t.prototype._onMouseUp=function(e){var t=e.timeStamp-this._mouseDownTimeStamp;if(this._removeMouseDownListeners(),this.selectionText.length<=1&&t<500&&e.altKey){if(this._bufferService.buffer.ybase===this._bufferService.buffer.ydisp){var r=this._mouseService.getCoords(e,this._element,this._bufferService.cols,this._bufferService.rows,!1);if(r&&void 0!==r[0]&&void 0!==r[1]){var i=d.moveToCellSequence(r[0]-1,r[1]-1,this._bufferService,this._coreService.decPrivateModes.applicationCursorKeys);this._coreService.triggerDataEvent(i,!0)}}}else this.hasSelection&&this._onSelectionChange.fire()},t.prototype._onBufferActivate=function(e){var t=this;this.clearSelection(),this._trimListener.dispose(),this._trimListener=e.activeBuffer.lines.onTrim((function(e){return t._onTrim(e)}))},t.prototype._convertViewportColToCharacterIndex=function(e,t){for(var r=t[0],i=0;t[0]>=i;i++){var n=e.loadCell(i,this._workCell).getChars().length;0===this._workCell.getWidth()?r--:n>1&&t[0]!==i&&(r+=n-1)}return r},t.prototype.setSelection=function(e,t,r){this._model.clearSelection(),this._removeMouseDownListeners(),this._model.selectionStart=[e,t],this._model.selectionStartLength=r,this.refresh()},t.prototype._getWordAt=function(e,t,r,i){if(void 0===r&&(r=!0),void 0===i&&(i=!0),!(e[0]>=this._bufferService.cols)){var n=this._bufferService.buffer,o=n.lines.get(e[1]);if(o){var s=n.translateBufferLineToString(e[1],!1),a=this._convertViewportColToCharacterIndex(o,e),c=a,l=e[0]-a,h=0,u=0,f=0,_=0;if(" "===s.charAt(a)){for(;a>0&&" "===s.charAt(a-1);)a--;for(;c<s.length&&" "===s.charAt(c+1);)c++}else{var d=e[0],p=e[0];0===o.getWidth(d)&&(h++,d--),2===o.getWidth(p)&&(u++,p++);var v=o.getString(p).length;for(v>1&&(_+=v-1,c+=v-1);d>0&&a>0&&!this._isCharWordSeparator(o.loadCell(d-1,this._workCell));){o.loadCell(d-1,this._workCell);var g=this._workCell.getChars().length;0===this._workCell.getWidth()?(h++,d--):g>1&&(f+=g-1,a-=g-1),a--,d--}for(;p<o.length&&c+1<s.length&&!this._isCharWordSeparator(o.loadCell(p+1,this._workCell));){o.loadCell(p+1,this._workCell);var y=this._workCell.getChars().length;2===this._workCell.getWidth()?(u++,p++):y>1&&(_+=y-1,c+=y-1),c++,p++}}c++;var b=a+l-h+f,S=Math.min(this._bufferService.cols,c-a+h+u-f-_);if(t||""!==s.slice(a,c).trim()){if(r&&0===b&&32!==o.getCodePoint(0)){var m=n.lines.get(e[1]-1);if(m&&o.isWrapped&&32!==m.getCodePoint(this._bufferService.cols-1)){var C=this._getWordAt([this._bufferService.cols-1,e[1]-1],!1,!0,!1);if(C){var w=this._bufferService.cols-C.start;b-=w,S+=w}}}if(i&&b+S===this._bufferService.cols&&32!==o.getCodePoint(this._bufferService.cols-1)){var E=n.lines.get(e[1]+1);if(E&&E.isWrapped&&32!==E.getCodePoint(0)){var L=this._getWordAt([0,e[1]+1],!1,!1,!0);L&&(S+=L.length)}}return{start:b,length:S}}}}},t.prototype._selectWordAt=function(e,t){var r=this._getWordAt(e,t);if(r){for(;r.start<0;)r.start+=this._bufferService.cols,e[1]--;this._model.selectionStart=[r.start,e[1]],this._model.selectionStartLength=r.length}},t.prototype._selectToWordAt=function(e){var t=this._getWordAt(e,!0);if(t){for(var r=e[1];t.start<0;)t.start+=this._bufferService.cols,r--;if(!this._model.areSelectionValuesReversed())for(;t.start+t.length>this._bufferService.cols;)t.length-=this._bufferService.cols,r++;this._model.selectionEnd=[this._model.areSelectionValuesReversed()?t.start:t.start+t.length,r]}},t.prototype._isCharWordSeparator=function(e){return 0!==e.getWidth()&&this._optionsService.options.wordSeparator.indexOf(e.getChars())>=0},t.prototype._selectLineAt=function(e){var t=this._bufferService.buffer.getWrappedRangeForLine(e);this._model.selectionStart=[0,t.first],this._model.selectionEnd=[this._bufferService.cols,t.last],this._model.selectionStartLength=0},t=o([s(2,f.IBufferService),s(3,f.ICoreService),s(4,u.IMouseService),s(5,f.IOptionsService),s(6,u.IRenderService)],t)}(p.Disposable);t.SelectionService=y},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionModel=void 0;var i=function(){function e(e){this._bufferService=e,this.isSelectAllActive=!1,this.selectionStartLength=0}return e.prototype.clearSelection=function(){this.selectionStart=void 0,this.selectionEnd=void 0,this.isSelectAllActive=!1,this.selectionStartLength=0},Object.defineProperty(e.prototype,"finalSelectionStart",{get:function(){return this.isSelectAllActive?[0,0]:this.selectionEnd&&this.selectionStart&&this.areSelectionValuesReversed()?this.selectionEnd:this.selectionStart},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"finalSelectionEnd",{get:function(){if(this.isSelectAllActive)return[this._bufferService.cols,this._bufferService.buffer.ybase+this._bufferService.rows-1];if(this.selectionStart){if(!this.selectionEnd||this.areSelectionValuesReversed()){var e=this.selectionStart[0]+this.selectionStartLength;return e>this._bufferService.cols?[e%this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)]:[e,this.selectionStart[1]]}return this.selectionStartLength&&this.selectionEnd[1]===this.selectionStart[1]?[Math.max(this.selectionStart[0]+this.selectionStartLength,this.selectionEnd[0]),this.selectionEnd[1]]:this.selectionEnd}},enumerable:!1,configurable:!0}),e.prototype.areSelectionValuesReversed=function(){var e=this.selectionStart,t=this.selectionEnd;return!(!e||!t)&&(e[1]>t[1]||e[1]===t[1]&&e[0]>t[0])},e.prototype.onTrim=function(e){return this.selectionStart&&(this.selectionStart[1]-=e),this.selectionEnd&&(this.selectionEnd[1]-=e),this.selectionEnd&&this.selectionEnd[1]<0?(this.clearSelection(),!0):(this.selectionStart&&this.selectionStart[1]<0&&(this.selectionStart[1]=0),!1)},e}();t.SelectionModel=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.moveToCellSequence=void 0;var i=r(12);function n(e,t,r,i){var n=e-o(r,e),a=t-o(r,t);return l(Math.abs(n-a)-function(e,t,r){for(var i=0,n=e-o(r,e),a=t-o(r,t),c=0;c<Math.abs(n-a);c++){var l="A"===s(e,t)?-1:1,h=r.buffer.lines.get(n+l*c);h&&h.isWrapped&&i++}return i}(e,t,r),c(s(e,t),i))}function o(e,t){for(var r=0,i=e.buffer.lines.get(t),n=i&&i.isWrapped;n&&t>=0&&t<e.rows;)r++,n=(i=e.buffer.lines.get(--t))&&i.isWrapped;return r}function s(e,t){return e>t?"A":"B"}function a(e,t,r,i,n,o){for(var s=e,a=t,c="";s!==r||a!==i;)s+=n?1:-1,n&&s>o.cols-1?(c+=o.buffer.translateBufferLineToString(a,!1,e,s),s=0,e=0,a++):!n&&s<0&&(c+=o.buffer.translateBufferLineToString(a,!1,0,e+1),e=s=o.cols-1,a--);return c+o.buffer.translateBufferLineToString(a,!1,e,s)}function c(e,t){var r=t?"O":"[";return i.C0.ESC+r+e}function l(e,t){e=Math.floor(e);for(var r="",i=0;i<e;i++)r+=t;return r}t.moveToCellSequence=function(e,t,r,i){var s,h=r.buffer.x,u=r.buffer.y;if(!r.buffer.hasScrollback)return function(e,t,r,i,s,h){if(0===n(t,i,s,h).length)return"";return l(a(e,t,e,t-o(s,t),!1,s).length,c("D",h))}(h,u,0,t,r,i)+n(u,t,r,i)+function(e,t,r,i,s,h){var u;u=n(t,i,s,h).length>0?i-o(s,i):t;var f=i,_=function(e,t,r,i,s,a){var c;c=n(r,i,s,a).length>0?i-o(s,i):t;if(e<r&&c<=i||e>=r&&c<i)return"C";return"D"}(e,t,r,i,s,h);return l(a(e,u,r,f,"C"===_,s).length,c(_,h))}(h,u,e,t,r,i);if(u===t)return s=h>e?"D":"C",l(Math.abs(h-e),c(s,i));s=u>t?"D":"C";var f=Math.abs(u-t);return l(function(e,t){return t.cols-e}(u>t?e:h,r)+(f-1)*r.cols+1+((u>t?h:e)-1),c(s,i))}},function(e,t,r){"use strict";var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.SoundService=void 0;var o=r(1),s=function(){function e(e){this._optionsService=e}return Object.defineProperty(e,"audioContext",{get:function(){if(!e._audioContext){var t=window.AudioContext||window.webkitAudioContext;if(!t)return console.warn("Web Audio API is not supported by this browser. Consider upgrading to the latest version"),null;e._audioContext=new t}return e._audioContext},enumerable:!1,configurable:!0}),e.prototype.playBellSound=function(){var t=e.audioContext;if(t){var r=t.createBufferSource();t.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._optionsService.options.bellSound)),(function(e){r.buffer=e,r.connect(t.destination),r.start(0)}))}},e.prototype._base64ToArrayBuffer=function(e){for(var t=window.atob(e),r=t.length,i=new Uint8Array(r),n=0;n<r;n++)i[n]=t.charCodeAt(n);return i.buffer},e.prototype._removeMimeType=function(e){return e.split(",")[1]},e=i([n(0,o.IOptionsService)],e)}();t.SoundService=s},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseZoneManager=void 0;var a=r(2),c=r(7),l=r(5),h=r(1),u=function(e){function t(t,r,i,n,o,s){var a=e.call(this)||this;return a._element=t,a._screenElement=r,a._bufferService=i,a._mouseService=n,a._selectionService=o,a._optionsService=s,a._zones=[],a._areZonesActive=!1,a._lastHoverCoords=[void 0,void 0],a._initialSelectionLength=0,a.register(c.addDisposableDomListener(a._element,"mousedown",(function(e){return a._onMouseDown(e)}))),a._mouseMoveListener=function(e){return a._onMouseMove(e)},a._mouseLeaveListener=function(e){return a._onMouseLeave(e)},a._clickListener=function(e){return a._onClick(e)},a}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),this._deactivate()},t.prototype.add=function(e){this._zones.push(e),1===this._zones.length&&this._activate()},t.prototype.clearAll=function(e,t){if(0!==this._zones.length){e&&t||(e=0,t=this._bufferService.rows-1);for(var r=0;r<this._zones.length;r++){var i=this._zones[r];(i.y1>e&&i.y1<=t+1||i.y2>e&&i.y2<=t+1||i.y1<e&&i.y2>t+1)&&(this._currentZone&&this._currentZone===i&&(this._currentZone.leaveCallback(),this._currentZone=void 0),this._zones.splice(r--,1))}0===this._zones.length&&this._deactivate()}},t.prototype._activate=function(){this._areZonesActive||(this._areZonesActive=!0,this._element.addEventListener("mousemove",this._mouseMoveListener),this._element.addEventListener("mouseleave",this._mouseLeaveListener),this._element.addEventListener("click",this._clickListener))},t.prototype._deactivate=function(){this._areZonesActive&&(this._areZonesActive=!1,this._element.removeEventListener("mousemove",this._mouseMoveListener),this._element.removeEventListener("mouseleave",this._mouseLeaveListener),this._element.removeEventListener("click",this._clickListener))},t.prototype._onMouseMove=function(e){this._lastHoverCoords[0]===e.pageX&&this._lastHoverCoords[1]===e.pageY||(this._onHover(e),this._lastHoverCoords=[e.pageX,e.pageY])},t.prototype._onHover=function(e){var t=this,r=this._findZoneEventAt(e);r!==this._currentZone&&(this._currentZone&&(this._currentZone.leaveCallback(),this._currentZone=void 0,this._tooltipTimeout&&clearTimeout(this._tooltipTimeout)),r&&(this._currentZone=r,r.hoverCallback&&r.hoverCallback(e),this._tooltipTimeout=window.setTimeout((function(){return t._onTooltip(e)}),this._optionsService.options.linkTooltipHoverDuration)))},t.prototype._onTooltip=function(e){this._tooltipTimeout=void 0;var t=this._findZoneEventAt(e);t&&t.tooltipCallback&&t.tooltipCallback(e)},t.prototype._onMouseDown=function(e){if(this._initialSelectionLength=this._getSelectionLength(),this._areZonesActive){var t=this._findZoneEventAt(e);(null==t?void 0:t.willLinkActivate(e))&&(e.preventDefault(),e.stopImmediatePropagation())}},t.prototype._onMouseLeave=function(e){this._currentZone&&(this._currentZone.leaveCallback(),this._currentZone=void 0,this._tooltipTimeout&&clearTimeout(this._tooltipTimeout))},t.prototype._onClick=function(e){var t=this._findZoneEventAt(e),r=this._getSelectionLength();t&&r===this._initialSelectionLength&&(t.clickCallback(e),e.preventDefault(),e.stopImmediatePropagation())},t.prototype._getSelectionLength=function(){var e=this._selectionService.selectionText;return e?e.length:0},t.prototype._findZoneEventAt=function(e){var t=this._mouseService.getCoords(e,this._screenElement,this._bufferService.cols,this._bufferService.rows);if(t)for(var r=t[0],i=t[1],n=0;n<this._zones.length;n++){var o=this._zones[n];if(o.y1===o.y2){if(i===o.y1&&r>=o.x1&&r<o.x2)return o}else if(i===o.y1&&r>=o.x1||i===o.y2&&r<o.x2||i>o.y1&&i<o.y2)return o}},t=o([s(2,h.IBufferService),s(3,l.IMouseService),s(4,l.ISelectionService),s(5,h.IOptionsService)],t)}(a.Disposable);t.MouseZoneManager=u},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AccessibilityManager=void 0;var o=r(18),s=r(11),a=r(31),c=r(7),l=r(2),h=r(32),u=r(17),f=function(e){function t(t,r){var i=e.call(this)||this;i._terminal=t,i._renderService=r,i._liveRegionLineCount=0,i._charsToConsume=[],i._charsToAnnounce="",i._accessibilityTreeRoot=document.createElement("div"),i._accessibilityTreeRoot.classList.add("xterm-accessibility"),i._rowContainer=document.createElement("div"),i._rowContainer.classList.add("xterm-accessibility-tree"),i._rowContainer.setAttribute("role","list"),i._rowElements=[];for(var n=0;n<i._terminal.rows;n++)i._rowElements[n]=i._createAccessibilityTreeNode(),i._rowContainer.appendChild(i._rowElements[n]);if(i._topBoundaryFocusListener=function(e){return i._onBoundaryFocus(e,0)},i._bottomBoundaryFocusListener=function(e){return i._onBoundaryFocus(e,1)},i._rowElements[0].addEventListener("focus",i._topBoundaryFocusListener),i._rowElements[i._rowElements.length-1].addEventListener("focus",i._bottomBoundaryFocusListener),i._refreshRowsDimensions(),i._accessibilityTreeRoot.appendChild(i._rowContainer),i._renderRowsDebouncer=new a.RenderDebouncer(i._renderRows.bind(i)),i._refreshRows(),i._liveRegion=document.createElement("div"),i._liveRegion.classList.add("live-region"),i._liveRegion.setAttribute("aria-live","assertive"),i._accessibilityTreeRoot.appendChild(i._liveRegion),!i._terminal.element)throw new Error("Cannot enable accessibility before Terminal.open");return i._terminal.element.insertAdjacentElement("afterbegin",i._accessibilityTreeRoot),i.register(i._renderRowsDebouncer),i.register(i._terminal.onResize((function(e){return i._onResize(e.rows)}))),i.register(i._terminal.onRender((function(e){return i._refreshRows(e.start,e.end)}))),i.register(i._terminal.onScroll((function(){return i._refreshRows()}))),i.register(i._terminal.onA11yChar((function(e){return i._onChar(e)}))),i.register(i._terminal.onLineFeed((function(){return i._onChar("\\n")}))),i.register(i._terminal.onA11yTab((function(e){return i._onTab(e)}))),i.register(i._terminal.onKey((function(e){return i._onKey(e.key)}))),i.register(i._terminal.onBlur((function(){return i._clearLiveRegion()}))),i.register(i._renderService.onDimensionsChange((function(){return i._refreshRowsDimensions()}))),i._screenDprMonitor=new h.ScreenDprMonitor,i.register(i._screenDprMonitor),i._screenDprMonitor.setListener((function(){return i._refreshRowsDimensions()})),i.register(c.addDisposableDomListener(window,"resize",(function(){return i._refreshRowsDimensions()}))),i}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),u.removeElementFromParent(this._accessibilityTreeRoot),this._rowElements.length=0},t.prototype._onBoundaryFocus=function(e,t){var r=e.target,i=this._rowElements[0===t?1:this._rowElements.length-2];if(r.getAttribute("aria-posinset")!==(0===t?"1":""+this._terminal.buffer.lines.length)&&e.relatedTarget===i){var n,o;if(0===t?(n=r,o=this._rowElements.pop(),this._rowContainer.removeChild(o)):(n=this._rowElements.shift(),o=r,this._rowContainer.removeChild(n)),n.removeEventListener("focus",this._topBoundaryFocusListener),o.removeEventListener("focus",this._bottomBoundaryFocusListener),0===t){var s=this._createAccessibilityTreeNode();this._rowElements.unshift(s),this._rowContainer.insertAdjacentElement("afterbegin",s)}else{s=this._createAccessibilityTreeNode();this._rowElements.push(s),this._rowContainer.appendChild(s)}this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._terminal.scrollLines(0===t?-1:1),this._rowElements[0===t?1:this._rowElements.length-2].focus(),e.preventDefault(),e.stopImmediatePropagation()}},t.prototype._onResize=function(e){this._rowElements[this._rowElements.length-1].removeEventListener("focus",this._bottomBoundaryFocusListener);for(var t=this._rowContainer.children.length;t<this._terminal.rows;t++)this._rowElements[t]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[t]);for(;this._rowElements.length>e;)this._rowContainer.removeChild(this._rowElements.pop());this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions()},t.prototype._createAccessibilityTreeNode=function(){var e=document.createElement("div");return e.setAttribute("role","listitem"),e.tabIndex=-1,this._refreshRowDimensions(e),e},t.prototype._onTab=function(e){for(var t=0;t<e;t++)this._onChar(" ")},t.prototype._onChar=function(e){var t=this;if(this._liveRegionLineCount<21){if(this._charsToConsume.length>0)this._charsToConsume.shift()!==e&&(this._charsToAnnounce+=e);else this._charsToAnnounce+=e;"\\n"===e&&(this._liveRegionLineCount++,21===this._liveRegionLineCount&&(this._liveRegion.textContent+=o.tooMuchOutput)),s.isMac&&this._liveRegion.textContent&&this._liveRegion.textContent.length>0&&!this._liveRegion.parentNode&&setTimeout((function(){t._accessibilityTreeRoot.appendChild(t._liveRegion)}),0)}},t.prototype._clearLiveRegion=function(){this._liveRegion.textContent="",this._liveRegionLineCount=0,s.isMac&&u.removeElementFromParent(this._liveRegion)},t.prototype._onKey=function(e){this._clearLiveRegion(),this._charsToConsume.push(e)},t.prototype._refreshRows=function(e,t){this._renderRowsDebouncer.refresh(e,t,this._terminal.rows)},t.prototype._renderRows=function(e,t){for(var r=this._terminal.buffer,i=r.lines.length.toString(),n=e;n<=t;n++){var o=r.translateBufferLineToString(r.ydisp+n,!0),s=(r.ydisp+n+1).toString(),a=this._rowElements[n];a&&(0===o.length?a.innerHTML="&nbsp;":a.textContent=o,a.setAttribute("aria-posinset",s),a.setAttribute("aria-setsize",i))}this._announceCharacters()},t.prototype._refreshRowsDimensions=function(){if(this._renderService.dimensions.actualCellHeight){this._rowElements.length!==this._terminal.rows&&this._onResize(this._terminal.rows);for(var e=0;e<this._terminal.rows;e++)this._refreshRowDimensions(this._rowElements[e])}},t.prototype._refreshRowDimensions=function(e){e.style.height=this._renderService.dimensions.actualCellHeight+"px"},t.prototype._announceCharacters=function(){0!==this._charsToAnnounce.length&&(this._liveRegion.textContent+=this._charsToAnnounce,this._charsToAnnounce="")},t}(l.Disposable);t.AccessibilityManager=f},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.DomRenderer=void 0;var a=r(58),c=r(9),l=r(2),h=r(5),u=r(1),f=r(0),_=r(10),d=r(17),p=1,v=function(e){function t(t,r,i,n,o,s,c,l,h){var u=e.call(this)||this;return u._colors=t,u._element=r,u._screenElement=i,u._viewportElement=n,u._linkifier=o,u._linkifier2=s,u._charSizeService=c,u._optionsService=l,u._bufferService=h,u._terminalClass=p++,u._rowElements=[],u._rowContainer=document.createElement("div"),u._rowContainer.classList.add("xterm-rows"),u._rowContainer.style.lineHeight="normal",u._rowContainer.setAttribute("aria-hidden","true"),u._refreshRowElements(u._bufferService.cols,u._bufferService.rows),u._selectionContainer=document.createElement("div"),u._selectionContainer.classList.add("xterm-selection"),u._selectionContainer.setAttribute("aria-hidden","true"),u.dimensions={scaledCharWidth:0,scaledCharHeight:0,scaledCellWidth:0,scaledCellHeight:0,scaledCharLeft:0,scaledCharTop:0,scaledCanvasWidth:0,scaledCanvasHeight:0,canvasWidth:0,canvasHeight:0,actualCellWidth:0,actualCellHeight:0},u._updateDimensions(),u._injectCss(),u._rowFactory=new a.DomRendererRowFactory(document,u._optionsService,u._colors),u._element.classList.add("xterm-dom-renderer-owner-"+u._terminalClass),u._screenElement.appendChild(u._rowContainer),u._screenElement.appendChild(u._selectionContainer),u._linkifier.onShowLinkUnderline((function(e){return u._onLinkHover(e)})),u._linkifier.onHideLinkUnderline((function(e){return u._onLinkLeave(e)})),u._linkifier2.onShowLinkUnderline((function(e){return u._onLinkHover(e)})),u._linkifier2.onHideLinkUnderline((function(e){return u._onLinkLeave(e)})),u}return n(t,e),Object.defineProperty(t.prototype,"onRequestRedraw",{get:function(){return(new f.EventEmitter).event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this._element.classList.remove("xterm-dom-renderer-owner-"+this._terminalClass),d.removeElementFromParent(this._rowContainer,this._selectionContainer,this._themeStyleElement,this._dimensionsStyleElement),e.prototype.dispose.call(this)},t.prototype._updateDimensions=function(){this.dimensions.scaledCharWidth=this._charSizeService.width*window.devicePixelRatio,this.dimensions.scaledCharHeight=Math.ceil(this._charSizeService.height*window.devicePixelRatio),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._optionsService.options.letterSpacing),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._optionsService.options.lineHeight),this.dimensions.scaledCharLeft=0,this.dimensions.scaledCharTop=0,this.dimensions.scaledCanvasWidth=this.dimensions.scaledCellWidth*this._bufferService.cols,this.dimensions.scaledCanvasHeight=this.dimensions.scaledCellHeight*this._bufferService.rows,this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/window.devicePixelRatio),this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/window.devicePixelRatio),this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._bufferService.cols,this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._bufferService.rows;for(var e=0,t=this._rowElements;e<t.length;e++){var r=t[e];r.style.width=this.dimensions.canvasWidth+"px",r.style.height=this.dimensions.actualCellHeight+"px",r.style.lineHeight=this.dimensions.actualCellHeight+"px",r.style.overflow="hidden"}this._dimensionsStyleElement||(this._dimensionsStyleElement=document.createElement("style"),this._screenElement.appendChild(this._dimensionsStyleElement));var i=this._terminalSelector+" .xterm-rows span { display: inline-block; height: 100%; vertical-align: top; width: "+this.dimensions.actualCellWidth+"px}";this._dimensionsStyleElement.innerHTML=i,this._selectionContainer.style.height=this._viewportElement.style.height,this._screenElement.style.width=this.dimensions.canvasWidth+"px",this._screenElement.style.height=this.dimensions.canvasHeight+"px"},t.prototype.setColors=function(e){this._colors=e,this._injectCss()},t.prototype._injectCss=function(){var e=this;this._themeStyleElement||(this._themeStyleElement=document.createElement("style"),this._screenElement.appendChild(this._themeStyleElement));var t=this._terminalSelector+" .xterm-rows { color: "+this._colors.foreground.css+"; font-family: "+this._optionsService.options.fontFamily+"; font-size: "+this._optionsService.options.fontSize+"px;}";t+=this._terminalSelector+" span:not(."+a.BOLD_CLASS+") { font-weight: "+this._optionsService.options.fontWeight+";}"+this._terminalSelector+" span."+a.BOLD_CLASS+" { font-weight: "+this._optionsService.options.fontWeightBold+";}"+this._terminalSelector+" span."+a.ITALIC_CLASS+" { font-style: italic;}",t+="@keyframes blink_box_shadow_"+this._terminalClass+" { 50% {  box-shadow: none; }}",t+="@keyframes blink_block_"+this._terminalClass+" { 0% {  background-color: "+this._colors.cursor.css+";  color: "+this._colors.cursorAccent.css+"; } 50% {  background-color: "+this._colors.cursorAccent.css+";  color: "+this._colors.cursor.css+"; }}",t+=this._terminalSelector+" .xterm-rows:not(.xterm-focus) ."+a.CURSOR_CLASS+"."+a.CURSOR_STYLE_BLOCK_CLASS+" { outline: 1px solid "+this._colors.cursor.css+"; outline-offset: -1px;}"+this._terminalSelector+" .xterm-rows.xterm-focus ."+a.CURSOR_CLASS+"."+a.CURSOR_BLINK_CLASS+":not(."+a.CURSOR_STYLE_BLOCK_CLASS+") { animation: blink_box_shadow_"+this._terminalClass+" 1s step-end infinite;}"+this._terminalSelector+" .xterm-rows.xterm-focus ."+a.CURSOR_CLASS+"."+a.CURSOR_BLINK_CLASS+"."+a.CURSOR_STYLE_BLOCK_CLASS+" { animation: blink_block_"+this._terminalClass+" 1s step-end infinite;}"+this._terminalSelector+" .xterm-rows.xterm-focus ."+a.CURSOR_CLASS+"."+a.CURSOR_STYLE_BLOCK_CLASS+" { background-color: "+this._colors.cursor.css+"; color: "+this._colors.cursorAccent.css+";}"+this._terminalSelector+" .xterm-rows ."+a.CURSOR_CLASS+"."+a.CURSOR_STYLE_BAR_CLASS+" { box-shadow: "+this._optionsService.options.cursorWidth+"px 0 0 "+this._colors.cursor.css+" inset;}"+this._terminalSelector+" .xterm-rows ."+a.CURSOR_CLASS+"."+a.CURSOR_STYLE_UNDERLINE_CLASS+" { box-shadow: 0 -1px 0 "+this._colors.cursor.css+" inset;}",t+=this._terminalSelector+" .xterm-selection { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}"+this._terminalSelector+" .xterm-selection div { position: absolute; background-color: "+this._colors.selectionTransparent.css+";}",this._colors.ansi.forEach((function(r,i){t+=e._terminalSelector+" .xterm-fg-"+i+" { color: "+r.css+"; }"+e._terminalSelector+" .xterm-bg-"+i+" { background-color: "+r.css+"; }"})),t+=this._terminalSelector+" .xterm-fg-"+c.INVERTED_DEFAULT_COLOR+" { color: "+_.color.opaque(this._colors.background).css+"; }"+this._terminalSelector+" .xterm-bg-"+c.INVERTED_DEFAULT_COLOR+" { background-color: "+this._colors.foreground.css+"; }",this._themeStyleElement.innerHTML=t},t.prototype.onDevicePixelRatioChange=function(){this._updateDimensions()},t.prototype._refreshRowElements=function(e,t){for(var r=this._rowElements.length;r<=t;r++){var i=document.createElement("div");this._rowContainer.appendChild(i),this._rowElements.push(i)}for(;this._rowElements.length>t;)this._rowContainer.removeChild(this._rowElements.pop())},t.prototype.onResize=function(e,t){this._refreshRowElements(e,t),this._updateDimensions()},t.prototype.onCharSizeChanged=function(){this._updateDimensions()},t.prototype.onBlur=function(){this._rowContainer.classList.remove("xterm-focus")},t.prototype.onFocus=function(){this._rowContainer.classList.add("xterm-focus")},t.prototype.onSelectionChanged=function(e,t,r){for(;this._selectionContainer.children.length;)this._selectionContainer.removeChild(this._selectionContainer.children[0]);if(e&&t){var i=e[1]-this._bufferService.buffer.ydisp,n=t[1]-this._bufferService.buffer.ydisp,o=Math.max(i,0),s=Math.min(n,this._bufferService.rows-1);if(!(o>=this._bufferService.rows||s<0)){var a=document.createDocumentFragment();if(r)a.appendChild(this._createSelectionElement(o,e[0],t[0],s-o+1));else{var c=i===o?e[0]:0,l=o===s?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(o,c,l));var h=s-o-1;if(a.appendChild(this._createSelectionElement(o+1,0,this._bufferService.cols,h)),o!==s){var u=n===s?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(s,0,u))}}this._selectionContainer.appendChild(a)}}},t.prototype._createSelectionElement=function(e,t,r,i){void 0===i&&(i=1);var n=document.createElement("div");return n.style.height=i*this.dimensions.actualCellHeight+"px",n.style.top=e*this.dimensions.actualCellHeight+"px",n.style.left=t*this.dimensions.actualCellWidth+"px",n.style.width=this.dimensions.actualCellWidth*(r-t)+"px",n},t.prototype.onCursorMove=function(){},t.prototype.onOptionsChanged=function(){this._updateDimensions(),this._injectCss()},t.prototype.clear=function(){for(var e=0,t=this._rowElements;e<t.length;e++){t[e].innerHTML=""}},t.prototype.renderRows=function(e,t){for(var r=this._bufferService.buffer.ybase+this._bufferService.buffer.y,i=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),n=this._optionsService.options.cursorBlink,o=e;o<=t;o++){var s=this._rowElements[o];s.innerHTML="";var a=o+this._bufferService.buffer.ydisp,c=this._bufferService.buffer.lines.get(a),l=this._optionsService.options.cursorStyle;s.appendChild(this._rowFactory.createRow(c,a===r,l,i,n,this.dimensions.actualCellWidth,this._bufferService.cols))}},Object.defineProperty(t.prototype,"_terminalSelector",{get:function(){return".xterm-dom-renderer-owner-"+this._terminalClass},enumerable:!1,configurable:!0}),t.prototype.registerCharacterJoiner=function(e){return-1},t.prototype.deregisterCharacterJoiner=function(e){return!1},t.prototype._onLinkHover=function(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!0)},t.prototype._onLinkLeave=function(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!1)},t.prototype._setCellUnderline=function(e,t,r,i,n,o){for(;e!==t||r!==i;){var s=this._rowElements[r];if(!s)return;var a=s.children[e];a&&(a.style.textDecoration=o?"underline":"none"),++e>=n&&(e=0,r++)}},t=o([s(6,h.ICharSizeService),s(7,u.IOptionsService),s(8,u.IBufferService)],t)}(l.Disposable);t.DomRenderer=v},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DomRendererRowFactory=t.CURSOR_STYLE_UNDERLINE_CLASS=t.CURSOR_STYLE_BAR_CLASS=t.CURSOR_STYLE_BLOCK_CLASS=t.CURSOR_BLINK_CLASS=t.CURSOR_CLASS=t.UNDERLINE_CLASS=t.ITALIC_CLASS=t.DIM_CLASS=t.BOLD_CLASS=void 0;var i=r(9),n=r(3),o=r(4),s=r(10);t.BOLD_CLASS="xterm-bold",t.DIM_CLASS="xterm-dim",t.ITALIC_CLASS="xterm-italic",t.UNDERLINE_CLASS="xterm-underline",t.CURSOR_CLASS="xterm-cursor",t.CURSOR_BLINK_CLASS="xterm-cursor-blink",t.CURSOR_STYLE_BLOCK_CLASS="xterm-cursor-block",t.CURSOR_STYLE_BAR_CLASS="xterm-cursor-bar",t.CURSOR_STYLE_UNDERLINE_CLASS="xterm-cursor-underline";var a=function(){function e(e,t,r){this._document=e,this._optionsService=t,this._colors=r,this._workCell=new o.CellData}return e.prototype.setColors=function(e){this._colors=e},e.prototype.createRow=function(e,r,o,a,l,h,u){for(var f=this._document.createDocumentFragment(),_=0,d=Math.min(e.length,u)-1;d>=0;d--)if(e.loadCell(d,this._workCell).getCode()!==n.NULL_CELL_CODE||r&&d===a){_=d+1;break}for(d=0;d<_;d++){e.loadCell(d,this._workCell);var p=this._workCell.getWidth();if(0!==p){var v=this._document.createElement("span");if(p>1&&(v.style.width=h*p+"px"),r&&d===a)switch(v.classList.add(t.CURSOR_CLASS),l&&v.classList.add(t.CURSOR_BLINK_CLASS),o){case"bar":v.classList.add(t.CURSOR_STYLE_BAR_CLASS);break;case"underline":v.classList.add(t.CURSOR_STYLE_UNDERLINE_CLASS);break;default:v.classList.add(t.CURSOR_STYLE_BLOCK_CLASS)}this._workCell.isBold()&&v.classList.add(t.BOLD_CLASS),this._workCell.isItalic()&&v.classList.add(t.ITALIC_CLASS),this._workCell.isDim()&&v.classList.add(t.DIM_CLASS),this._workCell.isUnderline()&&v.classList.add(t.UNDERLINE_CLASS),this._workCell.isInvisible()?v.textContent=n.WHITESPACE_CELL_CHAR:v.textContent=this._workCell.getChars()||n.WHITESPACE_CELL_CHAR;var g=this._workCell.getFgColor(),y=this._workCell.getFgColorMode(),b=this._workCell.getBgColor(),S=this._workCell.getBgColorMode(),m=!!this._workCell.isInverse();if(m){var C=g;g=b,b=C;var w=y;y=S,S=w}switch(y){case 16777216:case 33554432:this._workCell.isBold()&&g<8&&this._optionsService.options.drawBoldTextInBrightColors&&(g+=8),this._applyMinimumContrast(v,this._colors.background,this._colors.ansi[g])||v.classList.add("xterm-fg-"+g);break;case 50331648:var E=s.rgba.toColor(g>>16&255,g>>8&255,255&g);this._applyMinimumContrast(v,this._colors.background,E)||this._addStyle(v,"color:#"+c(g.toString(16),"0",6));break;case 0:default:this._applyMinimumContrast(v,this._colors.background,this._colors.foreground)||m&&v.classList.add("xterm-fg-"+i.INVERTED_DEFAULT_COLOR)}switch(S){case 16777216:case 33554432:v.classList.add("xterm-bg-"+b);break;case 50331648:this._addStyle(v,"background-color:#"+c(b.toString(16),"0",6));break;case 0:default:m&&v.classList.add("xterm-bg-"+i.INVERTED_DEFAULT_COLOR)}f.appendChild(v)}}return f},e.prototype._applyMinimumContrast=function(e,t,r){if(1===this._optionsService.options.minimumContrastRatio)return!1;var i=this._colors.contrastCache.getColor(this._workCell.bg,this._workCell.fg);return void 0===i&&(i=s.color.ensureContrastRatio(t,r,this._optionsService.options.minimumContrastRatio),this._colors.contrastCache.setColor(this._workCell.bg,this._workCell.fg,null!=i?i:null)),!!i&&(this._addStyle(e,"color:"+i.css),!0)},e.prototype._addStyle=function(e,t){e.setAttribute("style",""+(e.getAttribute("style")||"")+t+";")},e}();function c(e,t,r){for(;e.length<r;)e=t+e;return e}t.DomRendererRowFactory=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.evaluateKeyboardEvent=void 0;var i=r(12),n={48:["0",")"],49:["1","!"],50:["2","@"],51:["3","#"],52:["4","$"],53:["5","%"],54:["6","^"],55:["7","&"],56:["8","*"],57:["9","("],186:[";",":"],187:["=","+"],188:[",","<"],189:["-","_"],190:[".",">"],191:["/","?"],192:["`","~"],219:["[","{"],220:["\\\\","|"],221:["]","}"],222:["\'",\'"\']};t.evaluateKeyboardEvent=function(e,t,r,o){var s={type:0,cancel:!1,key:void 0},a=(e.shiftKey?1:0)|(e.altKey?2:0)|(e.ctrlKey?4:0)|(e.metaKey?8:0);switch(e.keyCode){case 0:"UIKeyInputUpArrow"===e.key?s.key=t?i.C0.ESC+"OA":i.C0.ESC+"[A":"UIKeyInputLeftArrow"===e.key?s.key=t?i.C0.ESC+"OD":i.C0.ESC+"[D":"UIKeyInputRightArrow"===e.key?s.key=t?i.C0.ESC+"OC":i.C0.ESC+"[C":"UIKeyInputDownArrow"===e.key&&(s.key=t?i.C0.ESC+"OB":i.C0.ESC+"[B");break;case 8:if(e.shiftKey){s.key=i.C0.BS;break}if(e.altKey){s.key=i.C0.ESC+i.C0.DEL;break}s.key=i.C0.DEL;break;case 9:if(e.shiftKey){s.key=i.C0.ESC+"[Z";break}s.key=i.C0.HT,s.cancel=!0;break;case 13:s.key=e.altKey?i.C0.ESC+i.C0.CR:i.C0.CR,s.cancel=!0;break;case 27:s.key=i.C0.ESC,e.altKey&&(s.key=i.C0.ESC+i.C0.ESC),s.cancel=!0;break;case 37:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"D",s.key===i.C0.ESC+"[1;3D"&&(s.key=i.C0.ESC+(r?"b":"[1;5D"))):s.key=t?i.C0.ESC+"OD":i.C0.ESC+"[D";break;case 39:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"C",s.key===i.C0.ESC+"[1;3C"&&(s.key=i.C0.ESC+(r?"f":"[1;5C"))):s.key=t?i.C0.ESC+"OC":i.C0.ESC+"[C";break;case 38:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"A",r||s.key!==i.C0.ESC+"[1;3A"||(s.key=i.C0.ESC+"[1;5A")):s.key=t?i.C0.ESC+"OA":i.C0.ESC+"[A";break;case 40:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"B",r||s.key!==i.C0.ESC+"[1;3B"||(s.key=i.C0.ESC+"[1;5B")):s.key=t?i.C0.ESC+"OB":i.C0.ESC+"[B";break;case 45:e.shiftKey||e.ctrlKey||(s.key=i.C0.ESC+"[2~");break;case 46:s.key=a?i.C0.ESC+"[3;"+(a+1)+"~":i.C0.ESC+"[3~";break;case 36:s.key=a?i.C0.ESC+"[1;"+(a+1)+"H":t?i.C0.ESC+"OH":i.C0.ESC+"[H";break;case 35:s.key=a?i.C0.ESC+"[1;"+(a+1)+"F":t?i.C0.ESC+"OF":i.C0.ESC+"[F";break;case 33:e.shiftKey?s.type=2:s.key=i.C0.ESC+"[5~";break;case 34:e.shiftKey?s.type=3:s.key=i.C0.ESC+"[6~";break;case 112:s.key=a?i.C0.ESC+"[1;"+(a+1)+"P":i.C0.ESC+"OP";break;case 113:s.key=a?i.C0.ESC+"[1;"+(a+1)+"Q":i.C0.ESC+"OQ";break;case 114:s.key=a?i.C0.ESC+"[1;"+(a+1)+"R":i.C0.ESC+"OR";break;case 115:s.key=a?i.C0.ESC+"[1;"+(a+1)+"S":i.C0.ESC+"OS";break;case 116:s.key=a?i.C0.ESC+"[15;"+(a+1)+"~":i.C0.ESC+"[15~";break;case 117:s.key=a?i.C0.ESC+"[17;"+(a+1)+"~":i.C0.ESC+"[17~";break;case 118:s.key=a?i.C0.ESC+"[18;"+(a+1)+"~":i.C0.ESC+"[18~";break;case 119:s.key=a?i.C0.ESC+"[19;"+(a+1)+"~":i.C0.ESC+"[19~";break;case 120:s.key=a?i.C0.ESC+"[20;"+(a+1)+"~":i.C0.ESC+"[20~";break;case 121:s.key=a?i.C0.ESC+"[21;"+(a+1)+"~":i.C0.ESC+"[21~";break;case 122:s.key=a?i.C0.ESC+"[23;"+(a+1)+"~":i.C0.ESC+"[23~";break;case 123:s.key=a?i.C0.ESC+"[24;"+(a+1)+"~":i.C0.ESC+"[24~";break;default:if(!e.ctrlKey||e.shiftKey||e.altKey||e.metaKey)if(r&&!o||!e.altKey||e.metaKey)r&&!e.altKey&&!e.ctrlKey&&e.metaKey?65===e.keyCode&&(s.type=1):e.key&&!e.ctrlKey&&!e.altKey&&!e.metaKey&&e.keyCode>=48&&1===e.key.length?s.key=e.key:e.key&&e.ctrlKey&&"_"===e.key&&(s.key=i.C0.US);else{var c=n[e.keyCode],l=c&&c[e.shiftKey?1:0];if(l)s.key=i.C0.ESC+l;else if(e.keyCode>=65&&e.keyCode<=90){var h=e.ctrlKey?e.keyCode-64:e.keyCode+32;s.key=i.C0.ESC+String.fromCharCode(h)}}else e.keyCode>=65&&e.keyCode<=90?s.key=String.fromCharCode(e.keyCode-64):32===e.keyCode?s.key=i.C0.NUL:e.keyCode>=51&&e.keyCode<=55?s.key=String.fromCharCode(e.keyCode-51+27):56===e.keyCode?s.key=i.C0.DEL:219===e.keyCode?s.key=i.C0.ESC:220===e.keyCode?s.key=i.C0.FS:221===e.keyCode&&(s.key=i.C0.GS)}return s}},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.RenderService=void 0;var a=r(31),c=r(0),l=r(2),h=r(32),u=r(7),f=r(1),_=r(5),d=function(e){function t(t,r,i,n,o,s){var l=e.call(this)||this;if(l._renderer=t,l._rowCount=r,l._isPaused=!1,l._needsFullRefresh=!1,l._isNextRenderRedrawOnly=!0,l._needsSelectionRefresh=!1,l._canvasWidth=0,l._canvasHeight=0,l._selectionState={start:void 0,end:void 0,columnSelectMode:!1},l._onDimensionsChange=new c.EventEmitter,l._onRender=new c.EventEmitter,l._onRefreshRequest=new c.EventEmitter,l.register({dispose:function(){return l._renderer.dispose()}}),l._renderDebouncer=new a.RenderDebouncer((function(e,t){return l._renderRows(e,t)})),l.register(l._renderDebouncer),l._screenDprMonitor=new h.ScreenDprMonitor,l._screenDprMonitor.setListener((function(){return l.onDevicePixelRatioChange()})),l.register(l._screenDprMonitor),l.register(s.onResize((function(e){return l._fullRefresh()}))),l.register(n.onOptionChange((function(){return l._renderer.onOptionsChanged()}))),l.register(o.onCharSizeChange((function(){return l.onCharSizeChanged()}))),l._renderer.onRequestRedraw((function(e){return l.refreshRows(e.start,e.end,!0)})),l.register(u.addDisposableDomListener(window,"resize",(function(){return l.onDevicePixelRatioChange()}))),"IntersectionObserver"in window){var f=new IntersectionObserver((function(e){return l._onIntersectionChange(e[e.length-1])}),{threshold:0});f.observe(i),l.register({dispose:function(){return f.disconnect()}})}return l}return n(t,e),Object.defineProperty(t.prototype,"onDimensionsChange",{get:function(){return this._onDimensionsChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRenderedBufferChange",{get:function(){return this._onRender.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRefreshRequest",{get:function(){return this._onRefreshRequest.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dimensions",{get:function(){return this._renderer.dimensions},enumerable:!1,configurable:!0}),t.prototype._onIntersectionChange=function(e){this._isPaused=0===e.intersectionRatio,!this._isPaused&&this._needsFullRefresh&&(this.refreshRows(0,this._rowCount-1),this._needsFullRefresh=!1)},t.prototype.refreshRows=function(e,t,r){void 0===r&&(r=!1),this._isPaused?this._needsFullRefresh=!0:(r||(this._isNextRenderRedrawOnly=!1),this._renderDebouncer.refresh(e,t,this._rowCount))},t.prototype._renderRows=function(e,t){this._renderer.renderRows(e,t),this._needsSelectionRefresh&&(this._renderer.onSelectionChanged(this._selectionState.start,this._selectionState.end,this._selectionState.columnSelectMode),this._needsSelectionRefresh=!1),this._isNextRenderRedrawOnly||this._onRender.fire({start:e,end:t}),this._isNextRenderRedrawOnly=!0},t.prototype.resize=function(e,t){this._rowCount=t,this._fireOnCanvasResize()},t.prototype.changeOptions=function(){this._renderer.onOptionsChanged(),this.refreshRows(0,this._rowCount-1),this._fireOnCanvasResize()},t.prototype._fireOnCanvasResize=function(){this._renderer.dimensions.canvasWidth===this._canvasWidth&&this._renderer.dimensions.canvasHeight===this._canvasHeight||this._onDimensionsChange.fire(this._renderer.dimensions)},t.prototype.dispose=function(){e.prototype.dispose.call(this)},t.prototype.setRenderer=function(e){var t=this;this._renderer.dispose(),this._renderer=e,this._renderer.onRequestRedraw((function(e){return t.refreshRows(e.start,e.end,!0)})),this._needsSelectionRefresh=!0,this._fullRefresh()},t.prototype._fullRefresh=function(){this._isPaused?this._needsFullRefresh=!0:this.refreshRows(0,this._rowCount-1)},t.prototype.setColors=function(e){this._renderer.setColors(e),this._fullRefresh()},t.prototype.onDevicePixelRatioChange=function(){this._renderer.onDevicePixelRatioChange(),this.refreshRows(0,this._rowCount-1)},t.prototype.onResize=function(e,t){this._renderer.onResize(e,t),this._fullRefresh()},t.prototype.onCharSizeChanged=function(){this._renderer.onCharSizeChanged()},t.prototype.onBlur=function(){this._renderer.onBlur()},t.prototype.onFocus=function(){this._renderer.onFocus()},t.prototype.onSelectionChanged=function(e,t,r){this._selectionState.start=e,this._selectionState.end=t,this._selectionState.columnSelectMode=r,this._renderer.onSelectionChanged(e,t,r)},t.prototype.onCursorMove=function(){this._renderer.onCursorMove()},t.prototype.clear=function(){this._renderer.clear()},t.prototype.registerCharacterJoiner=function(e){return this._renderer.registerCharacterJoiner(e)},t.prototype.deregisterCharacterJoiner=function(e){return this._renderer.deregisterCharacterJoiner(e)},t=o([s(3,f.IOptionsService),s(4,_.ICharSizeService),s(5,f.IBufferService)],t)}(l.Disposable);t.RenderService=d},function(e,t,r){"use strict";var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CharSizeService=void 0;var o=r(1),s=r(0),a=function(){function e(e,t,r){this._optionsService=r,this.width=0,this.height=0,this._onCharSizeChange=new s.EventEmitter,this._measureStrategy=new c(e,t,this._optionsService)}return Object.defineProperty(e.prototype,"hasValidSize",{get:function(){return this.width>0&&this.height>0},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onCharSizeChange",{get:function(){return this._onCharSizeChange.event},enumerable:!1,configurable:!0}),e.prototype.measure=function(){var e=this._measureStrategy.measure();e.width===this.width&&e.height===this.height||(this.width=e.width,this.height=e.height,this._onCharSizeChange.fire())},e=i([n(2,o.IOptionsService)],e)}();t.CharSizeService=a;var c=function(){function e(e,t,r){this._document=e,this._parentElement=t,this._optionsService=r,this._result={width:0,height:0},this._measureElement=this._document.createElement("span"),this._measureElement.classList.add("xterm-char-measure-element"),this._measureElement.textContent="W",this._measureElement.setAttribute("aria-hidden","true"),this._parentElement.appendChild(this._measureElement)}return e.prototype.measure=function(){this._measureElement.style.fontFamily=this._optionsService.options.fontFamily,this._measureElement.style.fontSize=this._optionsService.options.fontSize+"px";var e=this._measureElement.getBoundingClientRect();return 0!==e.width&&0!==e.height&&(this._result.width=e.width,this._result.height=Math.ceil(e.height)),this._result},e}()},function(e,t,r){"use strict";var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseService=void 0;var o=r(5),s=r(30),a=function(){function e(e,t){this._renderService=e,this._charSizeService=t}return e.prototype.getCoords=function(e,t,r,i,n){return s.getCoords(e,t,r,i,this._charSizeService.hasValidSize,this._renderService.dimensions.actualCellWidth,this._renderService.dimensions.actualCellHeight,n)},e.prototype.getRawByteCoords=function(e,t,r,i){var n=this.getCoords(e,t,r,i);return s.getRawByteCoords(n)},e=i([n(0,o.IRenderService),n(1,o.ICharSizeService)],e)}();t.MouseService=a},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.Linkifier2=void 0;var a=r(1),c=r(0),l=r(2),h=r(7),u=function(e){function t(t){var r=e.call(this)||this;return r._bufferService=t,r._linkProviders=[],r._linkCacheDisposables=[],r._isMouseOut=!0,r._activeLine=-1,r._onShowLinkUnderline=r.register(new c.EventEmitter),r._onHideLinkUnderline=r.register(new c.EventEmitter),r.register(l.getDisposeArrayDisposable(r._linkCacheDisposables)),r}return n(t,e),Object.defineProperty(t.prototype,"onShowLinkUnderline",{get:function(){return this._onShowLinkUnderline.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onHideLinkUnderline",{get:function(){return this._onHideLinkUnderline.event},enumerable:!1,configurable:!0}),t.prototype.registerLinkProvider=function(e){var t=this;return this._linkProviders.push(e),{dispose:function(){var r=t._linkProviders.indexOf(e);-1!==r&&t._linkProviders.splice(r,1)}}},t.prototype.attachToDom=function(e,t,r){var i=this;this._element=e,this._mouseService=t,this._renderService=r,this.register(h.addDisposableDomListener(this._element,"mouseleave",(function(){i._isMouseOut=!0,i._clearCurrentLink()}))),this.register(h.addDisposableDomListener(this._element,"mousemove",this._onMouseMove.bind(this))),this.register(h.addDisposableDomListener(this._element,"click",this._onClick.bind(this)))},t.prototype._onMouseMove=function(e){if(this._lastMouseEvent=e,this._element&&this._mouseService){var t=this._positionFromMouseEvent(e,this._element,this._mouseService);if(t){this._isMouseOut=!1;for(var r=e.composedPath(),i=0;i<r.length;i++){var n=r[i];if(n.classList.contains("xterm"))break;if(n.classList.contains("xterm-hover"))return}this._lastBufferCell&&t.x===this._lastBufferCell.x&&t.y===this._lastBufferCell.y||(this._onHover(t),this._lastBufferCell=t)}}},t.prototype._onHover=function(e){if(this._activeLine!==e.y)return this._clearCurrentLink(),void this._askForLink(e,!1);this._currentLink&&this._linkAtPosition(this._currentLink.link,e)||(this._clearCurrentLink(),this._askForLink(e,!0))},t.prototype._askForLink=function(e,t){var r=this;this._activeProviderReplies&&t||(this._activeProviderReplies=new Map,this._activeLine=e.y);var i=!1;this._linkProviders.forEach((function(n,o){var s;t?(null===(s=r._activeProviderReplies)||void 0===s?void 0:s.get(o))&&(i=r._checkLinkProviderResult(o,e,i)):n.provideLinks(e.y,(function(t){var n,s;if(!r._isMouseOut){var a=null==t?void 0:t.map((function(e){return{link:e}}));null===(n=r._activeProviderReplies)||void 0===n||n.set(o,a),i=r._checkLinkProviderResult(o,e,i),(null===(s=r._activeProviderReplies)||void 0===s?void 0:s.size)===r._linkProviders.length&&r._removeIntersectingLinks(e.y,r._activeProviderReplies)}}))}))},t.prototype._removeIntersectingLinks=function(e,t){for(var r=new Set,i=0;i<t.size;i++){var n=t.get(i);if(n)for(var o=0;o<n.length;o++)for(var s=n[o],a=s.link.range.start.y<e?0:s.link.range.start.x,c=s.link.range.end.y>e?this._bufferService.cols:s.link.range.end.x,l=a;l<=c;l++){if(r.has(l)){n.splice(o--,1);break}r.add(l)}}},t.prototype._checkLinkProviderResult=function(e,t,r){var i,n=this;if(!this._activeProviderReplies)return r;for(var o=this._activeProviderReplies.get(e),s=!1,a=0;a<e;a++)this._activeProviderReplies.has(a)&&!this._activeProviderReplies.get(a)||(s=!0);if(!s&&o){var c=o.find((function(e){return n._linkAtPosition(e.link,t)}));c&&(r=!0,this._handleNewLink(c))}if(this._activeProviderReplies.size===this._linkProviders.length&&!r)for(a=0;a<this._activeProviderReplies.size;a++){var l=null===(i=this._activeProviderReplies.get(a))||void 0===i?void 0:i.find((function(e){return n._linkAtPosition(e.link,t)}));if(l){r=!0,this._handleNewLink(l);break}}return r},t.prototype._onClick=function(e){if(this._element&&this._mouseService&&this._currentLink){var t=this._positionFromMouseEvent(e,this._element,this._mouseService);t&&this._linkAtPosition(this._currentLink.link,t)&&this._currentLink.link.activate(e,this._currentLink.link.text)}},t.prototype._clearCurrentLink=function(e,t){this._element&&this._currentLink&&this._lastMouseEvent&&(!e||!t||this._currentLink.link.range.start.y>=e&&this._currentLink.link.range.end.y<=t)&&(this._linkLeave(this._element,this._currentLink.link,this._lastMouseEvent),this._currentLink=void 0,l.disposeArray(this._linkCacheDisposables))},t.prototype._handleNewLink=function(e){var t=this;if(this._element&&this._lastMouseEvent&&this._mouseService){var r=this._positionFromMouseEvent(this._lastMouseEvent,this._element,this._mouseService);r&&this._linkAtPosition(e.link,r)&&(this._currentLink=e,this._currentLink.state={decorations:{underline:void 0===e.link.decorations||e.link.decorations.underline,pointerCursor:void 0===e.link.decorations||e.link.decorations.pointerCursor},isHovered:!0},this._linkHover(this._element,e.link,this._lastMouseEvent),e.link.decorations={},Object.defineProperties(e.link.decorations,{pointerCursor:{get:function(){var e,r;return null===(r=null===(e=t._currentLink)||void 0===e?void 0:e.state)||void 0===r?void 0:r.decorations.pointerCursor},set:function(e){var r,i;(null===(r=t._currentLink)||void 0===r?void 0:r.state)&&t._currentLink.state.decorations.pointerCursor!==e&&(t._currentLink.state.decorations.pointerCursor=e,t._currentLink.state.isHovered&&(null===(i=t._element)||void 0===i||i.classList.toggle("xterm-cursor-pointer",e)))}},underline:{get:function(){var e,r;return null===(r=null===(e=t._currentLink)||void 0===e?void 0:e.state)||void 0===r?void 0:r.decorations.underline},set:function(r){var i,n,o;(null===(i=t._currentLink)||void 0===i?void 0:i.state)&&(null===(o=null===(n=t._currentLink)||void 0===n?void 0:n.state)||void 0===o?void 0:o.decorations.underline)!==r&&(t._currentLink.state.decorations.underline=r,t._currentLink.state.isHovered&&t._fireUnderlineEvent(e.link,r))}}}),this._renderService&&this._linkCacheDisposables.push(this._renderService.onRenderedBufferChange((function(e){var r=0===e.start?0:e.start+1+t._bufferService.buffer.ydisp;t._clearCurrentLink(r,e.end+1+t._bufferService.buffer.ydisp)}))))}},t.prototype._linkHover=function(e,t,r){var i;(null===(i=this._currentLink)||void 0===i?void 0:i.state)&&(this._currentLink.state.isHovered=!0,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!0),this._currentLink.state.decorations.pointerCursor&&e.classList.add("xterm-cursor-pointer")),t.hover&&t.hover(r,t.text)},t.prototype._fireUnderlineEvent=function(e,t){var r=e.range,i=this._bufferService.buffer.ydisp,n=this._createLinkUnderlineEvent(r.start.x-1,r.start.y-i-1,r.end.x,r.end.y-i-1,void 0);(t?this._onShowLinkUnderline:this._onHideLinkUnderline).fire(n)},t.prototype._linkLeave=function(e,t,r){var i;(null===(i=this._currentLink)||void 0===i?void 0:i.state)&&(this._currentLink.state.isHovered=!1,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!1),this._currentLink.state.decorations.pointerCursor&&e.classList.remove("xterm-cursor-pointer")),t.leave&&t.leave(r,t.text)},t.prototype._linkAtPosition=function(e,t){var r=e.range.start.y===e.range.end.y,i=e.range.start.y<t.y,n=e.range.end.y>t.y;return(r&&e.range.start.x<=t.x&&e.range.end.x>=t.x||i&&e.range.end.x>=t.x||n&&e.range.start.x<=t.x||i&&n)&&e.range.start.y<=t.y&&e.range.end.y>=t.y},t.prototype._positionFromMouseEvent=function(e,t,r){var i=r.getCoords(e,t,this._bufferService.cols,this._bufferService.rows);if(i)return{x:i[0],y:i[1]+this._bufferService.buffer.ydisp}},t.prototype._createLinkUnderlineEvent=function(e,t,r,i,n){return{x1:e,y1:t,x2:r,y2:i,cols:this._bufferService.cols,fg:n}},t=o([s(0,a.IBufferService)],t)}(l.Disposable);t.Linkifier2=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CoreBrowserService=void 0;var i=function(){function e(e){this._textarea=e}return Object.defineProperty(e.prototype,"isFocused",{get:function(){return document.activeElement===this._textarea&&document.hasFocus()},enumerable:!1,configurable:!0}),e}();t.CoreBrowserService=i},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.CoreTerminal=void 0;var o=r(2),s=r(1),a=r(66),c=r(67),l=r(68),h=r(74),u=r(75),f=r(0),_=r(76),d=r(77),p=r(78),v=r(80),g=r(81),y=r(19),b=r(82),S=function(e){function t(t){var r=e.call(this)||this;return r._onBinary=new f.EventEmitter,r._onData=new f.EventEmitter,r._onLineFeed=new f.EventEmitter,r._onResize=new f.EventEmitter,r._onScroll=new f.EventEmitter,r._instantiationService=new a.InstantiationService,r.optionsService=new h.OptionsService(t),r._instantiationService.setService(s.IOptionsService,r.optionsService),r._bufferService=r.register(r._instantiationService.createInstance(l.BufferService)),r._instantiationService.setService(s.IBufferService,r._bufferService),r._logService=r._instantiationService.createInstance(c.LogService),r._instantiationService.setService(s.ILogService,r._logService),r._coreService=r.register(r._instantiationService.createInstance(u.CoreService,(function(){return r.scrollToBottom()}))),r._instantiationService.setService(s.ICoreService,r._coreService),r._coreMouseService=r._instantiationService.createInstance(_.CoreMouseService),r._instantiationService.setService(s.ICoreMouseService,r._coreMouseService),r._dirtyRowService=r._instantiationService.createInstance(d.DirtyRowService),r._instantiationService.setService(s.IDirtyRowService,r._dirtyRowService),r.unicodeService=r._instantiationService.createInstance(p.UnicodeService),r._instantiationService.setService(s.IUnicodeService,r.unicodeService),r._charsetService=r._instantiationService.createInstance(v.CharsetService),r._instantiationService.setService(s.ICharsetService,r._charsetService),r._inputHandler=new y.InputHandler(r._bufferService,r._charsetService,r._coreService,r._dirtyRowService,r._logService,r.optionsService,r._coreMouseService,r.unicodeService),r.register(f.forwardEvent(r._inputHandler.onLineFeed,r._onLineFeed)),r.register(r._inputHandler),r.register(f.forwardEvent(r._bufferService.onResize,r._onResize)),r.register(f.forwardEvent(r._coreService.onData,r._onData)),r.register(f.forwardEvent(r._coreService.onBinary,r._onBinary)),r.register(r.optionsService.onOptionChange((function(e){return r._updateOptions(e)}))),r._writeBuffer=new b.WriteBuffer((function(e){return r._inputHandler.parse(e)})),r}return n(t,e),Object.defineProperty(t.prototype,"onBinary",{get:function(){return this._onBinary.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onData",{get:function(){return this._onData.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onLineFeed",{get:function(){return this._onLineFeed.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onResize",{get:function(){return this._onResize.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onScroll",{get:function(){return this._onScroll.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"cols",{get:function(){return this._bufferService.cols},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rows",{get:function(){return this._bufferService.rows},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"buffers",{get:function(){return this._bufferService.buffers},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){var t;this._isDisposed||(e.prototype.dispose.call(this),null===(t=this._windowsMode)||void 0===t||t.dispose(),this._windowsMode=void 0)},t.prototype.write=function(e,t){this._writeBuffer.write(e,t)},t.prototype.writeSync=function(e){this._writeBuffer.writeSync(e)},t.prototype.resize=function(e,t){isNaN(e)||isNaN(t)||(e=Math.max(e,l.MINIMUM_COLS),t=Math.max(t,l.MINIMUM_ROWS),this._bufferService.resize(e,t))},t.prototype.scroll=function(e,t){void 0===t&&(t=!1);var r,i=this._bufferService.buffer;(r=this._cachedBlankLine)&&r.length===this.cols&&r.getFg(0)===e.fg&&r.getBg(0)===e.bg||(r=i.getBlankLine(e,t),this._cachedBlankLine=r),r.isWrapped=t;var n=i.ybase+i.scrollTop,o=i.ybase+i.scrollBottom;if(0===i.scrollTop){var s=i.lines.isFull;o===i.lines.length-1?s?i.lines.recycle().copyFrom(r):i.lines.push(r.clone()):i.lines.splice(o+1,0,r.clone()),s?this._bufferService.isUserScrolling&&(i.ydisp=Math.max(i.ydisp-1,0)):(i.ybase++,this._bufferService.isUserScrolling||i.ydisp++)}else{var a=o-n+1;i.lines.shiftElements(n+1,a-1,-1),i.lines.set(o,r.clone())}this._bufferService.isUserScrolling||(i.ydisp=i.ybase),this._dirtyRowService.markRangeDirty(i.scrollTop,i.scrollBottom),this._onScroll.fire(i.ydisp)},t.prototype.scrollLines=function(e,t){var r=this._bufferService.buffer;if(e<0){if(0===r.ydisp)return;this._bufferService.isUserScrolling=!0}else e+r.ydisp>=r.ybase&&(this._bufferService.isUserScrolling=!1);var i=r.ydisp;r.ydisp=Math.max(Math.min(r.ydisp+e,r.ybase),0),i!==r.ydisp&&(t||this._onScroll.fire(r.ydisp))},t.prototype.scrollPages=function(e){this.scrollLines(e*(this.rows-1))},t.prototype.scrollToTop=function(){this.scrollLines(-this._bufferService.buffer.ydisp)},t.prototype.scrollToBottom=function(){this.scrollLines(this._bufferService.buffer.ybase-this._bufferService.buffer.ydisp)},t.prototype.scrollToLine=function(e){var t=e-this._bufferService.buffer.ydisp;0!==t&&this.scrollLines(t)},t.prototype.addEscHandler=function(e,t){return this._inputHandler.addEscHandler(e,t)},t.prototype.addDcsHandler=function(e,t){return this._inputHandler.addDcsHandler(e,t)},t.prototype.addCsiHandler=function(e,t){return this._inputHandler.addCsiHandler(e,t)},t.prototype.addOscHandler=function(e,t){return this._inputHandler.addOscHandler(e,t)},t.prototype._setup=function(){this.optionsService.options.windowsMode&&this._enableWindowsMode()},t.prototype.reset=function(){this._inputHandler.reset(),this._bufferService.reset(),this._charsetService.reset(),this._coreService.reset(),this._coreMouseService.reset()},t.prototype._updateOptions=function(e){var t;switch(e){case"scrollback":this.buffers.resize(this.cols,this.rows);break;case"windowsMode":this.optionsService.options.windowsMode?this._enableWindowsMode():(null===(t=this._windowsMode)||void 0===t||t.dispose(),this._windowsMode=void 0)}},t.prototype._enableWindowsMode=function(){var e=this;if(!this._windowsMode){var t=[];t.push(this.onLineFeed(g.updateWindowsModeWrappedState.bind(null,this._bufferService))),t.push(this.addCsiHandler({final:"H"},(function(){return g.updateWindowsModeWrappedState(e._bufferService),!1}))),this._windowsMode={dispose:function(){for(var e=0,r=t;e<r.length;e++){r[e].dispose()}}}}},t}(o.Disposable);t.CoreTerminal=S},function(e,t,r){"use strict";var i=this&&this.__spreadArrays||function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var i=Array(e),n=0;for(t=0;t<r;t++)for(var o=arguments[t],s=0,a=o.length;s<a;s++,n++)i[n]=o[s];return i};Object.defineProperty(t,"__esModule",{value:!0}),t.InstantiationService=t.ServiceCollection=void 0;var n=r(1),o=r(14),s=function(){function e(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._entries=new Map;for(var r=0,i=e;r<i.length;r++){var n=i[r],o=n[0],s=n[1];this.set(o,s)}}return e.prototype.set=function(e,t){var r=this._entries.get(e);return this._entries.set(e,t),r},e.prototype.forEach=function(e){this._entries.forEach((function(t,r){return e(r,t)}))},e.prototype.has=function(e){return this._entries.has(e)},e.prototype.get=function(e){return this._entries.get(e)},e}();t.ServiceCollection=s;var a=function(){function e(){this._services=new s,this._services.set(n.IInstantiationService,this)}return e.prototype.setService=function(e,t){this._services.set(e,t)},e.prototype.getService=function(e){return this._services.get(e)},e.prototype.createInstance=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];for(var n=o.getServiceDependencies(e).sort((function(e,t){return e.index-t.index})),s=[],a=0,c=n;a<c.length;a++){var l=c[a],h=this._services.get(l.id);if(!h)throw new Error("[createInstance] "+e.name+" depends on UNKNOWN service "+l.id+".");s.push(h)}var u=n.length>0?n[0].index:t.length;if(t.length!==u)throw new Error("[createInstance] First service dependency of "+e.name+" at position "+(u+1)+" conflicts with "+t.length+" static arguments");return new(e.bind.apply(e,i([void 0],i(t,s))))},e}();t.InstantiationService=a},function(e,t,r){"use strict";var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var i=Array(e),n=0;for(t=0;t<r;t++)for(var o=arguments[t],s=0,a=o.length;s<a;s++,n++)i[n]=o[s];return i};Object.defineProperty(t,"__esModule",{value:!0}),t.LogService=t.LogLevel=void 0;var s,a=r(1);!function(e){e[e.DEBUG=0]="DEBUG",e[e.INFO=1]="INFO",e[e.WARN=2]="WARN",e[e.ERROR=3]="ERROR",e[e.OFF=4]="OFF"}(s=t.LogLevel||(t.LogLevel={}));var c={debug:s.DEBUG,info:s.INFO,warn:s.WARN,error:s.ERROR,off:s.OFF},l=function(){function e(e){var t=this;this._optionsService=e,this._updateLogLevel(),this._optionsService.onOptionChange((function(e){"logLevel"===e&&t._updateLogLevel()}))}return e.prototype._updateLogLevel=function(){this._logLevel=c[this._optionsService.options.logLevel]},e.prototype._evalLazyOptionalParams=function(e){for(var t=0;t<e.length;t++)"function"==typeof e[t]&&(e[t]=e[t]())},e.prototype._log=function(e,t,r){this._evalLazyOptionalParams(r),e.call.apply(e,o([console,"xterm.js: "+t],r))},e.prototype.debug=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this._logLevel<=s.DEBUG&&this._log(console.log,e,t)},e.prototype.info=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this._logLevel<=s.INFO&&this._log(console.info,e,t)},e.prototype.warn=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this._logLevel<=s.WARN&&this._log(console.warn,e,t)},e.prototype.error=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this._logLevel<=s.ERROR&&this._log(console.error,e,t)},e=i([n(0,a.IOptionsService)],e)}();t.LogService=l},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.BufferService=t.MINIMUM_ROWS=t.MINIMUM_COLS=void 0;var a=r(1),c=r(69),l=r(0),h=r(2);t.MINIMUM_COLS=2,t.MINIMUM_ROWS=1;var u=function(e){function r(r){var i=e.call(this)||this;return i._optionsService=r,i.isUserScrolling=!1,i._onResize=new l.EventEmitter,i.cols=Math.max(r.options.cols,t.MINIMUM_COLS),i.rows=Math.max(r.options.rows,t.MINIMUM_ROWS),i.buffers=new c.BufferSet(r,i),i}return n(r,e),Object.defineProperty(r.prototype,"onResize",{get:function(){return this._onResize.event},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"buffer",{get:function(){return this.buffers.active},enumerable:!1,configurable:!0}),r.prototype.dispose=function(){e.prototype.dispose.call(this),this.buffers.dispose()},r.prototype.resize=function(e,t){this.cols=e,this.rows=t,this.buffers.resize(e,t),this.buffers.setupTabStops(this.cols),this._onResize.fire({cols:e,rows:t})},r.prototype.reset=function(){this.buffers.dispose(),this.buffers=new c.BufferSet(this._optionsService,this),this.isUserScrolling=!1},r=o([s(0,a.IOptionsService)],r)}(h.Disposable);t.BufferService=u},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.BufferSet=void 0;var o=r(70),s=r(0),a=function(e){function t(t,r){var i=e.call(this)||this;return i._onBufferActivate=i.register(new s.EventEmitter),i._normal=new o.Buffer(!0,t,r),i._normal.fillViewportRows(),i._alt=new o.Buffer(!1,t,r),i._activeBuffer=i._normal,i.setupTabStops(),i}return n(t,e),Object.defineProperty(t.prototype,"onBufferActivate",{get:function(){return this._onBufferActivate.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"alt",{get:function(){return this._alt},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"active",{get:function(){return this._activeBuffer},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"normal",{get:function(){return this._normal},enumerable:!1,configurable:!0}),t.prototype.activateNormalBuffer=function(){this._activeBuffer!==this._normal&&(this._normal.x=this._alt.x,this._normal.y=this._alt.y,this._alt.clear(),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}))},t.prototype.activateAltBuffer=function(e){this._activeBuffer!==this._alt&&(this._alt.fillViewportRows(e),this._alt.x=this._normal.x,this._alt.y=this._normal.y,this._activeBuffer=this._alt,this._onBufferActivate.fire({activeBuffer:this._alt,inactiveBuffer:this._normal}))},t.prototype.resize=function(e,t){this._normal.resize(e,t),this._alt.resize(e,t)},t.prototype.setupTabStops=function(e){this._normal.setupTabStops(e),this._alt.setupTabStops(e)},t}(r(2).Disposable);t.BufferSet=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BufferStringIterator=t.Buffer=t.MAX_BUFFER_SIZE=void 0;var i=r(71),n=r(16),o=r(4),s=r(3),a=r(72),c=r(73),l=r(20),h=r(6);t.MAX_BUFFER_SIZE=4294967295;var u=function(){function e(e,t,r){this._hasScrollback=e,this._optionsService=t,this._bufferService=r,this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.savedY=0,this.savedX=0,this.savedCurAttrData=n.DEFAULT_ATTR_DATA.clone(),this.savedCharset=l.DEFAULT_CHARSET,this.markers=[],this._nullCell=o.CellData.fromCharData([0,s.NULL_CELL_CHAR,s.NULL_CELL_WIDTH,s.NULL_CELL_CODE]),this._whitespaceCell=o.CellData.fromCharData([0,s.WHITESPACE_CELL_CHAR,s.WHITESPACE_CELL_WIDTH,s.WHITESPACE_CELL_CODE]),this._cols=this._bufferService.cols,this._rows=this._bufferService.rows,this.lines=new i.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops()}return e.prototype.getNullCell=function(e){return e?(this._nullCell.fg=e.fg,this._nullCell.bg=e.bg,this._nullCell.extended=e.extended):(this._nullCell.fg=0,this._nullCell.bg=0,this._nullCell.extended=new h.ExtendedAttrs),this._nullCell},e.prototype.getWhitespaceCell=function(e){return e?(this._whitespaceCell.fg=e.fg,this._whitespaceCell.bg=e.bg,this._whitespaceCell.extended=e.extended):(this._whitespaceCell.fg=0,this._whitespaceCell.bg=0,this._whitespaceCell.extended=new h.ExtendedAttrs),this._whitespaceCell},e.prototype.getBlankLine=function(e,t){return new n.BufferLine(this._bufferService.cols,this.getNullCell(e),t)},Object.defineProperty(e.prototype,"hasScrollback",{get:function(){return this._hasScrollback&&this.lines.maxLength>this._rows},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isCursorInViewport",{get:function(){var e=this.ybase+this.y-this.ydisp;return e>=0&&e<this._rows},enumerable:!1,configurable:!0}),e.prototype._getCorrectBufferLength=function(e){if(!this._hasScrollback)return e;var r=e+this._optionsService.options.scrollback;return r>t.MAX_BUFFER_SIZE?t.MAX_BUFFER_SIZE:r},e.prototype.fillViewportRows=function(e){if(0===this.lines.length){void 0===e&&(e=n.DEFAULT_ATTR_DATA);for(var t=this._rows;t--;)this.lines.push(this.getBlankLine(e))}},e.prototype.clear=function(){this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.lines=new i.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops()},e.prototype.resize=function(e,t){var r=this.getNullCell(n.DEFAULT_ATTR_DATA),i=this._getCorrectBufferLength(t);if(i>this.lines.maxLength&&(this.lines.maxLength=i),this.lines.length>0){if(this._cols<e)for(var o=0;o<this.lines.length;o++)this.lines.get(o).resize(e,r);var s=0;if(this._rows<t)for(var a=this._rows;a<t;a++)this.lines.length<t+this.ybase&&(this._optionsService.options.windowsMode?this.lines.push(new n.BufferLine(e,r)):this.ybase>0&&this.lines.length<=this.ybase+this.y+s+1?(this.ybase--,s++,this.ydisp>0&&this.ydisp--):this.lines.push(new n.BufferLine(e,r)));else for(a=this._rows;a>t;a--)this.lines.length>t+this.ybase&&(this.lines.length>this.ybase+this.y+1?this.lines.pop():(this.ybase++,this.ydisp++));if(i<this.lines.maxLength){var c=this.lines.length-i;c>0&&(this.lines.trimStart(c),this.ybase=Math.max(this.ybase-c,0),this.ydisp=Math.max(this.ydisp-c,0),this.savedY=Math.max(this.savedY-c,0)),this.lines.maxLength=i}this.x=Math.min(this.x,e-1),this.y=Math.min(this.y,t-1),s&&(this.y+=s),this.savedX=Math.min(this.savedX,e-1),this.scrollTop=0}if(this.scrollBottom=t-1,this._isReflowEnabled&&(this._reflow(e,t),this._cols>e))for(o=0;o<this.lines.length;o++)this.lines.get(o).resize(e,r);this._cols=e,this._rows=t},Object.defineProperty(e.prototype,"_isReflowEnabled",{get:function(){return this._hasScrollback&&!this._optionsService.options.windowsMode},enumerable:!1,configurable:!0}),e.prototype._reflow=function(e,t){this._cols!==e&&(e>this._cols?this._reflowLarger(e,t):this._reflowSmaller(e,t))},e.prototype._reflowLarger=function(e,t){var r=a.reflowLargerGetLinesToRemove(this.lines,this._cols,e,this.ybase+this.y,this.getNullCell(n.DEFAULT_ATTR_DATA));if(r.length>0){var i=a.reflowLargerCreateNewLayout(this.lines,r);a.reflowLargerApplyNewLayout(this.lines,i.layout),this._reflowLargerAdjustViewport(e,t,i.countRemoved)}},e.prototype._reflowLargerAdjustViewport=function(e,t,r){for(var i=this.getNullCell(n.DEFAULT_ATTR_DATA),o=r;o-- >0;)0===this.ybase?(this.y>0&&this.y--,this.lines.length<t&&this.lines.push(new n.BufferLine(e,i))):(this.ydisp===this.ybase&&this.ydisp--,this.ybase--);this.savedY=Math.max(this.savedY-r,0)},e.prototype._reflowSmaller=function(e,t){for(var r=this.getNullCell(n.DEFAULT_ATTR_DATA),i=[],o=0,s=this.lines.length-1;s>=0;s--){var c=this.lines.get(s);if(!(!c||!c.isWrapped&&c.getTrimmedLength()<=e)){for(var l=[c];c.isWrapped&&s>0;)c=this.lines.get(--s),l.unshift(c);var h=this.ybase+this.y;if(!(h>=s&&h<s+l.length)){var u=l[l.length-1].getTrimmedLength(),f=a.reflowSmallerGetNewLineLengths(l,this._cols,e),_=f.length-l.length,d=void 0;d=0===this.ybase&&this.y!==this.lines.length-1?Math.max(0,this.y-this.lines.maxLength+_):Math.max(0,this.lines.length-this.lines.maxLength+_);for(var p=[],v=0;v<_;v++){var g=this.getBlankLine(n.DEFAULT_ATTR_DATA,!0);p.push(g)}p.length>0&&(i.push({start:s+l.length+o,newLines:p}),o+=p.length),l.push.apply(l,p);var y=f.length-1,b=f[y];0===b&&(b=f[--y]);for(var S=l.length-_-1,m=u;S>=0;){var C=Math.min(m,b);if(l[y].copyCellsFrom(l[S],m-C,b-C,C,!0),0===(b-=C)&&(b=f[--y]),0===(m-=C)){S--;var w=Math.max(S,0);m=a.getWrappedLineTrimmedLength(l,w,this._cols)}}for(v=0;v<l.length;v++)f[v]<e&&l[v].setCell(f[v],r);for(var E=_-d;E-- >0;)0===this.ybase?this.y<t-1?(this.y++,this.lines.pop()):(this.ybase++,this.ydisp++):this.ybase<Math.min(this.lines.maxLength,this.lines.length+o)-t&&(this.ybase===this.ydisp&&this.ydisp++,this.ybase++);this.savedY=Math.min(this.savedY+_,this.ybase+t-1)}}}if(i.length>0){var L=[],A=[];for(v=0;v<this.lines.length;v++)A.push(this.lines.get(v));var R=this.lines.length,k=R-1,x=0,D=i[x];this.lines.length=Math.min(this.lines.maxLength,this.lines.length+o);var T=0;for(v=Math.min(this.lines.maxLength-1,R+o-1);v>=0;v--)if(D&&D.start>k+T){for(var O=D.newLines.length-1;O>=0;O--)this.lines.set(v--,D.newLines[O]);v++,L.push({index:k+1,amount:D.newLines.length}),T+=D.newLines.length,D=i[++x]}else this.lines.set(v,A[k--]);var M=0;for(v=L.length-1;v>=0;v--)L[v].index+=M,this.lines.onInsertEmitter.fire(L[v]),M+=L[v].amount;var P=Math.max(0,R+o-this.lines.maxLength);P>0&&this.lines.onTrimEmitter.fire(P)}},e.prototype.stringIndexToBufferIndex=function(e,t,r){for(void 0===r&&(r=!1);t;){var i=this.lines.get(e);if(!i)return[-1,-1];for(var n=r?i.getTrimmedLength():i.length,o=0;o<n;++o)if(i.get(o)[s.CHAR_DATA_WIDTH_INDEX]&&(t-=i.get(o)[s.CHAR_DATA_CHAR_INDEX].length||1),t<0)return[e,o];e++}return[e,0]},e.prototype.translateBufferLineToString=function(e,t,r,i){void 0===r&&(r=0);var n=this.lines.get(e);return n?n.translateToString(t,r,i):""},e.prototype.getWrappedRangeForLine=function(e){for(var t=e,r=e;t>0&&this.lines.get(t).isWrapped;)t--;for(;r+1<this.lines.length&&this.lines.get(r+1).isWrapped;)r++;return{first:t,last:r}},e.prototype.setupTabStops=function(e){for(null!=e?this.tabs[e]||(e=this.prevStop(e)):(this.tabs={},e=0);e<this._cols;e+=this._optionsService.options.tabStopWidth)this.tabs[e]=!0},e.prototype.prevStop=function(e){for(null==e&&(e=this.x);!this.tabs[--e]&&e>0;);return e>=this._cols?this._cols-1:e<0?0:e},e.prototype.nextStop=function(e){for(null==e&&(e=this.x);!this.tabs[++e]&&e<this._cols;);return e>=this._cols?this._cols-1:e<0?0:e},e.prototype.addMarker=function(e){var t=this,r=new c.Marker(e);return this.markers.push(r),r.register(this.lines.onTrim((function(e){r.line-=e,r.line<0&&r.dispose()}))),r.register(this.lines.onInsert((function(e){r.line>=e.index&&(r.line+=e.amount)}))),r.register(this.lines.onDelete((function(e){r.line>=e.index&&r.line<e.index+e.amount&&r.dispose(),r.line>e.index&&(r.line-=e.amount)}))),r.register(r.onDispose((function(){return t._removeMarker(r)}))),r},e.prototype._removeMarker=function(e){this.markers.splice(this.markers.indexOf(e),1)},e.prototype.iterator=function(e,t,r,i,n){return new f(this,e,t,r,i,n)},e}();t.Buffer=u;var f=function(){function e(e,t,r,i,n,o){void 0===r&&(r=0),void 0===i&&(i=e.lines.length),void 0===n&&(n=0),void 0===o&&(o=0),this._buffer=e,this._trimRight=t,this._startIndex=r,this._endIndex=i,this._startOverscan=n,this._endOverscan=o,this._startIndex<0&&(this._startIndex=0),this._endIndex>this._buffer.lines.length&&(this._endIndex=this._buffer.lines.length),this._current=this._startIndex}return e.prototype.hasNext=function(){return this._current<this._endIndex},e.prototype.next=function(){var e=this._buffer.getWrappedRangeForLine(this._current);e.first<this._startIndex-this._startOverscan&&(e.first=this._startIndex-this._startOverscan),e.last>this._endIndex+this._endOverscan&&(e.last=this._endIndex+this._endOverscan),e.first=Math.max(e.first,0),e.last=Math.min(e.last,this._buffer.lines.length);for(var t="",r=e.first;r<=e.last;++r)t+=this._buffer.translateBufferLineToString(r,this._trimRight);return this._current=e.last+1,{range:e,content:t}},e}();t.BufferStringIterator=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CircularList=void 0;var i=r(0),n=function(){function e(e){this._maxLength=e,this.onDeleteEmitter=new i.EventEmitter,this.onInsertEmitter=new i.EventEmitter,this.onTrimEmitter=new i.EventEmitter,this._array=new Array(this._maxLength),this._startIndex=0,this._length=0}return Object.defineProperty(e.prototype,"onDelete",{get:function(){return this.onDeleteEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onInsert",{get:function(){return this.onInsertEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onTrim",{get:function(){return this.onTrimEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxLength",{get:function(){return this._maxLength},set:function(e){if(this._maxLength!==e){for(var t=new Array(e),r=0;r<Math.min(e,this.length);r++)t[r]=this._array[this._getCyclicIndex(r)];this._array=t,this._maxLength=e,this._startIndex=0}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._length},set:function(e){if(e>this._length)for(var t=this._length;t<e;t++)this._array[t]=void 0;this._length=e},enumerable:!1,configurable:!0}),e.prototype.get=function(e){return this._array[this._getCyclicIndex(e)]},e.prototype.set=function(e,t){this._array[this._getCyclicIndex(e)]=t},e.prototype.push=function(e){this._array[this._getCyclicIndex(this._length)]=e,this._length===this._maxLength?(this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1)):this._length++},e.prototype.recycle=function(){if(this._length!==this._maxLength)throw new Error("Can only recycle when the buffer is full");return this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1),this._array[this._getCyclicIndex(this._length-1)]},Object.defineProperty(e.prototype,"isFull",{get:function(){return this._length===this._maxLength},enumerable:!1,configurable:!0}),e.prototype.pop=function(){return this._array[this._getCyclicIndex(this._length---1)]},e.prototype.splice=function(e,t){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];if(t){for(var n=e;n<this._length-t;n++)this._array[this._getCyclicIndex(n)]=this._array[this._getCyclicIndex(n+t)];this._length-=t}for(n=this._length-1;n>=e;n--)this._array[this._getCyclicIndex(n+r.length)]=this._array[this._getCyclicIndex(n)];for(n=0;n<r.length;n++)this._array[this._getCyclicIndex(e+n)]=r[n];if(this._length+r.length>this._maxLength){var o=this._length+r.length-this._maxLength;this._startIndex+=o,this._length=this._maxLength,this.onTrimEmitter.fire(o)}else this._length+=r.length},e.prototype.trimStart=function(e){e>this._length&&(e=this._length),this._startIndex+=e,this._length-=e,this.onTrimEmitter.fire(e)},e.prototype.shiftElements=function(e,t,r){if(!(t<=0)){if(e<0||e>=this._length)throw new Error("start argument out of range");if(e+r<0)throw new Error("Cannot shift elements in list beyond index 0");if(r>0){for(var i=t-1;i>=0;i--)this.set(e+i+r,this.get(e+i));var n=e+t+r-this._length;if(n>0)for(this._length+=n;this._length>this._maxLength;)this._length--,this._startIndex++,this.onTrimEmitter.fire(1)}else for(i=0;i<t;i++)this.set(e+i+r,this.get(e+i))}},e.prototype._getCyclicIndex=function(e){return(this._startIndex+e)%this._maxLength},e}();t.CircularList=n},function(e,t,r){"use strict";function i(e,t,r){if(t===e.length-1)return e[t].getTrimmedLength();var i=!e[t].hasContent(r-1)&&1===e[t].getWidth(r-1),n=2===e[t+1].getWidth(0);return i&&n?r-1:r}Object.defineProperty(t,"__esModule",{value:!0}),t.getWrappedLineTrimmedLength=t.reflowSmallerGetNewLineLengths=t.reflowLargerApplyNewLayout=t.reflowLargerCreateNewLayout=t.reflowLargerGetLinesToRemove=void 0,t.reflowLargerGetLinesToRemove=function(e,t,r,n,o){for(var s=[],a=0;a<e.length-1;a++){var c=a,l=e.get(++c);if(l.isWrapped){for(var h=[e.get(a)];c<e.length&&l.isWrapped;)h.push(l),l=e.get(++c);if(n>=a&&n<c)a+=h.length-1;else{for(var u=0,f=i(h,u,t),_=1,d=0;_<h.length;){var p=i(h,_,t),v=p-d,g=r-f,y=Math.min(v,g);h[u].copyCellsFrom(h[_],d,f,y,!1),(f+=y)===r&&(u++,f=0),(d+=y)===p&&(_++,d=0),0===f&&0!==u&&2===h[u-1].getWidth(r-1)&&(h[u].copyCellsFrom(h[u-1],r-1,f++,1,!1),h[u-1].setCell(r-1,o))}h[u].replaceCells(f,r,o);for(var b=0,S=h.length-1;S>0&&(S>u||0===h[S].getTrimmedLength());S--)b++;b>0&&(s.push(a+h.length-b),s.push(b)),a+=h.length-1}}}return s},t.reflowLargerCreateNewLayout=function(e,t){for(var r=[],i=0,n=t[i],o=0,s=0;s<e.length;s++)if(n===s){var a=t[++i];e.onDeleteEmitter.fire({index:s-o,amount:a}),s+=a-1,o+=a,n=t[++i]}else r.push(s);return{layout:r,countRemoved:o}},t.reflowLargerApplyNewLayout=function(e,t){for(var r=[],i=0;i<t.length;i++)r.push(e.get(t[i]));for(i=0;i<r.length;i++)e.set(i,r[i]);e.length=t.length},t.reflowSmallerGetNewLineLengths=function(e,t,r){for(var n=[],o=e.map((function(r,n){return i(e,n,t)})).reduce((function(e,t){return e+t})),s=0,a=0,c=0;c<o;){if(o-c<r){n.push(o-c);break}s+=r;var l=i(e,a,t);s>l&&(s-=l,a++);var h=2===e[a].getWidth(s-1);h&&s--;var u=h?r-1:r;n.push(u),c+=u}return n},t.getWrappedLineTrimmedLength=i},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Marker=void 0;var o=r(0),s=function(e){function t(r){var i=e.call(this)||this;return i.line=r,i._id=t._nextId++,i.isDisposed=!1,i._onDispose=new o.EventEmitter,i}return n(t,e),Object.defineProperty(t.prototype,"id",{get:function(){return this._id},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onDispose",{get:function(){return this._onDispose.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this.line=-1,this._onDispose.fire())},t._nextId=1,t}(r(2).Disposable);t.Marker=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OptionsService=t.DEFAULT_OPTIONS=t.DEFAULT_BELL_SOUND=void 0;var i=r(0),n=r(11),o=r(33);t.DEFAULT_BELL_SOUND="data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjMyLjEwNAAAAAAAAAAAAAAA//tQxAADB8AhSmxhIIEVCSiJrDCQBTcu3UrAIwUdkRgQbFAZC1CQEwTJ9mjRvBA4UOLD8nKVOWfh+UlK3z/177OXrfOdKl7pyn3Xf//WreyTRUoAWgBgkOAGbZHBgG1OF6zM82DWbZaUmMBptgQhGjsyYqc9ae9XFz280948NMBWInljyzsNRFLPWdnZGWrddDsjK1unuSrVN9jJsK8KuQtQCtMBjCEtImISdNKJOopIpBFpNSMbIHCSRpRR5iakjTiyzLhchUUBwCgyKiweBv/7UsQbg8isVNoMPMjAAAA0gAAABEVFGmgqK////9bP/6XCykxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq",t.DEFAULT_OPTIONS=Object.freeze({cols:80,rows:24,cursorBlink:!1,cursorStyle:"block",cursorWidth:1,bellSound:t.DEFAULT_BELL_SOUND,bellStyle:"none",drawBoldTextInBrightColors:!0,fastScrollModifier:"alt",fastScrollSensitivity:5,fontFamily:"courier-new, courier, monospace",fontSize:15,fontWeight:"normal",fontWeightBold:"bold",lineHeight:1,linkTooltipHoverDuration:500,letterSpacing:0,logLevel:"info",scrollback:1e3,scrollSensitivity:1,screenReaderMode:!1,macOptionIsMeta:!1,macOptionClickForcesSelection:!1,minimumContrastRatio:1,disableStdin:!1,allowProposedApi:!0,allowTransparency:!1,tabStopWidth:8,theme:{},rightClickSelectsWord:n.isMac,rendererType:"canvas",windowOptions:{},windowsMode:!1,wordSeparator:" ()[]{}\',\\"`",convertEol:!1,termName:"xterm",cancelEvents:!1});var s=["cols","rows"],a=function(){function e(e){this._onOptionChange=new i.EventEmitter,this.options=o.clone(t.DEFAULT_OPTIONS);for(var r=0,n=Object.keys(e);r<n.length;r++){var s=n[r];if(s in this.options){var a=e[s];this.options[s]=a}}}return Object.defineProperty(e.prototype,"onOptionChange",{get:function(){return this._onOptionChange.event},enumerable:!1,configurable:!0}),e.prototype.setOption=function(e,r){if(!(e in t.DEFAULT_OPTIONS))throw new Error(\'No option with key "\'+e+\'"\');if(-1!==s.indexOf(e))throw new Error(\'Option "\'+e+\'" can only be set in the constructor\');this.options[e]!==r&&(r=this._sanitizeAndValidateOption(e,r),this.options[e]!==r&&(this.options[e]=r,this._onOptionChange.fire(e)))},e.prototype._sanitizeAndValidateOption=function(e,r){switch(e){case"bellStyle":case"cursorStyle":case"fontWeight":case"fontWeightBold":case"rendererType":case"wordSeparator":r||(r=t.DEFAULT_OPTIONS[e]);break;case"cursorWidth":r=Math.floor(r);case"lineHeight":case"tabStopWidth":if(r<1)throw new Error(e+" cannot be less than 1, value: "+r);break;case"minimumContrastRatio":r=Math.max(1,Math.min(21,Math.round(10*r)/10));break;case"scrollback":if((r=Math.min(r,4294967295))<0)throw new Error(e+" cannot be less than 0, value: "+r);break;case"fastScrollSensitivity":case"scrollSensitivity":if(r<=0)throw new Error(e+" cannot be less than or equal to 0, value: "+r)}return r},e.prototype.getOption=function(e){if(!(e in t.DEFAULT_OPTIONS))throw new Error(\'No option with key "\'+e+\'"\');return this.options[e]},e}();t.OptionsService=a},function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreService=void 0;var a=r(1),c=r(0),l=r(33),h=r(2),u=Object.freeze({insertMode:!1}),f=Object.freeze({applicationCursorKeys:!1,applicationKeypad:!1,bracketedPasteMode:!1,origin:!1,reverseWraparound:!1,sendFocus:!1,wraparound:!0}),_=function(e){function t(t,r,i,n){var o=e.call(this)||this;return o._bufferService=r,o._logService=i,o._optionsService=n,o.isCursorInitialized=!1,o.isCursorHidden=!1,o._onData=o.register(new c.EventEmitter),o._onUserInput=o.register(new c.EventEmitter),o._onBinary=o.register(new c.EventEmitter),o._scrollToBottom=t,o.register({dispose:function(){return o._scrollToBottom=void 0}}),o.modes=l.clone(u),o.decPrivateModes=l.clone(f),o}return n(t,e),Object.defineProperty(t.prototype,"onData",{get:function(){return this._onData.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onUserInput",{get:function(){return this._onUserInput.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onBinary",{get:function(){return this._onBinary.event},enumerable:!1,configurable:!0}),t.prototype.reset=function(){this.modes=l.clone(u),this.decPrivateModes=l.clone(f)},t.prototype.triggerDataEvent=function(e,t){if(void 0===t&&(t=!1),!this._optionsService.options.disableStdin){var r=this._bufferService.buffer;r.ybase!==r.ydisp&&this._scrollToBottom(),t&&this._onUserInput.fire(),this._logService.debug(\'sending data "\'+e+\'"\',(function(){return e.split("").map((function(e){return e.charCodeAt(0)}))})),this._onData.fire(e)}},t.prototype.triggerBinaryEvent=function(e){this._optionsService.options.disableStdin||(this._logService.debug(\'sending binary "\'+e+\'"\',(function(){return e.split("").map((function(e){return e.charCodeAt(0)}))})),this._onBinary.fire(e))},t=o([s(1,a.IBufferService),s(2,a.ILogService),s(3,a.IOptionsService)],t)}(h.Disposable);t.CoreService=_},function(e,t,r){"use strict";var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreMouseService=void 0;var o=r(1),s=r(0),a={NONE:{events:0,restrict:function(){return!1}},X10:{events:1,restrict:function(e){return 4!==e.button&&1===e.action&&(e.ctrl=!1,e.alt=!1,e.shift=!1,!0)}},VT200:{events:19,restrict:function(e){return 32!==e.action}},DRAG:{events:23,restrict:function(e){return 32!==e.action||3!==e.button}},ANY:{events:31,restrict:function(e){return!0}}};function c(e,t){var r=(e.ctrl?16:0)|(e.shift?4:0)|(e.alt?8:0);return 4===e.button?(r|=64,r|=e.action):(r|=3&e.button,4&e.button&&(r|=64),8&e.button&&(r|=128),32===e.action?r|=32:0!==e.action||t||(r|=3)),r}var l=String.fromCharCode,h={DEFAULT:function(e){var t=[c(e,!1)+32,e.col+32,e.row+32];return t[0]>255||t[1]>255||t[2]>255?"":"[M"+l(t[0])+l(t[1])+l(t[2])},SGR:function(e){var t=0===e.action&&4!==e.button?"m":"M";return"[<"+c(e,!0)+";"+e.col+";"+e.row+t}},u=function(){function e(e,t){this._bufferService=e,this._coreService=t,this._protocols={},this._encodings={},this._activeProtocol="",this._activeEncoding="",this._onProtocolChange=new s.EventEmitter,this._lastEvent=null;for(var r=0,i=Object.keys(a);r<i.length;r++){var n=i[r];this.addProtocol(n,a[n])}for(var o=0,c=Object.keys(h);o<c.length;o++){var l=c[o];this.addEncoding(l,h[l])}this.reset()}return e.prototype.addProtocol=function(e,t){this._protocols[e]=t},e.prototype.addEncoding=function(e,t){this._encodings[e]=t},Object.defineProperty(e.prototype,"activeProtocol",{get:function(){return this._activeProtocol},set:function(e){if(!this._protocols[e])throw new Error(\'unknown protocol "\'+e+\'"\');this._activeProtocol=e,this._onProtocolChange.fire(this._protocols[e].events)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"areMouseEventsActive",{get:function(){return 0!==this._protocols[this._activeProtocol].events},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeEncoding",{get:function(){return this._activeEncoding},set:function(e){if(!this._encodings[e])throw new Error(\'unknown encoding "\'+e+\'"\');this._activeEncoding=e},enumerable:!1,configurable:!0}),e.prototype.reset=function(){this.activeProtocol="NONE",this.activeEncoding="DEFAULT",this._lastEvent=null},Object.defineProperty(e.prototype,"onProtocolChange",{get:function(){return this._onProtocolChange.event},enumerable:!1,configurable:!0}),e.prototype.triggerMouseEvent=function(e){if(e.col<0||e.col>=this._bufferService.cols||e.row<0||e.row>=this._bufferService.rows)return!1;if(4===e.button&&32===e.action)return!1;if(3===e.button&&32!==e.action)return!1;if(4!==e.button&&(2===e.action||3===e.action))return!1;if(e.col++,e.row++,32===e.action&&this._lastEvent&&this._compareEvents(this._lastEvent,e))return!1;if(!this._protocols[this._activeProtocol].restrict(e))return!1;var t=this._encodings[this._activeEncoding](e);return t&&("DEFAULT"===this._activeEncoding?this._coreService.triggerBinaryEvent(t):this._coreService.triggerDataEvent(t,!0)),this._lastEvent=e,!0},e.prototype.explainEvents=function(e){return{down:!!(1&e),up:!!(2&e),drag:!!(4&e),move:!!(8&e),wheel:!!(16&e)}},e.prototype._compareEvents=function(e,t){return e.col===t.col&&(e.row===t.row&&(e.button===t.button&&(e.action===t.action&&(e.ctrl===t.ctrl&&(e.alt===t.alt&&e.shift===t.shift)))))},e=i([n(0,o.IBufferService),n(1,o.ICoreService)],e)}();t.CoreMouseService=u},function(e,t,r){"use strict";var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e)}};Object.defineProperty(t,"__esModule",{value:!0}),t.DirtyRowService=void 0;var o=r(1),s=function(){function e(e){this._bufferService=e,this.clearRange()}return Object.defineProperty(e.prototype,"start",{get:function(){return this._start},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"end",{get:function(){return this._end},enumerable:!1,configurable:!0}),e.prototype.clearRange=function(){this._start=this._bufferService.buffer.y,this._end=this._bufferService.buffer.y},e.prototype.markDirty=function(e){e<this._start?this._start=e:e>this._end&&(this._end=e)},e.prototype.markRangeDirty=function(e,t){if(e>t){var r=e;e=t,t=r}e<this._start&&(this._start=e),t>this._end&&(this._end=t)},e.prototype.markAllDirty=function(){this.markRangeDirty(0,this._bufferService.rows-1)},e=i([n(0,o.IBufferService)],e)}();t.DirtyRowService=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeService=void 0;var i=r(0),n=r(79),o=function(){function e(){this._providers=Object.create(null),this._active="",this._onChange=new i.EventEmitter;var e=new n.UnicodeV6;this.register(e),this._active=e.version,this._activeProvider=e}return Object.defineProperty(e.prototype,"onChange",{get:function(){return this._onChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"versions",{get:function(){return Object.keys(this._providers)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeVersion",{get:function(){return this._active},set:function(e){if(!this._providers[e])throw new Error(\'unknown Unicode version "\'+e+\'"\');this._active=e,this._activeProvider=this._providers[e],this._onChange.fire(e)},enumerable:!1,configurable:!0}),e.prototype.register=function(e){this._providers[e.version]=e},e.prototype.wcwidth=function(e){return this._activeProvider.wcwidth(e)},e.prototype.getStringCellWidth=function(e){for(var t=0,r=e.length,i=0;i<r;++i){var n=e.charCodeAt(i);if(55296<=n&&n<=56319){if(++i>=r)return t+this.wcwidth(n);var o=e.charCodeAt(i);56320<=o&&o<=57343?n=1024*(n-55296)+o-56320+65536:t+=this.wcwidth(o)}t+=this.wcwidth(n)}return t},e}();t.UnicodeService=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeV6=void 0;var i,n=r(15),o=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531]],s=[[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]];var a=function(){function e(){if(this.version="6",!i){i=new Uint8Array(65536),n.fill(i,1),i[0]=0,n.fill(i,0,1,32),n.fill(i,0,127,160),n.fill(i,2,4352,4448),i[9001]=2,i[9002]=2,n.fill(i,2,11904,42192),i[12351]=1,n.fill(i,2,44032,55204),n.fill(i,2,63744,64256),n.fill(i,2,65040,65050),n.fill(i,2,65072,65136),n.fill(i,2,65280,65377),n.fill(i,2,65504,65511);for(var e=0;e<o.length;++e)n.fill(i,0,o[e][0],o[e][1]+1)}}return e.prototype.wcwidth=function(e){return e<32?0:e<127?1:e<65536?i[e]:function(e,t){var r,i=0,n=t.length-1;if(e<t[0][0]||e>t[n][1])return!1;for(;n>=i;)if(e>t[r=i+n>>1][1])i=r+1;else{if(!(e<t[r][0]))return!0;n=r-1}return!1}(e,s)?0:e>=131072&&e<=196605||e>=196608&&e<=262141?2:1},e}();t.UnicodeV6=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CharsetService=void 0;var i=function(){function e(){this.glevel=0,this._charsets=[]}return e.prototype.reset=function(){this.charset=void 0,this._charsets=[],this.glevel=0},e.prototype.setgLevel=function(e){this.glevel=e,this.charset=this._charsets[e]},e.prototype.setgCharset=function(e,t){this._charsets[e]=t,this.glevel===e&&(this.charset=t)},e}();t.CharsetService=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateWindowsModeWrappedState=void 0;var i=r(3);t.updateWindowsModeWrappedState=function(e){var t=e.buffer.lines.get(e.buffer.ybase+e.buffer.y-1),r=null==t?void 0:t.get(e.cols-1),n=e.buffer.lines.get(e.buffer.ybase+e.buffer.y);n&&r&&(n.isWrapped=r[i.CHAR_DATA_CODE_INDEX]!==i.NULL_CELL_CODE&&r[i.CHAR_DATA_CODE_INDEX]!==i.WHITESPACE_CELL_CODE)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WriteBuffer=void 0;var i=function(){function e(e){this._action=e,this._writeBuffer=[],this._callbacks=[],this._pendingData=0,this._bufferOffset=0}return e.prototype.writeSync=function(e){if(this._writeBuffer.length){for(var t=this._bufferOffset;t<this._writeBuffer.length;++t){var r=this._writeBuffer[t],i=this._callbacks[t];this._action(r),i&&i()}this._writeBuffer=[],this._callbacks=[],this._pendingData=0,this._bufferOffset=2147483647}this._action(e)},e.prototype.write=function(e,t){var r=this;if(this._pendingData>5e7)throw new Error("write data discarded, use flow control to avoid losing data");this._writeBuffer.length||(this._bufferOffset=0,setTimeout((function(){return r._innerWrite()}))),this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(t)},e.prototype._innerWrite=function(){for(var e=this,t=Date.now();this._writeBuffer.length>this._bufferOffset;){var r=this._writeBuffer[this._bufferOffset],i=this._callbacks[this._bufferOffset];if(this._bufferOffset++,this._action(r),this._pendingData-=r.length,i&&i(),Date.now()-t>=12)break}this._writeBuffer.length>this._bufferOffset?(this._bufferOffset>50&&(this._writeBuffer=this._writeBuffer.slice(this._bufferOffset),this._callbacks=this._callbacks.slice(this._bufferOffset),this._bufferOffset=0),setTimeout((function(){return e._innerWrite()}),0)):(this._writeBuffer=[],this._callbacks=[],this._pendingData=0,this._bufferOffset=0)},e}();t.WriteBuffer=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AddonManager=void 0;var i=function(){function e(){this._addons=[]}return e.prototype.dispose=function(){for(var e=this._addons.length-1;e>=0;e--)this._addons[e].instance.dispose()},e.prototype.loadAddon=function(e,t){var r=this,i={instance:t,dispose:t.dispose,isDisposed:!1};this._addons.push(i),t.dispose=function(){return r._wrappedAddonDispose(i)},t.activate(e)},e.prototype._wrappedAddonDispose=function(e){if(!e.isDisposed){for(var t=-1,r=0;r<this._addons.length;r++)if(this._addons[r]===e){t=r;break}if(-1===t)throw new Error("Could not dispose an addon that has not been loaded");e.isDisposed=!0,e.dispose.apply(e.instance),this._addons.splice(t,1)}},e}();t.AddonManager=i}])}));\n//# sourceMappingURL=xterm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n')},function(module,exports,__webpack_require__){eval('!function(e,t){ true?module.exports=t():undefined}(window,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FitAddon=void 0;var n=function(){function e(){}return e.prototype.activate=function(e){this._terminal=e},e.prototype.dispose=function(){},e.prototype.fit=function(){var e=this.proposeDimensions();if(e&&this._terminal){var t=this._terminal._core;this._terminal.rows===e.rows&&this._terminal.cols===e.cols||(t._renderService.clear(),this._terminal.resize(e.cols,e.rows))}},e.prototype.proposeDimensions=function(){if(this._terminal&&this._terminal.element&&this._terminal.element.parentElement){var e=this._terminal._core,t=window.getComputedStyle(this._terminal.element.parentElement),r=parseInt(t.getPropertyValue("height")),n=Math.max(0,parseInt(t.getPropertyValue("width"))),o=window.getComputedStyle(this._terminal.element),i=r-(parseInt(o.getPropertyValue("padding-top"))+parseInt(o.getPropertyValue("padding-bottom"))),a=n-(parseInt(o.getPropertyValue("padding-right"))+parseInt(o.getPropertyValue("padding-left")))-e.viewport.scrollBarWidth;return{cols:Math.max(2,Math.floor(a/e._renderService.dimensions.actualCellWidth)),rows:Math.max(1,Math.floor(i/e._renderService.dimensions.actualCellHeight))}}},e}();t.FitAddon=n}])}));\n//# sourceMappingURL=xterm-addon-fit.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0tYWRkb24tZml0L2xpYi94dGVybS1hZGRvbi1maXQuanM/NDdkMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlLEtBQWlELG9CQUFvQixTQUErRyxDQUFDLG9CQUFvQixtQkFBbUIsU0FBUyxjQUFjLDRCQUE0QixZQUFZLHFCQUFxQiwyREFBMkQsdUNBQXVDLHFDQUFxQyxvQkFBb0IsRUFBRSxpQkFBaUIsNEZBQTRGLGVBQWUsd0NBQXdDLFNBQVMsRUFBRSxtQkFBbUIsOEJBQThCLHFEQUFxRCwwQkFBMEIsNkNBQTZDLHNCQUFzQiw2REFBNkQsWUFBWSxlQUFlLFNBQVMsaUJBQWlCLGlDQUFpQyxpQkFBaUIsWUFBWSxVQUFVLHNCQUFzQixtQkFBbUIsaURBQWlELGlCQUFpQixrQkFBa0IsYUFBYSxzQ0FBc0MsU0FBUyxvQkFBb0IsaUJBQWlCLGNBQWMsd0NBQXdDLGlCQUFpQixpQ0FBaUMsNEJBQTRCLCtCQUErQixzQkFBc0IsMkJBQTJCLDZIQUE2SCwwQ0FBMEMsaUZBQWlGLHNjQUFzYyxPQUFPLHlKQUF5SixHQUFHLEdBQUcsYUFBYSxHQUFHO0FBQzl5RSIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuRml0QWRkb249dCgpOmUuRml0QWRkb249dCgpfSh3aW5kb3csKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIHIobil7aWYodFtuXSlyZXR1cm4gdFtuXS5leHBvcnRzO3ZhciBvPXRbbl09e2k6bixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW25dLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHIpLG8ubD0hMCxvLmV4cG9ydHN9cmV0dXJuIHIubT1lLHIuYz10LHIuZD1mdW5jdGlvbihlLHQsbil7ci5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsZ2V0Om59KX0sci5yPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LHIudD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9cihlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgbj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKHIucihuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIG8gaW4gZSlyLmQobixvLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwsbykpO3JldHVybiBufSxyLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIHIuZCh0LFwiYVwiLHQpLHR9LHIubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sci5wPVwiXCIscihyLnM9MCl9KFtmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5GaXRBZGRvbj12b2lkIDA7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXJldHVybiBlLnByb3RvdHlwZS5hY3RpdmF0ZT1mdW5jdGlvbihlKXt0aGlzLl90ZXJtaW5hbD1lfSxlLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7fSxlLnByb3RvdHlwZS5maXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnByb3Bvc2VEaW1lbnNpb25zKCk7aWYoZSYmdGhpcy5fdGVybWluYWwpe3ZhciB0PXRoaXMuX3Rlcm1pbmFsLl9jb3JlO3RoaXMuX3Rlcm1pbmFsLnJvd3M9PT1lLnJvd3MmJnRoaXMuX3Rlcm1pbmFsLmNvbHM9PT1lLmNvbHN8fCh0Ll9yZW5kZXJTZXJ2aWNlLmNsZWFyKCksdGhpcy5fdGVybWluYWwucmVzaXplKGUuY29scyxlLnJvd3MpKX19LGUucHJvdG90eXBlLnByb3Bvc2VEaW1lbnNpb25zPWZ1bmN0aW9uKCl7aWYodGhpcy5fdGVybWluYWwmJnRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQmJnRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQucGFyZW50RWxlbWVudCl7dmFyIGU9dGhpcy5fdGVybWluYWwuX2NvcmUsdD13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLl90ZXJtaW5hbC5lbGVtZW50LnBhcmVudEVsZW1lbnQpLHI9cGFyc2VJbnQodC5nZXRQcm9wZXJ0eVZhbHVlKFwiaGVpZ2h0XCIpKSxuPU1hdGgubWF4KDAscGFyc2VJbnQodC5nZXRQcm9wZXJ0eVZhbHVlKFwid2lkdGhcIikpKSxvPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQpLGk9ci0ocGFyc2VJbnQoby5nZXRQcm9wZXJ0eVZhbHVlKFwicGFkZGluZy10b3BcIikpK3BhcnNlSW50KG8uZ2V0UHJvcGVydHlWYWx1ZShcInBhZGRpbmctYm90dG9tXCIpKSksYT1uLShwYXJzZUludChvLmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLXJpZ2h0XCIpKStwYXJzZUludChvLmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLWxlZnRcIikpKS1lLnZpZXdwb3J0LnNjcm9sbEJhcldpZHRoO3JldHVybntjb2xzOk1hdGgubWF4KDIsTWF0aC5mbG9vcihhL2UuX3JlbmRlclNlcnZpY2UuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGgpKSxyb3dzOk1hdGgubWF4KDEsTWF0aC5mbG9vcihpL2UuX3JlbmRlclNlcnZpY2UuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0KSl9fX0sZX0oKTt0LkZpdEFkZG9uPW59XSl9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD14dGVybS1hZGRvbi1maXQuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar reactIs = __webpack_require__(24);\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanM/ZGE2YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixjQUFjLG1CQUFPLENBQUMsRUFBVTs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUIsaUJBQWlCO0FBQ3BDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6IjI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/* unused harmony export loadStyles */\n/* unused harmony export configureLoadStyles */\n/* unused harmony export configureRunMode */\n/* unused harmony export flush */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return loadTheme; });\n/* unused harmony export clearStyles */\n/* unused harmony export detokenize */\n/* unused harmony export splitStyles */\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Store the theming state in __themeState__ global scope for reuse in the case of duplicate\n// load-themed-styles hosted on the page.\nvar _root = typeof window === 'undefined' ? global : window; // eslint-disable-line @typescript-eslint/no-explicit-any\n// Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).\nvar _styleNonce = _root && _root.CSPSettings && _root.CSPSettings.nonce;\nvar _themeState = initializeThemeState();\n/**\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\n */\nvar _themeTokenRegex = /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\nvar now = function () {\n    return typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n};\nfunction measure(func) {\n    var start = now();\n    func();\n    var end = now();\n    _themeState.perf.duration += end - start;\n}\n/**\n * initialize global state object\n */\nfunction initializeThemeState() {\n    var state = _root.__themeState__ || {\n        theme: undefined,\n        lastStyleElement: undefined,\n        registeredStyles: []\n    };\n    if (!state.runState) {\n        state = __assign({}, state, { perf: {\n                count: 0,\n                duration: 0\n            }, runState: {\n                flushTimer: 0,\n                mode: 0 /* sync */,\n                buffer: []\n            } });\n    }\n    if (!state.registeredThemableStyles) {\n        state = __assign({}, state, { registeredThemableStyles: [] });\n    }\n    _root.__themeState__ = state;\n    return state;\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\n * event is fired.\n * @param {string | ThemableArray} styles Themable style text to register.\n * @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.\n */\nfunction loadStyles(styles, loadAsync) {\n    if (loadAsync === void 0) { loadAsync = false; }\n    measure(function () {\n        var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);\n        var _a = _themeState.runState, mode = _a.mode, buffer = _a.buffer, flushTimer = _a.flushTimer;\n        if (loadAsync || mode === 1 /* async */) {\n            buffer.push(styleParts);\n            if (!flushTimer) {\n                _themeState.runState.flushTimer = asyncLoadStyles();\n            }\n        }\n        else {\n            applyThemableStyles(styleParts);\n        }\n    });\n}\n/**\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\n * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}\n * a loadStyles callback that gets called when styles are loaded or reloaded\n */\nfunction configureLoadStyles(loadStylesFn) {\n    _themeState.loadStyles = loadStylesFn;\n}\n/**\n * Configure run mode of load-themable-styles\n * @param mode load-themable-styles run mode, async or sync\n */\nfunction configureRunMode(mode) {\n    _themeState.runState.mode = mode;\n}\n/**\n * external code can call flush to synchronously force processing of currently buffered styles\n */\nfunction flush() {\n    measure(function () {\n        var styleArrays = _themeState.runState.buffer.slice();\n        _themeState.runState.buffer = [];\n        var mergedStyleArray = [].concat.apply([], styleArrays);\n        if (mergedStyleArray.length > 0) {\n            applyThemableStyles(mergedStyleArray);\n        }\n    });\n}\n/**\n * register async loadStyles\n */\nfunction asyncLoadStyles() {\n    return setTimeout(function () {\n        _themeState.runState.flushTimer = 0;\n        flush();\n    }, 0);\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\n * is fired.\n * @param {string} styleText Style to register.\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\n */\nfunction applyThemableStyles(stylesArray, styleRecord) {\n    if (_themeState.loadStyles) {\n        _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);\n    }\n    else {\n        registerStyles(stylesArray);\n    }\n}\n/**\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\n * replaced.\n * @param {theme} theme JSON object of theme tokens to values.\n */\nfunction loadTheme(theme) {\n    _themeState.theme = theme;\n    // reload styles.\n    reloadStyles();\n}\n/**\n * Clear already registered style elements and style records in theme_State object\n * @param option - specify which group of registered styles should be cleared.\n * Default to be both themable and non-themable styles will be cleared\n */\nfunction clearStyles(option) {\n    if (option === void 0) { option = 3 /* all */; }\n    if (option === 3 /* all */ || option === 2 /* onlyNonThemable */) {\n        clearStylesInternal(_themeState.registeredStyles);\n        _themeState.registeredStyles = [];\n    }\n    if (option === 3 /* all */ || option === 1 /* onlyThemable */) {\n        clearStylesInternal(_themeState.registeredThemableStyles);\n        _themeState.registeredThemableStyles = [];\n    }\n}\nfunction clearStylesInternal(records) {\n    records.forEach(function (styleRecord) {\n        var styleElement = styleRecord && styleRecord.styleElement;\n        if (styleElement && styleElement.parentElement) {\n            styleElement.parentElement.removeChild(styleElement);\n        }\n    });\n}\n/**\n * Reloads styles.\n */\nfunction reloadStyles() {\n    if (_themeState.theme) {\n        var themableStyles = [];\n        for (var _i = 0, _a = _themeState.registeredThemableStyles; _i < _a.length; _i++) {\n            var styleRecord = _a[_i];\n            themableStyles.push(styleRecord.themableStyle);\n        }\n        if (themableStyles.length > 0) {\n            clearStyles(1 /* onlyThemable */);\n            applyThemableStyles([].concat.apply([], themableStyles));\n        }\n    }\n}\n/**\n * Find theme tokens and replaces them with provided theme values.\n * @param {string} styles Tokenized styles to fix.\n */\nfunction detokenize(styles) {\n    if (styles) {\n        styles = resolveThemableArray(splitStyles(styles)).styleString;\n    }\n    return styles;\n}\n/**\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\n */\nfunction resolveThemableArray(splitStyleArray) {\n    var theme = _themeState.theme;\n    var themable = false;\n    // Resolve the array of theming instructions to an array of strings.\n    // Then join the array to produce the final CSS string.\n    var resolvedArray = (splitStyleArray || []).map(function (currentValue) {\n        var themeSlot = currentValue.theme;\n        if (themeSlot) {\n            themable = true;\n            // A theming annotation. Resolve it.\n            var themedValue = theme ? theme[themeSlot] : undefined;\n            var defaultValue = currentValue.defaultValue || 'inherit';\n            // Warn to console if we hit an unthemed value even when themes are provided, but only if \"DEBUG\" is true.\n            // Allow the themedValue to be undefined to explicitly request the default value.\n            if (theme &&\n                !themedValue &&\n                console &&\n                !(themeSlot in theme) &&\n                typeof DEBUG !== 'undefined' &&\n                DEBUG) {\n                console.warn(\"Theming value not provided for \\\"\" + themeSlot + \"\\\". Falling back to \\\"\" + defaultValue + \"\\\".\");\n            }\n            return themedValue || defaultValue;\n        }\n        else {\n            // A non-themable string. Preserve it.\n            return currentValue.rawString;\n        }\n    });\n    return {\n        styleString: resolvedArray.join(''),\n        themable: themable\n    };\n}\n/**\n * Split tokenized CSS into an array of strings and theme specification objects\n * @param {string} styles Tokenized styles to split.\n */\nfunction splitStyles(styles) {\n    var result = [];\n    if (styles) {\n        var pos = 0; // Current position in styles.\n        var tokenMatch = void 0; // eslint-disable-line @rushstack/no-null\n        while ((tokenMatch = _themeTokenRegex.exec(styles))) {\n            var matchIndex = tokenMatch.index;\n            if (matchIndex > pos) {\n                result.push({\n                    rawString: styles.substring(pos, matchIndex)\n                });\n            }\n            result.push({\n                theme: tokenMatch[1],\n                defaultValue: tokenMatch[2] // May be undefined\n            });\n            // index of the first character after the current match\n            pos = _themeTokenRegex.lastIndex;\n        }\n        // Push the rest of the string after the last match.\n        result.push({\n            rawString: styles.substring(pos)\n        });\n    }\n    return result;\n}\n/**\n * Registers a set of style text. If it is registered too early, we will register it when the\n * window.load event is fired.\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\n */\nfunction registerStyles(styleArray) {\n    if (typeof document === 'undefined') {\n        return;\n    }\n    var head = document.getElementsByTagName('head')[0];\n    var styleElement = document.createElement('style');\n    var _a = resolveThemableArray(styleArray), styleString = _a.styleString, themable = _a.themable;\n    styleElement.setAttribute('data-load-themed-styles', 'true');\n    if (_styleNonce) {\n        styleElement.setAttribute('nonce', _styleNonce);\n    }\n    styleElement.appendChild(document.createTextNode(styleString));\n    _themeState.perf.count++;\n    head.appendChild(styleElement);\n    var ev = document.createEvent('HTMLEvents');\n    ev.initEvent('styleinsert', true /* bubbleEvent */, false /* cancelable */);\n    ev.args = {\n        newStyle: styleElement\n    };\n    document.dispatchEvent(ev);\n    var record = {\n        styleElement: styleElement,\n        themableStyle: styleArray\n    };\n    if (themable) {\n        _themeState.registeredThemableStyles.push(record);\n    }\n    else {\n        _themeState.registeredStyles.push(record);\n    }\n}\n//# sourceMappingURL=index.js.map\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(23)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n")},,,,,,,,,,,function(module,exports,__webpack_require__){"use strict";eval('/** @license React v16.13.1\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar l=__webpack_require__(22),n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.forward_ref"):60112,y=n?Symbol.for("react.suspense"):60113,z=n?Symbol.for("react.memo"):60115,A=n?Symbol.for("react.lazy"):\n60116,B="function"===typeof Symbol&&Symbol.iterator;function C(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}\nvar D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,"setState")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};\nfunction G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}\nfunction N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return"object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}\nfunction S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}\nfunction T(a,b,c,e){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,""===b?"."+U(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||"object"!==typeof a?f=null:(f=B&&a[B]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),k=\n0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if("object"===d)throw c=""+a,Error(C(31,"[object Object]"===c?"object with keys {"+Object.keys(a).join(", ")+"}":c,""));return g}function V(a,b,c){return null==a?0:T(a,"",b,c)}function U(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}\nfunction aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+c)),e.push(a))}function X(a,b,c,e,d){var g="";null!=c&&(g=(""+c).replace(P,"$&/")+"/");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}\nvar ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};\nexports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,\nkey:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;\nexports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version="16.13.1";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39\n')},function(module,exports,__webpack_require__){"use strict";eval('/** @license React v16.13.1\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\nvar aa=__webpack_require__(0),n=__webpack_require__(22),r=__webpack_require__(41);function u(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(u(227));\nfunction ba(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var da=!1,ea=null,fa=!1,ha=null,ia={onError:function(a){da=!0;ea=a}};function ja(a,b,c,d,e,f,g,h,k){da=!1;ea=null;ba.apply(ia,arguments)}function ka(a,b,c,d,e,f,g,h,k){ja.apply(this,arguments);if(da){if(da){var l=ea;da=!1;ea=null}else throw Error(u(198));fa||(fa=!0,ha=l)}}var la=null,ma=null,na=null;\nfunction oa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=na(c);ka(d,b,void 0,a);a.currentTarget=null}var pa=null,qa={};\nfunction ra(){if(pa)for(var a in qa){var b=qa[a],c=pa.indexOf(a);if(!(-1<c))throw Error(u(96,a));if(!sa[c]){if(!b.extractEvents)throw Error(u(97,a));sa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;if(ta.hasOwnProperty(h))throw Error(u(99,h));ta[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ua(k[e],g,h);e=!0}else f.registrationName?(ua(f.registrationName,g,h),e=!0):e=!1;if(!e)throw Error(u(98,d,a));}}}}\nfunction ua(a,b,c){if(va[a])throw Error(u(100,a));va[a]=b;wa[a]=b.eventTypes[c].dependencies}var sa=[],ta={},va={},wa={};function xa(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];if(!qa.hasOwnProperty(c)||qa[c]!==d){if(qa[c])throw Error(u(102,c));qa[c]=d;b=!0}}b&&ra()}var ya=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),za=null,Aa=null,Ba=null;\nfunction Ca(a){if(a=ma(a)){if("function"!==typeof za)throw Error(u(280));var b=a.stateNode;b&&(b=la(b),za(a.stateNode,a.type,b))}}function Da(a){Aa?Ba?Ba.push(a):Ba=[a]:Aa=a}function Ea(){if(Aa){var a=Aa,b=Ba;Ba=Aa=null;Ca(a);if(b)for(a=0;a<b.length;a++)Ca(b[a])}}function Fa(a,b){return a(b)}function Ga(a,b,c,d,e){return a(b,c,d,e)}function Ha(){}var Ia=Fa,Ja=!1,Ka=!1;function La(){if(null!==Aa||null!==Ba)Ha(),Ea()}\nfunction Ma(a,b,c){if(Ka)return a(b,c);Ka=!0;try{return Ia(a,b,c)}finally{Ka=!1,La()}}var Na=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,Oa=Object.prototype.hasOwnProperty,Pa={},Qa={};\nfunction Ra(a){if(Oa.call(Qa,a))return!0;if(Oa.call(Pa,a))return!1;if(Na.test(a))return Qa[a]=!0;Pa[a]=!0;return!1}function Sa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}\nfunction Ta(a,b,c,d){if(null===b||"undefined"===typeof b||Sa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f}var C={};\n"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){C[a]=new v(a,0,!1,a,null,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];C[b]=new v(b,1,!1,a[1],null,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){C[a]=new v(a,2,!1,a.toLowerCase(),null,!1)});\n["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){C[a]=new v(a,2,!1,a,null,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){C[a]=new v(a,3,!1,a.toLowerCase(),null,!1)});\n["checked","multiple","muted","selected"].forEach(function(a){C[a]=new v(a,3,!0,a,null,!1)});["capture","download"].forEach(function(a){C[a]=new v(a,4,!1,a,null,!1)});["cols","rows","size","span"].forEach(function(a){C[a]=new v(a,6,!1,a,null,!1)});["rowSpan","start"].forEach(function(a){C[a]=new v(a,5,!1,a.toLowerCase(),null,!1)});var Ua=/[\\-:]([a-z])/g;function Va(a){return a[1].toUpperCase()}\n"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(Ua,\nVa);C[b]=new v(b,1,!1,a,null,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1)});["tabIndex","crossOrigin"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!1)});\nC.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0);["src","href","action","formAction"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!0)});var Wa=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Wa.hasOwnProperty("ReactCurrentDispatcher")||(Wa.ReactCurrentDispatcher={current:null});Wa.hasOwnProperty("ReactCurrentBatchConfig")||(Wa.ReactCurrentBatchConfig={suspense:null});\nfunction Xa(a,b,c,d){var e=C.hasOwnProperty(b)?C[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(Ta(b,c,e,d)&&(c=null),d||null===e?Ra(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}\nvar Ya=/^(.*)[\\\\\\/]/,E="function"===typeof Symbol&&Symbol.for,Za=E?Symbol.for("react.element"):60103,$a=E?Symbol.for("react.portal"):60106,ab=E?Symbol.for("react.fragment"):60107,bb=E?Symbol.for("react.strict_mode"):60108,cb=E?Symbol.for("react.profiler"):60114,db=E?Symbol.for("react.provider"):60109,eb=E?Symbol.for("react.context"):60110,fb=E?Symbol.for("react.concurrent_mode"):60111,gb=E?Symbol.for("react.forward_ref"):60112,hb=E?Symbol.for("react.suspense"):60113,ib=E?Symbol.for("react.suspense_list"):\n60120,jb=E?Symbol.for("react.memo"):60115,kb=E?Symbol.for("react.lazy"):60116,lb=E?Symbol.for("react.block"):60121,mb="function"===typeof Symbol&&Symbol.iterator;function nb(a){if(null===a||"object"!==typeof a)return null;a=mb&&a[mb]||a["@@iterator"];return"function"===typeof a?a:null}function ob(a){if(-1===a._status){a._status=0;var b=a._ctor;b=b();a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}}\nfunction pb(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ab:return"Fragment";case $a:return"Portal";case cb:return"Profiler";case bb:return"StrictMode";case hb:return"Suspense";case ib:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case eb:return"Context.Consumer";case db:return"Context.Provider";case gb:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+")":\n"ForwardRef");case jb:return pb(a.type);case lb:return pb(a.render);case kb:if(a=1===a._status?a._result:null)return pb(a)}return null}function qb(a){var b="";do{a:switch(a.tag){case 3:case 4:case 6:case 7:case 10:case 9:var c="";break a;default:var d=a._debugOwner,e=a._debugSource,f=pb(a.type);c=null;d&&(c=pb(d.type));d=f;f="";e?f=" (at "+e.fileName.replace(Ya,"")+":"+e.lineNumber+")":c&&(f=" (created by "+c+")");c="\\n    in "+(d||"Unknown")+f}b+=c;a=a.return}while(a);return b}\nfunction rb(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function sb(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}\nfunction tb(a){var b=sb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function xb(a){a._valueTracker||(a._valueTracker=tb(a))}function yb(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=sb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function zb(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}\nfunction Ab(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=rb(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Bb(a,b){b=b.checked;null!=b&&Xa(a,"checked",b,!1)}\nfunction Cb(a,b){Bb(a,b);var c=rb(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Db(a,b.type,c):b.hasOwnProperty("defaultValue")&&Db(a,b.type,rb(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction Eb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}\nfunction Db(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function Fb(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function Gb(a,b){a=n({children:void 0},b);if(b=Fb(b.children))a.children=b;return a}\nfunction Hb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+rb(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction Ib(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(u(91));return n({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function Jb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(u(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(u(93));c=c[0]}b=c}null==b&&(b="");c=b}a._wrapperState={initialValue:rb(c)}}\nfunction Kb(a,b){var c=rb(b.value),d=rb(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function Lb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b)}var Mb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};\nfunction Nb(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ob(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Nb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}\nvar Pb,Qb=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Mb.svg||"innerHTML"in a)a.innerHTML=b;else{Pb=Pb||document.createElement("div");Pb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=Pb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction Rb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}function Sb(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Tb={animationend:Sb("Animation","AnimationEnd"),animationiteration:Sb("Animation","AnimationIteration"),animationstart:Sb("Animation","AnimationStart"),transitionend:Sb("Transition","TransitionEnd")},Ub={},Vb={};\nya&&(Vb=document.createElement("div").style,"AnimationEvent"in window||(delete Tb.animationend.animation,delete Tb.animationiteration.animation,delete Tb.animationstart.animation),"TransitionEvent"in window||delete Tb.transitionend.transition);function Wb(a){if(Ub[a])return Ub[a];if(!Tb[a])return a;var b=Tb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Vb)return Ub[a]=b[c];return a}\nvar Xb=Wb("animationend"),Yb=Wb("animationiteration"),Zb=Wb("animationstart"),$b=Wb("transitionend"),ac="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),bc=new ("function"===typeof WeakMap?WeakMap:Map);function cc(a){var b=bc.get(a);void 0===b&&(b=new Map,bc.set(a,b));return b}\nfunction dc(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.effectTag&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function ec(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function fc(a){if(dc(a)!==a)throw Error(u(188));}\nfunction gc(a){var b=a.alternate;if(!b){b=dc(a);if(null===b)throw Error(u(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return fc(e),a;if(f===d)return fc(e),b;f=f.sibling}throw Error(u(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(u(189));}}if(c.alternate!==d)throw Error(u(190));}if(3!==c.tag)throw Error(u(188));return c.stateNode.current===c?a:b}function hc(a){a=gc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}\nfunction ic(a,b){if(null==b)throw Error(u(30));if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function jc(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var kc=null;\nfunction lc(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)oa(a,b[d],c[d]);else b&&oa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function mc(a){null!==a&&(kc=ic(kc,a));a=kc;kc=null;if(a){jc(a,lc);if(kc)throw Error(u(95));if(fa)throw a=ha,fa=!1,ha=null,a;}}\nfunction nc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function oc(a){if(!ya)return!1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}var pc=[];function qc(a){a.topLevelType=null;a.nativeEvent=null;a.targetInst=null;a.ancestors.length=0;10>pc.length&&pc.push(a)}\nfunction rc(a,b,c,d){if(pc.length){var e=pc.pop();e.topLevelType=a;e.eventSystemFlags=d;e.nativeEvent=b;e.targetInst=c;return e}return{topLevelType:a,eventSystemFlags:d,nativeEvent:b,targetInst:c,ancestors:[]}}\nfunction sc(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d=c;if(3===d.tag)d=d.stateNode.containerInfo;else{for(;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo}if(!d)break;b=c.tag;5!==b&&6!==b||a.ancestors.push(c);c=tc(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=nc(a.nativeEvent);d=a.topLevelType;var f=a.nativeEvent,g=a.eventSystemFlags;0===c&&(g|=64);for(var h=null,k=0;k<sa.length;k++){var l=sa[k];l&&(l=l.extractEvents(d,b,f,e,g))&&(h=\nic(h,l))}mc(h)}}function uc(a,b,c){if(!c.has(a)){switch(a){case "scroll":vc(b,"scroll",!0);break;case "focus":case "blur":vc(b,"focus",!0);vc(b,"blur",!0);c.set("blur",null);c.set("focus",null);break;case "cancel":case "close":oc(a)&&vc(b,a,!0);break;case "invalid":case "submit":case "reset":break;default:-1===ac.indexOf(a)&&F(a,b)}c.set(a,null)}}\nvar wc,xc,yc,zc=!1,Ac=[],Bc=null,Cc=null,Dc=null,Ec=new Map,Fc=new Map,Gc=[],Hc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ic="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");\nfunction Jc(a,b){var c=cc(b);Hc.forEach(function(a){uc(a,b,c)});Ic.forEach(function(a){uc(a,b,c)})}function Kc(a,b,c,d,e){return{blockedOn:a,topLevelType:b,eventSystemFlags:c|32,nativeEvent:e,container:d}}\nfunction Lc(a,b){switch(a){case "focus":case "blur":Bc=null;break;case "dragenter":case "dragleave":Cc=null;break;case "mouseover":case "mouseout":Dc=null;break;case "pointerover":case "pointerout":Ec.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Fc.delete(b.pointerId)}}function Mc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=Kc(b,c,d,e,f),null!==b&&(b=Nc(b),null!==b&&xc(b)),a;a.eventSystemFlags|=d;return a}\nfunction Oc(a,b,c,d,e){switch(b){case "focus":return Bc=Mc(Bc,a,b,c,d,e),!0;case "dragenter":return Cc=Mc(Cc,a,b,c,d,e),!0;case "mouseover":return Dc=Mc(Dc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Ec.set(f,Mc(Ec.get(f)||null,a,b,c,d,e));return!0;case "gotpointercapture":return f=e.pointerId,Fc.set(f,Mc(Fc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction Pc(a){var b=tc(a.target);if(null!==b){var c=dc(b);if(null!==c)if(b=c.tag,13===b){if(b=ec(c),null!==b){a.blockedOn=b;r.unstable_runWithPriority(a.priority,function(){yc(c)});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}function Qc(a){if(null!==a.blockedOn)return!1;var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);if(null!==b){var c=Nc(b);null!==c&&xc(c);a.blockedOn=b;return!1}return!0}\nfunction Sc(a,b,c){Qc(a)&&c.delete(b)}function Tc(){for(zc=!1;0<Ac.length;){var a=Ac[0];if(null!==a.blockedOn){a=Nc(a.blockedOn);null!==a&&wc(a);break}var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);null!==b?a.blockedOn=b:Ac.shift()}null!==Bc&&Qc(Bc)&&(Bc=null);null!==Cc&&Qc(Cc)&&(Cc=null);null!==Dc&&Qc(Dc)&&(Dc=null);Ec.forEach(Sc);Fc.forEach(Sc)}function Uc(a,b){a.blockedOn===b&&(a.blockedOn=null,zc||(zc=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Tc)))}\nfunction Vc(a){function b(b){return Uc(b,a)}if(0<Ac.length){Uc(Ac[0],a);for(var c=1;c<Ac.length;c++){var d=Ac[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Bc&&Uc(Bc,a);null!==Cc&&Uc(Cc,a);null!==Dc&&Uc(Dc,a);Ec.forEach(b);Fc.forEach(b);for(c=0;c<Gc.length;c++)d=Gc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Gc.length&&(c=Gc[0],null===c.blockedOn);)Pc(c),null===c.blockedOn&&Gc.shift()}\nvar Wc={},Yc=new Map,Zc=new Map,$c=["abort","abort",Xb,"animationEnd",Yb,"animationIteration",Zb,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking",\n"seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",$b,"transitionEnd","waiting","waiting"];function ad(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1],f="on"+(e[0].toUpperCase()+e.slice(1));f={phasedRegistrationNames:{bubbled:f,captured:f+"Capture"},dependencies:[d],eventPriority:b};Zc.set(d,b);Yc.set(d,f);Wc[e]=f}}\nad("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0);\nad("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);ad($c,2);for(var bd="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),cd=0;cd<bd.length;cd++)Zc.set(bd[cd],0);\nvar dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function F(a,b){vc(b,a,!1)}function vc(a,b,c){var d=Zc.get(b);switch(void 0===d?2:d){case 0:d=gd.bind(null,b,1,a);break;case 1:d=hd.bind(null,b,1,a);break;default:d=id.bind(null,b,1,a)}c?a.addEventListener(b,d,!0):a.addEventListener(b,d,!1)}function gd(a,b,c,d){Ja||Ha();var e=id,f=Ja;Ja=!0;try{Ga(e,a,b,c,d)}finally{(Ja=f)||La()}}function hd(a,b,c,d){ed(dd,id.bind(null,a,b,c,d))}\nfunction id(a,b,c,d){if(fd)if(0<Ac.length&&-1<Hc.indexOf(a))a=Kc(null,a,b,c,d),Ac.push(a);else{var e=Rc(a,b,c,d);if(null===e)Lc(a,d);else if(-1<Hc.indexOf(a))a=Kc(e,a,b,c,d),Ac.push(a);else if(!Oc(e,a,b,c,d)){Lc(a,d);a=rc(a,d,null,b);try{Ma(sc,a)}finally{qc(a)}}}}\nfunction Rc(a,b,c,d){c=nc(d);c=tc(c);if(null!==c){var e=dc(c);if(null===e)c=null;else{var f=e.tag;if(13===f){c=ec(e);if(null!==c)return c;c=null}else if(3===f){if(e.stateNode.hydrate)return 3===e.tag?e.stateNode.containerInfo:null;c=null}else e!==c&&(c=null)}}a=rc(a,d,c,b);try{Ma(sc,a)}finally{qc(a)}return null}\nvar jd={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,\nfloodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},kd=["Webkit","ms","Moz","O"];Object.keys(jd).forEach(function(a){kd.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);jd[b]=jd[a]})});function ld(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||jd.hasOwnProperty(a)&&jd[a]?(""+b).trim():b+"px"}\nfunction md(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=ld(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var nd=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction od(a,b){if(b){if(nd[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(u(137,a,""));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(u(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(u(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(u(62,""));}}\nfunction pd(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}var qd=Mb.html;function rd(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=cc(a);b=wa[b];for(var d=0;d<b.length;d++)uc(b[d],a,c)}function sd(){}\nfunction td(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function ud(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function vd(a,b){var c=ud(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=ud(c)}}\nfunction wd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?wd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}function xd(){for(var a=window,b=td();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=td(a.document)}return b}\nfunction yd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}var zd="$",Ad="/$",Bd="$?",Cd="$!",Dd=null,Ed=null;function Fd(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}\nfunction Gd(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var Hd="function"===typeof setTimeout?setTimeout:void 0,Id="function"===typeof clearTimeout?clearTimeout:void 0;function Jd(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}\nfunction Kd(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(c===zd||c===Cd||c===Bd){if(0===b)return a;b--}else c===Ad&&b++}a=a.previousSibling}return null}var Ld=Math.random().toString(36).slice(2),Md="__reactInternalInstance$"+Ld,Nd="__reactEventHandlers$"+Ld,Od="__reactContainere$"+Ld;\nfunction tc(a){var b=a[Md];if(b)return b;for(var c=a.parentNode;c;){if(b=c[Od]||c[Md]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Kd(a);null!==a;){if(c=a[Md])return c;a=Kd(a)}return b}a=c;c=a.parentNode}return null}function Nc(a){a=a[Md]||a[Od];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function Pd(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(u(33));}function Qd(a){return a[Nd]||null}\nfunction Rd(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction Sd(a,b){var c=a.stateNode;if(!c)return null;var d=la(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==typeof c)throw Error(u(231,\nb,typeof c));return c}function Td(a,b,c){if(b=Sd(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a)}function Ud(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Rd(b);for(b=c.length;0<b--;)Td(c[b],"captured",a);for(b=0;b<c.length;b++)Td(c[b],"bubbled",a)}}\nfunction Vd(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Sd(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a))}function Wd(a){a&&a.dispatchConfig.registrationName&&Vd(a._targetInst,null,a)}function Xd(a){jc(a,Ud)}var Yd=null,Zd=null,$d=null;\nfunction ae(){if($d)return $d;var a,b=Zd,c=b.length,d,e="value"in Yd?Yd.value:Yd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return $d=e.slice(a,1<d?1-d:void 0)}function be(){return!0}function ce(){return!1}\nfunction G(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?be:ce;this.isPropagationStopped=ce;return this}\nn(G.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=be)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=be)},persist:function(){this.isPersistent=be},isPersistent:ce,destructor:function(){var a=this.constructor.Interface,\nb;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ce;this._dispatchInstances=this._dispatchListeners=null}});G.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};\nG.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;de(c);return c};de(G);function ee(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}\nfunction fe(a){if(!(a instanceof this))throw Error(u(279));a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function de(a){a.eventPool=[];a.getPooled=ee;a.release=fe}var ge=G.extend({data:null}),he=G.extend({data:null}),ie=[9,13,27,32],je=ya&&"CompositionEvent"in window,ke=null;ya&&"documentMode"in document&&(ke=document.documentMode);\nvar le=ya&&"TextEvent"in window&&!ke,me=ya&&(!je||ke&&8<ke&&11>=ke),ne=String.fromCharCode(32),oe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",\ncaptured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},pe=!1;\nfunction qe(a,b){switch(a){case "keyup":return-1!==ie.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function re(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var se=!1;function te(a,b){switch(a){case "compositionend":return re(b);case "keypress":if(32!==b.which)return null;pe=!0;return ne;case "textInput":return a=b.data,a===ne&&pe?null:a;default:return null}}\nfunction ue(a,b){if(se)return"compositionend"===a||!je&&qe(a,b)?(a=ae(),$d=Zd=Yd=null,se=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return me&&"ko"!==b.locale?null:b.data;default:return null}}\nvar ve={eventTypes:oe,extractEvents:function(a,b,c,d){var e;if(je)b:{switch(a){case "compositionstart":var f=oe.compositionStart;break b;case "compositionend":f=oe.compositionEnd;break b;case "compositionupdate":f=oe.compositionUpdate;break b}f=void 0}else se?qe(a,c)&&(f=oe.compositionEnd):"keydown"===a&&229===c.keyCode&&(f=oe.compositionStart);f?(me&&"ko"!==c.locale&&(se||f!==oe.compositionStart?f===oe.compositionEnd&&se&&(e=ae()):(Yd=d,Zd="value"in Yd?Yd.value:Yd.textContent,se=!0)),f=ge.getPooled(f,\nb,c,d),e?f.data=e:(e=re(c),null!==e&&(f.data=e)),Xd(f),e=f):e=null;(a=le?te(a,c):ue(a,c))?(b=he.getPooled(oe.beforeInput,b,c,d),b.data=a,Xd(b)):b=null;return null===e?b:null===b?e:[e,b]}},we={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function xe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!we[a.type]:"textarea"===b?!0:!1}\nvar ye={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function ze(a,b,c){a=G.getPooled(ye.change,a,b,c);a.type="change";Da(c);Xd(a);return a}var Ae=null,Be=null;function Ce(a){mc(a)}function De(a){var b=Pd(a);if(yb(b))return a}function Ee(a,b){if("change"===a)return b}var Fe=!1;ya&&(Fe=oc("input")&&(!document.documentMode||9<document.documentMode));\nfunction Ge(){Ae&&(Ae.detachEvent("onpropertychange",He),Be=Ae=null)}function He(a){if("value"===a.propertyName&&De(Be))if(a=ze(Be,a,nc(a)),Ja)mc(a);else{Ja=!0;try{Fa(Ce,a)}finally{Ja=!1,La()}}}function Ie(a,b,c){"focus"===a?(Ge(),Ae=b,Be=c,Ae.attachEvent("onpropertychange",He)):"blur"===a&&Ge()}function Je(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return De(Be)}function Ke(a,b){if("click"===a)return De(b)}function Le(a,b){if("input"===a||"change"===a)return De(b)}\nvar Me={eventTypes:ye,_isInputEventSupported:Fe,extractEvents:function(a,b,c,d){var e=b?Pd(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if("select"===f||"input"===f&&"file"===e.type)var g=Ee;else if(xe(e))if(Fe)g=Le;else{g=Je;var h=Ie}else(f=e.nodeName)&&"input"===f.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(g=Ke);if(g&&(g=g(a,b)))return ze(g,c,d);h&&h(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Db(e,"number",e.value)}},Ne=G.extend({view:null,detail:null}),\nOe={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pe(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Oe[a])?!!b[a]:!1}function Qe(){return Pe}\nvar Re=0,Se=0,Te=!1,Ue=!1,Ve=Ne.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Qe,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=Re;Re=a.screenX;return Te?"mousemove"===a.type?a.screenX-b:0:(Te=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;\nvar b=Se;Se=a.screenY;return Ue?"mousemove"===a.type?a.screenY-b:0:(Ue=!0,0)}}),We=Ve.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xe={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",\ndependencies:["pointerout","pointerover"]}},Ye={eventTypes:Xe,extractEvents:function(a,b,c,d,e){var f="mouseover"===a||"pointerover"===a,g="mouseout"===a||"pointerout"===a;if(f&&0===(e&32)&&(c.relatedTarget||c.fromElement)||!g&&!f)return null;f=d.window===d?d:(f=d.ownerDocument)?f.defaultView||f.parentWindow:window;if(g){if(g=b,b=(b=c.relatedTarget||c.toElement)?tc(b):null,null!==b){var h=dc(b);if(b!==h||5!==b.tag&&6!==b.tag)b=null}}else g=null;if(g===b)return null;if("mouseout"===a||"mouseover"===\na){var k=Ve;var l=Xe.mouseLeave;var m=Xe.mouseEnter;var p="mouse"}else if("pointerout"===a||"pointerover"===a)k=We,l=Xe.pointerLeave,m=Xe.pointerEnter,p="pointer";a=null==g?f:Pd(g);f=null==b?f:Pd(b);l=k.getPooled(l,g,c,d);l.type=p+"leave";l.target=a;l.relatedTarget=f;c=k.getPooled(m,b,c,d);c.type=p+"enter";c.target=f;c.relatedTarget=a;d=g;p=b;if(d&&p)a:{k=d;m=p;g=0;for(a=k;a;a=Rd(a))g++;a=0;for(b=m;b;b=Rd(b))a++;for(;0<g-a;)k=Rd(k),g--;for(;0<a-g;)m=Rd(m),a--;for(;g--;){if(k===m||k===m.alternate)break a;\nk=Rd(k);m=Rd(m)}k=null}else k=null;m=k;for(k=[];d&&d!==m;){g=d.alternate;if(null!==g&&g===m)break;k.push(d);d=Rd(d)}for(d=[];p&&p!==m;){g=p.alternate;if(null!==g&&g===m)break;d.push(p);p=Rd(p)}for(p=0;p<k.length;p++)Vd(k[p],"bubbled",l);for(p=d.length;0<p--;)Vd(d[p],"captured",c);return 0===(e&64)?[l]:[l,c]}};function Ze(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var $e="function"===typeof Object.is?Object.is:Ze,af=Object.prototype.hasOwnProperty;\nfunction bf(a,b){if($e(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!af.call(b,c[d])||!$e(a[c[d]],b[c[d]]))return!1;return!0}\nvar cf=ya&&"documentMode"in document&&11>=document.documentMode,df={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ef=null,ff=null,gf=null,hf=!1;\nfunction jf(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if(hf||null==ef||ef!==td(c))return null;c=ef;"selectionStart"in c&&yd(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return gf&&bf(gf,c)?null:(gf=c,a=G.getPooled(df.select,ff,a,b),a.type="select",a.target=ef,Xd(a),a)}\nvar kf={eventTypes:df,extractEvents:function(a,b,c,d,e,f){e=f||(d.window===d?d.document:9===d.nodeType?d:d.ownerDocument);if(!(f=!e)){a:{e=cc(e);f=wa.onSelect;for(var g=0;g<f.length;g++)if(!e.has(f[g])){e=!1;break a}e=!0}f=!e}if(f)return null;e=b?Pd(b):window;switch(a){case "focus":if(xe(e)||"true"===e.contentEditable)ef=e,ff=b,gf=null;break;case "blur":gf=ff=ef=null;break;case "mousedown":hf=!0;break;case "contextmenu":case "mouseup":case "dragend":return hf=!1,jf(c,d);case "selectionchange":if(cf)break;\ncase "keydown":case "keyup":return jf(c,d)}return null}},lf=G.extend({animationName:null,elapsedTime:null,pseudoElement:null}),mf=G.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),nf=Ne.extend({relatedTarget:null});function of(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}\nvar pf={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},qf={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",\n116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rf=Ne.extend({key:function(a){if(a.key){var b=pf[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=of(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?qf[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Qe,charCode:function(a){return"keypress"===\na.type?of(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?of(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),sf=Ve.extend({dataTransfer:null}),tf=Ne.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Qe}),uf=G.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vf=Ve.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in\na?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),wf={eventTypes:Wc,extractEvents:function(a,b,c,d){var e=Yc.get(a);if(!e)return null;switch(a){case "keypress":if(0===of(c))return null;case "keydown":case "keyup":a=rf;break;case "blur":case "focus":a=nf;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=\nVe;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=sf;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=tf;break;case Xb:case Yb:case Zb:a=lf;break;case $b:a=uf;break;case "scroll":a=Ne;break;case "wheel":a=vf;break;case "copy":case "cut":case "paste":a=mf;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=\nWe;break;default:a=G}b=a.getPooled(e,b,c,d);Xd(b);return b}};if(pa)throw Error(u(101));pa=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ra();var xf=Nc;la=Qd;ma=xf;na=Pd;xa({SimpleEventPlugin:wf,EnterLeaveEventPlugin:Ye,ChangeEventPlugin:Me,SelectEventPlugin:kf,BeforeInputEventPlugin:ve});var yf=[],zf=-1;function H(a){0>zf||(a.current=yf[zf],yf[zf]=null,zf--)}\nfunction I(a,b){zf++;yf[zf]=a.current;a.current=b}var Af={},J={current:Af},K={current:!1},Bf=Af;function Cf(a,b){var c=a.type.contextTypes;if(!c)return Af;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L(a){a=a.childContextTypes;return null!==a&&void 0!==a}\nfunction Df(){H(K);H(J)}function Ef(a,b,c){if(J.current!==Af)throw Error(u(168));I(J,b);I(K,c)}function Ff(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(u(108,pb(b)||"Unknown",e));return n({},c,{},d)}function Gf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Af;Bf=J.current;I(J,a);I(K,K.current);return!0}\nfunction Hf(a,b,c){var d=a.stateNode;if(!d)throw Error(u(169));c?(a=Ff(a,b,Bf),d.__reactInternalMemoizedMergedChildContext=a,H(K),H(J),I(J,a)):H(K);I(K,c)}\nvar If=r.unstable_runWithPriority,Jf=r.unstable_scheduleCallback,Kf=r.unstable_cancelCallback,Lf=r.unstable_requestPaint,Mf=r.unstable_now,Nf=r.unstable_getCurrentPriorityLevel,Of=r.unstable_ImmediatePriority,Pf=r.unstable_UserBlockingPriority,Qf=r.unstable_NormalPriority,Rf=r.unstable_LowPriority,Sf=r.unstable_IdlePriority,Tf={},Uf=r.unstable_shouldYield,Vf=void 0!==Lf?Lf:function(){},Wf=null,Xf=null,Yf=!1,Zf=Mf(),$f=1E4>Zf?Mf:function(){return Mf()-Zf};\nfunction ag(){switch(Nf()){case Of:return 99;case Pf:return 98;case Qf:return 97;case Rf:return 96;case Sf:return 95;default:throw Error(u(332));}}function bg(a){switch(a){case 99:return Of;case 98:return Pf;case 97:return Qf;case 96:return Rf;case 95:return Sf;default:throw Error(u(332));}}function cg(a,b){a=bg(a);return If(a,b)}function dg(a,b,c){a=bg(a);return Jf(a,b,c)}function eg(a){null===Wf?(Wf=[a],Xf=Jf(Of,fg)):Wf.push(a);return Tf}function gg(){if(null!==Xf){var a=Xf;Xf=null;Kf(a)}fg()}\nfunction fg(){if(!Yf&&null!==Wf){Yf=!0;var a=0;try{var b=Wf;cg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});Wf=null}catch(c){throw null!==Wf&&(Wf=Wf.slice(a+1)),Jf(Of,gg),c;}finally{Yf=!1}}}function hg(a,b,c){c/=10;return 1073741821-(((1073741821-a+b/10)/c|0)+1)*c}function ig(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}var jg={current:null},kg=null,lg=null,mg=null;function ng(){mg=lg=kg=null}\nfunction og(a){var b=jg.current;H(jg);a.type._context._currentValue=b}function pg(a,b){for(;null!==a;){var c=a.alternate;if(a.childExpirationTime<b)a.childExpirationTime=b,null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);else if(null!==c&&c.childExpirationTime<b)c.childExpirationTime=b;else break;a=a.return}}function qg(a,b){kg=a;mg=lg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(a.expirationTime>=b&&(rg=!0),a.firstContext=null)}\nfunction sg(a,b){if(mg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)mg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===lg){if(null===kg)throw Error(u(308));lg=b;kg.dependencies={expirationTime:0,firstContext:b,responders:null}}else lg=lg.next=b}return a._currentValue}var tg=!1;function ug(a){a.updateQueue={baseState:a.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}\nfunction vg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,baseQueue:a.baseQueue,shared:a.shared,effects:a.effects})}function wg(a,b){a={expirationTime:a,suspenseConfig:b,tag:0,payload:null,callback:null,next:null};return a.next=a}function xg(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}\nfunction yg(a,b){var c=a.alternate;null!==c&&vg(c,a);a=a.updateQueue;c=a.baseQueue;null===c?(a.baseQueue=b.next=b,b.next=b):(b.next=c.next,c.next=b)}\nfunction zg(a,b,c,d){var e=a.updateQueue;tg=!1;var f=e.baseQueue,g=e.shared.pending;if(null!==g){if(null!==f){var h=f.next;f.next=g.next;g.next=h}f=g;e.shared.pending=null;h=a.alternate;null!==h&&(h=h.updateQueue,null!==h&&(h.baseQueue=g))}if(null!==f){h=f.next;var k=e.baseState,l=0,m=null,p=null,x=null;if(null!==h){var z=h;do{g=z.expirationTime;if(g<d){var ca={expirationTime:z.expirationTime,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null};null===x?(p=x=\nca,m=k):x=x.next=ca;g>l&&(l=g)}else{null!==x&&(x=x.next={expirationTime:1073741823,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null});Ag(g,z.suspenseConfig);a:{var D=a,t=z;g=b;ca=c;switch(t.tag){case 1:D=t.payload;if("function"===typeof D){k=D.call(ca,k,g);break a}k=D;break a;case 3:D.effectTag=D.effectTag&-4097|64;case 0:D=t.payload;g="function"===typeof D?D.call(ca,k,g):D;if(null===g||void 0===g)break a;k=n({},k,g);break a;case 2:tg=!0}}null!==z.callback&&\n(a.effectTag|=32,g=e.effects,null===g?e.effects=[z]:g.push(z))}z=z.next;if(null===z||z===h)if(g=e.shared.pending,null===g)break;else z=f.next=g.next,g.next=h,e.baseQueue=f=g,e.shared.pending=null}while(1)}null===x?m=k:x.next=p;e.baseState=m;e.baseQueue=x;Bg(l);a.expirationTime=l;a.memoizedState=k}}\nfunction Cg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=e;e=c;if("function"!==typeof d)throw Error(u(191,d));d.call(e)}}}var Dg=Wa.ReactCurrentBatchConfig,Eg=(new aa.Component).refs;function Fg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;0===a.expirationTime&&(a.updateQueue.baseState=c)}\nvar Jg={isMounted:function(a){return(a=a._reactInternalFiber)?dc(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gg(),d=Dg.suspense;\nc=Hg(c,a,d);d=wg(c,d);d.tag=2;void 0!==b&&null!==b&&(d.callback=b);xg(a,d);Ig(a,c)}};function Kg(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!bf(c,d)||!bf(e,f):!0}\nfunction Lg(a,b,c){var d=!1,e=Af;var f=b.contextType;"object"===typeof f&&null!==f?f=sg(f):(e=L(b)?Bf:J.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Cf(a,e):Af);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Jg;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction Mg(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Jg.enqueueReplaceState(b,b.state,null)}\nfunction Ng(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Eg;ug(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=sg(f):(f=L(b)?Bf:J.current,e.context=Cf(a,f));zg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Fg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||\n(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Jg.enqueueReplaceState(e,e.state,null),zg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.effectTag|=4)}var Og=Array.isArray;\nfunction Pg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(u(309));var d=c.stateNode}if(!d)throw Error(u(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Eg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if("string"!==typeof a)throw Error(u(284));if(!c._owner)throw Error(u(290,a));}return a}\nfunction Qg(a,b){if("textarea"!==a.type)throw Error(u(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,""));}\nfunction Rg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Sg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=\n2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Tg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Pg(a,b,c),d.return=a,d;d=Ug(c.type,c.key,c.props,null,a.mode,d);d.ref=Pg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==\nc.implementation)return b=Vg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Wg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function p(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Tg(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Za:return c=Ug(b.type,b.key,b.props,null,a.mode,c),c.ref=Pg(a,null,b),c.return=a,c;case $a:return b=Vg(b,a.mode,c),b.return=a,b}if(Og(b)||\nnb(b))return b=Wg(b,a.mode,c,null),b.return=a,b;Qg(a,b)}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Za:return c.key===e?c.type===ab?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case $a:return c.key===e?l(a,b,c,d):null}if(Og(c)||nb(c))return null!==e?null:m(a,b,c,d,null);Qg(a,c)}return null}function z(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=\na.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Za:return a=a.get(null===d.key?c:d.key)||null,d.type===ab?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case $a:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Og(d)||nb(d))return a=a.get(c)||null,m(b,a,d,e,null);Qg(b,d)}return null}function ca(e,g,h,k){for(var l=null,t=null,m=g,y=g=0,A=null;null!==m&&y<h.length;y++){m.index>y?(A=m,m=null):A=m.sibling;var q=x(e,m,h[y],k);if(null===q){null===m&&(m=A);break}a&&\nm&&null===q.alternate&&b(e,m);g=f(q,g,y);null===t?l=q:t.sibling=q;t=q;m=A}if(y===h.length)return c(e,m),l;if(null===m){for(;y<h.length;y++)m=p(e,h[y],k),null!==m&&(g=f(m,g,y),null===t?l=m:t.sibling=m,t=m);return l}for(m=d(e,m);y<h.length;y++)A=z(m,e,y,h[y],k),null!==A&&(a&&null!==A.alternate&&m.delete(null===A.key?y:A.key),g=f(A,g,y),null===t?l=A:t.sibling=A,t=A);a&&m.forEach(function(a){return b(e,a)});return l}function D(e,g,h,l){var k=nb(h);if("function"!==typeof k)throw Error(u(150));h=k.call(h);\nif(null==h)throw Error(u(151));for(var m=k=null,t=g,y=g=0,A=null,q=h.next();null!==t&&!q.done;y++,q=h.next()){t.index>y?(A=t,t=null):A=t.sibling;var D=x(e,t,q.value,l);if(null===D){null===t&&(t=A);break}a&&t&&null===D.alternate&&b(e,t);g=f(D,g,y);null===m?k=D:m.sibling=D;m=D;t=A}if(q.done)return c(e,t),k;if(null===t){for(;!q.done;y++,q=h.next())q=p(e,q.value,l),null!==q&&(g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);return k}for(t=d(e,t);!q.done;y++,q=h.next())q=z(t,e,y,q.value,l),null!==q&&(a&&null!==\nq.alternate&&t.delete(null===q.key?y:q.key),g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);a&&t.forEach(function(a){return b(e,a)});return k}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ab&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Za:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ab){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,\nk.sibling);d=e(k,f.props);d.ref=Pg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ab?(d=Wg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Ug(f.type,f.key,f.props,null,a.mode,h),h.ref=Pg(a,d,f),h.return=a,a=h)}return g(a);case $a:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=\nd.sibling}d=Vg(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Tg(f,a.mode,h),d.return=a,a=d),g(a);if(Og(f))return ca(a,d,f,h);if(nb(f))return D(a,d,f,h);l&&Qg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:throw a=a.type,Error(u(152,a.displayName||a.name||"Component"));}return c(a,d)}}var Xg=Rg(!0),Yg=Rg(!1),Zg={},$g={current:Zg},ah={current:Zg},bh={current:Zg};\nfunction ch(a){if(a===Zg)throw Error(u(174));return a}function dh(a,b){I(bh,b);I(ah,a);I($g,Zg);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Ob(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=Ob(b,a)}H($g);I($g,b)}function eh(){H($g);H(ah);H(bh)}function fh(a){ch(bh.current);var b=ch($g.current);var c=Ob(b,a.type);b!==c&&(I(ah,a),I($g,c))}function gh(a){ah.current===a&&(H($g),H(ah))}var M={current:0};\nfunction hh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||c.data===Bd||c.data===Cd))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.effectTag&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}function ih(a,b){return{responder:a,props:b}}\nvar jh=Wa.ReactCurrentDispatcher,kh=Wa.ReactCurrentBatchConfig,lh=0,N=null,O=null,P=null,mh=!1;function Q(){throw Error(u(321));}function nh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!$e(a[c],b[c]))return!1;return!0}\nfunction oh(a,b,c,d,e,f){lh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.expirationTime=0;jh.current=null===a||null===a.memoizedState?ph:qh;a=c(d,e);if(b.expirationTime===lh){f=0;do{b.expirationTime=0;if(!(25>f))throw Error(u(301));f+=1;P=O=null;b.updateQueue=null;jh.current=rh;a=c(d,e)}while(b.expirationTime===lh)}jh.current=sh;b=null!==O&&null!==O.next;lh=0;P=O=N=null;mh=!1;if(b)throw Error(u(300));return a}\nfunction th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function uh(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(u(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}\nfunction vh(a,b){return"function"===typeof b?b(a):b}\nfunction wh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.expirationTime;if(l<lh){var m={expirationTime:k.expirationTime,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null};null===h?(g=h=m,f=d):h=h.next=m;l>N.expirationTime&&\n(N.expirationTime=l,Bg(l))}else null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),Ag(l,k.suspenseConfig),d=k.eagerReducer===a?k.eagerState:a(d,k.action);k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;$e(d,b.memoizedState)||(rg=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}\nfunction xh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);$e(f,b.memoizedState)||(rg=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}\nfunction yh(a){var b=th();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:vh,lastRenderedState:a};a=a.dispatch=zh.bind(null,N,a);return[b.memoizedState,a]}function Ah(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}\nfunction Bh(){return uh().memoizedState}function Ch(a,b,c,d){var e=th();N.effectTag|=a;e.memoizedState=Ah(1|b,c,void 0,void 0===d?null:d)}function Dh(a,b,c,d){var e=uh();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&nh(d,g.deps)){Ah(b,c,f,d);return}}N.effectTag|=a;e.memoizedState=Ah(1|b,c,f,d)}function Eh(a,b){return Ch(516,4,a,b)}function Fh(a,b){return Dh(516,4,a,b)}function Gh(a,b){return Dh(4,2,a,b)}\nfunction Hh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function Ih(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Dh(4,2,Hh.bind(null,b,a),c)}function Jh(){}function Kh(a,b){th().memoizedState=[a,void 0===b?null:b];return a}function Lh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction Mh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Nh(a,b,c){var d=ag();cg(98>d?98:d,function(){a(!0)});cg(97<d?97:d,function(){var d=kh.suspense;kh.suspense=void 0===b?null:b;try{a(!1),c()}finally{kh.suspense=d}})}\nfunction zh(a,b,c){var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e={expirationTime:d,suspenseConfig:e,action:c,eagerReducer:null,eagerState:null,next:null};var f=b.pending;null===f?e.next=e:(e.next=f.next,f.next=e);b.pending=e;f=a.alternate;if(a===N||null!==f&&f===N)mh=!0,e.expirationTime=lh,N.expirationTime=lh;else{if(0===a.expirationTime&&(null===f||0===f.expirationTime)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.eagerReducer=f;e.eagerState=h;if($e(h,g))return}catch(k){}finally{}Ig(a,\nd)}}\nvar sh={readContext:sg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useResponder:Q,useDeferredValue:Q,useTransition:Q},ph={readContext:sg,useCallback:Kh,useContext:sg,useEffect:Eh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Ch(4,2,Hh.bind(null,b,a),c)},useLayoutEffect:function(a,b){return Ch(4,2,a,b)},useMemo:function(a,b){var c=th();b=void 0===b?null:b;a=a();c.memoizedState=[a,\nb];return a},useReducer:function(a,b,c){var d=th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=zh.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=th();a={current:a};return b.memoizedState=a},useState:yh,useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=yh(a),d=c[0],e=c[1];Eh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=\nc}},[a,b]);return d},useTransition:function(a){var b=yh(!1),c=b[0];b=b[1];return[Kh(Nh.bind(null,b,a),[b,a]),c]}},qh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:wh,useRef:Bh,useState:function(){return wh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=wh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=\nwh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,b,a),[b,a]),c]}},rh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:xh,useRef:Bh,useState:function(){return xh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=xh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=xh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,\nb,a),[b,a]),c]}},Oh=null,Ph=null,Qh=!1;function Rh(a,b){var c=Sh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}\nfunction Th(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}\nfunction Uh(a){if(Qh){var b=Ph;if(b){var c=b;if(!Th(a,b)){b=Jd(c.nextSibling);if(!b||!Th(a,b)){a.effectTag=a.effectTag&-1025|2;Qh=!1;Oh=a;return}Rh(Oh,c)}Oh=a;Ph=Jd(b.firstChild)}else a.effectTag=a.effectTag&-1025|2,Qh=!1,Oh=a}}function Vh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;Oh=a}\nfunction Wh(a){if(a!==Oh)return!1;if(!Qh)return Vh(a),Qh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Gd(b,a.memoizedProps))for(b=Ph;b;)Rh(a,b),b=Jd(b.nextSibling);Vh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(u(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(c===Ad){if(0===b){Ph=Jd(a.nextSibling);break a}b--}else c!==zd&&c!==Cd&&c!==Bd||b++}a=a.nextSibling}Ph=null}}else Ph=Oh?Jd(a.stateNode.nextSibling):null;return!0}\nfunction Xh(){Ph=Oh=null;Qh=!1}var Yh=Wa.ReactCurrentOwner,rg=!1;function R(a,b,c,d){b.child=null===a?Yg(b,null,c,d):Xg(b,a.child,c,d)}function Zh(a,b,c,d,e){c=c.render;var f=b.ref;qg(b,e);d=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,d,e);return b.child}\nfunction ai(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!bi(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ci(a,b,g,d,e,f);a=Ug(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:bf,c(e,d)&&a.ref===b.ref))return $h(a,b,f);b.effectTag|=1;a=Sg(g,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction ci(a,b,c,d,e,f){return null!==a&&bf(a.memoizedProps,d)&&a.ref===b.ref&&(rg=!1,e<f)?(b.expirationTime=a.expirationTime,$h(a,b,f)):di(a,b,c,d,f)}function ei(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function di(a,b,c,d,e){var f=L(c)?Bf:J.current;f=Cf(b,f);qg(b,e);c=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,c,e);return b.child}\nfunction fi(a,b,c,d,e){if(L(c)){var f=!0;Gf(b)}else f=!1;qg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Lg(b,c,d),Ng(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l));var m=c.getDerivedStateFromProps,p="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;p||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&\n"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l);tg=!1;var x=b.memoizedState;g.state=x;zg(b,d,g,e);k=b.memoizedState;h!==d||x!==k||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),k=b.memoizedState),(h=tg||Kg(b,c,h,d,x,k,l))?(p||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===\ntypeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,vg(a,b),h=b.memoizedProps,g.props=b.type===b.elementType?h:ig(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l)),m=c.getDerivedStateFromProps,(p="function"===typeof m||"function"===\ntypeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l),tg=!1,k=b.memoizedState,g.state=k,zg(b,d,g,e),x=b.memoizedState,h!==d||k!==x||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),x=b.memoizedState),(m=tg||Kg(b,c,h,d,k,x,l))?(p||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,\nx,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):\n("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return gi(a,b,c,d,f,e)}\nfunction gi(a,b,c,d,e,f){ei(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Hf(b,c,!1),$h(a,b,f);d=b.stateNode;Yh.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=Xg(b,a.child,null,f),b.child=Xg(b,null,h,f)):R(a,b,h,f);b.memoizedState=d.state;e&&Hf(b,c,!0);return b.child}function hi(a){var b=a.stateNode;b.pendingContext?Ef(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Ef(a,b.context,!1);dh(a,b.containerInfo)}\nvar ii={dehydrated:null,retryTime:0};\nfunction ji(a,b,c){var d=b.mode,e=b.pendingProps,f=M.current,g=!1,h;(h=0!==(b.effectTag&64))||(h=0!==(f&2)&&(null===a||null!==a.memoizedState));h?(g=!0,b.effectTag&=-65):null!==a&&null===a.memoizedState||void 0===e.fallback||!0===e.unstable_avoidThisFallback||(f|=1);I(M,f&1);if(null===a){void 0!==e.fallback&&Uh(b);if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=\nb;e.sibling=c;b.memoizedState=ii;b.child=e;return c}d=e.children;b.memoizedState=null;return b.child=Yg(b,null,d,c)}if(null!==a.memoizedState){a=a.child;d=a.sibling;if(g){e=e.fallback;c=Sg(a,a.pendingProps);c.return=b;if(0===(b.mode&2)&&(g=null!==b.memoizedState?b.child.child:b.child,g!==a.child))for(c.child=g;null!==g;)g.return=c,g=g.sibling;d=Sg(d,e);d.return=b;c.sibling=d;c.childExpirationTime=0;b.memoizedState=ii;b.child=c;return d}c=Xg(b,a.child,e.children,c);b.memoizedState=null;return b.child=\nc}a=a.child;if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;e.child=a;null!==a&&(a.return=e);if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=b;e.sibling=c;c.effectTag|=2;e.childExpirationTime=0;b.memoizedState=ii;b.child=e;return c}b.memoizedState=null;return b.child=Xg(b,a,e.children,c)}\nfunction ki(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);pg(a.return,b)}function li(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailExpiration:0,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailExpiration=0,g.tailMode=e,g.lastEffect=f)}\nfunction mi(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;R(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.effectTag|=64;else{if(null!==a&&0!==(a.effectTag&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&ki(a,c);else if(19===a.tag)ki(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(M,d);if(0===(b.mode&2))b.memoizedState=\nnull;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===hh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);li(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===hh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}li(b,!0,c,null,f,b.lastEffect);break;case "together":li(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}\nfunction $h(a,b,c){null!==a&&(b.dependencies=a.dependencies);var d=b.expirationTime;0!==d&&Bg(d);if(b.childExpirationTime<c)return null;if(null!==a&&b.child!==a.child)throw Error(u(153));if(null!==b.child){a=b.child;c=Sg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Sg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}var ni,oi,pi,qi;\nni=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};oi=function(){};\npi=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;ch($g.current);a=null;switch(c){case "input":f=zb(g,f);d=zb(g,d);a=[];break;case "option":f=Gb(g,f);d=Gb(g,d);a=[];break;case "select":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case "textarea":f=Ib(g,f);d=Ib(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=sd)}od(c,d);var h,k;c=null;for(h in f)if(!d.hasOwnProperty(h)&&f.hasOwnProperty(h)&&null!=f[h])if("style"===\nh)for(k in g=f[h],g)g.hasOwnProperty(k)&&(c||(c={}),c[k]="");else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(va.hasOwnProperty(h)?a||(a=[]):(a=a||[]).push(h,null));for(h in d){var l=d[h];g=null!=f?f[h]:void 0;if(d.hasOwnProperty(h)&&l!==g&&(null!=l||null!=g))if("style"===h)if(g){for(k in g)!g.hasOwnProperty(k)||l&&l.hasOwnProperty(k)||(c||(c={}),c[k]="");for(k in l)l.hasOwnProperty(k)&&g[k]!==l[k]&&(c||(c={}),\nc[k]=l[k])}else c||(a||(a=[]),a.push(h,c)),c=l;else"dangerouslySetInnerHTML"===h?(l=l?l.__html:void 0,g=g?g.__html:void 0,null!=l&&g!==l&&(a=a||[]).push(h,l)):"children"===h?g===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(h,""+l):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(va.hasOwnProperty(h)?(null!=l&&rd(e,h),a||g===l||(a=[])):(a=a||[]).push(h,l))}c&&(a=a||[]).push("style",c);e=a;if(b.updateQueue=e)b.effectTag|=4}};\nqi=function(a,b,c,d){c!==d&&(b.effectTag|=4)};function ri(a,b){switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction si(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return L(b.type)&&Df(),null;case 3:return eh(),H(K),H(J),c=b.stateNode,c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==a&&null!==a.child||!Wh(b)||(b.effectTag|=4),oi(b),null;case 5:gh(b);c=ch(bh.current);var e=b.type;if(null!==a&&null!=b.stateNode)pi(a,b,e,d,c),a.ref!==b.ref&&(b.effectTag|=128);else{if(!d){if(null===b.stateNode)throw Error(u(166));\nreturn null}a=ch($g.current);if(Wh(b)){d=b.stateNode;e=b.type;var f=b.memoizedProps;d[Md]=b;d[Nd]=f;switch(e){case "iframe":case "object":case "embed":F("load",d);break;case "video":case "audio":for(a=0;a<ac.length;a++)F(ac[a],d);break;case "source":F("error",d);break;case "img":case "image":case "link":F("error",d);F("load",d);break;case "form":F("reset",d);F("submit",d);break;case "details":F("toggle",d);break;case "input":Ab(d,f);F("invalid",d);rd(c,"onChange");break;case "select":d._wrapperState=\n{wasMultiple:!!f.multiple};F("invalid",d);rd(c,"onChange");break;case "textarea":Jb(d,f),F("invalid",d),rd(c,"onChange")}od(e,f);a=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(a=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(a=["children",""+h]):va.hasOwnProperty(g)&&null!=h&&rd(c,g)}switch(e){case "input":xb(d);Eb(d,f,!0);break;case "textarea":xb(d);Lb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&\n(d.onclick=sd)}c=a;b.updateQueue=c;null!==c&&(b.effectTag|=4)}else{g=9===c.nodeType?c:c.ownerDocument;a===qd&&(a=Nb(e));a===qd?"script"===e?(a=g.createElement("div"),a.innerHTML="<script>\\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(e,{is:d.is}):(a=g.createElement(e),"select"===e&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,e);a[Md]=b;a[Nd]=d;ni(a,b,!1,!1);b.stateNode=a;g=pd(e,d);switch(e){case "iframe":case "object":case "embed":F("load",\na);h=d;break;case "video":case "audio":for(h=0;h<ac.length;h++)F(ac[h],a);h=d;break;case "source":F("error",a);h=d;break;case "img":case "image":case "link":F("error",a);F("load",a);h=d;break;case "form":F("reset",a);F("submit",a);h=d;break;case "details":F("toggle",a);h=d;break;case "input":Ab(a,d);h=zb(a,d);F("invalid",a);rd(c,"onChange");break;case "option":h=Gb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};h=n({},d,{value:void 0});F("invalid",a);rd(c,"onChange");break;case "textarea":Jb(a,\nd);h=Ib(a,d);F("invalid",a);rd(c,"onChange");break;default:h=d}od(e,h);var k=h;for(f in k)if(k.hasOwnProperty(f)){var l=k[f];"style"===f?md(a,l):"dangerouslySetInnerHTML"===f?(l=l?l.__html:void 0,null!=l&&Qb(a,l)):"children"===f?"string"===typeof l?("textarea"!==e||""!==l)&&Rb(a,l):"number"===typeof l&&Rb(a,""+l):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(va.hasOwnProperty(f)?null!=l&&rd(c,f):null!=l&&Xa(a,f,l,g))}switch(e){case "input":xb(a);Eb(a,d,!1);\nbreak;case "textarea":xb(a);Lb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+rb(d.value));break;case "select":a.multiple=!!d.multiple;c=d.value;null!=c?Hb(a,!!d.multiple,c,!1):null!=d.defaultValue&&Hb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof h.onClick&&(a.onclick=sd)}Fd(e,d)&&(b.effectTag|=4)}null!==b.ref&&(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)qi(a,b,a.memoizedProps,d);else{if("string"!==typeof d&&null===b.stateNode)throw Error(u(166));\nc=ch(bh.current);ch($g.current);Wh(b)?(c=b.stateNode,d=b.memoizedProps,c[Md]=b,c.nodeValue!==d&&(b.effectTag|=4)):(c=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),c[Md]=b,b.stateNode=c)}return null;case 13:H(M);d=b.memoizedState;if(0!==(b.effectTag&64))return b.expirationTime=c,b;c=null!==d;d=!1;null===a?void 0!==b.memoizedProps.fallback&&Wh(b):(e=a.memoizedState,d=null!==e,c||null===e||(e=a.child.sibling,null!==e&&(f=b.firstEffect,null!==f?(b.firstEffect=e,e.nextEffect=f):(b.firstEffect=b.lastEffect=\ne,e.nextEffect=null),e.effectTag=8)));if(c&&!d&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(M.current&1))S===ti&&(S=ui);else{if(S===ti||S===ui)S=vi;0!==wi&&null!==T&&(xi(T,U),yi(T,wi))}if(c||d)b.effectTag|=4;return null;case 4:return eh(),oi(b),null;case 10:return og(b),null;case 17:return L(b.type)&&Df(),null;case 19:H(M);d=b.memoizedState;if(null===d)return null;e=0!==(b.effectTag&64);f=d.rendering;if(null===f)if(e)ri(d,!1);else{if(S!==ti||null!==a&&0!==(a.effectTag&\n64))for(f=b.child;null!==f;){a=hh(f);if(null!==a){b.effectTag|=64;ri(d,!1);e=a.updateQueue;null!==e&&(b.updateQueue=e,b.effectTag|=4);null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;for(d=b.child;null!==d;)e=d,f=c,e.effectTag&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null,a=e.alternate,null===a?(e.childExpirationTime=0,e.expirationTime=f,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null):(e.childExpirationTime=a.childExpirationTime,\ne.expirationTime=a.expirationTime,e.child=a.child,e.memoizedProps=a.memoizedProps,e.memoizedState=a.memoizedState,e.updateQueue=a.updateQueue,f=a.dependencies,e.dependencies=null===f?null:{expirationTime:f.expirationTime,firstContext:f.firstContext,responders:f.responders}),d=d.sibling;I(M,M.current&1|2);return b.child}f=f.sibling}}else{if(!e)if(a=hh(f),null!==a){if(b.effectTag|=64,e=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.effectTag|=4),ri(d,!0),null===d.tail&&"hidden"===d.tailMode&&!f.alternate)return b=\nb.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*$f()-d.renderingStartTime>d.tailExpiration&&1<c&&(b.effectTag|=64,e=!0,ri(d,!1),b.expirationTime=b.childExpirationTime=c-1);d.isBackwards?(f.sibling=b.child,b.child=f):(c=d.last,null!==c?c.sibling=f:b.child=f,d.last=f)}return null!==d.tail?(0===d.tailExpiration&&(d.tailExpiration=$f()+500),c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=$f(),c.sibling=null,b=M.current,I(M,e?b&1|2:b&1),c):null}throw Error(u(156,\nb.tag));}function zi(a){switch(a.tag){case 1:L(a.type)&&Df();var b=a.effectTag;return b&4096?(a.effectTag=b&-4097|64,a):null;case 3:eh();H(K);H(J);b=a.effectTag;if(0!==(b&64))throw Error(u(285));a.effectTag=b&-4097|64;return a;case 5:return gh(a),null;case 13:return H(M),b=a.effectTag,b&4096?(a.effectTag=b&-4097|64,a):null;case 19:return H(M),null;case 4:return eh(),null;case 10:return og(a),null;default:return null}}function Ai(a,b){return{value:a,source:b,stack:qb(b)}}\nvar Bi="function"===typeof WeakSet?WeakSet:Set;function Ci(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=qb(c));null!==c&&pb(c.type);b=b.value;null!==a&&1===a.tag&&pb(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function Di(a,b){try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){Ei(a,c)}}function Fi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Ei(a,c)}else b.current=null}\nfunction Gi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.effectTag&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:ig(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(u(163));}\nfunction Hi(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.destroy;c.destroy=void 0;void 0!==d&&d()}c=c.next}while(c!==b)}}function Ii(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}\nfunction Ji(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:Ii(3,c);return;case 1:a=c.stateNode;if(c.effectTag&4)if(null===b)a.componentDidMount();else{var d=c.elementType===c.type?b.memoizedProps:ig(c.type,b.memoizedProps);a.componentDidUpdate(d,b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}b=c.updateQueue;null!==b&&Cg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Cg(c,b,a)}return;\ncase 5:a=c.stateNode;null===b&&c.effectTag&4&&Fd(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Vc(c))));return;case 19:case 17:case 20:case 21:return}throw Error(u(163));}\nfunction Ki(a,b,c){"function"===typeof Li&&Li(b);switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var d=a.next;cg(97<c?97:c,function(){var a=d;do{var c=a.destroy;if(void 0!==c){var g=b;try{c()}catch(h){Ei(g,h)}}a=a.next}while(a!==d)})}break;case 1:Fi(b);c=b.stateNode;"function"===typeof c.componentWillUnmount&&Di(b,c);break;case 5:Fi(b);break;case 4:Mi(a,b,c)}}\nfunction Ni(a){var b=a.alternate;a.return=null;a.child=null;a.memoizedState=null;a.updateQueue=null;a.dependencies=null;a.alternate=null;a.firstEffect=null;a.lastEffect=null;a.pendingProps=null;a.memoizedProps=null;a.stateNode=null;null!==b&&Ni(b)}function Oi(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction Pi(a){a:{for(var b=a.return;null!==b;){if(Oi(b)){var c=b;break a}b=b.return}throw Error(u(160));}b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(u(161));}c.effectTag&16&&(Rb(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Oi(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.effectTag&2)continue b;\nif(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}d?Qi(a,c,b):Ri(a,c,b)}\nfunction Qi(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=sd));else if(4!==d&&(a=a.child,null!==a))for(Qi(a,b,c),a=a.sibling;null!==a;)Qi(a,b,c),a=a.sibling}\nfunction Ri(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Ri(a,b,c),a=a.sibling;null!==a;)Ri(a,b,c),a=a.sibling}\nfunction Mi(a,b,c){for(var d=b,e=!1,f,g;;){if(!e){e=d.return;a:for(;;){if(null===e)throw Error(u(160));f=e.stateNode;switch(e.tag){case 5:g=!1;break a;case 3:f=f.containerInfo;g=!0;break a;case 4:f=f.containerInfo;g=!0;break a}e=e.return}e=!0}if(5===d.tag||6===d.tag){a:for(var h=a,k=d,l=c,m=k;;)if(Ki(h,m,l),null!==m.child&&4!==m.tag)m.child.return=m,m=m.child;else{if(m===k)break a;for(;null===m.sibling;){if(null===m.return||m.return===k)break a;m=m.return}m.sibling.return=m.return;m=m.sibling}g?(h=\nf,k=d.stateNode,8===h.nodeType?h.parentNode.removeChild(k):h.removeChild(k)):f.removeChild(d.stateNode)}else if(4===d.tag){if(null!==d.child){f=d.stateNode.containerInfo;g=!0;d.child.return=d;d=d.child;continue}}else if(Ki(a,d,c),null!==d.child){d.child.return=d;d=d.child;continue}if(d===b)break;for(;null===d.sibling;){if(null===d.return||d.return===b)return;d=d.return;4===d.tag&&(e=!1)}d.sibling.return=d.return;d=d.sibling}}\nfunction Si(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:Hi(3,b);return;case 1:return;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Nd]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Bb(c,d);pd(a,e);b=pd(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?md(c,h):"dangerouslySetInnerHTML"===g?Qb(c,h):"children"===g?Rb(c,h):Xa(c,g,h,b)}switch(a){case "input":Cb(c,d);break;\ncase "textarea":Kb(c,d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?Hb(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?Hb(c,!!d.multiple,d.defaultValue,!0):Hb(c,!!d.multiple,d.multiple?[]:"",!1))}}}return;case 6:if(null===b.stateNode)throw Error(u(162));b.stateNode.nodeValue=b.memoizedProps;return;case 3:b=b.stateNode;b.hydrate&&(b.hydrate=!1,Vc(b.containerInfo));return;case 12:return;case 13:c=b;null===b.memoizedState?\nd=!1:(d=!0,c=b.child,Ti=$f());if(null!==c)a:for(a=c;;){if(5===a.tag)f=a.stateNode,d?(f=f.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(f=a.stateNode,e=a.memoizedProps.style,e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null,f.style.display=ld("display",e));else if(6===a.tag)a.stateNode.nodeValue=d?"":a.memoizedProps;else if(13===a.tag&&null!==a.memoizedState&&null===a.memoizedState.dehydrated){f=a.child.sibling;f.return=a;a=\nf;continue}else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===c)break;for(;null===a.sibling;){if(null===a.return||a.return===c)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}Ui(b);return;case 19:Ui(b);return;case 17:return}throw Error(u(163));}function Ui(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Bi);b.forEach(function(b){var d=Vi.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nvar Wi="function"===typeof WeakMap?WeakMap:Map;function Xi(a,b,c){c=wg(c,null);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Yi||(Yi=!0,Zi=d);Ci(a,b)};return c}\nfunction $i(a,b,c){c=wg(c,null);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ci(a,b);return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===aj?aj=new Set([this]):aj.add(this),Ci(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}\nvar bj=Math.ceil,cj=Wa.ReactCurrentDispatcher,dj=Wa.ReactCurrentOwner,V=0,ej=8,fj=16,gj=32,ti=0,hj=1,ij=2,ui=3,vi=4,jj=5,W=V,T=null,X=null,U=0,S=ti,kj=null,lj=1073741823,mj=1073741823,nj=null,wi=0,oj=!1,Ti=0,pj=500,Y=null,Yi=!1,Zi=null,aj=null,qj=!1,rj=null,sj=90,tj=null,uj=0,vj=null,wj=0;function Gg(){return(W&(fj|gj))!==V?1073741821-($f()/10|0):0!==wj?wj:wj=1073741821-($f()/10|0)}\nfunction Hg(a,b,c){b=b.mode;if(0===(b&2))return 1073741823;var d=ag();if(0===(b&4))return 99===d?1073741823:1073741822;if((W&fj)!==V)return U;if(null!==c)a=hg(a,c.timeoutMs|0||5E3,250);else switch(d){case 99:a=1073741823;break;case 98:a=hg(a,150,100);break;case 97:case 96:a=hg(a,5E3,250);break;case 95:a=2;break;default:throw Error(u(326));}null!==T&&a===U&&--a;return a}\nfunction Ig(a,b){if(50<uj)throw uj=0,vj=null,Error(u(185));a=xj(a,b);if(null!==a){var c=ag();1073741823===b?(W&ej)!==V&&(W&(fj|gj))===V?yj(a):(Z(a),W===V&&gg()):Z(a);(W&4)===V||98!==c&&99!==c||(null===tj?tj=new Map([[a,b]]):(c=tj.get(a),(void 0===c||c>b)&&tj.set(a,b)))}}\nfunction xj(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return}null!==e&&(T===e&&(Bg(b),S===vi&&xi(e,U)),yi(e,b));return e}\nfunction zj(a){var b=a.lastExpiredTime;if(0!==b)return b;b=a.firstPendingTime;if(!Aj(a,b))return b;var c=a.lastPingedTime;a=a.nextKnownPendingLevel;a=c>a?c:a;return 2>=a&&b!==a?0:a}\nfunction Z(a){if(0!==a.lastExpiredTime)a.callbackExpirationTime=1073741823,a.callbackPriority=99,a.callbackNode=eg(yj.bind(null,a));else{var b=zj(a),c=a.callbackNode;if(0===b)null!==c&&(a.callbackNode=null,a.callbackExpirationTime=0,a.callbackPriority=90);else{var d=Gg();1073741823===b?d=99:1===b||2===b?d=95:(d=10*(1073741821-b)-10*(1073741821-d),d=0>=d?99:250>=d?98:5250>=d?97:95);if(null!==c){var e=a.callbackPriority;if(a.callbackExpirationTime===b&&e>=d)return;c!==Tf&&Kf(c)}a.callbackExpirationTime=\nb;a.callbackPriority=d;b=1073741823===b?eg(yj.bind(null,a)):dg(d,Bj.bind(null,a),{timeout:10*(1073741821-b)-$f()});a.callbackNode=b}}}\nfunction Bj(a,b){wj=0;if(b)return b=Gg(),Cj(a,b),Z(a),null;var c=zj(a);if(0!==c){b=a.callbackNode;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&c===U||Ej(a,c);if(null!==X){var d=W;W|=fj;var e=Fj();do try{Gj();break}catch(h){Hj(a,h)}while(1);ng();W=d;cj.current=e;if(S===hj)throw b=kj,Ej(a,c),xi(a,c),Z(a),b;if(null===X)switch(e=a.finishedWork=a.current.alternate,a.finishedExpirationTime=c,d=S,T=null,d){case ti:case hj:throw Error(u(345));case ij:Cj(a,2<c?2:c);break;case ui:xi(a,c);d=a.lastSuspendedTime;\nc===d&&(a.nextKnownPendingLevel=Ij(e));if(1073741823===lj&&(e=Ti+pj-$f(),10<e)){if(oj){var f=a.lastPingedTime;if(0===f||f>=c){a.lastPingedTime=c;Ej(a,c);break}}f=zj(a);if(0!==f&&f!==c)break;if(0!==d&&d!==c){a.lastPingedTime=d;break}a.timeoutHandle=Hd(Jj.bind(null,a),e);break}Jj(a);break;case vi:xi(a,c);d=a.lastSuspendedTime;c===d&&(a.nextKnownPendingLevel=Ij(e));if(oj&&(e=a.lastPingedTime,0===e||e>=c)){a.lastPingedTime=c;Ej(a,c);break}e=zj(a);if(0!==e&&e!==c)break;if(0!==d&&d!==c){a.lastPingedTime=\nd;break}1073741823!==mj?d=10*(1073741821-mj)-$f():1073741823===lj?d=0:(d=10*(1073741821-lj)-5E3,e=$f(),c=10*(1073741821-c)-e,d=e-d,0>d&&(d=0),d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*bj(d/1960))-d,c<d&&(d=c));if(10<d){a.timeoutHandle=Hd(Jj.bind(null,a),d);break}Jj(a);break;case jj:if(1073741823!==lj&&null!==nj){f=lj;var g=nj;d=g.busyMinDurationMs|0;0>=d?d=0:(e=g.busyDelayMs|0,f=$f()-(10*(1073741821-f)-(g.timeoutMs|0||5E3)),d=f<=e?0:e+d-f);if(10<d){xi(a,c);a.timeoutHandle=\nHd(Jj.bind(null,a),d);break}}Jj(a);break;default:throw Error(u(329));}Z(a);if(a.callbackNode===b)return Bj.bind(null,a)}}return null}\nfunction yj(a){var b=a.lastExpiredTime;b=0!==b?b:1073741823;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&b===U||Ej(a,b);if(null!==X){var c=W;W|=fj;var d=Fj();do try{Kj();break}catch(e){Hj(a,e)}while(1);ng();W=c;cj.current=d;if(S===hj)throw c=kj,Ej(a,b),xi(a,b),Z(a),c;if(null!==X)throw Error(u(261));a.finishedWork=a.current.alternate;a.finishedExpirationTime=b;T=null;Jj(a);Z(a)}return null}function Lj(){if(null!==tj){var a=tj;tj=null;a.forEach(function(a,c){Cj(c,a);Z(c)});gg()}}\nfunction Mj(a,b){var c=W;W|=1;try{return a(b)}finally{W=c,W===V&&gg()}}function Nj(a,b){var c=W;W&=-2;W|=ej;try{return a(b)}finally{W=c,W===V&&gg()}}\nfunction Ej(a,b){a.finishedWork=null;a.finishedExpirationTime=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Id(c));if(null!==X)for(c=X.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Df();break;case 3:eh();H(K);H(J);break;case 5:gh(d);break;case 4:eh();break;case 13:H(M);break;case 19:H(M);break;case 10:og(d)}c=c.return}T=a;X=Sg(a.current,null);U=b;S=ti;kj=null;mj=lj=1073741823;nj=null;wi=0;oj=!1}\nfunction Hj(a,b){do{try{ng();jh.current=sh;if(mh)for(var c=N.memoizedState;null!==c;){var d=c.queue;null!==d&&(d.pending=null);c=c.next}lh=0;P=O=N=null;mh=!1;if(null===X||null===X.return)return S=hj,kj=b,X=null;a:{var e=a,f=X.return,g=X,h=b;b=U;g.effectTag|=2048;g.firstEffect=g.lastEffect=null;if(null!==h&&"object"===typeof h&&"function"===typeof h.then){var k=h;if(0===(g.mode&2)){var l=g.alternate;l?(g.updateQueue=l.updateQueue,g.memoizedState=l.memoizedState,g.expirationTime=l.expirationTime):(g.updateQueue=\nnull,g.memoizedState=null)}var m=0!==(M.current&1),p=f;do{var x;if(x=13===p.tag){var z=p.memoizedState;if(null!==z)x=null!==z.dehydrated?!0:!1;else{var ca=p.memoizedProps;x=void 0===ca.fallback?!1:!0!==ca.unstable_avoidThisFallback?!0:m?!1:!0}}if(x){var D=p.updateQueue;if(null===D){var t=new Set;t.add(k);p.updateQueue=t}else D.add(k);if(0===(p.mode&2)){p.effectTag|=64;g.effectTag&=-2981;if(1===g.tag)if(null===g.alternate)g.tag=17;else{var y=wg(1073741823,null);y.tag=2;xg(g,y)}g.expirationTime=1073741823;\nbreak a}h=void 0;g=b;var A=e.pingCache;null===A?(A=e.pingCache=new Wi,h=new Set,A.set(k,h)):(h=A.get(k),void 0===h&&(h=new Set,A.set(k,h)));if(!h.has(g)){h.add(g);var q=Oj.bind(null,e,k,g);k.then(q,q)}p.effectTag|=4096;p.expirationTime=b;break a}p=p.return}while(null!==p);h=Error((pb(g.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+qb(g))}S!==\njj&&(S=ij);h=Ai(h,g);p=f;do{switch(p.tag){case 3:k=h;p.effectTag|=4096;p.expirationTime=b;var B=Xi(p,k,b);yg(p,B);break a;case 1:k=h;var w=p.type,ub=p.stateNode;if(0===(p.effectTag&64)&&("function"===typeof w.getDerivedStateFromError||null!==ub&&"function"===typeof ub.componentDidCatch&&(null===aj||!aj.has(ub)))){p.effectTag|=4096;p.expirationTime=b;var vb=$i(p,k,b);yg(p,vb);break a}}p=p.return}while(null!==p)}X=Pj(X)}catch(Xc){b=Xc;continue}break}while(1)}\nfunction Fj(){var a=cj.current;cj.current=sh;return null===a?sh:a}function Ag(a,b){a<lj&&2<a&&(lj=a);null!==b&&a<mj&&2<a&&(mj=a,nj=b)}function Bg(a){a>wi&&(wi=a)}function Kj(){for(;null!==X;)X=Qj(X)}function Gj(){for(;null!==X&&!Uf();)X=Qj(X)}function Qj(a){var b=Rj(a.alternate,a,U);a.memoizedProps=a.pendingProps;null===b&&(b=Pj(a));dj.current=null;return b}\nfunction Pj(a){X=a;do{var b=X.alternate;a=X.return;if(0===(X.effectTag&2048)){b=si(b,X,U);if(1===U||1!==X.childExpirationTime){for(var c=0,d=X.child;null!==d;){var e=d.expirationTime,f=d.childExpirationTime;e>c&&(c=e);f>c&&(c=f);d=d.sibling}X.childExpirationTime=c}if(null!==b)return b;null!==a&&0===(a.effectTag&2048)&&(null===a.firstEffect&&(a.firstEffect=X.firstEffect),null!==X.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=X.firstEffect),a.lastEffect=X.lastEffect),1<X.effectTag&&(null!==\na.lastEffect?a.lastEffect.nextEffect=X:a.firstEffect=X,a.lastEffect=X))}else{b=zi(X);if(null!==b)return b.effectTag&=2047,b;null!==a&&(a.firstEffect=a.lastEffect=null,a.effectTag|=2048)}b=X.sibling;if(null!==b)return b;X=a}while(null!==X);S===ti&&(S=jj);return null}function Ij(a){var b=a.expirationTime;a=a.childExpirationTime;return b>a?b:a}function Jj(a){var b=ag();cg(99,Sj.bind(null,a,b));return null}\nfunction Sj(a,b){do Dj();while(null!==rj);if((W&(fj|gj))!==V)throw Error(u(327));var c=a.finishedWork,d=a.finishedExpirationTime;if(null===c)return null;a.finishedWork=null;a.finishedExpirationTime=0;if(c===a.current)throw Error(u(177));a.callbackNode=null;a.callbackExpirationTime=0;a.callbackPriority=90;a.nextKnownPendingLevel=0;var e=Ij(c);a.firstPendingTime=e;d<=a.lastSuspendedTime?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:d<=a.firstSuspendedTime&&(a.firstSuspendedTime=\nd-1);d<=a.lastPingedTime&&(a.lastPingedTime=0);d<=a.lastExpiredTime&&(a.lastExpiredTime=0);a===T&&(X=T=null,U=0);1<c.effectTag?null!==c.lastEffect?(c.lastEffect.nextEffect=c,e=c.firstEffect):e=c:e=c.firstEffect;if(null!==e){var f=W;W|=gj;dj.current=null;Dd=fd;var g=xd();if(yd(g)){if("selectionStart"in g)var h={start:g.selectionStart,end:g.selectionEnd};else a:{h=(h=g.ownerDocument)&&h.defaultView||window;var k=h.getSelection&&h.getSelection();if(k&&0!==k.rangeCount){h=k.anchorNode;var l=k.anchorOffset,\nm=k.focusNode;k=k.focusOffset;try{h.nodeType,m.nodeType}catch(wb){h=null;break a}var p=0,x=-1,z=-1,ca=0,D=0,t=g,y=null;b:for(;;){for(var A;;){t!==h||0!==l&&3!==t.nodeType||(x=p+l);t!==m||0!==k&&3!==t.nodeType||(z=p+k);3===t.nodeType&&(p+=t.nodeValue.length);if(null===(A=t.firstChild))break;y=t;t=A}for(;;){if(t===g)break b;y===h&&++ca===l&&(x=p);y===m&&++D===k&&(z=p);if(null!==(A=t.nextSibling))break;t=y;y=t.parentNode}t=A}h=-1===x||-1===z?null:{start:x,end:z}}else h=null}h=h||{start:0,end:0}}else h=\nnull;Ed={activeElementDetached:null,focusedElem:g,selectionRange:h};fd=!1;Y=e;do try{Tj()}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=e;do try{for(g=a,h=b;null!==Y;){var q=Y.effectTag;q&16&&Rb(Y.stateNode,"");if(q&128){var B=Y.alternate;if(null!==B){var w=B.ref;null!==w&&("function"===typeof w?w(null):w.current=null)}}switch(q&1038){case 2:Pi(Y);Y.effectTag&=-3;break;case 6:Pi(Y);Y.effectTag&=-3;Si(Y.alternate,Y);break;case 1024:Y.effectTag&=-1025;break;case 1028:Y.effectTag&=\n-1025;Si(Y.alternate,Y);break;case 4:Si(Y.alternate,Y);break;case 8:l=Y,Mi(g,l,h),Ni(l)}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);w=Ed;B=xd();q=w.focusedElem;h=w.selectionRange;if(B!==q&&q&&q.ownerDocument&&wd(q.ownerDocument.documentElement,q)){null!==h&&yd(q)&&(B=h.start,w=h.end,void 0===w&&(w=B),"selectionStart"in q?(q.selectionStart=B,q.selectionEnd=Math.min(w,q.value.length)):(w=(B=q.ownerDocument||document)&&B.defaultView||window,w.getSelection&&\n(w=w.getSelection(),l=q.textContent.length,g=Math.min(h.start,l),h=void 0===h.end?g:Math.min(h.end,l),!w.extend&&g>h&&(l=h,h=g,g=l),l=vd(q,g),m=vd(q,h),l&&m&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==m.node||w.focusOffset!==m.offset)&&(B=B.createRange(),B.setStart(l.node,l.offset),w.removeAllRanges(),g>h?(w.addRange(B),w.extend(m.node,m.offset)):(B.setEnd(m.node,m.offset),w.addRange(B))))));B=[];for(w=q;w=w.parentNode;)1===w.nodeType&&B.push({element:w,left:w.scrollLeft,\ntop:w.scrollTop});"function"===typeof q.focus&&q.focus();for(q=0;q<B.length;q++)w=B[q],w.element.scrollLeft=w.left,w.element.scrollTop=w.top}fd=!!Dd;Ed=Dd=null;a.current=c;Y=e;do try{for(q=a;null!==Y;){var ub=Y.effectTag;ub&36&&Ji(q,Y.alternate,Y);if(ub&128){B=void 0;var vb=Y.ref;if(null!==vb){var Xc=Y.stateNode;switch(Y.tag){case 5:B=Xc;break;default:B=Xc}"function"===typeof vb?vb(B):vb.current=B}}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=\nnull;Vf();W=f}else a.current=c;if(qj)qj=!1,rj=a,sj=b;else for(Y=e;null!==Y;)b=Y.nextEffect,Y.nextEffect=null,Y=b;b=a.firstPendingTime;0===b&&(aj=null);1073741823===b?a===vj?uj++:(uj=0,vj=a):uj=0;"function"===typeof Uj&&Uj(c.stateNode,d);Z(a);if(Yi)throw Yi=!1,a=Zi,Zi=null,a;if((W&ej)!==V)return null;gg();return null}function Tj(){for(;null!==Y;){var a=Y.effectTag;0!==(a&256)&&Gi(Y.alternate,Y);0===(a&512)||qj||(qj=!0,dg(97,function(){Dj();return null}));Y=Y.nextEffect}}\nfunction Dj(){if(90!==sj){var a=97<sj?97:sj;sj=90;return cg(a,Vj)}}function Vj(){if(null===rj)return!1;var a=rj;rj=null;if((W&(fj|gj))!==V)throw Error(u(331));var b=W;W|=gj;for(a=a.current.firstEffect;null!==a;){try{var c=a;if(0!==(c.effectTag&512))switch(c.tag){case 0:case 11:case 15:case 22:Hi(5,c),Ii(5,c)}}catch(d){if(null===a)throw Error(u(330));Ei(a,d)}c=a.nextEffect;a.nextEffect=null;a=c}W=b;gg();return!0}\nfunction Wj(a,b,c){b=Ai(c,b);b=Xi(a,b,1073741823);xg(a,b);a=xj(a,1073741823);null!==a&&Z(a)}function Ei(a,b){if(3===a.tag)Wj(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){Wj(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===aj||!aj.has(d))){a=Ai(b,a);a=$i(c,a,1073741823);xg(c,a);c=xj(c,1073741823);null!==c&&Z(c);break}}c=c.return}}\nfunction Oj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);T===a&&U===c?S===vi||S===ui&&1073741823===lj&&$f()-Ti<pj?Ej(a,U):oj=!0:Aj(a,c)&&(b=a.lastPingedTime,0!==b&&b<c||(a.lastPingedTime=c,Z(a)))}function Vi(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=Gg(),b=Hg(b,a,null));a=xj(a,b);null!==a&&Z(a)}var Rj;\nRj=function(a,b,c){var d=b.expirationTime;if(null!==a){var e=b.pendingProps;if(a.memoizedProps!==e||K.current)rg=!0;else{if(d<c){rg=!1;switch(b.tag){case 3:hi(b);Xh();break;case 5:fh(b);if(b.mode&4&&1!==c&&e.hidden)return b.expirationTime=b.childExpirationTime=1,null;break;case 1:L(b.type)&&Gf(b);break;case 4:dh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;e=b.type._context;I(jg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;\nif(0!==d&&d>=c)return ji(a,b,c);I(M,M.current&1);b=$h(a,b,c);return null!==b?b.sibling:null}I(M,M.current&1);break;case 19:d=b.childExpirationTime>=c;if(0!==(a.effectTag&64)){if(d)return mi(a,b,c);b.effectTag|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null);I(M,M.current);if(!d)return null}return $h(a,b,c)}rg=!1}}else rg=!1;b.expirationTime=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;e=Cf(b,J.current);qg(b,c);e=oh(null,\nb,d,a,e,c);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(L(d)){var f=!0;Gf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;ug(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Fg(b,d,g,a);e.updater=Jg;b.stateNode=e;e._reactInternalFiber=b;Ng(b,d,a,c);b=gi(null,b,d,!0,f,c)}else b.tag=0,R(null,b,e,c),b=b.child;return b;case 16:a:{e=b.elementType;null!==a&&(a.alternate=\nnull,b.alternate=null,b.effectTag|=2);a=b.pendingProps;ob(e);if(1!==e._status)throw e._result;e=e._result;b.type=e;f=b.tag=Xj(e);a=ig(e,a);switch(f){case 0:b=di(null,b,e,a,c);break a;case 1:b=fi(null,b,e,a,c);break a;case 11:b=Zh(null,b,e,a,c);break a;case 14:b=ai(null,b,e,ig(e.type,a),d,c);break a}throw Error(u(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),di(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),fi(a,b,d,e,c);\ncase 3:hi(b);d=b.updateQueue;if(null===a||null===d)throw Error(u(282));d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;vg(a,b);zg(b,d,null,c);d=b.memoizedState.element;if(d===e)Xh(),b=$h(a,b,c);else{if(e=b.stateNode.hydrate)Ph=Jd(b.stateNode.containerInfo.firstChild),Oh=b,e=Qh=!0;if(e)for(c=Yg(b,null,d,c),b.child=c;c;)c.effectTag=c.effectTag&-3|1024,c=c.sibling;else R(a,b,d,c),Xh();b=b.child}return b;case 5:return fh(b),null===a&&Uh(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:\nnull,g=e.children,Gd(d,e)?g=null:null!==f&&Gd(d,f)&&(b.effectTag|=16),ei(a,b),b.mode&4&&1!==c&&e.hidden?(b.expirationTime=b.childExpirationTime=1,b=null):(R(a,b,g,c),b=b.child),b;case 6:return null===a&&Uh(b),null;case 13:return ji(a,b,c);case 4:return dh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Xg(b,null,d,c):R(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),Zh(a,b,d,e,c);case 7:return R(a,b,b.pendingProps,c),b.child;case 8:return R(a,\nb,b.pendingProps.children,c),b.child;case 12:return R(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(jg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=$e(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!K.current){b=$h(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==\nk){g=h.child;for(var l=k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=wg(c,null),l.tag=2,xg(h,l));h.expirationTime<c&&(h.expirationTime=c);l=h.alternate;null!==l&&l.expirationTime<c&&(l.expirationTime=c);pg(h.return,c);k.expirationTime<c&&(k.expirationTime=c);break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=\ng}R(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,qg(b,c),e=sg(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,R(a,b,d,c),b.child;case 14:return e=b.type,f=ig(e,b.pendingProps),f=ig(e.type,f),ai(a,b,e,f,d,c);case 15:return ci(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L(d)?(a=!0,Gf(b)):a=!1,qg(b,c),Lg(b,d,e),Ng(b,d,e,c),gi(null,\nb,d,!0,a,c);case 19:return mi(a,b,c)}throw Error(u(156,b.tag));};var Uj=null,Li=null;function Yj(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Uj=function(a){try{b.onCommitFiberRoot(c,a,void 0,64===(a.current.effectTag&64))}catch(e){}};Li=function(a){try{b.onCommitFiberUnmount(c,a)}catch(e){}}}catch(d){}return!0}\nfunction Zj(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function Sh(a,b,c,d){return new Zj(a,b,c,d)}\nfunction bi(a){a=a.prototype;return!(!a||!a.isReactComponent)}function Xj(a){if("function"===typeof a)return bi(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===gb)return 11;if(a===jb)return 14}return 2}\nfunction Sg(a,b){var c=a.alternate;null===c?(c=Sh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{expirationTime:b.expirationTime,\nfirstContext:b.firstContext,responders:b.responders};c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction Ug(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)bi(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ab:return Wg(c.children,e,f,b);case fb:g=8;e|=7;break;case bb:g=8;e|=1;break;case cb:return a=Sh(12,c,b,e|8),a.elementType=cb,a.type=cb,a.expirationTime=f,a;case hb:return a=Sh(13,c,b,e),a.type=hb,a.elementType=hb,a.expirationTime=f,a;case ib:return a=Sh(19,c,b,e),a.elementType=ib,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case db:g=\n10;break a;case eb:g=9;break a;case gb:g=11;break a;case jb:g=14;break a;case kb:g=16;d=null;break a;case lb:g=22;break a}throw Error(u(130,null==a?a:typeof a,""));}b=Sh(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function Wg(a,b,c,d){a=Sh(7,a,d,b);a.expirationTime=c;return a}function Tg(a,b,c){a=Sh(6,a,null,b);a.expirationTime=c;return a}\nfunction Vg(a,b,c){b=Sh(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction ak(a,b,c){this.tag=b;this.current=null;this.containerInfo=a;this.pingCache=this.pendingChildren=null;this.finishedExpirationTime=0;this.finishedWork=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=90;this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}\nfunction Aj(a,b){var c=a.firstSuspendedTime;a=a.lastSuspendedTime;return 0!==c&&c>=b&&a<=b}function xi(a,b){var c=a.firstSuspendedTime,d=a.lastSuspendedTime;c<b&&(a.firstSuspendedTime=b);if(d>b||0===c)a.lastSuspendedTime=b;b<=a.lastPingedTime&&(a.lastPingedTime=0);b<=a.lastExpiredTime&&(a.lastExpiredTime=0)}\nfunction yi(a,b){b>a.firstPendingTime&&(a.firstPendingTime=b);var c=a.firstSuspendedTime;0!==c&&(b>=c?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:b>=a.lastSuspendedTime&&(a.lastSuspendedTime=b+1),b>a.nextKnownPendingLevel&&(a.nextKnownPendingLevel=b))}function Cj(a,b){var c=a.lastExpiredTime;if(0===c||c>b)a.lastExpiredTime=b}\nfunction bk(a,b,c,d){var e=b.current,f=Gg(),g=Dg.suspense;f=Hg(f,e,g);a:if(c){c=c._reactInternalFiber;b:{if(dc(c)!==c||1!==c.tag)throw Error(u(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(L(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(u(171));}if(1===c.tag){var k=c.type;if(L(k)){c=Ff(c,k,h);break a}}c=h}else c=Af;null===b.context?b.context=c:b.pendingContext=c;b=wg(f,g);b.payload={element:a};d=void 0===\nd?null:d;null!==d&&(b.callback=d);xg(e,b);Ig(e,f);return f}function ck(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function dk(a,b){a=a.memoizedState;null!==a&&null!==a.dehydrated&&a.retryTime<b&&(a.retryTime=b)}function ek(a,b){dk(a,b);(a=a.alternate)&&dk(a,b)}\nfunction fk(a,b,c){c=null!=c&&!0===c.hydrate;var d=new ak(a,b,c),e=Sh(3,null,null,2===b?7:1===b?3:0);d.current=e;e.stateNode=d;ug(e);a[Od]=d.current;c&&0!==b&&Jc(a,9===a.nodeType?a:a.ownerDocument);this._internalRoot=d}fk.prototype.render=function(a){bk(a,this._internalRoot,null,null)};fk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;bk(null,a,null,function(){b[Od]=null})};\nfunction gk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function hk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new fk(a,0,b?{hydrate:!0}:void 0)}\nfunction ik(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=ck(g);h.call(a)}}bk(b,g,a,e)}else{f=c._reactRootContainer=hk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=ck(g);k.call(a)}}Nj(function(){bk(b,g,a,e)})}return ck(g)}function jk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:$a,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}\nwc=function(a){if(13===a.tag){var b=hg(Gg(),150,100);Ig(a,b);ek(a,b)}};xc=function(a){13===a.tag&&(Ig(a,3),ek(a,3))};yc=function(a){if(13===a.tag){var b=Gg();b=Hg(b,a,null);Ig(a,b);ek(a,b)}};\nza=function(a,b,c){switch(b){case "input":Cb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+\'][type="radio"]\');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Qd(d);if(!e)throw Error(u(90));yb(d);Cb(d,e)}}}break;case "textarea":Kb(a,c);break;case "select":b=c.value,null!=b&&Hb(a,!!c.multiple,b,!1)}};Fa=Mj;\nGa=function(a,b,c,d,e){var f=W;W|=4;try{return cg(98,a.bind(null,b,c,d,e))}finally{W=f,W===V&&gg()}};Ha=function(){(W&(1|fj|gj))===V&&(Lj(),Dj())};Ia=function(a,b){var c=W;W|=2;try{return a(b)}finally{W=c,W===V&&gg()}};function kk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!gk(b))throw Error(u(200));return jk(a,b,null,c)}var lk={Events:[Nc,Pd,Qd,xa,ta,Xd,function(a){jc(a,Wd)},Da,Ea,id,mc,Dj,{current:!1}]};\n(function(a){var b=a.findFiberByHostInstance;return Yj(n({},a,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Wa.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=hc(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))})({findFiberByHostInstance:tc,bundleType:0,version:"16.13.1",\nrendererPackageName:"react-dom"});exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=lk;exports.createPortal=kk;exports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(void 0===b){if("function"===typeof a.render)throw Error(u(188));throw Error(u(268,Object.keys(a)));}a=hc(b);a=null===a?null:a.stateNode;return a};\nexports.flushSync=function(a,b){if((W&(fj|gj))!==V)throw Error(u(187));var c=W;W|=1;try{return cg(99,a.bind(null,b))}finally{W=c,gg()}};exports.hydrate=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!0,c)};exports.render=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!1,c)};\nexports.unmountComponentAtNode=function(a){if(!gk(a))throw Error(u(40));return a._reactRootContainer?(Nj(function(){ik(null,null,a,!1,function(){a._reactRootContainer=null;a[Od]=null})}),!0):!1};exports.unstable_batchedUpdates=Mj;exports.unstable_createPortal=function(a,b){return kk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!gk(c))throw Error(u(200));if(null==a||void 0===a._reactInternalFiber)throw Error(u(38));return ik(a,b,c,!1,d)};exports.version="16.13.1";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(42);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzPzQwMjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxJQUFxQztBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyxFQUFtQztBQUM5RCxDQUFDLE1BQU0sRUFFTiIsImZpbGUiOiI0MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///41\n")},function(module,exports,__webpack_require__){"use strict";eval('/** @license React v0.19.1\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar f,g,h,k,l;\nif("undefined"===typeof window||"function"!==typeof MessageChannel){var p=null,q=null,t=function(){if(null!==p)try{var a=exports.unstable_now();p(!0,a);p=null}catch(b){throw setTimeout(t,0),b;}},u=Date.now();exports.unstable_now=function(){return Date.now()-u};f=function(a){null!==p?setTimeout(f,0,a):(p=a,setTimeout(t,0))};g=function(a,b){q=setTimeout(a,b)};h=function(){clearTimeout(q)};k=function(){return!1};l=exports.unstable_forceFrameRate=function(){}}else{var w=window.performance,x=window.Date,\ny=window.setTimeout,z=window.clearTimeout;if("undefined"!==typeof console){var A=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");"function"!==typeof A&&console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"===\ntypeof w&&"function"===typeof w.now)exports.unstable_now=function(){return w.now()};else{var B=x.now();exports.unstable_now=function(){return x.now()-B}}var C=!1,D=null,E=-1,F=5,G=0;k=function(){return exports.unstable_now()>=G};l=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):F=0<a?Math.floor(1E3/a):5};var H=new MessageChannel,I=H.port2;H.port1.onmessage=\nfunction(){if(null!==D){var a=exports.unstable_now();G=a+F;try{D(!0,a)?I.postMessage(null):(C=!1,D=null)}catch(b){throw I.postMessage(null),b;}}else C=!1};f=function(a){D=a;C||(C=!0,I.postMessage(null))};g=function(a,b){E=y(function(){a(exports.unstable_now())},b)};h=function(){z(E);E=-1}}function J(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<K(e,b))a[d]=b,a[c]=e,c=d;else break a}}function L(a){a=a[0];return void 0===a?null:a}\nfunction M(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>K(n,c))void 0!==r&&0>K(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>K(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function K(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var N=[],O=[],P=1,Q=null,R=3,S=!1,T=!1,U=!1;\nfunction V(a){for(var b=L(O);null!==b;){if(null===b.callback)M(O);else if(b.startTime<=a)M(O),b.sortIndex=b.expirationTime,J(N,b);else break;b=L(O)}}function W(a){U=!1;V(a);if(!T)if(null!==L(N))T=!0,f(X);else{var b=L(O);null!==b&&g(W,b.startTime-a)}}\nfunction X(a,b){T=!1;U&&(U=!1,h());S=!0;var c=R;try{V(b);for(Q=L(N);null!==Q&&(!(Q.expirationTime>b)||a&&!k());){var d=Q.callback;if(null!==d){Q.callback=null;R=Q.priorityLevel;var e=d(Q.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?Q.callback=e:Q===L(N)&&M(N);V(b)}else M(N);Q=L(N)}if(null!==Q)var m=!0;else{var n=L(O);null!==n&&g(W,n.startTime-b);m=!1}return m}finally{Q=null,R=c,S=!1}}\nfunction Y(a){switch(a){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var Z=l;exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){T||S||(T=!0,f(X))};\nexports.unstable_getCurrentPriorityLevel=function(){return R};exports.unstable_getFirstCallbackNode=function(){return L(N)};exports.unstable_next=function(a){switch(R){case 1:case 2:case 3:var b=3;break;default:b=R}var c=R;R=b;try{return a()}finally{R=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=Z;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=R;R=a;try{return b()}finally{R=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();if("object"===typeof c&&null!==c){var e=c.delay;e="number"===typeof e&&0<e?d+e:d;c="number"===typeof c.timeout?c.timeout:Y(a)}else c=Y(a),e=d;c=e+c;a={id:P++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,J(O,a),null===L(N)&&a===L(O)&&(U?h():U=!0,g(W,e-d))):(a.sortIndex=c,J(N,a),T||S||(T=!0,f(X)));return a};\nexports.unstable_shouldYield=function(){var a=exports.unstable_now();V(a);var b=L(N);return b!==Q&&null!==Q&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<Q.expirationTime||k()};exports.unstable_wrapCallback=function(a){var b=R;return function(){var c=R;R=b;try{return a.apply(this,arguments)}finally{R=c}}};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42\n')},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguY3NzP2M0MGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///43\n")},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vY3NzL3h0ZXJtLmNzcz83YzMzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///44\n")},function(module,exports,__webpack_require__){"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = __webpack_require__(46);\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanM/ZDdhMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsMkJBQTJCLG1CQUFPLENBQUMsRUFBNEI7O0FBRS9EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjQ1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///45\n")},function(module,exports,__webpack_require__){"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanM/NTliMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7O0FBRUEiLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///46\n")},function(module,exports){eval("module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzP2VkMDciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBIiwiZmlsZSI6IjQ3LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47\n")},function(module,exports,__webpack_require__){"use strict";eval('/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?\nSymbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;\nfunction z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzP2E5M2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTtBQUNiO0FBQ0EsY0FBYyxrQ0FBa0MsaUJBQWlCLFVBQVUsMEJBQTBCLG1EQUFtRCxrQ0FBa0MsNENBQTRDLGtCQUFrQixrQkFBa0IsY0FBYyxnQkFBZ0Isb0JBQW9CLHlCQUF5QiwwQkFBMEIsMEJBQTBCLGtCQUFrQixxQkFBcUIsbUJBQW1CLGVBQWUsZUFBZTtBQUNqZSxtQkFBbUIscUJBQXFCLG1CQUFtQixnQ0FBZ0MsdUJBQXVCLDJCQUEyQixzQ0FBc0MsaUJBQWlCLHNDQUFzQyxpQkFBaUIsOEJBQThCLHFEQUFxRCxpQ0FBaUMsaUJBQWlCLCtCQUErQixpQkFBaUIsMkJBQTJCO0FBQzNjLDJCQUEyQixpQkFBaUIsNkJBQTZCLGlCQUFpQiwrQkFBK0IsaUJBQWlCLGlDQUFpQyxpQkFBaUIsK0JBQStCO0FBQzNOLHVDQUF1Qyw2UUFBNlEiLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///48\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/Stylesheet.js\n\nvar InjectionMode = {\n    /**\n     * Avoids style injection, use getRules() to read the styles.\n     */\n    none: 0,\n    /**\n     * Inserts rules using the insertRule api.\n     */\n    insertNode: 1,\n    /**\n     * Appends rules using appendChild.\n     */\n    appendChild: 2,\n};\nvar STYLESHEET_SETTING = '__stylesheet__';\n/**\n * MSIE 11 doesn't cascade styles based on DOM ordering, but rather on the order that each style node\n * is created. As such, to maintain consistent priority, IE11 should reuse a single style node.\n */\nvar REUSE_STYLE_NODE = typeof navigator !== 'undefined' && /rv:11.0/.test(navigator.userAgent);\nvar _global = {};\n// Grab window.\ntry {\n    _global = window;\n}\ncatch (_a) {\n    /* leave as blank object */\n}\nvar _stylesheet;\n/**\n * Represents the state of styles registered in the page. Abstracts\n * the surface for adding styles to the stylesheet, exposes helpers\n * for reading the styles registered in server rendered scenarios.\n *\n * @public\n */\nvar Stylesheet_Stylesheet = /** @class */ (function () {\n    function Stylesheet(config) {\n        this._rules = [];\n        this._preservedRules = [];\n        this._rulesToInsert = [];\n        this._counter = 0;\n        this._keyToClassName = {};\n        this._onResetCallbacks = [];\n        this._classNameToArgs = {};\n        this._config = __assign({ injectionMode: InjectionMode.insertNode, defaultPrefix: 'css', namespace: undefined, cspSettings: undefined }, config);\n        this._keyToClassName = this._config.classNameCache || {};\n    }\n    /**\n     * Gets the singleton instance.\n     */\n    Stylesheet.getInstance = function () {\n        var _a;\n        _stylesheet = _global[STYLESHEET_SETTING];\n        if (!_stylesheet || (_stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document)) {\n            var fabricConfig = ((_a = _global) === null || _a === void 0 ? void 0 : _a.FabricConfig) || {};\n            _stylesheet = _global[STYLESHEET_SETTING] = new Stylesheet(fabricConfig.mergeStyles);\n        }\n        return _stylesheet;\n    };\n    /**\n     * Configures the stylesheet.\n     */\n    Stylesheet.prototype.setConfig = function (config) {\n        this._config = __assign(__assign({}, this._config), config);\n    };\n    /**\n     * Configures a reset callback.\n     *\n     * @param callback - A callback which will be called when the Stylesheet is reset.\n     */\n    Stylesheet.prototype.onReset = function (callback) {\n        this._onResetCallbacks.push(callback);\n    };\n    /**\n     * Generates a unique classname.\n     *\n     * @param displayName - Optional value to use as a prefix.\n     */\n    Stylesheet.prototype.getClassName = function (displayName) {\n        var namespace = this._config.namespace;\n        var prefix = displayName || this._config.defaultPrefix;\n        return \"\" + (namespace ? namespace + '-' : '') + prefix + \"-\" + this._counter++;\n    };\n    /**\n     * Used internally to cache information about a class which was\n     * registered with the stylesheet.\n     */\n    Stylesheet.prototype.cacheClassName = function (className, key, args, rules) {\n        this._keyToClassName[key] = className;\n        this._classNameToArgs[className] = {\n            args: args,\n            rules: rules,\n        };\n    };\n    /**\n     * Gets the appropriate classname given a key which was previously\n     * registered using cacheClassName.\n     */\n    Stylesheet.prototype.classNameFromKey = function (key) {\n        return this._keyToClassName[key];\n    };\n    /**\n     * Gets all classnames cache with the stylesheet.\n     */\n    Stylesheet.prototype.getClassNameCache = function () {\n        return this._keyToClassName;\n    };\n    /**\n     * Gets the arguments associated with a given classname which was\n     * previously registered using cacheClassName.\n     */\n    Stylesheet.prototype.argsFromClassName = function (className) {\n        var entry = this._classNameToArgs[className];\n        return entry && entry.args;\n    };\n    /**\n     * Gets the arguments associated with a given classname which was\n     * previously registered using cacheClassName.\n     */\n    Stylesheet.prototype.insertedRulesFromClassName = function (className) {\n        var entry = this._classNameToArgs[className];\n        return entry && entry.rules;\n    };\n    /**\n     * Inserts a css rule into the stylesheet.\n     * @param preserve - Preserves the rule beyond a reset boundary.\n     */\n    Stylesheet.prototype.insertRule = function (rule, preserve) {\n        var injectionMode = this._config.injectionMode;\n        var element = injectionMode !== InjectionMode.none ? this._getStyleElement() : undefined;\n        if (preserve) {\n            this._preservedRules.push(rule);\n        }\n        if (element) {\n            switch (this._config.injectionMode) {\n                case InjectionMode.insertNode:\n                    var sheet = element.sheet;\n                    try {\n                        sheet.insertRule(rule, sheet.cssRules.length);\n                    }\n                    catch (e) {\n                        // The browser will throw exceptions on unsupported rules (such as a moz prefix in webkit.)\n                        // We need to swallow the exceptions for this scenario, otherwise we'd need to filter\n                        // which could be slower and bulkier.\n                    }\n                    break;\n                case InjectionMode.appendChild:\n                    element.appendChild(document.createTextNode(rule));\n                    break;\n            }\n        }\n        else {\n            this._rules.push(rule);\n        }\n        if (this._config.onInsertRule) {\n            this._config.onInsertRule(rule);\n        }\n    };\n    /**\n     * Gets all rules registered with the stylesheet; only valid when\n     * using InsertionMode.none.\n     */\n    Stylesheet.prototype.getRules = function (includePreservedRules) {\n        return ((includePreservedRules ? this._preservedRules.join('') : '') + this._rules.join('') + this._rulesToInsert.join(''));\n    };\n    /**\n     * Resets the internal state of the stylesheet. Only used in server\n     * rendered scenarios where we're using InsertionMode.none.\n     */\n    Stylesheet.prototype.reset = function () {\n        this._rules = [];\n        this._rulesToInsert = [];\n        this._counter = 0;\n        this._classNameToArgs = {};\n        this._keyToClassName = {};\n        this._onResetCallbacks.forEach(function (callback) { return callback(); });\n    };\n    // Forces the regeneration of incoming styles without totally resetting the stylesheet.\n    Stylesheet.prototype.resetKeys = function () {\n        this._keyToClassName = {};\n    };\n    Stylesheet.prototype._getStyleElement = function () {\n        var _this = this;\n        if (!this._styleElement && typeof document !== 'undefined') {\n            this._styleElement = this._createStyleElement();\n            if (!REUSE_STYLE_NODE) {\n                // Reset the style element on the next frame.\n                window.requestAnimationFrame(function () {\n                    _this._styleElement = undefined;\n                });\n            }\n        }\n        return this._styleElement;\n    };\n    Stylesheet.prototype._createStyleElement = function () {\n        var head = document.head;\n        var styleElement = document.createElement('style');\n        styleElement.setAttribute('data-merge-styles', 'true');\n        var cspSettings = this._config.cspSettings;\n        if (cspSettings) {\n            if (cspSettings.nonce) {\n                styleElement.setAttribute('nonce', cspSettings.nonce);\n            }\n        }\n        if (this._lastStyleElement) {\n            // If the `nextElementSibling` is null, then the insertBefore will act as a regular append.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore#Syntax\n            head.insertBefore(styleElement, this._lastStyleElement.nextElementSibling);\n        }\n        else {\n            var placeholderStyleTag = this._findPlaceholderStyleTag();\n            if (placeholderStyleTag) {\n                head.insertBefore(styleElement, placeholderStyleTag.nextElementSibling);\n            }\n            else {\n                head.insertBefore(styleElement, head.childNodes[0]);\n            }\n        }\n        this._lastStyleElement = styleElement;\n        return styleElement;\n    };\n    Stylesheet.prototype._findPlaceholderStyleTag = function () {\n        var head = document.head;\n        if (head) {\n            return head.querySelector('style[data-merge-styles]');\n        }\n        return null;\n    };\n    return Stylesheet;\n}());\n\n//# sourceMappingURL=Stylesheet.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/extractStyleParts.js\n\n/**\n * Separates the classes and style objects. Any classes that are pre-registered\n * args are auto expanded into objects.\n */\nfunction extractStyleParts() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var classes = [];\n    var objects = [];\n    var stylesheet = Stylesheet_Stylesheet.getInstance();\n    function _processArgs(argsList) {\n        for (var _i = 0, argsList_1 = argsList; _i < argsList_1.length; _i++) {\n            var arg = argsList_1[_i];\n            if (arg) {\n                if (typeof arg === 'string') {\n                    if (arg.indexOf(' ') >= 0) {\n                        _processArgs(arg.split(' '));\n                    }\n                    else {\n                        var translatedArgs = stylesheet.argsFromClassName(arg);\n                        if (translatedArgs) {\n                            _processArgs(translatedArgs);\n                        }\n                        else {\n                            // Avoid adding the same class twice.\n                            if (classes.indexOf(arg) === -1) {\n                                classes.push(arg);\n                            }\n                        }\n                    }\n                }\n                else if (Array.isArray(arg)) {\n                    _processArgs(arg);\n                }\n                else if (typeof arg === 'object') {\n                    objects.push(arg);\n                }\n            }\n        }\n    }\n    _processArgs(args);\n    return {\n        classes: classes,\n        objects: objects,\n    };\n}\n//# sourceMappingURL=extractStyleParts.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/StyleOptionsState.js\n/**\n * Sets the current RTL value.\n */\nfunction setRTL(isRTL) {\n    if (_rtl !== isRTL) {\n        _rtl = isRTL;\n    }\n}\n/**\n * Gets the current RTL value.\n */\nfunction getRTL() {\n    if (_rtl === undefined) {\n        _rtl =\n            typeof document !== 'undefined' &&\n                !!document.documentElement &&\n                document.documentElement.getAttribute('dir') === 'rtl';\n    }\n    return _rtl;\n}\n// This has been split into 2 lines because it was working in Fabric due to the code being transpiled to es5, so this\n// was converted to var while not working in Fluent that uses babel to transpile the code to be es6-like. Splitting the\n// logic into two lines, however, allows it to work in both scenarios.\nvar _rtl;\n_rtl = getRTL();\nfunction getStyleOptions() {\n    return {\n        rtl: getRTL(),\n    };\n}\n//# sourceMappingURL=StyleOptionsState.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/transforms/kebabRules.js\nvar kebabRules_rules = {};\nfunction kebabRules(rulePairs, index) {\n    var rule = rulePairs[index];\n    if (rule.charAt(0) !== '-') {\n        rulePairs[index] = kebabRules_rules[rule] = kebabRules_rules[rule] || rule.replace(/([A-Z])/g, '-$1').toLowerCase();\n    }\n}\n//# sourceMappingURL=kebabRules.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/getVendorSettings.js\nvar _vendorSettings;\nfunction getVendorSettings() {\n    if (!_vendorSettings) {\n        var doc = typeof document !== 'undefined' ? document : undefined;\n        var nav = typeof navigator !== 'undefined' ? navigator : undefined;\n        var userAgent = nav ? nav.userAgent.toLowerCase() : undefined;\n        if (!doc) {\n            _vendorSettings = {\n                isWebkit: true,\n                isMoz: true,\n                isOpera: true,\n                isMs: true,\n            };\n        }\n        else {\n            _vendorSettings = {\n                isWebkit: !!(doc && 'WebkitAppearance' in doc.documentElement.style),\n                isMoz: !!(userAgent && userAgent.indexOf('firefox') > -1),\n                isOpera: !!(userAgent && userAgent.indexOf('opera') > -1),\n                isMs: !!(nav && (/rv:11.0/i.test(nav.userAgent) || /Edge\\/\\d./i.test(navigator.userAgent))),\n            };\n        }\n    }\n    return _vendorSettings;\n}\n/**\n * Sets the vendor settings for prefixing and vendor specific operations.\n */\nfunction setVendorSettings(vendorSettings) {\n    _vendorSettings = vendorSettings;\n}\n//# sourceMappingURL=getVendorSettings.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/transforms/prefixRules.js\n\nvar autoPrefixNames = {\n    'user-select': 1,\n};\nfunction prefixRules(rulePairs, index) {\n    var vendorSettings = getVendorSettings();\n    var name = rulePairs[index];\n    if (autoPrefixNames[name]) {\n        var value = rulePairs[index + 1];\n        if (autoPrefixNames[name]) {\n            if (vendorSettings.isWebkit) {\n                rulePairs.push('-webkit-' + name, value);\n            }\n            if (vendorSettings.isMoz) {\n                rulePairs.push('-moz-' + name, value);\n            }\n            if (vendorSettings.isMs) {\n                rulePairs.push('-ms-' + name, value);\n            }\n            if (vendorSettings.isOpera) {\n                rulePairs.push('-o-' + name, value);\n            }\n        }\n    }\n}\n//# sourceMappingURL=prefixRules.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/transforms/provideUnits.js\nvar NON_PIXEL_NUMBER_PROPS = [\n    'column-count',\n    'font-weight',\n    'flex',\n    'flex-grow',\n    'flex-shrink',\n    'fill-opacity',\n    'opacity',\n    'order',\n    'z-index',\n    'zoom',\n];\nfunction provideUnits(rulePairs, index) {\n    var name = rulePairs[index];\n    var value = rulePairs[index + 1];\n    if (typeof value === 'number') {\n        var unit = NON_PIXEL_NUMBER_PROPS.indexOf(name) === -1 ? 'px' : '';\n        rulePairs[index + 1] = \"\" + value + unit;\n    }\n}\n//# sourceMappingURL=provideUnits.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/transforms/rtlifyRules.js\nvar rtlifyRules_a;\nvar LEFT = 'left';\nvar RIGHT = 'right';\nvar NO_FLIP = '@noflip';\nvar NAME_REPLACEMENTS = (rtlifyRules_a = {},\n    rtlifyRules_a[LEFT] = RIGHT,\n    rtlifyRules_a[RIGHT] = LEFT,\n    rtlifyRules_a);\nvar VALUE_REPLACEMENTS = {\n    'w-resize': 'e-resize',\n    'sw-resize': 'se-resize',\n    'nw-resize': 'ne-resize',\n};\n/**\n * RTLifies the rulePair in the array at the current index. This mutates the array for performance\n * reasons.\n */\nfunction rtlifyRules(options, rulePairs, index) {\n    if (options.rtl) {\n        var name_1 = rulePairs[index];\n        if (!name_1) {\n            return;\n        }\n        var value = rulePairs[index + 1];\n        if (typeof value === 'string' && value.indexOf(NO_FLIP) >= 0) {\n            rulePairs[index + 1] = value.replace(/\\s*(?:\\/\\*\\s*)?\\@noflip\\b(?:\\s*\\*\\/)?\\s*?/g, '');\n        }\n        else if (name_1.indexOf(LEFT) >= 0) {\n            rulePairs[index] = name_1.replace(LEFT, RIGHT);\n        }\n        else if (name_1.indexOf(RIGHT) >= 0) {\n            rulePairs[index] = name_1.replace(RIGHT, LEFT);\n        }\n        else if (String(value).indexOf(LEFT) >= 0) {\n            rulePairs[index + 1] = value.replace(LEFT, RIGHT);\n        }\n        else if (String(value).indexOf(RIGHT) >= 0) {\n            rulePairs[index + 1] = value.replace(RIGHT, LEFT);\n        }\n        else if (NAME_REPLACEMENTS[name_1]) {\n            rulePairs[index] = NAME_REPLACEMENTS[name_1];\n        }\n        else if (VALUE_REPLACEMENTS[value]) {\n            rulePairs[index + 1] = VALUE_REPLACEMENTS[value];\n        }\n        else {\n            switch (name_1) {\n                case 'margin':\n                case 'padding':\n                    rulePairs[index + 1] = flipQuad(value);\n                    break;\n                case 'box-shadow':\n                    rulePairs[index + 1] = negateNum(value, 0);\n                    break;\n            }\n        }\n    }\n}\n/**\n * Given a string value in a space delimited format (e.g. \"1 2 3 4\"), negates a particular value.\n */\nfunction negateNum(value, partIndex) {\n    var parts = value.split(' ');\n    var numberVal = parseInt(parts[partIndex], 10);\n    parts[0] = parts[0].replace(String(numberVal), String(numberVal * -1));\n    return parts.join(' ');\n}\n/**\n * Given a string quad, flips the left and right values.\n */\nfunction flipQuad(value) {\n    if (typeof value === 'string') {\n        var parts = value.split(' ');\n        if (parts.length === 4) {\n            return parts[0] + \" \" + parts[3] + \" \" + parts[2] + \" \" + parts[1];\n        }\n    }\n    return value;\n}\n//# sourceMappingURL=rtlifyRules.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/styleToClassName.js\n\n\n\n\n\n\nvar DISPLAY_NAME = 'displayName';\nfunction getDisplayName(rules) {\n    var rootStyle = rules && rules['&'];\n    return rootStyle ? rootStyle.displayName : undefined;\n}\nvar globalSelectorRegExp = /\\:global\\((.+?)\\)/g;\n/**\n * Finds comma separated selectors in a :global() e.g. \":global(.class1, .class2, .class3)\"\n * and wraps them each in their own global \":global(.class1), :global(.class2), :global(.class3)\"\n *\n * @param selectorWithGlobals The selector to process\n * @returns The updated selector\n */\nfunction expandCommaSeparatedGlobals(selectorWithGlobals) {\n    // We the selector does not have a :global() we can shortcut\n    if (!globalSelectorRegExp.test(selectorWithGlobals)) {\n        return selectorWithGlobals;\n    }\n    var replacementInfo = [];\n    var findGlobal = /\\:global\\((.+?)\\)/g;\n    var match = null;\n    // Create a result list for global selectors so we can replace them.\n    while ((match = findGlobal.exec(selectorWithGlobals))) {\n        // Only if the found selector is a comma separated list we'll process it.\n        if (match[1].indexOf(',') > -1) {\n            replacementInfo.push([\n                match.index,\n                match.index + match[0].length,\n                // Wrap each of the found selectors in :global()\n                match[1]\n                    .split(',')\n                    .map(function (v) { return \":global(\" + v.trim() + \")\"; })\n                    .join(', '),\n            ]);\n        }\n    }\n    // Replace the found selectors with their wrapped variants in reverse order\n    return replacementInfo\n        .reverse()\n        .reduce(function (selector, _a) {\n        var matchIndex = _a[0], matchEndIndex = _a[1], replacement = _a[2];\n        var prefix = selector.slice(0, matchIndex);\n        var suffix = selector.slice(matchEndIndex);\n        return prefix + replacement + suffix;\n    }, selectorWithGlobals);\n}\nfunction expandSelector(newSelector, currentSelector) {\n    if (newSelector.indexOf(':global(') >= 0) {\n        return newSelector.replace(globalSelectorRegExp, '$1');\n    }\n    else if (newSelector.indexOf(':') === 0) {\n        return currentSelector + newSelector;\n    }\n    else if (newSelector.indexOf('&') < 0) {\n        return currentSelector + ' ' + newSelector;\n    }\n    return newSelector;\n}\nfunction extractRules(args, rules, currentSelector) {\n    if (rules === void 0) { rules = { __order: [] }; }\n    if (currentSelector === void 0) { currentSelector = '&'; }\n    var stylesheet = Stylesheet_Stylesheet.getInstance();\n    var currentRules = rules[currentSelector];\n    if (!currentRules) {\n        currentRules = {};\n        rules[currentSelector] = currentRules;\n        rules.__order.push(currentSelector);\n    }\n    for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {\n        var arg = args_1[_i];\n        // If the arg is a string, we need to look up the class map and merge.\n        if (typeof arg === 'string') {\n            var expandedRules = stylesheet.argsFromClassName(arg);\n            if (expandedRules) {\n                extractRules(expandedRules, rules, currentSelector);\n            }\n            // Else if the arg is an array, we need to recurse in.\n        }\n        else if (Array.isArray(arg)) {\n            extractRules(arg, rules, currentSelector);\n        }\n        else {\n            for (var prop in arg) {\n                if (prop === 'selectors') {\n                    var selectors = arg.selectors;\n                    var _loop_1 = function (newSelector) {\n                        if (selectors.hasOwnProperty(newSelector)) {\n                            var selectorValue_1 = selectors[newSelector];\n                            if (newSelector.indexOf('@') === 0) {\n                                newSelector = newSelector + '{' + currentSelector;\n                                extractRules([selectorValue_1], rules, newSelector);\n                            }\n                            else if (newSelector.indexOf(',') > -1) {\n                                expandCommaSeparatedGlobals(newSelector)\n                                    .split(',')\n                                    .map(function (s) { return s.trim(); })\n                                    .forEach(function (separatedSelector) {\n                                    return extractRules([selectorValue_1], rules, expandSelector(separatedSelector, currentSelector));\n                                });\n                            }\n                            else {\n                                extractRules([selectorValue_1], rules, expandSelector(newSelector, currentSelector));\n                            }\n                        }\n                    };\n                    for (var newSelector in selectors) {\n                        _loop_1(newSelector);\n                    }\n                }\n                else {\n                    if (arg[prop] !== undefined) {\n                        // Else, add the rule to the currentSelector.\n                        if (prop === 'margin' || prop === 'padding') {\n                            expandQuads(currentRules, prop, arg[prop]);\n                        }\n                        else {\n                            currentRules[prop] = arg[prop];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return rules;\n}\nfunction expandQuads(currentRules, name, value) {\n    var parts = typeof value === 'string' ? value.split(' ') : [value];\n    currentRules[name + 'Top'] = parts[0];\n    currentRules[name + 'Right'] = parts[1] || parts[0];\n    currentRules[name + 'Bottom'] = parts[2] || parts[0];\n    currentRules[name + 'Left'] = parts[3] || parts[1] || parts[0];\n}\nfunction getKeyForRules(options, rules) {\n    var serialized = [options.rtl ? 'rtl' : 'ltr'];\n    var hasProps = false;\n    for (var _i = 0, _a = rules.__order; _i < _a.length; _i++) {\n        var selector = _a[_i];\n        serialized.push(selector);\n        var rulesForSelector = rules[selector];\n        for (var propName in rulesForSelector) {\n            if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== undefined) {\n                hasProps = true;\n                serialized.push(propName, rulesForSelector[propName]);\n            }\n        }\n    }\n    return hasProps ? serialized.join('') : undefined;\n}\nfunction repeatString(target, count) {\n    if (count <= 0) {\n        return '';\n    }\n    if (count === 1) {\n        return target;\n    }\n    return target + repeatString(target, count - 1);\n}\nfunction serializeRuleEntries(options, ruleEntries) {\n    if (!ruleEntries) {\n        return '';\n    }\n    var allEntries = [];\n    for (var entry in ruleEntries) {\n        if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== undefined) {\n            allEntries.push(entry, ruleEntries[entry]);\n        }\n    }\n    // Apply transforms.\n    for (var i = 0; i < allEntries.length; i += 2) {\n        kebabRules(allEntries, i);\n        provideUnits(allEntries, i);\n        rtlifyRules(options, allEntries, i);\n        prefixRules(allEntries, i);\n    }\n    // Apply punctuation.\n    for (var i = 1; i < allEntries.length; i += 4) {\n        allEntries.splice(i, 1, ':', allEntries[i], ';');\n    }\n    return allEntries.join('');\n}\nfunction styleToRegistration(options) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    var rules = extractRules(args);\n    var key = getKeyForRules(options, rules);\n    if (key) {\n        var stylesheet = Stylesheet_Stylesheet.getInstance();\n        var registration = {\n            className: stylesheet.classNameFromKey(key),\n            key: key,\n            args: args,\n        };\n        if (!registration.className) {\n            registration.className = stylesheet.getClassName(getDisplayName(rules));\n            var rulesToInsert = [];\n            for (var _a = 0, _b = rules.__order; _a < _b.length; _a++) {\n                var selector = _b[_a];\n                rulesToInsert.push(selector, serializeRuleEntries(options, rules[selector]));\n            }\n            registration.rulesToInsert = rulesToInsert;\n        }\n        return registration;\n    }\n    return undefined;\n}\n/**\n * Insert style to stylesheet.\n * @param registration Style registration.\n * @param specificityMultiplier Number of times classname selector is repeated in the css rule.\n * This is to increase css specificity in case it's needed. Default to 1.\n */\nfunction applyRegistration(registration, specificityMultiplier) {\n    if (specificityMultiplier === void 0) { specificityMultiplier = 1; }\n    var stylesheet = Stylesheet_Stylesheet.getInstance();\n    var className = registration.className, key = registration.key, args = registration.args, rulesToInsert = registration.rulesToInsert;\n    if (rulesToInsert) {\n        // rulesToInsert is an ordered array of selector/rule pairs.\n        for (var i = 0; i < rulesToInsert.length; i += 2) {\n            var rules = rulesToInsert[i + 1];\n            if (rules) {\n                var selector = rulesToInsert[i];\n                selector = selector.replace(/&/g, repeatString(\".\" + registration.className, specificityMultiplier));\n                // Insert. Note if a media query, we must close the query with a final bracket.\n                var processedRule = selector + \"{\" + rules + \"}\" + (selector.indexOf('@') === 0 ? '}' : '');\n                stylesheet.insertRule(processedRule);\n            }\n        }\n        stylesheet.cacheClassName(className, key, args, rulesToInsert);\n    }\n}\nfunction styleToClassName(options) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    var registration = styleToRegistration.apply(void 0, __spreadArrays([options], args));\n    if (registration) {\n        applyRegistration(registration, options.specificityMultiplier);\n        return registration.className;\n    }\n    return '';\n}\n//# sourceMappingURL=styleToClassName.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/mergeStyles.js\n\n\n\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\nfunction mergeStyles() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return mergeCss(args, getStyleOptions());\n}\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n * Accepts a set of options that will be used when calculating styles.\n *\n * @public\n */\nfunction mergeCss(args, options) {\n    var styleArgs = args instanceof Array ? args : [args];\n    var _a = extractStyleParts(styleArgs), classes = _a.classes, objects = _a.objects;\n    if (objects.length) {\n        classes.push(styleToClassName(options || {}, objects));\n    }\n    return classes.join(' ');\n}\n//# sourceMappingURL=mergeStyles.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/memoize.js\n\nvar _initializedStylesheetResets = false;\nvar _resetCounter = 0;\nvar _emptyObject = { empty: true };\nvar _dictionary = {};\nvar _weakMap = typeof WeakMap === 'undefined' ? null : WeakMap;\n/**\n *  Test utility for providing a custom weakmap.\n *\n * @internal\n * */\nfunction setMemoizeWeakMap(weakMap) {\n    _weakMap = weakMap;\n}\n/**\n * Reset memoizations.\n */\nfunction resetMemoizations() {\n    _resetCounter++;\n}\n/**\n * Memoize decorator to be used on class methods. WARNING: the `this` reference\n * will be inaccessible within a memoized method, given that a cached method's `this`\n * would not be instance-specific.\n *\n * @public\n */\nfunction memoize(target, key, descriptor) {\n    // We bind to \"null\" to prevent people from inadvertently pulling values from \"this\",\n    // rather than passing them in as input values which can be memoized.\n    var fn = memoizeFunction(descriptor.value && descriptor.value.bind(null));\n    return {\n        configurable: true,\n        get: function () {\n            return fn;\n        },\n    };\n}\n/**\n * Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result.\n * Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise\n * it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in\n * undefined for a value and relying on a default function will execute it the first time, but will not\n * re-evaluate subsequent times which may have been unexpected.\n *\n * By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is\n * unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard\n * by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter.\n *\n * @public\n * @param cb - The function to memoize.\n * @param maxCacheSize - Max results to cache. If the cache exceeds this value, it will reset on the next call.\n * @param ignoreNullOrUndefinedResult - Flag to decide whether to cache callback result if it is undefined/null.\n * If the flag is set to true, the callback result is recomputed every time till the callback result is\n * not undefined/null for the first time, and then the non-undefined/null version gets cached.\n * @returns A memoized version of the function.\n */\nfunction memoizeFunction(cb, maxCacheSize, ignoreNullOrUndefinedResult) {\n    if (maxCacheSize === void 0) { maxCacheSize = 100; }\n    if (ignoreNullOrUndefinedResult === void 0) { ignoreNullOrUndefinedResult = false; }\n    // Avoid breaking scenarios which don't have weak map.\n    if (!_weakMap) {\n        return cb;\n    }\n    if (!_initializedStylesheetResets) {\n        var stylesheet = Stylesheet_Stylesheet.getInstance();\n        if (stylesheet && stylesheet.onReset) {\n            Stylesheet_Stylesheet.getInstance().onReset(resetMemoizations);\n        }\n        _initializedStylesheetResets = true;\n    }\n    var rootNode;\n    var cacheSize = 0;\n    var localResetCounter = _resetCounter;\n    return function memoizedFunction() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var currentNode = rootNode;\n        if (rootNode === undefined ||\n            localResetCounter !== _resetCounter ||\n            (maxCacheSize > 0 && cacheSize > maxCacheSize)) {\n            rootNode = _createNode();\n            cacheSize = 0;\n            localResetCounter = _resetCounter;\n        }\n        currentNode = rootNode;\n        // Traverse the tree until we find the match.\n        for (var i = 0; i < args.length; i++) {\n            var arg = _normalizeArg(args[i]);\n            if (!currentNode.map.has(arg)) {\n                currentNode.map.set(arg, _createNode());\n            }\n            currentNode = currentNode.map.get(arg);\n        }\n        if (!currentNode.hasOwnProperty('value')) {\n            currentNode.value = cb.apply(void 0, args);\n            cacheSize++;\n        }\n        if (ignoreNullOrUndefinedResult && (currentNode.value === null || currentNode.value === undefined)) {\n            currentNode.value = cb.apply(void 0, args);\n        }\n        return currentNode.value;\n    };\n}\n/**\n * Creates a memoizer for a single-value function, backed by a WeakMap.\n * With a WeakMap, the memoized values are only kept as long as the source objects,\n * ensuring that there is no memory leak.\n *\n * This function assumes that the input values passed to the wrapped function will be\n * `function` or `object` types. To memoize functions which accept other inputs, use\n * `memoizeFunction`, which memoizes against arbitrary inputs using a lookup cache.\n *\n * @public\n */\nfunction createMemoizer(getValue) {\n    if (!_weakMap) {\n        // Without a `WeakMap` implementation, memoization is not possible.\n        return getValue;\n    }\n    var cache = new _weakMap();\n    function memoizedGetValue(input) {\n        if (!input || (typeof input !== 'function' && typeof input !== 'object')) {\n            // A WeakMap can only be used to test against reference values, i.e. 'function' and 'object'.\n            // All other inputs cannot be memoized against in this manner.\n            return getValue(input);\n        }\n        if (cache.has(input)) {\n            return cache.get(input);\n        }\n        var value = getValue(input);\n        cache.set(input, value);\n        return value;\n    }\n    return memoizedGetValue;\n}\nfunction _normalizeArg(val) {\n    if (!val) {\n        return _emptyObject;\n    }\n    else if (typeof val === 'object' || typeof val === 'function') {\n        return val;\n    }\n    else if (!_dictionary[val]) {\n        _dictionary[val] = { val: val };\n    }\n    return _dictionary[val];\n}\nfunction _createNode() {\n    return {\n        map: _weakMap ? new _weakMap() : null,\n    };\n}\n//# sourceMappingURL=memoize.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/KeyCodes.js\n/**\n * Simulated enum for keycodes. These will get inlined by uglify when used much like an enum\n *\n * @public\n * {@docCategory KeyCodes}\n */\nvar KeyCodes = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    shift: 16,\n    ctrl: 17,\n    alt: 18,\n    pauseBreak: 19,\n    capslock: 20,\n    escape: 27,\n    space: 32,\n    pageUp: 33,\n    pageDown: 34,\n    end: 35,\n    home: 36,\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    insert: 45,\n    del: 46,\n    zero: 48,\n    one: 49,\n    two: 50,\n    three: 51,\n    four: 52,\n    five: 53,\n    six: 54,\n    seven: 55,\n    eight: 56,\n    nine: 57,\n    a: 65,\n    b: 66,\n    c: 67,\n    d: 68,\n    e: 69,\n    f: 70,\n    g: 71,\n    h: 72,\n    i: 73,\n    j: 74,\n    k: 75,\n    l: 76,\n    m: 77,\n    n: 78,\n    o: 79,\n    p: 80,\n    q: 81,\n    r: 82,\n    s: 83,\n    t: 84,\n    u: 85,\n    v: 86,\n    w: 87,\n    x: 88,\n    y: 89,\n    z: 90,\n    leftWindow: 91,\n    rightWindow: 92,\n    select: 93,\n    /* eslint-disable @typescript-eslint/naming-convention */\n    zero_numpad: 96,\n    one_numpad: 97,\n    two_numpad: 98,\n    three_numpad: 99,\n    four_numpad: 100,\n    five_numpad: 101,\n    six_numpad: 102,\n    seven_numpad: 103,\n    eight_numpad: 104,\n    nine_numpad: 105,\n    /* eslint-enable @typescript-eslint/naming-convention */\n    multiply: 106,\n    add: 107,\n    subtract: 109,\n    decimalPoint: 110,\n    divide: 111,\n    f1: 112,\n    f2: 113,\n    f3: 114,\n    f4: 115,\n    f5: 116,\n    f6: 117,\n    f7: 118,\n    f8: 119,\n    f9: 120,\n    f10: 121,\n    f11: 122,\n    f12: 123,\n    numlock: 144,\n    scrollLock: 145,\n    semicolon: 186,\n    equalSign: 187,\n    comma: 188,\n    dash: 189,\n    period: 190,\n    forwardSlash: 191,\n    graveAccent: 192,\n    openBracket: 219,\n    backSlash: 220,\n    closeBracket: 221,\n    singleQuote: 222,\n};\n//# sourceMappingURL=KeyCodes.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/setSSR.js\nvar _isSSR = false;\n/**\n * Helper to set ssr mode to simulate no window object returned from getWindow helper.\n *\n * @public\n */\nfunction setSSR(isEnabled) {\n    _isSSR = isEnabled;\n}\n//# sourceMappingURL=setSSR.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/getDocument.js\n\n/**\n * Helper to get the document object. Note that in popup window cases, document\n * might be the wrong document, which is why we look at ownerDocument for the\n * truth. Also note that the SSR flag is used to test ssr scenarios even if\n * document is defined (from JSDOM for example.)\n *\n * @public\n */\nfunction getDocument(rootElement) {\n    if (_isSSR || typeof document === 'undefined') {\n        return undefined;\n    }\n    else {\n        var el = rootElement;\n        return el && el.ownerDocument ? el.ownerDocument : document;\n    }\n}\n//# sourceMappingURL=getDocument.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/sessionStorage.js\n/**\n * Fetches an item from session storage without throwing an exception\n * @param key The key of the item to fetch from session storage\n */\nfunction getItem(key) {\n    var result = null;\n    try {\n        result = window.sessionStorage.getItem(key);\n    }\n    catch (e) {\n        /* Eat the exception */\n    }\n    return result;\n}\n/**\n * Inserts an item into session storage without throwing an exception\n * @param key The key of the item to add to session storage\n * @param data The data to put into session storage\n */\nfunction setItem(key, data) {\n    try {\n        window.sessionStorage.setItem(key, data);\n    }\n    catch (e) {\n        /* Eat the exception */\n    }\n}\n//# sourceMappingURL=sessionStorage.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/rtl.js\n\n\n\n\nvar RTL_LOCAL_STORAGE_KEY = 'isRTL';\n// Default to undefined so that we initialize on first read.\nvar _isRTL;\n/**\n * Gets the rtl state of the page (returns true if in rtl.)\n */\nfunction rtl_getRTL(theme) {\n    if (theme === void 0) { theme = {}; }\n    if (theme.rtl !== undefined) {\n        return theme.rtl;\n    }\n    if (_isRTL === undefined) {\n        // Fabric supports persisting the RTL setting between page refreshes via session storage\n        var savedRTL = getItem(RTL_LOCAL_STORAGE_KEY);\n        if (savedRTL !== null) {\n            _isRTL = savedRTL === '1';\n            rtl_setRTL(_isRTL);\n        }\n        var doc = getDocument();\n        if (_isRTL === undefined && doc) {\n            _isRTL = ((doc.body && doc.body.getAttribute('dir')) || doc.documentElement.getAttribute('dir')) === 'rtl';\n            setRTL(_isRTL);\n        }\n    }\n    return !!_isRTL;\n}\n/**\n * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)\n */\nfunction rtl_setRTL(isRTL, persistSetting) {\n    if (persistSetting === void 0) { persistSetting = false; }\n    var doc = getDocument();\n    if (doc) {\n        doc.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');\n    }\n    if (persistSetting) {\n        setItem(RTL_LOCAL_STORAGE_KEY, isRTL ? '1' : '0');\n    }\n    _isRTL = isRTL;\n    setRTL(_isRTL);\n}\n/**\n * Returns the given key, but flips right/left arrows if necessary.\n */\nfunction getRTLSafeKeyCode(key, theme) {\n    if (theme === void 0) { theme = {}; }\n    if (rtl_getRTL(theme)) {\n        if (key === KeyCodes.left) {\n            key = KeyCodes.right;\n        }\n        else if (key === KeyCodes.right) {\n            key = KeyCodes.left;\n        }\n    }\n    return key;\n}\n//# sourceMappingURL=rtl.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/foundation/lib/utilities.js\n\nvar utilities_assign = __assign;\n//# sourceMappingURL=utilities.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/foundation/lib/slots.js\n\n\n\n\n\n/**\n * This function is required for any module that uses slots.\n *\n * This function is a slot resolver that automatically evaluates slot functions to generate React elements.\n * A byproduct of this resolver is that it removes slots from the React hierarchy by bypassing React.createElement.\n *\n * To use this function on a per-file basis, use the jsx directive targeting withSlots.\n * This directive must be the FIRST LINE in the file to work correctly.\n * Usage of this pragma also requires withSlots import statement.\n *\n * See React.createElement\n */\n// Can't use typeof on React.createElement since it's overloaded. Approximate createElement's signature for now\n// and widen as needed.\nfunction withSlots(type, props) {\n    var children = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        children[_i - 2] = arguments[_i];\n    }\n    var slotType = type;\n    if (slotType.isSlot) {\n        // TODO: There is something weird going on here with children embedded in props vs. rest args.\n        // Comment out these lines to see. Make sure this function is doing the right things.\n        var numChildren = react[\"Children\"].count(children);\n        if (numChildren === 0) {\n            return slotType(props);\n        }\n        // Since we are bypassing createElement, use React.Children.toArray to make sure children are\n        // properly assigned keys.\n        // TODO: should this be mutating? does React mutate children subprop with createElement?\n        // TODO: will toArray clobber existing keys?\n        // TODO: React generates warnings because it doesn't detect hidden member _store that is set in createElement.\n        //        Even children passed to createElement without keys don't generate this warning.\n        //        Is there a better way to prevent slots from appearing in hierarchy? toArray doesn't address root issue.\n        children = react[\"Children\"].toArray(children);\n        return slotType(__assign(__assign({}, props), { children: children }));\n    }\n    else {\n        // TODO: Are there some cases where children should NOT be spread? Also, spreading reraises perf question.\n        //        Children had to be spread to avoid breaking KeytipData in Toggle.view:\n        //        react-dom.development.js:18931 Uncaught TypeError: children is not a function\n        //        Without spread, function child is a child array of one element\n        // TODO: is there a reason this can't be:\n        // return React.createElement.apply(this, arguments);\n        return react[\"createElement\"].apply(react, __spreadArrays([type, props], children));\n    }\n}\n/**\n * This function creates factories that render ouput depending on the user ISlotProp props passed in.\n * @param DefaultComponent - Base component to render when not overridden by user props.\n * @param options - Factory options, including defaultProp value for shorthand prop mapping.\n * @returns ISlotFactory function used for rendering slots.\n */\nfunction createFactory(DefaultComponent, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.defaultProp, defaultProp = _a === void 0 ? 'children' : _a;\n    var result = function (componentProps, userProps, userSlotOptions, defaultStyles, theme) {\n        // If they passed in raw JSX, just return that.\n        if (react[\"isValidElement\"](userProps)) {\n            return userProps;\n        }\n        var flattenedUserProps = _translateShorthand(defaultProp, userProps);\n        var finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);\n        if (userSlotOptions) {\n            if (userSlotOptions.component) {\n                // TODO: Remove cast if possible. This cast is needed because TS errors on the intrinsic portion of ReactType.\n                // return <userSlotOptions.component {...finalProps} />;\n                var UserComponent = userSlotOptions.component;\n                return react[\"createElement\"](UserComponent, __assign({}, finalProps));\n            }\n            if (userSlotOptions.render) {\n                return userSlotOptions.render(finalProps, DefaultComponent);\n            }\n        }\n        return react[\"createElement\"](DefaultComponent, __assign({}, finalProps));\n    };\n    return result;\n}\n/**\n * Default factory for components without explicit factories.\n */\nvar defaultFactory = memoizeFunction(function (type) { return createFactory(type); });\n/**\n * This function generates slots that can be used in JSX given a definition of slots and their corresponding types.\n * @param userProps - Props as pass to component.\n * @param slots - Slot definition object defining the default slot component for each slot.\n * @returns A set of created slots that components can render in JSX.\n */\nfunction getSlots(userProps, slots) {\n    var result = {};\n    // userProps already has default props mixed in by createComponent. Recast here to gain typing for this function.\n    var mixedProps = userProps;\n    var _loop_1 = function (name_1) {\n        if (slots.hasOwnProperty(name_1)) {\n            // This closure method requires the use of withSlots to prevent unnecessary rerenders. This is because React\n            // detects each closure as a different component (since it is a new instance) from the previous one and then\n            // forces a rerender of the entire slot subtree. For now, the only way to avoid this is to use withSlots, which\n            // bypasses the call to React.createElement.\n            var slot = function (componentProps) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                if (args.length > 0) {\n                    // If React.createElement is being incorrectly used with slots, there will be additional arguments.\n                    // We can detect these additional arguments and error on their presence.\n                    throw new Error('Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.');\n                }\n                // TODO: having TS infer types here seems to cause infinite loop.\n                //   use explicit types or casting to preserve typing if possible.\n                // TODO: this should be a lookup on TProps property instead of being TProps directly, which is probably\n                //   causing the infinite loop\n                return _renderSlot(slots[name_1], \n                // TODO: this cast to any is hiding a relationship issue between the first two args\n                componentProps, mixedProps[name_1], mixedProps.slots && mixedProps.slots[name_1], \n                // _defaultStyles should always be present, but a check for existence is added to make view tests\n                // easier to use.\n                mixedProps._defaultStyles && mixedProps._defaultStyles[name_1], mixedProps.theme);\n            };\n            slot.isSlot = true;\n            result[name_1] = slot;\n        }\n    };\n    for (var name_1 in slots) {\n        _loop_1(name_1);\n    }\n    return result;\n}\n/**\n * Helper function that translates shorthand as needed.\n * @param defaultProp\n * @param slotProps\n */\nfunction _translateShorthand(defaultProp, slotProps) {\n    var _a;\n    var transformedProps;\n    if (typeof slotProps === 'string' || typeof slotProps === 'number' || typeof slotProps === 'boolean') {\n        transformedProps = (_a = {},\n            _a[defaultProp] = slotProps,\n            _a);\n    }\n    else {\n        transformedProps = slotProps;\n    }\n    return transformedProps;\n}\n/**\n * Helper function that constructs final styles and props given a series of props ordered by increasing priority.\n */\nfunction _constructFinalProps(defaultStyles, theme) {\n    var allProps = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        allProps[_i - 2] = arguments[_i];\n    }\n    var finalProps = {};\n    var classNames = [];\n    for (var _a = 0, allProps_1 = allProps; _a < allProps_1.length; _a++) {\n        var props = allProps_1[_a];\n        classNames.push(props && props.className);\n        utilities_assign(finalProps, props);\n    }\n    finalProps.className = mergeCss([defaultStyles, classNames], { rtl: rtl_getRTL(theme) });\n    return finalProps;\n}\n/**\n * Render a slot given component and user props. Uses component factory if available, otherwise falls back\n * to default factory.\n * @param ComponentType Factory component type.\n * @param componentProps The properties passed into slot from within the component.\n * @param userProps The user properties passed in from outside of the component.\n */\nfunction _renderSlot(ComponentType, componentProps, userProps, slotOptions, defaultStyles, theme) {\n    if (ComponentType.create !== undefined) {\n        return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);\n    }\n    else {\n        // TODO: need to resolve typing / generic issues passing through memoizeFunction. for now, cast to 'unknown'\n        return defaultFactory(ComponentType)(componentProps, userProps, slotOptions, defaultStyles, theme);\n    }\n}\n//# sourceMappingURL=slots.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/utilities/buildClassMap.js\n\n/**\n * Builds a class names object from a given map.\n *\n * @param styles - Map of unprocessed styles.\n * @returns Map of property name to class name.\n */\nfunction buildClassMap(styles) {\n    var classes = {};\n    var _loop_1 = function (styleName) {\n        if (styles.hasOwnProperty(styleName)) {\n            var className_1;\n            Object.defineProperty(classes, styleName, {\n                get: function () {\n                    if (className_1 === undefined) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        className_1 = mergeStyles(styles[styleName]).toString();\n                    }\n                    return className_1;\n                },\n                enumerable: true,\n                configurable: true,\n            });\n        }\n    };\n    for (var styleName in styles) {\n        _loop_1(styleName);\n    }\n    return classes;\n}\n//# sourceMappingURL=buildClassMap.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/keyframes.js\n\n\n\n/**\n * Registers keyframe definitions.\n *\n * @public\n */\nfunction keyframes(timeline) {\n    var stylesheet = Stylesheet_Stylesheet.getInstance();\n    var name = stylesheet.getClassName();\n    var rulesArray = [];\n    for (var prop in timeline) {\n        if (timeline.hasOwnProperty(prop)) {\n            rulesArray.push(prop, '{', serializeRuleEntries(getStyleOptions(), timeline[prop]), '}');\n        }\n    }\n    var rules = rulesArray.join('');\n    stylesheet.insertRule(\"@keyframes \" + name + \"{\" + rules + \"}\", true);\n    stylesheet.cacheClassName(name, rules, [], ['keyframes', rules]);\n    return name;\n}\n//# sourceMappingURL=keyframes.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/AnimationStyles.js\n\n/* Register the keyframes */\nvar EASING_FUNCTION_1 = 'cubic-bezier(.1,.9,.2,1)';\nvar EASING_FUNCTION_2 = 'cubic-bezier(.1,.25,.75,.9)';\nvar DURATION_1 = '0.167s';\nvar DURATION_2 = '0.267s';\nvar DURATION_3 = '0.367s';\nvar DURATION_4 = '0.467s';\nvar FADE_IN = keyframes({\n    from: { opacity: 0 },\n    to: { opacity: 1 },\n});\nvar FADE_OUT = keyframes({\n    from: { opacity: 1 },\n    to: { opacity: 0, visibility: 'hidden' },\n});\nvar SLIDE_RIGHT_IN10 = _createSlideInX(-10);\nvar SLIDE_RIGHT_IN20 = _createSlideInX(-20);\nvar SLIDE_RIGHT_IN40 = _createSlideInX(-40);\nvar SLIDE_RIGHT_IN400 = _createSlideInX(-400);\nvar SLIDE_LEFT_IN10 = _createSlideInX(10);\nvar SLIDE_LEFT_IN20 = _createSlideInX(20);\nvar SLIDE_LEFT_IN40 = _createSlideInX(40);\nvar SLIDE_LEFT_IN400 = _createSlideInX(400);\nvar SLIDE_UP_IN10 = _createSlideInY(10);\nvar SLIDE_UP_IN20 = _createSlideInY(20);\nvar SLIDE_DOWN_IN10 = _createSlideInY(-10);\nvar SLIDE_DOWN_IN20 = _createSlideInY(-20);\nvar SLIDE_RIGHT_OUT10 = _createSlideOutX(10);\nvar SLIDE_RIGHT_OUT20 = _createSlideOutX(20);\nvar SLIDE_RIGHT_OUT40 = _createSlideOutX(40);\nvar SLIDE_RIGHT_OUT400 = _createSlideOutX(400);\nvar SLIDE_LEFT_OUT10 = _createSlideOutX(-10);\nvar SLIDE_LEFT_OUT20 = _createSlideOutX(-20);\nvar SLIDE_LEFT_OUT40 = _createSlideOutX(-40);\nvar SLIDE_LEFT_OUT400 = _createSlideOutX(-400);\nvar SLIDE_UP_OUT10 = _createSlideOutY(-10);\nvar SLIDE_UP_OUT20 = _createSlideOutY(-20);\nvar SLIDE_DOWN_OUT10 = _createSlideOutY(10);\nvar SLIDE_DOWN_OUT20 = _createSlideOutY(20);\nvar SCALE_UP100 = keyframes({\n    from: { transform: 'scale3d(.98,.98,1)' },\n    to: { transform: 'scale3d(1,1,1)' },\n});\nvar SCALE_DOWN98 = keyframes({\n    from: { transform: 'scale3d(1,1,1)' },\n    to: { transform: 'scale3d(.98,.98,1)' },\n});\nvar SCALE_DOWN100 = keyframes({\n    from: { transform: 'scale3d(1.03,1.03,1)' },\n    to: { transform: 'scale3d(1,1,1)' },\n});\nvar SCALE_UP103 = keyframes({\n    from: { transform: 'scale3d(1,1,1)' },\n    to: { transform: 'scale3d(1.03,1.03,1)' },\n});\nvar ROTATE90 = keyframes({\n    from: { transform: 'rotateZ(0deg)' },\n    to: { transform: 'rotateZ(90deg)' },\n});\nvar ROTATE_N90 = keyframes({\n    from: { transform: 'rotateZ(0deg)' },\n    to: { transform: 'rotateZ(-90deg)' },\n});\n/**\n * Exporting raw duraction values and easing functions to be used in custom animations\n */\nvar AnimationVariables = {\n    easeFunction1: EASING_FUNCTION_1,\n    easeFunction2: EASING_FUNCTION_2,\n    durationValue1: DURATION_1,\n    durationValue2: DURATION_2,\n    durationValue3: DURATION_3,\n    durationValue4: DURATION_4,\n};\n/**\n * All Fabric standard animations, exposed as json objects referencing predefined\n * keyframes. These objects can be mixed in with other class definitions.\n */\nvar AnimationStyles = {\n    slideRightIn10: _createAnimation(FADE_IN + \",\" + SLIDE_RIGHT_IN10, DURATION_3, EASING_FUNCTION_1),\n    slideRightIn20: _createAnimation(FADE_IN + \",\" + SLIDE_RIGHT_IN20, DURATION_3, EASING_FUNCTION_1),\n    slideRightIn40: _createAnimation(FADE_IN + \",\" + SLIDE_RIGHT_IN40, DURATION_3, EASING_FUNCTION_1),\n    slideRightIn400: _createAnimation(FADE_IN + \",\" + SLIDE_RIGHT_IN400, DURATION_3, EASING_FUNCTION_1),\n    slideLeftIn10: _createAnimation(FADE_IN + \",\" + SLIDE_LEFT_IN10, DURATION_3, EASING_FUNCTION_1),\n    slideLeftIn20: _createAnimation(FADE_IN + \",\" + SLIDE_LEFT_IN20, DURATION_3, EASING_FUNCTION_1),\n    slideLeftIn40: _createAnimation(FADE_IN + \",\" + SLIDE_LEFT_IN40, DURATION_3, EASING_FUNCTION_1),\n    slideLeftIn400: _createAnimation(FADE_IN + \",\" + SLIDE_LEFT_IN400, DURATION_3, EASING_FUNCTION_1),\n    slideUpIn10: _createAnimation(FADE_IN + \",\" + SLIDE_UP_IN10, DURATION_3, EASING_FUNCTION_1),\n    slideUpIn20: _createAnimation(FADE_IN + \",\" + SLIDE_UP_IN20, DURATION_3, EASING_FUNCTION_1),\n    slideDownIn10: _createAnimation(FADE_IN + \",\" + SLIDE_DOWN_IN10, DURATION_3, EASING_FUNCTION_1),\n    slideDownIn20: _createAnimation(FADE_IN + \",\" + SLIDE_DOWN_IN20, DURATION_3, EASING_FUNCTION_1),\n    slideRightOut10: _createAnimation(FADE_OUT + \",\" + SLIDE_RIGHT_OUT10, DURATION_3, EASING_FUNCTION_1),\n    slideRightOut20: _createAnimation(FADE_OUT + \",\" + SLIDE_RIGHT_OUT20, DURATION_3, EASING_FUNCTION_1),\n    slideRightOut40: _createAnimation(FADE_OUT + \",\" + SLIDE_RIGHT_OUT40, DURATION_3, EASING_FUNCTION_1),\n    slideRightOut400: _createAnimation(FADE_OUT + \",\" + SLIDE_RIGHT_OUT400, DURATION_3, EASING_FUNCTION_1),\n    slideLeftOut10: _createAnimation(FADE_OUT + \",\" + SLIDE_LEFT_OUT10, DURATION_3, EASING_FUNCTION_1),\n    slideLeftOut20: _createAnimation(FADE_OUT + \",\" + SLIDE_LEFT_OUT20, DURATION_3, EASING_FUNCTION_1),\n    slideLeftOut40: _createAnimation(FADE_OUT + \",\" + SLIDE_LEFT_OUT40, DURATION_3, EASING_FUNCTION_1),\n    slideLeftOut400: _createAnimation(FADE_OUT + \",\" + SLIDE_LEFT_OUT400, DURATION_3, EASING_FUNCTION_1),\n    slideUpOut10: _createAnimation(FADE_OUT + \",\" + SLIDE_UP_OUT10, DURATION_3, EASING_FUNCTION_1),\n    slideUpOut20: _createAnimation(FADE_OUT + \",\" + SLIDE_UP_OUT20, DURATION_3, EASING_FUNCTION_1),\n    slideDownOut10: _createAnimation(FADE_OUT + \",\" + SLIDE_DOWN_OUT10, DURATION_3, EASING_FUNCTION_1),\n    slideDownOut20: _createAnimation(FADE_OUT + \",\" + SLIDE_DOWN_OUT20, DURATION_3, EASING_FUNCTION_1),\n    scaleUpIn100: _createAnimation(FADE_IN + \",\" + SCALE_UP100, DURATION_3, EASING_FUNCTION_1),\n    scaleDownIn100: _createAnimation(FADE_IN + \",\" + SCALE_DOWN100, DURATION_3, EASING_FUNCTION_1),\n    scaleUpOut103: _createAnimation(FADE_OUT + \",\" + SCALE_UP103, DURATION_1, EASING_FUNCTION_2),\n    scaleDownOut98: _createAnimation(FADE_OUT + \",\" + SCALE_DOWN98, DURATION_1, EASING_FUNCTION_2),\n    fadeIn100: _createAnimation(FADE_IN, DURATION_1, EASING_FUNCTION_2),\n    fadeIn200: _createAnimation(FADE_IN, DURATION_2, EASING_FUNCTION_2),\n    fadeIn400: _createAnimation(FADE_IN, DURATION_3, EASING_FUNCTION_2),\n    fadeIn500: _createAnimation(FADE_IN, DURATION_4, EASING_FUNCTION_2),\n    fadeOut100: _createAnimation(FADE_OUT, DURATION_1, EASING_FUNCTION_2),\n    fadeOut200: _createAnimation(FADE_OUT, DURATION_2, EASING_FUNCTION_2),\n    fadeOut400: _createAnimation(FADE_OUT, DURATION_3, EASING_FUNCTION_2),\n    fadeOut500: _createAnimation(FADE_OUT, DURATION_4, EASING_FUNCTION_2),\n    rotate90deg: _createAnimation(ROTATE90, '0.1s', EASING_FUNCTION_2),\n    rotateN90deg: _createAnimation(ROTATE_N90, '0.1s', EASING_FUNCTION_2),\n};\nfunction _createAnimation(animationName, animationDuration, animationTimingFunction) {\n    return {\n        animationName: animationName,\n        animationDuration: animationDuration,\n        animationTimingFunction: animationTimingFunction,\n        animationFillMode: 'both',\n    };\n}\nfunction _createSlideInX(fromX) {\n    return keyframes({\n        from: { transform: \"translate3d(\" + fromX + \"px,0,0)\" },\n        to: { transform: \"translate3d(0,0,0)\" },\n    });\n}\nfunction _createSlideInY(fromY) {\n    return keyframes({\n        from: { transform: \"translate3d(0,\" + fromY + \"px,0)\" },\n        to: { transform: \"translate3d(0,0,0)\" },\n    });\n}\nfunction _createSlideOutX(toX) {\n    return keyframes({\n        from: { transform: \"translate3d(0,0,0)\" },\n        to: { transform: \"translate3d(\" + toX + \"px,0,0)\" },\n    });\n}\nfunction _createSlideOutY(toY) {\n    return keyframes({\n        from: { transform: \"translate3d(0,0,0)\" },\n        to: { transform: \"translate3d(0,\" + toY + \"px,0)\" },\n    });\n}\n//# sourceMappingURL=AnimationStyles.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/classNames/AnimationClassNames.js\n\n\n/**\n * {@docCategory AnimationClassNames}\n */\nvar AnimationClassNames = buildClassMap(AnimationStyles);\n//# sourceMappingURL=AnimationClassNames.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/classNames/index.js\n\n\n\n//# sourceMappingURL=index.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/fonts.js\n// Fallback fonts, if specified system or web fonts are unavailable.\nvar FontFamilyFallbacks = \"'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif\";\n// Font face names to be registered.\nvar LocalizedFontNames;\n(function (LocalizedFontNames) {\n    LocalizedFontNames.Arabic = 'Segoe UI Web (Arabic)';\n    LocalizedFontNames.Cyrillic = 'Segoe UI Web (Cyrillic)';\n    LocalizedFontNames.EastEuropean = 'Segoe UI Web (East European)';\n    LocalizedFontNames.Greek = 'Segoe UI Web (Greek)';\n    LocalizedFontNames.Hebrew = 'Segoe UI Web (Hebrew)';\n    LocalizedFontNames.Thai = 'Leelawadee UI Web';\n    LocalizedFontNames.Vietnamese = 'Segoe UI Web (Vietnamese)';\n    LocalizedFontNames.WestEuropean = 'Segoe UI Web (West European)';\n    LocalizedFontNames.Selawik = 'Selawik Web';\n    LocalizedFontNames.Armenian = 'Segoe UI Web (Armenian)';\n    LocalizedFontNames.Georgian = 'Segoe UI Web (Georgian)';\n})(LocalizedFontNames || (LocalizedFontNames = {}));\n// Font families with fallbacks, for the general regions.\nvar LocalizedFontFamilies;\n(function (LocalizedFontFamilies) {\n    LocalizedFontFamilies.Arabic = \"'\" + LocalizedFontNames.Arabic + \"'\";\n    LocalizedFontFamilies.ChineseSimplified = \"'Microsoft Yahei UI', Verdana, Simsun\";\n    LocalizedFontFamilies.ChineseTraditional = \"'Microsoft Jhenghei UI', Pmingliu\";\n    LocalizedFontFamilies.Cyrillic = \"'\" + LocalizedFontNames.Cyrillic + \"'\";\n    LocalizedFontFamilies.EastEuropean = \"'\" + LocalizedFontNames.EastEuropean + \"'\";\n    LocalizedFontFamilies.Greek = \"'\" + LocalizedFontNames.Greek + \"'\";\n    LocalizedFontFamilies.Hebrew = \"'\" + LocalizedFontNames.Hebrew + \"'\";\n    LocalizedFontFamilies.Hindi = \"'Nirmala UI'\";\n    LocalizedFontFamilies.Japanese = \"'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka\";\n    LocalizedFontFamilies.Korean = \"'Malgun Gothic', Gulim\";\n    LocalizedFontFamilies.Selawik = \"'\" + LocalizedFontNames.Selawik + \"'\";\n    LocalizedFontFamilies.Thai = \"'Leelawadee UI Web', 'Kmer UI'\";\n    LocalizedFontFamilies.Vietnamese = \"'\" + LocalizedFontNames.Vietnamese + \"'\";\n    LocalizedFontFamilies.WestEuropean = \"'\" + LocalizedFontNames.WestEuropean + \"'\";\n    LocalizedFontFamilies.Armenian = \"'\" + LocalizedFontNames.Armenian + \"'\";\n    LocalizedFontFamilies.Georgian = \"'\" + LocalizedFontNames.Georgian + \"'\";\n})(LocalizedFontFamilies || (LocalizedFontFamilies = {}));\n// By default, we favor system fonts for the default.\n// All localized fonts use a web font and never use the system font.\nvar defaultFontFamily = \"'Segoe UI', '\" + LocalizedFontNames.WestEuropean + \"'\";\n// Mapping of language prefix to to font family.\nvar LanguageToFontMap = {\n    ar: LocalizedFontFamilies.Arabic,\n    bg: LocalizedFontFamilies.Cyrillic,\n    cs: LocalizedFontFamilies.EastEuropean,\n    el: LocalizedFontFamilies.Greek,\n    et: LocalizedFontFamilies.EastEuropean,\n    he: LocalizedFontFamilies.Hebrew,\n    hi: LocalizedFontFamilies.Hindi,\n    hr: LocalizedFontFamilies.EastEuropean,\n    hu: LocalizedFontFamilies.EastEuropean,\n    ja: LocalizedFontFamilies.Japanese,\n    kk: LocalizedFontFamilies.EastEuropean,\n    ko: LocalizedFontFamilies.Korean,\n    lt: LocalizedFontFamilies.EastEuropean,\n    lv: LocalizedFontFamilies.EastEuropean,\n    pl: LocalizedFontFamilies.EastEuropean,\n    ru: LocalizedFontFamilies.Cyrillic,\n    sk: LocalizedFontFamilies.EastEuropean,\n    'sr-latn': LocalizedFontFamilies.EastEuropean,\n    th: LocalizedFontFamilies.Thai,\n    tr: LocalizedFontFamilies.EastEuropean,\n    uk: LocalizedFontFamilies.Cyrillic,\n    vi: LocalizedFontFamilies.Vietnamese,\n    'zh-hans': LocalizedFontFamilies.ChineseSimplified,\n    'zh-hant': LocalizedFontFamilies.ChineseTraditional,\n    hy: LocalizedFontFamilies.Armenian,\n    ka: LocalizedFontFamilies.Georgian,\n};\n// Standard font sizes.\nvar FontSizes;\n(function (FontSizes) {\n    FontSizes.mini = '10px';\n    FontSizes.xSmall = '10px';\n    FontSizes.small = '12px';\n    FontSizes.smallPlus = '12px';\n    FontSizes.medium = '14px';\n    FontSizes.mediumPlus = '16px';\n    FontSizes.icon = '16px';\n    FontSizes.large = '18px';\n    FontSizes.xLarge = '20px';\n    FontSizes.xLargePlus = '24px';\n    FontSizes.xxLarge = '28px';\n    FontSizes.xxLargePlus = '32px';\n    FontSizes.superLarge = '42px';\n    FontSizes.mega = '68px';\n})(FontSizes || (FontSizes = {}));\n// Standard font weights.\nvar FontWeights;\n(function (FontWeights) {\n    FontWeights.light = 100;\n    FontWeights.semilight = 300;\n    FontWeights.regular = 400;\n    FontWeights.semibold = 600;\n    FontWeights.bold = 700;\n})(FontWeights || (FontWeights = {}));\n// Standard Icon Sizes.\nvar IconFontSizes;\n(function (IconFontSizes) {\n    IconFontSizes.xSmall = '10px';\n    IconFontSizes.small = '12px';\n    IconFontSizes.medium = '16px';\n    IconFontSizes.large = '20px';\n})(IconFontSizes || (IconFontSizes = {}));\nfunction _fontFamilyWithFallbacks(fontFamily) {\n    return fontFamily + \", \" + FontFamilyFallbacks;\n}\nfunction createFontStyles(localeCode) {\n    var localizedFont = _getLocalizedFontFamily(localeCode);\n    var fontFamilyWithFallback = _fontFamilyWithFallbacks(localizedFont);\n    var fontStyles = {\n        tiny: _createFont(FontSizes.mini, FontWeights.regular, fontFamilyWithFallback),\n        xSmall: _createFont(FontSizes.xSmall, FontWeights.regular, fontFamilyWithFallback),\n        small: _createFont(FontSizes.small, FontWeights.regular, fontFamilyWithFallback),\n        smallPlus: _createFont(FontSizes.smallPlus, FontWeights.regular, fontFamilyWithFallback),\n        medium: _createFont(FontSizes.medium, FontWeights.regular, fontFamilyWithFallback),\n        mediumPlus: _createFont(FontSizes.mediumPlus, FontWeights.regular, fontFamilyWithFallback),\n        large: _createFont(FontSizes.large, FontWeights.regular, fontFamilyWithFallback),\n        xLarge: _createFont(FontSizes.xLarge, FontWeights.semibold, fontFamilyWithFallback),\n        xLargePlus: _createFont(FontSizes.xLargePlus, FontWeights.semibold, fontFamilyWithFallback),\n        xxLarge: _createFont(FontSizes.xxLarge, FontWeights.semibold, fontFamilyWithFallback),\n        xxLargePlus: _createFont(FontSizes.xxLargePlus, FontWeights.semibold, fontFamilyWithFallback),\n        superLarge: _createFont(FontSizes.superLarge, FontWeights.semibold, fontFamilyWithFallback),\n        mega: _createFont(FontSizes.mega, FontWeights.semibold, fontFamilyWithFallback),\n    };\n    return fontStyles;\n}\n/**\n * If there is a localized font for this language, return that.\n * Returns undefined if there is no localized font for that language.\n */\nfunction _getLocalizedFontFamily(language) {\n    for (var lang in LanguageToFontMap) {\n        if (LanguageToFontMap.hasOwnProperty(lang) && language && lang.indexOf(language) === 0) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return LanguageToFontMap[lang];\n        }\n    }\n    return defaultFontFamily;\n}\nfunction _createFont(size, weight, fontFamily) {\n    return {\n        fontFamily: fontFamily,\n        MozOsxFontSmoothing: 'grayscale',\n        WebkitFontSmoothing: 'antialiased',\n        fontSize: size,\n        fontWeight: weight,\n    };\n}\n//# sourceMappingURL=fonts.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/CommonStyles.js\nvar HighContrastSelector = '@media screen and (-ms-high-contrast: active)';\nvar HighContrastSelectorWhite = '@media screen and (-ms-high-contrast: black-on-white)';\nvar HighContrastSelectorBlack = '@media screen and (-ms-high-contrast: white-on-black)';\nvar EdgeChromiumHighContrastSelector = '@media screen and (forced-colors: active)';\nvar ScreenWidthMinSmall = 320;\nvar ScreenWidthMinMedium = 480;\nvar ScreenWidthMinLarge = 640;\nvar ScreenWidthMinXLarge = 1024;\nvar ScreenWidthMinXXLarge = 1366;\nvar ScreenWidthMinXXXLarge = 1920;\nvar ScreenWidthMaxSmall = ScreenWidthMinMedium - 1;\nvar ScreenWidthMaxMedium = ScreenWidthMinLarge - 1;\nvar ScreenWidthMaxLarge = ScreenWidthMinXLarge - 1;\nvar ScreenWidthMaxXLarge = ScreenWidthMinXXLarge - 1;\nvar ScreenWidthMaxXXLarge = ScreenWidthMinXXXLarge - 1;\nvar ScreenWidthMinUhfMobile = 768;\nfunction getScreenSelector(min, max) {\n    return \"@media only screen and (min-width: \" + min + \"px) and (max-width: \" + max + \"px)\";\n}\n/**\n * The style which turns off high contrast adjustment in (only) Edge Chromium browser.\n */\nfunction getEdgeChromiumNoHighContrastAdjustSelector() {\n    var _a;\n    return _a = {},\n        _a[EdgeChromiumHighContrastSelector] = {\n            forcedColorAdjust: 'none',\n        },\n        _a;\n}\n//# sourceMappingURL=CommonStyles.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/getWindow.js\n\nvar _window = undefined;\n// Note: Accessing \"window\" in IE11 is somewhat expensive, and calling \"typeof window\"\n// hits a memory leak, whereas aliasing it and calling \"typeof _window\" does not.\n// Caching the window value at the file scope lets us minimize the impact.\ntry {\n    _window = window;\n}\ncatch (e) {\n    /* no-op */\n}\n/**\n * Helper to get the window object. The helper will make sure to use a cached variable\n * of \"window\", to avoid overhead and memory leaks in IE11. Note that in popup scenarios the\n * window object won't match the \"global\" window object, and for these scenarios, you should\n * pass in an element hosted within the popup.\n *\n * @public\n */\nfunction getWindow(rootElement) {\n    if (_isSSR || typeof _window === 'undefined') {\n        return undefined;\n    }\n    else {\n        var el = rootElement;\n        return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;\n    }\n}\n//# sourceMappingURL=getWindow.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/setFocusVisibility.js\n\nvar IsFocusVisibleClassName = 'ms-Fabric--isFocusVisible';\nvar IsFocusHiddenClassName = 'ms-Fabric--isFocusHidden';\n/**\n * Sets the visibility of focus styling.\n *\n * By default, focus styles (the box surrounding a focused Button, for example) only show up when navigational\n * keypresses occur (through Tab, arrows, PgUp/PgDn, Home and End), and are hidden when mouse interactions occur.\n * This API provides an imperative way to turn them on/off.\n *\n * A use case might be when you have a keypress like ctrl-f6 navigate to a particular region on the page,\n * and want focus to show up.\n *\n * @param enabled - whether to remove or add focus\n * @param target - optional target\n */\nfunction setFocusVisibility(enabled, target) {\n    var win = target ? getWindow(target) : getWindow();\n    if (win) {\n        var classList = win.document.body.classList;\n        classList.add(enabled ? IsFocusVisibleClassName : IsFocusHiddenClassName);\n        classList.remove(enabled ? IsFocusHiddenClassName : IsFocusVisibleClassName);\n    }\n}\n//# sourceMappingURL=setFocusVisibility.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/zIndexes.js\nvar ZIndexes;\n(function (ZIndexes) {\n    ZIndexes.Nav = 1;\n    /**\n     * @deprecated ScrollablePane\n     */\n    ZIndexes.ScrollablePane = 1;\n    ZIndexes.FocusStyle = 1;\n    ZIndexes.Coachmark = 1000;\n    ZIndexes.Layer = 1000000;\n    ZIndexes.KeytipLayer = 1000001;\n})(ZIndexes || (ZIndexes = {}));\n//# sourceMappingURL=zIndexes.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/getFocusStyle.js\n\n\n\nfunction getFocusStyle(theme, insetOrOptions, position, highContrastStyle, borderColor, outlineColor, isFocusedOnly) {\n    if (typeof insetOrOptions === 'number' || !insetOrOptions) {\n        return _getFocusStyleInternal(theme, {\n            inset: insetOrOptions,\n            position: position,\n            highContrastStyle: highContrastStyle,\n            borderColor: borderColor,\n            outlineColor: outlineColor,\n            isFocusedOnly: isFocusedOnly,\n        });\n    }\n    else {\n        return _getFocusStyleInternal(theme, insetOrOptions);\n    }\n}\nfunction _getFocusStyleInternal(theme, options) {\n    var _a, _b;\n    if (options === void 0) { options = {}; }\n    var _c = options.inset, inset = _c === void 0 ? 0 : _c, _d = options.width, width = _d === void 0 ? 1 : _d, _e = options.position, position = _e === void 0 ? 'relative' : _e, highContrastStyle = options.highContrastStyle, _f = options.borderColor, borderColor = _f === void 0 ? theme.palette.white : _f, _g = options.outlineColor, outlineColor = _g === void 0 ? theme.palette.neutralSecondary : _g, _h = options.isFocusedOnly, isFocusedOnly = _h === void 0 ? true : _h;\n    return {\n        // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.\n        outline: 'transparent',\n        // Requirement because pseudo-element is absolutely positioned.\n        position: position,\n        selectors: (_a = {\n                // Clear the focus border in Firefox.\n                // Reference: http://stackoverflow.com/a/199319/1436671\n                '::-moz-focus-inner': {\n                    border: '0',\n                }\n            },\n            // When the element that uses this mixin is in a :focus state, add a pseudo-element to\n            // create a border.\n            _a[\".\" + IsFocusVisibleClassName + \" &\" + (isFocusedOnly ? ':focus' : '') + \":after\"] = {\n                content: '\"\"',\n                position: 'absolute',\n                left: inset + 1,\n                top: inset + 1,\n                bottom: inset + 1,\n                right: inset + 1,\n                border: width + \"px solid \" + borderColor,\n                outline: width + \"px solid \" + outlineColor,\n                zIndex: ZIndexes.FocusStyle,\n                selectors: (_b = {},\n                    _b[HighContrastSelector] = highContrastStyle,\n                    _b),\n            },\n            _a),\n    };\n}\n/**\n * Generates style to clear browser specific focus styles.\n */\nfunction focusClear() {\n    return {\n        selectors: {\n            '&::-moz-focus-inner': {\n                // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671\n                border: 0,\n            },\n            '&': {\n                // Clear browser specific focus styles and use transparent as placeholder for focus style\n                outline: 'transparent',\n            },\n        },\n    };\n}\n/**\n * Generates a style which can be used to set a border on focus.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border (default 0)\n * @param width - The border width in pixels (default 1)\n * @param color - Color of the outline (default `theme.palette.neutralSecondary`)\n * @returns The style object.\n */\nfunction getFocusOutlineStyle(theme, inset, width, color) {\n    var _a;\n    if (inset === void 0) { inset = 0; }\n    if (width === void 0) { width = 1; }\n    return {\n        selectors: (_a = {},\n            _a[\":global(\" + IsFocusVisibleClassName + \") &:focus\"] = {\n                outline: width + \" solid \" + (color || theme.palette.neutralSecondary),\n                outlineOffset: -inset + \"px\",\n            },\n            _a),\n    };\n}\n/**\n * Generates text input border styles on focus.\n *\n * @param borderColor - Color of the border.\n * @param borderRadius - Radius of the border.\n * @param borderType - Type of the border.\n * @param borderPosition - Position of the border relative to the input element (default to -1\n * as it's the most common border width of the input element)\n * @returns The style object.\n */\nvar getInputFocusStyle = function (borderColor, borderRadius, borderType, borderPosition) {\n    var _a, _b, _c;\n    if (borderType === void 0) { borderType = 'border'; }\n    if (borderPosition === void 0) { borderPosition = -1; }\n    var isBorderBottom = borderType === 'borderBottom';\n    return {\n        borderColor: borderColor,\n        selectors: {\n            ':after': (_a = {\n                    pointerEvents: 'none',\n                    content: \"''\",\n                    position: 'absolute',\n                    left: isBorderBottom ? 0 : borderPosition,\n                    top: borderPosition,\n                    bottom: borderPosition,\n                    right: isBorderBottom ? 0 : borderPosition\n                },\n                _a[borderType] = \"2px solid \" + borderColor,\n                _a.borderRadius = borderRadius,\n                _a.width = borderType === 'borderBottom' ? '100%' : undefined,\n                _a.selectors = (_b = {},\n                    _b[HighContrastSelector] = (_c = {},\n                        _c[borderType === 'border' ? 'borderColor' : 'borderBottomColor'] = 'Highlight',\n                        _c),\n                    _b),\n                _a),\n        },\n    };\n};\n//# sourceMappingURL=getFocusStyle.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/hiddenContentStyle.js\nvar hiddenContentStyle = {\n    position: 'absolute',\n    width: 1,\n    height: 1,\n    margin: -1,\n    padding: 0,\n    border: 0,\n    overflow: 'hidden',\n};\n//# sourceMappingURL=hiddenContentStyle.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/getGlobalClassNames.js\n\n\n/**\n * Internal memoized function which simply takes in the class map and the\n * disable boolean. These immutable values can be memoized.\n */\nvar _getGlobalClassNames = memoizeFunction(function (classNames, disableGlobalClassNames) {\n    var styleSheet = Stylesheet_Stylesheet.getInstance();\n    if (disableGlobalClassNames) {\n        // disable global classnames\n        return Object.keys(classNames).reduce(function (acc, className) {\n            acc[className] = styleSheet.getClassName(classNames[className]);\n            return acc;\n        }, {});\n    }\n    // use global classnames\n    return classNames;\n});\n/**\n * Checks for the `disableGlobalClassNames` property on the `theme` to determine if it should return `classNames`\n * Note that calls to this function are memoized.\n *\n * @param classNames - The collection of global class names that apply when the flag is false. Make sure to pass in\n * the same instance on each call to benefit from memoization.\n * @param theme - The theme to check the flag on\n * @param disableGlobalClassNames - Optional. Explicitly opt in/out of disabling global classnames. Defaults to false.\n */\nfunction getGlobalClassNames(classNames, theme, disableGlobalClassNames) {\n    return _getGlobalClassNames(classNames, disableGlobalClassNames !== undefined ? disableGlobalClassNames : theme.disableGlobalClassNames);\n}\n//# sourceMappingURL=getGlobalClassNames.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/GlobalSettings.js\n\n/**\n * Storing global state in local module variables has issues when more than one copy\n * if the module gets loaded on the page (due to a bundling error or simply by consuming\n * a prebundled script.)\n *\n * This file contains helpers to deal with the getting and setting local state, and allows\n * callers to get called back when it mutates.\n */\nvar GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';\nvar CALLBACK_STATE_PROP_NAME = '__callbacks__';\nvar _counter = 0;\n/**\n * Global settings helper, which stores settings in the global (window) namespace.\n * If window is not provided, it will store settings in module scope. Provides a\n * way to observe changes as well when their values change.\n *\n * @public\n * {@docCategory GlobalSettings}\n */\nvar GlobalSettings = /** @class */ (function () {\n    function GlobalSettings() {\n    }\n    GlobalSettings.getValue = function (key, defaultValue) {\n        var globalSettings = _getGlobalSettings();\n        if (globalSettings[key] === undefined) {\n            globalSettings[key] = typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n        }\n        return globalSettings[key];\n    };\n    GlobalSettings.setValue = function (key, value) {\n        var globalSettings = _getGlobalSettings();\n        var callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];\n        var oldValue = globalSettings[key];\n        if (value !== oldValue) {\n            globalSettings[key] = value;\n            var changeDescription = {\n                oldValue: oldValue,\n                value: value,\n                key: key,\n            };\n            for (var id in callbacks) {\n                if (callbacks.hasOwnProperty(id)) {\n                    callbacks[id](changeDescription);\n                }\n            }\n        }\n        return value;\n    };\n    GlobalSettings.addChangeListener = function (cb) {\n        // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.\n        // (It's faster to delete a key than it is to look up the index of an object and splice an array.)\n        var id = cb.__id__;\n        var callbacks = _getCallbacks();\n        if (!id) {\n            id = cb.__id__ = String(_counter++);\n        }\n        callbacks[id] = cb;\n    };\n    GlobalSettings.removeChangeListener = function (cb) {\n        var callbacks = _getCallbacks();\n        delete callbacks[cb.__id__];\n    };\n    return GlobalSettings;\n}());\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _getGlobalSettings() {\n    var _a;\n    var win = getWindow();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var globalObj = win || {};\n    if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {\n        globalObj[GLOBAL_SETTINGS_PROP_NAME] = (_a = {},\n            _a[CALLBACK_STATE_PROP_NAME] = {},\n            _a);\n    }\n    return globalObj[GLOBAL_SETTINGS_PROP_NAME];\n}\nfunction _getCallbacks() {\n    var globalSettings = _getGlobalSettings();\n    return globalSettings[CALLBACK_STATE_PROP_NAME];\n}\n//# sourceMappingURL=GlobalSettings.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/customizations/Customizations.js\n\n\nvar CustomizationsGlobalKey = 'customizations';\nvar NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };\nvar _allSettings = GlobalSettings.getValue(CustomizationsGlobalKey, {\n    settings: {},\n    scopedSettings: {},\n    inCustomizerContext: false,\n});\nvar _events = [];\nvar Customizations_Customizations = /** @class */ (function () {\n    function Customizations() {\n    }\n    Customizations.reset = function () {\n        _allSettings.settings = {};\n        _allSettings.scopedSettings = {};\n    };\n    /** Apply global Customization settings.\n     * @example Customizations.applySettings(\\{ theme: \\{...\\} \\});\n     */\n    Customizations.applySettings = function (settings) {\n        _allSettings.settings = __assign(__assign({}, _allSettings.settings), settings);\n        Customizations._raiseChange();\n    };\n    /** Apply Customizations to a particular named scope, like a component.\n     * @example Customizations.applyScopedSettings('Nav', \\{ styles: () =\\> \\{\\} \\});\n     */\n    Customizations.applyScopedSettings = function (scopeName, settings) {\n        _allSettings.scopedSettings[scopeName] = __assign(__assign({}, _allSettings.scopedSettings[scopeName]), settings);\n        Customizations._raiseChange();\n    };\n    Customizations.getSettings = function (properties, scopeName, localSettings) {\n        if (localSettings === void 0) { localSettings = NO_CUSTOMIZATIONS; }\n        var settings = {};\n        var localScopedSettings = (scopeName && localSettings.scopedSettings[scopeName]) || {};\n        var globalScopedSettings = (scopeName && _allSettings.scopedSettings[scopeName]) || {};\n        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n            var property = properties_1[_i];\n            settings[property] =\n                localScopedSettings[property] ||\n                    localSettings.settings[property] ||\n                    globalScopedSettings[property] ||\n                    _allSettings.settings[property];\n        }\n        return settings;\n    };\n    /** Used to run some code that sets Customizations without triggering an update until the end.\n     * Useful for applying Customizations that don't affect anything currently rendered, or for\n     * applying many customizations at once.\n     * @param suppressUpdate - Do not raise the change event at the end, preventing all updates\n     */\n    Customizations.applyBatchedUpdates = function (code, suppressUpdate) {\n        Customizations._suppressUpdates = true;\n        try {\n            code();\n        }\n        catch (_a) {\n            /* do nothing */\n        }\n        Customizations._suppressUpdates = false;\n        if (!suppressUpdate) {\n            Customizations._raiseChange();\n        }\n    };\n    Customizations.observe = function (onChange) {\n        _events.push(onChange);\n    };\n    Customizations.unobserve = function (onChange) {\n        _events = _events.filter(function (cb) { return cb !== onChange; });\n    };\n    Customizations._raiseChange = function () {\n        if (!Customizations._suppressUpdates) {\n            _events.forEach(function (cb) { return cb(); });\n        }\n    };\n    return Customizations;\n}());\n\n//# sourceMappingURL=Customizations.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/merge.js\n/**\n * Simple deep merge function. Takes all arguments and returns a deep copy of the objects merged\n * together in the order provided. If an object creates a circular reference, it will assign the\n * original reference.\n */\nfunction merge(target) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n        var arg = args_1[_a];\n        _merge(target || {}, arg);\n    }\n    return target;\n}\n/**\n * The _merge helper iterates through all props on source and assigns them to target.\n * When the value is an object, we will create a deep clone of the object. However if\n * there is a circular reference, the value will not be deep cloned and will persist\n * the reference.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _merge(target, source, circularReferences) {\n    if (circularReferences === void 0) { circularReferences = []; }\n    circularReferences.push(source);\n    for (var name_1 in source) {\n        if (source.hasOwnProperty(name_1)) {\n            if (name_1 !== '__proto__' && name_1 !== 'constructor' && name_1 !== 'prototype') {\n                var value = source[name_1];\n                if (typeof value === 'object' && value !== null) {\n                    var isCircularReference = circularReferences.indexOf(value) > -1;\n                    target[name_1] = (isCircularReference\n                        ? value\n                        : _merge(target[name_1] || {}, value, circularReferences));\n                }\n                else {\n                    target[name_1] = value;\n                }\n            }\n        }\n    }\n    circularReferences.pop();\n    return target;\n}\n//# sourceMappingURL=merge.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/fontFace.js\n\n\n\n/**\n * Registers a font face.\n * @public\n */\nfunction fontFace(font) {\n    Stylesheet_Stylesheet.getInstance().insertRule(\"@font-face{\" + serializeRuleEntries(getStyleOptions(), font) + \"}\", true);\n}\n//# sourceMappingURL=fontFace.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/localStorage.js\n\n/**\n * Fetches an item from local storage without throwing an exception\n * @param key The key of the item to fetch from local storage\n */\nfunction localStorage_getItem(key) {\n    var result = null;\n    try {\n        var win = getWindow();\n        result = win ? win.localStorage.getItem(key) : null;\n    }\n    catch (e) {\n        /* Eat the exception */\n    }\n    return result;\n}\n/**\n * Inserts an item into local storage without throwing an exception\n * @param key The key of the item to add to local storage\n * @param data The data to put into local storage\n */\nfunction localStorage_setItem(key, data) {\n    try {\n        var win = getWindow();\n        win && win.localStorage.setItem(key, data);\n    }\n    catch (e) {\n        /* Eat the exception */\n    }\n}\n//# sourceMappingURL=localStorage.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/language.js\n\n\n// Default to undefined so that we initialize on first read.\nvar _language;\n/**\n * Gets the rtl state of the page (returns true if in rtl.)\n *\n * @public\n */\nfunction getLanguage() {\n    if (_language === undefined) {\n        var doc = getDocument();\n        var savedLanguage = localStorage_getItem('language');\n        if (savedLanguage !== null) {\n            _language = savedLanguage;\n        }\n        if (_language === undefined && doc) {\n            _language = doc.documentElement.getAttribute('lang');\n        }\n        if (_language === undefined) {\n            _language = 'en';\n        }\n    }\n    return _language;\n}\n/**\n * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)\n *\n * @public\n */\nfunction setLanguage(language, avoidPersisting) {\n    if (avoidPersisting === void 0) { avoidPersisting = false; }\n    var doc = getDocument();\n    if (doc) {\n        doc.documentElement.setAttribute('lang', language);\n    }\n    if (!avoidPersisting) {\n        localStorage_setItem('language', language);\n    }\n    _language = language;\n}\n//# sourceMappingURL=language.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/DefaultFontStyles.js\n\n\n\n// Default urls.\nvar DefaultBaseUrl = 'https://static2.sharepointonline.com/files/fabric/assets';\n// Standard font styling.\nvar DefaultFontStyles = createFontStyles(getLanguage());\nfunction _registerFontFace(fontFamily, url, fontWeight, localFontName) {\n    fontFamily = \"'\" + fontFamily + \"'\";\n    var localFontSrc = localFontName !== undefined ? \"local('\" + localFontName + \"'),\" : '';\n    fontFace({\n        fontFamily: fontFamily,\n        src: localFontSrc + (\"url('\" + url + \".woff2') format('woff2'),\") + (\"url('\" + url + \".woff') format('woff')\"),\n        fontWeight: fontWeight,\n        fontStyle: 'normal',\n        fontDisplay: 'swap',\n    });\n}\nfunction _registerFontFaceSet(baseUrl, fontFamily, cdnFolder, cdnFontName, localFontName) {\n    if (cdnFontName === void 0) { cdnFontName = 'segoeui'; }\n    var urlBase = baseUrl + \"/\" + cdnFolder + \"/\" + cdnFontName;\n    _registerFontFace(fontFamily, urlBase + '-light', FontWeights.light, localFontName && localFontName + ' Light');\n    _registerFontFace(fontFamily, urlBase + '-semilight', FontWeights.semilight, localFontName && localFontName + ' SemiLight');\n    _registerFontFace(fontFamily, urlBase + '-regular', FontWeights.regular, localFontName);\n    _registerFontFace(fontFamily, urlBase + '-semibold', FontWeights.semibold, localFontName && localFontName + ' SemiBold');\n    _registerFontFace(fontFamily, urlBase + '-bold', FontWeights.bold, localFontName && localFontName + ' Bold');\n}\nfunction registerDefaultFontFaces(baseUrl) {\n    if (baseUrl) {\n        var fontUrl = baseUrl + \"/fonts\";\n        // Produce @font-face definitions for all supported web fonts.\n        _registerFontFaceSet(fontUrl, LocalizedFontNames.Thai, 'leelawadeeui-thai', 'leelawadeeui');\n        _registerFontFaceSet(fontUrl, LocalizedFontNames.Arabic, 'segoeui-arabic');\n        _registerFontFaceSet(fontUrl, LocalizedFontNames.Cyrillic, 'segoeui-cyrillic');\n        _registerFontFaceSet(fontUrl, LocalizedFontNames.EastEuropean, 'segoeui-easteuropean');\n        _registerFontFaceSet(fontUrl, LocalizedFontNames.Greek, 'segoeui-greek');\n        _registerFontFaceSet(fontUrl, LocalizedFontNames.Hebrew, 'segoeui-hebrew');\n        _registerFontFaceSet(fontUrl, LocalizedFontNames.Vietnamese, 'segoeui-vietnamese');\n        _registerFontFaceSet(fontUrl, LocalizedFontNames.WestEuropean, 'segoeui-westeuropean', 'segoeui', 'Segoe UI');\n        _registerFontFaceSet(fontUrl, LocalizedFontFamilies.Selawik, 'selawik', 'selawik');\n        _registerFontFaceSet(fontUrl, LocalizedFontNames.Armenian, 'segoeui-armenian');\n        _registerFontFaceSet(fontUrl, LocalizedFontNames.Georgian, 'segoeui-georgian');\n        // Leelawadee UI (Thai) does not have a 'light' weight, so we override\n        // the font-face generated above to use the 'semilight' weight instead.\n        _registerFontFace('Leelawadee UI Web', fontUrl + \"/leelawadeeui-thai/leelawadeeui-semilight\", FontWeights.light);\n        // Leelawadee UI (Thai) does not have a 'semibold' weight, so we override\n        // the font-face generated above to use the 'bold' weight instead.\n        _registerFontFace('Leelawadee UI Web', fontUrl + \"/leelawadeeui-thai/leelawadeeui-bold\", FontWeights.semibold);\n    }\n}\n/**\n * Reads the fontBaseUrl from window.FabricConfig.fontBaseUrl or falls back to a default.\n */\nfunction _getFontBaseUrl() {\n    var _a, _b, _c;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var fabricConfig = (_a = getWindow()) === null || _a === void 0 ? void 0 : _a.FabricConfig;\n    return _c = (_b = fabricConfig) === null || _b === void 0 ? void 0 : _b.fontBaseUrl, (_c !== null && _c !== void 0 ? _c : DefaultBaseUrl);\n}\n/**\n * Register the font faces.\n */\nregisterDefaultFontFaces(_getFontBaseUrl());\n//# sourceMappingURL=DefaultFontStyles.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/DefaultPalette.js\n// When adding or removing a color, make sure you keep this consistent with IColorClassNames\n// by adding the color variants.\nvar DefaultPalette = {\n    themeDarker: '#004578',\n    themeDark: '#005a9e',\n    themeDarkAlt: '#106ebe',\n    themePrimary: '#0078d4',\n    themeSecondary: '#2b88d8',\n    themeTertiary: '#71afe5',\n    themeLight: '#c7e0f4',\n    themeLighter: '#deecf9',\n    themeLighterAlt: '#eff6fc',\n    black: '#000000',\n    blackTranslucent40: 'rgba(0,0,0,.4)',\n    neutralDark: '#201f1e',\n    neutralPrimary: '#323130',\n    neutralPrimaryAlt: '#3b3a39',\n    neutralSecondary: '#605e5c',\n    neutralSecondaryAlt: '#8a8886',\n    neutralTertiary: '#a19f9d',\n    neutralTertiaryAlt: '#c8c6c4',\n    neutralQuaternary: '#d2d0ce',\n    neutralQuaternaryAlt: '#e1dfdd',\n    neutralLight: '#edebe9',\n    neutralLighter: '#f3f2f1',\n    neutralLighterAlt: '#faf9f8',\n    accent: '#0078d4',\n    white: '#ffffff',\n    whiteTranslucent40: 'rgba(255,255,255,.4)',\n    yellowDark: '#d29200',\n    yellow: '#ffb900',\n    yellowLight: '#fff100',\n    orange: '#d83b01',\n    orangeLight: '#ea4300',\n    orangeLighter: '#ff8c00',\n    redDark: '#a4262c',\n    red: '#e81123',\n    magentaDark: '#5c005c',\n    magenta: '#b4009e',\n    magentaLight: '#e3008c',\n    purpleDark: '#32145a',\n    purple: '#5c2d91',\n    purpleLight: '#b4a0ff',\n    blueDark: '#002050',\n    blueMid: '#00188f',\n    blue: '#0078d4',\n    blueLight: '#00bcf2',\n    tealDark: '#004b50',\n    teal: '#008272',\n    tealLight: '#00b294',\n    greenDark: '#004b1c',\n    green: '#107c10',\n    greenLight: '#bad80a',\n};\n//# sourceMappingURL=DefaultPalette.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/DefaultSpacing.js\nvar DefaultSpacing = {\n    s2: '4px',\n    s1: '8px',\n    m: '16px',\n    l1: '20px',\n    l2: '32px',\n};\n//# sourceMappingURL=DefaultSpacing.js.map\n// EXTERNAL MODULE: ./node_modules/@microsoft/load-themed-styles/lib-es6/index.js\nvar lib_es6 = __webpack_require__(28);\n\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/DefaultEffects.js\nvar DefaultEffects = {\n    elevation4: '0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)',\n    elevation8: '0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)',\n    elevation16: '0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)',\n    elevation64: '0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)',\n    roundedCorner2: '2px',\n    roundedCorner4: '4px',\n    roundedCorner6: '6px',\n};\n//# sourceMappingURL=DefaultEffects.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/theme.js\n\n\n\n\n\n\n\nvar _theme = createTheme({\n    palette: DefaultPalette,\n    semanticColors: _makeSemanticColors(DefaultPalette, DefaultEffects, undefined, false, false),\n    fonts: DefaultFontStyles,\n    isInverted: false,\n    disableGlobalClassNames: false,\n});\nvar _onThemeChangeCallbacks = [];\nvar ThemeSettingName = 'theme';\nfunction initializeThemeInCustomizations() {\n    var _a;\n    var _b, _c;\n    if (!Customizations_Customizations.getSettings([ThemeSettingName]).theme) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var win = getWindow();\n        if ((_c = (_b = win) === null || _b === void 0 ? void 0 : _b.FabricConfig) === null || _c === void 0 ? void 0 : _c.theme) {\n            _theme = createTheme(win.FabricConfig.theme);\n        }\n        // Set the default theme.\n        Customizations_Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n    }\n}\ninitializeThemeInCustomizations();\n/**\n * Gets the theme object\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nfunction getTheme(depComments) {\n    if (depComments === void 0) { depComments = false; }\n    if (depComments === true) {\n        _theme = createTheme({}, depComments);\n    }\n    return _theme;\n}\n/**\n * Registers a callback that gets called whenever the theme changes.\n * This should only be used when the component cannot automatically get theme changes through its state.\n * This will not register duplicate callbacks.\n */\nfunction registerOnThemeChangeCallback(callback) {\n    if (_onThemeChangeCallbacks.indexOf(callback) === -1) {\n        _onThemeChangeCallbacks.push(callback);\n    }\n}\n/**\n * See registerOnThemeChangeCallback().\n * Removes previously registered callbacks.\n */\nfunction removeOnThemeChangeCallback(callback) {\n    var i = _onThemeChangeCallbacks.indexOf(callback);\n    if (i === -1) {\n        return;\n    }\n    _onThemeChangeCallbacks.splice(i, 1);\n}\n/**\n * Applies the theme, while filling in missing slots.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nfunction loadTheme(theme, depComments) {\n    var _a;\n    if (depComments === void 0) { depComments = false; }\n    _theme = createTheme(theme, depComments);\n    // Invoke the legacy method of theming the page as well.\n    Object(lib_es6[\"a\" /* loadTheme */])(__assign(__assign(__assign(__assign({}, _theme.palette), _theme.semanticColors), _theme.effects), _loadFonts(_theme)));\n    Customizations_Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n    _onThemeChangeCallbacks.forEach(function (callback) {\n        try {\n            callback(_theme);\n        }\n        catch (e) {\n            // don't let a bad callback break everything else\n        }\n    });\n    return _theme;\n}\n/**\n * Loads font variables into a JSON object.\n * @param theme - The theme object\n */\nfunction _loadFonts(theme) {\n    var lines = {};\n    for (var _i = 0, _a = Object.keys(theme.fonts); _i < _a.length; _i++) {\n        var fontName = _a[_i];\n        var font = theme.fonts[fontName];\n        for (var _b = 0, _c = Object.keys(font); _b < _c.length; _b++) {\n            var propName = _c[_b];\n            var name_1 = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);\n            var value = font[propName];\n            if (propName === 'fontSize' && typeof value === 'number') {\n                // if it's a number, convert it to px by default like our theming system does\n                value = value + 'px';\n            }\n            lines[name_1] = value;\n        }\n    }\n    return lines;\n}\n/**\n * Creates a custom theme definition which can be used with the Customizer.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nfunction createTheme(theme, depComments) {\n    if (depComments === void 0) { depComments = false; }\n    var newPalette = __assign(__assign({}, DefaultPalette), theme.palette);\n    var newEffects = __assign(__assign({}, DefaultEffects), theme.effects);\n    if (!theme.palette || !theme.palette.accent) {\n        newPalette.accent = newPalette.themePrimary;\n    }\n    // mix in custom overrides with good slots first, since custom overrides might be used in fixing deprecated slots\n    var newSemanticColors = __assign(__assign({}, _makeSemanticColors(newPalette, newEffects, theme.semanticColors, !!theme.isInverted, depComments)), theme.semanticColors);\n    var defaultFontStyles = __assign({}, DefaultFontStyles);\n    if (theme.defaultFontStyle) {\n        for (var _i = 0, _a = Object.keys(defaultFontStyles); _i < _a.length; _i++) {\n            var fontStyle = _a[_i];\n            defaultFontStyles[fontStyle] = merge({}, defaultFontStyles[fontStyle], theme.defaultFontStyle);\n        }\n    }\n    if (theme.fonts) {\n        for (var _b = 0, _c = Object.keys(theme.fonts); _b < _c.length; _b++) {\n            var fontStyle = _c[_b];\n            defaultFontStyles[fontStyle] = merge({}, defaultFontStyles[fontStyle], theme.fonts[fontStyle]);\n        }\n    }\n    return {\n        palette: newPalette,\n        fonts: __assign({}, defaultFontStyles),\n        rtl: theme.rtl,\n        semanticColors: newSemanticColors,\n        isInverted: !!theme.isInverted,\n        disableGlobalClassNames: !!theme.disableGlobalClassNames,\n        spacing: __assign(__assign({}, DefaultSpacing), theme.spacing),\n        effects: newEffects,\n    };\n}\n/** Generates all the semantic slot colors based on the theme so far\n * We'll use these as fallbacks for semantic slots that the passed in theme did not define.\n * The caller must still mix in the customized semantic slots at the end.\n */\nfunction _makeSemanticColors(p, e, s, isInverted, depComments) {\n    var toReturn = __assign({ \n        // DEFAULTS\n        bodyBackground: p.white, bodyBackgroundHovered: p.neutralLighter, bodyBackgroundChecked: p.neutralLight, bodyStandoutBackground: p.neutralLighterAlt, bodyFrameBackground: p.white, bodyFrameDivider: p.neutralLight, bodyText: p.neutralPrimary, bodyTextChecked: p.black, bodySubtext: p.neutralSecondary, bodyDivider: p.neutralLight, disabledBodyText: p.neutralTertiary, disabledBodySubtext: p.neutralTertiaryAlt, disabledBorder: p.neutralTertiaryAlt, focusBorder: p.neutralSecondary, cardStandoutBackground: p.white, cardShadow: e.elevation4, cardShadowHovered: '', variantBorder: p.neutralLight, variantBorderHovered: p.neutralTertiary, defaultStateBackground: p.neutralLighterAlt, \n        // LINKS\n        actionLink: p.neutralPrimary, actionLinkHovered: p.neutralDark, link: p.themePrimary, linkHovered: p.themeDarker, \n        // BUTTONS\n        buttonBackground: p.white, buttonBackgroundChecked: p.neutralTertiaryAlt, buttonBackgroundHovered: p.neutralLighter, buttonBackgroundCheckedHovered: p.neutralLight, buttonBackgroundPressed: p.neutralLight, buttonBackgroundDisabled: p.neutralLighter, buttonBorder: p.neutralSecondaryAlt, buttonText: p.neutralPrimary, buttonTextHovered: p.neutralDark, buttonTextChecked: p.neutralDark, buttonTextCheckedHovered: p.black, buttonTextPressed: p.neutralDark, buttonTextDisabled: p.neutralTertiary, buttonBorderDisabled: p.neutralLighter, primaryButtonBackground: p.themePrimary, primaryButtonBackgroundHovered: p.themeDarkAlt, primaryButtonBackgroundPressed: p.themeDark, primaryButtonBackgroundDisabled: p.neutralLighter, primaryButtonBorder: 'transparent', primaryButtonText: p.white, primaryButtonTextHovered: p.white, primaryButtonTextPressed: p.white, primaryButtonTextDisabled: p.neutralQuaternary, accentButtonBackground: p.accent, accentButtonText: p.white, \n        // INPUTS\n        inputBorder: p.neutralSecondary, inputBorderHovered: p.neutralPrimary, inputBackground: p.white, inputBackgroundChecked: p.themePrimary, inputBackgroundCheckedHovered: p.themeDark, inputPlaceholderBackgroundChecked: p.themeLighter, inputForegroundChecked: p.white, inputIcon: p.themePrimary, inputIconHovered: p.themeDark, inputIconDisabled: p.neutralTertiary, inputFocusBorderAlt: p.themePrimary, smallInputBorder: p.neutralSecondary, inputText: p.neutralPrimary, inputTextHovered: p.neutralDark, inputPlaceholderText: p.neutralSecondary, disabledBackground: p.neutralLighter, disabledText: p.neutralTertiary, disabledSubtext: p.neutralQuaternary, \n        // LISTS\n        listBackground: p.white, listText: p.neutralPrimary, listItemBackgroundHovered: p.neutralLighter, listItemBackgroundChecked: p.neutralLight, listItemBackgroundCheckedHovered: p.neutralQuaternaryAlt, listHeaderBackgroundHovered: p.neutralLighter, listHeaderBackgroundPressed: p.neutralLight, \n        // MENUS\n        menuBackground: p.white, menuDivider: p.neutralTertiaryAlt, menuIcon: p.themePrimary, menuHeader: p.themePrimary, menuItemBackgroundHovered: p.neutralLighter, menuItemBackgroundPressed: p.neutralLight, menuItemText: p.neutralPrimary, menuItemTextHovered: p.neutralDark, errorText: !isInverted ? '#a4262c' : '#F1707B', messageText: !isInverted ? '#323130' : '#F3F2F1', messageLink: !isInverted ? '#005A9E' : '#6CB8F6', messageLinkHovered: !isInverted ? '#004578' : '#82C7FF', infoIcon: !isInverted ? '#605e5c' : '#C8C6C4', errorIcon: !isInverted ? '#A80000' : '#F1707B', blockingIcon: !isInverted ? '#FDE7E9' : '#442726', warningIcon: !isInverted ? '#797775' : '#C8C6C4', severeWarningIcon: !isInverted ? '#D83B01' : '#FCE100', successIcon: !isInverted ? '#107C10' : '#92C353', infoBackground: !isInverted ? '#f3f2f1' : '#323130', errorBackground: !isInverted ? '#FDE7E9' : '#442726', blockingBackground: !isInverted ? '#FDE7E9' : '#442726', warningBackground: !isInverted ? '#FFF4CE' : '#433519', severeWarningBackground: !isInverted ? '#FED9CC' : '#4F2A0F', successBackground: !isInverted ? '#DFF6DD' : '#393D1B', \n        // Deprecated slots, later pass by _fixDeprecatedSlots() for self-referential slots\n        warningHighlight: !isInverted ? '#ffb900' : '#fff100', warningText: '', successText: !isInverted ? '#107C10' : '#92c353', listTextColor: '', menuItemBackgroundChecked: p.neutralLight }, s);\n    // second pass for self-referential slots\n    toReturn = __assign(__assign({}, toReturn), { cardShadowHovered: !isInverted ? e.elevation8 : '0 0 1px ' + toReturn.variantBorderHovered });\n    return _fixDeprecatedSlots(toReturn, depComments);\n}\nfunction _fixDeprecatedSlots(s, depComments) {\n    // Add @deprecated tag as comment if enabled\n    var dep = '';\n    if (depComments === true) {\n        dep = ' /* @deprecated */';\n    }\n    /* eslint-disable deprecation/deprecation */\n    s.listTextColor = s.listText + dep;\n    s.menuItemBackgroundChecked += dep;\n    s.warningHighlight += dep;\n    s.warningText = s.messageText + dep;\n    s.successText += dep;\n    /* eslint-enable deprecation/deprecation */\n    return s;\n}\n//# sourceMappingURL=theme.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/GeneralStyles.js\n// This file mimics styles and mixins from _General.Mixins.scss\nvar normalize = {\n    boxShadow: 'none',\n    margin: 0,\n    padding: 0,\n    boxSizing: 'border-box',\n};\nvar noWrap = {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n};\n//# sourceMappingURL=GeneralStyles.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/getPlaceholderStyles.js\n/**\n * Generates placeholder style for each of the browsers supported by office-ui-fabric-react.\n * @param styles - The style to use.\n * @returns The placeholder style object for each browser depending on the placeholder directive it uses.\n */\nfunction getPlaceholderStyles(styles) {\n    return {\n        selectors: {\n            '::placeholder': styles,\n            ':-ms-input-placeholder': styles,\n            '::-ms-input-placeholder': styles,\n        },\n    };\n}\n//# sourceMappingURL=getPlaceholderStyles.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/styles/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/warn/warn.js\n/* eslint-disable no-console */\nvar _warningCallback = undefined;\n/**\n * Sends a warning to console, if the api is present.\n *\n * @public\n * @param message - Warning message.\n */\nfunction warn(message) {\n    if (_warningCallback && \"production\" !== 'production') {\n        _warningCallback(message);\n    }\n    else if (console && console.warn) {\n        console.warn(message);\n    }\n}\n/**\n * Configures the warning callback. Passing in undefined will reset it to use the default\n * console.warn function.\n *\n * @public\n * @param warningCallback - Callback to override the generated warnings.\n */\nfunction setWarningCallback(warningCallback) {\n    _warningCallback = warningCallback;\n}\n//# sourceMappingURL=warn.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/utilities/icons.js\n\n\n\nvar ICON_SETTING_NAME = 'icons';\nvar _iconSettings = GlobalSettings.getValue(ICON_SETTING_NAME, {\n    __options: {\n        disableWarnings: false,\n        warnOnMissingIcons: true,\n    },\n    __remapped: {},\n});\n// Reset icon registration on stylesheet resets.\nvar icons_stylesheet = Stylesheet_Stylesheet.getInstance();\nif (icons_stylesheet && icons_stylesheet.onReset) {\n    icons_stylesheet.onReset(function () {\n        for (var name_1 in _iconSettings) {\n            if (_iconSettings.hasOwnProperty(name_1) && !!_iconSettings[name_1].subset) {\n                _iconSettings[name_1].subset.className = undefined;\n            }\n        }\n    });\n}\n/**\n * Normalizes an icon name for consistent mapping.\n * Current implementation is to convert the icon name to lower case.\n *\n * @param name - Icon name to normalize.\n * @returns {string} Normalized icon name to use for indexing and mapping.\n */\nvar normalizeIconName = function (name) { return name.toLowerCase(); };\n/**\n * Registers a given subset of icons.\n *\n * @param iconSubset - the icon subset definition.\n */\nfunction registerIcons(iconSubset, options) {\n    var subset = __assign(__assign({}, iconSubset), { isRegistered: false, className: undefined });\n    var icons = iconSubset.icons;\n    // Grab options, optionally mix user provided ones on top.\n    options = options ? __assign(__assign({}, _iconSettings.__options), options) : _iconSettings.__options;\n    for (var iconName in icons) {\n        if (icons.hasOwnProperty(iconName)) {\n            var code = icons[iconName];\n            var normalizedIconName = normalizeIconName(iconName);\n            if (_iconSettings[normalizedIconName]) {\n                _warnDuplicateIcon(iconName);\n            }\n            else {\n                _iconSettings[normalizedIconName] = {\n                    code: code,\n                    subset: subset,\n                };\n            }\n        }\n    }\n}\n/**\n * Unregisters icons by name.\n *\n * @param iconNames - List of icons to unregister.\n */\nfunction unregisterIcons(iconNames) {\n    var options = _iconSettings.__options;\n    var _loop_1 = function (iconName) {\n        var normalizedIconName = normalizeIconName(iconName);\n        if (_iconSettings[normalizedIconName]) {\n            delete _iconSettings[normalizedIconName];\n        }\n        else {\n            // Warn that we are trying to delete an icon that doesn't exist\n            if (!options.disableWarnings) {\n                warn(\"The icon \\\"\" + iconName + \"\\\" tried to unregister but was not registered.\");\n            }\n        }\n        // Delete any aliases for this iconName\n        if (_iconSettings.__remapped[normalizedIconName]) {\n            delete _iconSettings.__remapped[normalizedIconName];\n        }\n        // Delete any items that were an alias for this iconName\n        Object.keys(_iconSettings.__remapped).forEach(function (key) {\n            if (_iconSettings.__remapped[key] === normalizedIconName) {\n                delete _iconSettings.__remapped[key];\n            }\n        });\n    };\n    for (var _i = 0, iconNames_1 = iconNames; _i < iconNames_1.length; _i++) {\n        var iconName = iconNames_1[_i];\n        _loop_1(iconName);\n    }\n}\n/**\n * Remaps one icon name to another.\n */\nfunction registerIconAlias(iconName, mappedToName) {\n    _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);\n}\n/**\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\n * it will get registered immediately.\n *\n * @public\n * @param name - Name of icon.\n */\nfunction getIcon(name) {\n    var icon = undefined;\n    var options = _iconSettings.__options;\n    name = name ? normalizeIconName(name) : '';\n    name = _iconSettings.__remapped[name] || name;\n    if (name) {\n        icon = _iconSettings[name];\n        if (icon) {\n            var subset = icon.subset;\n            if (subset && subset.fontFace) {\n                if (!subset.isRegistered) {\n                    fontFace(subset.fontFace);\n                    subset.isRegistered = true;\n                }\n                if (!subset.className) {\n                    subset.className = mergeStyles(subset.style, {\n                        fontFamily: subset.fontFace.fontFamily,\n                        fontWeight: subset.fontFace.fontWeight || 'normal',\n                        fontStyle: subset.fontFace.fontStyle || 'normal',\n                    });\n                }\n            }\n        }\n        else {\n            // eslint-disable-next-line deprecation/deprecation\n            if (!options.disableWarnings && options.warnOnMissingIcons) {\n                warn(\"The icon \\\"\" + name + \"\\\" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.\");\n            }\n        }\n    }\n    return icon;\n}\n/**\n * Sets the icon options.\n *\n * @public\n */\nfunction setIconOptions(options) {\n    _iconSettings.__options = __assign(__assign({}, _iconSettings.__options), options);\n}\nvar _missingIcons = [];\nvar _missingIconsTimer = undefined;\nfunction _warnDuplicateIcon(iconName) {\n    var options = _iconSettings.__options;\n    var warningDelay = 2000;\n    var maxIconsInMessage = 10;\n    if (!options.disableWarnings) {\n        _missingIcons.push(iconName);\n        if (_missingIconsTimer === undefined) {\n            _missingIconsTimer = setTimeout(function () {\n                warn(\"Some icons were re-registered. Applications should only call registerIcons for any given \" +\n                    \"icon once. Redefining what an icon is may have unintended consequences. Duplicates \" +\n                    \"include: \\n\" +\n                    _missingIcons.slice(0, maxIconsInMessage).join(', ') +\n                    (_missingIcons.length > maxIconsInMessage ? \" (+ \" + (_missingIcons.length - maxIconsInMessage) + \" more)\" : ''));\n                _missingIconsTimer = undefined;\n                _missingIcons = [];\n            }, warningDelay);\n        }\n    }\n}\n//# sourceMappingURL=icons.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/utilities/index.js\n\n\n\n//# sourceMappingURL=index.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/concatStyleSets.js\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSets - One or more stylesets to be merged (each param can also be falsy).\n */\nfunction concatStyleSets() {\n    var styleSets = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        styleSets[_i] = arguments[_i];\n    }\n    if (styleSets && styleSets.length === 1 && styleSets[0] && !styleSets[0].subComponentStyles) {\n        return styleSets[0];\n    }\n    var mergedSet = {};\n    // We process sub component styles in two phases. First we collect them, then we combine them into 1 style function.\n    var workingSubcomponentStyles = {};\n    for (var _a = 0, styleSets_1 = styleSets; _a < styleSets_1.length; _a++) {\n        var currentSet = styleSets_1[_a];\n        if (currentSet) {\n            for (var prop in currentSet) {\n                if (currentSet.hasOwnProperty(prop)) {\n                    if (prop === 'subComponentStyles' && currentSet.subComponentStyles !== undefined) {\n                        // subcomponent styles - style functions or objects\n                        var currentComponentStyles = currentSet.subComponentStyles;\n                        for (var subCompProp in currentComponentStyles) {\n                            if (currentComponentStyles.hasOwnProperty(subCompProp)) {\n                                if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\n                                    workingSubcomponentStyles[subCompProp].push(currentComponentStyles[subCompProp]);\n                                }\n                                else {\n                                    workingSubcomponentStyles[subCompProp] = [currentComponentStyles[subCompProp]];\n                                }\n                            }\n                        }\n                        continue;\n                    }\n                    // the as any casts below is a workaround for ts 2.8.\n                    // todo: remove cast to any in ts 2.9.\n                    var mergedValue = mergedSet[prop];\n                    var currentValue = currentSet[prop];\n                    if (mergedValue === undefined) {\n                        mergedSet[prop] = currentValue;\n                    }\n                    else {\n                        mergedSet[prop] = __spreadArrays((Array.isArray(mergedValue) ? mergedValue : [mergedValue]), (Array.isArray(currentValue) ? currentValue : [currentValue]));\n                    }\n                }\n            }\n        }\n    }\n    if (Object.keys(workingSubcomponentStyles).length > 0) {\n        mergedSet.subComponentStyles = {};\n        var mergedSubStyles = mergedSet.subComponentStyles;\n        var _loop_1 = function (subCompProp) {\n            if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\n                var workingSet_1 = workingSubcomponentStyles[subCompProp];\n                mergedSubStyles[subCompProp] = function (styleProps) {\n                    return concatStyleSets.apply(void 0, workingSet_1.map(function (styleFunctionOrObject) {\n                        return typeof styleFunctionOrObject === 'function' ? styleFunctionOrObject(styleProps) : styleFunctionOrObject;\n                    }));\n                };\n            }\n        };\n        // now we process the subcomponent styles if there are any\n        for (var subCompProp in workingSubcomponentStyles) {\n            _loop_1(subCompProp);\n        }\n    }\n    return mergedSet;\n}\n//# sourceMappingURL=concatStyleSets.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/concatStyleSetsWithProps.js\n\n/**\n * Concatenates style sets into one, but resolves functional sets using the given props.\n * @param styleProps - Props used to resolve functional sets.\n * @param allStyles - Style sets, which can be functions or objects.\n */\nfunction concatStyleSetsWithProps(styleProps) {\n    var allStyles = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        allStyles[_i - 1] = arguments[_i];\n    }\n    var result = [];\n    for (var _a = 0, allStyles_1 = allStyles; _a < allStyles_1.length; _a++) {\n        var styles = allStyles_1[_a];\n        if (styles) {\n            result.push(typeof styles === 'function' ? styles(styleProps) : styles);\n        }\n    }\n    if (result.length === 1) {\n        return result[0];\n    }\n    else if (result.length) {\n        // cliffkoh: I cannot figure out how to avoid the cast to any here.\n        // It is something to do with the use of Omit in IStyleSet.\n        // It might not be necessary once  Omit becomes part of lib.d.ts (when we remove our own Omit and rely on\n        // the official version).\n        return concatStyleSets.apply(void 0, result);\n    }\n    return {};\n}\n//# sourceMappingURL=concatStyleSetsWithProps.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/merge-styles/lib/mergeStyleSets.js\n\n\n\n\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n */\nfunction mergeStyleSets() {\n    var styleSets = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        styleSets[_i] = arguments[_i];\n    }\n    return mergeCssSets(styleSets, getStyleOptions());\n}\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nfunction mergeCssSets(styleSets, options) {\n    var _a, _b;\n    var classNameSet = { subComponentStyles: {} };\n    var styleSet = styleSets[0];\n    if (!styleSet && styleSets.length <= 1) {\n        return { subComponentStyles: {} };\n    }\n    var concatenatedStyleSet = concatStyleSets.apply(void 0, styleSets);\n    var registrations = [];\n    for (var styleSetArea in concatenatedStyleSet) {\n        if (concatenatedStyleSet.hasOwnProperty(styleSetArea)) {\n            if (styleSetArea === 'subComponentStyles') {\n                classNameSet.subComponentStyles = concatenatedStyleSet.subComponentStyles || {};\n                continue;\n            }\n            var styles = concatenatedStyleSet[styleSetArea];\n            var _c = extractStyleParts(styles), classes = _c.classes, objects = _c.objects;\n            if ((_a = objects) === null || _a === void 0 ? void 0 : _a.length) {\n                var registration = styleToRegistration(options || {}, { displayName: styleSetArea }, objects);\n                if (registration) {\n                    registrations.push(registration);\n                    classNameSet[styleSetArea] = classes.concat([registration.className]).join(' ');\n                }\n            }\n            else {\n                classNameSet[styleSetArea] = classes.join(' ');\n            }\n        }\n    }\n    for (var _i = 0, registrations_1 = registrations; _i < registrations_1.length; _i++) {\n        var registration = registrations_1[_i];\n        if (registration) {\n            applyRegistration(registration, (_b = options) === null || _b === void 0 ? void 0 : _b.specificityMultiplier);\n        }\n    }\n    return classNameSet;\n}\n//# sourceMappingURL=mergeStyleSets.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/MergeStyles.js\n\n//# sourceMappingURL=MergeStyles.js.map\n// EXTERNAL MODULE: ./node_modules/@uifabric/set-version/lib/index.js + 1 modules\nvar lib = __webpack_require__(12);\n\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/version.js\n// Do not modify this file; it is generated as part of publish.\n// The checked in version is a placeholder only and will not be updated.\n\nObject(lib[\"a\" /* setVersion */])('@uifabric/styling', '7.15.0');\n//# sourceMappingURL=version.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/styling/lib/index.js\n\n\n\n\n\n// Ensure theme is initialized when this package is referenced.\n\ninitializeThemeInCustomizations();\n//# sourceMappingURL=index.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/customizations/CustomizerContext.js\n\nvar CustomizerContext = react[\"createContext\"]({\n    customizations: {\n        inCustomizerContext: false,\n        settings: {},\n        scopedSettings: {},\n    },\n});\n//# sourceMappingURL=CustomizerContext.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/foundation/lib/createComponent.js\n\n\n\n\n\n\n/**\n * Assembles a higher order component based on the following: styles, theme, view, and state.\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\n * the view prop.\n *\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n *\n * State component is optional. If state is not provided, created component is essentially a functional\n * stateless component.\n *\n * @param options - component Component options. See IComponentOptions for more detail.\n */\nfunction createComponent(view, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.factoryOptions, factoryOptions = _a === void 0 ? {} : _a;\n    var defaultProp = factoryOptions.defaultProp;\n    var ResultComponent = function (componentProps) {\n        var settings = _getCustomizations(options.displayName, react[\"useContext\"](CustomizerContext), options.fields);\n        var stateReducer = options.state;\n        if (stateReducer) {\n            // Don't assume state will return all props, so spread useState result over component props.\n            componentProps = __assign(__assign({}, componentProps), stateReducer(componentProps));\n        }\n        var theme = componentProps.theme || settings.theme;\n        var tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);\n        var styles = _resolveStyles(componentProps, theme, tokens, options.styles, settings.styles, componentProps.styles);\n        var viewProps = __assign(__assign({}, componentProps), { styles: styles,\n            tokens: tokens, _defaultStyles: styles, theme: theme });\n        return view(viewProps);\n    };\n    ResultComponent.displayName = options.displayName || view.name;\n    // If a shorthand prop is defined, create a factory for the component.\n    // TODO: This shouldn't be a concern of createComponent.. factoryOptions should just be forwarded.\n    //       Need to weigh creating default factories on component creation vs. memoizing them on use in slots.tsx.\n    if (defaultProp) {\n        ResultComponent.create = createFactory(ResultComponent, { defaultProp: defaultProp });\n    }\n    utilities_assign(ResultComponent, options.statics);\n    // Later versions of TypeSript should allow us to merge objects in a type safe way and avoid this cast.\n    return ResultComponent;\n}\n/**\n * Resolve all styles functions with both props and tokens and flatten results along with all styles objects.\n */\nfunction _resolveStyles(props, theme, tokens) {\n    var allStyles = [];\n    for (var _i = 3; _i < arguments.length; _i++) {\n        allStyles[_i - 3] = arguments[_i];\n    }\n    return concatStyleSets.apply(void 0, allStyles.map(function (styles) {\n        return typeof styles === 'function' ? styles(props, theme, tokens) : styles;\n    }));\n}\n/**\n * Resolve all tokens functions with props flatten results along with all tokens objects.\n */\nfunction _resolveTokens(props, theme) {\n    var allTokens = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        allTokens[_i - 2] = arguments[_i];\n    }\n    var tokens = {};\n    for (var _a = 0, allTokens_1 = allTokens; _a < allTokens_1.length; _a++) {\n        var currentTokens = allTokens_1[_a];\n        if (currentTokens) {\n            // TODO: why is this cast needed? TS seems to think there is a (TToken | Function) union from somewhere.\n            currentTokens =\n                typeof currentTokens === 'function'\n                    ? currentTokens(props, theme)\n                    : currentTokens;\n            if (Array.isArray(currentTokens)) {\n                currentTokens = _resolveTokens.apply(void 0, __spreadArrays([props, theme], currentTokens));\n            }\n            utilities_assign(tokens, currentTokens);\n        }\n    }\n    return tokens;\n}\n/**\n * Helper function for calling Customizations.getSettings falling back to default fields.\n *\n * @param displayName Displayable name for component.\n * @param context React context passed to component containing contextual settings.\n * @param fields Optional list of properties to grab from global store and context.\n */\nfunction _getCustomizations(displayName, context, fields) {\n    // TODO: do we want field props? should fields be part of IComponent and used here?\n    // TODO: should we centrally define DefaultFields? (not exported from styling)\n    // TODO: tie this array to ICustomizationProps, such that each array element is keyof ICustomizationProps\n    var DefaultFields = ['theme', 'styles', 'tokens'];\n    return Customizations_Customizations.getSettings(fields || DefaultFields, displayName, context.customizations);\n}\n//# sourceMappingURL=createComponent.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/warn/warnDeprecations.js\n\n/**\n * Warns when a deprecated props are being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n * either null or a replacement prop name.\n */\nfunction warnDeprecations(componentName, props, deprecationMap) {\n    if (false) { var replacementPropName, deprecationMessage, propName; }\n}\n//# sourceMappingURL=warnDeprecations.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/properties.js\nvar toObjectMap = function () {\n    var items = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        items[_i] = arguments[_i];\n    }\n    var result = {};\n    for (var _a = 0, items_1 = items; _a < items_1.length; _a++) {\n        var item = items_1[_a];\n        var keys = Array.isArray(item) ? item : Object.keys(item);\n        for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {\n            var key = keys_1[_b];\n            result[key] = 1;\n        }\n    }\n    return result;\n};\n/**\n * An array of events that are allowed on every html element type.\n *\n * @public\n */\nvar baseElementEvents = toObjectMap([\n    'onCopy',\n    'onCut',\n    'onPaste',\n    'onCompositionEnd',\n    'onCompositionStart',\n    'onCompositionUpdate',\n    'onFocus',\n    'onFocusCapture',\n    'onBlur',\n    'onBlurCapture',\n    'onChange',\n    'onInput',\n    'onSubmit',\n    'onLoad',\n    'onError',\n    'onKeyDown',\n    'onKeyDownCapture',\n    'onKeyPress',\n    'onKeyUp',\n    'onAbort',\n    'onCanPlay',\n    'onCanPlayThrough',\n    'onDurationChange',\n    'onEmptied',\n    'onEncrypted',\n    'onEnded',\n    'onLoadedData',\n    'onLoadedMetadata',\n    'onLoadStart',\n    'onPause',\n    'onPlay',\n    'onPlaying',\n    'onProgress',\n    'onRateChange',\n    'onSeeked',\n    'onSeeking',\n    'onStalled',\n    'onSuspend',\n    'onTimeUpdate',\n    'onVolumeChange',\n    'onWaiting',\n    'onClick',\n    'onClickCapture',\n    'onContextMenu',\n    'onDoubleClick',\n    'onDrag',\n    'onDragEnd',\n    'onDragEnter',\n    'onDragExit',\n    'onDragLeave',\n    'onDragOver',\n    'onDragStart',\n    'onDrop',\n    'onMouseDown',\n    'onMouseDownCapture',\n    'onMouseEnter',\n    'onMouseLeave',\n    'onMouseMove',\n    'onMouseOut',\n    'onMouseOver',\n    'onMouseUp',\n    'onMouseUpCapture',\n    'onSelect',\n    'onTouchCancel',\n    'onTouchEnd',\n    'onTouchMove',\n    'onTouchStart',\n    'onScroll',\n    'onWheel',\n    'onPointerCancel',\n    'onPointerDown',\n    'onPointerEnter',\n    'onPointerLeave',\n    'onPointerMove',\n    'onPointerOut',\n    'onPointerOver',\n    'onPointerUp',\n    'onGotPointerCapture',\n    'onLostPointerCapture',\n]);\n/**\n * An array of element attributes which are allowed on every html element type.\n *\n * @public\n */\nvar baseElementProperties = toObjectMap([\n    'accessKey',\n    'children',\n    'className',\n    'contentEditable',\n    'dir',\n    'draggable',\n    'hidden',\n    'htmlFor',\n    'id',\n    'lang',\n    'ref',\n    'role',\n    'style',\n    'tabIndex',\n    'title',\n    'translate',\n    'spellCheck',\n    'name',\n]);\n/**\n * An array of HTML element properties and events.\n *\n * @public\n */\nvar htmlElementProperties = toObjectMap(baseElementProperties, baseElementEvents);\n/**\n * An array of LABEL tag properties and events.\n *\n * @public\n */\nvar labelProperties = toObjectMap(htmlElementProperties, [\n    'form',\n]);\n/**\n * An array of AUDIO tag properties and events.\n\n * @public\n */\nvar audioProperties = toObjectMap(htmlElementProperties, [\n    'height',\n    'loop',\n    'muted',\n    'preload',\n    'src',\n    'width',\n]);\n/**\n * An array of VIDEO tag properties and events.\n *\n * @public\n */\nvar videoProperties = toObjectMap(audioProperties, [\n    'poster',\n]);\n/**\n * An array of OL tag properties and events.\n *\n * @public\n */\nvar olProperties = toObjectMap(htmlElementProperties, [\n    'start',\n]);\n/**\n * An array of LI tag properties and events.\n *\n * @public\n */\nvar liProperties = toObjectMap(htmlElementProperties, [\n    'value',\n]);\n/**\n * An array of A tag properties and events.\n *\n * @public\n */\nvar anchorProperties = toObjectMap(htmlElementProperties, [\n    'download',\n    'href',\n    'hrefLang',\n    'media',\n    'rel',\n    'target',\n    'type',\n]);\n/**\n * An array of BUTTON tag properties and events.\n *\n * @public\n */\nvar buttonProperties = toObjectMap(htmlElementProperties, [\n    'autoFocus',\n    'disabled',\n    'form',\n    'formAction',\n    'formEncType',\n    'formMethod',\n    'formNoValidate',\n    'formTarget',\n    'type',\n    'value',\n]);\n/**\n * An array of INPUT tag properties and events.\n *\n * @public\n */\nvar inputProperties = toObjectMap(buttonProperties, [\n    'accept',\n    'alt',\n    'autoCapitalize',\n    'autoComplete',\n    'checked',\n    'dirname',\n    'form',\n    'height',\n    'inputMode',\n    'list',\n    'max',\n    'maxLength',\n    'min',\n    'multiple',\n    'pattern',\n    'placeholder',\n    'readOnly',\n    'required',\n    'src',\n    'step',\n    'size',\n    'type',\n    'value',\n    'width',\n]);\n/**\n * An array of TEXTAREA tag properties and events.\n *\n * @public\n */\nvar textAreaProperties = toObjectMap(buttonProperties, [\n    'autoCapitalize',\n    'cols',\n    'dirname',\n    'form',\n    'maxLength',\n    'placeholder',\n    'readOnly',\n    'required',\n    'rows',\n    'wrap',\n]);\n/**\n * An array of SELECT tag properties and events.\n *\n * @public\n */\nvar selectProperties = toObjectMap(buttonProperties, [\n    'form',\n    'multiple',\n    'required',\n]);\nvar optionProperties = toObjectMap(htmlElementProperties, [\n    'selected',\n    'value',\n]);\n/**\n * An array of TABLE tag properties and events.\n *\n * @public\n */\nvar tableProperties = toObjectMap(htmlElementProperties, [\n    'cellPadding',\n    'cellSpacing',\n]);\n/**\n * An array of TR tag properties and events.\n *\n * @public\n */\nvar trProperties = htmlElementProperties;\n/**\n * An array of TH tag properties and events.\n *\n * @public\n */\nvar thProperties = toObjectMap(htmlElementProperties, [\n    'rowSpan',\n    'scope',\n]);\n/**\n * An array of TD tag properties and events.\n *\n * @public\n */\nvar tdProperties = toObjectMap(htmlElementProperties, [\n    'colSpan',\n    'headers',\n    'rowSpan',\n    'scope',\n]);\nvar colGroupProperties = toObjectMap(htmlElementProperties, [\n    'span',\n]);\nvar colProperties = toObjectMap(htmlElementProperties, [\n    'span',\n]);\n/**\n * An array of FORM tag properties and events.\n *\n * @public\n */\nvar formProperties = toObjectMap(htmlElementProperties, [\n    'acceptCharset',\n    'action',\n    'encType',\n    'encType',\n    'method',\n    'noValidate',\n    'target',\n]);\n/**\n * An array of IFRAME tag properties and events.\n *\n * @public\n */\nvar iframeProperties = toObjectMap(htmlElementProperties, [\n    'allow',\n    'allowFullScreen',\n    'allowPaymentRequest',\n    'allowTransparency',\n    'csp',\n    'height',\n    'importance',\n    'referrerPolicy',\n    'sandbox',\n    'src',\n    'srcDoc',\n    'width',\n]);\n/**\n * An array of IMAGE tag properties and events.\n *\n * @public\n */\nvar imgProperties = toObjectMap(htmlElementProperties, [\n    'alt',\n    'crossOrigin',\n    'height',\n    'src',\n    'srcSet',\n    'useMap',\n    'width',\n]);\n/**\n * @deprecated Use imgProperties for img elements.\n */\nvar imageProperties = imgProperties;\n/**\n * An array of DIV tag properties and events.\n *\n * @public\n */\nvar divProperties = htmlElementProperties;\n/**\n * Gets native supported props for an html element provided the allowance set. Use one of the property\n * sets defined (divProperties, buttonPropertes, etc) to filter out supported properties from a given\n * props set. Note that all data- and aria- prefixed attributes will be allowed.\n * NOTE: getNativeProps should always be applied first when adding props to a react component. The\n * non-native props should be applied second. This will prevent getNativeProps from overriding your custom props.\n * For example, if props passed to getNativeProps has an onClick function and getNativeProps is added to\n * the component after an onClick function is added, then the getNativeProps onClick will override it.\n *\n * @public\n * @param props - The unfiltered input props\n * @param allowedPropsNames - The array or record of allowed prop names.\n * @returns The filtered props\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getNativeProps(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nprops, allowedPropNames, excludedPropNames) {\n    // It'd be great to properly type this while allowing 'aria-` and 'data-' attributes like TypeScript does for\n    // JSX attributes, but that ability is hardcoded into the TS compiler with no analog in TypeScript typings.\n    // Then we'd be able to enforce props extends native props (including aria- and data- attributes), and then\n    // return native props.\n    // We should be able to do this once this PR is merged: https://github.com/microsoft/TypeScript/pull/26797\n    var _a;\n    var isArray = Array.isArray(allowedPropNames);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var result = {};\n    var keys = Object.keys(props);\n    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n        var key = keys_2[_i];\n        var isNativeProp = (!isArray && allowedPropNames[key]) ||\n            (isArray && allowedPropNames.indexOf(key) >= 0) ||\n            key.indexOf('data-') === 0 ||\n            key.indexOf('aria-') === 0;\n        if (isNativeProp && (!excludedPropNames || ((_a = excludedPropNames) === null || _a === void 0 ? void 0 : _a.indexOf(key)) === -1)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            result[key] = props[key];\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=properties.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Stack/StackUtils.js\n/**\n * Functions used by Stack components to simplify style-related computations\n */\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nvar _getThemedSpacing = function (space, theme) {\n    if (theme.spacing.hasOwnProperty(space)) {\n        return theme.spacing[space];\n    }\n    return space;\n};\n// Helper function that takes a gap as a string and converts it into a { value, unit } representation.\nvar _getValueUnitGap = function (gap) {\n    var numericalPart = parseFloat(gap);\n    var numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n    var numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n    var unitPart = gap.substring(numericalString.toString().length);\n    return {\n        value: numericalValue,\n        unit: unitPart || 'px',\n    };\n};\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\nvar parseGap = function (gap, theme) {\n    if (gap === undefined || gap === '') {\n        return {\n            rowGap: {\n                value: 0,\n                unit: 'px',\n            },\n            columnGap: {\n                value: 0,\n                unit: 'px',\n            },\n        };\n    }\n    if (typeof gap === 'number') {\n        return {\n            rowGap: {\n                value: gap,\n                unit: 'px',\n            },\n            columnGap: {\n                value: gap,\n                unit: 'px',\n            },\n        };\n    }\n    var splitGap = gap.split(' ');\n    // If the array has more than two values, then return 0px.\n    if (splitGap.length > 2) {\n        return {\n            rowGap: {\n                value: 0,\n                unit: 'px',\n            },\n            columnGap: {\n                value: 0,\n                unit: 'px',\n            },\n        };\n    }\n    // If the array has two values, then parse each one.\n    if (splitGap.length === 2) {\n        return {\n            rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n            columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme)),\n        };\n    }\n    // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n    var calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n    return {\n        rowGap: calculatedGap,\n        columnGap: calculatedGap,\n    };\n};\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\nvar parsePadding = function (padding, theme) {\n    if (padding === undefined || typeof padding === 'number' || padding === '') {\n        return padding;\n    }\n    var paddingValues = padding.split(' ');\n    if (paddingValues.length < 2) {\n        return _getThemedSpacing(padding, theme);\n    }\n    return paddingValues.reduce(function (padding1, padding2) {\n        return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n    });\n};\n//# sourceMappingURL=StackUtils.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Stack/Stack.styles.js\n\n\n\nvar nameMap = {\n    start: 'flex-start',\n    end: 'flex-end',\n};\nvar GlobalClassNames = {\n    root: 'ms-Stack',\n    inner: 'ms-Stack-inner',\n};\nvar Stack_styles_styles = function (props, theme, tokens) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    var verticalFill = props.verticalFill, horizontal = props.horizontal, reversed = props.reversed, grow = props.grow, wrap = props.wrap, horizontalAlign = props.horizontalAlign, verticalAlign = props.verticalAlign, disableShrink = props.disableShrink, className = props.className;\n    var classNames = getGlobalClassNames(GlobalClassNames, theme);\n    /* eslint-disable deprecation/deprecation */\n    var childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;\n    var maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;\n    var maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;\n    var padding = tokens && tokens.padding ? tokens.padding : props.padding;\n    /* eslint-enable deprecation/deprecation */\n    var _h = parseGap(childrenGap, theme), rowGap = _h.rowGap, columnGap = _h.columnGap;\n    var horizontalMargin = \"\" + -0.5 * columnGap.value + columnGap.unit;\n    var verticalMargin = \"\" + -0.5 * rowGap.value + rowGap.unit;\n    // styles to be applied to all direct children regardless of wrap or direction\n    var childStyles = {\n        textOverflow: 'ellipsis',\n    };\n    // selectors to be applied regardless of wrap or direction\n    var commonSelectors = {\n        // flexShrink styles are applied by the StackItem\n        '> *:not(.ms-StackItem)': {\n            flexShrink: disableShrink ? 0 : 1,\n        },\n    };\n    if (wrap) {\n        return {\n            root: [\n                classNames.root,\n                {\n                    flexWrap: 'wrap',\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight,\n                    width: 'auto',\n                    overflow: 'visible',\n                    height: '100%',\n                },\n                horizontalAlign && (_a = {},\n                    _a[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign,\n                    _a),\n                verticalAlign && (_b = {},\n                    _b[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign,\n                    _b),\n                className,\n                {\n                    // not allowed to be overridden by className\n                    // since this is necessary in order to prevent collapsing margins\n                    display: 'flex',\n                },\n                horizontal && {\n                    height: verticalFill ? '100%' : 'auto',\n                },\n            ],\n            inner: [\n                classNames.inner,\n                {\n                    display: 'flex',\n                    flexWrap: 'wrap',\n                    marginLeft: horizontalMargin,\n                    marginRight: horizontalMargin,\n                    marginTop: verticalMargin,\n                    marginBottom: verticalMargin,\n                    overflow: 'visible',\n                    boxSizing: 'border-box',\n                    padding: parsePadding(padding, theme),\n                    // avoid unnecessary calc() calls if horizontal gap is 0\n                    width: columnGap.value === 0 ? '100%' : \"calc(100% + \" + columnGap.value + columnGap.unit + \")\",\n                    maxWidth: '100vw',\n                    selectors: __assign({ '> *': __assign({ margin: \"\" + 0.5 * rowGap.value + rowGap.unit + \" \" + 0.5 * columnGap.value + columnGap.unit }, childStyles) }, commonSelectors),\n                },\n                horizontalAlign && (_c = {},\n                    _c[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign,\n                    _c),\n                verticalAlign && (_d = {},\n                    _d[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign,\n                    _d),\n                horizontal && {\n                    flexDirection: reversed ? 'row-reverse' : 'row',\n                    // avoid unnecessary calc() calls if vertical gap is 0\n                    height: rowGap.value === 0 ? '100%' : \"calc(100% + \" + rowGap.value + rowGap.unit + \")\",\n                    selectors: {\n                        '> *': {\n                            maxWidth: columnGap.value === 0 ? '100%' : \"calc(100% - \" + columnGap.value + columnGap.unit + \")\",\n                        },\n                    },\n                },\n                !horizontal && {\n                    flexDirection: reversed ? 'column-reverse' : 'column',\n                    height: \"calc(100% + \" + rowGap.value + rowGap.unit + \")\",\n                    selectors: {\n                        '> *': {\n                            maxHeight: rowGap.value === 0 ? '100%' : \"calc(100% - \" + rowGap.value + rowGap.unit + \")\",\n                        },\n                    },\n                },\n            ],\n        };\n    }\n    return {\n        root: [\n            classNames.root,\n            {\n                display: 'flex',\n                flexDirection: horizontal ? (reversed ? 'row-reverse' : 'row') : reversed ? 'column-reverse' : 'column',\n                flexWrap: 'nowrap',\n                width: 'auto',\n                height: verticalFill ? '100%' : 'auto',\n                maxWidth: maxWidth,\n                maxHeight: maxHeight,\n                padding: parsePadding(padding, theme),\n                boxSizing: 'border-box',\n                selectors: __assign((_e = { '> *': childStyles }, _e[reversed ? '> *:not(:last-child)' : '> *:not(:first-child)'] = [\n                    horizontal && {\n                        marginLeft: \"\" + columnGap.value + columnGap.unit,\n                    },\n                    !horizontal && {\n                        marginTop: \"\" + rowGap.value + rowGap.unit,\n                    },\n                ], _e), commonSelectors),\n            },\n            grow && {\n                flexGrow: grow === true ? 1 : grow,\n            },\n            horizontalAlign && (_f = {},\n                _f[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign,\n                _f),\n            verticalAlign && (_g = {},\n                _g[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign,\n                _g),\n            className,\n        ],\n    };\n};\n//# sourceMappingURL=Stack.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Stack/StackItem/StackItem.styles.js\n\nvar StackItem_styles_GlobalClassNames = {\n    root: 'ms-StackItem',\n};\nvar alignMap = {\n    start: 'flex-start',\n    end: 'flex-end',\n};\nvar StackItemStyles = function (props, theme, tokens) {\n    var grow = props.grow, shrink = props.shrink, disableShrink = props.disableShrink, align = props.align, verticalFill = props.verticalFill, order = props.order, className = props.className;\n    var classNames = getGlobalClassNames(StackItem_styles_GlobalClassNames, theme);\n    return {\n        root: [\n            theme.fonts.medium,\n            classNames.root,\n            {\n                margin: tokens.margin,\n                padding: tokens.padding,\n                height: verticalFill ? '100%' : 'auto',\n                width: 'auto',\n            },\n            grow && { flexGrow: grow === true ? 1 : grow },\n            (disableShrink || (!grow && !shrink)) && {\n                flexShrink: 0,\n            },\n            shrink &&\n                !disableShrink && {\n                flexShrink: 1,\n            },\n            align && {\n                alignSelf: alignMap[align] || align,\n            },\n            order && {\n                order: order,\n            },\n            className,\n        ],\n    };\n};\n//# sourceMappingURL=StackItem.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Stack/StackItem/StackItem.js\n/** @jsx withSlots */\n\n\n\nvar StackItemView = function (props) {\n    var children = props.children;\n    if (react[\"Children\"].count(children) < 1) {\n        return null;\n    }\n    var Slots = getSlots(props, {\n        root: 'div',\n    });\n    return withSlots(Slots.root, null, children);\n};\nvar StackItem = createComponent(StackItemView, {\n    displayName: 'StackItem',\n    styles: StackItemStyles,\n});\n/* harmony default export */ var StackItem_StackItem = (StackItem);\n//# sourceMappingURL=StackItem.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Stack/Stack.js\n\n/** @jsx withSlots */\n\n\n\n\n\nvar StackView = function (props) {\n    var _a = props.as, RootType = _a === void 0 ? 'div' : _a, disableShrink = props.disableShrink, wrap = props.wrap, rest = __rest(props, [\"as\", \"disableShrink\", \"wrap\"]);\n    warnDeprecations('Stack', props, {\n        gap: 'tokens.childrenGap',\n        maxHeight: 'tokens.maxHeight',\n        maxWidth: 'tokens.maxWidth',\n        padding: 'tokens.padding',\n    });\n    var stackChildren = react[\"Children\"].map(props.children, function (child, index) {\n        if (!child) {\n            return null;\n        }\n        if (_isStackItem(child)) {\n            var defaultItemProps = {\n                shrink: !disableShrink,\n            };\n            return react[\"cloneElement\"](child, __assign(__assign({}, defaultItemProps), child.props));\n        }\n        return child;\n    });\n    var nativeProps = getNativeProps(rest, htmlElementProperties);\n    var Slots = getSlots(props, {\n        root: RootType,\n        inner: 'div',\n    });\n    if (wrap) {\n        return (withSlots(Slots.root, __assign({}, nativeProps),\n            withSlots(Slots.inner, null, stackChildren)));\n    }\n    return withSlots(Slots.root, __assign({}, nativeProps), stackChildren);\n};\nfunction _isStackItem(item) {\n    // In theory, we should be able to just check item.type === StackItem.\n    // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n    // the object identity is different despite the function implementation being the same.\n    return (!!item &&\n        typeof item === 'object' &&\n        !!item.type &&\n        // StackItem is generated by createComponent, so we need to check its displayName instead of name\n        item.type.displayName === StackItem.displayName);\n}\nvar StackStatics = {\n    Item: StackItem,\n};\nvar Stack = createComponent(StackView, {\n    displayName: 'Stack',\n    styles: Stack_styles_styles,\n    statics: StackStatics,\n});\n/* harmony default export */ var Stack_Stack = (Stack);\n//# sourceMappingURL=Stack.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Text/Text.view.js\n\n/** @jsx withSlots */\n\n\n\nvar TextView = function (props) {\n    if (react[\"Children\"].count(props.children) === 0) {\n        return null;\n    }\n    var block = props.block, className = props.className, _a = props.as, RootType = _a === void 0 ? 'span' : _a, variant = props.variant, nowrap = props.nowrap, rest = __rest(props, [\"block\", \"className\", \"as\", \"variant\", \"nowrap\"]);\n    var Slots = getSlots(props, {\n        root: RootType,\n    });\n    return withSlots(Slots.root, __assign({}, getNativeProps(rest, htmlElementProperties)));\n};\n//# sourceMappingURL=Text.view.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Text/Text.styles.js\nvar TextStyles = function (props, theme) {\n    var as = props.as, className = props.className, block = props.block, nowrap = props.nowrap, variant = props.variant;\n    var fonts = theme.fonts;\n    var variantObject = fonts[variant || 'medium'];\n    return {\n        root: [\n            theme.fonts.medium,\n            {\n                display: block ? (as === 'td' ? 'table-cell' : 'block') : 'inline',\n                fontFamily: variantObject.fontFamily,\n                fontSize: variantObject.fontSize,\n                fontWeight: variantObject.fontWeight,\n                color: variantObject.color,\n                mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n                webkitFontSmoothing: variantObject.WebkitFontSmoothing,\n            },\n            nowrap && {\n                whiteSpace: 'nowrap',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n            },\n            className,\n        ],\n    };\n};\n//# sourceMappingURL=Text.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Text/Text.js\n\n\n\nvar Text = createComponent(TextView, {\n    displayName: 'Text',\n    styles: TextStyles,\n});\n/* harmony default export */ var Text_Text = (Text);\n//# sourceMappingURL=Text.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/Async.js\n\n/**\n * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.\n * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.\n *\n * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a\n * new instance of the class and remember to call dispose() during your code's dispose handler.\n *\n * @public\n */\nvar Async_Async = /** @class */ (function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function Async(parent, onError) {\n        this._timeoutIds = null;\n        this._immediateIds = null;\n        this._intervalIds = null;\n        this._animationFrameIds = null;\n        this._isDisposed = false;\n        this._parent = parent || null;\n        this._onErrorHandler = onError;\n        this._noop = function () {\n            /* do nothing */\n        };\n    }\n    /**\n     * Dispose function, clears all async operations.\n     */\n    Async.prototype.dispose = function () {\n        var id;\n        this._isDisposed = true;\n        this._parent = null;\n        // Clear timeouts.\n        if (this._timeoutIds) {\n            for (id in this._timeoutIds) {\n                if (this._timeoutIds.hasOwnProperty(id)) {\n                    this.clearTimeout(parseInt(id, 10));\n                }\n            }\n            this._timeoutIds = null;\n        }\n        // Clear immediates.\n        if (this._immediateIds) {\n            for (id in this._immediateIds) {\n                if (this._immediateIds.hasOwnProperty(id)) {\n                    this.clearImmediate(parseInt(id, 10));\n                }\n            }\n            this._immediateIds = null;\n        }\n        // Clear intervals.\n        if (this._intervalIds) {\n            for (id in this._intervalIds) {\n                if (this._intervalIds.hasOwnProperty(id)) {\n                    this.clearInterval(parseInt(id, 10));\n                }\n            }\n            this._intervalIds = null;\n        }\n        // Clear animation frames.\n        if (this._animationFrameIds) {\n            for (id in this._animationFrameIds) {\n                if (this._animationFrameIds.hasOwnProperty(id)) {\n                    this.cancelAnimationFrame(parseInt(id, 10));\n                }\n            }\n            this._animationFrameIds = null;\n        }\n    };\n    /**\n     * SetTimeout override, which will auto cancel the timeout during dispose.\n     * @param callback - Callback to execute.\n     * @param duration - Duration in milliseconds.\n     * @returns The setTimeout id.\n     */\n    Async.prototype.setTimeout = function (callback, duration) {\n        var _this = this;\n        var timeoutId = 0;\n        if (!this._isDisposed) {\n            if (!this._timeoutIds) {\n                this._timeoutIds = {};\n            }\n            timeoutId = setTimeout(function () {\n                // Time to execute the timeout, enqueue it as a foreground task to be executed.\n                try {\n                    // Now delete the record and call the callback.\n                    if (_this._timeoutIds) {\n                        delete _this._timeoutIds[timeoutId];\n                    }\n                    callback.apply(_this._parent);\n                }\n                catch (e) {\n                    if (_this._onErrorHandler) {\n                        _this._onErrorHandler(e);\n                    }\n                }\n            }, duration);\n            this._timeoutIds[timeoutId] = true;\n        }\n        return timeoutId;\n    };\n    /**\n     * Clears the timeout.\n     * @param id - Id to cancel.\n     */\n    Async.prototype.clearTimeout = function (id) {\n        if (this._timeoutIds && this._timeoutIds[id]) {\n            clearTimeout(id);\n            delete this._timeoutIds[id];\n        }\n    };\n    /**\n     * SetImmediate override, which will auto cancel the immediate during dispose.\n     * @param callback - Callback to execute.\n     * @param targetElement - Optional target element to use for identifying the correct window.\n     * @returns The setTimeout id.\n     */\n    Async.prototype.setImmediate = function (callback, targetElement) {\n        var _this = this;\n        var immediateId = 0;\n        var win = getWindow(targetElement);\n        if (!this._isDisposed) {\n            if (!this._immediateIds) {\n                this._immediateIds = {};\n            }\n            var setImmediateCallback = function () {\n                // Time to execute the timeout, enqueue it as a foreground task to be executed.\n                try {\n                    // Now delete the record and call the callback.\n                    if (_this._immediateIds) {\n                        delete _this._immediateIds[immediateId];\n                    }\n                    callback.apply(_this._parent);\n                }\n                catch (e) {\n                    _this._logError(e);\n                }\n            };\n            immediateId = win.setTimeout(setImmediateCallback, 0);\n            this._immediateIds[immediateId] = true;\n        }\n        return immediateId;\n    };\n    /**\n     * Clears the immediate.\n     * @param id - Id to cancel.\n     * @param targetElement - Optional target element to use for identifying the correct window.\n     */\n    Async.prototype.clearImmediate = function (id, targetElement) {\n        var win = getWindow(targetElement);\n        if (this._immediateIds && this._immediateIds[id]) {\n            win.clearTimeout(id);\n            delete this._immediateIds[id];\n        }\n    };\n    /**\n     * SetInterval override, which will auto cancel the timeout during dispose.\n     * @param callback - Callback to execute.\n     * @param duration - Duration in milliseconds.\n     * @returns The setTimeout id.\n     */\n    Async.prototype.setInterval = function (callback, duration) {\n        var _this = this;\n        var intervalId = 0;\n        if (!this._isDisposed) {\n            if (!this._intervalIds) {\n                this._intervalIds = {};\n            }\n            intervalId = setInterval(function () {\n                // Time to execute the interval callback, enqueue it as a foreground task to be executed.\n                try {\n                    callback.apply(_this._parent);\n                }\n                catch (e) {\n                    _this._logError(e);\n                }\n            }, duration);\n            this._intervalIds[intervalId] = true;\n        }\n        return intervalId;\n    };\n    /**\n     * Clears the interval.\n     * @param id - Id to cancel.\n     */\n    Async.prototype.clearInterval = function (id) {\n        if (this._intervalIds && this._intervalIds[id]) {\n            clearInterval(id);\n            delete this._intervalIds[id];\n        }\n    };\n    /**\n     * Creates a function that, when executed, will only call the func function at most once per\n     * every wait milliseconds. Provide an options object to indicate that func should be invoked\n     * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled\n     * function will return the result of the last func call.\n     *\n     * Note: If leading and trailing options are true func will be called on the trailing edge of\n     * the timeout only if the throttled function is invoked more than once during the wait timeout.\n     *\n     * @param func - The function to throttle.\n     * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.\n     * @param options - The options object.\n     * @returns The new throttled function.\n     */\n    Async.prototype.throttle = function (func, wait, options) {\n        var _this = this;\n        if (this._isDisposed) {\n            return this._noop;\n        }\n        var waitMS = wait || 0;\n        var leading = true;\n        var trailing = true;\n        var lastExecuteTime = 0;\n        var lastResult;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var lastArgs;\n        var timeoutId = null;\n        if (options && typeof options.leading === 'boolean') {\n            leading = options.leading;\n        }\n        if (options && typeof options.trailing === 'boolean') {\n            trailing = options.trailing;\n        }\n        var callback = function (userCall) {\n            var now = new Date().getTime();\n            var delta = now - lastExecuteTime;\n            var waitLength = leading ? waitMS - delta : waitMS;\n            if (delta >= waitMS && (!userCall || leading)) {\n                lastExecuteTime = now;\n                if (timeoutId) {\n                    _this.clearTimeout(timeoutId);\n                    timeoutId = null;\n                }\n                lastResult = func.apply(_this._parent, lastArgs);\n            }\n            else if (timeoutId === null && trailing) {\n                timeoutId = _this.setTimeout(callback, waitLength);\n            }\n            return lastResult;\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var resultFunction = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            lastArgs = args;\n            return callback(true);\n        };\n        return resultFunction;\n    };\n    /**\n     * Creates a function that will delay the execution of func until after wait milliseconds have\n     * elapsed since the last time it was invoked. Provide an options object to indicate that func\n     * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls\n     * to the debounced function will return the result of the last func call.\n     *\n     * Note: If leading and trailing options are true func will be called on the trailing edge of\n     * the timeout only if the debounced function is invoked more than once during the wait\n     * timeout.\n     *\n     * @param func - The function to debounce.\n     * @param wait - The number of milliseconds to delay.\n     * @param options - The options object.\n     * @returns The new debounced function.\n     */\n    Async.prototype.debounce = function (func, wait, options) {\n        var _this = this;\n        if (this._isDisposed) {\n            var noOpFunction = (function () {\n                /** Do nothing */\n            });\n            noOpFunction.cancel = function () {\n                return;\n            };\n            /* eslint-disable @typescript-eslint/no-explicit-any */\n            noOpFunction.flush = (function () { return null; });\n            /* eslint-enable @typescript-eslint/no-explicit-any */\n            noOpFunction.pending = function () { return false; };\n            return noOpFunction;\n        }\n        var waitMS = wait || 0;\n        var leading = false;\n        var trailing = true;\n        var maxWait = null;\n        var lastCallTime = 0;\n        var lastExecuteTime = new Date().getTime();\n        var lastResult;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var lastArgs;\n        var timeoutId = null;\n        if (options && typeof options.leading === 'boolean') {\n            leading = options.leading;\n        }\n        if (options && typeof options.trailing === 'boolean') {\n            trailing = options.trailing;\n        }\n        if (options && typeof options.maxWait === 'number' && !isNaN(options.maxWait)) {\n            maxWait = options.maxWait;\n        }\n        var markExecuted = function (time) {\n            if (timeoutId) {\n                _this.clearTimeout(timeoutId);\n                timeoutId = null;\n            }\n            lastExecuteTime = time;\n        };\n        var invokeFunction = function (time) {\n            markExecuted(time);\n            lastResult = func.apply(_this._parent, lastArgs);\n        };\n        var callback = function (userCall) {\n            var now = new Date().getTime();\n            var executeImmediately = false;\n            if (userCall) {\n                if (leading && now - lastCallTime >= waitMS) {\n                    executeImmediately = true;\n                }\n                lastCallTime = now;\n            }\n            var delta = now - lastCallTime;\n            var waitLength = waitMS - delta;\n            var maxWaitDelta = now - lastExecuteTime;\n            var maxWaitExpired = false;\n            if (maxWait !== null) {\n                // maxWait only matters when there is a pending callback\n                if (maxWaitDelta >= maxWait && timeoutId) {\n                    maxWaitExpired = true;\n                }\n                else {\n                    waitLength = Math.min(waitLength, maxWait - maxWaitDelta);\n                }\n            }\n            if (delta >= waitMS || maxWaitExpired || executeImmediately) {\n                invokeFunction(now);\n            }\n            else if ((timeoutId === null || !userCall) && trailing) {\n                timeoutId = _this.setTimeout(callback, waitLength);\n            }\n            return lastResult;\n        };\n        var pending = function () {\n            return !!timeoutId;\n        };\n        var cancel = function () {\n            if (pending()) {\n                // Mark the debounced function as having executed\n                markExecuted(new Date().getTime());\n            }\n        };\n        var flush = function () {\n            if (pending()) {\n                invokeFunction(new Date().getTime());\n            }\n            return lastResult;\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var resultFunction = (function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            lastArgs = args;\n            return callback(true);\n        });\n        resultFunction.cancel = cancel;\n        resultFunction.flush = flush;\n        resultFunction.pending = pending;\n        return resultFunction;\n    };\n    Async.prototype.requestAnimationFrame = function (callback, targetElement) {\n        var _this = this;\n        var animationFrameId = 0;\n        var win = getWindow(targetElement);\n        if (!this._isDisposed) {\n            if (!this._animationFrameIds) {\n                this._animationFrameIds = {};\n            }\n            var animationFrameCallback = function () {\n                try {\n                    // Now delete the record and call the callback.\n                    if (_this._animationFrameIds) {\n                        delete _this._animationFrameIds[animationFrameId];\n                    }\n                    callback.apply(_this._parent);\n                }\n                catch (e) {\n                    _this._logError(e);\n                }\n            };\n            animationFrameId = win.requestAnimationFrame\n                ? win.requestAnimationFrame(animationFrameCallback)\n                : win.setTimeout(animationFrameCallback, 0);\n            this._animationFrameIds[animationFrameId] = true;\n        }\n        return animationFrameId;\n    };\n    Async.prototype.cancelAnimationFrame = function (id, targetElement) {\n        var win = getWindow(targetElement);\n        if (this._animationFrameIds && this._animationFrameIds[id]) {\n            win.cancelAnimationFrame ? win.cancelAnimationFrame(id) : win.clearTimeout(id);\n            delete this._animationFrameIds[id];\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Async.prototype._logError = function (e) {\n        if (this._onErrorHandler) {\n            this._onErrorHandler(e);\n        }\n    };\n    return Async;\n}());\n\n//# sourceMappingURL=Async.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/object.js\n/**\n * Compares a to b and b to a.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction shallowCompare(a, b) {\n    for (var propName in a) {\n        if (a.hasOwnProperty(propName)) {\n            if (!b.hasOwnProperty(propName) || b[propName] !== a[propName]) {\n                return false;\n            }\n        }\n    }\n    for (var propName in b) {\n        if (b.hasOwnProperty(propName)) {\n            if (!a.hasOwnProperty(propName)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n/**\n * Makes a resulting merge of a bunch of objects. Pass in the target object followed by 1 or more\n * objects as arguments and they will be merged sequentially into the target. Note that this will\n * shallow merge; it will not create new cloned values for target members.\n *\n * @public\n * @param target - Target object to merge following object arguments into.\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\n * @returns Resulting merged target.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction object_assign(target) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    return filteredAssign.apply(this, [null, target].concat(args));\n}\n/**\n * Makes a resulting merge of a bunch of objects, but allows a filter function to be passed in to filter\n * the resulting merges. This allows for scenarios where you want to merge \"everything except that one thing\"\n * or \"properties that start with data-\". Note that this will shallow merge; it will not create new cloned\n * values for target members.\n *\n * @public\n * @param isAllowed - Callback to determine if the given propName is allowed in the result.\n * @param target - Target object to merge following object arguments into.\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\n * @returns Resulting merged target.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction filteredAssign(isAllowed, target) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    target = target || {};\n    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n        var sourceObject = args_1[_a];\n        if (sourceObject) {\n            for (var propName in sourceObject) {\n                if (sourceObject.hasOwnProperty(propName) && (!isAllowed || isAllowed(propName))) {\n                    target[propName] = sourceObject[propName];\n                }\n            }\n        }\n    }\n    return target;\n}\n/**\n * Takes an enum and iterates over each value of the enum (as a string), running the callback on each,\n * returning a mapped array.\n * @param theEnum - Enum to iterate over\n * @param callback - The first parameter the name of the entry, and the second parameter is the value\n * of that entry, which is the value you'd normally use when using the enum (usually a number).\n */\nfunction mapEnumByName(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntheEnum, callback) {\n    // map<any> to satisfy compiler since it doesn't realize we strip out undefineds in the .filter() call\n    return Object.keys(theEnum)\n        .map(function (p) {\n        // map on each property name as a string\n        if (String(Number(p)) !== p) {\n            // if the property is not just a number (because enums in TypeScript will map both ways)\n            return callback(p, theEnum[p]);\n        }\n        return undefined;\n    })\n        .filter(function (v) { return !!v; }); // only return elements with values\n}\n/**\n * Get all values in an object dictionary\n *\n * @param obj - The dictionary to get values for\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction values(obj) {\n    return Object.keys(obj).reduce(function (arr, key) {\n        arr.push(obj[key]);\n        return arr;\n    }, []);\n}\n/**\n * Tiny helper to do the minimal amount of work in duplicating an object but omitting some\n * props. This ends up faster than using object ...rest or reduce to filter.\n *\n * This behaves very much like filteredAssign, but does not merge many objects together,\n * uses an exclusion object map, and avoids spreads all for optimal performance.\n *\n * See perf test for background:\n * https://jsperf.com/omit-vs-rest-vs-reduce/1\n *\n * @param obj - The object to clone\n * @param exclusions - The array of keys to exclude\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction omit(obj, exclusions) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var result = {};\n    for (var key in obj) {\n        if (exclusions.indexOf(key) === -1 && obj.hasOwnProperty(key)) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=object.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/EventGroup.js\n\n/** An instance of EventGroup allows anything with a handle to it to trigger events on it.\n *  If the target is an HTMLElement, the event will be attached to the element and can be\n *  triggered as usual (like clicking for onClick).\n *  The event can be triggered by calling EventGroup.raise() here. If the target is an\n *  HTMLElement, the event gets raised and is handled by the browser. Otherwise, it gets\n *  handled here in EventGroup, and the handler is called in the context of the parent\n *  (which is passed in in the constructor).\n *\n * @public\n * {@docCategory EventGroup}\n */\nvar EventGroup_EventGroup = /** @class */ (function () {\n    /** parent: the context in which events attached to non-HTMLElements are called */\n    function EventGroup(parent) {\n        this._id = EventGroup._uniqueId++;\n        this._parent = parent;\n        this._eventRecords = [];\n    }\n    /** For IE8, bubbleEvent is ignored here and must be dealt with by the handler.\n     *  Events raised here by default have bubbling set to false and cancelable set to true.\n     *  This applies also to built-in events being raised manually here on HTMLElements,\n     *  which may lead to unexpected behavior if it differs from the defaults.\n     *\n     */\n    EventGroup.raise = function (target, eventName, eventArgs, bubbleEvent) {\n        var retVal;\n        if (EventGroup._isElement(target)) {\n            if (typeof document !== 'undefined' && document.createEvent) {\n                var ev = document.createEvent('HTMLEvents');\n                ev.initEvent(eventName, bubbleEvent || false, true);\n                object_assign(ev, eventArgs);\n                retVal = target.dispatchEvent(ev);\n            }\n            else if (typeof document !== 'undefined' && document.createEventObject) {\n                // IE8\n                var evObj = document.createEventObject(eventArgs);\n                // cannot set cancelBubble on evObj, fireEvent will overwrite it\n                target.fireEvent('on' + eventName, evObj);\n            }\n        }\n        else {\n            while (target && retVal !== false) {\n                var events = target.__events__;\n                var eventRecords = events ? events[eventName] : null;\n                if (eventRecords) {\n                    for (var id in eventRecords) {\n                        if (eventRecords.hasOwnProperty(id)) {\n                            var eventRecordList = eventRecords[id];\n                            for (var listIndex = 0; retVal !== false && listIndex < eventRecordList.length; listIndex++) {\n                                var record = eventRecordList[listIndex];\n                                if (record.objectCallback) {\n                                    retVal = record.objectCallback.call(record.parent, eventArgs);\n                                }\n                            }\n                        }\n                    }\n                }\n                // If the target has a parent, bubble the event up.\n                target = bubbleEvent ? target.parent : null;\n            }\n        }\n        return retVal;\n    };\n    EventGroup.isObserved = function (target, eventName) {\n        var events = target && target.__events__;\n        return !!events && !!events[eventName];\n    };\n    /** Check to see if the target has declared support of the given event. */\n    EventGroup.isDeclared = function (target, eventName) {\n        var declaredEvents = target && target.__declaredEvents;\n        return !!declaredEvents && !!declaredEvents[eventName];\n    };\n    EventGroup.stopPropagation = function (event) {\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        }\n        else {\n            // IE8\n            event.cancelBubble = true;\n        }\n    };\n    EventGroup._isElement = function (target) {\n        return (!!target && (!!target.addEventListener || (typeof HTMLElement !== 'undefined' && target instanceof HTMLElement)));\n    };\n    EventGroup.prototype.dispose = function () {\n        if (!this._isDisposed) {\n            this._isDisposed = true;\n            this.off();\n            this._parent = null;\n        }\n    };\n    /** On the target, attach a set of events, where the events object is a name to function mapping. */\n    EventGroup.prototype.onAll = function (target, events, useCapture) {\n        for (var eventName in events) {\n            if (events.hasOwnProperty(eventName)) {\n                this.on(target, eventName, events[eventName], useCapture);\n            }\n        }\n    };\n    /**\n     * On the target, attach an event whose handler will be called in the context of the parent\n     * of this instance of EventGroup.\n     */\n    EventGroup.prototype.on = function (target, eventName, callback, options) {\n        var _this = this;\n        if (eventName.indexOf(',') > -1) {\n            var events = eventName.split(/[ ,]+/);\n            for (var i = 0; i < events.length; i++) {\n                this.on(target, events[i], callback, options);\n            }\n        }\n        else {\n            var parent_1 = this._parent;\n            var eventRecord = {\n                target: target,\n                eventName: eventName,\n                parent: parent_1,\n                callback: callback,\n                options: options,\n            };\n            // Initialize and wire up the record on the target, so that it can call the callback if the event fires.\n            var events = (target.__events__ = target.__events__ || {});\n            events[eventName] =\n                events[eventName] ||\n                    {\n                        count: 0,\n                    };\n            events[eventName][this._id] = events[eventName][this._id] || [];\n            events[eventName][this._id].push(eventRecord);\n            events[eventName].count++;\n            if (EventGroup._isElement(target)) {\n                var processElementEvent = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    if (_this._isDisposed) {\n                        return;\n                    }\n                    var result;\n                    try {\n                        result = callback.apply(parent_1, args);\n                        if (result === false && args[0]) {\n                            var e = args[0];\n                            if (e.preventDefault) {\n                                e.preventDefault();\n                            }\n                            if (e.stopPropagation) {\n                                e.stopPropagation();\n                            }\n                            e.cancelBubble = true;\n                        }\n                    }\n                    catch (e) {\n                        // ignore\n                    }\n                    return result;\n                };\n                eventRecord.elementCallback = processElementEvent;\n                if (target.addEventListener) {\n                    target.addEventListener(eventName, processElementEvent, options);\n                }\n                else if (target.attachEvent) {\n                    // IE8\n                    target.attachEvent('on' + eventName, processElementEvent);\n                }\n            }\n            else {\n                var processObjectEvent = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    if (_this._isDisposed) {\n                        return;\n                    }\n                    return callback.apply(parent_1, args);\n                };\n                eventRecord.objectCallback = processObjectEvent;\n            }\n            // Remember the record locally, so that it can be removed.\n            this._eventRecords.push(eventRecord);\n        }\n    };\n    EventGroup.prototype.off = function (target, eventName, callback, options) {\n        for (var i = 0; i < this._eventRecords.length; i++) {\n            var eventRecord = this._eventRecords[i];\n            if ((!target || target === eventRecord.target) &&\n                (!eventName || eventName === eventRecord.eventName) &&\n                (!callback || callback === eventRecord.callback) &&\n                (typeof options !== 'boolean' || options === eventRecord.options)) {\n                var events = eventRecord.target.__events__;\n                var targetArrayLookup = events[eventRecord.eventName];\n                var targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null;\n                // We may have already target's entries, so check for null.\n                if (targetArray) {\n                    if (targetArray.length === 1 || !callback) {\n                        targetArrayLookup.count -= targetArray.length;\n                        delete events[eventRecord.eventName][this._id];\n                    }\n                    else {\n                        targetArrayLookup.count--;\n                        targetArray.splice(targetArray.indexOf(eventRecord), 1);\n                    }\n                    if (!targetArrayLookup.count) {\n                        delete events[eventRecord.eventName];\n                    }\n                }\n                if (eventRecord.elementCallback) {\n                    if (eventRecord.target.removeEventListener) {\n                        eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.options);\n                    }\n                    else if (eventRecord.target.detachEvent) {\n                        // IE8\n                        eventRecord.target.detachEvent('on' + eventRecord.eventName, eventRecord.elementCallback);\n                    }\n                }\n                this._eventRecords.splice(i--, 1);\n            }\n        }\n    };\n    /** Trigger the given event in the context of this instance of EventGroup. */\n    EventGroup.prototype.raise = function (eventName, eventArgs, bubbleEvent) {\n        return EventGroup.raise(this._parent, eventName, eventArgs, bubbleEvent);\n    };\n    /** Declare an event as being supported by this instance of EventGroup. */\n    EventGroup.prototype.declare = function (event) {\n        var declaredEvents = (this._parent.__declaredEvents = this._parent.__declaredEvents || {});\n        if (typeof event === 'string') {\n            declaredEvents[event] = true;\n        }\n        else {\n            for (var i = 0; i < event.length; i++) {\n                declaredEvents[event[i]] = true;\n            }\n        }\n    };\n    EventGroup._uniqueId = 0;\n    return EventGroup;\n}());\n\n//# sourceMappingURL=EventGroup.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/warn/warnConditionallyRequiredProps.js\n\n/**\n * Warns when props are required if a condition is met.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param requiredProps - The name of the props that are required when the condition is met.\n * @param conditionalPropName - The name of the prop that the condition is based on.\n * @param condition - Whether the condition is met.\n */\nfunction warnConditionallyRequiredProps(componentName, props, requiredProps, conditionalPropName, condition) {\n    if (condition === true && \"production\" !== 'production') {\n        for (var _i = 0, requiredProps_1 = requiredProps; _i < requiredProps_1.length; _i++) {\n            var requiredPropName = requiredProps_1[_i];\n            if (!(requiredPropName in props)) {\n                warn(componentName + \" property '\" + requiredPropName + \"' is required when '\" + conditionalPropName + \"' is used.'\");\n            }\n        }\n    }\n}\n//# sourceMappingURL=warnConditionallyRequiredProps.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/warn/warnMutuallyExclusive.js\n\n/**\n * Warns when two props which are mutually exclusive are both being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.\n */\nfunction warnMutuallyExclusive(componentName, props, exclusiveMap) {\n    if (false) { var propInExclusiveMapValue, propName; }\n}\n//# sourceMappingURL=warnMutuallyExclusive.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/BaseComponent.js\n\n\n\n\n\n\n\n/**\n * BaseComponent class, which provides basic helpers for all components.\n *\n * @public\n * {@docCategory BaseComponent}\n *\n * @deprecated Do not use. We are moving away from class component.\n */\nvar BaseComponent_BaseComponent = /** @class */ (function (_super) {\n    __extends(BaseComponent, _super);\n    /**\n     * BaseComponent constructor\n     * @param props - The props for the component.\n     * @param context - The context for the component.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function BaseComponent(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        // eslint-disable-next-line deprecation/deprecation\n        _makeAllSafe(_this, BaseComponent.prototype, [\n            'componentDidMount',\n            'shouldComponentUpdate',\n            'getSnapshotBeforeUpdate',\n            'render',\n            'componentDidUpdate',\n            'componentWillUnmount',\n        ]);\n        return _this;\n    }\n    /**\n     * When the component receives props, make sure the componentRef is updated.\n     */\n    BaseComponent.prototype.componentDidUpdate = function (prevProps, prevState) {\n        this._updateComponentRef(prevProps, this.props);\n    };\n    /**\n     * When the component has mounted, update the componentRef.\n     */\n    BaseComponent.prototype.componentDidMount = function () {\n        this._setComponentRef(this.props.componentRef, this);\n    };\n    /**\n     * If we have disposables, dispose them automatically on unmount.\n     */\n    BaseComponent.prototype.componentWillUnmount = function () {\n        this._setComponentRef(this.props.componentRef, null);\n        if (this.__disposables) {\n            for (var i = 0, len = this._disposables.length; i < len; i++) {\n                var disposable = this.__disposables[i];\n                if (disposable.dispose) {\n                    disposable.dispose();\n                }\n            }\n            this.__disposables = null;\n        }\n    };\n    Object.defineProperty(BaseComponent.prototype, \"className\", {\n        /**\n         * Gets the object's class name.\n         */\n        get: function () {\n            if (!this.__className) {\n                var funcNameRegex = /function (.{1,})\\(/;\n                var results = funcNameRegex.exec(this.constructor.toString());\n                this.__className = results && results.length > 1 ? results[1] : '';\n            }\n            return this.__className;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseComponent.prototype, \"_disposables\", {\n        /**\n         * Allows subclasses to push things to this._disposables to be auto disposed.\n         */\n        get: function () {\n            if (!this.__disposables) {\n                this.__disposables = [];\n            }\n            return this.__disposables;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseComponent.prototype, \"_async\", {\n        /**\n         * Gets the async instance associated with the component, created on demand. The async instance gives\n         * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks\n         * will be cleared/ignored automatically after unmounting. The helpers within the async object also\n         * preserve the this pointer so that you don't need to \"bind\" the callbacks.\n         */\n        get: function () {\n            if (!this.__async) {\n                this.__async = new Async_Async(this);\n                this._disposables.push(this.__async);\n            }\n            return this.__async;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseComponent.prototype, \"_events\", {\n        /**\n         * Gets the event group instance assocaited with the component, created on demand. The event instance\n         * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks\n         * will be automatically disconnected after unmounting. The helpers within the events object also\n         * preserve the this reference so that you don't need to \"bind\" the callbacks.\n         */\n        get: function () {\n            if (!this.__events) {\n                this.__events = new EventGroup_EventGroup(this);\n                this._disposables.push(this.__events);\n            }\n            return this.__events;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Helper to return a memoized ref resolver function.\n     * @param refName - Name of the member to assign the ref to.\n     * @returns A function instance keyed from the given refname.\n     * @deprecated Use `createRef` from React.createRef.\n     */\n    BaseComponent.prototype._resolveRef = function (refName) {\n        var _this = this;\n        if (!this.__resolves) {\n            this.__resolves = {};\n        }\n        if (!this.__resolves[refName]) {\n            this.__resolves[refName] = function (ref) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                return (_this[refName] = ref);\n            };\n        }\n        return this.__resolves[refName];\n    };\n    /**\n     * Updates the componentRef (by calling it with \"this\" when necessary.)\n     */\n    BaseComponent.prototype._updateComponentRef = function (currentProps, newProps) {\n        if (newProps === void 0) { newProps = {}; }\n        // currentProps *should* always be defined, but verify that just in case a subclass is manually\n        // calling a lifecycle method with no parameters (which has happened) or other odd usage.\n        if (currentProps && newProps && currentProps.componentRef !== newProps.componentRef) {\n            this._setComponentRef(currentProps.componentRef, null);\n            this._setComponentRef(newProps.componentRef, this);\n        }\n    };\n    /**\n     * Warns when a deprecated props are being used.\n     *\n     * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n     * either null or a replacement prop name.\n     */\n    BaseComponent.prototype._warnDeprecations = function (deprecationMap) {\n        warnDeprecations(this.className, this.props, deprecationMap);\n    };\n    /**\n     * Warns when props which are mutually exclusive with each other are both used.\n     *\n     * @param mutuallyExclusiveMap - The map of mutually exclusive props.\n     */\n    BaseComponent.prototype._warnMutuallyExclusive = function (mutuallyExclusiveMap) {\n        warnMutuallyExclusive(this.className, this.props, mutuallyExclusiveMap);\n    };\n    /**\n     * Warns when props are required if a condition is met.\n     *\n     * @param requiredProps - The name of the props that are required when the condition is met.\n     * @param conditionalPropName - The name of the prop that the condition is based on.\n     * @param condition - Whether the condition is met.\n     */\n    BaseComponent.prototype._warnConditionallyRequiredProps = function (requiredProps, conditionalPropName, condition) {\n        warnConditionallyRequiredProps(this.className, this.props, requiredProps, conditionalPropName, condition);\n    };\n    BaseComponent.prototype._setComponentRef = function (ref, value) {\n        if (!this._skipComponentRefResolution && ref) {\n            if (typeof ref === 'function') {\n                ref(value);\n            }\n            if (typeof ref === 'object') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                ref.current = value;\n            }\n        }\n    };\n    return BaseComponent;\n}(react[\"Component\"]));\n\n/**\n * Helper to override a given method with a wrapper method that can try/catch the original, but also\n * ensures that the BaseComponent's methods are called before the subclass's. This ensures that\n * componentWillUnmount in the base is called and that things in the _disposables array are disposed.\n */\n// eslint-disable-next-line deprecation/deprecation\nfunction _makeAllSafe(obj, prototype, methodNames) {\n    for (var i = 0, len = methodNames.length; i < len; i++) {\n        _makeSafe(obj, prototype, methodNames[i]);\n    }\n}\n// eslint-disable-next-line deprecation/deprecation\nfunction _makeSafe(obj, prototype, methodName) {\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    var classMethod = obj[methodName];\n    var prototypeMethod = prototype[methodName];\n    if (classMethod || prototypeMethod) {\n        obj[methodName] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            /* eslint-enable @typescript-eslint/no-explicit-any */\n            var retVal;\n            if (prototypeMethod) {\n                retVal = prototypeMethod.apply(this, args);\n            }\n            if (classMethod !== prototypeMethod) {\n                retVal = classMethod.apply(this, args);\n            }\n            return retVal;\n        };\n    }\n}\n/**\n * Simple constant function for returning null, used to render empty templates in JSX.\n *\n * @public\n */\nfunction nullRender() {\n    return null;\n}\n//# sourceMappingURL=BaseComponent.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/hoistStatics.js\n/**\n * Allows you to hoist static functions in components.\n * Created for the purpose of fixing broken static functions in classes\n * that utilize decorators.\n *\n * @public\n * @param source - The object where the methods are hoisted from.\n * @param dest - The object to hoist the methods onto.\n * @returns The dest object with methods added\n */\nfunction hoistStatics(source, dest) {\n    for (var name_1 in source) {\n        if (source.hasOwnProperty(name_1)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            dest[name_1] = source[name_1];\n        }\n    }\n    return dest;\n}\n//# sourceMappingURL=hoistStatics.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/customizations/customizable.js\n\n\n\n\n\n\nfunction customizable_customizable(scope, fields, concatStyles) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function customizableFactory(ComposedComponent) {\n        var _a;\n        var resultClass = (_a = /** @class */ (function (_super) {\n                __extends(ComponentWithInjectedProps, _super);\n                function ComponentWithInjectedProps(props) {\n                    var _this = _super.call(this, props) || this;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    _this._styleCache = {};\n                    _this._onSettingChanged = _this._onSettingChanged.bind(_this);\n                    return _this;\n                }\n                ComponentWithInjectedProps.prototype.componentDidMount = function () {\n                    Customizations_Customizations.observe(this._onSettingChanged);\n                };\n                ComponentWithInjectedProps.prototype.componentWillUnmount = function () {\n                    Customizations_Customizations.unobserve(this._onSettingChanged);\n                };\n                ComponentWithInjectedProps.prototype.render = function () {\n                    var _this = this;\n                    return (react[\"createElement\"](CustomizerContext.Consumer, null, function (context) {\n                        var defaultProps = Customizations_Customizations.getSettings(fields, scope, context.customizations);\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        var componentProps = _this.props;\n                        // If defaultProps.styles is a function, evaluate it before calling concatStyleSets\n                        if (defaultProps.styles && typeof defaultProps.styles === 'function') {\n                            defaultProps.styles = defaultProps.styles(__assign(__assign({}, defaultProps), componentProps));\n                        }\n                        // If concatStyles is true and custom styles have been defined compute those styles\n                        if (concatStyles && defaultProps.styles) {\n                            if (_this._styleCache.default !== defaultProps.styles ||\n                                _this._styleCache.component !== componentProps.styles) {\n                                var mergedStyles = concatStyleSets(defaultProps.styles, componentProps.styles);\n                                _this._styleCache.default = defaultProps.styles;\n                                _this._styleCache.component = componentProps.styles;\n                                _this._styleCache.merged = mergedStyles;\n                            }\n                            return react[\"createElement\"](ComposedComponent, __assign({}, defaultProps, componentProps, { styles: _this._styleCache.merged }));\n                        }\n                        return react[\"createElement\"](ComposedComponent, __assign({}, defaultProps, componentProps));\n                    }));\n                };\n                ComponentWithInjectedProps.prototype._onSettingChanged = function () {\n                    this.forceUpdate();\n                };\n                return ComponentWithInjectedProps;\n            }(react[\"Component\"])),\n            _a.displayName = 'Customized' + scope,\n            _a);\n        return hoistStatics(ComposedComponent, resultClass);\n    };\n}\n//# sourceMappingURL=customizable.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/css.js\n/**\n * Concatination helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\nfunction css() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var classes = [];\n    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n        var arg = args_1[_a];\n        if (arg) {\n            if (typeof arg === 'string') {\n                classes.push(arg);\n            }\n            else if (arg.hasOwnProperty('toString') && typeof arg.toString === 'function') {\n                classes.push(arg.toString());\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                for (var key in arg) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    if (arg[key]) {\n                        classes.push(key);\n                    }\n                }\n            }\n        }\n    }\n    return classes.join(' ');\n}\n//# sourceMappingURL=css.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/isVirtualElement.js\n/**\n * Determines whether or not an element has the virtual hierarchy extension.\n *\n * @public\n */\nfunction isVirtualElement(element) {\n    return element && !!element._virtual;\n}\n//# sourceMappingURL=isVirtualElement.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/getVirtualParent.js\n\n/**\n * Gets the virtual parent given the child element, if it exists.\n *\n * @public\n */\nfunction getVirtualParent(child) {\n    var parent;\n    if (child && isVirtualElement(child)) {\n        parent = child._virtual.parent;\n    }\n    return parent;\n}\n//# sourceMappingURL=getVirtualParent.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/getParent.js\n\n/**\n * Gets the element which is the parent of a given element.\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\n * real DOM parent when present.\n *\n * @public\n */\nfunction getParent(child, allowVirtualParents) {\n    if (allowVirtualParents === void 0) { allowVirtualParents = true; }\n    return (child &&\n        ((allowVirtualParents && getVirtualParent(child)) || (child.parentNode && child.parentNode)));\n}\n//# sourceMappingURL=getParent.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/findElementRecursive.js\n\n/**\n * Finds the first parent element where the matchFunction returns true\n * @param element - element to start searching at\n * @param matchFunction - the function that determines if the element is a match\n * @returns the matched element or null no match was found\n */\nfunction findElementRecursive(element, matchFunction) {\n    if (!element || element === document.body) {\n        return null;\n    }\n    return matchFunction(element) ? element : findElementRecursive(getParent(element), matchFunction);\n}\n//# sourceMappingURL=findElementRecursive.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/setPortalAttribute.js\nvar DATA_PORTAL_ATTRIBUTE = 'data-portal-element';\n/**\n * Identify element as a portal by setting an attribute.\n * @param element - Element to mark as a portal.\n */\nfunction setPortalAttribute(element) {\n    element.setAttribute(DATA_PORTAL_ATTRIBUTE, 'true');\n}\n//# sourceMappingURL=setPortalAttribute.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/portalContainsElement.js\n\n\n/**\n * Determine whether a target is within a portal from perspective of root or optional parent.\n * This function only works against portal components that use the setPortalAttribute function.\n * If both parent and child are within the same portal this function will return false.\n * @param target - Element to query portal containment status of.\n * @param parent - Optional parent perspective. Search for containing portal stops at parent\n * (or root if parent is undefined or invalid.)\n */\nfunction portalContainsElement(target, parent) {\n    var elementMatch = findElementRecursive(target, function (testElement) { return parent === testElement || testElement.hasAttribute(DATA_PORTAL_ATTRIBUTE); });\n    return elementMatch !== null && elementMatch.hasAttribute(DATA_PORTAL_ATTRIBUTE);\n}\n//# sourceMappingURL=portalContainsElement.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/appendFunction.js\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Returns a single function which will call each of the given functions in the context of the\n * parent.\n */\nfunction appendFunction(parent) {\n    var functions = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        functions[_i - 1] = arguments[_i];\n    }\n    if (functions.length < 2) {\n        return functions[0];\n    }\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        functions.forEach(function (f) { return f && f.apply(parent, args); });\n    };\n}\n//# sourceMappingURL=appendFunction.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/extendComponent.js\n\n/**\n * Extends a component's lifetime methods by appending new functions to the existing lifetime functions.\n */\nfunction extendComponent(parent, methods) {\n    for (var name_1 in methods) {\n        if (methods.hasOwnProperty(name_1)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            parent[name_1] = appendFunction(parent, parent[name_1], methods[name_1]);\n        }\n    }\n}\n//# sourceMappingURL=extendComponent.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/initializeComponentRef.js\n\n/**\n * Helper to manage componentRef resolution. Internally appends logic to\n * lifetime methods to resolve componentRef to the passed in object.\n *\n * Usage: call initializeComponentRef(this) in the constructor,\n */\nfunction initializeComponentRef(obj) {\n    extendComponent(obj, {\n        componentDidMount: _onMount,\n        componentDidUpdate: _onUpdate,\n        componentWillUnmount: _onUnmount,\n    });\n}\nfunction _onMount() {\n    _setComponentRef(this.props.componentRef, this);\n}\nfunction _onUpdate(prevProps) {\n    if (prevProps.componentRef !== this.props.componentRef) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        _setComponentRef(prevProps.componentRef, null);\n        _setComponentRef(this.props.componentRef, this);\n    }\n}\nfunction _onUnmount() {\n    _setComponentRef(this.props.componentRef, null);\n}\nfunction _setComponentRef(componentRef, value) {\n    if (componentRef) {\n        if (typeof componentRef === 'object') {\n            componentRef.current = value;\n        }\n        else if (typeof componentRef === 'function') {\n            componentRef(value);\n        }\n    }\n}\n//# sourceMappingURL=initializeComponentRef.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/getId.js\n\n\n// Initialize global window id.\nvar CURRENT_ID_PROPERTY = '__currentId__';\nvar DEFAULT_ID_STRING = 'id__';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar getId_global = getWindow() || {};\nif (getId_global[CURRENT_ID_PROPERTY] === undefined) {\n    getId_global[CURRENT_ID_PROPERTY] = 0;\n}\nvar getId_initializedStylesheetResets = false;\n/**\n * Generates a unique id in the global scope (this spans across duplicate copies of the same library.)\n *\n * @public\n */\nfunction getId(prefix) {\n    if (!getId_initializedStylesheetResets) {\n        // Configure ids to reset on stylesheet resets.\n        var stylesheet = Stylesheet_Stylesheet.getInstance();\n        if (stylesheet && stylesheet.onReset) {\n            stylesheet.onReset(resetIds);\n        }\n        getId_initializedStylesheetResets = true;\n    }\n    var index = getId_global[CURRENT_ID_PROPERTY]++;\n    return (prefix || DEFAULT_ID_STRING) + index;\n}\n/**\n * Resets id counter to an (optional) number.\n *\n * @public\n */\nfunction resetIds(counter) {\n    if (counter === void 0) { counter = 0; }\n    getId_global[CURRENT_ID_PROPERTY] = counter;\n}\n//# sourceMappingURL=getId.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/keyboard.js\nvar keyboard_a;\n\nvar DirectionalKeyCodes = (keyboard_a = {},\n    keyboard_a[KeyCodes.up] = 1,\n    keyboard_a[KeyCodes.down] = 1,\n    keyboard_a[KeyCodes.left] = 1,\n    keyboard_a[KeyCodes.right] = 1,\n    keyboard_a[KeyCodes.home] = 1,\n    keyboard_a[KeyCodes.end] = 1,\n    keyboard_a[KeyCodes.tab] = 1,\n    keyboard_a[KeyCodes.pageUp] = 1,\n    keyboard_a[KeyCodes.pageDown] = 1,\n    keyboard_a);\n/**\n * Returns true if the keycode is a directional keyboard key.\n */\nfunction isDirectionalKeyCode(which) {\n    return !!DirectionalKeyCodes[which];\n}\n/**\n * Adds a keycode to the list of keys that, when pressed, should cause the focus outlines to be visible.\n * This can be used to add global shortcut keys that directionally move from section to section within\n * an app or between focus trap zones.\n */\nfunction addDirectionalKeyCode(which) {\n    DirectionalKeyCodes[which] = 1;\n}\n//# sourceMappingURL=keyboard.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/useFocusRects.js\n\n\n\n\n/**\n * Counter for mounted component that uses focus rectangle.\n * We want to cleanup the listners before last component that uses focus rectangle unmounts.\n */\nvar mountCounters = new WeakMap();\nfunction setMountCounters(key, delta) {\n    var newValue;\n    var currValue = mountCounters.get(key);\n    if (currValue) {\n        newValue = currValue + delta;\n    }\n    else {\n        newValue = 1;\n    }\n    mountCounters.set(key, newValue);\n    return newValue;\n}\n/**\n * Initializes the logic which:\n *\n * 1. Subscribes keydown and mousedown events. (It will only do it once per window,\n *    so it's safe to call this method multiple times.)\n * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname\n *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.\n * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the\n *    document body, removes the 'ms-Fabric--isFocusVisible' classname.\n *\n * This logic allows components on the page to conditionally render focus treatments based on\n * the existence of global classnames, which simplifies logic overall.\n *\n * @param rootRef - A Ref object. Focus rectangle can be applied on itself and all its children.\n */\nfunction useFocusRects(rootRef) {\n    react[\"useEffect\"](function () {\n        var _a, _b;\n        var win = getWindow((_a = rootRef) === null || _a === void 0 ? void 0 : _a.current);\n        if (!win || ((_b = win.FabricConfig) === null || _b === void 0 ? void 0 : _b.disableFocusRects) === true) {\n            return undefined;\n        }\n        var count = setMountCounters(win, 1);\n        if (count <= 1) {\n            win.addEventListener('mousedown', _onMouseDown, true);\n            win.addEventListener('pointerdown', _onPointerDown, true);\n            win.addEventListener('keydown', _onKeyDown, true);\n        }\n        return function () {\n            var _a;\n            if (!win || ((_a = win.FabricConfig) === null || _a === void 0 ? void 0 : _a.disableFocusRects) === true) {\n                return;\n            }\n            count = setMountCounters(win, -1);\n            if (count === 0) {\n                win.removeEventListener('mousedown', _onMouseDown, true);\n                win.removeEventListener('pointerdown', _onPointerDown, true);\n                win.removeEventListener('keydown', _onKeyDown, true);\n            }\n        };\n    }, [rootRef]);\n}\n/**\n * Function Component wrapper which enables calling `useFocusRects` hook.\n * Renders nothing.\n */\nvar FocusRects = function (props) {\n    useFocusRects(props.rootRef);\n    return null;\n};\nfunction _onMouseDown(ev) {\n    setFocusVisibility(false, ev.target);\n}\nfunction _onPointerDown(ev) {\n    if (ev.pointerType !== 'mouse') {\n        setFocusVisibility(false, ev.target);\n    }\n}\nfunction _onKeyDown(ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (isDirectionalKeyCode(ev.which)) {\n        setFocusVisibility(true, ev.target);\n    }\n}\n//# sourceMappingURL=useFocusRects.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/aria.js\n/**\n * ARIA helper to concatenate attributes, returning undefined if all attributes\n * are undefined. (Empty strings are not a valid ARIA attribute value.)\n *\n * @param ariaAttributes - ARIA attributes to merge\n */\nfunction mergeAriaAttributeValues() {\n    var ariaAttributes = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        ariaAttributes[_i] = arguments[_i];\n    }\n    var mergedAttribute = ariaAttributes\n        .filter(function (arg) { return arg; })\n        .join(' ')\n        .trim();\n    return mergedAttribute === '' ? undefined : mergedAttribute;\n}\n//# sourceMappingURL=aria.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/customizations/useCustomizationSettings.js\n\n\n\n/**\n * Hook to get Customizations settings from Customizations singleton or CustomizerContext.\n * It will trigger component state update on settings change observed.\n */\nfunction useCustomizationSettings(properties, scopeName) {\n    var forceUpdate = useForceUpdate();\n    var customizations = react[\"useContext\"](CustomizerContext).customizations;\n    var inCustomizerContext = customizations.inCustomizerContext;\n    react[\"useEffect\"](function () {\n        if (!inCustomizerContext) {\n            Customizations_Customizations.observe(forceUpdate);\n        }\n        return function () {\n            if (!inCustomizerContext) {\n                Customizations_Customizations.unobserve(forceUpdate);\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps -- exclude forceUpdate\n    }, [inCustomizerContext]);\n    return Customizations_Customizations.getSettings(properties, scopeName, customizations);\n}\nfunction useForceUpdate() {\n    var _a = react[\"useState\"](0), setValue = _a[1];\n    return function () { return setValue(function (value) { return ++value; }); };\n}\n//# sourceMappingURL=useCustomizationSettings.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/styled.js\n\n\n\n\nvar styled_DefaultFields = ['theme', 'styles'];\nfunction styled(Component, baseStyles, getProps, customizable, pure) {\n    customizable = customizable || { scope: '', fields: undefined };\n    var scope = customizable.scope, _a = customizable.fields, fields = _a === void 0 ? styled_DefaultFields : _a;\n    var Wrapped = react[\"forwardRef\"](function (props, forwardedRef) {\n        var styles = react[\"useRef\"]();\n        var settings = useCustomizationSettings(fields, scope);\n        var customizedStyles = settings.styles, dir = settings.dir, rest = __rest(settings, [\"styles\", \"dir\"]);\n        var additionalProps = getProps ? getProps(props) : undefined;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var cache = (styles.current && styles.current.__cachedInputs__) || [];\n        if (!styles.current || customizedStyles !== cache[1] || props.styles !== cache[2]) {\n            // Using styled components as the Component arg will result in nested styling arrays.\n            var concatenatedStyles = function (styleProps) {\n                return concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, props.styles);\n            };\n            // The __cachedInputs__ array is attached to the function and consumed by the\n            // classNamesFunction as a list of keys to include for memoizing classnames.\n            concatenatedStyles.__cachedInputs__ = [\n                baseStyles,\n                customizedStyles,\n                props.styles,\n            ];\n            concatenatedStyles.__noStyleOverride__ =\n                !customizedStyles && !props.styles;\n            styles.current = concatenatedStyles;\n        }\n        return react[\"createElement\"](Component, __assign({ ref: forwardedRef }, rest, additionalProps, props, { styles: styles.current }));\n    });\n    // Function.prototype.name is an ES6 feature, so the cast to any is required until we're\n    // able to drop IE 11 support and compile with ES6 libs\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Wrapped.displayName = \"Styled\" + (Component.displayName || Component.name);\n    // This preserves backwards compatibility.\n    return pure ? react[\"memo\"](Wrapped) : Wrapped;\n}\n//# sourceMappingURL=styled.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Icon/Icon.types.js\n/**\n * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\n * {@docCategory Icon}\n */\nvar IconType;\n(function (IconType) {\n    /**\n     * Render using the fabric icon font.\n     * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\n     */\n    IconType[IconType[\"default\"] = 0] = \"default\";\n    /**\n     * Render using an image, where imageProps would be used.\n     * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\n     */\n    IconType[IconType[\"image\"] = 1] = \"image\";\n    /**\n     * Deprecated, use `default`.\n     * @deprecated Use `default`.\n     */\n    IconType[IconType[\"Default\"] = 100000] = \"Default\";\n    /**\n     * Deprecated, use `image`.\n     * @deprecated Use `image`.\n     */\n    IconType[IconType[\"Image\"] = 100001] = \"Image\";\n})(IconType || (IconType = {}));\n//# sourceMappingURL=Icon.types.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/classNamesFunction.js\n\n\n\nvar MAX_CACHE_COUNT = 50;\nvar DEFAULT_SPECIFICITY_MULTIPLIER = 5;\nvar _memoizedClassNames = 0;\nvar classNamesFunction_stylesheet = Stylesheet_Stylesheet.getInstance();\nif (classNamesFunction_stylesheet && classNamesFunction_stylesheet.onReset) {\n    classNamesFunction_stylesheet.onReset(function () { return _memoizedClassNames++; });\n}\n// Note that because of the caching nature within the classNames memoization,\n// I've disabled this rule to simply be able to work with any types.\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// This represents a prop we attach to each Map to indicate the cached return value\n// associated with the graph node.\nvar classNamesFunction_retVal = '__retval__';\n/**\n * Creates a getClassNames function which calls getStyles given the props, and injects them\n * into mergeStyleSets.\n *\n * Note that the props you pass in on every render should be in the same order and\n * immutable (numbers, strings, and booleans). This will allow the results to be memoized. Violating\n * these will cause extra recalcs to occur.\n */\nfunction classNamesFunction(options) {\n    // We build a trie where each node is a Map. The map entry key represents an argument\n    // value, and the entry value is another node (Map). Each node has a `__retval__`\n    // property which is used to hold the cached response.\n    if (options === void 0) { options = {}; }\n    // To derive the response, we can simply ensure the arguments are added or already\n    // exist in the trie. At the last node, if there is a `__retval__` we return that. Otherwise\n    // we call the `getStyles` api to evaluate, cache on the property, and return that.\n    var map = new Map();\n    var styleCalcCount = 0;\n    var getClassNamesCount = 0;\n    var currentMemoizedClassNames = _memoizedClassNames;\n    var getClassNames = function (styleFunctionOrObject, styleProps) {\n        if (styleProps === void 0) { styleProps = {}; }\n        var _a, _b;\n        // If useStaticStyles is true, styleFunctionOrObject returns slot to classname mappings.\n        // If there is also no style overrides, we can skip merge styles completely and\n        // simply return the result from the style funcion.\n        if (options.useStaticStyles &&\n            typeof styleFunctionOrObject === 'function' &&\n            styleFunctionOrObject.__noStyleOverride__) {\n            return styleFunctionOrObject(styleProps);\n        }\n        getClassNamesCount++;\n        var current = map;\n        var theme = styleProps.theme;\n        var rtl = theme && theme.rtl !== undefined ? theme.rtl : rtl_getRTL();\n        var disableCaching = options.disableCaching;\n        // On reset of our stylesheet, reset memoized cache.\n        if (currentMemoizedClassNames !== _memoizedClassNames) {\n            currentMemoizedClassNames = _memoizedClassNames;\n            map = new Map();\n            styleCalcCount = 0;\n        }\n        if (!options.disableCaching) {\n            current = _traverseMap(map, styleFunctionOrObject);\n            current = _traverseMap(current, styleProps);\n        }\n        if (disableCaching || !current[classNamesFunction_retVal]) {\n            if (styleFunctionOrObject === undefined) {\n                current[classNamesFunction_retVal] = {};\n            }\n            else {\n                current[classNamesFunction_retVal] = mergeCssSets([\n                    (typeof styleFunctionOrObject === 'function'\n                        ? styleFunctionOrObject(styleProps)\n                        : styleFunctionOrObject),\n                ], { rtl: !!rtl, specificityMultiplier: options.useStaticStyles ? DEFAULT_SPECIFICITY_MULTIPLIER : undefined });\n            }\n            if (!disableCaching) {\n                styleCalcCount++;\n            }\n        }\n        if (styleCalcCount > (options.cacheSize || MAX_CACHE_COUNT)) {\n            var win = getWindow();\n            if ((_b = (_a = win) === null || _a === void 0 ? void 0 : _a.FabricConfig) === null || _b === void 0 ? void 0 : _b.enableClassNameCacheFullWarning) {\n                // eslint-disable-next-line no-console\n                console.warn(\"Styles are being recalculated too frequently. Cache miss rate is \" + styleCalcCount + \"/\" + getClassNamesCount + \".\");\n                // eslint-disable-next-line no-console\n                console.trace();\n            }\n            map.clear();\n            styleCalcCount = 0;\n            // Mutate the options passed in, that's all we can do.\n            options.disableCaching = true;\n        }\n        // Note: the retVal is an attached property on the Map; not a key in the Map. We use this attached property to\n        // cache the return value for this branch of the graph.\n        return current[classNamesFunction_retVal];\n    };\n    return getClassNames;\n}\nfunction _traverseEdge(current, value) {\n    value = _normalizeValue(value);\n    if (!current.has(value)) {\n        current.set(value, new Map());\n    }\n    return current.get(value);\n}\nfunction _traverseMap(current, inputs) {\n    if (typeof inputs === 'function') {\n        var cachedInputsFromStyled = inputs.__cachedInputs__;\n        if (cachedInputsFromStyled) {\n            // The styled helper will generate the styles function and will attach the cached\n            // inputs (consisting of the default styles, customzied styles, and user provided styles.)\n            // These should be used as cache keys for deriving the memoized value.\n            for (var _i = 0, _a = inputs.__cachedInputs__; _i < _a.length; _i++) {\n                var input = _a[_i];\n                current = _traverseEdge(current, input);\n            }\n        }\n        else {\n            current = _traverseEdge(current, inputs);\n        }\n    }\n    else if (typeof inputs === 'object') {\n        for (var propName in inputs) {\n            if (inputs.hasOwnProperty(propName)) {\n                current = _traverseEdge(current, inputs[propName]);\n            }\n        }\n    }\n    return current;\n}\nfunction _normalizeValue(value) {\n    switch (value) {\n        case undefined:\n            return '__undefined__';\n        case null:\n            return '__null__';\n        default:\n            return value;\n    }\n}\n//# sourceMappingURL=classNamesFunction.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Image/Image.types.js\n/**\n * The possible methods that can be used to fit the image.\n * {@docCategory Image}\n */\nvar ImageFit;\n(function (ImageFit) {\n    /**\n     * The image is not scaled. The image is centered and cropped within the content box.\n     */\n    ImageFit[ImageFit[\"center\"] = 0] = \"center\";\n    /**\n     * The image is scaled to maintain its aspect ratio while being fully contained within the frame. The image will\n     * be centered horizontally and vertically within the frame. The space in the top and bottom or in the sides of\n     * the frame will be empty depending on the difference in aspect ratio between the image and the frame.\n     */\n    ImageFit[ImageFit[\"contain\"] = 1] = \"contain\";\n    /**\n     * The image is scaled to maintain its aspect ratio while filling the frame. Portions of the image will be cropped\n     * from the top and bottom, or the sides, depending on the difference in aspect ratio between the image and the frame.\n     */\n    ImageFit[ImageFit[\"cover\"] = 2] = \"cover\";\n    /**\n     * Neither the image nor the frame are scaled. If their sizes do not match, the image will either be cropped or the\n     * frame will have empty space.\n     */\n    ImageFit[ImageFit[\"none\"] = 3] = \"none\";\n    /**\n     * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will\n     * behave as ImageFit.center if the image's natural height or width is less than the Image frame's height or width,\n     * but if both natural height and width are larger than the frame it will behave as ImageFit.cover.\n     */\n    ImageFit[ImageFit[\"centerCover\"] = 4] = \"centerCover\";\n    /**\n     * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will\n     * behave as ImageFit.center if the image's natural height and width is less than the Image frame's height and width,\n     * but if either natural height or width are larger than the frame it will behave as ImageFit.contain.\n     */\n    ImageFit[ImageFit[\"centerContain\"] = 5] = \"centerContain\";\n})(ImageFit || (ImageFit = {}));\n/**\n * The cover style to be used on the image\n * {@docCategory Image}\n */\nvar ImageCoverStyle;\n(function (ImageCoverStyle) {\n    /**\n     * The image will be shown at 100% height of container and the width will be scaled accordingly\n     */\n    ImageCoverStyle[ImageCoverStyle[\"landscape\"] = 0] = \"landscape\";\n    /**\n     * The image will be shown at 100% width of container and the height will be scaled accordingly\n     */\n    ImageCoverStyle[ImageCoverStyle[\"portrait\"] = 1] = \"portrait\";\n})(ImageCoverStyle || (ImageCoverStyle = {}));\n/**\n * {@docCategory Image}\n */\nvar ImageLoadState;\n(function (ImageLoadState) {\n    /**\n     * The image has not yet been loaded, and there is no error yet.\n     */\n    ImageLoadState[ImageLoadState[\"notLoaded\"] = 0] = \"notLoaded\";\n    /**\n     * The image has been loaded successfully.\n     */\n    ImageLoadState[ImageLoadState[\"loaded\"] = 1] = \"loaded\";\n    /**\n     * An error has been encountered while loading the image.\n     */\n    ImageLoadState[ImageLoadState[\"error\"] = 2] = \"error\";\n    /**\n     * Deprecated at v1.3.6, to replace the src in case of errors, use `onLoadingStateChange` instead\n     * and rerender the Image with a difference src.\n     * @deprecated Use `onLoadingStateChange` instead\n     * and rerender the Image with a difference src.\n     */\n    ImageLoadState[ImageLoadState[\"errorLoaded\"] = 3] = \"errorLoaded\";\n})(ImageLoadState || (ImageLoadState = {}));\n//# sourceMappingURL=Image.types.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Image/Image.base.js\n\n\n\n\nvar Image_base_getClassNames = classNamesFunction();\nvar KEY_PREFIX = 'fabricImage';\nvar Image_base_ImageBase = /** @class */ (function (_super) {\n    __extends(ImageBase, _super);\n    function ImageBase(props) {\n        var _this = _super.call(this, props) || this;\n        // Make an initial assumption about the image layout until we can\n        // check the rendered element. The value here only takes effect when\n        // shouldStartVisible is true.\n        _this._coverStyle = ImageCoverStyle.portrait;\n        _this._imageElement = react[\"createRef\"]();\n        _this._frameElement = react[\"createRef\"]();\n        _this._onImageLoaded = function (ev) {\n            var _a = _this.props, src = _a.src, onLoad = _a.onLoad;\n            if (onLoad) {\n                onLoad(ev);\n            }\n            _this._computeCoverStyle(_this.props);\n            if (src) {\n                _this.setState({\n                    loadState: ImageLoadState.loaded,\n                });\n            }\n        };\n        _this._onImageError = function (ev) {\n            if (_this.props.onError) {\n                _this.props.onError(ev);\n            }\n            _this.setState({\n                loadState: ImageLoadState.error,\n            });\n        };\n        _this.state = {\n            loadState: ImageLoadState.notLoaded,\n        };\n        return _this;\n    }\n    ImageBase.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n        if (nextProps.src !== this.props.src) {\n            this.setState({\n                loadState: ImageLoadState.notLoaded,\n            });\n        }\n        else if (this.state.loadState === ImageLoadState.loaded) {\n            this._computeCoverStyle(nextProps);\n        }\n    };\n    ImageBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n        this._checkImageLoaded();\n        if (this.props.onLoadingStateChange && prevState.loadState !== this.state.loadState) {\n            this.props.onLoadingStateChange(this.state.loadState);\n        }\n    };\n    ImageBase.prototype.render = function () {\n        var imageProps = getNativeProps(this.props, imgProperties, [\n            'width',\n            'height',\n        ]);\n        var _a = this.props, src = _a.src, alt = _a.alt, width = _a.width, height = _a.height, shouldFadeIn = _a.shouldFadeIn, shouldStartVisible = _a.shouldStartVisible, className = _a.className, imageFit = _a.imageFit, role = _a.role, maximizeFrame = _a.maximizeFrame, styles = _a.styles, theme = _a.theme;\n        var loadState = this.state.loadState;\n        var coverStyle = this.props.coverStyle !== undefined ? this.props.coverStyle : this._coverStyle;\n        var classNames = Image_base_getClassNames(styles, {\n            theme: theme,\n            className: className,\n            width: width,\n            height: height,\n            maximizeFrame: maximizeFrame,\n            shouldFadeIn: shouldFadeIn,\n            shouldStartVisible: shouldStartVisible,\n            isLoaded: loadState === ImageLoadState.loaded ||\n                (loadState === ImageLoadState.notLoaded && this.props.shouldStartVisible),\n            isLandscape: coverStyle === ImageCoverStyle.landscape,\n            isCenter: imageFit === ImageFit.center,\n            isCenterContain: imageFit === ImageFit.centerContain,\n            isCenterCover: imageFit === ImageFit.centerCover,\n            isContain: imageFit === ImageFit.contain,\n            isCover: imageFit === ImageFit.cover,\n            isNone: imageFit === ImageFit.none,\n            isError: loadState === ImageLoadState.error,\n            isNotImageFit: imageFit === undefined,\n        });\n        // If image dimensions aren't specified, the natural size of the image is used.\n        return (react[\"createElement\"](\"div\", { className: classNames.root, style: { width: width, height: height }, ref: this._frameElement },\n            react[\"createElement\"](\"img\", __assign({}, imageProps, { onLoad: this._onImageLoaded, onError: this._onImageError, key: KEY_PREFIX + this.props.src || '', className: classNames.image, ref: this._imageElement, src: src, alt: alt, role: role }))));\n    };\n    ImageBase.prototype._checkImageLoaded = function () {\n        var src = this.props.src;\n        var loadState = this.state.loadState;\n        if (loadState === ImageLoadState.notLoaded) {\n            // testing if naturalWidth and naturalHeight are greater than zero is better than checking\n            // .complete, because .complete will also be set to true if the image breaks. However,\n            // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\n            // to checking .complete for these images.\n            var isLoaded = this._imageElement.current\n                ? (src && this._imageElement.current.naturalWidth > 0 && this._imageElement.current.naturalHeight > 0) ||\n                    (this._imageElement.current.complete && ImageBase._svgRegex.test(src))\n                : false;\n            if (isLoaded) {\n                this._computeCoverStyle(this.props);\n                this.setState({\n                    loadState: ImageLoadState.loaded,\n                });\n            }\n        }\n    };\n    ImageBase.prototype._computeCoverStyle = function (props) {\n        var imageFit = props.imageFit, width = props.width, height = props.height;\n        // Do not compute cover style if it was already specified in props\n        if ((imageFit === ImageFit.cover ||\n            imageFit === ImageFit.contain ||\n            imageFit === ImageFit.centerContain ||\n            imageFit === ImageFit.centerCover) &&\n            this.props.coverStyle === undefined &&\n            this._imageElement.current &&\n            this._frameElement.current) {\n            // Determine the desired ratio using the width and height props.\n            // If those props aren't available, measure measure the frame.\n            var desiredRatio = void 0;\n            if (typeof width === 'number' &&\n                typeof height === 'number' &&\n                imageFit !== ImageFit.centerContain &&\n                imageFit !== ImageFit.centerCover) {\n                desiredRatio = width / height;\n            }\n            else {\n                desiredRatio = this._frameElement.current.clientWidth / this._frameElement.current.clientHeight;\n            }\n            // Examine the source image to determine its original ratio.\n            var naturalRatio = this._imageElement.current.naturalWidth / this._imageElement.current.naturalHeight;\n            // Should we crop from the top or the sides?\n            if (naturalRatio > desiredRatio) {\n                this._coverStyle = ImageCoverStyle.landscape;\n            }\n            else {\n                this._coverStyle = ImageCoverStyle.portrait;\n            }\n        }\n    };\n    ImageBase.defaultProps = {\n        shouldFadeIn: true,\n    };\n    ImageBase._svgRegex = /\\.svg$/i;\n    return ImageBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=Image.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Image/Image.styles.js\n\n\nvar Image_styles_GlobalClassNames = {\n    root: 'ms-Image',\n    rootMaximizeFrame: 'ms-Image--maximizeFrame',\n    image: 'ms-Image-image',\n    imageCenter: 'ms-Image-image--center',\n    imageContain: 'ms-Image-image--contain',\n    imageCover: 'ms-Image-image--cover',\n    imageCenterContain: 'ms-Image-image--centerContain',\n    imageCenterCover: 'ms-Image-image--centerCover',\n    imageNone: 'ms-Image-image--none',\n    imageLandscape: 'ms-Image-image--landscape',\n    imagePortrait: 'ms-Image-image--portrait',\n};\nvar Image_styles_getStyles = function (props) {\n    var className = props.className, width = props.width, height = props.height, maximizeFrame = props.maximizeFrame, isLoaded = props.isLoaded, shouldFadeIn = props.shouldFadeIn, shouldStartVisible = props.shouldStartVisible, isLandscape = props.isLandscape, isCenter = props.isCenter, isContain = props.isContain, isCover = props.isCover, isCenterContain = props.isCenterContain, isCenterCover = props.isCenterCover, isNone = props.isNone, isError = props.isError, isNotImageFit = props.isNotImageFit, theme = props.theme;\n    var classNames = getGlobalClassNames(Image_styles_GlobalClassNames, theme);\n    var ImageFitStyles = {\n        position: 'absolute',\n        left: '50% /* @noflip */',\n        top: '50%',\n        transform: 'translate(-50%,-50%)',\n    };\n    // Cut the mustard using msMaxTouchPoints to detect IE11 which does not support CSS object-fit\n    var window = getWindow();\n    var supportsObjectFit = window !== undefined && window.navigator.msMaxTouchPoints === undefined;\n    var fallbackObjectFitStyles = (isContain && isLandscape) || (isCover && !isLandscape)\n        ? { width: '100%', height: 'auto' }\n        : { width: 'auto', height: '100%' };\n    return {\n        root: [\n            classNames.root,\n            theme.fonts.medium,\n            {\n                overflow: 'hidden',\n            },\n            maximizeFrame && [\n                classNames.rootMaximizeFrame,\n                {\n                    height: '100%',\n                    width: '100%',\n                },\n            ],\n            isLoaded && shouldFadeIn && !shouldStartVisible && AnimationClassNames.fadeIn400,\n            (isCenter || isContain || isCover || isCenterContain || isCenterCover) && {\n                position: 'relative',\n            },\n            className,\n        ],\n        image: [\n            classNames.image,\n            {\n                display: 'block',\n                opacity: 0,\n            },\n            isLoaded && [\n                'is-loaded',\n                {\n                    opacity: 1,\n                },\n            ],\n            isCenter && [classNames.imageCenter, ImageFitStyles],\n            isContain && [\n                classNames.imageContain,\n                supportsObjectFit && {\n                    width: '100%',\n                    height: '100%',\n                    objectFit: 'contain',\n                },\n                !supportsObjectFit && fallbackObjectFitStyles,\n                ImageFitStyles,\n            ],\n            isCover && [\n                classNames.imageCover,\n                supportsObjectFit && {\n                    width: '100%',\n                    height: '100%',\n                    objectFit: 'cover',\n                },\n                !supportsObjectFit && fallbackObjectFitStyles,\n                ImageFitStyles,\n            ],\n            isCenterContain && [\n                classNames.imageCenterContain,\n                isLandscape && {\n                    maxWidth: '100%',\n                },\n                !isLandscape && {\n                    maxHeight: '100%',\n                },\n                ImageFitStyles,\n            ],\n            isCenterCover && [\n                classNames.imageCenterCover,\n                isLandscape && {\n                    maxHeight: '100%',\n                },\n                !isLandscape && {\n                    maxWidth: '100%',\n                },\n                ImageFitStyles,\n            ],\n            isNone && [\n                classNames.imageNone,\n                {\n                    width: 'auto',\n                    height: 'auto',\n                },\n            ],\n            isNotImageFit && [\n                !!width &&\n                    !height && {\n                    height: 'auto',\n                    width: '100%',\n                },\n                !width &&\n                    !!height && {\n                    height: '100%',\n                    width: 'auto',\n                },\n                !!width &&\n                    !!height && {\n                    height: '100%',\n                    width: '100%',\n                },\n            ],\n            isLandscape && classNames.imageLandscape,\n            !isLandscape && classNames.imagePortrait,\n            !isLoaded && 'is-notLoaded',\n            shouldFadeIn && 'is-fadeIn',\n            isError && 'is-error',\n        ],\n    };\n};\n//# sourceMappingURL=Image.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Image/Image.js\n\n\n\nvar Image = styled(Image_base_ImageBase, Image_styles_getStyles, undefined, {\n    scope: 'Image',\n}, true);\n//# sourceMappingURL=Image.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Icon/Icon.styles.js\n\n/** Class names used in themeable and non-themeable Icon components */\nvar Icon_styles_classNames = mergeStyleSets({\n    root: {\n        display: 'inline-block',\n    },\n    placeholder: [\n        'ms-Icon-placeHolder',\n        {\n            width: '1em',\n        },\n    ],\n    image: [\n        'ms-Icon-imageContainer',\n        {\n            overflow: 'hidden',\n        },\n    ],\n});\n/** Class name used only in non-themeable Icon components */\nvar MS_ICON = 'ms-Icon';\nvar Icon_styles_getStyles = function (props) {\n    var className = props.className, iconClassName = props.iconClassName, isPlaceholder = props.isPlaceholder, isImage = props.isImage, styles = props.styles;\n    return {\n        root: [\n            isPlaceholder && Icon_styles_classNames.placeholder,\n            Icon_styles_classNames.root,\n            isImage && Icon_styles_classNames.image,\n            iconClassName,\n            className,\n            styles && styles.root,\n            // eslint-disable-next-line deprecation/deprecation\n            styles && styles.imageContainer,\n        ],\n    };\n};\n//# sourceMappingURL=Icon.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Icon/FontIcon.js\n\n\n\n\n\nvar getIconContent = memoizeFunction(function (iconName) {\n    var _a = getIcon(iconName) || {\n        subset: {},\n        code: undefined,\n    }, code = _a.code, subset = _a.subset;\n    if (!code) {\n        return null;\n    }\n    return {\n        children: code,\n        iconClassName: subset.className,\n        fontFamily: subset.fontFace && subset.fontFace.fontFamily,\n    };\n}, undefined, true /*ignoreNullOrUndefinedResult */);\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nvar FontIcon = function (props) {\n    var iconName = props.iconName, className = props.className, _a = props.style, style = _a === void 0 ? {} : _a;\n    var iconContent = getIconContent(iconName) || {};\n    var iconClassName = iconContent.iconClassName, children = iconContent.children, fontFamily = iconContent.fontFamily;\n    var nativeProps = getNativeProps(props, htmlElementProperties);\n    var containerProps = props['aria-label']\n        ? {}\n        : {\n            role: 'presentation',\n            'aria-hidden': true,\n        };\n    return (react[\"createElement\"](\"i\", __assign({ \"data-icon-name\": iconName }, containerProps, nativeProps, { className: css(MS_ICON, Icon_styles_classNames.root, iconClassName, !iconName && Icon_styles_classNames.placeholder, className), \n        // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n        // https://github.com/microsoft/fluentui/issues/10449\n        style: __assign({ fontFamily: fontFamily }, style) }), children));\n};\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nvar getFontIcon = memoizeFunction(function (iconName, className, ariaLabel) {\n    return FontIcon({ iconName: iconName, className: className, 'aria-label': ariaLabel });\n});\n//# sourceMappingURL=FontIcon.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Icon/Icon.base.js\n\n\n\n\n\n\n\nvar Icon_base_getClassNames = classNamesFunction({\n    // Icon is used a lot by other components.\n    // It's likely to see expected cases which pass different className to the Icon.\n    // Therefore setting a larger cache size.\n    cacheSize: 100,\n});\nvar Icon_base_IconBase = /** @class */ (function (_super) {\n    __extends(IconBase, _super);\n    function IconBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._onImageLoadingStateChange = function (state) {\n            if (_this.props.imageProps && _this.props.imageProps.onLoadingStateChange) {\n                _this.props.imageProps.onLoadingStateChange(state);\n            }\n            if (state === ImageLoadState.error) {\n                _this.setState({ imageLoadError: true });\n            }\n        };\n        _this.state = {\n            imageLoadError: false,\n        };\n        return _this;\n    }\n    IconBase.prototype.render = function () {\n        var _a = this.props, children = _a.children, className = _a.className, styles = _a.styles, iconName = _a.iconName, imageErrorAs = _a.imageErrorAs, theme = _a.theme;\n        var isPlaceholder = typeof iconName === 'string' && iconName.length === 0;\n        var isImage = \n        // eslint-disable-next-line deprecation/deprecation\n        !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image;\n        var iconContent = getIconContent(iconName) || {};\n        var iconClassName = iconContent.iconClassName, iconContentChildren = iconContent.children;\n        var classNames = Icon_base_getClassNames(styles, {\n            theme: theme,\n            className: className,\n            iconClassName: iconClassName,\n            isImage: isImage,\n            isPlaceholder: isPlaceholder,\n        });\n        var RootType = isImage ? 'span' : 'i';\n        var nativeProps = getNativeProps(this.props, htmlElementProperties, [\n            'aria-label',\n        ]);\n        var imageLoadError = this.state.imageLoadError;\n        var imageProps = __assign(__assign({}, this.props.imageProps), { onLoadingStateChange: this._onImageLoadingStateChange });\n        var ImageType = (imageLoadError && imageErrorAs) || Image;\n        // eslint-disable-next-line deprecation/deprecation\n        var ariaLabel = this.props['aria-label'] || this.props.ariaLabel;\n        var containerProps = ariaLabel\n            ? {\n                'aria-label': ariaLabel,\n            }\n            : {\n                'aria-hidden': this.props['aria-labelledby'] || imageProps['aria-labelledby'] ? false : true,\n            };\n        return (react[\"createElement\"](RootType, __assign({ \"data-icon-name\": iconName }, containerProps, nativeProps, { className: classNames.root }), isImage ? react[\"createElement\"](ImageType, __assign({}, imageProps)) : children || iconContentChildren));\n    };\n    return IconBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=Icon.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Icon/Icon.js\n\n\n\n/**\n * Legacy Icon component which can be targeted by customization. It's recommended to use `FontIcon`\n * or `ImageIcon` instead, especially in scenarios where rendering performance is important.\n * {@docCategory Icon}\n */\nvar Icon = styled(Icon_base_IconBase, Icon_styles_getStyles, undefined, {\n    scope: 'Icon',\n}, true);\n//# sourceMappingURL=Icon.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Icon/ImageIcon.js\n\n\n\n\n\n/**\n * Fast icon component which only supports images (not font glyphs) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nvar ImageIcon = function (props) {\n    var className = props.className, imageProps = props.imageProps;\n    var nativeProps = getNativeProps(props, htmlElementProperties);\n    var containerProps = props['aria-label']\n        ? {}\n        : {\n            role: 'presentation',\n            'aria-hidden': imageProps.alt || imageProps['aria-labelledby'] ? false : true,\n        };\n    return (react[\"createElement\"](\"div\", __assign({}, containerProps, nativeProps, { className: css(MS_ICON, Icon_styles_classNames.root, Icon_styles_classNames.image, className) }),\n        react[\"createElement\"](Image, __assign({}, imageProps))));\n};\n//# sourceMappingURL=ImageIcon.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/common/DirectionalHint.js\nvar DirectionalHint = {\n    /**\n     * Appear above the target element, with the left edges of the callout and target aligning.\n     */\n    topLeftEdge: 0,\n    /**\n     * Appear above the target element, with the centers of the callout and target aligning.\n     */\n    topCenter: 1,\n    /**\n     * Appear above the target element, with the right edges of the callout and target aligning.\n     */\n    topRightEdge: 2,\n    /**\n     * Appear above the target element, aligning with the target element such that the callout tends toward\n     * the center of the screen.\n     */\n    topAutoEdge: 3,\n    /**\n     * Appear below the target element, with the left edges of the callout and target aligning.\n     */\n    bottomLeftEdge: 4,\n    /**\n     * Appear below the target element, with the centers of the callout and target aligning.\n     */\n    bottomCenter: 5,\n    /**\n     * Appear below the target element, with the right edges of the callout and target aligning.\n     */\n    bottomRightEdge: 6,\n    /**\n     * Appear below the target element, aligning with the target element such that the callout tends toward\n     * the center of the screen.\n     */\n    bottomAutoEdge: 7,\n    /**\n     * Appear to the left of the target element, with the top edges of the callout and target aligning.\n     */\n    leftTopEdge: 8,\n    /**\n     * Appear to the left of the target element, with the centers of the callout and target aligning.\n     */\n    leftCenter: 9,\n    /**\n     * Appear to the left of the target element, with the bottom edges of the callout and target aligning.\n     */\n    leftBottomEdge: 10,\n    /**\n     * Appear to the right of the target element, with the top edges of the callout and target aligning.\n     */\n    rightTopEdge: 11,\n    /**\n     * Appear to the right of the target element, with the centers of the callout and target aligning.\n     */\n    rightCenter: 12,\n    /**\n     * Appear to the right of the target element, with the bottom edges of the callout and target aligning.\n     */\n    rightBottomEdge: 13,\n};\n//# sourceMappingURL=DirectionalHint.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ContextualMenu/ContextualMenu.types.js\n\n/**\n * {@docCategory ContextualMenu}\n */\nvar ContextualMenuItemType;\n(function (ContextualMenuItemType) {\n    ContextualMenuItemType[ContextualMenuItemType[\"Normal\"] = 0] = \"Normal\";\n    ContextualMenuItemType[ContextualMenuItemType[\"Divider\"] = 1] = \"Divider\";\n    ContextualMenuItemType[ContextualMenuItemType[\"Header\"] = 2] = \"Header\";\n    ContextualMenuItemType[ContextualMenuItemType[\"Section\"] = 3] = \"Section\";\n})(ContextualMenuItemType || (ContextualMenuItemType = {}));\n//# sourceMappingURL=ContextualMenu.types.js.map\n// CONCATENATED MODULE: ./node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.types.js\n/**\n * {@docCategory FocusZone}\n */\nvar FocusZoneTabbableElements = {\n    /** Tabbing is not allowed */\n    none: 0,\n    /** All tabbing action is allowed */\n    all: 1,\n    /** Tabbing is allowed only on input elements */\n    inputOnly: 2,\n};\n/**\n * {@docCategory FocusZone}\n */\nvar FocusZoneDirection;\n(function (FocusZoneDirection) {\n    /** Only react to up/down arrows. */\n    FocusZoneDirection[FocusZoneDirection[\"vertical\"] = 0] = \"vertical\";\n    /** Only react to left/right arrows. */\n    FocusZoneDirection[FocusZoneDirection[\"horizontal\"] = 1] = \"horizontal\";\n    /** React to all arrows. */\n    FocusZoneDirection[FocusZoneDirection[\"bidirectional\"] = 2] = \"bidirectional\";\n    /**\n     * React to all arrows. Navigate next item in DOM on right/down arrow keys and previous - left/up arrow keys.\n     * Right and Left arrow keys are swapped in RTL mode.\n     */\n    FocusZoneDirection[FocusZoneDirection[\"domOrder\"] = 3] = \"domOrder\";\n})(FocusZoneDirection || (FocusZoneDirection = {}));\n//# sourceMappingURL=FocusZone.types.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/elementContainsAttribute.js\n\n/**\n * Determines if an element, or any of its ancestors, contain the given attribute\n * @param element - element to start searching at\n * @param attribute - the attribute to search for\n * @returns the value of the first instance found\n */\nfunction elementContainsAttribute(element, attribute) {\n    var elementMatch = findElementRecursive(element, function (testElement) { return testElement.hasAttribute(attribute); });\n    return elementMatch && elementMatch.getAttribute(attribute);\n}\n//# sourceMappingURL=elementContainsAttribute.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/elementContains.js\n\n/**\n * Determines whether or not a parent element contains a given child element.\n * If `allowVirtualParents` is true, this method may return `true` if the child\n * has the parent in its virtual element hierarchy.\n *\n * @public\n */\nfunction elementContains(parent, child, allowVirtualParents) {\n    if (allowVirtualParents === void 0) { allowVirtualParents = true; }\n    var isContained = false;\n    if (parent && child) {\n        if (allowVirtualParents) {\n            isContained = false;\n            while (child) {\n                var nextParent = getParent(child);\n                if (nextParent === parent) {\n                    isContained = true;\n                    break;\n                }\n                child = nextParent;\n            }\n        }\n        else if (parent.contains) {\n            isContained = parent.contains(child);\n        }\n    }\n    return isContained;\n}\n//# sourceMappingURL=elementContains.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/focus.js\n\n\n\n\n\nvar IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\nvar IS_VISIBLE_ATTRIBUTE = 'data-is-visible';\nvar FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\nvar FOCUSZONE_SUB_ATTRIBUTE = 'data-is-sub-focuszone';\n/**\n * Gets the first focusable element.\n *\n * @public\n */\nfunction getFirstFocusable(rootElement, currentElement, includeElementsInFocusZones) {\n    return getNextElement(rootElement, currentElement, true /*checkNode*/, false /*suppressParentTraversal*/, false /*suppressChildTraversal*/, includeElementsInFocusZones);\n}\n/**\n * Gets the last focusable element.\n *\n * @public\n */\nfunction getLastFocusable(rootElement, currentElement, includeElementsInFocusZones) {\n    return getPreviousElement(rootElement, currentElement, true /*checkNode*/, false /*suppressParentTraversal*/, true /*traverseChildren*/, includeElementsInFocusZones);\n}\n/**\n * Gets the first tabbable element. (The difference between focusable and tabbable is that tabbable elements are\n * focusable elements that also have tabIndex != -1.)\n * @param rootElement - The parent element to search beneath.\n * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,\n * and iteration continues forward.  Typical use passes rootElement.firstChild.\n * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.\n * @param checkNode - Include currentElement in search when true. Defaults to true.\n * @public\n */\nfunction getFirstTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode) {\n    if (checkNode === void 0) { checkNode = true; }\n    return getNextElement(rootElement, currentElement, checkNode, false /*suppressParentTraversal*/, false /*suppressChildTraversal*/, includeElementsInFocusZones, false /*allowFocusRoot*/, true /*tabbable*/);\n}\n/**\n * Gets the last tabbable element. (The difference between focusable and tabbable is that tabbable elements are\n * focusable elements that also have tabIndex != -1.)\n * @param rootElement - The parent element to search beneath.\n * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,\n * and iteration continues in reverse.  Typical use passes rootElement.lastChild.\n * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.\n * @param checkNode - Include currentElement in search when true. Defaults to true.\n * @public\n */\nfunction getLastTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode) {\n    if (checkNode === void 0) { checkNode = true; }\n    return getPreviousElement(rootElement, currentElement, checkNode, false /*suppressParentTraversal*/, true /*traverseChildren*/, includeElementsInFocusZones, false /*allowFocusRoot*/, true /*tabbable*/);\n}\n/**\n * Attempts to focus the first focusable element that is a child or child's child of the rootElement.\n *\n * @public\n * @param rootElement - Element to start the search for a focusable child.\n * @returns True if focus was set, false if it was not.\n */\nfunction focusFirstChild(rootElement) {\n    var element = getNextElement(rootElement, rootElement, true, false, false, true);\n    if (element) {\n        focusAsync(element);\n        return true;\n    }\n    return false;\n}\n/**\n * Traverse to find the previous element.\n * If tabbable is true, the element must have tabIndex != -1.\n *\n * @public\n */\nfunction getPreviousElement(rootElement, currentElement, checkNode, suppressParentTraversal, traverseChildren, includeElementsInFocusZones, allowFocusRoot, tabbable) {\n    if (!currentElement || (!allowFocusRoot && currentElement === rootElement)) {\n        return null;\n    }\n    var isCurrentElementVisible = isElementVisible(currentElement);\n    // Check its children.\n    if (traverseChildren &&\n        isCurrentElementVisible &&\n        (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {\n        var childMatch = getPreviousElement(rootElement, currentElement.lastElementChild, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n        if (childMatch) {\n            if ((tabbable && isElementTabbable(childMatch, true)) || !tabbable) {\n                return childMatch;\n            }\n            var childMatchSiblingMatch = getPreviousElement(rootElement, childMatch.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n            if (childMatchSiblingMatch) {\n                return childMatchSiblingMatch;\n            }\n            var childMatchParent = childMatch.parentElement;\n            // At this point if we have not found any potential matches\n            // start looking at the rest of the subtree under the currentParent.\n            // NOTE: We do not want to recurse here because doing so could\n            // cause elements to get skipped.\n            while (childMatchParent && childMatchParent !== currentElement) {\n                var childMatchParentMatch = getPreviousElement(rootElement, childMatchParent.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n                if (childMatchParentMatch) {\n                    return childMatchParentMatch;\n                }\n                childMatchParent = childMatchParent.parentElement;\n            }\n        }\n    }\n    // Check the current node, if it's not the first traversal.\n    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {\n        return currentElement;\n    }\n    // Check its previous sibling.\n    var siblingMatch = getPreviousElement(rootElement, currentElement.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n    if (siblingMatch) {\n        return siblingMatch;\n    }\n    // Check its parent.\n    if (!suppressParentTraversal) {\n        return getPreviousElement(rootElement, currentElement.parentElement, true, false, false, includeElementsInFocusZones, allowFocusRoot, tabbable);\n    }\n    return null;\n}\n/**\n * Traverse to find the next focusable element.\n * If tabbable is true, the element must have tabIndex != -1.\n *\n * @public\n * @param checkNode - Include currentElement in search when true.\n */\nfunction getNextElement(rootElement, currentElement, checkNode, suppressParentTraversal, suppressChildTraversal, includeElementsInFocusZones, allowFocusRoot, tabbable) {\n    if (!currentElement || (currentElement === rootElement && suppressChildTraversal && !allowFocusRoot)) {\n        return null;\n    }\n    var isCurrentElementVisible = isElementVisible(currentElement);\n    // Check the current node, if it's not the first traversal.\n    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {\n        return currentElement;\n    }\n    // Check its children.\n    if (!suppressChildTraversal &&\n        isCurrentElementVisible &&\n        (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {\n        var childMatch = getNextElement(rootElement, currentElement.firstElementChild, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable);\n        if (childMatch) {\n            return childMatch;\n        }\n    }\n    if (currentElement === rootElement) {\n        return null;\n    }\n    // Check its sibling.\n    var siblingMatch = getNextElement(rootElement, currentElement.nextElementSibling, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable);\n    if (siblingMatch) {\n        return siblingMatch;\n    }\n    if (!suppressParentTraversal) {\n        return getNextElement(rootElement, currentElement.parentElement, false, false, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n    }\n    return null;\n}\n/**\n * Determines if an element is visible.\n *\n * @public\n */\nfunction isElementVisible(element) {\n    // If the element is not valid, return false.\n    if (!element || !element.getAttribute) {\n        return false;\n    }\n    var visibilityAttribute = element.getAttribute(IS_VISIBLE_ATTRIBUTE);\n    // If the element is explicitly marked with the visibility attribute, return that value as boolean.\n    if (visibilityAttribute !== null && visibilityAttribute !== undefined) {\n        return visibilityAttribute === 'true';\n    }\n    // Fallback to other methods of determining actual visibility.\n    return (element.offsetHeight !== 0 ||\n        element.offsetParent !== null ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        element.isVisible === true); // used as a workaround for testing.\n}\n/**\n * Determines if an element can receive focus programmatically or via a mouse click.\n * If checkTabIndex is true, additionally checks to ensure the element can be focused with the tab key,\n * meaning tabIndex != -1.\n *\n * @public\n */\nfunction isElementTabbable(element, checkTabIndex) {\n    // If this element is null or is disabled, it is not considered tabbable.\n    if (!element || element.disabled) {\n        return false;\n    }\n    var tabIndex = 0;\n    var tabIndexAttributeValue = null;\n    if (element && element.getAttribute) {\n        tabIndexAttributeValue = element.getAttribute('tabIndex');\n        if (tabIndexAttributeValue) {\n            tabIndex = parseInt(tabIndexAttributeValue, 10);\n        }\n    }\n    var isFocusableAttribute = element.getAttribute ? element.getAttribute(IS_FOCUSABLE_ATTRIBUTE) : null;\n    var isTabIndexSet = tabIndexAttributeValue !== null && tabIndex >= 0;\n    var result = !!element &&\n        isFocusableAttribute !== 'false' &&\n        (element.tagName === 'A' ||\n            element.tagName === 'BUTTON' ||\n            element.tagName === 'INPUT' ||\n            element.tagName === 'TEXTAREA' ||\n            element.tagName === 'SELECT' ||\n            isFocusableAttribute === 'true' ||\n            isTabIndexSet);\n    return checkTabIndex ? tabIndex !== -1 && result : result;\n}\n/**\n * Determines if a given element is a focus zone.\n *\n * @public\n */\nfunction isElementFocusZone(element) {\n    return !!(element && element.getAttribute && !!element.getAttribute(FOCUSZONE_ID_ATTRIBUTE));\n}\n/**\n * Determines if a given element is a focus sub zone.\n *\n * @public\n */\nfunction isElementFocusSubZone(element) {\n    return !!(element && element.getAttribute && element.getAttribute(FOCUSZONE_SUB_ATTRIBUTE) === 'true');\n}\n/**\n * Determines if an element, or any of its children, contain focus.\n *\n * @public\n */\nfunction doesElementContainFocus(element) {\n    var document = getDocument(element);\n    var currentActiveElement = document && document.activeElement;\n    if (currentActiveElement && elementContains(element, currentActiveElement)) {\n        return true;\n    }\n    return false;\n}\n/**\n * Determines if an, or any of its ancestors, sepcificies that it doesn't want focus to wrap\n * @param element - element to start searching from\n * @param noWrapDataAttribute - the no wrap data attribute to match (either)\n * @returns true if focus should wrap, false otherwise\n */\nfunction shouldWrapFocus(element, noWrapDataAttribute) {\n    return elementContainsAttribute(element, noWrapDataAttribute) === 'true' ? false : true;\n}\nvar targetToFocusOnNextRepaint = undefined;\n/**\n * Sets focus to an element asynchronously. The focus will be set at the next browser repaint,\n * meaning it won't cause any extra recalculations. If more than one focusAsync is called during one frame,\n * only the latest called focusAsync element will actually be focused\n * @param element - The element to focus\n */\nfunction focusAsync(element) {\n    if (element) {\n        // An element was already queued to be focused, so replace that one with the new element\n        if (targetToFocusOnNextRepaint) {\n            targetToFocusOnNextRepaint = element;\n            return;\n        }\n        targetToFocusOnNextRepaint = element;\n        var win = getWindow(element);\n        if (win) {\n            // element.focus() is a no-op if the element is no longer in the DOM, meaning this is always safe\n            win.requestAnimationFrame(function () {\n                targetToFocusOnNextRepaint && targetToFocusOnNextRepaint.focus();\n                // We are done focusing for this frame, so reset the queued focus element\n                targetToFocusOnNextRepaint = undefined;\n            });\n        }\n    }\n}\n/**\n * Finds the closest focusable element via an index path from a parent. See\n * `getElementIndexPath` for getting an index path from an element to a child.\n */\nfunction getFocusableByIndexPath(parent, path) {\n    var element = parent;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var index = path_1[_i];\n        var nextChild = element.children[Math.min(index, element.children.length - 1)];\n        if (!nextChild) {\n            break;\n        }\n        element = nextChild;\n    }\n    element =\n        isElementTabbable(element) && isElementVisible(element)\n            ? element\n            : getNextElement(parent, element, true) || getPreviousElement(parent, element);\n    return element;\n}\n/**\n * Finds the element index path from a parent element to a child element.\n *\n * If you had this node structure: \"A has children [B, C] and C has child D\",\n * the index path from A to D would be [1, 0], or `parent.chidren[1].children[0]`.\n */\nfunction getElementIndexPath(fromElement, toElement) {\n    var path = [];\n    while (toElement && fromElement && toElement !== fromElement) {\n        var parent_1 = getParent(toElement, true);\n        if (parent_1 === null) {\n            return [];\n        }\n        path.unshift(Array.prototype.indexOf.call(parent_1.children, toElement));\n        toElement = parent_1;\n    }\n    return path;\n}\n//# sourceMappingURL=focus.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/raiseClick.js\n/** Raises a click event. */\nfunction raiseClick(target) {\n    var event = createNewEvent('MouseEvents');\n    event.initEvent('click', true, true);\n    target.dispatchEvent(event);\n}\nfunction createNewEvent(eventName) {\n    var event;\n    if (typeof Event === 'function') {\n        // Chrome, Opera, Firefox\n        event = new Event(eventName);\n    }\n    else {\n        // IE\n        event = document.createEvent('Event');\n        event.initEvent(eventName, true, true);\n    }\n    return event;\n}\n//# sourceMappingURL=raiseClick.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/scroll.js\n\n\n\nvar _scrollbarWidth;\nvar _bodyScrollDisabledCount = 0;\nvar DisabledScrollClassName = mergeStyles({\n    overflow: 'hidden !important',\n});\n/**\n * Placing this attribute on scrollable divs optimizes detection to know\n * if the div is scrollable or not (given we can avoid expensive operations\n * like getComputedStyle.)\n *\n * @public\n */\nvar DATA_IS_SCROLLABLE_ATTRIBUTE = 'data-is-scrollable';\n/**\n * Allows the user to scroll within a element,\n * while preventing the user from scrolling the body\n */\nvar allowScrollOnElement = function (element, events) {\n    if (!element) {\n        return;\n    }\n    var _previousClientY = 0;\n    var _element = null;\n    // remember the clientY for future calls of _preventOverscrolling\n    var _saveClientY = function (event) {\n        if (event.targetTouches.length === 1) {\n            _previousClientY = event.targetTouches[0].clientY;\n        }\n    };\n    // prevent the body from scrolling when the user attempts\n    // to scroll past the top or bottom of the element\n    var _preventOverscrolling = function (event) {\n        // only respond to a single-finger touch\n        if (event.targetTouches.length !== 1) {\n            return;\n        }\n        // prevent the body touchmove handler from firing\n        // so that scrolling is allowed within the element\n        event.stopPropagation();\n        if (!_element) {\n            return;\n        }\n        var clientY = event.targetTouches[0].clientY - _previousClientY;\n        var scrollableParent = findScrollableParent(event.target);\n        if (scrollableParent) {\n            _element = scrollableParent;\n        }\n        // if the element is scrolled to the top,\n        // prevent the user from scrolling up\n        if (_element.scrollTop === 0 && clientY > 0) {\n            event.preventDefault();\n        }\n        // if the element is scrolled to the bottom,\n        // prevent the user from scrolling down\n        if (_element.scrollHeight - Math.ceil(_element.scrollTop) <= _element.clientHeight && clientY < 0) {\n            event.preventDefault();\n        }\n    };\n    events.on(element, 'touchstart', _saveClientY, { passive: false });\n    events.on(element, 'touchmove', _preventOverscrolling, { passive: false });\n    _element = element;\n};\n/**\n * Same as allowScrollOnElement but does not prevent overscrolling.\n */\nvar allowOverscrollOnElement = function (element, events) {\n    if (!element) {\n        return;\n    }\n    var _allowElementScroll = function (event) {\n        event.stopPropagation();\n    };\n    events.on(element, 'touchmove', _allowElementScroll, { passive: false });\n};\nvar _disableIosBodyScroll = function (event) {\n    event.preventDefault();\n};\n/**\n * Disables the body scrolling.\n *\n * @public\n */\nfunction disableBodyScroll() {\n    var doc = getDocument();\n    if (doc && doc.body && !_bodyScrollDisabledCount) {\n        doc.body.classList.add(DisabledScrollClassName);\n        doc.body.addEventListener('touchmove', _disableIosBodyScroll, { passive: false, capture: false });\n    }\n    _bodyScrollDisabledCount++;\n}\n/**\n * Enables the body scrolling.\n *\n * @public\n */\nfunction enableBodyScroll() {\n    if (_bodyScrollDisabledCount > 0) {\n        var doc = getDocument();\n        if (doc && doc.body && _bodyScrollDisabledCount === 1) {\n            doc.body.classList.remove(DisabledScrollClassName);\n            doc.body.removeEventListener('touchmove', _disableIosBodyScroll);\n        }\n        _bodyScrollDisabledCount--;\n    }\n}\n/**\n * Calculates the width of a scrollbar for the browser/os.\n *\n * @public\n */\nfunction getScrollbarWidth() {\n    if (_scrollbarWidth === undefined) {\n        var scrollDiv = document.createElement('div');\n        scrollDiv.style.setProperty('width', '100px');\n        scrollDiv.style.setProperty('height', '100px');\n        scrollDiv.style.setProperty('overflow', 'scroll');\n        scrollDiv.style.setProperty('position', 'absolute');\n        scrollDiv.style.setProperty('top', '-9999px');\n        document.body.appendChild(scrollDiv);\n        // Get the scrollbar width\n        _scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n        // Delete the DIV\n        document.body.removeChild(scrollDiv);\n    }\n    return _scrollbarWidth;\n}\n/**\n * Traverses up the DOM for the element with the data-is-scrollable=true attribute, or returns\n * document.body.\n *\n * @public\n */\nfunction findScrollableParent(startingElement) {\n    var el = startingElement;\n    var doc = getDocument(startingElement);\n    // First do a quick scan for the scrollable attribute.\n    while (el && el !== doc.body) {\n        if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) === 'true') {\n            return el;\n        }\n        el = el.parentElement;\n    }\n    // If we haven't found it, the use the slower method: compute styles to evaluate if overflow is set.\n    el = startingElement;\n    while (el && el !== doc.body) {\n        if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) !== 'false') {\n            var computedStyles = getComputedStyle(el);\n            var overflowY = computedStyles ? computedStyles.getPropertyValue('overflow-y') : '';\n            if (overflowY && (overflowY === 'scroll' || overflowY === 'auto')) {\n                return el;\n            }\n        }\n        el = el.parentElement;\n    }\n    // Fall back to window scroll.\n    if (!el || el === doc.body) {\n        el = getWindow(startingElement);\n    }\n    return el;\n}\n//# sourceMappingURL=scroll.js.map\n// CONCATENATED MODULE: ./node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.js\n\n\n\n\n\nvar FocusZone_IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\nvar IS_ENTER_DISABLED_ATTRIBUTE = 'data-disable-click-on-enter';\nvar FocusZone_FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\nvar TABINDEX = 'tabindex';\nvar NO_VERTICAL_WRAP = 'data-no-vertical-wrap';\nvar NO_HORIZONTAL_WRAP = 'data-no-horizontal-wrap';\nvar LARGE_DISTANCE_FROM_CENTER = 999999999;\nvar LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;\nvar focusZoneStyles;\nvar focusZoneClass = 'ms-FocusZone';\n// Helper function that will return a class for when the root is focused\nfunction getRootClass() {\n    if (!focusZoneStyles) {\n        focusZoneStyles = mergeStyles({\n            selectors: {\n                ':focus': {\n                    outline: 'none',\n                },\n            },\n        }, focusZoneClass);\n    }\n    return focusZoneStyles;\n}\nvar _allInstances = {};\nvar _outerZones = new Set();\nvar ALLOWED_INPUT_TYPES = ['text', 'number', 'password', 'email', 'tel', 'url', 'search'];\nvar ALLOW_VIRTUAL_ELEMENTS = false;\nvar FocusZone_FocusZone = /** @class */ (function (_super) {\n    __extends(FocusZone, _super);\n    function FocusZone(props) {\n        var _this = _super.call(this, props) || this;\n        _this._root = react[\"createRef\"]();\n        _this._onFocus = function (ev) {\n            if (_this._portalContainsElement(ev.target)) {\n                // If the event target is inside a portal do not process the event.\n                return;\n            }\n            var _a = _this.props, onActiveElementChanged = _a.onActiveElementChanged, \n            // eslint-disable-next-line deprecation/deprecation\n            doNotAllowFocusEventToPropagate = _a.doNotAllowFocusEventToPropagate, stopFocusPropagation = _a.stopFocusPropagation, \n            // eslint-disable-next-line deprecation/deprecation\n            onFocusNotification = _a.onFocusNotification, onFocus = _a.onFocus, shouldFocusInnerElementWhenReceivedFocus = _a.shouldFocusInnerElementWhenReceivedFocus, defaultTabbableElement = _a.defaultTabbableElement;\n            var isImmediateDescendant = _this._isImmediateDescendantOfZone(ev.target);\n            var newActiveElement;\n            if (onFocus) {\n                onFocus(ev);\n            }\n            else if (onFocusNotification) {\n                onFocusNotification();\n            }\n            if (isImmediateDescendant) {\n                newActiveElement = ev.target;\n            }\n            else {\n                var parentElement = ev.target;\n                while (parentElement && parentElement !== _this._root.current) {\n                    if (isElementTabbable(parentElement) && _this._isImmediateDescendantOfZone(parentElement)) {\n                        newActiveElement = parentElement;\n                        break;\n                    }\n                    parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n                }\n            }\n            // If an inner focusable element should be focused when FocusZone container receives focus\n            if (shouldFocusInnerElementWhenReceivedFocus && ev.target === _this._root.current) {\n                var maybeElementToFocus = defaultTabbableElement &&\n                    typeof defaultTabbableElement === 'function' &&\n                    defaultTabbableElement(_this._root.current);\n                // try to focus defaultTabbable element\n                if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {\n                    newActiveElement = maybeElementToFocus;\n                    maybeElementToFocus.focus();\n                }\n                else {\n                    // force focus on first focusable element\n                    _this.focus(true);\n                    if (_this._activeElement) {\n                        // set to null as new active element was handled in method above\n                        newActiveElement = null;\n                    }\n                }\n            }\n            var initialElementFocused = !_this._activeElement;\n            // If the new active element is a child of this zone and received focus,\n            // update alignment an immediate descendant\n            if (newActiveElement && newActiveElement !== _this._activeElement) {\n                if (isImmediateDescendant || initialElementFocused) {\n                    _this._setFocusAlignment(newActiveElement, true, true);\n                }\n                _this._activeElement = newActiveElement;\n                if (initialElementFocused) {\n                    _this._updateTabIndexes();\n                }\n            }\n            if (onActiveElementChanged) {\n                onActiveElementChanged(_this._activeElement, ev);\n            }\n            if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {\n                ev.stopPropagation();\n            }\n        };\n        _this._onBlur = function () {\n            _this._setParkedFocus(false);\n        };\n        _this._onMouseDown = function (ev) {\n            if (_this._portalContainsElement(ev.target)) {\n                // If the event target is inside a portal do not process the event.\n                return;\n            }\n            var disabled = _this.props.disabled;\n            if (disabled) {\n                return;\n            }\n            var target = ev.target;\n            var path = [];\n            while (target && target !== _this._root.current) {\n                path.push(target);\n                target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);\n            }\n            while (path.length) {\n                target = path.pop();\n                if (target && isElementTabbable(target)) {\n                    _this._setActiveElement(target, true);\n                }\n                if (isElementFocusZone(target)) {\n                    // Stop here since the focus zone will take care of its own children.\n                    break;\n                }\n            }\n        };\n        /**\n         * Handle the keystrokes.\n         */\n        _this._onKeyDown = function (ev) {\n            if (_this._portalContainsElement(ev.target)) {\n                // If the event target is inside a portal do not process the event.\n                return;\n            }\n            // eslint-disable-next-line deprecation/deprecation\n            var _a = _this.props, direction = _a.direction, disabled = _a.disabled, isInnerZoneKeystroke = _a.isInnerZoneKeystroke, pagingSupportDisabled = _a.pagingSupportDisabled, shouldEnterInnerZone = _a.shouldEnterInnerZone;\n            if (disabled) {\n                return;\n            }\n            if (_this.props.onKeyDown) {\n                _this.props.onKeyDown(ev);\n            }\n            // If the default has been prevented, do not process keyboard events.\n            if (ev.isDefaultPrevented()) {\n                return;\n            }\n            if (_this._getDocument().activeElement === _this._root.current && _this._isInnerZone) {\n                // If this element has focus, it is being controlled by a parent.\n                // Ignore the keystroke.\n                return;\n            }\n            if (((shouldEnterInnerZone && shouldEnterInnerZone(ev)) || (isInnerZoneKeystroke && isInnerZoneKeystroke(ev))) &&\n                _this._isImmediateDescendantOfZone(ev.target)) {\n                // Try to focus\n                var innerZone = _this._getFirstInnerZone();\n                if (innerZone) {\n                    if (!innerZone.focus(true)) {\n                        return;\n                    }\n                }\n                else if (isElementFocusSubZone(ev.target)) {\n                    if (!_this.focusElement(getNextElement(ev.target, ev.target.firstChild, true))) {\n                        return;\n                    }\n                }\n                else {\n                    return;\n                }\n            }\n            else if (ev.altKey) {\n                return;\n            }\n            else {\n                // eslint-disable-next-line @fluentui/deprecated-keyboard-event-props\n                switch (ev.which) {\n                    case KeyCodes.space:\n                        if (_this._tryInvokeClickForFocusable(ev.target)) {\n                            break;\n                        }\n                        return;\n                    case KeyCodes.left:\n                        if (direction !== FocusZoneDirection.vertical) {\n                            _this._preventDefaultWhenHandled(ev);\n                            if (_this._moveFocusLeft()) {\n                                break;\n                            }\n                        }\n                        return;\n                    case KeyCodes.right:\n                        if (direction !== FocusZoneDirection.vertical) {\n                            _this._preventDefaultWhenHandled(ev);\n                            if (_this._moveFocusRight()) {\n                                break;\n                            }\n                        }\n                        return;\n                    case KeyCodes.up:\n                        if (direction !== FocusZoneDirection.horizontal) {\n                            _this._preventDefaultWhenHandled(ev);\n                            if (_this._moveFocusUp()) {\n                                break;\n                            }\n                        }\n                        return;\n                    case KeyCodes.down:\n                        if (direction !== FocusZoneDirection.horizontal) {\n                            _this._preventDefaultWhenHandled(ev);\n                            if (_this._moveFocusDown()) {\n                                break;\n                            }\n                        }\n                        return;\n                    case KeyCodes.pageDown:\n                        if (!pagingSupportDisabled && _this._moveFocusPaging(true)) {\n                            break;\n                        }\n                        return;\n                    case KeyCodes.pageUp:\n                        if (!pagingSupportDisabled && _this._moveFocusPaging(false)) {\n                            break;\n                        }\n                        return;\n                    case KeyCodes.tab:\n                        if (\n                        // eslint-disable-next-line deprecation/deprecation\n                        _this.props.allowTabKey ||\n                            _this.props.handleTabKey === FocusZoneTabbableElements.all ||\n                            (_this.props.handleTabKey === FocusZoneTabbableElements.inputOnly &&\n                                _this._isElementInput(ev.target))) {\n                            var focusChanged = false;\n                            _this._processingTabKey = true;\n                            if (direction === FocusZoneDirection.vertical ||\n                                !_this._shouldWrapFocus(_this._activeElement, NO_HORIZONTAL_WRAP)) {\n                                focusChanged = ev.shiftKey ? _this._moveFocusUp() : _this._moveFocusDown();\n                            }\n                            else {\n                                var tabWithDirection = rtl_getRTL() ? !ev.shiftKey : ev.shiftKey;\n                                focusChanged = tabWithDirection ? _this._moveFocusLeft() : _this._moveFocusRight();\n                            }\n                            _this._processingTabKey = false;\n                            if (focusChanged) {\n                                break;\n                            }\n                            else if (_this.props.shouldResetActiveElementWhenTabFromZone) {\n                                _this._activeElement = null;\n                            }\n                        }\n                        return;\n                    case KeyCodes.home:\n                        if (_this._isContentEditableElement(ev.target) ||\n                            (_this._isElementInput(ev.target) &&\n                                !_this._shouldInputLoseFocus(ev.target, false))) {\n                            return false;\n                        }\n                        var firstChild = _this._root.current && _this._root.current.firstChild;\n                        if (_this._root.current &&\n                            firstChild &&\n                            _this.focusElement(getNextElement(_this._root.current, firstChild, true))) {\n                            break;\n                        }\n                        return;\n                    case KeyCodes.end:\n                        if (_this._isContentEditableElement(ev.target) ||\n                            (_this._isElementInput(ev.target) &&\n                                !_this._shouldInputLoseFocus(ev.target, true))) {\n                            return false;\n                        }\n                        var lastChild = _this._root.current && _this._root.current.lastChild;\n                        if (_this._root.current &&\n                            _this.focusElement(getPreviousElement(_this._root.current, lastChild, true, true, true))) {\n                            break;\n                        }\n                        return;\n                    case KeyCodes.enter:\n                        if (_this._tryInvokeClickForFocusable(ev.target)) {\n                            break;\n                        }\n                        return;\n                    default:\n                        return;\n                }\n            }\n            ev.preventDefault();\n            ev.stopPropagation();\n        };\n        _this._getHorizontalDistanceFromCenter = function (isForward, activeRect, targetRect) {\n            // eslint-disable-next-line deprecation/deprecation\n            var leftAlignment = _this._focusAlignment.left || _this._focusAlignment.x || 0;\n            // ClientRect values can be floats that differ by very small fractions of a decimal.\n            // If the difference between top and bottom are within a pixel then we should treat\n            // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n            // but without Math.Floor they will be handled incorrectly.\n            var targetRectTop = Math.floor(targetRect.top);\n            var activeRectBottom = Math.floor(activeRect.bottom);\n            var targetRectBottom = Math.floor(targetRect.bottom);\n            var activeRectTop = Math.floor(activeRect.top);\n            var isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;\n            var isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;\n            if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {\n                if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n                    return 0;\n                }\n                return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n            }\n            if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n                return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n            }\n            return LARGE_DISTANCE_FROM_CENTER;\n        };\n        // Manage componentRef resolution.\n        initializeComponentRef(_this);\n        if (false) {}\n        _this._id = getId('FocusZone');\n        _this._focusAlignment = {\n            left: 0,\n            top: 0,\n        };\n        _this._processingTabKey = false;\n        return _this;\n    }\n    /** Used for testing purposes only. */\n    FocusZone.getOuterZones = function () {\n        return _outerZones.size;\n    };\n    /**\n     * Handle global tab presses so that we can patch tabindexes on the fly.\n     * HEADS UP: This must not be an arrow function in order to be referentially equal among instances\n     * for ref counting to work correctly!\n     */\n    FocusZone._onKeyDownCapture = function (ev) {\n        // eslint-disable-next-line deprecation/deprecation, @fluentui/deprecated-keyboard-event-props\n        if (ev.which === KeyCodes.tab) {\n            _outerZones.forEach(function (zone) { return zone._updateTabIndexes(); });\n        }\n    };\n    FocusZone.prototype.componentDidMount = function () {\n        var root = this._root.current;\n        _allInstances[this._id] = this;\n        if (root) {\n            this._windowElement = getWindow(root);\n            var parentElement = getParent(root, ALLOW_VIRTUAL_ELEMENTS);\n            while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {\n                if (isElementFocusZone(parentElement)) {\n                    this._isInnerZone = true;\n                    break;\n                }\n                parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n            }\n            if (!this._isInnerZone) {\n                _outerZones.add(this);\n                if (this._windowElement && _outerZones.size === 1) {\n                    this._windowElement.addEventListener('keydown', FocusZone._onKeyDownCapture, true);\n                }\n            }\n            this._root.current && this._root.current.addEventListener('blur', this._onBlur, true);\n            // Assign initial tab indexes so that we can set initial focus as appropriate.\n            this._updateTabIndexes();\n            if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'string') {\n                this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement);\n                // eslint-disable-next-line deprecation/deprecation\n            }\n            else if (this.props.defaultActiveElement) {\n                // eslint-disable-next-line deprecation/deprecation\n                this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement);\n            }\n            if (this.props.shouldFocusOnMount) {\n                this.focus();\n            }\n        }\n    };\n    FocusZone.prototype.componentDidUpdate = function () {\n        var root = this._root.current;\n        var doc = this._getDocument();\n        if (doc &&\n            this._lastIndexPath &&\n            (doc.activeElement === doc.body ||\n                doc.activeElement === null ||\n                (!this.props.preventFocusRestoration && doc.activeElement === root))) {\n            // The element has been removed after the render, attempt to restore focus.\n            var elementToFocus = getFocusableByIndexPath(root, this._lastIndexPath);\n            if (elementToFocus) {\n                this._setActiveElement(elementToFocus, true);\n                elementToFocus.focus();\n                this._setParkedFocus(false);\n            }\n            else {\n                // We had a focus path to restore, but now that path is unresolvable. Park focus\n                // on the container until we can try again.\n                this._setParkedFocus(true);\n            }\n        }\n    };\n    FocusZone.prototype.componentWillUnmount = function () {\n        delete _allInstances[this._id];\n        if (!this._isInnerZone) {\n            _outerZones.delete(this);\n            // If this is the last outer zone, remove the keydown listener.\n            if (this._windowElement && _outerZones.size === 0) {\n                this._windowElement.removeEventListener('keydown', FocusZone._onKeyDownCapture, true);\n            }\n        }\n        if (this._root.current) {\n            this._root.current.removeEventListener('blur', this._onBlur, true);\n        }\n        this._activeElement = null;\n        this._defaultFocusElement = null;\n    };\n    FocusZone.prototype.render = function () {\n        // eslint-disable-next-line deprecation/deprecation\n        var _a = this.props, tag = _a.as, elementType = _a.elementType, rootProps = _a.rootProps, ariaDescribedBy = _a.ariaDescribedBy, ariaLabelledBy = _a.ariaLabelledBy, className = _a.className;\n        var divProps = getNativeProps(this.props, htmlElementProperties);\n        var Tag = tag || elementType || 'div';\n        // Note, right before rendering/reconciling proceeds, we need to record if focus\n        // was in the zone before the update. This helper will track this and, if focus\n        // was actually in the zone, what the index path to the element is at this time.\n        // Then, later in componentDidUpdate, we can evaluate if we need to restore it in\n        // the case the element was removed.\n        this._evaluateFocusBeforeRender();\n        return (react[\"createElement\"](Tag, __assign({ \"aria-labelledby\": ariaLabelledBy, \"aria-describedby\": ariaDescribedBy }, divProps, rootProps, { \n            // Once the getClassName correctly memoizes inputs this should\n            // be replaced so that className is passed to getRootClass and is included there so\n            // the class names will always be in the same order.\n            className: css(getRootClass(), className), ref: this._root, \"data-focuszone-id\": this._id, onKeyDown: this._onKeyDown, onFocus: this._onFocus, onMouseDownCapture: this._onMouseDown }), this.props.children));\n    };\n    /**\n     * Sets focus to the first tabbable item in the zone.\n     * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n     * if focus is already in the focus zone.\n     * @returns True if focus could be set to an active element, false if no operation was taken.\n     */\n    FocusZone.prototype.focus = function (forceIntoFirstElement) {\n        if (forceIntoFirstElement === void 0) { forceIntoFirstElement = false; }\n        if (this._root.current) {\n            if (!forceIntoFirstElement &&\n                this._root.current.getAttribute(FocusZone_IS_FOCUSABLE_ATTRIBUTE) === 'true' &&\n                this._isInnerZone) {\n                var ownerZoneElement = this._getOwnerZone(this._root.current);\n                if (ownerZoneElement !== this._root.current) {\n                    var ownerZone = _allInstances[ownerZoneElement.getAttribute(FocusZone_FOCUSZONE_ID_ATTRIBUTE)];\n                    return !!ownerZone && ownerZone.focusElement(this._root.current);\n                }\n                return false;\n            }\n            else if (!forceIntoFirstElement &&\n                this._activeElement &&\n                elementContains(this._root.current, this._activeElement) &&\n                isElementTabbable(this._activeElement)) {\n                this._activeElement.focus();\n                return true;\n            }\n            else {\n                var firstChild = this._root.current.firstChild;\n                return this.focusElement(getNextElement(this._root.current, firstChild, true));\n            }\n        }\n        return false;\n    };\n    /**\n     * Sets focus to the last tabbable item in the zone.\n     * @returns True if focus could be set to an active element, false if no operation was taken.\n     */\n    FocusZone.prototype.focusLast = function () {\n        if (this._root.current) {\n            var lastChild = this._root.current && this._root.current.lastChild;\n            return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true));\n        }\n        return false;\n    };\n    /**\n     * Sets focus to a specific child element within the zone. This can be used in conjunction with\n     * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct\n     * location and then focus.)\n     * @param element - The child element within the zone to focus.\n     * @returns True if focus could be set to an active element, false if no operation was taken.\n     */\n    FocusZone.prototype.focusElement = function (element) {\n        // eslint-disable-next-line deprecation/deprecation\n        var _a = this.props, onBeforeFocus = _a.onBeforeFocus, shouldReceiveFocus = _a.shouldReceiveFocus;\n        if ((shouldReceiveFocus && !shouldReceiveFocus(element)) || (onBeforeFocus && !onBeforeFocus(element))) {\n            return false;\n        }\n        if (element) {\n            // when we Set focus to a specific child, we should recalculate the alignment depend on its position\n            this._setActiveElement(element);\n            if (this._activeElement) {\n                this._activeElement.focus();\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Forces horizontal alignment in the context of vertical arrowing to use specific point as the reference,\n     * rather than a center based on the last horizontal motion.\n     * @param point - the new reference point.\n     */\n    FocusZone.prototype.setFocusAlignment = function (point) {\n        this._focusAlignment = point;\n    };\n    FocusZone.prototype._evaluateFocusBeforeRender = function () {\n        var root = this._root.current;\n        var doc = this._getDocument();\n        if (doc) {\n            var focusedElement = doc.activeElement;\n            // Only update the index path if we are not parked on the root.\n            if (focusedElement !== root) {\n                var shouldRestoreFocus = elementContains(root, focusedElement, false);\n                this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(root, focusedElement) : undefined;\n            }\n        }\n    };\n    /**\n     * When focus is in the zone at render time but then all focusable elements are removed,\n     * we \"park\" focus temporarily on the root. Once we update with focusable children, we restore\n     * focus to the closest path from previous. If the user tabs away from the parked container,\n     * we restore focusability to the pre-parked state.\n     */\n    FocusZone.prototype._setParkedFocus = function (isParked) {\n        var root = this._root.current;\n        if (root && this._isParked !== isParked) {\n            this._isParked = isParked;\n            if (isParked) {\n                if (!this.props.allowFocusRoot) {\n                    this._parkedTabIndex = root.getAttribute('tabindex');\n                    root.setAttribute('tabindex', '-1');\n                }\n                root.focus();\n            }\n            else if (!this.props.allowFocusRoot) {\n                if (this._parkedTabIndex) {\n                    root.setAttribute('tabindex', this._parkedTabIndex);\n                    this._parkedTabIndex = undefined;\n                }\n                else {\n                    root.removeAttribute('tabindex');\n                }\n            }\n        }\n    };\n    FocusZone.prototype._setActiveElement = function (element, forceAlignment) {\n        var previousActiveElement = this._activeElement;\n        this._activeElement = element;\n        if (previousActiveElement) {\n            if (isElementFocusZone(previousActiveElement)) {\n                this._updateTabIndexes(previousActiveElement);\n            }\n            previousActiveElement.tabIndex = -1;\n        }\n        if (this._activeElement) {\n            if (!this._focusAlignment || forceAlignment) {\n                this._setFocusAlignment(element, true, true);\n            }\n            this._activeElement.tabIndex = 0;\n        }\n    };\n    FocusZone.prototype._preventDefaultWhenHandled = function (ev) {\n        this.props.preventDefaultWhenHandled && ev.preventDefault();\n    };\n    /**\n     * Walk up the dom try to find a focusable element.\n     */\n    FocusZone.prototype._tryInvokeClickForFocusable = function (target) {\n        if (target === this._root.current || !this.props.shouldRaiseClicks) {\n            return false;\n        }\n        do {\n            if (target.tagName === 'BUTTON' ||\n                target.tagName === 'A' ||\n                target.tagName === 'INPUT' ||\n                target.tagName === 'TEXTAREA') {\n                return false;\n            }\n            if (this._isImmediateDescendantOfZone(target) &&\n                target.getAttribute(FocusZone_IS_FOCUSABLE_ATTRIBUTE) === 'true' &&\n                target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== 'true') {\n                raiseClick(target);\n                return true;\n            }\n            target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);\n        } while (target !== this._root.current);\n        return false;\n    };\n    /**\n     * Traverse to find first child zone.\n     */\n    FocusZone.prototype._getFirstInnerZone = function (rootElement) {\n        rootElement = rootElement || this._activeElement || this._root.current;\n        if (!rootElement) {\n            return null;\n        }\n        if (isElementFocusZone(rootElement)) {\n            return _allInstances[rootElement.getAttribute(FocusZone_FOCUSZONE_ID_ATTRIBUTE)];\n        }\n        var child = rootElement.firstElementChild;\n        while (child) {\n            if (isElementFocusZone(child)) {\n                return _allInstances[child.getAttribute(FocusZone_FOCUSZONE_ID_ATTRIBUTE)];\n            }\n            var match = this._getFirstInnerZone(child);\n            if (match) {\n                return match;\n            }\n            child = child.nextElementSibling;\n        }\n        return null;\n    };\n    FocusZone.prototype._moveFocus = function (isForward, getDistanceFromCenter, ev, useDefaultWrap) {\n        if (useDefaultWrap === void 0) { useDefaultWrap = true; }\n        var element = this._activeElement;\n        var candidateDistance = -1;\n        var candidateElement = undefined;\n        var changedFocus = false;\n        var isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;\n        if (!element || !this._root.current) {\n            return false;\n        }\n        if (this._isElementInput(element)) {\n            if (!this._shouldInputLoseFocus(element, isForward)) {\n                return false;\n            }\n        }\n        var activeRect = isBidirectional ? element.getBoundingClientRect() : null;\n        do {\n            element = (isForward\n                ? getNextElement(this._root.current, element)\n                : getPreviousElement(this._root.current, element));\n            if (isBidirectional) {\n                if (element) {\n                    var targetRect = element.getBoundingClientRect();\n                    var elementDistance = getDistanceFromCenter(activeRect, targetRect);\n                    if (elementDistance === -1 && candidateDistance === -1) {\n                        candidateElement = element;\n                        break;\n                    }\n                    if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {\n                        candidateDistance = elementDistance;\n                        candidateElement = element;\n                    }\n                    if (candidateDistance >= 0 && elementDistance < 0) {\n                        break;\n                    }\n                }\n            }\n            else {\n                candidateElement = element;\n                break;\n            }\n        } while (element);\n        // Focus the closest candidate\n        if (candidateElement && candidateElement !== this._activeElement) {\n            changedFocus = true;\n            this.focusElement(candidateElement);\n        }\n        else if (this.props.isCircularNavigation && useDefaultWrap) {\n            if (isForward) {\n                return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));\n            }\n            else {\n                return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));\n            }\n        }\n        return changedFocus;\n    };\n    FocusZone.prototype._moveFocusDown = function () {\n        var _this = this;\n        var targetTop = -1;\n        // eslint-disable-next-line deprecation/deprecation\n        var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n        if (this._moveFocus(true, function (activeRect, targetRect) {\n            var distance = -1;\n            // ClientRect values can be floats that differ by very small fractions of a decimal.\n            // If the difference between top and bottom are within a pixel then we should treat\n            // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n            // but without Math.Floor they will be handled incorrectly.\n            var targetRectTop = Math.floor(targetRect.top);\n            var activeRectBottom = Math.floor(activeRect.bottom);\n            if (targetRectTop < activeRectBottom) {\n                if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n                    return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n                }\n                return LARGE_DISTANCE_FROM_CENTER;\n            }\n            if ((targetTop === -1 && targetRectTop >= activeRectBottom) || targetRectTop === targetTop) {\n                targetTop = targetRectTop;\n                if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n                    distance = 0;\n                }\n                else {\n                    distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n                }\n            }\n            return distance;\n        })) {\n            this._setFocusAlignment(this._activeElement, false, true);\n            return true;\n        }\n        return false;\n    };\n    FocusZone.prototype._moveFocusUp = function () {\n        var _this = this;\n        var targetTop = -1;\n        // eslint-disable-next-line deprecation/deprecation\n        var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n        if (this._moveFocus(false, function (activeRect, targetRect) {\n            var distance = -1;\n            // ClientRect values can be floats that differ by very small fractions of a decimal.\n            // If the difference between top and bottom are within a pixel then we should treat\n            // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n            // but without Math.Floor they will be handled incorrectly.\n            var targetRectBottom = Math.floor(targetRect.bottom);\n            var targetRectTop = Math.floor(targetRect.top);\n            var activeRectTop = Math.floor(activeRect.top);\n            if (targetRectBottom > activeRectTop) {\n                if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n                    return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n                }\n                return LARGE_DISTANCE_FROM_CENTER;\n            }\n            if ((targetTop === -1 && targetRectBottom <= activeRectTop) || targetRectTop === targetTop) {\n                targetTop = targetRectTop;\n                if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n                    distance = 0;\n                }\n                else {\n                    distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n                }\n            }\n            return distance;\n        })) {\n            this._setFocusAlignment(this._activeElement, false, true);\n            return true;\n        }\n        return false;\n    };\n    FocusZone.prototype._moveFocusLeft = function () {\n        var _this = this;\n        var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);\n        if (this._moveFocus(rtl_getRTL(), function (activeRect, targetRect) {\n            var distance = -1;\n            var topBottomComparison;\n            if (rtl_getRTL()) {\n                // When in RTL, this comparison should be the same as the one in _moveFocusRight for LTR.\n                // Going left at a leftmost rectangle will go down a line instead of up a line like in LTR.\n                // This is important, because we want to be comparing the top of the target rect\n                // with the bottom of the active rect.\n                topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n            }\n            else {\n                topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n            }\n            if (topBottomComparison &&\n                targetRect.right <= activeRect.right &&\n                _this.props.direction !== FocusZoneDirection.vertical) {\n                distance = activeRect.right - targetRect.right;\n            }\n            else if (!shouldWrap) {\n                distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n            }\n            return distance;\n        }, undefined /*ev*/, shouldWrap)) {\n            this._setFocusAlignment(this._activeElement, true, false);\n            return true;\n        }\n        return false;\n    };\n    FocusZone.prototype._moveFocusRight = function () {\n        var _this = this;\n        var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);\n        if (this._moveFocus(!rtl_getRTL(), function (activeRect, targetRect) {\n            var distance = -1;\n            var topBottomComparison;\n            if (rtl_getRTL()) {\n                // When in RTL, this comparison should be the same as the one in _moveFocusLeft for LTR.\n                // Going right at a rightmost rectangle will go up a line instead of down a line like in LTR.\n                // This is important, because we want to be comparing the bottom of the target rect\n                // with the top of the active rect.\n                topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n            }\n            else {\n                topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n            }\n            if (topBottomComparison &&\n                targetRect.left >= activeRect.left &&\n                _this.props.direction !== FocusZoneDirection.vertical) {\n                distance = targetRect.left - activeRect.left;\n            }\n            else if (!shouldWrap) {\n                distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n            }\n            return distance;\n        }, undefined /*ev*/, shouldWrap)) {\n            this._setFocusAlignment(this._activeElement, true, false);\n            return true;\n        }\n        return false;\n    };\n    FocusZone.prototype._moveFocusPaging = function (isForward, useDefaultWrap) {\n        if (useDefaultWrap === void 0) { useDefaultWrap = true; }\n        var element = this._activeElement;\n        if (!element || !this._root.current) {\n            return false;\n        }\n        if (this._isElementInput(element)) {\n            if (!this._shouldInputLoseFocus(element, isForward)) {\n                return false;\n            }\n        }\n        var scrollableParent = findScrollableParent(element);\n        if (!scrollableParent) {\n            return false;\n        }\n        var candidateDistance = -1;\n        var candidateElement = undefined;\n        var targetTop = -1;\n        var targetBottom = -1;\n        var pagesize = scrollableParent.clientHeight;\n        var activeRect = element.getBoundingClientRect();\n        do {\n            element = isForward\n                ? getNextElement(this._root.current, element)\n                : getPreviousElement(this._root.current, element);\n            if (element) {\n                var targetRect = element.getBoundingClientRect();\n                var targetRectTop = Math.floor(targetRect.top);\n                var activeRectBottom = Math.floor(activeRect.bottom);\n                var targetRectBottom = Math.floor(targetRect.bottom);\n                var activeRectTop = Math.floor(activeRect.top);\n                var elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);\n                var isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;\n                var isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;\n                if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {\n                    break;\n                }\n                if (elementDistance > -1) {\n                    // for paging down\n                    if (isForward && targetRectTop > targetTop) {\n                        targetTop = targetRectTop;\n                        candidateDistance = elementDistance;\n                        candidateElement = element;\n                    }\n                    else if (!isForward && targetRectBottom < targetBottom) {\n                        // for paging up\n                        targetBottom = targetRectBottom;\n                        candidateDistance = elementDistance;\n                        candidateElement = element;\n                    }\n                    else if (candidateDistance === -1 || elementDistance <= candidateDistance) {\n                        candidateDistance = elementDistance;\n                        candidateElement = element;\n                    }\n                }\n            }\n        } while (element);\n        var changedFocus = false;\n        // Focus the closest candidate\n        if (candidateElement && candidateElement !== this._activeElement) {\n            changedFocus = true;\n            this.focusElement(candidateElement);\n            this._setFocusAlignment(candidateElement, false, true);\n        }\n        else if (this.props.isCircularNavigation && useDefaultWrap) {\n            if (isForward) {\n                return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));\n            }\n            return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));\n        }\n        return changedFocus;\n    };\n    FocusZone.prototype._setFocusAlignment = function (element, isHorizontal, isVertical) {\n        if (this.props.direction === FocusZoneDirection.bidirectional &&\n            (!this._focusAlignment || isHorizontal || isVertical)) {\n            var rect = element.getBoundingClientRect();\n            var left = rect.left + rect.width / 2;\n            var top_1 = rect.top + rect.height / 2;\n            if (!this._focusAlignment) {\n                this._focusAlignment = { left: left, top: top_1 };\n            }\n            if (isHorizontal) {\n                this._focusAlignment.left = left;\n            }\n            if (isVertical) {\n                this._focusAlignment.top = top_1;\n            }\n        }\n    };\n    FocusZone.prototype._isImmediateDescendantOfZone = function (element) {\n        return this._getOwnerZone(element) === this._root.current;\n    };\n    FocusZone.prototype._getOwnerZone = function (element) {\n        var parentElement = getParent(element, ALLOW_VIRTUAL_ELEMENTS);\n        while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {\n            if (isElementFocusZone(parentElement)) {\n                return parentElement;\n            }\n            parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n        }\n        return parentElement;\n    };\n    FocusZone.prototype._updateTabIndexes = function (element) {\n        if (!this._activeElement &&\n            this.props.defaultTabbableElement &&\n            typeof this.props.defaultTabbableElement === 'function') {\n            this._activeElement = this.props.defaultTabbableElement(this._root.current);\n        }\n        if (!element && this._root.current) {\n            this._defaultFocusElement = null;\n            element = this._root.current;\n            if (this._activeElement && !elementContains(element, this._activeElement)) {\n                this._activeElement = null;\n            }\n        }\n        // If active element changes state to disabled, set it to null.\n        // Otherwise, we lose keyboard accessibility to other elements in focus zone.\n        if (this._activeElement && !isElementTabbable(this._activeElement)) {\n            this._activeElement = null;\n        }\n        var childNodes = element && element.children;\n        for (var childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {\n            var child = childNodes[childIndex];\n            if (!isElementFocusZone(child)) {\n                // If the item is explicitly set to not be focusable then TABINDEX needs to be set to -1.\n                if (child.getAttribute && child.getAttribute(FocusZone_IS_FOCUSABLE_ATTRIBUTE) === 'false') {\n                    child.setAttribute(TABINDEX, '-1');\n                }\n                if (isElementTabbable(child)) {\n                    if (this.props.disabled) {\n                        child.setAttribute(TABINDEX, '-1');\n                    }\n                    else if (!this._isInnerZone &&\n                        ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)) {\n                        this._defaultFocusElement = child;\n                        if (child.getAttribute(TABINDEX) !== '0') {\n                            child.setAttribute(TABINDEX, '0');\n                        }\n                    }\n                    else if (child.getAttribute(TABINDEX) !== '-1') {\n                        child.setAttribute(TABINDEX, '-1');\n                    }\n                }\n                else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {\n                    // Disgusting IE hack. Sad face.\n                    child.setAttribute('focusable', 'false');\n                }\n            }\n            else if (child.getAttribute(FocusZone_IS_FOCUSABLE_ATTRIBUTE) === 'true') {\n                if (!this._isInnerZone &&\n                    ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)) {\n                    this._defaultFocusElement = child;\n                    if (child.getAttribute(TABINDEX) !== '0') {\n                        child.setAttribute(TABINDEX, '0');\n                    }\n                }\n                else if (child.getAttribute(TABINDEX) !== '-1') {\n                    child.setAttribute(TABINDEX, '-1');\n                }\n            }\n            this._updateTabIndexes(child);\n        }\n    };\n    FocusZone.prototype._isContentEditableElement = function (element) {\n        return element && element.getAttribute('contenteditable') === 'true';\n    };\n    FocusZone.prototype._isElementInput = function (element) {\n        if (element &&\n            element.tagName &&\n            (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')) {\n            return true;\n        }\n        return false;\n    };\n    FocusZone.prototype._shouldInputLoseFocus = function (element, isForward) {\n        // If a tab was used, we want to focus on the next element.\n        if (!this._processingTabKey &&\n            element &&\n            element.type &&\n            ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1) {\n            var selectionStart = element.selectionStart;\n            var selectionEnd = element.selectionEnd;\n            var isRangeSelected = selectionStart !== selectionEnd;\n            var inputValue = element.value;\n            var isReadonly = element.readOnly;\n            // We shouldn't lose focus in the following cases:\n            // 1. There is range selected.\n            // 2. When selection start is larger than 0 and it is backward and not readOnly.\n            // 3. when selection start is not the end of length, it is forward and not readOnly.\n            // 4. We press any of the arrow keys when our handleTabKey isn't none or undefined (only losing focus if we hit\n            // tab) and if shouldInputLoseFocusOnArrowKey is defined, if scenario prefers to not loose the focus which is\n            // determined by calling the callback shouldInputLoseFocusOnArrowKey\n            if (isRangeSelected ||\n                (selectionStart > 0 && !isForward && !isReadonly) ||\n                (selectionStart !== inputValue.length && isForward && !isReadonly) ||\n                (!!this.props.handleTabKey &&\n                    !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element)))) {\n                return false;\n            }\n        }\n        return true;\n    };\n    FocusZone.prototype._shouldWrapFocus = function (element, noWrapDataAttribute) {\n        return this.props.checkForNoWrap ? shouldWrapFocus(element, noWrapDataAttribute) : true;\n    };\n    /**\n     * Returns true if the element is a descendant of the FocusZone through a React portal.\n     */\n    FocusZone.prototype._portalContainsElement = function (element) {\n        return element && !!this._root.current && portalContainsElement(element, this._root.current);\n    };\n    FocusZone.prototype._getDocument = function () {\n        return getDocument(this._root.current);\n    };\n    FocusZone.defaultProps = {\n        isCircularNavigation: false,\n        direction: FocusZoneDirection.bidirectional,\n        shouldRaiseClicks: true,\n    };\n    return FocusZone;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=FocusZone.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/osDetector.js\n\nvar isMacResult;\n/**\n * Returns true if the user is on a Mac. Caches the result value.\n * @param reset - Reset the cached result value (mainly for testing).\n */\nfunction isMac(reset) {\n    if (typeof isMacResult === 'undefined' || reset) {\n        var win = getWindow();\n        var userAgent = win && win.navigator.userAgent;\n        isMacResult = !!userAgent && userAgent.indexOf('Macintosh') !== -1;\n    }\n    return !!isMacResult;\n}\n//# sourceMappingURL=osDetector.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/mobileDetector.js\n/**\n * Returns true if and only if the user is on a iOS device.\n * Used to determine whether iOS-specific behavior should be applied.\n */\nvar isIOS = function () {\n    if (!window || !window.navigator || !window.navigator.userAgent) {\n        return false;\n    }\n    return /iPad|iPhone|iPod/i.test(window.navigator.userAgent);\n};\n//# sourceMappingURL=mobileDetector.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/utilities/contextualMenu/contextualMenuUtility.js\n/**\n * Determines the effective checked state of a menu item.\n *\n * @param item {IContextualMenuItem} to get the check state of.\n * @returns {true} if the item is checked.\n * @returns {false} if the item is unchecked.\n * @returns {null} if the item is not checkable.\n */\nfunction getIsChecked(item) {\n    if (item.canCheck) {\n        return !!(item.isChecked || item.checked);\n    }\n    if (typeof item.isChecked === 'boolean') {\n        return item.isChecked;\n    }\n    if (typeof item.checked === 'boolean') {\n        return item.checked;\n    }\n    // Item is not checkable.\n    return null;\n}\nfunction hasSubmenu(item) {\n    return !!(item.subMenuProps || item.items);\n}\nfunction isItemDisabled(item) {\n    return !!(item.isDisabled || item.disabled);\n}\nfunction getMenuItemAriaRole(item) {\n    var isChecked = getIsChecked(item);\n    var canCheck = isChecked !== null;\n    return canCheck ? 'menuitemcheckbox' : 'menuitem';\n}\n//# sourceMappingURL=contextualMenuUtility.js.map\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(6);\nvar react_dom_default = /*#__PURE__*/__webpack_require__.n(react_dom);\n\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/hoist.js\nvar REACT_LIFECYCLE_EXCLUSIONS = [\n    'setState',\n    'render',\n    'componentWillMount',\n    'UNSAFE_componentWillMount',\n    'componentDidMount',\n    'componentWillReceiveProps',\n    'UNSAFE_componentWillReceiveProps',\n    'shouldComponentUpdate',\n    'componentWillUpdate',\n    'getSnapshotBeforeUpdate',\n    'UNSAFE_componentWillUpdate',\n    'componentDidUpdate',\n    'componentWillUnmount',\n];\n/**\n * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.\n *\n * @public\n * @param destination - The instance of the object to hoist the methods onto.\n * @param source - The instance of the object where the methods are hoisted from.\n * @param exclusions - (Optional) What methods to exclude from being hoisted.\n * @returns An array of names of methods that were hoisted.\n */\nfunction hoistMethods(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndestination, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nsource, exclusions) {\n    if (exclusions === void 0) { exclusions = REACT_LIFECYCLE_EXCLUSIONS; }\n    var hoisted = [];\n    var _loop_1 = function (methodName) {\n        if (typeof source[methodName] === 'function' &&\n            destination[methodName] === undefined &&\n            (!exclusions || exclusions.indexOf(methodName) === -1)) {\n            hoisted.push(methodName);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            destination[methodName] = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                source[methodName].apply(source, args);\n            };\n        }\n    };\n    for (var methodName in source) {\n        _loop_1(methodName);\n    }\n    return hoisted;\n}\n/**\n * Provides a method for convenience to unhoist hoisted methods.\n *\n * @public\n * @param source - The source object upon which methods were hoisted.\n * @param methodNames - An array of method names to unhoist.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction unhoistMethods(source, methodNames) {\n    methodNames.forEach(function (methodName) { return delete source[methodName]; });\n}\n//# sourceMappingURL=hoist.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/utilities/decorators/BaseDecorator.js\n\n\n\nvar BaseDecorator_BaseDecorator = /** @class */ (function (_super) {\n    __extends(BaseDecorator, _super);\n    function BaseDecorator(props) {\n        var _this = _super.call(this, props) || this;\n        _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);\n        return _this;\n    }\n    /**\n     * Updates the ref to the component composed by the decorator, which will also take care of hoisting\n     * (and unhoisting as appropriate) methods from said component.\n     *\n     * Pass this method as the argument to the 'ref' property of the composed component.\n     */\n    BaseDecorator.prototype._updateComposedComponentRef = function (composedComponentInstance) {\n        this._composedComponentInstance = composedComponentInstance;\n        if (composedComponentInstance) {\n            this._hoisted = hoistMethods(this, composedComponentInstance);\n        }\n        else if (this._hoisted) {\n            unhoistMethods(this, this._hoisted);\n        }\n    };\n    return BaseDecorator;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=BaseDecorator.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/utilities/decorators/withResponsiveMode.js\n\n\n\n\n\nvar ResponsiveMode;\n(function (ResponsiveMode) {\n    ResponsiveMode[ResponsiveMode[\"small\"] = 0] = \"small\";\n    ResponsiveMode[ResponsiveMode[\"medium\"] = 1] = \"medium\";\n    ResponsiveMode[ResponsiveMode[\"large\"] = 2] = \"large\";\n    ResponsiveMode[ResponsiveMode[\"xLarge\"] = 3] = \"xLarge\";\n    ResponsiveMode[ResponsiveMode[\"xxLarge\"] = 4] = \"xxLarge\";\n    ResponsiveMode[ResponsiveMode[\"xxxLarge\"] = 5] = \"xxxLarge\";\n    ResponsiveMode[ResponsiveMode[\"unknown\"] = 999] = \"unknown\";\n})(ResponsiveMode || (ResponsiveMode = {}));\nvar RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nvar _defaultMode;\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nvar _lastMode;\n/**\n * Allows a server rendered scenario to provide a default responsive mode.\n */\nfunction setResponsiveMode(responsiveMode) {\n    _defaultMode = responsiveMode;\n}\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n */\nfunction initializeResponsiveMode(element) {\n    if (typeof window !== 'undefined') {\n        var currentWindow = (element && getWindow(element)) || window;\n        getResponsiveMode(currentWindow);\n    }\n}\nfunction getInitialResponsiveMode() {\n    return _defaultMode || _lastMode || ResponsiveMode.large;\n}\nfunction withResponsiveMode(ComposedComponent) {\n    var resultClass = /** @class */ (function (_super) {\n        __extends(WithResponsiveMode, _super);\n        function WithResponsiveMode(props) {\n            var _this = _super.call(this, props) || this;\n            _this._onResize = function () {\n                var element = Object(react_dom[\"findDOMNode\"])(_this);\n                var currentWindow = (element && getWindow(element)) || window;\n                var responsiveMode = getResponsiveMode(currentWindow);\n                if (responsiveMode !== _this.state.responsiveMode) {\n                    _this.setState({\n                        responsiveMode: responsiveMode,\n                    });\n                }\n            };\n            _this._events = new EventGroup_EventGroup(_this);\n            _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);\n            _this.state = {\n                responsiveMode: getInitialResponsiveMode(),\n            };\n            return _this;\n        }\n        WithResponsiveMode.prototype.componentDidMount = function () {\n            this._events.on(window, 'resize', this._onResize);\n            this._onResize();\n        };\n        WithResponsiveMode.prototype.componentWillUnmount = function () {\n            this._events.dispose();\n        };\n        WithResponsiveMode.prototype.render = function () {\n            var responsiveMode = this.state.responsiveMode;\n            return responsiveMode === ResponsiveMode.unknown ? null : (react[\"createElement\"](ComposedComponent, __assign({ ref: this._updateComposedComponentRef, responsiveMode: responsiveMode }, this.props)));\n        };\n        return WithResponsiveMode;\n    }(BaseDecorator_BaseDecorator));\n    return hoistStatics(ComposedComponent, resultClass);\n}\nfunction getResponsiveMode(currentWindow) {\n    var responsiveMode = ResponsiveMode.small;\n    if (currentWindow) {\n        try {\n            while (currentWindow.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n                responsiveMode++;\n            }\n        }\n        catch (e) {\n            // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n            responsiveMode = getInitialResponsiveMode();\n        }\n        // Tracking last mode just gives us a better default in future renders,\n        // which avoids starting with the wrong value if we've measured once.\n        _lastMode = responsiveMode;\n    }\n    else {\n        if (_defaultMode !== undefined) {\n            responsiveMode = _defaultMode;\n        }\n        else {\n            throw new Error('Content was rendered in a server environment without providing a default responsive mode. ' +\n                'Call setResponsiveMode to define what the responsive mode is.');\n        }\n    }\n    return responsiveMode;\n}\n//# sourceMappingURL=withResponsiveMode.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/on.js\nfunction on(element, eventName, callback, options) {\n    element.addEventListener(eventName, callback, options);\n    return function () { return element.removeEventListener(eventName, callback, options); };\n}\n//# sourceMappingURL=on.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/utilities/positioning/positioning.types.js\nvar RectangleEdge;\n(function (RectangleEdge) {\n    RectangleEdge[RectangleEdge[\"top\"] = 1] = \"top\";\n    RectangleEdge[RectangleEdge[\"bottom\"] = -1] = \"bottom\";\n    RectangleEdge[RectangleEdge[\"left\"] = 2] = \"left\";\n    RectangleEdge[RectangleEdge[\"right\"] = -2] = \"right\";\n})(RectangleEdge || (RectangleEdge = {}));\nvar Position;\n(function (Position) {\n    Position[Position[\"top\"] = 0] = \"top\";\n    Position[Position[\"bottom\"] = 1] = \"bottom\";\n    Position[Position[\"start\"] = 2] = \"start\";\n    Position[Position[\"end\"] = 3] = \"end\";\n})(Position || (Position = {}));\n//# sourceMappingURL=positioning.types.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/Rectangle.js\n/**\n * Rectangle helper class.\n *\n * @public\n * {@docCategory Rectangle}\n */\nvar Rectangle_Rectangle = /** @class */ (function () {\n    function Rectangle(left, right, top, bottom) {\n        if (left === void 0) { left = 0; }\n        if (right === void 0) { right = 0; }\n        if (top === void 0) { top = 0; }\n        if (bottom === void 0) { bottom = 0; }\n        this.top = top;\n        this.bottom = bottom;\n        this.left = left;\n        this.right = right;\n    }\n    Object.defineProperty(Rectangle.prototype, \"width\", {\n        /**\n         * Calculated automatically by subtracting the right from left\n         */\n        get: function () {\n            return this.right - this.left;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"height\", {\n        /**\n         * Calculated automatically by subtracting the bottom from top.\n         */\n        get: function () {\n            return this.bottom - this.top;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Tests if another rect is approximately equal to this rect (within 4 decimal places.)\n     */\n    Rectangle.prototype.equals = function (rect) {\n        // Fixing to 4 decimal places because it allows enough precision and will handle cases when something\n        // should be rounded, like .999999 should round to 1.\n        return (parseFloat(this.top.toFixed(4)) === parseFloat(rect.top.toFixed(4)) &&\n            parseFloat(this.bottom.toFixed(4)) === parseFloat(rect.bottom.toFixed(4)) &&\n            parseFloat(this.left.toFixed(4)) === parseFloat(rect.left.toFixed(4)) &&\n            parseFloat(this.right.toFixed(4)) === parseFloat(rect.right.toFixed(4)));\n    };\n    return Rectangle;\n}());\n\n//# sourceMappingURL=Rectangle.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/utilities/positioning/positioning.js\nvar positioning_a;\n\n\n\n\nvar positioning_Rectangle = /** @class */ (function (_super) {\n    __extends(Rectangle, _super);\n    function Rectangle() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Rectangle;\n}(Rectangle_Rectangle));\n\nfunction _createPositionData(targetEdge, alignmentEdge, isAuto) {\n    return {\n        targetEdge: targetEdge,\n        alignmentEdge: alignmentEdge,\n        isAuto: isAuto,\n    };\n}\n// Currently the beakPercent is set to 50 for all positions meaning that it should tend to the center of the target\nvar DirectionalDictionary = (positioning_a = {},\n    positioning_a[DirectionalHint.topLeftEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.left),\n    positioning_a[DirectionalHint.topCenter] = _createPositionData(RectangleEdge.top),\n    positioning_a[DirectionalHint.topRightEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.right),\n    positioning_a[DirectionalHint.topAutoEdge] = _createPositionData(RectangleEdge.top, undefined, true),\n    positioning_a[DirectionalHint.bottomLeftEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.left),\n    positioning_a[DirectionalHint.bottomCenter] = _createPositionData(RectangleEdge.bottom),\n    positioning_a[DirectionalHint.bottomRightEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.right),\n    positioning_a[DirectionalHint.bottomAutoEdge] = _createPositionData(RectangleEdge.bottom, undefined, true),\n    positioning_a[DirectionalHint.leftTopEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.top),\n    positioning_a[DirectionalHint.leftCenter] = _createPositionData(RectangleEdge.left),\n    positioning_a[DirectionalHint.leftBottomEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.bottom),\n    positioning_a[DirectionalHint.rightTopEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.top),\n    positioning_a[DirectionalHint.rightCenter] = _createPositionData(RectangleEdge.right),\n    positioning_a[DirectionalHint.rightBottomEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.bottom),\n    positioning_a);\nfunction _isRectangleWithinBounds(rect, boundingRect) {\n    if (rect.top < boundingRect.top) {\n        return false;\n    }\n    if (rect.bottom > boundingRect.bottom) {\n        return false;\n    }\n    if (rect.left < boundingRect.left) {\n        return false;\n    }\n    if (rect.right > boundingRect.right) {\n        return false;\n    }\n    return true;\n}\n/**\n * Gets all of the edges of a rectangle that are outside of the given bounds.\n * If there are no out of bounds edges it returns an empty array.\n */\nfunction _getOutOfBoundsEdges(rect, boundingRect) {\n    var outOfBounds = [];\n    if (rect.top < boundingRect.top) {\n        outOfBounds.push(RectangleEdge.top);\n    }\n    if (rect.bottom > boundingRect.bottom) {\n        outOfBounds.push(RectangleEdge.bottom);\n    }\n    if (rect.left < boundingRect.left) {\n        outOfBounds.push(RectangleEdge.left);\n    }\n    if (rect.right > boundingRect.right) {\n        outOfBounds.push(RectangleEdge.right);\n    }\n    return outOfBounds;\n}\nfunction _getEdgeValue(rect, edge) {\n    return rect[RectangleEdge[edge]];\n}\nfunction _setEdgeValue(rect, edge, value) {\n    rect[RectangleEdge[edge]] = value;\n    return rect;\n}\n/**\n * Returns the middle value of an edge. Only returns 1 value rather than xy coordinates as\n * the itself already contains the other coordinate.\n * For instance, a bottom edge's current value is it's y coordinate, so the number returned is the x.\n */\nfunction _getCenterValue(rect, edge) {\n    var edges = _getFlankingEdges(edge);\n    return (_getEdgeValue(rect, edges.positiveEdge) + _getEdgeValue(rect, edges.negativeEdge)) / 2;\n}\n/**\n * Flips the value depending on the edge.\n * If the edge is a \"positive\" edge, Top or Left, then the value should stay as it is.\n * If the edge is a \"negative\" edge, Bottom or Right, then the value should be flipped.\n * This is to account for the fact that the coordinates are effectively reveserved in certain cases for the\n * \"negative\" edges.\n *\n * For example, when testing to see if a bottom edge 1 is within the bounds of another bottom edge 2:\n * If edge 1 is greater than edge 2 then it is out of bounds. This is reversed for top edge 1 and top edge 2.\n * If top edge 1 is less than edge 2 then it is out of bounds.\n */\nfunction _getRelativeEdgeValue(edge, value) {\n    if (edge > 0) {\n        return value;\n    }\n    else {\n        return value * -1;\n    }\n}\nfunction _getRelativeRectEdgeValue(edge, rect) {\n    return _getRelativeEdgeValue(edge, _getEdgeValue(rect, edge));\n}\nfunction _getRelativeEdgeDifference(rect, hostRect, edge) {\n    var edgeDifference = _getEdgeValue(rect, edge) - _getEdgeValue(hostRect, edge);\n    return _getRelativeEdgeValue(edge, edgeDifference);\n}\n/**\n * Moves the edge of a rectangle to the value given. It only moves the edge in a linear direction based on that edge.\n * For example, if it's a bottom edge it will only change y coordinates.\n */\nfunction _moveEdge(rect, edge, newValue) {\n    var difference = _getEdgeValue(rect, edge) - newValue;\n    rect = _setEdgeValue(rect, edge, newValue);\n    rect = _setEdgeValue(rect, edge * -1, _getEdgeValue(rect, edge * -1) - difference);\n    return rect;\n}\n/**\n * Aligns the edge on the passed in rect to the target. If there is a gap then it will have that space between the two.\n */\nfunction _alignEdges(rect, target, edge, gap) {\n    if (gap === void 0) { gap = 0; }\n    return _moveEdge(rect, edge, _getEdgeValue(target, edge) + _getRelativeEdgeValue(edge, gap));\n}\n/**\n * Aligns the targetEdge on the passed in target to the rects corresponding opposite edge.\n * For instance if targetEdge is bottom, then the rects top will be moved to match it.\n */\nfunction _alignOppositeEdges(rect, target, targetEdge, gap) {\n    if (gap === void 0) { gap = 0; }\n    var oppositeEdge = targetEdge * -1;\n    var adjustedGap = _getRelativeEdgeValue(oppositeEdge, gap);\n    return _moveEdge(rect, targetEdge * -1, _getEdgeValue(target, targetEdge) + adjustedGap);\n}\n/**\n * Tests to see if the given edge is within the bounds of the given rectangle.\n */\nfunction _isEdgeInBounds(rect, bounds, edge) {\n    var adjustedRectValue = _getRelativeRectEdgeValue(edge, rect);\n    return adjustedRectValue > _getRelativeRectEdgeValue(edge, bounds);\n}\n/**\n * Attempts to move the rectangle through various sides of the target to find a place to fit.\n * If no fit is found, the original position should be returned.\n */\nfunction _flipToFit(rect, target, bounding, positionData, gap) {\n    if (gap === void 0) { gap = 0; }\n    var directions = [\n        RectangleEdge.left,\n        RectangleEdge.right,\n        RectangleEdge.bottom,\n        RectangleEdge.top,\n    ];\n    // In RTL page, RectangleEdge.right has a higher priority than RectangleEdge.left, so the order should be updated.\n    if (rtl_getRTL()) {\n        directions[0] *= -1;\n        directions[1] *= -1;\n    }\n    var currentEstimate = rect;\n    var currentEdge = positionData.targetEdge;\n    var currentAlignment = positionData.alignmentEdge;\n    // Keep switching sides until one is found with enough space.\n    // If all sides don't fit then return the unmodified element.\n    for (var i = 0; i < 4; i++) {\n        if (!_isEdgeInBounds(currentEstimate, bounding, currentEdge)) {\n            directions.splice(directions.indexOf(currentEdge), 1);\n            if (directions.length > 0) {\n                if (directions.indexOf(currentEdge * -1) > -1) {\n                    currentEdge = currentEdge * -1;\n                }\n                else {\n                    currentAlignment = currentEdge;\n                    currentEdge = directions.slice(-1)[0];\n                }\n                currentEstimate = _estimatePosition(rect, target, { targetEdge: currentEdge, alignmentEdge: currentAlignment }, gap);\n            }\n        }\n        else {\n            return {\n                elementRectangle: currentEstimate,\n                targetEdge: currentEdge,\n                alignmentEdge: currentAlignment,\n            };\n        }\n    }\n    return {\n        elementRectangle: rect,\n        targetEdge: positionData.targetEdge,\n        alignmentEdge: currentAlignment,\n    };\n}\n/**\n * Flips only the alignment edge of an element rectangle. This is used instead of nudging the alignment edges\n * into position, when alignTargetEdge is specified.\n */\nfunction _flipAlignmentEdge(elementEstimate, target, gap, coverTarget) {\n    var alignmentEdge = elementEstimate.alignmentEdge, targetEdge = elementEstimate.targetEdge, elementRectangle = elementEstimate.elementRectangle;\n    var oppositeEdge = alignmentEdge * -1;\n    var newEstimate = _estimatePosition(elementRectangle, target, { targetEdge: targetEdge, alignmentEdge: oppositeEdge }, gap, coverTarget);\n    return {\n        elementRectangle: newEstimate,\n        targetEdge: targetEdge,\n        alignmentEdge: oppositeEdge,\n    };\n}\n/**\n * Adjusts a element rectangle to fit within the bounds given. If directionalHintFixed or covertarget is passed in\n * then the element will not flip sides on the target. They will, however, be nudged to fit within the bounds given.\n */\nfunction _adjustFitWithinBounds(element, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {\n    if (gap === void 0) { gap = 0; }\n    var alignmentEdge = positionData.alignmentEdge, alignTargetEdge = positionData.alignTargetEdge;\n    var elementEstimate = {\n        elementRectangle: element,\n        targetEdge: positionData.targetEdge,\n        alignmentEdge: alignmentEdge,\n    };\n    if (!directionalHintFixed && !coverTarget) {\n        elementEstimate = _flipToFit(element, target, bounding, positionData, gap);\n    }\n    var outOfBounds = _getOutOfBoundsEdges(element, bounding);\n    if (alignTargetEdge) {\n        // The edge opposite to the alignment edge might be out of bounds.\n        // Flip alignment to see if we can get it within bounds.\n        if (elementEstimate.alignmentEdge && outOfBounds.indexOf(elementEstimate.alignmentEdge * -1) > -1) {\n            var flippedElementEstimate = _flipAlignmentEdge(elementEstimate, target, gap, coverTarget);\n            if (_isRectangleWithinBounds(flippedElementEstimate.elementRectangle, bounding)) {\n                return flippedElementEstimate;\n            }\n            else {\n                // If the flipped elements edges are still out of bounds, try nudging it.\n                elementEstimate = _alignOutOfBoundsEdges(_getOutOfBoundsEdges(flippedElementEstimate.elementRectangle, bounding), elementEstimate, bounding);\n            }\n        }\n    }\n    else {\n        elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding);\n    }\n    return elementEstimate;\n}\n/**\n * Iterates through a list of out of bounds edges and tries to nudge and align them.\n * @param outOfBoundsEdges - Array of edges that are out of bounds\n * @param elementEstimate - The current element positioning estimate\n * @param bounding - The current bounds\n */\nfunction _alignOutOfBoundsEdges(outOfBoundsEdges, elementEstimate, bounding) {\n    for (var _i = 0, outOfBoundsEdges_1 = outOfBoundsEdges; _i < outOfBoundsEdges_1.length; _i++) {\n        var direction = outOfBoundsEdges_1[_i];\n        elementEstimate.elementRectangle = _alignEdges(elementEstimate.elementRectangle, bounding, direction);\n    }\n    return elementEstimate;\n}\n/**\n * Moves the middle point on an edge to the point given.\n * Only moves in one direction. For instance if a bottom edge is passed in, then\n * the bottom edge will be moved in the x axis to match the point.\n */\nfunction _centerEdgeToPoint(rect, edge, point) {\n    var positiveEdge = _getFlankingEdges(edge).positiveEdge;\n    var elementMiddle = _getCenterValue(rect, edge);\n    var distanceToMiddle = elementMiddle - _getEdgeValue(rect, positiveEdge);\n    return _moveEdge(rect, positiveEdge, point - distanceToMiddle);\n}\n/**\n * Moves the element rectangle to be appropriately positioned relative to a given target.\n * Does not flip or adjust the element.\n */\nfunction _estimatePosition(elementToPosition, target, positionData, gap, coverTarget) {\n    if (gap === void 0) { gap = 0; }\n    var estimatedElementPosition;\n    var alignmentEdge = positionData.alignmentEdge, targetEdge = positionData.targetEdge;\n    var elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n    estimatedElementPosition = coverTarget\n        ? _alignEdges(elementToPosition, target, targetEdge, gap)\n        : _alignOppositeEdges(elementToPosition, target, targetEdge, gap);\n    // if no alignment edge is provided it's supposed to be centered.\n    if (!alignmentEdge) {\n        var targetMiddlePoint = _getCenterValue(target, targetEdge);\n        estimatedElementPosition = _centerEdgeToPoint(estimatedElementPosition, elementEdge, targetMiddlePoint);\n    }\n    else {\n        estimatedElementPosition = _alignEdges(estimatedElementPosition, target, alignmentEdge);\n    }\n    return estimatedElementPosition;\n}\n/**\n * Returns the non-opposite edges of the target edge.\n * For instance if bottom is passed in then left and right will be returned.\n */\nfunction _getFlankingEdges(edge) {\n    if (edge === RectangleEdge.top || edge === RectangleEdge.bottom) {\n        return {\n            positiveEdge: RectangleEdge.left,\n            negativeEdge: RectangleEdge.right,\n        };\n    }\n    else {\n        return {\n            positiveEdge: RectangleEdge.top,\n            negativeEdge: RectangleEdge.bottom,\n        };\n    }\n}\n/**\n * Retrieve the final value for the return edge of elementRectangle. If the elementRectangle is closer to one side\n * of the bounds versus the other, the return edge is flipped to grow inward.\n */\nfunction _finalizeReturnEdge(elementRectangle, returnEdge, bounds) {\n    if (bounds &&\n        Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge)) >\n            Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge * -1))) {\n        return returnEdge * -1;\n    }\n    return returnEdge;\n}\n/**\n * Finalizes the element positon based on the hostElement. Only returns the\n * rectangle values to position such that they are anchored to the target.\n * This helps prevent resizing from looking very strange.\n * For instance, if the target edge is top and aligned with the left side then\n * the bottom and left values are returned so as the callou shrinks it shrinks towards that corner.\n */\nfunction _finalizeElementPosition(elementRectangle, hostElement, targetEdge, bounds, alignmentEdge, coverTarget, doNotFinalizeReturnEdge) {\n    var returnValue = {};\n    var hostRect = _getRectangleFromElement(hostElement);\n    var elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n    var elementEdgeString = RectangleEdge[elementEdge];\n    var returnEdge = alignmentEdge ? alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge;\n    if (!doNotFinalizeReturnEdge) {\n        returnEdge = _finalizeReturnEdge(elementRectangle, returnEdge, bounds);\n    }\n    returnValue[elementEdgeString] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge);\n    returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge);\n    return returnValue;\n}\n// Since the beak is rotated 45 degrees the actual height/width is the length of the diagonal.\n// We still want to position the beak based on it's midpoint which does not change. It will\n// be at (beakwidth / 2, beakwidth / 2)\nfunction _calculateActualBeakWidthInPixels(beakWidth) {\n    return Math.sqrt(beakWidth * beakWidth * 2);\n}\n/**\n * Returns the appropriate IPositionData based on the props altered for RTL.\n * If directionalHintForRTL is passed in that is used if the page is RTL.\n * If directionalHint is specified, no directionalHintForRTL is available, and the page is RTL, the hint will be\n * flipped (e.g. bottomLeftEdge would become bottomRightEdge).\n *\n * If there is no directionalHint passed in, bottomAutoEdge is chosen automatically.\n */\nfunction _getPositionData(directionalHint, directionalHintForRTL, previousPositions) {\n    if (directionalHint === void 0) { directionalHint = DirectionalHint.bottomAutoEdge; }\n    if (previousPositions) {\n        return {\n            alignmentEdge: previousPositions.alignmentEdge,\n            isAuto: previousPositions.isAuto,\n            targetEdge: previousPositions.targetEdge,\n        };\n    }\n    var positionInformation = __assign({}, DirectionalDictionary[directionalHint]);\n    if (rtl_getRTL()) {\n        // If alignment edge exists and that alignment edge is -2 or 2, right or left, then flip it.\n        if (positionInformation.alignmentEdge && positionInformation.alignmentEdge % 2 === 0) {\n            positionInformation.alignmentEdge = positionInformation.alignmentEdge * -1;\n        }\n        return directionalHintForRTL !== undefined ? DirectionalDictionary[directionalHintForRTL] : positionInformation;\n    }\n    return positionInformation;\n}\n/**\n * Get's the alignment data for the given information. This only really matters if the positioning is Auto.\n * If it is auto then the alignmentEdge should be chosen based on the target edge's position relative to\n * the center of the page.\n */\nfunction _getAlignmentData(positionData, target, boundingRect, coverTarget, alignTargetEdge) {\n    if (positionData.isAuto) {\n        positionData.alignmentEdge = getClosestEdge(positionData.targetEdge, target, boundingRect);\n    }\n    positionData.alignTargetEdge = alignTargetEdge;\n    return positionData;\n}\nfunction getClosestEdge(targetEdge, target, boundingRect) {\n    var targetCenter = _getCenterValue(target, targetEdge);\n    var boundingCenter = _getCenterValue(boundingRect, targetEdge);\n    var _a = _getFlankingEdges(targetEdge), positiveEdge = _a.positiveEdge, negativeEdge = _a.negativeEdge;\n    if (targetCenter <= boundingCenter) {\n        return positiveEdge;\n    }\n    else {\n        return negativeEdge;\n    }\n}\nfunction _positionElementWithinBounds(elementToPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {\n    var estimatedElementPosition = _estimatePosition(elementToPosition, target, positionData, gap, coverTarget);\n    if (_isRectangleWithinBounds(estimatedElementPosition, bounding)) {\n        return {\n            elementRectangle: estimatedElementPosition,\n            targetEdge: positionData.targetEdge,\n            alignmentEdge: positionData.alignmentEdge,\n        };\n    }\n    else {\n        return _adjustFitWithinBounds(elementToPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget);\n    }\n}\nfunction _finalizeBeakPosition(elementPosition, positionedBeak, bounds) {\n    var targetEdge = elementPosition.targetEdge * -1;\n    // The \"host\" element that we will use to help position the beak.\n    var actualElement = new positioning_Rectangle(0, elementPosition.elementRectangle.width, 0, elementPosition.elementRectangle.height);\n    var returnValue = {};\n    var returnEdge = _finalizeReturnEdge(elementPosition.elementRectangle, elementPosition.alignmentEdge ? elementPosition.alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge, bounds);\n    returnValue[RectangleEdge[targetEdge]] = _getEdgeValue(positionedBeak, targetEdge);\n    returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(positionedBeak, actualElement, returnEdge);\n    return {\n        elementPosition: __assign({}, returnValue),\n        closestEdge: getClosestEdge(elementPosition.targetEdge, positionedBeak, actualElement),\n        targetEdge: targetEdge,\n    };\n}\nfunction _positionBeak(beakWidth, elementPosition) {\n    var target = elementPosition.targetRectangle;\n    /**\n     * Note about beak positioning: The actual beak width only matters for getting the gap between the callout and\n     * target, it does not impact the beak placement within the callout. For example example, if the beakWidth is 8,\n     * then the actual beakWidth is sqrroot(8^2 + 8^2) = 11.31x11.31. So the callout will need to be an extra 3 pixels\n     * away from its target. While the beak is being positioned in the callout it still acts as though it were 8x8.\n     */\n    var _a = _getFlankingEdges(elementPosition.targetEdge), positiveEdge = _a.positiveEdge, negativeEdge = _a.negativeEdge;\n    var beakTargetPoint = _getCenterValue(target, elementPosition.targetEdge);\n    var elementBounds = new positioning_Rectangle(beakWidth / 2, elementPosition.elementRectangle.width - beakWidth / 2, beakWidth / 2, elementPosition.elementRectangle.height - beakWidth / 2);\n    var beakPosition = new positioning_Rectangle(0, beakWidth, 0, beakWidth);\n    beakPosition = _moveEdge(beakPosition, elementPosition.targetEdge * -1, -beakWidth / 2);\n    beakPosition = _centerEdgeToPoint(beakPosition, elementPosition.targetEdge * -1, beakTargetPoint - _getRelativeRectEdgeValue(positiveEdge, elementPosition.elementRectangle));\n    if (!_isEdgeInBounds(beakPosition, elementBounds, positiveEdge)) {\n        beakPosition = _alignEdges(beakPosition, elementBounds, positiveEdge);\n    }\n    else if (!_isEdgeInBounds(beakPosition, elementBounds, negativeEdge)) {\n        beakPosition = _alignEdges(beakPosition, elementBounds, negativeEdge);\n    }\n    return beakPosition;\n}\nfunction _getRectangleFromElement(element) {\n    var clientRect = element.getBoundingClientRect();\n    return new positioning_Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);\n}\nfunction _getRectangleFromIRect(rect) {\n    return new positioning_Rectangle(rect.left, rect.right, rect.top, rect.bottom);\n}\nfunction _getTargetRect(bounds, target) {\n    var targetRectangle;\n    if (target) {\n        // eslint-disable-next-line no-extra-boolean-cast\n        if (!!target.preventDefault) {\n            var ev = target;\n            targetRectangle = new positioning_Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);\n            // eslint-disable-next-line no-extra-boolean-cast\n        }\n        else if (!!target.getBoundingClientRect) {\n            targetRectangle = _getRectangleFromElement(target);\n            // HTMLImgElements can have x and y values. The check for it being a point must go last.\n        }\n        else {\n            var point = target;\n            // eslint-disable-next-line deprecation/deprecation\n            var left = point.left || point.x;\n            // eslint-disable-next-line deprecation/deprecation\n            var top_1 = point.top || point.y;\n            targetRectangle = new positioning_Rectangle(left, left, top_1, top_1);\n        }\n        if (!_isRectangleWithinBounds(targetRectangle, bounds)) {\n            var outOfBounds = _getOutOfBoundsEdges(targetRectangle, bounds);\n            for (var _i = 0, outOfBounds_1 = outOfBounds; _i < outOfBounds_1.length; _i++) {\n                var direction = outOfBounds_1[_i];\n                targetRectangle[RectangleEdge[direction]] = bounds[RectangleEdge[direction]];\n            }\n        }\n    }\n    else {\n        targetRectangle = new positioning_Rectangle(0, 0, 0, 0);\n    }\n    return targetRectangle;\n}\n/**\n * If max height is less than zero it returns the bounds height instead.\n */\nfunction _getMaxHeightFromTargetRectangle(targetRectangle, targetEdge, gapSpace, bounds, coverTarget) {\n    var maxHeight = 0;\n    var directionalHint = DirectionalDictionary[targetEdge];\n    // If cover target is set, then the max height should be calculated using the opposite of the target edge since\n    // that's the direction that the callout will expand in.\n    // For instance, if the directionalhint is bottomLeftEdge then the callout will position so it's bottom edge\n    // is aligned with the bottom of the target and expand up towards the top of the screen and the calculated max height\n    // is (bottom of target) - (top of screen) - gapSpace.\n    var target = coverTarget ? directionalHint.targetEdge * -1 : directionalHint.targetEdge;\n    if (target === RectangleEdge.top) {\n        maxHeight = _getEdgeValue(targetRectangle, directionalHint.targetEdge) - bounds.top - gapSpace;\n    }\n    else if (target === RectangleEdge.bottom) {\n        maxHeight = bounds.bottom - _getEdgeValue(targetRectangle, directionalHint.targetEdge) - gapSpace;\n    }\n    else {\n        maxHeight = bounds.bottom - targetRectangle.top - gapSpace;\n    }\n    return maxHeight > 0 ? maxHeight : bounds.height;\n}\nfunction _positionElementRelative(props, elementToPosition, boundingRect, previousPositions) {\n    var gap = props.gapSpace ? props.gapSpace : 0;\n    var targetRect = _getTargetRect(boundingRect, props.target);\n    var positionData = _getAlignmentData(_getPositionData(props.directionalHint, props.directionalHintForRTL, previousPositions), targetRect, boundingRect, props.coverTarget, props.alignTargetEdge);\n    var positionedElement = _positionElementWithinBounds(_getRectangleFromElement(elementToPosition), targetRect, boundingRect, positionData, gap, props.directionalHintFixed, props.coverTarget);\n    return __assign(__assign({}, positionedElement), { targetRectangle: targetRect });\n}\nfunction _finalizePositionData(positionedElement, hostElement, bounds, coverTarget, doNotFinalizeReturnEdge) {\n    var finalizedElement = _finalizeElementPosition(positionedElement.elementRectangle, hostElement, positionedElement.targetEdge, bounds, positionedElement.alignmentEdge, coverTarget, doNotFinalizeReturnEdge);\n    return {\n        elementPosition: finalizedElement,\n        targetEdge: positionedElement.targetEdge,\n        alignmentEdge: positionedElement.alignmentEdge,\n    };\n}\nfunction _positionElement(props, hostElement, elementToPosition, previousPositions) {\n    var boundingRect = props.bounds\n        ? _getRectangleFromIRect(props.bounds)\n        : new positioning_Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n    var positionedElement = _positionElementRelative(props, elementToPosition, boundingRect, previousPositions);\n    return _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget);\n}\nfunction _positionCallout(props, hostElement, callout, previousPositions, doNotFinalizeReturnEdge) {\n    var beakWidth = props.isBeakVisible ? props.beakWidth || 0 : 0;\n    var gap = _calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);\n    var positionProps = props;\n    positionProps.gapSpace = gap;\n    var boundingRect = props.bounds\n        ? _getRectangleFromIRect(props.bounds)\n        : new positioning_Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n    var positionedElement = _positionElementRelative(positionProps, callout, boundingRect, previousPositions);\n    var beakPositioned = _positionBeak(beakWidth, positionedElement);\n    var finalizedBeakPosition = _finalizeBeakPosition(positionedElement, beakPositioned, boundingRect);\n    return __assign(__assign({}, _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget, doNotFinalizeReturnEdge)), { beakPosition: finalizedBeakPosition });\n}\nfunction _positionCard(props, hostElement, callout, previousPositions) {\n    return _positionCallout(props, hostElement, callout, previousPositions, true);\n}\n// END PRIVATE FUNCTIONS\nvar __positioningTestPackage = {\n    _finalizePositionData: _finalizePositionData,\n    _finalizeBeakPosition: _finalizeBeakPosition,\n    _calculateActualBeakWidthInPixels: _calculateActualBeakWidthInPixels,\n    _positionElementWithinBounds: _positionElementWithinBounds,\n    _positionBeak: _positionBeak,\n    _getPositionData: _getPositionData,\n    _getMaxHeightFromTargetRectangle: _getMaxHeightFromTargetRectangle,\n};\n/**\n * Used to position an element relative to the given positioning props.\n * If positioning has been completed before, previousPositions can be passed to ensure that the positioning element\n * repositions based on its previous targets rather than starting with directionalhint.\n */\nfunction positionElement(props, hostElement, elementToPosition, previousPositions) {\n    return _positionElement(props, hostElement, elementToPosition, previousPositions);\n}\nfunction positionCallout(props, hostElement, elementToPosition, previousPositions) {\n    return _positionCallout(props, hostElement, elementToPosition, previousPositions);\n}\nfunction positionCard(props, hostElement, elementToPosition, previousPositions) {\n    return _positionCard(props, hostElement, elementToPosition, previousPositions);\n}\n/**\n * Get's the maximum height that a rectangle can have in order to fit below or above a target.\n * If the directional hint specifies a left or right edge (i.e. leftCenter) it will limit the height to the topBorder\n * of the target given.\n * If no bounds are provided then the window is treated as the bounds.\n */\nfunction getMaxHeight(target, targetEdge, gapSpace, bounds, coverTarget) {\n    if (gapSpace === void 0) { gapSpace = 0; }\n    var mouseTarget = target;\n    var elementTarget = target;\n    var pointTarget = target;\n    var targetRect;\n    var boundingRectangle = bounds\n        ? _getRectangleFromIRect(bounds)\n        : new positioning_Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n    // eslint-disable-next-line deprecation/deprecation\n    var left = pointTarget.left || pointTarget.x;\n    // eslint-disable-next-line deprecation/deprecation\n    var top = pointTarget.top || pointTarget.y;\n    // eslint-disable-next-line no-extra-boolean-cast -- may not actually be a MouseEvent\n    if (!!mouseTarget.stopPropagation) {\n        targetRect = new positioning_Rectangle(mouseTarget.clientX, mouseTarget.clientX, mouseTarget.clientY, mouseTarget.clientY);\n    }\n    else if (left !== undefined && top !== undefined) {\n        targetRect = new positioning_Rectangle(left, left, top, top);\n    }\n    else {\n        targetRect = _getRectangleFromElement(elementTarget);\n    }\n    return _getMaxHeightFromTargetRectangle(targetRect, targetEdge, gapSpace, boundingRectangle, coverTarget);\n}\n/**\n * Returns the opposite edge of the given RectangleEdge.\n */\nfunction getOppositeEdge(edge) {\n    return edge * -1;\n}\nfunction _getBoundsFromTargetWindow(target, targetWindow) {\n    var segments = undefined;\n    if (targetWindow.getWindowSegments) {\n        segments = targetWindow.getWindowSegments();\n    }\n    // Identify if we're dealing with single screen scenarios.\n    if (segments === undefined || segments.length <= 1) {\n        return {\n            top: 0,\n            left: 0,\n            right: targetWindow.innerWidth,\n            bottom: targetWindow.innerHeight,\n            width: targetWindow.innerWidth,\n            height: targetWindow.innerHeight,\n        };\n    }\n    // Logic for determining dual screen scenarios.\n    var x = 0;\n    var y = 0;\n    // If the target is an Element get coordinates for its center.\n    if (target !== null && !!target.getBoundingClientRect) {\n        var clientRect = target.getBoundingClientRect();\n        x = (clientRect.left + clientRect.right) / 2;\n        y = (clientRect.top + clientRect.bottom) / 2;\n    }\n    // If the target is not null get x-axis and y-axis coordinates directly.\n    else if (target !== null) {\n        // eslint-disable-next-line deprecation/deprecation\n        x = target.left || target.x;\n        // eslint-disable-next-line deprecation/deprecation\n        y = target.top || target.y;\n    }\n    var bounds = { top: 0, left: 0, right: 0, bottom: 0, width: 0, height: 0 };\n    // Define which window segment are the coordinates in and calculate bounds based on that.\n    for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {\n        var segment = segments_1[_i];\n        if (x && segment.left <= x && segment.right >= x && y && segment.top <= y && segment.bottom >= y) {\n            bounds = {\n                top: segment.top,\n                left: segment.left,\n                right: segment.right,\n                bottom: segment.bottom,\n                width: segment.width,\n                height: segment.height,\n            };\n        }\n    }\n    return bounds;\n}\nfunction getBoundsFromTargetWindow(target, targetWindow) {\n    return _getBoundsFromTargetWindow(target, targetWindow);\n}\n//# sourceMappingURL=positioning.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Popup/Popup.js\n\n\n\n/**\n * This adds accessibility to Dialog and Panel controls\n */\nvar Popup_Popup = /** @class */ (function (_super) {\n    __extends(Popup, _super);\n    function Popup(props) {\n        var _this = _super.call(this, props) || this;\n        _this._root = react[\"createRef\"]();\n        _this._disposables = [];\n        _this._onKeyDown = function (ev) {\n            switch (ev.which) {\n                case KeyCodes.escape:\n                    if (_this.props.onDismiss) {\n                        _this.props.onDismiss(ev);\n                        ev.preventDefault();\n                        ev.stopPropagation();\n                    }\n                    break;\n            }\n        };\n        _this._onFocus = function () {\n            _this._containsFocus = true;\n        };\n        _this._onBlur = function (ev) {\n            /** The popup should update this._containsFocus when:\n             * relatedTarget exists AND\n             * the relatedTarget is not contained within the popup.\n             * If the relatedTarget is within the popup, that means the popup still has focus\n             * and focused moved from one element to another within the popup.\n             * If relatedTarget is undefined or null that usually means that a\n             * keyboard event occured and focus didn't change\n             */\n            if (_this._root.current &&\n                ev.relatedTarget &&\n                !elementContains(_this._root.current, ev.relatedTarget)) {\n                _this._containsFocus = false;\n            }\n        };\n        _this._async = new Async_Async(_this);\n        _this.state = { needsVerticalScrollBar: false };\n        return _this;\n    }\n    Popup.prototype.UNSAFE_componentWillMount = function () {\n        this._originalFocusedElement = getDocument().activeElement;\n    };\n    Popup.prototype.componentDidMount = function () {\n        if (this._root.current) {\n            this._disposables.push(on(this._root.current, 'focus', this._onFocus, true), on(this._root.current, 'blur', this._onBlur, true));\n            var currentWindow = getWindow(this._root.current);\n            if (currentWindow) {\n                this._disposables.push(on(currentWindow, 'keydown', this._onKeyDown));\n            }\n            if (doesElementContainFocus(this._root.current)) {\n                this._containsFocus = true;\n            }\n        }\n        this._updateScrollBarAsync();\n    };\n    Popup.prototype.componentDidUpdate = function () {\n        this._updateScrollBarAsync();\n        this._async.dispose();\n    };\n    Popup.prototype.componentWillUnmount = function () {\n        this._disposables.forEach(function (dispose) { return dispose(); });\n        // eslint-disable-next-line deprecation/deprecation\n        if (this.props.shouldRestoreFocus) {\n            var _a = this.props.onRestoreFocus, onRestoreFocus = _a === void 0 ? defaultFocusRestorer : _a;\n            onRestoreFocus({ originalElement: this._originalFocusedElement, containsFocus: this._containsFocus });\n        }\n        // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown\n        delete this._originalFocusedElement;\n    };\n    Popup.prototype.render = function () {\n        var _a = this.props, role = _a.role, className = _a.className, ariaLabel = _a.ariaLabel, ariaLabelledBy = _a.ariaLabelledBy, ariaDescribedBy = _a.ariaDescribedBy, style = _a.style;\n        return (react[\"createElement\"](\"div\", __assign({ ref: this._root }, getNativeProps(this.props, divProperties), { className: className, role: role, \"aria-label\": ariaLabel, \"aria-labelledby\": ariaLabelledBy, \"aria-describedby\": ariaDescribedBy, onKeyDown: this._onKeyDown, style: __assign({ overflowY: this.state.needsVerticalScrollBar ? 'scroll' : undefined, outline: 'none' }, style) }), this.props.children));\n    };\n    Popup.prototype._updateScrollBarAsync = function () {\n        var _this = this;\n        this._async.requestAnimationFrame(function () {\n            _this._getScrollBar();\n        });\n    };\n    Popup.prototype._getScrollBar = function () {\n        // If overflowY is overriden, don't waste time calculating whether the scrollbar is necessary.\n        if (this.props.style && this.props.style.overflowY) {\n            return;\n        }\n        var needsVerticalScrollBar = false;\n        if (this._root && this._root.current && this._root.current.firstElementChild) {\n            // ClientHeight returns the client height of an element rounded to an\n            // integer. On some browsers at different zoom levels this rounding\n            // can generate different results for the root container and child even\n            // though they are the same height. This causes us to show a scroll bar\n            // when not needed. Ideally we would use BoundingClientRect().height\n            // instead however seems that the API is 90% slower than using ClientHeight.\n            // Therefore instead we will calculate the difference between heights and\n            // allow for a 1px difference to still be considered ok and not show the\n            // scroll bar.\n            var rootHeight = this._root.current.clientHeight;\n            var firstChildHeight = this._root.current.firstElementChild.clientHeight;\n            if (rootHeight > 0 && firstChildHeight > rootHeight) {\n                needsVerticalScrollBar = firstChildHeight - rootHeight > 1;\n            }\n        }\n        if (this.state.needsVerticalScrollBar !== needsVerticalScrollBar) {\n            this.setState({\n                needsVerticalScrollBar: needsVerticalScrollBar,\n            });\n        }\n    };\n    Popup.defaultProps = {\n        shouldRestoreFocus: true,\n    };\n    return Popup;\n}(react[\"Component\"]));\n\nfunction defaultFocusRestorer(options) {\n    var originalElement = options.originalElement, containsFocus = options.containsFocus;\n    if (originalElement && containsFocus && originalElement !== window) {\n        // Make sure that the focus method actually exists\n        // In some cases the object might exist but not be a real element.\n        // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n        if (originalElement.focus) {\n            originalElement.focus();\n        }\n    }\n}\n//# sourceMappingURL=Popup.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Callout/CalloutContent.base.js\nvar CalloutContent_base_a;\n\n\n\n\n\n\n\n\nvar ANIMATIONS = (CalloutContent_base_a = {},\n    CalloutContent_base_a[RectangleEdge.top] = AnimationClassNames.slideUpIn10,\n    CalloutContent_base_a[RectangleEdge.bottom] = AnimationClassNames.slideDownIn10,\n    CalloutContent_base_a[RectangleEdge.left] = AnimationClassNames.slideLeftIn10,\n    CalloutContent_base_a[RectangleEdge.right] = AnimationClassNames.slideRightIn10,\n    CalloutContent_base_a);\nvar CalloutContent_base_getClassNames = classNamesFunction({\n    disableCaching: true,\n});\nvar BEAK_ORIGIN_POSITION = { top: 0, left: 0 };\n// Microsoft Edge will overwrite inline styles if there is an animation pertaining to that style.\n// To help ensure that edge will respect the offscreen style opacity\n// filter needs to be added as an additional way to set opacity.\nvar OFF_SCREEN_STYLE = { opacity: 0, filter: 'opacity(0)' };\n// role and role description go hand-in-hand. Both would be included by spreading getNativeProps for a basic element\n// This constant array can be used to filter these out of native props spread on callout root and apply them together on\n// calloutMain (the Popup component within the callout)\nvar ARIA_ROLE_ATTRIBUTES = ['role', 'aria-roledescription'];\nvar CalloutContent_base_CalloutContentBase = /** @class */ (function (_super) {\n    __extends(CalloutContentBase, _super);\n    function CalloutContentBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._hostElement = react[\"createRef\"]();\n        _this._calloutElement = react[\"createRef\"]();\n        _this._hasListeners = false;\n        _this._disposables = [];\n        _this.dismiss = function (ev) {\n            var onDismiss = _this.props.onDismiss;\n            if (onDismiss) {\n                onDismiss(ev);\n            }\n        };\n        _this._dismissOnScroll = function (ev) {\n            var preventDismissOnScroll = _this.props.preventDismissOnScroll;\n            if (_this.state.positions && !preventDismissOnScroll) {\n                _this._dismissOnClickOrScroll(ev);\n            }\n        };\n        _this._dismissOnResize = function (ev) {\n            var preventDismissOnResize = _this.props.preventDismissOnResize;\n            if (!preventDismissOnResize) {\n                _this.dismiss(ev);\n            }\n        };\n        _this._dismissOnLostFocus = function (ev) {\n            var preventDismissOnLostFocus = _this.props.preventDismissOnLostFocus;\n            if (!preventDismissOnLostFocus) {\n                _this._dismissOnClickOrScroll(ev);\n            }\n        };\n        _this._setInitialFocus = function () {\n            if (_this.props.setInitialFocus &&\n                !_this._didSetInitialFocus &&\n                _this.state.positions &&\n                _this._calloutElement.current) {\n                _this._didSetInitialFocus = true;\n                _this._async.requestAnimationFrame(function () { return focusFirstChild(_this._calloutElement.current); }, _this._calloutElement.current);\n            }\n        };\n        _this._onComponentDidMount = function () {\n            _this._addListeners();\n            if (_this.props.onLayerMounted) {\n                _this.props.onLayerMounted();\n            }\n            _this._updateAsyncPosition();\n            _this._setHeightOffsetEveryFrame();\n        };\n        _this._mouseDownOnPopup = function () {\n            _this._isMouseDownOnPopup = true;\n        };\n        _this._mouseUpOnPopup = function () {\n            _this._isMouseDownOnPopup = false;\n        };\n        _this._async = new Async_Async(_this);\n        _this._didSetInitialFocus = false;\n        _this.state = {\n            positions: undefined,\n            slideDirectionalClassName: undefined,\n            // @TODO it looks like this is not even being used anymore.\n            calloutElementRect: undefined,\n            heightOffset: 0,\n        };\n        _this._positionAttempts = 0;\n        return _this;\n    }\n    CalloutContentBase.prototype.componentDidUpdate = function () {\n        if (!this.props.hidden) {\n            this._setInitialFocus();\n            if (!this._hasListeners) {\n                this._addListeners();\n            }\n            this._updateAsyncPosition();\n        }\n        else {\n            if (this._hasListeners) {\n                this._removeListeners();\n            }\n        }\n    };\n    CalloutContentBase.prototype.shouldComponentUpdate = function (newProps, newState) {\n        if (!newProps.shouldUpdateWhenHidden && this.props.hidden && newProps.hidden) {\n            // Do not update when hidden.\n            return false;\n        }\n        return !shallowCompare(this.props, newProps) || !shallowCompare(this.state, newState);\n    };\n    CalloutContentBase.prototype.UNSAFE_componentWillMount = function () {\n        this._setTargetWindowAndElement(this._getTarget());\n    };\n    CalloutContentBase.prototype.componentWillUnmount = function () {\n        this._async.dispose();\n        this._disposables.forEach(function (dispose) { return dispose(); });\n    };\n    CalloutContentBase.prototype.UNSAFE_componentWillUpdate = function (newProps) {\n        // If the target element changed, find the new one. If we are tracking target with class name, always find element\n        // because we do not know if fabric has rendered a new element and disposed the old element.\n        var newTarget = this._getTarget(newProps);\n        var oldTarget = this._getTarget();\n        if ((newTarget !== oldTarget || typeof newTarget === 'string' || newTarget instanceof String) &&\n            !this._blockResetHeight) {\n            this._maxHeight = undefined;\n            this._setTargetWindowAndElement(newTarget);\n        }\n        if (newProps.gapSpace !== this.props.gapSpace || this.props.beakWidth !== newProps.beakWidth) {\n            this._maxHeight = undefined;\n        }\n        if (newProps.finalHeight !== this.props.finalHeight) {\n            this._setHeightOffsetEveryFrame();\n        }\n        // Ensure positioning is recalculated when we are about to show a persisted menu.\n        if (this._didPositionPropsChange(newProps, this.props)) {\n            this._maxHeight = undefined;\n            // Target might have been updated while hidden.\n            this._setTargetWindowAndElement(newTarget);\n            this.setState({\n                positions: undefined,\n            });\n            this._didSetInitialFocus = false;\n            this._bounds = undefined;\n        }\n        this._blockResetHeight = false;\n    };\n    CalloutContentBase.prototype.componentDidMount = function () {\n        if (!this.props.hidden) {\n            this._onComponentDidMount();\n        }\n    };\n    CalloutContentBase.prototype.render = function () {\n        // If there is no target window then we are likely in server side rendering and we should not render anything.\n        if (!this._targetWindow) {\n            return null;\n        }\n        var target = this.props.target;\n        var _a = this.props, styles = _a.styles, style = _a.style, ariaLabel = _a.ariaLabel, ariaDescribedBy = _a.ariaDescribedBy, ariaLabelledBy = _a.ariaLabelledBy, className = _a.className, isBeakVisible = _a.isBeakVisible, children = _a.children, beakWidth = _a.beakWidth, calloutWidth = _a.calloutWidth, calloutMaxWidth = _a.calloutMaxWidth, finalHeight = _a.finalHeight, _b = _a.hideOverflow, hideOverflow = _b === void 0 ? !!finalHeight : _b, backgroundColor = _a.backgroundColor, calloutMaxHeight = _a.calloutMaxHeight, onScroll = _a.onScroll, \n        // eslint-disable-next-line deprecation/deprecation\n        _c = _a.shouldRestoreFocus, \n        // eslint-disable-next-line deprecation/deprecation\n        shouldRestoreFocus = _c === void 0 ? true : _c;\n        target = this._getTarget();\n        var positions = this.state.positions;\n        var getContentMaxHeight = this._getMaxHeight()\n            ? this._getMaxHeight() + this.state.heightOffset\n            : undefined;\n        var contentMaxHeight = calloutMaxHeight && getContentMaxHeight && calloutMaxHeight < getContentMaxHeight\n            ? calloutMaxHeight\n            : getContentMaxHeight;\n        var overflowYHidden = hideOverflow;\n        var beakVisible = isBeakVisible && !!target;\n        this._classNames = CalloutContent_base_getClassNames(styles, {\n            theme: this.props.theme,\n            className: className,\n            overflowYHidden: overflowYHidden,\n            calloutWidth: calloutWidth,\n            positions: positions,\n            beakWidth: beakWidth,\n            backgroundColor: backgroundColor,\n            calloutMaxWidth: calloutMaxWidth,\n        });\n        var overflowStyle = __assign(__assign(__assign({}, style), { maxHeight: contentMaxHeight }), (overflowYHidden && { overflowY: 'hidden' }));\n        var visibilityStyle = this.props.hidden ? { visibility: 'hidden' } : undefined;\n        // React.CSSProperties does not understand IRawStyle, so the inline animations will need to be cast as any for now.\n        var content = (react[\"createElement\"](\"div\", { ref: this._hostElement, className: this._classNames.container, style: visibilityStyle },\n            react[\"createElement\"](\"div\", __assign({}, getNativeProps(this.props, divProperties, ARIA_ROLE_ATTRIBUTES), { className: css(this._classNames.root, positions && positions.targetEdge && ANIMATIONS[positions.targetEdge]), style: positions ? positions.elementPosition : OFF_SCREEN_STYLE, \n                // Safari and Firefox on Mac OS requires this to back-stop click events so focus remains in the Callout.\n                // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus\n                tabIndex: -1, ref: this._calloutElement }),\n                beakVisible && react[\"createElement\"](\"div\", { className: this._classNames.beak, style: this._getBeakPosition() }),\n                beakVisible && react[\"createElement\"](\"div\", { className: this._classNames.beakCurtain }),\n                react[\"createElement\"](Popup_Popup, __assign({}, getNativeProps(this.props, ARIA_ROLE_ATTRIBUTES), { ariaLabel: ariaLabel, onRestoreFocus: this.props.onRestoreFocus, ariaDescribedBy: ariaDescribedBy, ariaLabelledBy: ariaLabelledBy, className: this._classNames.calloutMain, onDismiss: this.dismiss, onScroll: onScroll, shouldRestoreFocus: shouldRestoreFocus, style: overflowStyle, onMouseDown: this._mouseDownOnPopup, onMouseUp: this._mouseUpOnPopup }), children))));\n        return content;\n    };\n    CalloutContentBase.prototype._dismissOnClickOrScroll = function (ev) {\n        var target = ev.target;\n        var isEventTargetOutsideCallout = this._hostElement.current && !elementContains(this._hostElement.current, target);\n        // If mouse is pressed down on callout but moved outside then released, don't dismiss the callout.\n        if (isEventTargetOutsideCallout && this._isMouseDownOnPopup) {\n            this._isMouseDownOnPopup = false;\n            return;\n        }\n        if ((!this._target && isEventTargetOutsideCallout) ||\n            (ev.target !== this._targetWindow &&\n                isEventTargetOutsideCallout &&\n                (this._target.stopPropagation ||\n                    !this._target ||\n                    (target !== this._target && !elementContains(this._target, target))))) {\n            this.dismiss(ev);\n        }\n    };\n    CalloutContentBase.prototype._addListeners = function () {\n        var _this = this;\n        // This is added so the callout will dismiss when the window is scrolled\n        // but not when something inside the callout is scrolled. The delay seems\n        // to be required to avoid React firing an async focus event in IE from\n        // the target changing focus quickly prior to rendering the callout.\n        this._async.setTimeout(function () {\n            _this._disposables.push(on(_this._targetWindow, 'scroll', _this._dismissOnScroll, true), on(_this._targetWindow, 'resize', _this._dismissOnResize, true), on(_this._targetWindow.document.documentElement, 'focus', _this._dismissOnLostFocus, true), on(_this._targetWindow.document.documentElement, 'click', _this._dismissOnLostFocus, true));\n            _this._hasListeners = true;\n        }, 0);\n    };\n    CalloutContentBase.prototype._removeListeners = function () {\n        this._disposables.forEach(function (dispose) { return dispose(); });\n        this._disposables = [];\n        this._hasListeners = false;\n    };\n    CalloutContentBase.prototype._updateAsyncPosition = function () {\n        var _this = this;\n        this._async.requestAnimationFrame(function () { return _this._updatePosition(); }, this._calloutElement.current);\n    };\n    CalloutContentBase.prototype._getBeakPosition = function () {\n        var positions = this.state.positions;\n        var beakPostionStyle = __assign({}, (positions && positions.beakPosition ? positions.beakPosition.elementPosition : null));\n        if (!beakPostionStyle.top && !beakPostionStyle.bottom && !beakPostionStyle.left && !beakPostionStyle.right) {\n            beakPostionStyle.left = BEAK_ORIGIN_POSITION.left;\n            beakPostionStyle.top = BEAK_ORIGIN_POSITION.top;\n        }\n        return beakPostionStyle;\n    };\n    CalloutContentBase.prototype._updatePosition = function () {\n        // Try to update the target, page might have changed\n        this._setTargetWindowAndElement(this._getTarget());\n        var positions = this.state.positions;\n        var hostElement = this._hostElement.current;\n        var calloutElement = this._calloutElement.current;\n        // If we expect a target element to position against, we need to wait until `this._target` is resolved. Otherwise\n        // we can try to position.\n        var expectsTarget = !!this.props.target;\n        if (hostElement && calloutElement && (!expectsTarget || this._target)) {\n            var currentProps = __assign({}, this.props);\n            currentProps.bounds = this._getBounds();\n            currentProps.target = this._target;\n            // If there is a finalHeight given then we assume that the user knows and will handle\n            // additional positioning adjustments so we should call positionCard\n            var newPositions = this.props.finalHeight\n                ? positionCard(currentProps, hostElement, calloutElement, positions)\n                : positionCallout(currentProps, hostElement, calloutElement, positions);\n            // Set the new position only when the positions are not exists or one of the new callout positions are different.\n            // The position should not change if the position is within 2 decimal places.\n            if ((!positions && newPositions) ||\n                (positions && newPositions && !this._arePositionsEqual(positions, newPositions) && this._positionAttempts < 5)) {\n                // We should not reposition the callout more than a few times, if it is then the content is likely resizing\n                // and we should stop trying to reposition to prevent a stack overflow.\n                this._positionAttempts++;\n                this.setState({\n                    positions: newPositions,\n                });\n            }\n            else if (this._positionAttempts > 0) {\n                // Only call the onPositioned callback if the callout has been re-positioned at least once.\n                this._positionAttempts = 0;\n                if (this.props.onPositioned) {\n                    this.props.onPositioned(this.state.positions);\n                }\n            }\n        }\n    };\n    CalloutContentBase.prototype._getBounds = function () {\n        if (!this._bounds) {\n            var bounds = this.props.bounds;\n            var currentBounds = typeof bounds === 'function' ? bounds(this.props.target, this._targetWindow) : bounds;\n            if (!currentBounds) {\n                currentBounds = getBoundsFromTargetWindow(this._target, this._targetWindow);\n                currentBounds = {\n                    top: currentBounds.top + this.props.minPagePadding,\n                    left: currentBounds.left + this.props.minPagePadding,\n                    right: currentBounds.right - this.props.minPagePadding,\n                    bottom: currentBounds.bottom - this.props.minPagePadding,\n                    width: currentBounds.width - this.props.minPagePadding * 2,\n                    height: currentBounds.height - this.props.minPagePadding * 2,\n                };\n            }\n            this._bounds = currentBounds;\n        }\n        return this._bounds;\n    };\n    // Max height should remain as synchronous as possible, which is why it is not done using set state.\n    // It needs to be synchronous since it will impact the ultimate position of the callout.\n    CalloutContentBase.prototype._getMaxHeight = function () {\n        var _this = this;\n        if (!this._maxHeight) {\n            if (this.props.directionalHintFixed && this._target) {\n                var beakWidth = this.props.isBeakVisible ? this.props.beakWidth : 0;\n                var gapSpace = this.props.gapSpace ? this.props.gapSpace : 0;\n                // Since the callout cannot measure it's border size it must be taken into account here. Otherwise it will\n                // overlap with the target.\n                var totalGap_1 = gapSpace + beakWidth;\n                this._async.requestAnimationFrame(function () {\n                    if (_this._target) {\n                        _this._maxHeight = getMaxHeight(_this._target, _this.props.directionalHint, totalGap_1, _this._getBounds(), _this.props.coverTarget);\n                        _this._blockResetHeight = true;\n                        _this.forceUpdate();\n                    }\n                }, this._target);\n            }\n            else {\n                this._maxHeight = this._getBounds().height;\n            }\n        }\n        return this._maxHeight;\n    };\n    CalloutContentBase.prototype._arePositionsEqual = function (positions, newPosition) {\n        return (this._comparePositions(positions.elementPosition, newPosition.elementPosition) &&\n            this._comparePositions(positions.beakPosition.elementPosition, newPosition.beakPosition.elementPosition));\n    };\n    CalloutContentBase.prototype._comparePositions = function (oldPositions, newPositions) {\n        for (var key in newPositions) {\n            if (newPositions.hasOwnProperty(key)) {\n                var oldPositionEdge = oldPositions[key];\n                var newPositionEdge = newPositions[key];\n                if (oldPositionEdge !== undefined && newPositionEdge !== undefined) {\n                    if (oldPositionEdge.toFixed(2) !== newPositionEdge.toFixed(2)) {\n                        return false;\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    CalloutContentBase.prototype._setTargetWindowAndElement = function (target) {\n        var currentElement = this._calloutElement.current;\n        if (target) {\n            if (typeof target === 'string') {\n                var currentDoc = getDocument(currentElement);\n                this._target = currentDoc ? currentDoc.querySelector(target) : null;\n                this._targetWindow = getWindow(currentElement);\n                // Cast to any prevents error about stopPropagation always existing\n            }\n            else if (target.stopPropagation) {\n                this._targetWindow = getWindow(target.target);\n                this._target = target;\n                // Same reason here\n            }\n            else if (target.getBoundingClientRect) {\n                var targetElement = target;\n                this._targetWindow = getWindow(targetElement);\n                this._target = targetElement;\n            }\n            else if (target.current !== undefined) {\n                this._target = target.current;\n                this._targetWindow = getWindow(this._target);\n                // HTMLImgElements can have x and y values. The check for it being a point must go last.\n            }\n            else {\n                this._targetWindow = getWindow(currentElement);\n                this._target = target;\n            }\n        }\n        else {\n            this._targetWindow = getWindow(currentElement);\n        }\n    };\n    CalloutContentBase.prototype._setHeightOffsetEveryFrame = function () {\n        var _this = this;\n        if (this._calloutElement.current && this.props.finalHeight) {\n            this._setHeightOffsetTimer = this._async.requestAnimationFrame(function () {\n                var calloutMainElem = _this._calloutElement.current && _this._calloutElement.current.lastChild;\n                if (!calloutMainElem) {\n                    return;\n                }\n                var cardScrollHeight = calloutMainElem.scrollHeight;\n                var cardCurrHeight = calloutMainElem.offsetHeight;\n                var scrollDiff = cardScrollHeight - cardCurrHeight;\n                _this.setState({\n                    heightOffset: _this.state.heightOffset + scrollDiff,\n                });\n                if (calloutMainElem.offsetHeight < _this.props.finalHeight) {\n                    _this._setHeightOffsetEveryFrame();\n                }\n                else {\n                    _this._async.cancelAnimationFrame(_this._setHeightOffsetTimer, _this._calloutElement.current);\n                }\n            }, this._calloutElement.current);\n        }\n    };\n    // Whether or not the current positions should be reset\n    CalloutContentBase.prototype._didPositionPropsChange = function (newProps, oldProps) {\n        return ((!newProps.hidden && newProps.hidden !== oldProps.hidden) || newProps.directionalHint !== oldProps.directionalHint);\n    };\n    CalloutContentBase.prototype._getTarget = function (props) {\n        if (props === void 0) { props = this.props; }\n        var target = props.target;\n        return target;\n    };\n    CalloutContentBase.defaultProps = {\n        preventDismissOnLostFocus: false,\n        preventDismissOnScroll: false,\n        preventDismissOnResize: false,\n        isBeakVisible: true,\n        beakWidth: 16,\n        gapSpace: 0,\n        minPagePadding: 8,\n        directionalHint: DirectionalHint.bottomAutoEdge,\n    };\n    return CalloutContentBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=CalloutContent.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Callout/CalloutContent.styles.js\n\nfunction getBeakStyle(beakWidth) {\n    return {\n        height: beakWidth,\n        width: beakWidth,\n    };\n}\nvar CalloutContent_styles_GlobalClassNames = {\n    container: 'ms-Callout-container',\n    root: 'ms-Callout',\n    beak: 'ms-Callout-beak',\n    beakCurtain: 'ms-Callout-beakCurtain',\n    calloutMain: 'ms-Callout-main',\n};\nvar CalloutContent_styles_getStyles = function (props) {\n    var _a;\n    var theme = props.theme, className = props.className, overflowYHidden = props.overflowYHidden, calloutWidth = props.calloutWidth, beakWidth = props.beakWidth, backgroundColor = props.backgroundColor, calloutMaxWidth = props.calloutMaxWidth;\n    var classNames = getGlobalClassNames(CalloutContent_styles_GlobalClassNames, theme);\n    var semanticColors = theme.semanticColors, effects = theme.effects;\n    return {\n        container: [\n            classNames.container,\n            {\n                position: 'relative',\n            },\n        ],\n        root: [\n            classNames.root,\n            theme.fonts.medium,\n            {\n                position: 'absolute',\n                boxSizing: 'border-box',\n                borderRadius: effects.roundedCorner2,\n                boxShadow: effects.elevation16,\n                selectors: (_a = {},\n                    _a[HighContrastSelector] = {\n                        borderWidth: 1,\n                        borderStyle: 'solid',\n                        borderColor: 'WindowText',\n                    },\n                    _a),\n            },\n            focusClear(),\n            className,\n            !!calloutWidth && { width: calloutWidth },\n            !!calloutMaxWidth && { maxWidth: calloutMaxWidth },\n        ],\n        beak: [\n            classNames.beak,\n            {\n                position: 'absolute',\n                backgroundColor: semanticColors.menuBackground,\n                boxShadow: 'inherit',\n                border: 'inherit',\n                boxSizing: 'border-box',\n                transform: 'rotate(45deg)',\n            },\n            getBeakStyle(beakWidth),\n            backgroundColor && {\n                backgroundColor: backgroundColor,\n            },\n        ],\n        beakCurtain: [\n            classNames.beakCurtain,\n            {\n                position: 'absolute',\n                top: 0,\n                right: 0,\n                bottom: 0,\n                left: 0,\n                backgroundColor: semanticColors.menuBackground,\n                borderRadius: effects.roundedCorner2,\n            },\n        ],\n        calloutMain: [\n            classNames.calloutMain,\n            {\n                backgroundColor: semanticColors.menuBackground,\n                overflowX: 'hidden',\n                overflowY: 'auto',\n                position: 'relative',\n                borderRadius: effects.roundedCorner2,\n            },\n            overflowYHidden && {\n                overflowY: 'hidden',\n            },\n            backgroundColor && {\n                backgroundColor: backgroundColor,\n            },\n        ],\n    };\n};\n//# sourceMappingURL=CalloutContent.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Callout/CalloutContent.js\n\n\n\nvar CalloutContent = styled(CalloutContent_base_CalloutContentBase, CalloutContent_styles_getStyles, undefined, { scope: 'CalloutContent' });\n//# sourceMappingURL=CalloutContent.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/customizations/mergeSettings.js\n\n/**\n * Merge new and old settings, giving priority to new settings.\n * New settings is optional in which case oldSettings is returned as-is.\n * @param oldSettings - Old settings to fall back to.\n * @param newSettings - New settings that will be merged over oldSettings.\n * @returns Merged settings.\n */\nfunction mergeSettings(oldSettings, newSettings) {\n    if (oldSettings === void 0) { oldSettings = {}; }\n    var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);\n    return mergeSettingsWith(oldSettings);\n}\nfunction mergeScopedSettings(oldSettings, newSettings) {\n    if (oldSettings === void 0) { oldSettings = {}; }\n    var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);\n    return mergeSettingsWith(oldSettings);\n}\nfunction _isSettingsFunction(settings) {\n    return typeof settings === 'function';\n}\nfunction _settingsMergeWith(newSettings) {\n    return function (settings) { return (newSettings ? __assign(__assign({}, settings), newSettings) : settings); };\n}\nfunction _scopedSettingsMergeWith(scopedSettingsFromProps) {\n    if (scopedSettingsFromProps === void 0) { scopedSettingsFromProps = {}; }\n    return function (oldScopedSettings) {\n        var newScopedSettings = __assign({}, oldScopedSettings);\n        for (var scopeName in scopedSettingsFromProps) {\n            if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {\n                newScopedSettings[scopeName] = __assign(__assign({}, oldScopedSettings[scopeName]), scopedSettingsFromProps[scopeName]);\n            }\n        }\n        return newScopedSettings;\n    };\n}\n//# sourceMappingURL=mergeSettings.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/customizations/mergeCustomizations.js\n\n/**\n * Merge props and customizations giving priority to props over context.\n * NOTE: This function will always perform multiple merge operations. Use with caution.\n * @param props - New settings to merge in.\n * @param parentContext - Context containing current settings.\n * @returns Merged customizations.\n */\nfunction mergeCustomizations(props, parentContext) {\n    var _a = (parentContext || {}).customizations, customizations = _a === void 0 ? { settings: {}, scopedSettings: {} } : _a;\n    return {\n        customizations: {\n            settings: mergeSettings(customizations.settings, props.settings),\n            scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),\n            inCustomizerContext: true,\n        },\n    };\n}\n//# sourceMappingURL=mergeCustomizations.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/customizations/Customizer.js\n\n\n\n\n\n/**\n * The Customizer component allows for default props to be mixed into components which\n * are decorated with the customizable() decorator, or use the styled HOC. This enables\n * injection scenarios like:\n *\n * 1. render svg icons instead of the icon font within all buttons\n * 2. inject a custom theme object into a component\n *\n * Props are provided via the settings prop which should be one of the following:\n * - A json map which contains 1 or more name/value pairs representing injectable props.\n * - A function that receives the current settings and returns the new ones that apply to the scope\n *\n * @public\n */\nvar Customizer_Customizer = /** @class */ (function (_super) {\n    __extends(Customizer, _super);\n    function Customizer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._onCustomizationChange = function () { return _this.forceUpdate(); };\n        return _this;\n    }\n    Customizer.prototype.componentDidMount = function () {\n        Customizations_Customizations.observe(this._onCustomizationChange);\n    };\n    Customizer.prototype.componentWillUnmount = function () {\n        Customizations_Customizations.unobserve(this._onCustomizationChange);\n    };\n    Customizer.prototype.render = function () {\n        var _this = this;\n        var contextTransform = this.props.contextTransform;\n        return (react[\"createElement\"](CustomizerContext.Consumer, null, function (parentContext) {\n            var newContext = mergeCustomizations(_this.props, parentContext);\n            if (contextTransform) {\n                newContext = contextTransform(newContext);\n            }\n            return react[\"createElement\"](CustomizerContext.Provider, { value: newContext }, _this.props.children);\n        }));\n    };\n    return Customizer;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=Customizer.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Fabric/Fabric.styles.js\n\nvar inheritFont = { fontFamily: 'inherit' };\nvar Fabric_styles_GlobalClassNames = {\n    root: 'ms-Fabric',\n    bodyThemed: 'ms-Fabric-bodyThemed',\n};\nvar Fabric_styles_getStyles = function (props) {\n    var theme = props.theme, className = props.className, applyTheme = props.applyTheme;\n    var classNames = getGlobalClassNames(Fabric_styles_GlobalClassNames, theme);\n    return {\n        root: [\n            classNames.root,\n            theme.fonts.medium,\n            {\n                color: theme.palette.neutralPrimary,\n                selectors: {\n                    '& button': inheritFont,\n                    '& input': inheritFont,\n                    '& textarea': inheritFont,\n                },\n            },\n            // apply theme to only if applyTheme is true\n            applyTheme && {\n                color: theme.semanticColors.bodyText,\n                backgroundColor: theme.semanticColors.bodyBackground,\n            },\n            className,\n        ],\n        bodyThemed: [\n            {\n                backgroundColor: theme.semanticColors.bodyBackground,\n            },\n        ],\n    };\n};\n//# sourceMappingURL=Fabric.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Fabric/Fabric.base.js\n\n\n\n\n\nvar Fabric_base_getClassNames = classNamesFunction();\nvar getFabricTheme = memoizeFunction(function (theme, isRTL) { return createTheme(__assign(__assign({}, theme), { rtl: isRTL })); });\nvar getDir = function (theme, dir) {\n    var contextDir = rtl_getRTL(theme) ? 'rtl' : 'ltr';\n    var pageDir = rtl_getRTL() ? 'rtl' : 'ltr';\n    var componentDir = dir ? dir : contextDir;\n    return {\n        // If Fabric dir !== contextDir\n        // Or If contextDir !== pageDir\n        // Then we need to set dir of the Fabric root\n        rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n        // If dir !== contextDir || pageDir\n        // then set contextual theme around content\n        needsTheme: componentDir !== contextDir,\n    };\n};\nvar Fabric_base_FabricBase = /** @class */ (function (_super) {\n    __extends(FabricBase, _super);\n    function FabricBase() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._rootElement = react[\"createRef\"]();\n        _this._removeClassNameFromBody = undefined;\n        return _this;\n    }\n    FabricBase.prototype.render = function () {\n        var _a = this.props, _b = _a.as, Root = _b === void 0 ? 'div' : _b, theme = _a.theme, dir = _a.dir;\n        var classNames = this._getClassNames();\n        var divProps = getNativeProps(this.props, divProperties, ['dir']);\n        var _c = getDir(theme, dir), rootDir = _c.rootDir, needsTheme = _c.needsTheme;\n        var renderedContent = react[\"createElement\"](Root, __assign({ dir: rootDir }, divProps, { className: classNames.root, ref: this._rootElement }));\n        if (needsTheme) {\n            renderedContent = (react[\"createElement\"](Customizer_Customizer, { settings: { theme: getFabricTheme(theme, dir === 'rtl') } }, renderedContent));\n        }\n        return (react[\"createElement\"](react[\"Fragment\"], null,\n            renderedContent,\n            react[\"createElement\"](FocusRects, { rootRef: this._rootElement })));\n    };\n    FabricBase.prototype.componentDidMount = function () {\n        this._addClassNameToBody();\n    };\n    FabricBase.prototype.componentWillUnmount = function () {\n        if (this._removeClassNameFromBody) {\n            this._removeClassNameFromBody();\n        }\n    };\n    FabricBase.prototype._getClassNames = function () {\n        var _a = this.props, className = _a.className, theme = _a.theme, applyTheme = _a.applyTheme;\n        var classNames = Fabric_base_getClassNames(Fabric_styles_getStyles, {\n            theme: theme,\n            applyTheme: applyTheme,\n            className: className,\n        });\n        return classNames;\n    };\n    FabricBase.prototype._addClassNameToBody = function () {\n        if (this.props.applyThemeToBody) {\n            var classNames_1 = this._getClassNames();\n            var currentDoc_1 = getDocument(this._rootElement.current);\n            if (currentDoc_1) {\n                currentDoc_1.body.classList.add(classNames_1.bodyThemed);\n                this._removeClassNameFromBody = function () {\n                    currentDoc_1.body.classList.remove(classNames_1.bodyThemed);\n                };\n            }\n        }\n    };\n    return FabricBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=Fabric.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Fabric/Fabric.js\n\n\n\nvar Fabric = styled(Fabric_base_FabricBase, Fabric_styles_getStyles, undefined, {\n    scope: 'Fabric',\n});\n//# sourceMappingURL=Fabric.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/dom/setVirtualParent.js\n/**\n * Sets the virtual parent of an element.\n * Pass `undefined` as the `parent` to clear the virtual parent.\n *\n * @public\n */\nfunction setVirtualParent(child, parent) {\n    var virtualChild = child;\n    var virtualParent = parent;\n    if (!virtualChild._virtual) {\n        virtualChild._virtual = {\n            children: [],\n        };\n    }\n    var oldParent = virtualChild._virtual.parent;\n    if (oldParent && oldParent !== parent) {\n        // Remove the child from its old parent.\n        var index = oldParent._virtual.children.indexOf(virtualChild);\n        if (index > -1) {\n            oldParent._virtual.children.splice(index, 1);\n        }\n    }\n    virtualChild._virtual.parent = virtualParent || undefined;\n    if (virtualParent) {\n        if (!virtualParent._virtual) {\n            virtualParent._virtual = {\n                children: [],\n            };\n        }\n        virtualParent._virtual.children.push(virtualChild);\n    }\n}\n//# sourceMappingURL=setVirtualParent.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Layer/Layer.notification.js\nvar _layersByHostId = {};\nvar _defaultHostSelector;\n/**\n * Register a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nfunction registerLayer(hostId, callback) {\n    if (!_layersByHostId[hostId]) {\n        _layersByHostId[hostId] = [];\n    }\n    _layersByHostId[hostId].push(callback);\n}\n/**\n * Unregister a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nfunction unregisterLayer(hostId, callback) {\n    if (_layersByHostId[hostId]) {\n        var idx = _layersByHostId[hostId].indexOf(callback);\n        if (idx >= 0) {\n            _layersByHostId[hostId].splice(idx, 1);\n            if (_layersByHostId[hostId].length === 0) {\n                delete _layersByHostId[hostId];\n            }\n        }\n    }\n}\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\nfunction notifyHostChanged(id) {\n    if (_layersByHostId[id]) {\n        _layersByHostId[id].forEach(function (callback) { return callback(); });\n    }\n}\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsey value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\nfunction setDefaultTarget(selector) {\n    _defaultHostSelector = selector;\n}\n/**\n * Get the default target selector when determining a host\n */\nfunction getDefaultTarget() {\n    return _defaultHostSelector;\n}\n//# sourceMappingURL=Layer.notification.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Layer/Layer.base.js\n\n\n\n\n\n\nvar Layer_base_getClassNames = classNamesFunction();\nvar Layer_base_LayerBase = /** @class */ (function (_super) {\n    __extends(LayerBase, _super);\n    function LayerBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._rootRef = react[\"createRef\"]();\n        _this._createLayerElement = function () {\n            var hostId = _this.props.hostId;\n            var doc = getDocument(_this._rootRef.current);\n            var host = _this._getHost();\n            if (!doc || !host) {\n                return;\n            }\n            // If one was already existing, remove.\n            _this._removeLayerElement();\n            var layerElement = doc.createElement('div');\n            var classNames = _this._getClassNames();\n            layerElement.className = classNames.root;\n            setPortalAttribute(layerElement);\n            setVirtualParent(layerElement, _this._rootRef.current);\n            _this.props.insertFirst ? host.insertBefore(layerElement, host.firstChild) : host.appendChild(layerElement);\n            _this.setState({\n                hostId: hostId,\n                layerElement: layerElement,\n            }, function () {\n                // eslint-disable-next-line deprecation/deprecation\n                var _a = _this.props, onLayerDidMount = _a.onLayerDidMount, onLayerMounted = _a.onLayerMounted;\n                if (onLayerMounted) {\n                    onLayerMounted();\n                }\n                if (onLayerDidMount) {\n                    onLayerDidMount();\n                }\n            });\n        };\n        _this.state = {};\n        if (false) {}\n        return _this;\n    }\n    LayerBase.prototype.componentDidMount = function () {\n        var hostId = this.props.hostId;\n        this._createLayerElement();\n        if (hostId) {\n            registerLayer(hostId, this._createLayerElement);\n        }\n    };\n    LayerBase.prototype.render = function () {\n        var layerElement = this.state.layerElement;\n        var classNames = this._getClassNames();\n        var eventBubblingEnabled = this.props.eventBubblingEnabled;\n        return (react[\"createElement\"](\"span\", { className: \"ms-layer\", ref: this._rootRef }, layerElement &&\n            react_dom[\"createPortal\"](react[\"createElement\"](Fabric, __assign({}, (!eventBubblingEnabled && _getFilteredEvents()), { className: classNames.content }), this.props.children), layerElement)));\n    };\n    LayerBase.prototype.componentDidUpdate = function () {\n        if (this.props.hostId !== this.state.hostId) {\n            this._createLayerElement();\n        }\n    };\n    LayerBase.prototype.componentWillUnmount = function () {\n        var hostId = this.props.hostId;\n        this._removeLayerElement();\n        if (hostId) {\n            unregisterLayer(hostId, this._createLayerElement);\n        }\n    };\n    LayerBase.prototype._removeLayerElement = function () {\n        var onLayerWillUnmount = this.props.onLayerWillUnmount;\n        var layerElement = this.state.layerElement;\n        if (onLayerWillUnmount) {\n            onLayerWillUnmount();\n        }\n        if (layerElement && layerElement.parentNode) {\n            var parentNode = layerElement.parentNode;\n            if (parentNode) {\n                parentNode.removeChild(layerElement);\n            }\n        }\n    };\n    LayerBase.prototype._getClassNames = function () {\n        var _a = this.props, className = _a.className, styles = _a.styles, theme = _a.theme;\n        var classNames = Layer_base_getClassNames(styles, {\n            theme: theme,\n            className: className,\n            isNotHost: !this.props.hostId,\n        });\n        return classNames;\n    };\n    LayerBase.prototype._getHost = function () {\n        var hostId = this.props.hostId;\n        var doc = getDocument(this._rootRef.current);\n        if (!doc) {\n            return undefined;\n        }\n        if (hostId) {\n            return doc.getElementById(hostId);\n        }\n        else {\n            var defaultHostSelector = getDefaultTarget();\n            return defaultHostSelector ? doc.querySelector(defaultHostSelector) : doc.body;\n        }\n    };\n    LayerBase.defaultProps = {\n        onLayerDidMount: function () { return undefined; },\n        onLayerWillUnmount: function () { return undefined; },\n    };\n    LayerBase = __decorate([\n        customizable_customizable('Layer', ['theme', 'hostId'])\n    ], LayerBase);\n    return LayerBase;\n}(react[\"Component\"]));\n\nvar _onFilterEvent = function (ev) {\n    // We should just be able to check ev.bubble here and only stop events that are bubbling up. However, even though\n    // mouseenter and mouseleave do NOT bubble up, they are showing up as bubbling. Therefore we stop events based on\n    // event name rather than ev.bubble.\n    if (ev.eventPhase === Event.BUBBLING_PHASE &&\n        ev.type !== 'mouseenter' &&\n        ev.type !== 'mouseleave' &&\n        ev.type !== 'touchstart' &&\n        ev.type !== 'touchend') {\n        ev.stopPropagation();\n    }\n};\nvar _filteredEventProps;\nfunction _getFilteredEvents() {\n    if (!_filteredEventProps) {\n        _filteredEventProps = {};\n        [\n            'onClick',\n            'onContextMenu',\n            'onDoubleClick',\n            'onDrag',\n            'onDragEnd',\n            'onDragEnter',\n            'onDragExit',\n            'onDragLeave',\n            'onDragOver',\n            'onDragStart',\n            'onDrop',\n            'onMouseDown',\n            'onMouseEnter',\n            'onMouseLeave',\n            'onMouseMove',\n            'onMouseOver',\n            'onMouseOut',\n            'onMouseUp',\n            'onTouchMove',\n            'onTouchStart',\n            'onTouchCancel',\n            'onTouchEnd',\n            'onKeyDown',\n            'onKeyPress',\n            'onKeyUp',\n            'onFocus',\n            'onBlur',\n            'onChange',\n            'onInput',\n            'onInvalid',\n            'onSubmit',\n        ].forEach(function (name) { return (_filteredEventProps[name] = _onFilterEvent); });\n    }\n    return _filteredEventProps;\n}\n//# sourceMappingURL=Layer.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Layer/Layer.styles.js\n\nvar Layer_styles_GlobalClassNames = {\n    root: 'ms-Layer',\n    rootNoHost: 'ms-Layer--fixed',\n    content: 'ms-Layer-content',\n};\nvar Layer_styles_getStyles = function (props) {\n    var className = props.className, isNotHost = props.isNotHost, theme = props.theme;\n    var classNames = getGlobalClassNames(Layer_styles_GlobalClassNames, theme);\n    return {\n        root: [\n            classNames.root,\n            theme.fonts.medium,\n            isNotHost && [\n                classNames.rootNoHost,\n                {\n                    position: 'fixed',\n                    zIndex: ZIndexes.Layer,\n                    top: 0,\n                    left: 0,\n                    bottom: 0,\n                    right: 0,\n                    visibility: 'hidden',\n                },\n            ],\n            className,\n        ],\n        content: [\n            classNames.content,\n            {\n                visibility: 'visible',\n            },\n        ],\n    };\n};\n//# sourceMappingURL=Layer.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Layer/Layer.js\n\n\n\nvar Layer = styled(Layer_base_LayerBase, Layer_styles_getStyles, undefined, {\n    scope: 'Layer',\n    fields: ['hostId', 'theme', 'styles'],\n});\n//# sourceMappingURL=Layer.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Callout/Callout.js\n\n\n\n\nvar Callout_Callout = /** @class */ (function (_super) {\n    __extends(Callout, _super);\n    function Callout() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Callout.prototype.render = function () {\n        var _a = this.props, layerProps = _a.layerProps, rest = __rest(_a, [\"layerProps\"]);\n        var content = react[\"createElement\"](CalloutContent, __assign({}, rest));\n        return this.props.doNotLayer ? content : react[\"createElement\"](Layer, __assign({}, layerProps), content);\n    };\n    return Callout;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=Callout.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ContextualMenu/ContextualMenuItem.base.js\n\n\n\n\n\nvar renderItemIcon = function (props) {\n    var item = props.item, hasIcons = props.hasIcons, classNames = props.classNames;\n    var iconProps = item.iconProps;\n    if (!hasIcons) {\n        return null;\n    }\n    if (item.onRenderIcon) {\n        return item.onRenderIcon(props);\n    }\n    return react[\"createElement\"](Icon, __assign({}, iconProps, { className: classNames.icon }));\n};\nvar renderCheckMarkIcon = function (_a) {\n    var onCheckmarkClick = _a.onCheckmarkClick, item = _a.item, classNames = _a.classNames;\n    var isItemChecked = getIsChecked(item);\n    if (onCheckmarkClick) {\n        // Ensures that the item is passed as the first argument to the checkmark click callback.\n        var onClick = function (e) { return onCheckmarkClick(item, e); };\n        return (react[\"createElement\"](Icon, { iconName: item.canCheck !== false && isItemChecked ? 'CheckMark' : '', className: classNames.checkmarkIcon, \n            // eslint-disable-next-line react/jsx-no-bind\n            onClick: onClick }));\n    }\n    return null;\n};\nvar renderItemName = function (_a) {\n    var item = _a.item, classNames = _a.classNames;\n    /* eslint-disable deprecation/deprecation */\n    if (item.text || item.name) {\n        return react[\"createElement\"](\"span\", { className: classNames.label }, item.text || item.name);\n    }\n    /* eslint-enable deprecation/deprecation */\n    return null;\n};\nvar renderSecondaryText = function (_a) {\n    var item = _a.item, classNames = _a.classNames;\n    if (item.secondaryText) {\n        return react[\"createElement\"](\"span\", { className: classNames.secondaryText }, item.secondaryText);\n    }\n    return null;\n};\nvar renderSubMenuIcon = function (_a) {\n    var item = _a.item, classNames = _a.classNames, theme = _a.theme;\n    if (hasSubmenu(item)) {\n        return (react[\"createElement\"](Icon, __assign({ iconName: rtl_getRTL(theme) ? 'ChevronLeft' : 'ChevronRight' }, item.submenuIconProps, { className: classNames.subMenuIcon })));\n    }\n    return null;\n};\nvar ContextualMenuItem_base_ContextualMenuItemBase = /** @class */ (function (_super) {\n    __extends(ContextualMenuItemBase, _super);\n    function ContextualMenuItemBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this.openSubMenu = function () {\n            var _a = _this.props, item = _a.item, openSubMenu = _a.openSubMenu, getSubmenuTarget = _a.getSubmenuTarget;\n            if (getSubmenuTarget) {\n                var submenuTarget = getSubmenuTarget();\n                if (hasSubmenu(item) && openSubMenu && submenuTarget) {\n                    openSubMenu(item, submenuTarget);\n                }\n            }\n        };\n        _this.dismissSubMenu = function () {\n            var _a = _this.props, item = _a.item, dismissSubMenu = _a.dismissSubMenu;\n            if (hasSubmenu(item) && dismissSubMenu) {\n                dismissSubMenu();\n            }\n        };\n        _this.dismissMenu = function (dismissAll) {\n            var dismissMenu = _this.props.dismissMenu;\n            if (dismissMenu) {\n                dismissMenu(undefined /* ev */, dismissAll);\n            }\n        };\n        initializeComponentRef(_this);\n        return _this;\n    }\n    ContextualMenuItemBase.prototype.render = function () {\n        var _a = this.props, item = _a.item, classNames = _a.classNames;\n        return (react[\"createElement\"](\"div\", { className: item.split ? classNames.linkContentMenu : classNames.linkContent },\n            renderCheckMarkIcon(this.props),\n            renderItemIcon(this.props),\n            renderItemName(this.props),\n            renderSecondaryText(this.props),\n            renderSubMenuIcon(this.props)));\n    };\n    return ContextualMenuItemBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=ContextualMenuItem.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Divider/VerticalDivider.classNames.js\n\n\n/**\n * @deprecated use getStyles exported from VerticalDivider.styles.ts\n */\nvar VerticalDivider_classNames_getDividerClassNames = memoizeFunction(\n// eslint-disable-next-line deprecation/deprecation\nfunction (theme) {\n    return mergeStyleSets({\n        wrapper: {\n            display: 'inline-flex',\n            height: '100%',\n            alignItems: 'center',\n        },\n        divider: {\n            width: 1,\n            height: '100%',\n            backgroundColor: theme.palette.neutralTertiaryAlt,\n        },\n    });\n});\n//# sourceMappingURL=VerticalDivider.classNames.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ContextualMenu/ContextualMenu.cnstyles.js\n\n\n\nvar CONTEXTUAL_MENU_ITEM_HEIGHT = 36;\nvar MediumScreenSelector = getScreenSelector(0, ScreenWidthMaxMedium);\nvar getItemHighContrastStyles = memoizeFunction(function () {\n    var _a;\n    return {\n        selectors: (_a = {},\n            _a[HighContrastSelector] = {\n                backgroundColor: 'Highlight',\n                borderColor: 'Highlight',\n                color: 'HighlightText',\n                MsHighContrastAdjust: 'none',\n            },\n            _a),\n    };\n});\nvar getMenuItemStyles = memoizeFunction(function (theme) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    var semanticColors = theme.semanticColors, fonts = theme.fonts, palette = theme.palette;\n    var ContextualMenuItemBackgroundHoverColor = semanticColors.menuItemBackgroundHovered;\n    var ContextualMenuItemTextHoverColor = semanticColors.menuItemTextHovered;\n    var ContextualMenuItemBackgroundSelectedColor = semanticColors.menuItemBackgroundPressed;\n    var ContextualMenuItemDividerColor = semanticColors.bodyDivider;\n    var menuItemStyles = {\n        item: [\n            fonts.medium,\n            {\n                color: semanticColors.bodyText,\n                position: 'relative',\n                boxSizing: 'border-box',\n            },\n        ],\n        divider: {\n            display: 'block',\n            height: '1px',\n            backgroundColor: ContextualMenuItemDividerColor,\n            position: 'relative',\n        },\n        root: [\n            getFocusStyle(theme),\n            fonts.medium,\n            {\n                color: semanticColors.bodyText,\n                backgroundColor: 'transparent',\n                border: 'none',\n                width: '100%',\n                height: CONTEXTUAL_MENU_ITEM_HEIGHT,\n                lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,\n                display: 'block',\n                cursor: 'pointer',\n                padding: '0px 8px 0 4px',\n                textAlign: 'left',\n            },\n        ],\n        rootDisabled: {\n            color: semanticColors.disabledBodyText,\n            cursor: 'default',\n            pointerEvents: 'none',\n            selectors: __assign((_a = {}, _a[HighContrastSelector] = {\n                color: 'GrayText',\n                opacity: 1,\n            }, _a), getEdgeChromiumNoHighContrastAdjustSelector()),\n        },\n        rootHovered: __assign({ backgroundColor: ContextualMenuItemBackgroundHoverColor, color: ContextualMenuItemTextHoverColor, selectors: {\n                '.ms-ContextualMenu-icon': {\n                    color: palette.themeDarkAlt,\n                },\n                '.ms-ContextualMenu-submenuIcon': {\n                    color: palette.neutralPrimary,\n                },\n            } }, getItemHighContrastStyles()),\n        rootFocused: __assign({ backgroundColor: palette.white }, getItemHighContrastStyles()),\n        rootChecked: __assign({ selectors: {\n                '.ms-ContextualMenu-checkmarkIcon': {\n                    color: palette.neutralPrimary,\n                },\n            } }, getItemHighContrastStyles()),\n        rootPressed: __assign({ backgroundColor: ContextualMenuItemBackgroundSelectedColor, selectors: {\n                '.ms-ContextualMenu-icon': {\n                    color: palette.themeDark,\n                },\n                '.ms-ContextualMenu-submenuIcon': {\n                    color: palette.neutralPrimary,\n                },\n            } }, getItemHighContrastStyles()),\n        rootExpanded: __assign({ backgroundColor: ContextualMenuItemBackgroundSelectedColor, color: semanticColors.bodyTextChecked }, getItemHighContrastStyles()),\n        linkContent: {\n            whiteSpace: 'nowrap',\n            height: 'inherit',\n            display: 'flex',\n            alignItems: 'center',\n            maxWidth: '100%',\n        },\n        anchorLink: {\n            padding: '0px 8px 0 4px',\n            textRendering: 'auto',\n            color: 'inherit',\n            letterSpacing: 'normal',\n            wordSpacing: 'normal',\n            textTransform: 'none',\n            textIndent: '0px',\n            textShadow: 'none',\n            textDecoration: 'none',\n            boxSizing: 'border-box',\n        },\n        label: {\n            margin: '0 4px',\n            verticalAlign: 'middle',\n            display: 'inline-block',\n            flexGrow: '1',\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n        },\n        secondaryText: {\n            color: theme.palette.neutralSecondary,\n            paddingLeft: '20px',\n            textAlign: 'right',\n        },\n        icon: {\n            display: 'inline-block',\n            minHeight: '1px',\n            maxHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,\n            fontSize: IconFontSizes.medium,\n            width: IconFontSizes.medium,\n            margin: '0 4px',\n            verticalAlign: 'middle',\n            flexShrink: '0',\n            selectors: (_b = {},\n                _b[MediumScreenSelector] = {\n                    fontSize: IconFontSizes.large,\n                    width: IconFontSizes.large,\n                },\n                _b),\n        },\n        iconColor: {\n            color: semanticColors.menuIcon,\n            selectors: (_c = {},\n                _c[HighContrastSelector] = {\n                    color: 'inherit',\n                },\n                _c['$root:hover &'] = {\n                    selectors: (_d = {},\n                        _d[HighContrastSelector] = {\n                            color: 'HighlightText',\n                        },\n                        _d),\n                },\n                _c['$root:focus &'] = {\n                    selectors: (_e = {},\n                        _e[HighContrastSelector] = {\n                            color: 'HighlightText',\n                        },\n                        _e),\n                },\n                _c),\n        },\n        iconDisabled: {\n            color: semanticColors.disabledBodyText,\n        },\n        checkmarkIcon: {\n            color: semanticColors.bodySubtext,\n            selectors: (_f = {},\n                _f[HighContrastSelector] = {\n                    color: 'HighlightText',\n                },\n                _f),\n        },\n        subMenuIcon: {\n            height: CONTEXTUAL_MENU_ITEM_HEIGHT,\n            lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,\n            color: palette.neutralSecondary,\n            textAlign: 'center',\n            display: 'inline-block',\n            verticalAlign: 'middle',\n            flexShrink: '0',\n            fontSize: IconFontSizes.small,\n            selectors: (_g = {\n                    ':hover': {\n                        color: palette.neutralPrimary,\n                    },\n                    ':active': {\n                        color: palette.neutralPrimary,\n                    }\n                },\n                _g[MediumScreenSelector] = {\n                    fontSize: IconFontSizes.medium,\n                },\n                _g[HighContrastSelector] = {\n                    color: 'HighlightText',\n                },\n                _g),\n        },\n        splitButtonFlexContainer: [\n            getFocusStyle(theme),\n            {\n                display: 'flex',\n                height: CONTEXTUAL_MENU_ITEM_HEIGHT,\n                flexWrap: 'nowrap',\n                justifyContent: 'center',\n                alignItems: 'flex-start',\n            },\n        ],\n    };\n    return concatStyleSets(menuItemStyles);\n});\n//# sourceMappingURL=ContextualMenu.cnstyles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ContextualMenu/ContextualMenu.classNames.js\n\n\n\n\nvar CONTEXTUAL_SPLIT_MENU_MINWIDTH = '28px';\nvar ContextualMenu_classNames_MediumScreenSelector = getScreenSelector(0, ScreenWidthMaxMedium);\nvar getSplitButtonVerticalDividerClassNames = memoizeFunction(\n/* eslint-disable deprecation/deprecation */\nfunction (theme) {\n    var _a;\n    return mergeStyleSets(VerticalDivider_classNames_getDividerClassNames(theme), {\n        /* eslint-enable deprecation/deprecation */\n        wrapper: {\n            position: 'absolute',\n            right: 28,\n            selectors: (_a = {},\n                _a[ContextualMenu_classNames_MediumScreenSelector] = {\n                    right: 32,\n                },\n                _a),\n        },\n        divider: {\n            height: 16,\n            width: 1,\n        },\n    });\n});\nvar ContextualMenu_classNames_GlobalClassNames = {\n    item: 'ms-ContextualMenu-item',\n    divider: 'ms-ContextualMenu-divider',\n    root: 'ms-ContextualMenu-link',\n    isChecked: 'is-checked',\n    isExpanded: 'is-expanded',\n    isDisabled: 'is-disabled',\n    linkContent: 'ms-ContextualMenu-linkContent',\n    linkContentMenu: 'ms-ContextualMenu-linkContent',\n    icon: 'ms-ContextualMenu-icon',\n    iconColor: 'ms-ContextualMenu-iconColor',\n    checkmarkIcon: 'ms-ContextualMenu-checkmarkIcon',\n    subMenuIcon: 'ms-ContextualMenu-submenuIcon',\n    label: 'ms-ContextualMenu-itemText',\n    secondaryText: 'ms-ContextualMenu-secondaryText',\n    splitMenu: 'ms-ContextualMenu-splitMenu',\n};\n/**\n * @deprecated To be removed in 7.0.\n * @internal\n * This is a package-internal method that has been depended on.\n * It is being kept in this form for backwards compatibility.\n * It should be cleaned up in 7.0.\n *\n * TODO: Audit perf. impact of and potentially remove memoizeFunction.\n * https://github.com/microsoft/fluentui/issues/5534\n */\nvar ContextualMenu_classNames_getItemClassNames = memoizeFunction(function (theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className) {\n    var _a, _b, _c, _d;\n    var styles = getMenuItemStyles(theme);\n    var classNames = getGlobalClassNames(ContextualMenu_classNames_GlobalClassNames, theme);\n    return mergeStyleSets({\n        item: [classNames.item, styles.item, itemClassName],\n        divider: [classNames.divider, styles.divider, dividerClassName],\n        root: [\n            classNames.root,\n            styles.root,\n            checked && [classNames.isChecked, styles.rootChecked],\n            isAnchorLink && styles.anchorLink,\n            expanded && [classNames.isExpanded, styles.rootExpanded],\n            disabled && [classNames.isDisabled, styles.rootDisabled],\n            !disabled &&\n                !expanded && [\n                {\n                    selectors: (_a = {\n                            ':hover': styles.rootHovered,\n                            ':active': styles.rootPressed\n                        },\n                        _a[\".\" + IsFocusVisibleClassName + \" &:focus, .\" + IsFocusVisibleClassName + \" &:focus:hover\"] = styles.rootFocused,\n                        _a[\".\" + IsFocusVisibleClassName + \" &:hover\"] = { background: 'inherit;' },\n                        _a),\n                },\n            ],\n            className,\n        ],\n        splitPrimary: [\n            styles.root,\n            {\n                width: \"calc(100% - \" + CONTEXTUAL_SPLIT_MENU_MINWIDTH + \")\",\n            },\n            checked && ['is-checked', styles.rootChecked],\n            (disabled || primaryDisabled) && ['is-disabled', styles.rootDisabled],\n            !(disabled || primaryDisabled) &&\n                !checked && [\n                {\n                    selectors: (_b = {\n                            ':hover': styles.rootHovered\n                        },\n                        // when hovering over the splitPrimary also affect the splitMenu\n                        _b[\":hover ~ .\" + classNames.splitMenu] = styles.rootHovered,\n                        _b[':active'] = styles.rootPressed,\n                        _b[\".\" + IsFocusVisibleClassName + \" &:focus, .\" + IsFocusVisibleClassName + \" &:focus:hover\"] = styles.rootFocused,\n                        _b[\".\" + IsFocusVisibleClassName + \" &:hover\"] = { background: 'inherit;' },\n                        _b),\n                },\n            ],\n        ],\n        splitMenu: [\n            classNames.splitMenu,\n            styles.root,\n            {\n                flexBasis: '0',\n                padding: '0 8px',\n                minWidth: CONTEXTUAL_SPLIT_MENU_MINWIDTH,\n            },\n            expanded && ['is-expanded', styles.rootExpanded],\n            disabled && ['is-disabled', styles.rootDisabled],\n            !disabled &&\n                !expanded && [\n                {\n                    selectors: (_c = {\n                            ':hover': styles.rootHovered,\n                            ':active': styles.rootPressed\n                        },\n                        _c[\".\" + IsFocusVisibleClassName + \" &:focus, .\" + IsFocusVisibleClassName + \" &:focus:hover\"] = styles.rootFocused,\n                        _c[\".\" + IsFocusVisibleClassName + \" &:hover\"] = { background: 'inherit;' },\n                        _c),\n                },\n            ],\n        ],\n        anchorLink: styles.anchorLink,\n        linkContent: [classNames.linkContent, styles.linkContent],\n        linkContentMenu: [\n            classNames.linkContentMenu,\n            styles.linkContent,\n            {\n                justifyContent: 'center',\n            },\n        ],\n        icon: [\n            classNames.icon,\n            knownIcon && styles.iconColor,\n            styles.icon,\n            iconClassName,\n            disabled && [classNames.isDisabled, styles.iconDisabled],\n        ],\n        iconColor: styles.iconColor,\n        checkmarkIcon: [classNames.checkmarkIcon, knownIcon && styles.checkmarkIcon, styles.icon, iconClassName],\n        subMenuIcon: [\n            classNames.subMenuIcon,\n            styles.subMenuIcon,\n            subMenuClassName,\n            expanded && { color: theme.palette.neutralPrimary },\n            disabled && [styles.iconDisabled],\n        ],\n        label: [classNames.label, styles.label],\n        secondaryText: [classNames.secondaryText, styles.secondaryText],\n        splitContainer: [\n            styles.splitButtonFlexContainer,\n            !disabled &&\n                !checked && [\n                {\n                    selectors: (_d = {},\n                        _d[\".\" + IsFocusVisibleClassName + \" &:focus, .\" + IsFocusVisibleClassName + \" &:focus:hover\"] = styles.rootFocused,\n                        _d),\n                },\n            ],\n        ],\n    });\n});\n/**\n * Wrapper function for generating ContextualMenuItem classNames which adheres to\n * the getStyles API, but invokes memoized className generator function with\n * primitive values.\n *\n * @param props the ContextualMenuItem style props used to generate its styles.\n */\nvar getItemStyles = function (props) {\n    var theme = props.theme, disabled = props.disabled, expanded = props.expanded, checked = props.checked, isAnchorLink = props.isAnchorLink, knownIcon = props.knownIcon, itemClassName = props.itemClassName, dividerClassName = props.dividerClassName, iconClassName = props.iconClassName, subMenuClassName = props.subMenuClassName, primaryDisabled = props.primaryDisabled, className = props.className;\n    // eslint-disable-next-line deprecation/deprecation\n    return ContextualMenu_classNames_getItemClassNames(theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className);\n};\n//# sourceMappingURL=ContextualMenu.classNames.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ContextualMenu/ContextualMenuItem.js\n\n\n\n/**\n * ContextualMenuItem description\n */\nvar ContextualMenuItem = styled(ContextualMenuItem_base_ContextualMenuItemBase, getItemStyles, undefined, { scope: 'ContextualMenuItem' });\n//# sourceMappingURL=ContextualMenuItem.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuItemWrapper.js\n\n\n\nvar ContextualMenuItemWrapper_ContextualMenuItemWrapper = /** @class */ (function (_super) {\n    __extends(ContextualMenuItemWrapper, _super);\n    function ContextualMenuItemWrapper(props) {\n        var _this = _super.call(this, props) || this;\n        _this._onItemMouseEnter = function (ev) {\n            var _a = _this.props, item = _a.item, onItemMouseEnter = _a.onItemMouseEnter;\n            if (onItemMouseEnter) {\n                onItemMouseEnter(item, ev, ev.currentTarget);\n            }\n        };\n        _this._onItemClick = function (ev) {\n            var _a = _this.props, item = _a.item, onItemClickBase = _a.onItemClickBase;\n            if (onItemClickBase) {\n                onItemClickBase(item, ev, ev.currentTarget);\n            }\n        };\n        _this._onItemMouseLeave = function (ev) {\n            var _a = _this.props, item = _a.item, onItemMouseLeave = _a.onItemMouseLeave;\n            if (onItemMouseLeave) {\n                onItemMouseLeave(item, ev);\n            }\n        };\n        _this._onItemKeyDown = function (ev) {\n            var _a = _this.props, item = _a.item, onItemKeyDown = _a.onItemKeyDown;\n            if (onItemKeyDown) {\n                onItemKeyDown(item, ev);\n            }\n        };\n        _this._onItemMouseMove = function (ev) {\n            var _a = _this.props, item = _a.item, onItemMouseMove = _a.onItemMouseMove;\n            if (onItemMouseMove) {\n                onItemMouseMove(item, ev, ev.currentTarget);\n            }\n        };\n        _this._getSubMenuId = function (item) {\n            var getSubMenuId = _this.props.getSubMenuId;\n            if (getSubMenuId) {\n                return getSubMenuId(item);\n            }\n        };\n        _this._getSubmenuTarget = function () {\n            return undefined;\n        };\n        initializeComponentRef(_this);\n        return _this;\n    }\n    ContextualMenuItemWrapper.prototype.shouldComponentUpdate = function (newProps) {\n        return !shallowCompare(newProps, this.props);\n    };\n    return ContextualMenuItemWrapper;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=ContextualMenuItemWrapper.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/utilities/keytips/KeytipConstants.js\nvar KTP_PREFIX = 'ktp';\nvar KTP_SEPARATOR = '-';\nvar KTP_FULL_PREFIX = KTP_PREFIX + KTP_SEPARATOR;\nvar DATAKTP_TARGET = 'data-ktp-target';\nvar DATAKTP_EXECUTE_TARGET = 'data-ktp-execute-target';\nvar DATAKTP_ARIA_TARGET = 'data-ktp-aria-target';\nvar KTP_LAYER_ID = 'ktp-layer-id';\nvar KTP_ARIA_SEPARATOR = ', ';\n// Events\nvar KeytipEvents;\n(function (KeytipEvents) {\n    KeytipEvents.KEYTIP_ADDED = 'keytipAdded';\n    KeytipEvents.KEYTIP_REMOVED = 'keytipRemoved';\n    KeytipEvents.KEYTIP_UPDATED = 'keytipUpdated';\n    KeytipEvents.PERSISTED_KEYTIP_ADDED = 'persistedKeytipAdded';\n    KeytipEvents.PERSISTED_KEYTIP_REMOVED = 'persistedKeytipRemoved';\n    KeytipEvents.PERSISTED_KEYTIP_EXECUTE = 'persistedKeytipExecute';\n    KeytipEvents.ENTER_KEYTIP_MODE = 'enterKeytipMode';\n    KeytipEvents.EXIT_KEYTIP_MODE = 'exitKeytipMode';\n})(KeytipEvents || (KeytipEvents = {}));\n//# sourceMappingURL=KeytipConstants.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/react-hooks/lib/useConst.js\n\n/**\n * Hook to initialize and return a constant value. Unlike `React.useMemo`, this is guaranteed to\n * always return the same value (and if the initializer is a function, only call it once).\n * This is similar to setting a private member in a class constructor.\n *\n * If the value should ever change based on dependencies, use `React.useMemo` instead.\n *\n * If the value itself is a function, consider using `useConstCallback` instead.\n *\n * @param initialValue - Initial value, or function to get the initial value. Similar to `useState`,\n * only the value/function passed in the first time this is called is respected.\n * @returns The value. The identity of this value will always be the same.\n */\nfunction useConst(initialValue) {\n    // Use useRef to store the value because it's the least expensive built-in hook that works here\n    // (we could also use `const [value] = React.useState(initialValue)` but that's more expensive\n    // internally due to reducer handling which we don't need)\n    var ref = react[\"useRef\"]();\n    if (ref.current === undefined) {\n        // Box the value in an object so we can tell if it's initialized even if the initializer\n        // returns/is undefined\n        ref.current = {\n            value: typeof initialValue === 'function' ? initialValue() : initialValue,\n        };\n    }\n    return ref.current.value;\n}\n//# sourceMappingURL=useConst.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/react-hooks/lib/usePrevious.js\n\n/**\n * Hook keeping track of a given value from a previous execution of the component the Hook is used in.\n *\n * See [React Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state)\n */\nfunction usePrevious(value) {\n    var ref = Object(react[\"useRef\"])();\n    Object(react[\"useEffect\"])(function () {\n        ref.current = value;\n    });\n    return ref.current;\n}\n//# sourceMappingURL=usePrevious.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/utilities/keytips/KeytipManager.js\n\n\n\n/**\n * This class is responsible for handling registering, updating, and unregistering of keytips\n */\nvar KeytipManager_KeytipManager = /** @class */ (function () {\n    function KeytipManager() {\n        this.keytips = {};\n        this.persistedKeytips = {};\n        this.sequenceMapping = {};\n        // This is (and should be) updated and kept in sync\n        // with the inKeytipMode in KeytipLayer.\n        this.inKeytipMode = false;\n        // Boolean that gets checked before entering keytip mode by the KeytipLayer\n        // Used for an override in special cases (e.g. Disable entering keytip mode when a modal is shown)\n        this.shouldEnterKeytipMode = true;\n        // Boolean to indicate whether to delay firing an event to update subscribers of\n        // keytip data changed.\n        this.delayUpdatingKeytipChange = false;\n    }\n    /**\n     * Static function to get singleton KeytipManager instance\n     *\n     * @returns {KeytipManager} Singleton KeytipManager instance\n     */\n    KeytipManager.getInstance = function () {\n        return this._instance;\n    };\n    /**\n     * Initialization code to set set parameters to define\n     * how the KeytipManager handles keytip data.\n     *\n     * @param delayUpdatingKeytipChange - T/F if we should delay notifiying keytip subscribers\n     * of keytip changes\n     */\n    KeytipManager.prototype.init = function (delayUpdatingKeytipChange) {\n        this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;\n    };\n    /**\n     * Registers a keytip\n     *\n     * @param keytipProps - Keytip to register\n     * @param persisted - T/F if this keytip should be persisted, default is false\n     * @returns {string} Unique ID for this keytip\n     */\n    KeytipManager.prototype.register = function (keytipProps, persisted) {\n        if (persisted === void 0) { persisted = false; }\n        var props = keytipProps;\n        if (!persisted) {\n            // Add the overflowSetSequence if necessary\n            props = this.addParentOverflow(keytipProps);\n            this.sequenceMapping[props.keySequences.toString()] = props;\n        }\n        // Create a unique keytip\n        var uniqueKeytip = this._getUniqueKtp(props);\n        // Add to dictionary\n        persisted\n            ? (this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip)\n            : (this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip);\n        // We only want to add something new if we are currently showing keytip mode\n        if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n            var event_1 = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;\n            EventGroup_EventGroup.raise(this, event_1, {\n                keytip: props,\n                uniqueID: uniqueKeytip.uniqueID,\n            });\n        }\n        return uniqueKeytip.uniqueID;\n    };\n    /**\n     * Update a keytip\n     *\n     * @param keytipProps - Keytip to update\n     * @param uniqueID - Unique ID of this keytip\n     */\n    KeytipManager.prototype.update = function (keytipProps, uniqueID) {\n        var newKeytipProps = this.addParentOverflow(keytipProps);\n        var uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);\n        var oldKeyTip = this.keytips[uniqueID];\n        if (oldKeyTip) {\n            // Update everything except 'visible'\n            uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;\n            // Update keytip in this.keytips\n            this.keytips[uniqueID] = uniqueKeytip;\n            // Update the sequence to be up to date\n            delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];\n            this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;\n            // Raise event only if we are currently in keytip mode\n            if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n                EventGroup_EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {\n                    keytip: uniqueKeytip.keytip,\n                    uniqueID: uniqueKeytip.uniqueID,\n                });\n            }\n        }\n    };\n    /**\n     * Unregisters a keytip\n     *\n     * @param keytipToRemove - IKeytipProps of the keytip to remove\n     * @param uniqueID - Unique ID of this keytip\n     * @param persisted - T/F if this keytip should be persisted, default is false\n     */\n    KeytipManager.prototype.unregister = function (keytipToRemove, uniqueID, persisted) {\n        if (persisted === void 0) { persisted = false; }\n        persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];\n        !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];\n        var event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;\n        // Update keytips only if we're in keytip mode\n        if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n            EventGroup_EventGroup.raise(this, event, {\n                keytip: keytipToRemove,\n                uniqueID: uniqueID,\n            });\n        }\n    };\n    /**\n     * Manual call to enter keytip mode\n     */\n    KeytipManager.prototype.enterKeytipMode = function () {\n        EventGroup_EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);\n    };\n    /**\n     * Manual call to exit keytip mode\n     */\n    KeytipManager.prototype.exitKeytipMode = function () {\n        EventGroup_EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);\n    };\n    /**\n     * Gets all IKeytipProps from this.keytips\n     *\n     * @returns {IKeytipProps[]} All keytips stored in the manager\n     */\n    KeytipManager.prototype.getKeytips = function () {\n        var _this = this;\n        return Object.keys(this.keytips).map(function (key) { return _this.keytips[key].keytip; });\n    };\n    /**\n     * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it\n     *\n     * @param keytipProps - Keytip props to add overflowSetSequence to if necessary\n     * @returns {IKeytipProps} - Modified keytip props, if needed to be modified\n     */\n    KeytipManager.prototype.addParentOverflow = function (keytipProps) {\n        var fullSequence = __spreadArrays(keytipProps.keySequences);\n        fullSequence.pop();\n        if (fullSequence.length !== 0) {\n            var parentKeytip = this.sequenceMapping[fullSequence.toString()];\n            if (parentKeytip && parentKeytip.overflowSetSequence) {\n                return __assign(__assign({}, keytipProps), { overflowSetSequence: parentKeytip.overflowSetSequence });\n            }\n        }\n        return keytipProps;\n    };\n    /**\n     * Public function to bind for overflow items that have a submenu\n     *\n     * @param overflowButtonSequences\n     * @param keytipSequences\n     */\n    KeytipManager.prototype.menuExecute = function (overflowButtonSequences, keytipSequences) {\n        EventGroup_EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {\n            overflowButtonSequences: overflowButtonSequences,\n            keytipSequences: keytipSequences,\n        });\n    };\n    /**\n     * Creates an IUniqueKeytip object\n     *\n     * @param keytipProps - IKeytipProps\n     * @param uniqueID - Unique ID, will default to the next unique ID if not passed\n     * @returns {IUniqueKeytip} IUniqueKeytip object\n     */\n    KeytipManager.prototype._getUniqueKtp = function (keytipProps, uniqueID) {\n        if (uniqueID === void 0) { uniqueID = getId(); }\n        return { keytip: __assign({}, keytipProps), uniqueID: uniqueID };\n    };\n    KeytipManager._instance = new KeytipManager();\n    return KeytipManager;\n}());\n\n//# sourceMappingURL=KeytipManager.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/array.js\n/**\n * Helper to find the index of an item within an array, using a callback to\n * determine the match.\n *\n * @public\n * @param array - Array to search.\n * @param cb - Callback which returns true on matches.\n * @param fromIndex - Optional index to start from (defaults to 0)\n */\nfunction findIndex(array, cb, fromIndex) {\n    if (fromIndex === void 0) { fromIndex = 0; }\n    var index = -1;\n    for (var i = fromIndex; array && i < array.length; i++) {\n        if (cb(array[i], i)) {\n            index = i;\n            break;\n        }\n    }\n    return index;\n}\n/**\n * Helper to find the first item within an array that satisfies the callback.\n * @param array - Array to search\n * @param cb - Callback which returns true on matches\n */\nfunction find(array, cb) {\n    var index = findIndex(array, cb);\n    if (index < 0) {\n        return undefined;\n    }\n    return array[index];\n}\n/**\n * Creates an array of a given size and helper method to populate.\n *\n * @public\n * @param size - Size of array.\n * @param getItem - Callback to populate given cell index.\n */\nfunction createArray(size, getItem) {\n    var array = [];\n    for (var i = 0; i < size; i++) {\n        array.push(getItem(i));\n    }\n    return array;\n}\n/**\n * Convert the given array to a matrix with columnCount number\n * of columns.\n *\n * @public\n * @param items - The array to convert\n * @param columnCount - The number of columns for the resulting matrix\n * @returns A matrix of items\n */\nfunction toMatrix(items, columnCount) {\n    return items.reduce(function (rows, currentValue, index) {\n        if (index % columnCount === 0) {\n            rows.push([currentValue]);\n        }\n        else {\n            rows[rows.length - 1].push(currentValue);\n        }\n        return rows;\n    }, []);\n}\n/**\n * Given an array, it returns a new array that does not contain the item at the given index.\n * @param array - The array to operate on\n * @param index - The index of the element to remove\n */\nfunction removeIndex(array, index) {\n    return array.filter(function (_, i) { return index !== i; });\n}\n/**\n * Given an array, this function returns a new array where the element at a given index has been replaced.\n * @param array - The array to operate on\n * @param newElement - The element that will be placed in the new array\n * @param index - The index of the element that should be replaced\n */\nfunction replaceElement(array, newElement, index) {\n    var copy = array.slice();\n    copy[index] = newElement;\n    return copy;\n}\n/**\n * Given an array, this function returns a new array where an element has been inserted at the given index.\n * @param array - The array to operate on\n * @param index - The index where an element should be inserted\n * @param itemToAdd - The element to insert\n */\nfunction addElementAtIndex(array, index, itemToAdd) {\n    var copy = array.slice();\n    copy.splice(index, 0, itemToAdd);\n    return copy;\n}\n/**\n * Given an array where each element is of type T or T[], flatten it into an array of T\n * @param array - The array where each element can optionally also be an array\n */\nfunction flatten(array) {\n    var result = [];\n    array.forEach(function (item) { return (result = result.concat(item)); });\n    return result;\n}\n/**\n * Returns a boolean indicating if the two given arrays are equal in length and values.\n *\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.\n */\nfunction arraysEqual(array1, array2) {\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    for (var i = 0; i < array1.length; i++) {\n        if (array1[i] !== array2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=array.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/utilities/keytips/KeytipUtils.js\n\n\n\n/**\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\n * keySequences should not include the initial keytip 'start' sequence.\n *\n * @param keySequences - Full path of IKeySequences for one keytip.\n * @returns {string} String to use for the keytip ID.\n */\nfunction sequencesToID(keySequences) {\n    return keySequences.reduce(function (prevValue, keySequence) {\n        return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);\n    }, KTP_PREFIX);\n}\n/**\n * Merges an overflow sequence with a key sequence.\n *\n * @param keySequences - Full sequence for one keytip.\n * @param overflowKeySequences - Full overflow keytip sequence.\n * @returns {string[]} Sequence that will be used by the keytip when in the overflow.\n */\nfunction mergeOverflows(keySequences, overflowKeySequences) {\n    var overflowSequenceLen = overflowKeySequences.length;\n    var overflowSequence = __spreadArrays(overflowKeySequences).pop();\n    var newKeySequences = __spreadArrays(keySequences);\n    return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence);\n}\n/**\n * Constructs the data-ktp-target attribute selector from a full key sequence.\n *\n * @param keySequences - Full string[] for a Keytip.\n * @returns {string} String selector to use to query for the keytip target.\n */\nfunction ktpTargetFromSequences(keySequences) {\n    return '[' + DATAKTP_TARGET + '=\"' + sequencesToID(keySequences) + '\"]';\n}\n/**\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\n *\n * @param keytipId - ID of the Keytip.\n * @returns {string} String selector to use to query for the keytip execute target.\n */\nfunction ktpTargetFromId(keytipId) {\n    return '[' + DATAKTP_EXECUTE_TARGET + '=\"' + keytipId + '\"]';\n}\n/**\n * Gets the aria-describedby value to put on the component with this keytip.\n *\n * @param keySequences - KeySequences of the keytip.\n * @returns {string} The aria-describedby value to set on the component with this keytip.\n */\nfunction getAriaDescribedBy(keySequences) {\n    var describedby = ' ' + KTP_LAYER_ID;\n    if (!keySequences.length) {\n        // Return just the layer ID\n        return describedby;\n    }\n    return describedby + ' ' + sequencesToID(keySequences);\n}\n//# sourceMappingURL=KeytipUtils.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/KeytipData/useKeytipData.js\n\n\n\n\n\n/**\n * Hook that creates attributes for components which are enabled with Keytip.\n */\nfunction useKeytipData(options) {\n    var _a, _b;\n    var uniqueId = react[\"useRef\"]();\n    var keytipProps = options.keytipProps\n        ? __assign({ disabled: options.disabled }, options.keytipProps) : undefined;\n    var keytipManager = useConst(KeytipManager_KeytipManager.getInstance());\n    react[\"useEffect\"](function () {\n        // Register Keytip in KeytipManager\n        if (keytipProps) {\n            uniqueId.current = keytipManager.register(keytipProps);\n        }\n        return function () {\n            // Unregister Keytip in KeytipManager\n            keytipProps && keytipManager.unregister(keytipProps, uniqueId.current);\n        };\n        // this is meant to run only at mount, and updates are handled separately\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    var prevOptions = usePrevious(options);\n    if (uniqueId.current &&\n        keytipProps &&\n        (((_a = prevOptions) === null || _a === void 0 ? void 0 : _a.keytipProps) !== options.keytipProps || ((_b = prevOptions) === null || _b === void 0 ? void 0 : _b.disabled) !== options.disabled)) {\n        keytipManager.update(keytipProps, uniqueId.current);\n    }\n    var nativeKeytipProps = {\n        ariaDescribedBy: undefined,\n        keytipId: undefined,\n    };\n    if (keytipProps) {\n        nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);\n    }\n    return nativeKeytipProps;\n}\n/**\n * Gets the aria- and data- attributes to attach to the component\n * @param keytipProps - options for Keytip\n * @param describedByPrepend - ariaDescribedBy value to prepend\n */\nfunction getKeytipData(keytipManager, keytipProps, describedByPrepend) {\n    // Add the parent overflow sequence if necessary\n    var newKeytipProps = keytipManager.addParentOverflow(keytipProps);\n    // Construct aria-describedby and data-ktp-id attributes\n    var ariaDescribedBy = mergeAriaAttributeValues(describedByPrepend, getAriaDescribedBy(newKeytipProps.keySequences));\n    var keySequences = __spreadArrays(newKeytipProps.keySequences);\n    if (newKeytipProps.overflowSetSequence) {\n        keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n    }\n    var keytipId = sequencesToID(keySequences);\n    return {\n        ariaDescribedBy: ariaDescribedBy,\n        keytipId: keytipId,\n    };\n}\n//# sourceMappingURL=useKeytipData.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/KeytipData/KeytipData.js\n\n\n\n/**\n * A small element to help the target component correctly read out its aria-describedby for its Keytip\n * {@docCategory Keytips}\n */\nvar KeytipData = function (props) {\n    var _a;\n    var children = props.children, keytipDataProps = __rest(props, [\"children\"]);\n    var _b = useKeytipData(keytipDataProps), keytipId = _b.keytipId, ariaDescribedBy = _b.ariaDescribedBy;\n    return children((_a = {},\n        _a[DATAKTP_TARGET] = keytipId,\n        _a[DATAKTP_EXECUTE_TARGET] = keytipId,\n        _a['aria-describedby'] = ariaDescribedBy,\n        _a));\n};\n//# sourceMappingURL=KeytipData.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuAnchor.js\n\n\n\n\n\n\n\nvar ContextualMenuAnchor_ContextualMenuAnchor = /** @class */ (function (_super) {\n    __extends(ContextualMenuAnchor, _super);\n    function ContextualMenuAnchor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._anchor = react[\"createRef\"]();\n        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n            return __assign(__assign({}, keytipProps), { hasMenu: true });\n        });\n        _this._getSubmenuTarget = function () {\n            return _this._anchor.current ? _this._anchor.current : undefined;\n        };\n        _this._onItemClick = function (ev) {\n            var _a = _this.props, item = _a.item, onItemClick = _a.onItemClick;\n            if (onItemClick) {\n                onItemClick(item, ev);\n            }\n        };\n        return _this;\n    }\n    ContextualMenuAnchor.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, item = _a.item, classNames = _a.classNames, index = _a.index, focusableElementIndex = _a.focusableElementIndex, totalItemCount = _a.totalItemCount, hasCheckmarks = _a.hasCheckmarks, hasIcons = _a.hasIcons, _b = _a.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, expandedMenuItemKey = _a.expandedMenuItemKey, onItemClick = _a.onItemClick, openSubMenu = _a.openSubMenu, dismissSubMenu = _a.dismissSubMenu, dismissMenu = _a.dismissMenu;\n        var anchorRel = item.rel;\n        if (item.target && item.target.toLowerCase() === '_blank') {\n            anchorRel = anchorRel ? anchorRel : 'nofollow noopener noreferrer'; // Safe default to prevent tabjacking\n        }\n        var subMenuId = this._getSubMenuId(item);\n        var itemHasSubmenu = hasSubmenu(item);\n        var nativeProps = getNativeProps(item, anchorProperties);\n        var disabled = isItemDisabled(item);\n        var itemProps = item.itemProps;\n        var keytipProps = item.keytipProps;\n        if (keytipProps && itemHasSubmenu) {\n            keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n        }\n        return (react[\"createElement\"](\"div\", null,\n            react[\"createElement\"](KeytipData, { keytipProps: item.keytipProps, ariaDescribedBy: nativeProps['aria-describedby'], disabled: disabled }, function (keytipAttributes) { return (react[\"createElement\"](\"a\", __assign({}, nativeProps, keytipAttributes, { ref: _this._anchor, href: item.href, target: item.target, rel: anchorRel, className: classNames.root, role: \"menuitem\", \"aria-owns\": item.key === expandedMenuItemKey ? subMenuId : undefined, \"aria-haspopup\": itemHasSubmenu || undefined, \"aria-expanded\": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined, \"aria-posinset\": focusableElementIndex + 1, \"aria-setsize\": totalItemCount, \"aria-disabled\": isItemDisabled(item), \n                // eslint-disable-next-line deprecation/deprecation\n                style: item.style, onClick: _this._onItemClick, onMouseEnter: _this._onItemMouseEnter, onMouseLeave: _this._onItemMouseLeave, onMouseMove: _this._onItemMouseMove, onKeyDown: itemHasSubmenu ? _this._onItemKeyDown : undefined }),\n                react[\"createElement\"](ChildrenRenderer, __assign({ componentRef: item.componentRef, item: item, classNames: classNames, index: index, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined, hasIcons: hasIcons, openSubMenu: openSubMenu, dismissSubMenu: dismissSubMenu, dismissMenu: dismissMenu, getSubmenuTarget: _this._getSubmenuTarget }, itemProps)))); })));\n    };\n    return ContextualMenuAnchor;\n}(ContextualMenuItemWrapper_ContextualMenuItemWrapper));\n\n//# sourceMappingURL=ContextualMenuAnchor.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuButton.js\n\n\n\n\n\n\n\nvar ContextualMenuButton_ContextualMenuButton = /** @class */ (function (_super) {\n    __extends(ContextualMenuButton, _super);\n    function ContextualMenuButton() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._btn = react[\"createRef\"]();\n        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n            return __assign(__assign({}, keytipProps), { hasMenu: true });\n        });\n        _this._getSubmenuTarget = function () {\n            return _this._btn.current ? _this._btn.current : undefined;\n        };\n        return _this;\n    }\n    ContextualMenuButton.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, item = _a.item, classNames = _a.classNames, index = _a.index, focusableElementIndex = _a.focusableElementIndex, totalItemCount = _a.totalItemCount, hasCheckmarks = _a.hasCheckmarks, hasIcons = _a.hasIcons, _b = _a.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, expandedMenuItemKey = _a.expandedMenuItemKey, onItemMouseDown = _a.onItemMouseDown, onItemClick = _a.onItemClick, openSubMenu = _a.openSubMenu, dismissSubMenu = _a.dismissSubMenu, dismissMenu = _a.dismissMenu;\n        var subMenuId = this._getSubMenuId(item);\n        var isChecked = getIsChecked(item);\n        var canCheck = isChecked !== null;\n        var defaultRole = getMenuItemAriaRole(item);\n        var itemHasSubmenu = hasSubmenu(item);\n        var itemProps = item.itemProps, ariaLabel = item.ariaLabel;\n        var buttonNativeProperties = getNativeProps(item, buttonProperties);\n        // Do not add the disabled attribute to the button so that it is focusable\n        delete buttonNativeProperties.disabled;\n        var itemRole = item.role || defaultRole;\n        var itemButtonProperties = {\n            className: classNames.root,\n            onClick: this._onItemClick,\n            onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,\n            onMouseEnter: this._onItemMouseEnter,\n            onMouseLeave: this._onItemMouseLeave,\n            onMouseDown: function (ev) {\n                return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;\n            },\n            onMouseMove: this._onItemMouseMove,\n            href: item.href,\n            title: item.title,\n            'aria-label': ariaLabel,\n            'aria-haspopup': itemHasSubmenu || undefined,\n            'aria-owns': item.key === expandedMenuItemKey ? subMenuId : undefined,\n            'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n            'aria-posinset': focusableElementIndex + 1,\n            'aria-setsize': totalItemCount,\n            'aria-disabled': isItemDisabled(item),\n            'aria-checked': (itemRole === 'menuitemcheckbox' || itemRole === 'menuitemradio') && canCheck ? !!isChecked : undefined,\n            'aria-selected': itemRole === 'menuitem' && canCheck ? !!isChecked : undefined,\n            role: itemRole,\n            // eslint-disable-next-line deprecation/deprecation\n            style: item.style,\n        };\n        var keytipProps = item.keytipProps;\n        if (keytipProps && itemHasSubmenu) {\n            keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n        }\n        return (react[\"createElement\"](KeytipData, { keytipProps: keytipProps, ariaDescribedBy: buttonNativeProperties['aria-describedby'], disabled: isItemDisabled(item) }, function (keytipAttributes) { return (react[\"createElement\"](\"button\", __assign({ ref: _this._btn }, buttonNativeProperties, itemButtonProperties, keytipAttributes),\n            react[\"createElement\"](ChildrenRenderer, __assign({ componentRef: item.componentRef, item: item, classNames: classNames, index: index, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined, hasIcons: hasIcons, openSubMenu: openSubMenu, dismissSubMenu: dismissSubMenu, dismissMenu: dismissMenu, getSubmenuTarget: _this._getSubmenuTarget }, itemProps)))); }));\n    };\n    return ContextualMenuButton;\n}(ContextualMenuItemWrapper_ContextualMenuItemWrapper));\n\n//# sourceMappingURL=ContextualMenuButton.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Divider/VerticalDivider.styles.js\nvar VerticalDivider_styles_getStyles = function (props) {\n    // eslint-disable-next-line deprecation/deprecation\n    var theme = props.theme, getClassNames = props.getClassNames, className = props.className;\n    if (!theme) {\n        throw new Error('Theme is undefined or null.');\n    }\n    if (getClassNames) {\n        var names = getClassNames(theme);\n        return {\n            wrapper: [names.wrapper],\n            divider: [names.divider],\n        };\n    }\n    return {\n        wrapper: [\n            {\n                display: 'inline-flex',\n                height: '100%',\n                alignItems: 'center',\n            },\n            className,\n        ],\n        divider: [\n            {\n                width: 1,\n                height: '100%',\n                backgroundColor: theme.palette.neutralTertiaryAlt,\n            },\n        ],\n    };\n};\n//# sourceMappingURL=VerticalDivider.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Divider/VerticalDivider.base.js\n\n\nvar VerticalDivider_base_getClassNames = classNamesFunction();\nvar VerticalDividerBase = function (props) {\n    // eslint-disable-next-line deprecation/deprecation\n    var styles = props.styles, theme = props.theme, deprecatedGetClassNames = props.getClassNames, className = props.className;\n    var classNames = VerticalDivider_base_getClassNames(styles, { theme: theme, getClassNames: deprecatedGetClassNames, className: className });\n    return (react[\"createElement\"](\"span\", { className: classNames.wrapper },\n        react[\"createElement\"](\"span\", { className: classNames.divider })));\n};\n//# sourceMappingURL=VerticalDivider.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Divider/VerticalDivider.js\n\n\n\nvar VerticalDivider = styled(VerticalDividerBase, VerticalDivider_styles_getStyles, undefined, {\n    scope: 'VerticalDivider',\n});\n//# sourceMappingURL=VerticalDivider.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuSplitButton.js\n\n\n\n\n\n\n\n\n\nvar TouchIdleDelay = 500; /* ms */\nvar ContextualMenuSplitButton_ContextualMenuSplitButton = /** @class */ (function (_super) {\n    __extends(ContextualMenuSplitButton, _super);\n    function ContextualMenuSplitButton(props) {\n        var _this = _super.call(this, props) || this;\n        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n            return __assign(__assign({}, keytipProps), { hasMenu: true });\n        });\n        _this._onItemKeyDown = function (ev) {\n            var _a = _this.props, item = _a.item, onItemKeyDown = _a.onItemKeyDown;\n            if (ev.which === KeyCodes.enter) {\n                _this._executeItemClick(ev);\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n            else if (onItemKeyDown) {\n                onItemKeyDown(item, ev);\n            }\n        };\n        _this._getSubmenuTarget = function () {\n            return _this._splitButton;\n        };\n        _this._onItemMouseEnterPrimary = function (ev) {\n            var _a = _this.props, item = _a.item, onItemMouseEnter = _a.onItemMouseEnter;\n            if (onItemMouseEnter) {\n                onItemMouseEnter(__assign(__assign({}, item), { subMenuProps: undefined, items: undefined }), ev, _this._splitButton);\n            }\n        };\n        _this._onItemMouseEnterIcon = function (ev) {\n            var _a = _this.props, item = _a.item, onItemMouseEnter = _a.onItemMouseEnter;\n            if (onItemMouseEnter) {\n                onItemMouseEnter(item, ev, _this._splitButton);\n            }\n        };\n        _this._onItemMouseMovePrimary = function (ev) {\n            var _a = _this.props, item = _a.item, onItemMouseMove = _a.onItemMouseMove;\n            if (onItemMouseMove) {\n                onItemMouseMove(__assign(__assign({}, item), { subMenuProps: undefined, items: undefined }), ev, _this._splitButton);\n            }\n        };\n        _this._onItemMouseMoveIcon = function (ev) {\n            var _a = _this.props, item = _a.item, onItemMouseMove = _a.onItemMouseMove;\n            if (onItemMouseMove) {\n                onItemMouseMove(item, ev, _this._splitButton);\n            }\n        };\n        _this._onIconItemClick = function (ev) {\n            var _a = _this.props, item = _a.item, onItemClickBase = _a.onItemClickBase;\n            if (onItemClickBase) {\n                onItemClickBase(item, ev, (_this._splitButton ? _this._splitButton : ev.currentTarget));\n            }\n        };\n        _this._executeItemClick = function (ev) {\n            var _a = _this.props, item = _a.item, executeItemClick = _a.executeItemClick, onItemClick = _a.onItemClick;\n            if (item.disabled || item.isDisabled) {\n                return;\n            }\n            if (_this._processingTouch && onItemClick) {\n                return onItemClick(item, ev);\n            }\n            if (executeItemClick) {\n                executeItemClick(item, ev);\n            }\n        };\n        _this._onTouchStart = function (ev) {\n            if (_this._splitButton && !('onpointerdown' in _this._splitButton)) {\n                _this._handleTouchAndPointerEvent(ev);\n            }\n        };\n        _this._onPointerDown = function (ev) {\n            if (ev.pointerType === 'touch') {\n                _this._handleTouchAndPointerEvent(ev);\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n            }\n        };\n        _this._async = new Async_Async(_this);\n        _this._events = new EventGroup_EventGroup(_this);\n        return _this;\n    }\n    ContextualMenuSplitButton.prototype.componentDidMount = function () {\n        if (this._splitButton && 'onpointerdown' in this._splitButton) {\n            this._events.on(this._splitButton, 'pointerdown', this._onPointerDown, true);\n        }\n    };\n    ContextualMenuSplitButton.prototype.componentWillUnmount = function () {\n        this._async.dispose();\n        this._events.dispose();\n    };\n    ContextualMenuSplitButton.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, item = _a.item, classNames = _a.classNames, index = _a.index, focusableElementIndex = _a.focusableElementIndex, totalItemCount = _a.totalItemCount, hasCheckmarks = _a.hasCheckmarks, hasIcons = _a.hasIcons, onItemMouseLeave = _a.onItemMouseLeave, expandedMenuItemKey = _a.expandedMenuItemKey;\n        var itemHasSubmenu = hasSubmenu(item);\n        var keytipProps = item.keytipProps;\n        if (keytipProps) {\n            keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n        }\n        return (react[\"createElement\"](KeytipData, { keytipProps: keytipProps, disabled: isItemDisabled(item) }, function (keytipAttributes) { return (react[\"createElement\"](\"div\", { \"data-ktp-target\": keytipAttributes['data-ktp-target'], ref: function (splitButton) { return (_this._splitButton = splitButton); }, role: getMenuItemAriaRole(item), \"aria-label\": item.ariaLabel, className: classNames.splitContainer, \"aria-disabled\": isItemDisabled(item), \"aria-expanded\": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined, \"aria-haspopup\": true, \"aria-describedby\": mergeAriaAttributeValues(item.ariaDescription, keytipAttributes['aria-describedby']), \"aria-checked\": item.isChecked || item.checked, \"aria-posinset\": focusableElementIndex + 1, \"aria-setsize\": totalItemCount, onMouseEnter: _this._onItemMouseEnterPrimary, onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(_this, __assign(__assign({}, item), { subMenuProps: null, items: null })) : undefined, onMouseMove: _this._onItemMouseMovePrimary, onKeyDown: _this._onItemKeyDown, onClick: _this._executeItemClick, onTouchStart: _this._onTouchStart, tabIndex: 0, \"data-is-focusable\": true, \"aria-roledescription\": item['aria-roledescription'] },\n            _this._renderSplitPrimaryButton(item, classNames, index, hasCheckmarks, hasIcons),\n            _this._renderSplitDivider(item),\n            _this._renderSplitIconButton(item, classNames, index, keytipAttributes))); }));\n    };\n    ContextualMenuSplitButton.prototype._renderSplitPrimaryButton = function (item, \n    // eslint-disable-next-line deprecation/deprecation\n    classNames, index, hasCheckmarks, hasIcons) {\n        var _a = this.props, _b = _a.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, onItemClick = _a.onItemClick;\n        var itemProps = {\n            key: item.key,\n            disabled: isItemDisabled(item) || item.primaryDisabled,\n            /* eslint-disable deprecation/deprecation */\n            name: item.name,\n            text: item.text || item.name,\n            secondaryText: item.secondaryText,\n            /* eslint-enable deprecation/deprecation */\n            className: classNames.splitPrimary,\n            canCheck: item.canCheck,\n            isChecked: item.isChecked,\n            checked: item.checked,\n            iconProps: item.iconProps,\n            onRenderIcon: item.onRenderIcon,\n            data: item.data,\n            'data-is-focusable': false,\n        };\n        var itemComponentProps = item.itemProps;\n        return (react[\"createElement\"](\"button\", __assign({}, getNativeProps(itemProps, buttonProperties)),\n            react[\"createElement\"](ChildrenRenderer, __assign({ \"data-is-focusable\": false, item: itemProps, classNames: classNames, index: index, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined, hasIcons: hasIcons }, itemComponentProps))));\n    };\n    ContextualMenuSplitButton.prototype._renderSplitDivider = function (item) {\n        var getDividerClassNames = item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;\n        return react[\"createElement\"](VerticalDivider, { getClassNames: getDividerClassNames });\n    };\n    ContextualMenuSplitButton.prototype._renderSplitIconButton = function (item, classNames, // eslint-disable-line deprecation/deprecation\n    index, keytipAttributes) {\n        var _a = this.props, _b = _a.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, onItemMouseLeave = _a.onItemMouseLeave, onItemMouseDown = _a.onItemMouseDown, openSubMenu = _a.openSubMenu, dismissSubMenu = _a.dismissSubMenu, dismissMenu = _a.dismissMenu;\n        var itemProps = {\n            onClick: this._onIconItemClick,\n            disabled: isItemDisabled(item),\n            className: classNames.splitMenu,\n            subMenuProps: item.subMenuProps,\n            submenuIconProps: item.submenuIconProps,\n            split: true,\n            key: item.key,\n        };\n        var buttonProps = __assign(__assign({}, getNativeProps(itemProps, buttonProperties)), {\n            onMouseEnter: this._onItemMouseEnterIcon,\n            onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : undefined,\n            onMouseDown: function (ev) {\n                return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;\n            },\n            onMouseMove: this._onItemMouseMoveIcon,\n            'data-is-focusable': false,\n            'data-ktp-execute-target': keytipAttributes['data-ktp-execute-target'],\n            'aria-hidden': true,\n        });\n        var itemComponentProps = item.itemProps;\n        return (react[\"createElement\"](\"button\", __assign({}, buttonProps),\n            react[\"createElement\"](ChildrenRenderer, __assign({ componentRef: item.componentRef, item: itemProps, classNames: classNames, index: index, hasIcons: false, openSubMenu: openSubMenu, dismissSubMenu: dismissSubMenu, dismissMenu: dismissMenu, getSubmenuTarget: this._getSubmenuTarget }, itemComponentProps))));\n    };\n    ContextualMenuSplitButton.prototype._handleTouchAndPointerEvent = function (ev) {\n        var _this = this;\n        var onTap = this.props.onTap;\n        if (onTap) {\n            onTap(ev);\n        }\n        // If we already have an existing timeout from a previous touch/pointer event\n        // cancel that timeout so we can set a new one.\n        if (this._lastTouchTimeoutId) {\n            this._async.clearTimeout(this._lastTouchTimeoutId);\n            this._lastTouchTimeoutId = undefined;\n        }\n        this._processingTouch = true;\n        this._lastTouchTimeoutId = this._async.setTimeout(function () {\n            _this._processingTouch = false;\n            _this._lastTouchTimeoutId = undefined;\n        }, TouchIdleDelay);\n    };\n    return ContextualMenuSplitButton;\n}(ContextualMenuItemWrapper_ContextualMenuItemWrapper));\n\n//# sourceMappingURL=ContextualMenuSplitButton.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ContextualMenu/ContextualMenu.base.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar ContextualMenu_base_getClassNames = classNamesFunction();\nvar getContextualMenuItemClassNames = classNamesFunction();\nfunction getSubmenuItems(item) {\n    return item.subMenuProps ? item.subMenuProps.items : item.items;\n}\n/**\n * Returns true if a list of menu items can contain a checkbox\n */\nfunction canAnyMenuItemsCheck(items) {\n    return items.some(function (item) {\n        if (item.canCheck) {\n            return true;\n        }\n        // If the item is a section, check if any of the items in the section can check.\n        if (item.sectionProps && item.sectionProps.items.some(function (submenuItem) { return submenuItem.canCheck === true; })) {\n            return true;\n        }\n        return false;\n    });\n}\nvar NavigationIdleDelay = 250 /* ms */;\nvar COMPONENT_NAME = 'ContextualMenu';\nvar _getMenuItemStylesFunction = memoizeFunction(function () {\n    var styles = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        styles[_i] = arguments[_i];\n    }\n    return function (styleProps) {\n        return concatStyleSetsWithProps.apply(void 0, __spreadArrays([styleProps, getItemStyles], styles));\n    };\n});\nvar ContextualMenu_base_ContextualMenuBase = /** @class */ (function (_super) {\n    __extends(ContextualMenuBase, _super);\n    function ContextualMenuBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._mounted = false;\n        _this.dismiss = function (ev, dismissAll) {\n            var onDismiss = _this.props.onDismiss;\n            if (onDismiss) {\n                onDismiss(ev, dismissAll);\n            }\n        };\n        _this._tryFocusPreviousActiveElement = function (options) {\n            if (_this.props.onRestoreFocus) {\n                _this.props.onRestoreFocus(options);\n            }\n            else {\n                if (options && options.containsFocus && _this._previousActiveElement) {\n                    // Make sure that the focus method actually exists\n                    // In some cases the object might exist but not be a real element.\n                    // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n                    if (_this._previousActiveElement.focus) {\n                        _this._previousActiveElement.focus();\n                    }\n                }\n            }\n        };\n        _this._onRenderMenuList = function (menuListProps, defaultRender) {\n            var indexCorrection = 0;\n            var items = menuListProps.items, totalItemCount = menuListProps.totalItemCount, hasCheckmarks = menuListProps.hasCheckmarks, hasIcons = menuListProps.hasIcons, role = menuListProps.role;\n            return (react[\"createElement\"](\"ul\", { className: _this._classNames.list, onKeyDown: _this._onKeyDown, onKeyUp: _this._onKeyUp, role: (role !== null && role !== void 0 ? role : 'menu') }, items.map(function (item, index) {\n                var menuItem = _this._renderMenuItem(item, index, indexCorrection, totalItemCount, hasCheckmarks, hasIcons);\n                if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {\n                    var indexIncrease = item.customOnRenderListLength ? item.customOnRenderListLength : 1;\n                    indexCorrection += indexIncrease;\n                }\n                return menuItem;\n            })));\n        };\n        /**\n         * !!!IMPORTANT!!! Avoid mutating `item: IContextualMenuItem` argument. It will\n         * cause the menu items to always re-render because the component update is based on shallow comparison.\n         */\n        _this._renderMenuItem = function (item, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons) {\n            var _a;\n            var renderedItems = [];\n            var iconProps = item.iconProps || { iconName: 'None' };\n            var getItemClassNames = item.getItemClassNames, // eslint-disable-line deprecation/deprecation\n            itemProps = item.itemProps;\n            var styles = itemProps ? itemProps.styles : undefined;\n            // We only send a dividerClassName when the item to be rendered is a divider.\n            // For all other cases, the default divider style is used.\n            var dividerClassName = item.itemType === ContextualMenuItemType.Divider ? item.className : undefined;\n            var subMenuIconClassName = item.submenuIconProps ? item.submenuIconProps.className : '';\n            // eslint-disable-next-line deprecation/deprecation\n            var itemClassNames;\n            // IContextualMenuItem#getItemClassNames for backwards compatibility\n            // otherwise uses mergeStyles for class names.\n            if (getItemClassNames) {\n                itemClassNames = getItemClassNames(_this.props.theme, isItemDisabled(item), _this.state.expandedMenuItemKey === item.key, !!getIsChecked(item), !!item.href, iconProps.iconName !== 'None', item.className, dividerClassName, iconProps.className, subMenuIconClassName, item.primaryDisabled);\n            }\n            else {\n                var itemStyleProps = {\n                    theme: _this.props.theme,\n                    disabled: isItemDisabled(item),\n                    expanded: _this.state.expandedMenuItemKey === item.key,\n                    checked: !!getIsChecked(item),\n                    isAnchorLink: !!item.href,\n                    knownIcon: iconProps.iconName !== 'None',\n                    itemClassName: item.className,\n                    dividerClassName: dividerClassName,\n                    iconClassName: iconProps.className,\n                    subMenuClassName: subMenuIconClassName,\n                    primaryDisabled: item.primaryDisabled,\n                };\n                // We need to generate default styles then override if styles are provided\n                // since the ContextualMenu currently handles item classNames.\n                itemClassNames = getContextualMenuItemClassNames(_getMenuItemStylesFunction((_a = _this._classNames.subComponentStyles) === null || _a === void 0 ? void 0 : _a.menuItem, styles), itemStyleProps);\n            }\n            // eslint-disable-next-line deprecation/deprecation\n            if (item.text === '-' || item.name === '-') {\n                item.itemType = ContextualMenuItemType.Divider;\n            }\n            switch (item.itemType) {\n                case ContextualMenuItemType.Divider:\n                    renderedItems.push(_this._renderSeparator(index, itemClassNames));\n                    break;\n                case ContextualMenuItemType.Header:\n                    renderedItems.push(_this._renderSeparator(index, itemClassNames));\n                    var headerItem = _this._renderHeaderMenuItem(item, itemClassNames, index, hasCheckmarks, hasIcons);\n                    renderedItems.push(_this._renderListItem(headerItem, item.key || index, itemClassNames, item.title));\n                    break;\n                case ContextualMenuItemType.Section:\n                    renderedItems.push(_this._renderSectionItem(item, itemClassNames, index, hasCheckmarks, hasIcons));\n                    break;\n                default:\n                    var menuItem = _this._renderNormalItem(item, itemClassNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons);\n                    renderedItems.push(_this._renderListItem(menuItem, item.key || index, itemClassNames, item.title));\n                    break;\n            }\n            // Since multiple nodes *could* be rendered, wrap them all in a fragment with this item's key.\n            // This ensures the reconciler handles multi-item output per-node correctly and does not re-mount content.\n            return react[\"createElement\"](react[\"Fragment\"], { key: item.key }, renderedItems);\n        };\n        _this._defaultMenuItemRenderer = function (item) {\n            var index = item.index, focusableElementIndex = item.focusableElementIndex, totalItemCount = item.totalItemCount, hasCheckmarks = item.hasCheckmarks, hasIcons = item.hasIcons;\n            return _this._renderMenuItem(item, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons);\n        };\n        _this._onKeyDown = function (ev) {\n            // Take note if we are processing an alt (option) or meta (command) keydown.\n            // See comment in _shouldHandleKeyUp for reasoning.\n            _this._lastKeyDownWasAltOrMeta = _this._isAltOrMeta(ev);\n            // On Mac, pressing escape dismisses all levels of native context menus\n            var dismissAllMenus = ev.which === KeyCodes.escape && (isMac() || isIOS());\n            return _this._keyHandler(ev, _this._shouldHandleKeyDown, dismissAllMenus);\n        };\n        _this._shouldHandleKeyDown = function (ev) {\n            return (ev.which === KeyCodes.escape ||\n                _this._shouldCloseSubMenu(ev) ||\n                (ev.which === KeyCodes.up && (ev.altKey || ev.metaKey)));\n        };\n        _this._onMenuFocusCapture = function (ev) {\n            if (_this.props.delayUpdateFocusOnHover) {\n                _this._shouldUpdateFocusOnMouseEvent = true;\n            }\n        };\n        _this._onKeyUp = function (ev) {\n            return _this._keyHandler(ev, _this._shouldHandleKeyUp, true /* dismissAllMenus */);\n        };\n        /**\n         * We close the menu on key up only if ALL of the following are true:\n         * - Most recent key down was alt or meta (command)\n         * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n         *   expand/collapse the menu)\n         * - We're not on a Mac (or iOS)\n         *\n         * This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n         * closing any open context menus. There is not a similar behavior on Macs.\n         */\n        _this._shouldHandleKeyUp = function (ev) {\n            var keyPressIsAltOrMetaAlone = _this._lastKeyDownWasAltOrMeta && _this._isAltOrMeta(ev);\n            _this._lastKeyDownWasAltOrMeta = false;\n            return !!keyPressIsAltOrMetaAlone && !(isIOS() || isMac());\n        };\n        /**\n         * Calls `shouldHandleKey` to determine whether the keyboard event should be handled;\n         * if so, stops event propagation and dismisses menu(s).\n         * @param ev - The keyboard event.\n         * @param shouldHandleKey - Returns whether we should handle this keyboard event.\n         * @param dismissAllMenus - If true, dismiss all menus. Otherwise, dismiss only the current menu.\n         * Only does anything if `shouldHandleKey` returns true.\n         * @returns Whether the event was handled.\n         */\n        _this._keyHandler = function (ev, shouldHandleKey, dismissAllMenus) {\n            var handled = false;\n            if (shouldHandleKey(ev)) {\n                _this._focusingPreviousElement = true;\n                _this.dismiss(ev, dismissAllMenus);\n                ev.preventDefault();\n                ev.stopPropagation();\n                handled = true;\n            }\n            return handled;\n        };\n        /**\n         * Checks if the submenu should be closed\n         */\n        _this._shouldCloseSubMenu = function (ev) {\n            var submenuCloseKey = rtl_getRTL(_this.props.theme) ? KeyCodes.right : KeyCodes.left;\n            if (ev.which !== submenuCloseKey || !_this.props.isSubMenu) {\n                return false;\n            }\n            return (_this._adjustedFocusZoneProps.direction === FocusZoneDirection.vertical ||\n                (!!_this._adjustedFocusZoneProps.checkForNoWrap &&\n                    !shouldWrapFocus(ev.target, 'data-no-horizontal-wrap')));\n        };\n        _this._onMenuKeyDown = function (ev) {\n            // Mark as handled if onKeyDown returns true (for handling collapse cases)\n            // or if we are attempting to expand a submenu\n            var handled = _this._onKeyDown(ev);\n            if (handled || !_this._host) {\n                return;\n            }\n            // If we have a modifier key being pressed, we do not want to move focus.\n            // Otherwise, handle up and down keys.\n            var hasModifier = !!(ev.altKey || ev.metaKey);\n            var isUp = ev.which === KeyCodes.up;\n            var isDown = ev.which === KeyCodes.down;\n            if (!hasModifier && (isUp || isDown)) {\n                var elementToFocus = isUp\n                    ? getLastFocusable(_this._host, _this._host.lastChild, true)\n                    : getFirstFocusable(_this._host, _this._host.firstChild, true);\n                if (elementToFocus) {\n                    elementToFocus.focus();\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            }\n        };\n        /**\n         * Scroll handler for the callout to make sure the mouse events\n         * for updating focus are not interacting during scroll\n         */\n        _this._onScroll = function () {\n            if (!_this._isScrollIdle && _this._scrollIdleTimeoutId !== undefined) {\n                _this._async.clearTimeout(_this._scrollIdleTimeoutId);\n                _this._scrollIdleTimeoutId = undefined;\n            }\n            else {\n                _this._isScrollIdle = false;\n            }\n            _this._scrollIdleTimeoutId = _this._async.setTimeout(function () {\n                _this._isScrollIdle = true;\n            }, NavigationIdleDelay);\n        };\n        _this._onItemMouseEnterBase = function (item, ev, target) {\n            if (_this._shouldIgnoreMouseEvent()) {\n                return;\n            }\n            _this._updateFocusOnMouseEvent(item, ev, target);\n        };\n        _this._onItemMouseMoveBase = function (item, ev, target) {\n            var targetElement = ev.currentTarget;\n            // Always do this check to make sure we record a mouseMove if needed (even if we are timed out)\n            if (_this._shouldUpdateFocusOnMouseEvent) {\n                _this._gotMouseMove = true;\n            }\n            else {\n                return;\n            }\n            if (!_this._isScrollIdle ||\n                _this._enterTimerId !== undefined ||\n                targetElement === _this._targetWindow.document.activeElement) {\n                return;\n            }\n            _this._updateFocusOnMouseEvent(item, ev, target);\n        };\n        _this._onMouseItemLeave = function (item, ev) {\n            if (_this._shouldIgnoreMouseEvent()) {\n                return;\n            }\n            if (_this._enterTimerId !== undefined) {\n                _this._async.clearTimeout(_this._enterTimerId);\n                _this._enterTimerId = undefined;\n            }\n            if (_this.state.expandedMenuItemKey !== undefined) {\n                return;\n            }\n            /**\n             * IE11 focus() method forces parents to scroll to top of element.\n             * Edge and IE expose a setActive() function for focusable divs that\n             * sets the page focus but does not scroll the parent element.\n             */\n            if (_this._host.setActive) {\n                try {\n                    _this._host.setActive();\n                }\n                catch (e) {\n                    /* no-op */\n                }\n            }\n            else {\n                _this._host.focus();\n            }\n        };\n        _this._onItemMouseDown = function (item, ev) {\n            if (item.onMouseDown) {\n                item.onMouseDown(item, ev);\n            }\n        };\n        _this._onItemClick = function (item, ev) {\n            _this._onItemClickBase(item, ev, ev.currentTarget);\n        };\n        _this._onItemClickBase = function (item, ev, target) {\n            var items = getSubmenuItems(item);\n            // Cancel a async menu item hover timeout action from being taken and instead\n            // just trigger the click event instead.\n            _this._cancelSubMenuTimer();\n            if (!hasSubmenu(item) && (!items || !items.length)) {\n                // This is an item without a menu. Click it.\n                _this._executeItemClick(item, ev);\n            }\n            else {\n                if (item.key !== _this.state.expandedMenuItemKey) {\n                    // This has a collapsed sub menu. Expand it.\n                    _this.setState({\n                        // When Edge + Narrator are used together (regardless of if the button is in a form or not), pressing\n                        // \"Enter\" fires this method and not _onMenuKeyDown. Checking ev.nativeEvent.detail differentiates\n                        // between a real click event and a keypress event (detail should be the number of mouse clicks).\n                        // ...Plot twist! For a real click event in IE 11, detail is always 0 (Edge sets it properly to 1).\n                        // So we also check the pointerType property, which both Edge and IE set to \"mouse\" for real clicks\n                        // and \"\" for pressing \"Enter\" with Narrator on.\n                        expandedByMouseClick: ev.nativeEvent.detail !== 0 || ev.nativeEvent.pointerType === 'mouse',\n                    });\n                    _this._onItemSubMenuExpand(item, target);\n                }\n            }\n            ev.stopPropagation();\n            ev.preventDefault();\n        };\n        _this._onAnchorClick = function (item, ev) {\n            _this._executeItemClick(item, ev);\n            ev.stopPropagation();\n        };\n        _this._executeItemClick = function (item, ev) {\n            if (item.disabled || item.isDisabled) {\n                return;\n            }\n            var dismiss = false;\n            if (item.onClick) {\n                dismiss = !!item.onClick(ev, item);\n            }\n            else if (_this.props.onItemClick) {\n                dismiss = !!_this.props.onItemClick(ev, item);\n            }\n            if (dismiss || !ev.defaultPrevented) {\n                _this.dismiss(ev, true);\n                // This should be removed whenever possible.\n                // This ensures that the hidden dismissal action maintains the same behavior.\n                // If the menu is being dismissed then the previously focused element should\n                // get focused since the dismiss was triggered by a user click on an item\n                // Rather than focus being lost.\n                _this._focusingPreviousElement = true;\n            }\n        };\n        _this._onItemKeyDown = function (item, ev) {\n            var openKey = rtl_getRTL(_this.props.theme) ? KeyCodes.left : KeyCodes.right;\n            if (!item.disabled &&\n                (ev.which === openKey || ev.which === KeyCodes.enter || (ev.which === KeyCodes.down && (ev.altKey || ev.metaKey)))) {\n                _this.setState({\n                    expandedByMouseClick: false,\n                });\n                _this._onItemSubMenuExpand(item, ev.currentTarget);\n                ev.preventDefault();\n            }\n        };\n        // Cancel a async menu item hover timeout action from being taken and instead\n        // do new upcoming behavior\n        _this._cancelSubMenuTimer = function () {\n            if (_this._enterTimerId !== undefined) {\n                _this._async.clearTimeout(_this._enterTimerId);\n                _this._enterTimerId = undefined;\n            }\n        };\n        _this._onItemSubMenuExpand = function (item, target) {\n            if (_this.state.expandedMenuItemKey !== item.key) {\n                if (_this.state.expandedMenuItemKey) {\n                    _this._onSubMenuDismiss();\n                }\n                // Focus the target to ensure when we close it, we're focusing on the correct element.\n                target.focus();\n                _this.setState({\n                    expandedMenuItemKey: item.key,\n                    submenuTarget: target,\n                });\n            }\n        };\n        /**\n         * This function is called ASYNCHRONOUSLY, and so there is a chance it is called\n         * after the component is unmounted. The _mounted property is added to prevent\n         * from calling setState() after unmount. Do NOT copy this pattern in synchronous\n         * code.\n         */\n        _this._onSubMenuDismiss = function (ev, dismissAll) {\n            if (dismissAll) {\n                _this.dismiss(ev, dismissAll);\n            }\n            else if (_this._mounted) {\n                _this.setState({\n                    dismissedMenuItemKey: _this.state.expandedMenuItemKey,\n                    expandedMenuItemKey: undefined,\n                    submenuTarget: undefined,\n                });\n            }\n        };\n        _this._getSubMenuId = function (item) {\n            var subMenuId = _this.state.subMenuId;\n            if (item.subMenuProps && item.subMenuProps.id) {\n                subMenuId = item.subMenuProps.id;\n            }\n            return subMenuId;\n        };\n        _this._onPointerAndTouchEvent = function (ev) {\n            _this._cancelSubMenuTimer();\n        };\n        _this._async = new Async_Async(_this);\n        _this._events = new EventGroup_EventGroup(_this);\n        initializeComponentRef(_this);\n        warnDeprecations(COMPONENT_NAME, props, {\n            getMenuClassNames: 'styles',\n        });\n        _this.state = {\n            contextualMenuItems: undefined,\n            subMenuId: getId('ContextualMenu'),\n        };\n        _this._id = props.id || getId('ContextualMenu');\n        _this._focusingPreviousElement = false;\n        _this._isScrollIdle = true;\n        _this._shouldUpdateFocusOnMouseEvent = !_this.props.delayUpdateFocusOnHover;\n        _this._gotMouseMove = false;\n        return _this;\n    }\n    ContextualMenuBase.prototype.shouldComponentUpdate = function (newProps, newState) {\n        if (!newProps.shouldUpdateWhenHidden && this.props.hidden && newProps.hidden) {\n            // Do not update when hidden.\n            return false;\n        }\n        return !shallowCompare(this.props, newProps) || !shallowCompare(this.state, newState);\n    };\n    ContextualMenuBase.prototype.UNSAFE_componentWillUpdate = function (newProps) {\n        if (newProps.target !== this.props.target) {\n            var newTarget = newProps.target;\n            this._setTargetWindowAndElement(newTarget);\n        }\n        if (this._isHidden(newProps) !== this._isHidden(this.props)) {\n            if (this._isHidden(newProps)) {\n                this._onMenuClosed();\n            }\n            else {\n                this._onMenuOpened();\n                this._previousActiveElement = this._targetWindow\n                    ? this._targetWindow.document.activeElement\n                    : undefined;\n            }\n        }\n        if (newProps.delayUpdateFocusOnHover !== this.props.delayUpdateFocusOnHover) {\n            // update shouldUpdateFocusOnMouseEvent to follow what was passed in\n            this._shouldUpdateFocusOnMouseEvent = !newProps.delayUpdateFocusOnHover;\n            // If shouldUpdateFocusOnMouseEvent is false, we need to reset gotMouseMove to false\n            this._gotMouseMove = this._shouldUpdateFocusOnMouseEvent && this._gotMouseMove;\n        }\n    };\n    // Invoked once, both on the client and server, immediately before the initial rendering occurs.\n    ContextualMenuBase.prototype.UNSAFE_componentWillMount = function () {\n        var target = this.props.target;\n        this._setTargetWindowAndElement(target);\n        if (!this.props.hidden) {\n            this._previousActiveElement = this._targetWindow\n                ? this._targetWindow.document.activeElement\n                : undefined;\n        }\n    };\n    // Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.\n    ContextualMenuBase.prototype.componentDidMount = function () {\n        if (!this.props.hidden) {\n            this._onMenuOpened();\n        }\n        this._mounted = true;\n    };\n    // Invoked immediately before a component is unmounted from the DOM.\n    ContextualMenuBase.prototype.componentWillUnmount = function () {\n        if (this.props.onMenuDismissed) {\n            this.props.onMenuDismissed(this.props);\n        }\n        this._events.dispose();\n        this._async.dispose();\n        this._mounted = false;\n    };\n    ContextualMenuBase.prototype.render = function () {\n        var _this = this;\n        var isBeakVisible = this.props.isBeakVisible;\n        var _a = this.props, items = _a.items, labelElementId = _a.labelElementId, id = _a.id, className = _a.className, beakWidth = _a.beakWidth, directionalHint = _a.directionalHint, directionalHintForRTL = _a.directionalHintForRTL, alignTargetEdge = _a.alignTargetEdge, gapSpace = _a.gapSpace, coverTarget = _a.coverTarget, ariaLabel = _a.ariaLabel, doNotLayer = _a.doNotLayer, target = _a.target, bounds = _a.bounds, useTargetWidth = _a.useTargetWidth, useTargetAsMinWidth = _a.useTargetAsMinWidth, directionalHintFixed = _a.directionalHintFixed, shouldFocusOnMount = _a.shouldFocusOnMount, shouldFocusOnContainer = _a.shouldFocusOnContainer, title = _a.title, styles = _a.styles, theme = _a.theme, calloutProps = _a.calloutProps, _b = _a.onRenderSubMenu, onRenderSubMenu = _b === void 0 ? this._onRenderSubMenu : _b, _c = _a.onRenderMenuList, onRenderMenuList = _c === void 0 ? this._onRenderMenuList : _c, focusZoneProps = _a.focusZoneProps, \n        // eslint-disable-next-line deprecation/deprecation\n        getMenuClassNames = _a.getMenuClassNames;\n        this._classNames = getMenuClassNames\n            ? getMenuClassNames(theme, className)\n            : ContextualMenu_base_getClassNames(styles, {\n                theme: theme,\n                className: className,\n            });\n        var hasIcons = itemsHaveIcons(items);\n        function itemsHaveIcons(contextualMenuItems) {\n            for (var _i = 0, contextualMenuItems_1 = contextualMenuItems; _i < contextualMenuItems_1.length; _i++) {\n                var item = contextualMenuItems_1[_i];\n                if (item.iconProps) {\n                    return true;\n                }\n                if (item.itemType === ContextualMenuItemType.Section &&\n                    item.sectionProps &&\n                    itemsHaveIcons(item.sectionProps.items)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        this._adjustedFocusZoneProps = __assign(__assign({}, focusZoneProps), { direction: this._getFocusZoneDirection() });\n        var hasCheckmarks = canAnyMenuItemsCheck(items);\n        var submenuProps = this.state.expandedMenuItemKey && this.props.hidden !== true ? this._getSubmenuProps() : null;\n        isBeakVisible = isBeakVisible === undefined ? this.props.responsiveMode <= ResponsiveMode.medium : isBeakVisible;\n        /**\n         * When useTargetWidth is true, get the width of the target element and apply it for the context menu container\n         */\n        var contextMenuStyle;\n        var targetAsHtmlElement = this._target;\n        if ((useTargetWidth || useTargetAsMinWidth) && targetAsHtmlElement && targetAsHtmlElement.offsetWidth) {\n            var targetBoundingRect = targetAsHtmlElement.getBoundingClientRect();\n            var targetWidth = targetBoundingRect.width - 2 /* Accounts for 1px border */;\n            if (useTargetWidth) {\n                contextMenuStyle = {\n                    width: targetWidth,\n                };\n            }\n            else if (useTargetAsMinWidth) {\n                contextMenuStyle = {\n                    minWidth: targetWidth,\n                };\n            }\n        }\n        // The menu should only return if items were provided, if no items were provided then it should not appear.\n        if (items && items.length > 0) {\n            var totalItemCount = 0;\n            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n                var item = items_1[_i];\n                if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {\n                    var itemCount = item.customOnRenderListLength ? item.customOnRenderListLength : 1;\n                    totalItemCount += itemCount;\n                }\n            }\n            var calloutStyles = this._classNames.subComponentStyles\n                ? this._classNames.subComponentStyles.callout\n                : undefined;\n            return (react[\"createElement\"](Callout_Callout, __assign({ styles: calloutStyles, onRestoreFocus: this._tryFocusPreviousActiveElement }, calloutProps, { target: target, isBeakVisible: isBeakVisible, beakWidth: beakWidth, directionalHint: directionalHint, directionalHintForRTL: directionalHintForRTL, gapSpace: gapSpace, coverTarget: coverTarget, doNotLayer: doNotLayer, className: css('ms-ContextualMenu-Callout', calloutProps && calloutProps.className), setInitialFocus: shouldFocusOnMount, onDismiss: this.props.onDismiss, onScroll: this._onScroll, bounds: bounds, directionalHintFixed: directionalHintFixed, alignTargetEdge: alignTargetEdge, hidden: this.props.hidden }),\n                react[\"createElement\"](\"div\", { \"aria-label\": ariaLabel, \"aria-labelledby\": labelElementId, style: contextMenuStyle, ref: function (host) { return (_this._host = host); }, id: id, className: this._classNames.container, tabIndex: shouldFocusOnContainer ? 0 : -1, onKeyDown: this._onMenuKeyDown, onKeyUp: this._onKeyUp, onFocusCapture: this._onMenuFocusCapture },\n                    title && react[\"createElement\"](\"div\", { className: this._classNames.title },\n                        \" \",\n                        title,\n                        \" \"),\n                    items && items.length ? (react[\"createElement\"](FocusZone_FocusZone, __assign({ className: this._classNames.root, isCircularNavigation: true, handleTabKey: FocusZoneTabbableElements.all }, this._adjustedFocusZoneProps), onRenderMenuList({\n                        items: items,\n                        totalItemCount: totalItemCount,\n                        hasCheckmarks: hasCheckmarks,\n                        hasIcons: hasIcons,\n                        defaultMenuItemRenderer: this._defaultMenuItemRenderer,\n                    }, this._onRenderMenuList))) : null,\n                    submenuProps && onRenderSubMenu(submenuProps, this._onRenderSubMenu))));\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Return whether the contextual menu is hidden.\n     * Undefined value for hidden is equivalent to hidden being false.\n     * @param props - Props for the component\n     */\n    ContextualMenuBase.prototype._isHidden = function (props) {\n        return !!props.hidden;\n    };\n    ContextualMenuBase.prototype._onMenuOpened = function () {\n        this._events.on(this._targetWindow, 'resize', this.dismiss);\n        this._shouldUpdateFocusOnMouseEvent = !this.props.delayUpdateFocusOnHover;\n        this._gotMouseMove = false;\n        this.props.onMenuOpened && this.props.onMenuOpened(this.props);\n    };\n    ContextualMenuBase.prototype._onMenuClosed = function () {\n        this._events.off(this._targetWindow, 'resize', this.dismiss);\n        // This is kept for backwards compatability with hidden for right now.\n        // This preserves the way that this behaved in the past\n        // TODO find a better way to handle this by using the same conventions that\n        // Popup uses to determine if focus is contained when dismissal occurs\n        this._tryFocusPreviousActiveElement({\n            containsFocus: this._focusingPreviousElement,\n            originalElement: this._previousActiveElement,\n        });\n        this._focusingPreviousElement = false;\n        if (this.props.onMenuDismissed) {\n            this.props.onMenuDismissed(this.props);\n        }\n        this._shouldUpdateFocusOnMouseEvent = !this.props.delayUpdateFocusOnHover;\n        // We need to dismiss any submenu related state properties,\n        // so that when the menu is shown again, the submenu is collapsed\n        this.setState({\n            expandedByMouseClick: undefined,\n            dismissedMenuItemKey: undefined,\n            expandedMenuItemKey: undefined,\n            submenuTarget: undefined,\n        });\n    };\n    /**\n     * Gets the focusZoneDirection by using the arrowDirection if specified,\n     * the direction specificed in the focusZoneProps, or defaults to FocusZoneDirection.vertical\n     */\n    ContextualMenuBase.prototype._getFocusZoneDirection = function () {\n        var focusZoneProps = this.props.focusZoneProps;\n        return focusZoneProps && focusZoneProps.direction !== undefined\n            ? focusZoneProps.direction\n            : FocusZoneDirection.vertical;\n    };\n    ContextualMenuBase.prototype._onRenderSubMenu = function (subMenuProps, defaultRender) {\n        throw Error('ContextualMenuBase: onRenderSubMenu callback is null or undefined. ' +\n            'Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.');\n    };\n    ContextualMenuBase.prototype._renderSectionItem = function (sectionItem, \n    // eslint-disable-next-line deprecation/deprecation\n    menuClassNames, index, hasCheckmarks, hasIcons) {\n        var _this = this;\n        var sectionProps = sectionItem.sectionProps;\n        if (!sectionProps) {\n            return;\n        }\n        var headerItem;\n        var groupProps;\n        if (sectionProps.title) {\n            // Since title is a user-facing string, it needs to be stripped of whitespace in order to build a valid element ID\n            var id = this._id + sectionProps.title.replace(/\\s/g, '');\n            var headerContextualMenuItem = {\n                key: \"section-\" + sectionProps.title + \"-title\",\n                itemType: ContextualMenuItemType.Header,\n                text: sectionProps.title,\n                id: id,\n            };\n            groupProps = {\n                role: 'group',\n                'aria-labelledby': id,\n            };\n            headerItem = this._renderHeaderMenuItem(headerContextualMenuItem, menuClassNames, index, hasCheckmarks, hasIcons);\n        }\n        if (sectionProps.items && sectionProps.items.length > 0) {\n            return (react[\"createElement\"](\"li\", { role: \"presentation\", key: sectionProps.key || sectionItem.key || \"section-\" + index },\n                react[\"createElement\"](\"div\", __assign({}, groupProps),\n                    react[\"createElement\"](\"ul\", { className: this._classNames.list },\n                        sectionProps.topDivider && this._renderSeparator(index, menuClassNames, true, true),\n                        headerItem &&\n                            this._renderListItem(headerItem, sectionItem.key || index, menuClassNames, sectionItem.title),\n                        sectionProps.items.map(function (contextualMenuItem, itemsIndex) {\n                            return _this._renderMenuItem(contextualMenuItem, itemsIndex, itemsIndex, sectionProps.items.length, hasCheckmarks, hasIcons);\n                        }),\n                        sectionProps.bottomDivider && this._renderSeparator(index, menuClassNames, false, true)))));\n        }\n    };\n    ContextualMenuBase.prototype._renderListItem = function (content, key, classNames, // eslint-disable-line deprecation/deprecation\n    title) {\n        return (react[\"createElement\"](\"li\", { role: \"presentation\", title: title, key: key, className: classNames.item }, content));\n    };\n    ContextualMenuBase.prototype._renderSeparator = function (index, classNames, // eslint-disable-line deprecation/deprecation\n    top, fromSection) {\n        if (fromSection || index > 0) {\n            return (react[\"createElement\"](\"li\", { role: \"separator\", key: 'separator-' + index + (top === undefined ? '' : top ? '-top' : '-bottom'), className: classNames.divider, \"aria-hidden\": \"true\" }));\n        }\n        return null;\n    };\n    ContextualMenuBase.prototype._renderNormalItem = function (item, classNames, // eslint-disable-line deprecation/deprecation\n    index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons) {\n        if (item.onRender) {\n            return item.onRender(__assign({ 'aria-posinset': focusableElementIndex + 1, 'aria-setsize': totalItemCount }, item), this.dismiss);\n        }\n        if (item.href) {\n            return this._renderAnchorMenuItem(item, classNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons);\n        }\n        if (item.split && hasSubmenu(item)) {\n            return this._renderSplitButton(item, classNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons);\n        }\n        return this._renderButtonItem(item, classNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons);\n    };\n    ContextualMenuBase.prototype._renderHeaderMenuItem = function (item, \n    // eslint-disable-next-line deprecation/deprecation\n    classNames, index, hasCheckmarks, hasIcons) {\n        var _a = this.props.contextualMenuItemAs, ChildrenRenderer = _a === void 0 ? ContextualMenuItem : _a;\n        var itemProps = item.itemProps, id = item.id;\n        var divHtmlProperties = itemProps && getNativeProps(itemProps, divProperties);\n        return (\n        // eslint-disable-next-line deprecation/deprecation\n        react[\"createElement\"](\"div\", __assign({ id: id, className: this._classNames.header }, divHtmlProperties, { style: item.style }),\n            react[\"createElement\"](ChildrenRenderer, __assign({ item: item, classNames: classNames, index: index, onCheckmarkClick: hasCheckmarks ? this._onItemClick : undefined, hasIcons: hasIcons }, itemProps))));\n    };\n    ContextualMenuBase.prototype._renderAnchorMenuItem = function (item, \n    // eslint-disable-next-line deprecation/deprecation\n    classNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons) {\n        var contextualMenuItemAs = this.props.contextualMenuItemAs;\n        var expandedMenuItemKey = this.state.expandedMenuItemKey;\n        return (react[\"createElement\"](ContextualMenuAnchor_ContextualMenuAnchor, { item: item, classNames: classNames, index: index, focusableElementIndex: focusableElementIndex, totalItemCount: totalItemCount, hasCheckmarks: hasCheckmarks, hasIcons: hasIcons, contextualMenuItemAs: contextualMenuItemAs, onItemMouseEnter: this._onItemMouseEnterBase, onItemMouseLeave: this._onMouseItemLeave, onItemMouseMove: this._onItemMouseMoveBase, onItemMouseDown: this._onItemMouseDown, executeItemClick: this._executeItemClick, onItemClick: this._onAnchorClick, onItemKeyDown: this._onItemKeyDown, getSubMenuId: this._getSubMenuId, expandedMenuItemKey: expandedMenuItemKey, openSubMenu: this._onItemSubMenuExpand, dismissSubMenu: this._onSubMenuDismiss, dismissMenu: this.dismiss }));\n    };\n    ContextualMenuBase.prototype._renderButtonItem = function (item, \n    // eslint-disable-next-line deprecation/deprecation\n    classNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons) {\n        var contextualMenuItemAs = this.props.contextualMenuItemAs;\n        var expandedMenuItemKey = this.state.expandedMenuItemKey;\n        return (react[\"createElement\"](ContextualMenuButton_ContextualMenuButton, { item: item, classNames: classNames, index: index, focusableElementIndex: focusableElementIndex, totalItemCount: totalItemCount, hasCheckmarks: hasCheckmarks, hasIcons: hasIcons, contextualMenuItemAs: contextualMenuItemAs, onItemMouseEnter: this._onItemMouseEnterBase, onItemMouseLeave: this._onMouseItemLeave, onItemMouseMove: this._onItemMouseMoveBase, onItemMouseDown: this._onItemMouseDown, executeItemClick: this._executeItemClick, onItemClick: this._onItemClick, onItemClickBase: this._onItemClickBase, onItemKeyDown: this._onItemKeyDown, getSubMenuId: this._getSubMenuId, expandedMenuItemKey: expandedMenuItemKey, openSubMenu: this._onItemSubMenuExpand, dismissSubMenu: this._onSubMenuDismiss, dismissMenu: this.dismiss }));\n    };\n    ContextualMenuBase.prototype._renderSplitButton = function (item, \n    // eslint-disable-next-line deprecation/deprecation\n    classNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons) {\n        var contextualMenuItemAs = this.props.contextualMenuItemAs;\n        var expandedMenuItemKey = this.state.expandedMenuItemKey;\n        return (react[\"createElement\"](ContextualMenuSplitButton_ContextualMenuSplitButton, { item: item, classNames: classNames, index: index, focusableElementIndex: focusableElementIndex, totalItemCount: totalItemCount, hasCheckmarks: hasCheckmarks, hasIcons: hasIcons, contextualMenuItemAs: contextualMenuItemAs, onItemMouseEnter: this._onItemMouseEnterBase, onItemMouseLeave: this._onMouseItemLeave, onItemMouseMove: this._onItemMouseMoveBase, onItemMouseDown: this._onItemMouseDown, executeItemClick: this._executeItemClick, onItemClick: this._onItemClick, onItemClickBase: this._onItemClickBase, onItemKeyDown: this._onItemKeyDown, openSubMenu: this._onItemSubMenuExpand, dismissSubMenu: this._onSubMenuDismiss, dismissMenu: this.dismiss, expandedMenuItemKey: expandedMenuItemKey, onTap: this._onPointerAndTouchEvent }));\n    };\n    /**\n     * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n     */\n    ContextualMenuBase.prototype._isAltOrMeta = function (ev) {\n        return ev.which === KeyCodes.alt || ev.key === 'Meta';\n    };\n    ContextualMenuBase.prototype._shouldIgnoreMouseEvent = function () {\n        return !this._isScrollIdle || !this._gotMouseMove;\n    };\n    /**\n     * Handles updating focus when mouseEnter or mouseMove fire.\n     * As part of updating focus, This function will also update\n     * the expand/collapse state accordingly.\n     */\n    ContextualMenuBase.prototype._updateFocusOnMouseEvent = function (item, ev, target) {\n        var _this = this;\n        var targetElement = target ? target : ev.currentTarget;\n        var _a = this.props.subMenuHoverDelay, timeoutDuration = _a === void 0 ? NavigationIdleDelay : _a;\n        if (item.key === this.state.expandedMenuItemKey) {\n            return;\n        }\n        if (this._enterTimerId !== undefined) {\n            this._async.clearTimeout(this._enterTimerId);\n            this._enterTimerId = undefined;\n        }\n        // If the menu is not expanded we can update focus without any delay\n        if (this.state.expandedMenuItemKey === undefined) {\n            targetElement.focus();\n        }\n        // Delay updating expanding/dismissing the submenu\n        // and only set focus if we have not already done so\n        if (hasSubmenu(item)) {\n            ev.stopPropagation();\n            this._enterTimerId = this._async.setTimeout(function () {\n                targetElement.focus();\n                _this.setState({\n                    expandedByMouseClick: true,\n                });\n                _this._onItemSubMenuExpand(item, targetElement);\n                _this._enterTimerId = undefined;\n            }, timeoutDuration);\n        }\n        else {\n            this._enterTimerId = this._async.setTimeout(function () {\n                _this._onSubMenuDismiss(ev);\n                targetElement.focus();\n                _this._enterTimerId = undefined;\n            }, timeoutDuration);\n        }\n    };\n    ContextualMenuBase.prototype._getSubmenuProps = function () {\n        var _a = this.state, submenuTarget = _a.submenuTarget, expandedMenuItemKey = _a.expandedMenuItemKey;\n        var item = this._findItemByKey(expandedMenuItemKey);\n        var submenuProps = null;\n        if (item) {\n            submenuProps = {\n                items: getSubmenuItems(item),\n                target: submenuTarget,\n                onDismiss: this._onSubMenuDismiss,\n                isSubMenu: true,\n                id: this.state.subMenuId,\n                shouldFocusOnMount: true,\n                shouldFocusOnContainer: this.state.expandedByMouseClick,\n                directionalHint: rtl_getRTL(this.props.theme) ? DirectionalHint.leftTopEdge : DirectionalHint.rightTopEdge,\n                className: this.props.className,\n                gapSpace: 0,\n                isBeakVisible: false,\n            };\n            if (item.subMenuProps) {\n                object_assign(submenuProps, item.subMenuProps);\n            }\n        }\n        return submenuProps;\n    };\n    ContextualMenuBase.prototype._findItemByKey = function (key) {\n        var items = this.props.items;\n        return this._findItemByKeyFromItems(key, items);\n    };\n    /**\n     * Returns the item that mathes a given key if any.\n     * @param key - The key of the item to match\n     * @param items - The items to look for the key\n     */\n    ContextualMenuBase.prototype._findItemByKeyFromItems = function (key, items) {\n        for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {\n            var item = items_2[_i];\n            if (item.itemType === ContextualMenuItemType.Section && item.sectionProps) {\n                var match = this._findItemByKeyFromItems(key, item.sectionProps.items);\n                if (match) {\n                    return match;\n                }\n            }\n            else if (item.key && item.key === key) {\n                return item;\n            }\n        }\n    };\n    ContextualMenuBase.prototype._setTargetWindowAndElement = function (target) {\n        var currentElement = this._host;\n        if (target) {\n            if (typeof target === 'string') {\n                var currentDoc = getDocument(currentElement);\n                this._target = currentDoc ? currentDoc.querySelector(target) : null;\n                this._targetWindow = getWindow(currentElement);\n                // Cast to any prevents error about stopPropagation always existing\n            }\n            else if (target.stopPropagation) {\n                this._targetWindow = getWindow(target.target);\n                this._target = target;\n            }\n            else if (\n            // eslint-disable-next-line deprecation/deprecation\n            (target.left !== undefined || target.x !== undefined) &&\n                // eslint-disable-next-line deprecation/deprecation\n                (target.top !== undefined || target.y !== undefined)) {\n                this._targetWindow = getWindow(currentElement);\n                this._target = target;\n            }\n            else if (target.current !== undefined) {\n                this._target = target.current;\n                this._targetWindow = getWindow(this._target);\n            }\n            else {\n                var targetElement = target;\n                this._targetWindow = getWindow(targetElement);\n                this._target = target;\n            }\n        }\n        else {\n            this._targetWindow = getWindow(currentElement);\n        }\n    };\n    // The default ContextualMenu properties have no items and beak, the default submenu direction is right and top.\n    ContextualMenuBase.defaultProps = {\n        items: [],\n        shouldFocusOnMount: true,\n        gapSpace: 0,\n        directionalHint: DirectionalHint.bottomAutoEdge,\n        beakWidth: 16,\n    };\n    ContextualMenuBase = __decorate([\n        withResponsiveMode\n    ], ContextualMenuBase);\n    return ContextualMenuBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=ContextualMenu.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ContextualMenu/ContextualMenu.styles.js\n\n\nvar ContextualMenu_styles_GlobalClassNames = {\n    root: 'ms-ContextualMenu',\n    container: 'ms-ContextualMenu-container',\n    list: 'ms-ContextualMenu-list',\n    header: 'ms-ContextualMenu-header',\n    title: 'ms-ContextualMenu-title',\n    isopen: 'is-open',\n};\nvar ContextualMenu_styles_getStyles = function (props) {\n    var className = props.className, theme = props.theme;\n    var classNames = getGlobalClassNames(ContextualMenu_styles_GlobalClassNames, theme);\n    var fonts = theme.fonts, semanticColors = theme.semanticColors, effects = theme.effects;\n    return {\n        root: [\n            theme.fonts.medium,\n            classNames.root,\n            classNames.isopen,\n            {\n                backgroundColor: semanticColors.menuBackground,\n                minWidth: '180px',\n            },\n            className,\n        ],\n        container: [\n            classNames.container,\n            {\n                selectors: {\n                    ':focus': { outline: 0 },\n                },\n            },\n        ],\n        list: [\n            classNames.list,\n            classNames.isopen,\n            {\n                listStyleType: 'none',\n                margin: '0',\n                padding: '0',\n            },\n        ],\n        header: [\n            classNames.header,\n            fonts.small,\n            {\n                fontWeight: FontWeights.semibold,\n                color: semanticColors.menuHeader,\n                background: 'none',\n                backgroundColor: 'transparent',\n                border: 'none',\n                height: CONTEXTUAL_MENU_ITEM_HEIGHT,\n                lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,\n                cursor: 'default',\n                padding: '0px 6px',\n                userSelect: 'none',\n                textAlign: 'left',\n            },\n        ],\n        title: [\n            classNames.title,\n            {\n                fontSize: fonts.mediumPlus.fontSize,\n                paddingRight: '14px',\n                paddingLeft: '14px',\n                paddingBottom: '5px',\n                paddingTop: '5px',\n                backgroundColor: semanticColors.menuItemBackgroundPressed,\n            },\n        ],\n        subComponentStyles: {\n            callout: {\n                root: {\n                    boxShadow: effects.elevation8,\n                },\n            },\n            menuItem: {},\n        },\n    };\n};\n//# sourceMappingURL=ContextualMenu.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ContextualMenu/ContextualMenu.js\n\n\n\n\n\nfunction ContextualMenu_onRenderSubMenu(subMenuProps) {\n    return react[\"createElement\"](LocalContextualMenu, __assign({}, subMenuProps));\n}\n// This is to prevent cyclic import with ContextualMenu.base.tsx.\nvar LocalContextualMenu = styled(ContextualMenu_base_ContextualMenuBase, ContextualMenu_styles_getStyles, function () { return ({ onRenderSubMenu: ContextualMenu_onRenderSubMenu }); }, { scope: 'ContextualMenu' });\n/**\n * ContextualMenu description\n */\nvar ContextualMenu = LocalContextualMenu;\n//# sourceMappingURL=ContextualMenu.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Button/BaseButton.classNames.js\n\n\n\nvar ButtonGlobalClassNames = {\n    msButton: 'ms-Button',\n    msButtonHasMenu: 'ms-Button--hasMenu',\n    msButtonIcon: 'ms-Button-icon',\n    msButtonMenuIcon: 'ms-Button-menuIcon',\n    msButtonLabel: 'ms-Button-label',\n    msButtonDescription: 'ms-Button-description',\n    msButtonScreenReaderText: 'ms-Button-screenReaderText',\n    msButtonFlexContainer: 'ms-Button-flexContainer',\n    msButtonTextContainer: 'ms-Button-textContainer',\n};\nvar getBaseButtonClassNames = memoizeFunction(function (theme, styles, className, variantClassName, iconClassName, menuIconClassName, disabled, hasMenu, checked, expanded, isSplit) {\n    var _a, _b;\n    var classNames = getGlobalClassNames(ButtonGlobalClassNames, theme || {});\n    var isExpanded = expanded && !isSplit;\n    return mergeStyleSets({\n        root: [\n            classNames.msButton,\n            styles.root,\n            variantClassName,\n            checked && ['is-checked', styles.rootChecked],\n            isExpanded && [\n                'is-expanded',\n                styles.rootExpanded,\n                {\n                    selectors: (_a = {},\n                        _a[\":hover .\" + classNames.msButtonIcon] = styles.iconExpandedHovered,\n                        // menuIcon falls back to rootExpandedHovered to support original behavior\n                        _a[\":hover .\" + classNames.msButtonMenuIcon] = styles.menuIconExpandedHovered || styles.rootExpandedHovered,\n                        _a[':hover'] = styles.rootExpandedHovered,\n                        _a),\n                },\n            ],\n            hasMenu && [ButtonGlobalClassNames.msButtonHasMenu, styles.rootHasMenu],\n            disabled && ['is-disabled', styles.rootDisabled],\n            !disabled &&\n                !isExpanded &&\n                !checked && {\n                selectors: (_b = {\n                        ':hover': styles.rootHovered\n                    },\n                    _b[\":hover .\" + classNames.msButtonLabel] = styles.labelHovered,\n                    _b[\":hover .\" + classNames.msButtonIcon] = styles.iconHovered,\n                    _b[\":hover .\" + classNames.msButtonDescription] = styles.descriptionHovered,\n                    _b[\":hover .\" + classNames.msButtonMenuIcon] = styles.menuIconHovered,\n                    _b[':focus'] = styles.rootFocused,\n                    _b[':active'] = styles.rootPressed,\n                    _b[\":active .\" + classNames.msButtonIcon] = styles.iconPressed,\n                    _b[\":active .\" + classNames.msButtonDescription] = styles.descriptionPressed,\n                    _b[\":active .\" + classNames.msButtonMenuIcon] = styles.menuIconPressed,\n                    _b),\n            },\n            disabled && checked && [styles.rootCheckedDisabled],\n            !disabled &&\n                checked && {\n                selectors: {\n                    ':hover': styles.rootCheckedHovered,\n                    ':active': styles.rootCheckedPressed,\n                },\n            },\n            className,\n        ],\n        flexContainer: [classNames.msButtonFlexContainer, styles.flexContainer],\n        textContainer: [classNames.msButtonTextContainer, styles.textContainer],\n        icon: [\n            classNames.msButtonIcon,\n            iconClassName,\n            styles.icon,\n            isExpanded && styles.iconExpanded,\n            checked && styles.iconChecked,\n            disabled && styles.iconDisabled,\n        ],\n        label: [classNames.msButtonLabel, styles.label, checked && styles.labelChecked, disabled && styles.labelDisabled],\n        menuIcon: [\n            classNames.msButtonMenuIcon,\n            menuIconClassName,\n            styles.menuIcon,\n            checked && styles.menuIconChecked,\n            disabled && !isSplit && styles.menuIconDisabled,\n            !disabled &&\n                !isExpanded &&\n                !checked && {\n                selectors: {\n                    ':hover': styles.menuIconHovered,\n                    ':active': styles.menuIconPressed,\n                },\n            },\n            isExpanded && ['is-expanded', styles.menuIconExpanded],\n        ],\n        description: [\n            classNames.msButtonDescription,\n            styles.description,\n            checked && styles.descriptionChecked,\n            disabled && styles.descriptionDisabled,\n        ],\n        screenReaderText: [classNames.msButtonScreenReaderText, styles.screenReaderText],\n    });\n});\n//# sourceMappingURL=BaseButton.classNames.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Button/SplitButton/SplitButton.classNames.js\n\n\nvar SplitButton_classNames_getClassNames = memoizeFunction(function (styles, disabled, expanded, checked, primaryDisabled) {\n    return {\n        root: mergeStyles(styles.splitButtonMenuButton, expanded && [styles.splitButtonMenuButtonExpanded], disabled && [styles.splitButtonMenuButtonDisabled], checked && !disabled && [styles.splitButtonMenuButtonChecked]),\n        splitButtonContainer: mergeStyles(styles.splitButtonContainer, !disabled &&\n            checked && [\n            styles.splitButtonContainerChecked,\n            {\n                selectors: {\n                    ':hover': styles.splitButtonContainerCheckedHovered,\n                },\n            },\n        ], !disabled &&\n            !checked && [\n            {\n                selectors: {\n                    ':hover': styles.splitButtonContainerHovered,\n                    ':focus': styles.splitButtonContainerFocused,\n                },\n            },\n        ], disabled && styles.splitButtonContainerDisabled),\n        icon: mergeStyles(styles.splitButtonMenuIcon, disabled && styles.splitButtonMenuIconDisabled, !disabled && primaryDisabled && styles.splitButtonMenuIcon),\n        flexContainer: mergeStyles(styles.splitButtonFlexContainer),\n        divider: mergeStyles(styles.splitButtonDivider, (primaryDisabled || disabled) && styles.splitButtonDividerDisabled),\n    };\n});\n//# sourceMappingURL=SplitButton.classNames.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Button/BaseButton.js\n\n\n\n\n\n\n\n\n\nvar BaseButton_TouchIdleDelay = 500; /* ms */\nvar BaseButton_COMPONENT_NAME = 'BaseButton';\n/**\n * {@docCategory Button}\n */\nvar BaseButton_BaseButton = /** @class */ (function (_super) {\n    __extends(BaseButton, _super);\n    function BaseButton(props) {\n        var _this = _super.call(this, props) || this;\n        _this._buttonElement = react[\"createRef\"]();\n        _this._splitButtonContainer = react[\"createRef\"]();\n        _this._renderedVisibleMenu = false;\n        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n            return __assign(__assign({}, keytipProps), { hasMenu: true });\n        });\n        _this._onRenderIcon = function (buttonProps, defaultRender) {\n            var iconProps = _this.props.iconProps;\n            if (iconProps && (iconProps.iconName !== undefined || iconProps.imageProps)) {\n                var className = iconProps.className, imageProps = iconProps.imageProps, rest = __rest(iconProps, [\"className\", \"imageProps\"]);\n                // If the styles prop is specified as part of iconProps, fall back to regular Icon as FontIcon and ImageIcon\n                // do not have this prop.\n                if (iconProps.styles) {\n                    return react[\"createElement\"](Icon, __assign({ className: css(_this._classNames.icon, className), imageProps: imageProps }, rest));\n                }\n                if (iconProps.iconName) {\n                    return react[\"createElement\"](FontIcon, __assign({ className: css(_this._classNames.icon, className) }, rest));\n                }\n                if (imageProps) {\n                    return react[\"createElement\"](ImageIcon, __assign({ className: css(_this._classNames.icon, className), imageProps: imageProps }, rest));\n                }\n            }\n            return null;\n        };\n        _this._onRenderTextContents = function () {\n            var _a = _this.props, text = _a.text, children = _a.children, \n            // eslint-disable-next-line deprecation/deprecation\n            _b = _a.secondaryText, \n            // eslint-disable-next-line deprecation/deprecation\n            secondaryText = _b === void 0 ? _this.props.description : _b, _c = _a.onRenderText, onRenderText = _c === void 0 ? _this._onRenderText : _c, _d = _a.onRenderDescription, onRenderDescription = _d === void 0 ? _this._onRenderDescription : _d;\n            if (text || typeof children === 'string' || secondaryText) {\n                return (react[\"createElement\"](\"span\", { className: _this._classNames.textContainer },\n                    onRenderText(_this.props, _this._onRenderText),\n                    onRenderDescription(_this.props, _this._onRenderDescription)));\n            }\n            return [onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription)];\n        };\n        _this._onRenderText = function () {\n            var text = _this.props.text;\n            var children = _this.props.children;\n            // For backwards compat, we should continue to take in the text content from children.\n            if (text === undefined && typeof children === 'string') {\n                text = children;\n            }\n            if (_this._hasText()) {\n                return (react[\"createElement\"](\"span\", { key: _this._labelId, className: _this._classNames.label, id: _this._labelId }, text));\n            }\n            return null;\n        };\n        _this._onRenderChildren = function () {\n            var children = _this.props.children;\n            // If children is just a string, either it or the text will be rendered via onRenderLabel\n            // If children is another component, it will be rendered after text\n            if (typeof children === 'string') {\n                return null;\n            }\n            return children;\n        };\n        _this._onRenderDescription = function (props) {\n            // eslint-disable-next-line deprecation/deprecation\n            var _a = props.secondaryText, secondaryText = _a === void 0 ? _this.props.description : _a;\n            // ms-Button-description is only shown when the button type is compound.\n            // In other cases it will not be displayed.\n            return secondaryText ? (react[\"createElement\"](\"span\", { key: _this._descriptionId, className: _this._classNames.description, id: _this._descriptionId }, secondaryText)) : null;\n        };\n        _this._onRenderAriaDescription = function () {\n            var ariaDescription = _this.props.ariaDescription;\n            // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\n            // otherwise it will be assigned to descriptionSpan.\n            return ariaDescription ? (react[\"createElement\"](\"span\", { className: _this._classNames.screenReaderText, id: _this._ariaDescriptionId }, ariaDescription)) : null;\n        };\n        _this._onRenderMenuIcon = function (props) {\n            var menuIconProps = _this.props.menuIconProps;\n            return react[\"createElement\"](FontIcon, __assign({ iconName: \"ChevronDown\" }, menuIconProps, { className: _this._classNames.menuIcon }));\n        };\n        _this._onRenderMenu = function (menuProps) {\n            var persistMenu = _this.props.persistMenu;\n            var menuHidden = _this.state.menuHidden;\n            var MenuType = _this.props.menuAs || ContextualMenu;\n            // the accessible menu label (accessible name) has a relationship to the button.\n            // If the menu props do not specify an explicit value for aria-label or aria-labelledBy,\n            // AND the button has text, we'll set the menu aria-labelledBy to the text element id.\n            if (!menuProps.ariaLabel && !menuProps.labelElementId && _this._hasText()) {\n                menuProps = __assign(__assign({}, menuProps), { labelElementId: _this._labelId });\n            }\n            return (react[\"createElement\"](MenuType, __assign({ id: _this._labelId + '-menu', directionalHint: DirectionalHint.bottomLeftEdge }, menuProps, { shouldFocusOnContainer: _this._menuShouldFocusOnContainer, shouldFocusOnMount: _this._menuShouldFocusOnMount, hidden: persistMenu ? menuHidden : undefined, className: css('ms-BaseButton-menuhost', menuProps.className), target: _this._isSplitButton ? _this._splitButtonContainer.current : _this._buttonElement.current, onDismiss: _this._onDismissMenu })));\n        };\n        _this._onDismissMenu = function (ev) {\n            var menuProps = _this.props.menuProps;\n            if (menuProps && menuProps.onDismiss) {\n                menuProps.onDismiss(ev);\n            }\n            if (!ev || !ev.defaultPrevented) {\n                _this._dismissMenu();\n            }\n        };\n        _this._dismissMenu = function () {\n            _this._menuShouldFocusOnMount = undefined;\n            _this._menuShouldFocusOnContainer = undefined;\n            _this.setState({ menuHidden: true });\n        };\n        _this._openMenu = function (shouldFocusOnContainer, shouldFocusOnMount) {\n            if (shouldFocusOnMount === void 0) { shouldFocusOnMount = true; }\n            if (_this.props.menuProps) {\n                _this._menuShouldFocusOnContainer = shouldFocusOnContainer;\n                _this._menuShouldFocusOnMount = shouldFocusOnMount;\n                _this._renderedVisibleMenu = true;\n                _this.setState({ menuHidden: false });\n            }\n        };\n        _this._onToggleMenu = function (shouldFocusOnContainer) {\n            var shouldFocusOnMount = true;\n            if (_this.props.menuProps && _this.props.menuProps.shouldFocusOnMount === false) {\n                shouldFocusOnMount = false;\n            }\n            _this.state.menuHidden ? _this._openMenu(shouldFocusOnContainer, shouldFocusOnMount) : _this._dismissMenu();\n        };\n        _this._onSplitContainerFocusCapture = function (ev) {\n            var container = _this._splitButtonContainer.current;\n            // If the target is coming from the portal we do not need to set focus on the container.\n            if (!container || (ev.target && portalContainsElement(ev.target, container))) {\n                return;\n            }\n            // We should never be able to focus the individual buttons in a split button. Focus\n            // should always remain on the container.\n            container.focus();\n        };\n        _this._onSplitButtonPrimaryClick = function (ev) {\n            if (!_this.state.menuHidden) {\n                _this._dismissMenu();\n            }\n            if (!_this._processingTouch && _this.props.onClick) {\n                _this.props.onClick(ev);\n            }\n            else if (_this._processingTouch) {\n                _this._onMenuClick(ev);\n            }\n        };\n        _this._onKeyDown = function (ev) {\n            // explicity cancelling event so click won't fire after this\n            if (_this.props.disabled && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n            else if (!_this.props.disabled) {\n                if (_this.props.menuProps) {\n                    _this._onMenuKeyDown(ev);\n                }\n                else if (_this.props.onKeyDown !== undefined) {\n                    _this.props.onKeyDown(ev); // not cancelling event because it's not disabled\n                }\n            }\n        };\n        _this._onKeyUp = function (ev) {\n            if (!_this.props.disabled && _this.props.onKeyUp !== undefined) {\n                _this.props.onKeyUp(ev); // not cancelling event because it's not disabled\n            }\n        };\n        _this._onKeyPress = function (ev) {\n            if (!_this.props.disabled && _this.props.onKeyPress !== undefined) {\n                _this.props.onKeyPress(ev); // not cancelling event because it's not disabled\n            }\n        };\n        _this._onMouseUp = function (ev) {\n            if (!_this.props.disabled && _this.props.onMouseUp !== undefined) {\n                _this.props.onMouseUp(ev); // not cancelling event because it's not disabled\n            }\n        };\n        _this._onMouseDown = function (ev) {\n            if (!_this.props.disabled && _this.props.onMouseDown !== undefined) {\n                _this.props.onMouseDown(ev); // not cancelling event because it's not disabled\n            }\n        };\n        _this._onClick = function (ev) {\n            if (!_this.props.disabled) {\n                if (_this.props.menuProps) {\n                    _this._onMenuClick(ev);\n                }\n                else if (_this.props.onClick !== undefined) {\n                    _this.props.onClick(ev); // not cancelling event because it's not disabled\n                }\n            }\n        };\n        _this._onSplitButtonContainerKeyDown = function (ev) {\n            if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n                if (_this._buttonElement.current) {\n                    _this._buttonElement.current.click();\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            }\n            else {\n                _this._onMenuKeyDown(ev);\n            }\n        };\n        _this._onMenuKeyDown = function (ev) {\n            if (_this.props.disabled) {\n                return;\n            }\n            if (_this.props.onKeyDown) {\n                _this.props.onKeyDown(ev);\n            }\n            var isUp = ev.which === KeyCodes.up;\n            var isDown = ev.which === KeyCodes.down;\n            if (!ev.defaultPrevented && _this._isValidMenuOpenKey(ev)) {\n                var onMenuClick = _this.props.onMenuClick;\n                if (onMenuClick) {\n                    onMenuClick(ev, _this.props);\n                }\n                _this._onToggleMenu(false);\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n            if (!(ev.altKey || ev.metaKey) && (isUp || isDown)) {\n                // Suppose a menu, with shouldFocusOnMount: false, is open, and user wants to keyboard to the menu items\n                // We need to re-render the menu with shouldFocusOnMount as true.\n                if (!_this.state.menuHidden && _this.props.menuProps) {\n                    var currentShouldFocusOnMount = _this._menuShouldFocusOnMount !== undefined\n                        ? _this._menuShouldFocusOnMount\n                        : _this.props.menuProps.shouldFocusOnMount;\n                    if (!currentShouldFocusOnMount) {\n                        ev.preventDefault();\n                        ev.stopPropagation();\n                        _this._menuShouldFocusOnMount = true;\n                        _this.forceUpdate();\n                    }\n                }\n            }\n        };\n        _this._onTouchStart = function () {\n            if (_this._isSplitButton &&\n                _this._splitButtonContainer.current &&\n                !('onpointerdown' in _this._splitButtonContainer.current)) {\n                _this._handleTouchAndPointerEvent();\n            }\n        };\n        _this._onMenuClick = function (ev) {\n            var onMenuClick = _this.props.onMenuClick;\n            if (onMenuClick) {\n                onMenuClick(ev, _this.props);\n            }\n            if (!ev.defaultPrevented) {\n                // When Edge + Narrator are used together (regardless of if the button is in a form or not), pressing\n                // \"Enter\" fires this method and not _onMenuKeyDown. Checking ev.nativeEvent.detail differentiates\n                // between a real click event and a keypress event (detail should be the number of mouse clicks).\n                // ...Plot twist! For a real click event in IE 11, detail is always 0 (Edge sets it properly to 1).\n                // So we also check the pointerType property, which both Edge and IE set to \"mouse\" for real clicks\n                // and \"\" for pressing \"Enter\" with Narrator on.\n                var shouldFocusOnContainer = ev.nativeEvent.detail !== 0 || ev.nativeEvent.pointerType === 'mouse';\n                _this._onToggleMenu(shouldFocusOnContainer);\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n        };\n        initializeComponentRef(_this);\n        _this._async = new Async_Async(_this);\n        _this._events = new EventGroup_EventGroup(_this);\n        warnConditionallyRequiredProps(BaseButton_COMPONENT_NAME, props, ['menuProps', 'onClick'], 'split', _this.props.split);\n        warnDeprecations(BaseButton_COMPONENT_NAME, props, {\n            rootProps: undefined,\n            description: 'secondaryText',\n            toggled: 'checked',\n        });\n        _this._labelId = getId();\n        _this._descriptionId = getId();\n        _this._ariaDescriptionId = getId();\n        _this.state = {\n            menuHidden: true,\n        };\n        return _this;\n    }\n    Object.defineProperty(BaseButton.prototype, \"_isSplitButton\", {\n        get: function () {\n            return !!this.props.menuProps && !!this.props.onClick && this.props.split === true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BaseButton.prototype.render = function () {\n        var _a;\n        var _b = this.props, ariaDescription = _b.ariaDescription, ariaLabel = _b.ariaLabel, ariaHidden = _b.ariaHidden, className = _b.className, disabled = _b.disabled, allowDisabledFocus = _b.allowDisabledFocus, primaryDisabled = _b.primaryDisabled, \n        // eslint-disable-next-line deprecation/deprecation\n        _c = _b.secondaryText, \n        // eslint-disable-next-line deprecation/deprecation\n        secondaryText = _c === void 0 ? this.props.description : _c, href = _b.href, iconProps = _b.iconProps, menuIconProps = _b.menuIconProps, styles = _b.styles, checked = _b.checked, variantClassName = _b.variantClassName, theme = _b.theme, toggle = _b.toggle, getClassNames = _b.getClassNames, role = _b.role;\n        var menuHidden = this.state.menuHidden;\n        // Button is disabled if the whole button (in case of splitbutton is disabled) or if the primary action is disabled\n        var isPrimaryButtonDisabled = disabled || primaryDisabled;\n        this._classNames = getClassNames\n            ? getClassNames(theme, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, checked, !menuHidden, !!this.props.menuProps, this.props.split, !!allowDisabledFocus)\n            : getBaseButtonClassNames(theme, styles, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, !!this.props.menuProps, checked, !menuHidden, this.props.split);\n        var _d = this, _ariaDescriptionId = _d._ariaDescriptionId, _labelId = _d._labelId, _descriptionId = _d._descriptionId;\n        // Anchor tag cannot be disabled hence in disabled state rendering\n        // anchor button as normal button\n        var renderAsAnchor = !isPrimaryButtonDisabled && !!href;\n        var tag = renderAsAnchor ? 'a' : 'button';\n        var nativeProps = getNativeProps(\n        // eslint-disable-next-line deprecation/deprecation\n        object_assign(renderAsAnchor ? {} : { type: 'button' }, this.props.rootProps, this.props), renderAsAnchor ? anchorProperties : buttonProperties, [\n            'disabled',\n        ]);\n        // Check for ariaLabel passed in via Button props, and fall back to aria-label passed in via native props\n        var resolvedAriaLabel = ariaLabel || nativeProps['aria-label'];\n        // Check for ariaDescription, secondaryText or aria-describedby in the native props to determine source of\n        // aria-describedby. Otherwise default to undefined so property does not appear in output.\n        var ariaDescribedBy = undefined;\n        if (ariaDescription) {\n            ariaDescribedBy = _ariaDescriptionId;\n        }\n        else if (secondaryText && this.props.onRenderDescription !== nullRender) {\n            // for buttons like CompoundButton with a valid onRenderDescription, we need to set an ariaDescribedBy\n            // for buttons that do not render anything (via nullRender), we should not set an ariaDescribedBy\n            ariaDescribedBy = _descriptionId;\n        }\n        else if (nativeProps['aria-describedby']) {\n            ariaDescribedBy = nativeProps['aria-describedby'];\n        }\n        // If an explicit ariaLabel is given, use that as the label and we're done.\n        // If an explicit aria-labelledby is given, use that and we're done.\n        // If any kind of description is given (which will end up as an aria-describedby attribute),\n        // set the labelledby element. Otherwise, the button is labeled implicitly by the descendent\n        // text on the button (if it exists). Never set both aria-label and aria-labelledby.\n        var ariaLabelledBy = undefined;\n        if (!resolvedAriaLabel) {\n            if (nativeProps['aria-labelledby']) {\n                ariaLabelledBy = nativeProps['aria-labelledby'];\n            }\n            else if (ariaDescribedBy) {\n                ariaLabelledBy = this._hasText() ? _labelId : undefined;\n            }\n        }\n        var dataIsFocusable = this.props['data-is-focusable'] === false || (disabled && !allowDisabledFocus) || this._isSplitButton\n            ? false\n            : true;\n        var isCheckboxTypeRole = role === 'menuitemcheckbox' || role === 'checkbox';\n        // if isCheckboxTypeRole, always return a checked value.\n        // Otherwise only return checked value if toggle is set to true.\n        // This is because role=\"checkbox\" always needs to have an aria-checked value\n        // but our checked prop only sets aria-pressed if we mark the button as a toggle=\"true\"\n        var checkedOrPressedValue = isCheckboxTypeRole ? !!checked : toggle === true ? !!checked : undefined;\n        var buttonProps = object_assign(nativeProps, (_a = {\n                className: this._classNames.root,\n                ref: this._buttonElement,\n                disabled: isPrimaryButtonDisabled && !allowDisabledFocus,\n                onKeyDown: this._onKeyDown,\n                onKeyPress: this._onKeyPress,\n                onKeyUp: this._onKeyUp,\n                onMouseDown: this._onMouseDown,\n                onMouseUp: this._onMouseUp,\n                onClick: this._onClick,\n                'aria-label': resolvedAriaLabel,\n                'aria-labelledby': ariaLabelledBy,\n                'aria-describedby': ariaDescribedBy,\n                'aria-disabled': isPrimaryButtonDisabled,\n                'data-is-focusable': dataIsFocusable\n            },\n            // aria-pressed attribute should only be present for toggle buttons\n            // aria-checked attribute should only be present for toggle buttons with checkbox type role\n            _a[isCheckboxTypeRole ? 'aria-checked' : 'aria-pressed'] = checkedOrPressedValue,\n            _a));\n        if (ariaHidden) {\n            buttonProps['aria-hidden'] = true;\n        }\n        if (this._isSplitButton) {\n            return this._onRenderSplitButtonContent(tag, buttonProps);\n        }\n        else if (this.props.menuProps) {\n            object_assign(buttonProps, {\n                'aria-expanded': !menuHidden,\n                'aria-owns': !menuHidden ? this._labelId + '-menu' : null,\n                'aria-haspopup': true,\n            });\n        }\n        return this._onRenderContent(tag, buttonProps);\n    };\n    BaseButton.prototype.componentDidMount = function () {\n        // For split buttons, touching anywhere in the button should drop the dropdown, which should contain the\n        // primary action. This gives more hit target space for touch environments. We're setting the onpointerdown here,\n        // because React does not support Pointer events yet.\n        if (this._isSplitButton && this._splitButtonContainer.current) {\n            if ('onpointerdown' in this._splitButtonContainer.current) {\n                this._events.on(this._splitButtonContainer.current, 'pointerdown', this._onPointerDown, true);\n            }\n            if ('onpointerup' in this._splitButtonContainer.current && this.props.onPointerUp) {\n                this._events.on(this._splitButtonContainer.current, 'pointerup', this.props.onPointerUp, true);\n            }\n        }\n    };\n    BaseButton.prototype.componentDidUpdate = function (prevProps, prevState) {\n        // If Button's menu was closed, run onAfterMenuDismiss.\n        if (this.props.onAfterMenuDismiss && !prevState.menuHidden && this.state.menuHidden) {\n            this.props.onAfterMenuDismiss();\n        }\n    };\n    BaseButton.prototype.componentWillUnmount = function () {\n        this._async.dispose();\n        this._events.dispose();\n    };\n    BaseButton.prototype.focus = function () {\n        if (this._isSplitButton && this._splitButtonContainer.current) {\n            this._splitButtonContainer.current.focus();\n        }\n        else if (this._buttonElement.current) {\n            this._buttonElement.current.focus();\n        }\n    };\n    BaseButton.prototype.dismissMenu = function () {\n        this._dismissMenu();\n    };\n    BaseButton.prototype.openMenu = function (shouldFocusOnContainer, shouldFocusOnMount) {\n        this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);\n    };\n    BaseButton.prototype._onRenderContent = function (tag, buttonProps) {\n        var _this = this;\n        var props = this.props;\n        var Tag = tag;\n        var menuIconProps = props.menuIconProps, menuProps = props.menuProps, _a = props.onRenderIcon, onRenderIcon = _a === void 0 ? this._onRenderIcon : _a, _b = props.onRenderAriaDescription, onRenderAriaDescription = _b === void 0 ? this._onRenderAriaDescription : _b, _c = props.onRenderChildren, onRenderChildren = _c === void 0 ? this._onRenderChildren : _c, \n        // eslint-disable-next-line deprecation/deprecation\n        _d = props.onRenderMenu, \n        // eslint-disable-next-line deprecation/deprecation\n        onRenderMenu = _d === void 0 ? this._onRenderMenu : _d, _e = props.onRenderMenuIcon, onRenderMenuIcon = _e === void 0 ? this._onRenderMenuIcon : _e, disabled = props.disabled;\n        var keytipProps = props.keytipProps;\n        if (keytipProps && menuProps) {\n            keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n        }\n        var Button = function (keytipAttributes) { return (react[\"createElement\"](Tag, __assign({}, buttonProps, keytipAttributes),\n            react[\"createElement\"](\"span\", { className: _this._classNames.flexContainer, \"data-automationid\": \"splitbuttonprimary\" },\n                onRenderIcon(props, _this._onRenderIcon),\n                _this._onRenderTextContents(),\n                onRenderAriaDescription(props, _this._onRenderAriaDescription),\n                onRenderChildren(props, _this._onRenderChildren),\n                !_this._isSplitButton &&\n                    (menuProps || menuIconProps || _this.props.onRenderMenuIcon) &&\n                    onRenderMenuIcon(_this.props, _this._onRenderMenuIcon),\n                menuProps &&\n                    !menuProps.doNotLayer &&\n                    _this._shouldRenderMenu() &&\n                    onRenderMenu(menuProps, _this._onRenderMenu)))); };\n        var Content = keytipProps ? (\n        // If we're making a split button, we won't put the keytip here\n        react[\"createElement\"](KeytipData, { keytipProps: !this._isSplitButton ? keytipProps : undefined, ariaDescribedBy: buttonProps['aria-describedby'], disabled: disabled }, function (keytipAttributes) { return Button(keytipAttributes); })) : (Button());\n        if (menuProps && menuProps.doNotLayer) {\n            return (react[\"createElement\"](\"span\", { style: { display: 'inline-block' } },\n                Content,\n                this._shouldRenderMenu() && onRenderMenu(menuProps, this._onRenderMenu)));\n        }\n        return (react[\"createElement\"](react[\"Fragment\"], null,\n            Content,\n            react[\"createElement\"](FocusRects, null)));\n    };\n    /**\n     * Method to help determine if the menu's component tree should\n     * be rendered. It takes into account whether the menu is expanded,\n     * whether it is a persisted menu and whether it has been shown to the user.\n     */\n    BaseButton.prototype._shouldRenderMenu = function () {\n        var menuHidden = this.state.menuHidden;\n        // eslint-disable-next-line deprecation/deprecation\n        var _a = this.props, persistMenu = _a.persistMenu, renderPersistedMenuHiddenOnMount = _a.renderPersistedMenuHiddenOnMount;\n        if (!menuHidden) {\n            // Always should render a menu when it is expanded\n            return true;\n        }\n        else if (persistMenu && (this._renderedVisibleMenu || renderPersistedMenuHiddenOnMount)) {\n            // _renderedVisibleMenu ensures that the first rendering of\n            // the menu happens on-screen, as edge's scrollbar calculations are off if done while hidden.\n            return true;\n        }\n        return false;\n    };\n    BaseButton.prototype._hasText = function () {\n        // _onRenderTextContents and _onRenderText do not perform the same checks. Below is parity with what _onRenderText\n        // used to have before the refactor that introduced this function. _onRenderTextContents does not require props.\n        // text to be undefined in order for props.children to be used as a fallback.\n        // Purely a code maintainability/reuse issue, but logged as Issue #4979.\n        return this.props.text !== null && (this.props.text !== undefined || typeof this.props.children === 'string');\n    };\n    BaseButton.prototype._onRenderSplitButtonContent = function (tag, buttonProps) {\n        var _this = this;\n        var _a = this.props, _b = _a.styles, styles = _b === void 0 ? {} : _b, disabled = _a.disabled, allowDisabledFocus = _a.allowDisabledFocus, checked = _a.checked, getSplitButtonClassNames = _a.getSplitButtonClassNames, primaryDisabled = _a.primaryDisabled, menuProps = _a.menuProps, toggle = _a.toggle, role = _a.role, primaryActionButtonProps = _a.primaryActionButtonProps;\n        var keytipProps = this.props.keytipProps;\n        var menuHidden = this.state.menuHidden;\n        var classNames = getSplitButtonClassNames\n            ? getSplitButtonClassNames(!!disabled, !menuHidden, !!checked, !!allowDisabledFocus)\n            : styles && SplitButton_classNames_getClassNames(styles, !!disabled, !menuHidden, !!checked, !!primaryDisabled);\n        object_assign(buttonProps, {\n            onClick: undefined,\n            onPointerDown: undefined,\n            onPointerUp: undefined,\n            tabIndex: -1,\n            'data-is-focusable': false,\n        });\n        var ariaDescribedBy = buttonProps.ariaDescription;\n        if (keytipProps && menuProps) {\n            keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n        }\n        var containerProps = getNativeProps(buttonProps, [], ['disabled']);\n        // Add additional props to apply on primary action button\n        if (primaryActionButtonProps) {\n            object_assign(buttonProps, primaryActionButtonProps);\n        }\n        var SplitButton = function (keytipAttributes) { return (react[\"createElement\"](\"div\", __assign({}, containerProps, { \"data-ktp-target\": keytipAttributes ? keytipAttributes['data-ktp-target'] : undefined, role: role ? role : 'button', \"aria-disabled\": disabled, \"aria-haspopup\": true, \"aria-expanded\": !menuHidden, \"aria-pressed\": toggle ? !!checked : undefined, \"aria-describedby\": mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes ? keytipAttributes['aria-describedby'] : undefined), className: classNames && classNames.splitButtonContainer, onKeyDown: _this._onSplitButtonContainerKeyDown, onTouchStart: _this._onTouchStart, ref: _this._splitButtonContainer, \"data-is-focusable\": true, onClick: !disabled && !primaryDisabled ? _this._onSplitButtonPrimaryClick : undefined, tabIndex: !disabled || allowDisabledFocus ? 0 : undefined, \"aria-roledescription\": buttonProps['aria-roledescription'], onFocusCapture: _this._onSplitContainerFocusCapture }),\n            react[\"createElement\"](\"span\", { style: { display: 'flex' } },\n                _this._onRenderContent(tag, buttonProps),\n                _this._onRenderSplitButtonMenuButton(classNames, keytipAttributes),\n                _this._onRenderSplitButtonDivider(classNames)))); };\n        return keytipProps ? (react[\"createElement\"](KeytipData, { keytipProps: keytipProps, disabled: disabled }, function (keytipAttributes) { return SplitButton(keytipAttributes); })) : (SplitButton());\n    };\n    BaseButton.prototype._onRenderSplitButtonDivider = function (classNames) {\n        if (classNames && classNames.divider) {\n            var onClick = function (ev) {\n                ev.stopPropagation();\n            };\n            return react[\"createElement\"](\"span\", { className: classNames.divider, \"aria-hidden\": true, onClick: onClick });\n        }\n        return null;\n    };\n    BaseButton.prototype._onRenderSplitButtonMenuButton = function (classNames, keytipAttributes) {\n        var _a = this.props, allowDisabledFocus = _a.allowDisabledFocus, checked = _a.checked, disabled = _a.disabled, splitButtonMenuProps = _a.splitButtonMenuProps, splitButtonAriaLabel = _a.splitButtonAriaLabel;\n        var menuHidden = this.state.menuHidden;\n        var menuIconProps = this.props.menuIconProps;\n        if (menuIconProps === undefined) {\n            menuIconProps = {\n                iconName: 'ChevronDown',\n            };\n        }\n        var splitButtonProps = __assign(__assign({}, splitButtonMenuProps), { styles: classNames, checked: checked, disabled: disabled, allowDisabledFocus: allowDisabledFocus, onClick: this._onMenuClick, menuProps: undefined, iconProps: __assign(__assign({}, menuIconProps), { className: this._classNames.menuIcon }), ariaLabel: splitButtonAriaLabel, 'aria-haspopup': true, 'aria-expanded': !menuHidden, 'data-is-focusable': false });\n        // Add data-ktp-execute-target to the split button if the keytip is defined\n        return (react[\"createElement\"](BaseButton, __assign({}, splitButtonProps, { \"data-ktp-execute-target\": keytipAttributes ? keytipAttributes['data-ktp-execute-target'] : keytipAttributes, onMouseDown: this._onMouseDown, tabIndex: -1 })));\n    };\n    BaseButton.prototype._onPointerDown = function (ev) {\n        var onPointerDown = this.props.onPointerDown;\n        if (onPointerDown) {\n            onPointerDown(ev);\n        }\n        if (ev.pointerType === 'touch') {\n            this._handleTouchAndPointerEvent();\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n        }\n    };\n    BaseButton.prototype._handleTouchAndPointerEvent = function () {\n        var _this = this;\n        // If we already have an existing timeeout from a previous touch and pointer event\n        // cancel that timeout so we can set a new one.\n        if (this._lastTouchTimeoutId !== undefined) {\n            this._async.clearTimeout(this._lastTouchTimeoutId);\n            this._lastTouchTimeoutId = undefined;\n        }\n        this._processingTouch = true;\n        this._lastTouchTimeoutId = this._async.setTimeout(function () {\n            _this._processingTouch = false;\n            _this._lastTouchTimeoutId = undefined;\n            // Touch and pointer events don't focus the button naturally,\n            // so adding an imperative focus call to guarantee this behavior.\n            _this.focus();\n        }, BaseButton_TouchIdleDelay);\n    };\n    /**\n     * Returns if the user hits a valid keyboard key to open the menu\n     * @param ev - the keyboard event\n     * @returns True if user clicks on custom trigger key if enabled or alt + down arrow if not. False otherwise.\n     */\n    BaseButton.prototype._isValidMenuOpenKey = function (ev) {\n        if (this.props.menuTriggerKeyCode) {\n            return ev.which === this.props.menuTriggerKeyCode;\n        }\n        else if (this.props.menuProps) {\n            return ev.which === KeyCodes.down && (ev.altKey || ev.metaKey);\n        }\n        // Note: When enter is pressed, we will let the event continue to propagate\n        // to trigger the onClick event on the button\n        return false;\n    };\n    BaseButton.defaultProps = {\n        baseClassName: 'ms-Button',\n        styles: {},\n        split: false,\n    };\n    return BaseButton;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=BaseButton.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Button/BaseButton.styles.js\n\n\nvar noOutline = {\n    outline: 0,\n};\nvar iconStyle = function (fontSize) {\n    return {\n        fontSize: fontSize,\n        margin: '0 4px',\n        height: '16px',\n        lineHeight: '16px',\n        textAlign: 'center',\n        flexShrink: 0,\n    };\n};\n/**\n * Gets the base button styles. Note: because it is a base class to be used with the `mergeRules`\n * helper, it should have values for all class names in the interface. This let `mergeRules` optimize\n * mixing class names together.\n */\nvar BaseButton_styles_getStyles = memoizeFunction(function (theme) {\n    var _a, _b;\n    var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;\n    var border = semanticColors.buttonBorder;\n    var disabledBackground = semanticColors.disabledBackground;\n    var disabledText = semanticColors.disabledText;\n    var buttonHighContrastFocus = {\n        left: -2,\n        top: -2,\n        bottom: -2,\n        right: -2,\n        outlineColor: 'ButtonText',\n    };\n    return {\n        root: [\n            getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: 'transparent' }),\n            theme.fonts.medium,\n            {\n                boxSizing: 'border-box',\n                border: '1px solid ' + border,\n                userSelect: 'none',\n                display: 'inline-block',\n                textDecoration: 'none',\n                textAlign: 'center',\n                cursor: 'pointer',\n                padding: '0 16px',\n                borderRadius: effects.roundedCorner2,\n                selectors: {\n                    // IE11 workaround for preventing shift of child elements of a button when active.\n                    ':active > *': {\n                        position: 'relative',\n                        left: 0,\n                        top: 0,\n                    },\n                },\n            },\n        ],\n        rootDisabled: [\n            getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: 'transparent' }),\n            {\n                backgroundColor: disabledBackground,\n                borderColor: disabledBackground,\n                color: disabledText,\n                cursor: 'default',\n                pointerEvents: 'none',\n                selectors: {\n                    ':hover': noOutline,\n                    ':focus': noOutline,\n                },\n            },\n        ],\n        iconDisabled: {\n            color: disabledText,\n            selectors: (_a = {},\n                _a[HighContrastSelector] = {\n                    color: 'GrayText',\n                },\n                _a),\n        },\n        menuIconDisabled: {\n            color: disabledText,\n            selectors: (_b = {},\n                _b[HighContrastSelector] = {\n                    color: 'GrayText',\n                },\n                _b),\n        },\n        flexContainer: {\n            display: 'flex',\n            height: '100%',\n            flexWrap: 'nowrap',\n            justifyContent: 'center',\n            alignItems: 'center',\n        },\n        description: {\n            display: 'block',\n        },\n        textContainer: {\n            flexGrow: 1,\n            display: 'block',\n        },\n        icon: iconStyle(fonts.mediumPlus.fontSize),\n        menuIcon: iconStyle(fonts.small.fontSize),\n        label: {\n            margin: '0 4px',\n            lineHeight: '100%',\n            display: 'block',\n        },\n        screenReaderText: hiddenContentStyle,\n    };\n});\n//# sourceMappingURL=BaseButton.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Button/SplitButton/SplitButton.styles.js\n\n\n\nvar SplitButton_styles_getStyles = memoizeFunction(function (theme, customStyles) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    var effects = theme.effects, palette = theme.palette, semanticColors = theme.semanticColors;\n    var buttonHighContrastFocus = {\n        left: -2,\n        top: -2,\n        bottom: -2,\n        right: -2,\n        border: 'none',\n    };\n    var splitButtonDividerBaseStyles = {\n        position: 'absolute',\n        width: 1,\n        right: 31,\n        top: 8,\n        bottom: 8,\n    };\n    var splitButtonStyles = {\n        splitButtonContainer: [\n            getFocusStyle(theme, { highContrastStyle: buttonHighContrastFocus, inset: 2 }),\n            {\n                display: 'inline-flex',\n                selectors: {\n                    '.ms-Button--default': {\n                        borderTopRightRadius: '0',\n                        borderBottomRightRadius: '0',\n                        borderRight: 'none',\n                    },\n                    '.ms-Button--primary': {\n                        borderTopRightRadius: '0',\n                        borderBottomRightRadius: '0',\n                        border: 'none',\n                        selectors: (_a = {},\n                            _a[HighContrastSelector] = {\n                                color: 'WindowText',\n                                backgroundColor: 'Window',\n                                border: '1px solid WindowText',\n                                borderRightWidth: '0',\n                                MsHighContrastAdjust: 'none',\n                            },\n                            _a),\n                    },\n                    '.ms-Button--primary + .ms-Button': {\n                        border: 'none',\n                        selectors: (_b = {},\n                            _b[HighContrastSelector] = {\n                                border: '1px solid WindowText',\n                                borderLeftWidth: '0',\n                            },\n                            _b),\n                    },\n                },\n            },\n        ],\n        splitButtonContainerHovered: {\n            selectors: {\n                '.ms-Button--primary': {\n                    selectors: (_c = {},\n                        _c[HighContrastSelector] = {\n                            color: 'Window',\n                            backgroundColor: 'Highlight',\n                        },\n                        _c),\n                },\n                '.ms-Button.is-disabled': {\n                    color: semanticColors.buttonTextDisabled,\n                    selectors: (_d = {},\n                        _d[HighContrastSelector] = {\n                            color: 'GrayText',\n                            borderColor: 'GrayText',\n                            backgroundColor: 'Window',\n                        },\n                        _d),\n                },\n            },\n        },\n        splitButtonContainerChecked: {\n            selectors: {\n                '.ms-Button--primary': {\n                    selectors: (_e = {},\n                        _e[HighContrastSelector] = {\n                            color: 'Window',\n                            backgroundColor: 'WindowText',\n                            MsHighContrastAdjust: 'none',\n                        },\n                        _e),\n                },\n            },\n        },\n        splitButtonContainerCheckedHovered: {\n            selectors: {\n                '.ms-Button--primary': {\n                    selectors: (_f = {},\n                        _f[HighContrastSelector] = {\n                            color: 'Window',\n                            backgroundColor: 'WindowText',\n                            MsHighContrastAdjust: 'none',\n                        },\n                        _f),\n                },\n            },\n        },\n        splitButtonContainerFocused: {\n            outline: 'none!important',\n        },\n        splitButtonMenuButton: {\n            padding: 6,\n            height: 'auto',\n            boxSizing: 'border-box',\n            borderRadius: 0,\n            borderTopRightRadius: effects.roundedCorner2,\n            borderBottomRightRadius: effects.roundedCorner2,\n            border: \"1px solid \" + palette.neutralSecondaryAlt,\n            borderLeft: 'none',\n            outline: 'transparent',\n            userSelect: 'none',\n            display: 'inline-block',\n            textDecoration: 'none',\n            textAlign: 'center',\n            cursor: 'pointer',\n            verticalAlign: 'top',\n            width: 32,\n            marginLeft: -1,\n            marginTop: 0,\n            marginRight: 0,\n            marginBottom: 0,\n        },\n        splitButtonDivider: __assign(__assign({}, splitButtonDividerBaseStyles), { selectors: (_g = {},\n                _g[HighContrastSelector] = {\n                    backgroundColor: 'WindowText',\n                },\n                _g) }),\n        splitButtonDividerDisabled: __assign(__assign({}, splitButtonDividerBaseStyles), { selectors: (_h = {},\n                _h[HighContrastSelector] = {\n                    backgroundColor: 'GrayText',\n                },\n                _h) }),\n        splitButtonMenuButtonDisabled: {\n            pointerEvents: 'none',\n            border: 'none',\n            selectors: (_j = {\n                    ':hover': {\n                        cursor: 'default',\n                    },\n                    '.ms-Button--primary': {\n                        selectors: (_k = {},\n                            _k[HighContrastSelector] = {\n                                color: 'GrayText',\n                                borderColor: 'GrayText',\n                                backgroundColor: 'Window',\n                            },\n                            _k),\n                    },\n                    '.ms-Button-menuIcon': {\n                        selectors: (_l = {},\n                            _l[HighContrastSelector] = {\n                                color: 'GrayText',\n                            },\n                            _l),\n                    }\n                },\n                _j[HighContrastSelector] = {\n                    color: 'GrayText',\n                    border: '1px solid GrayText',\n                    backgroundColor: 'Window',\n                },\n                _j),\n        },\n        splitButtonFlexContainer: {\n            display: 'flex',\n            height: '100%',\n            flexWrap: 'nowrap',\n            justifyContent: 'center',\n            alignItems: 'center',\n        },\n        splitButtonContainerDisabled: {\n            outline: 'none',\n            border: 'none',\n            selectors: __assign((_m = {}, _m[HighContrastSelector] = {\n                color: 'GrayText',\n                borderColor: 'GrayText',\n                backgroundColor: 'Window',\n            }, _m), getEdgeChromiumNoHighContrastAdjustSelector()),\n        },\n    };\n    return concatStyleSets(splitButtonStyles, customStyles);\n});\n//# sourceMappingURL=SplitButton.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Button/ButtonThemes.js\n\n\n\nvar ButtonThemes_splitButtonDividerBaseStyles = function () {\n    return {\n        position: 'absolute',\n        width: 1,\n        right: 31,\n        top: 8,\n        bottom: 8,\n    };\n};\nfunction standardStyles(theme) {\n    var _a, _b, _c, _d, _e;\n    var s = theme.semanticColors, p = theme.palette;\n    var buttonBackground = s.buttonBackground;\n    var buttonBackgroundPressed = s.buttonBackgroundPressed;\n    var buttonBackgroundHovered = s.buttonBackgroundHovered;\n    var buttonText = s.buttonText;\n    var buttonTextHovered = s.buttonTextHovered;\n    var buttonTextChecked = s.buttonTextChecked;\n    var buttonTextCheckedHovered = s.buttonTextCheckedHovered;\n    return {\n        root: {\n            backgroundColor: buttonBackground,\n            color: buttonText,\n        },\n        rootHovered: {\n            backgroundColor: buttonBackgroundHovered,\n            color: buttonTextHovered,\n            selectors: (_a = {},\n                _a[HighContrastSelector] = {\n                    borderColor: 'Highlight',\n                    color: 'Highlight',\n                },\n                _a),\n        },\n        rootPressed: {\n            backgroundColor: buttonBackgroundPressed,\n            color: buttonTextChecked,\n        },\n        rootExpanded: {\n            backgroundColor: buttonBackgroundPressed,\n            color: buttonTextChecked,\n        },\n        rootChecked: {\n            backgroundColor: buttonBackgroundPressed,\n            color: buttonTextChecked,\n        },\n        rootCheckedHovered: {\n            backgroundColor: buttonBackgroundPressed,\n            color: buttonTextCheckedHovered,\n        },\n        rootDisabled: {\n            selectors: (_b = {},\n                _b[HighContrastSelector] = {\n                    color: 'GrayText',\n                    borderColor: 'GrayText',\n                    backgroundColor: 'Window',\n                },\n                _b),\n        },\n        // Split button styles\n        splitButtonContainer: {\n            selectors: (_c = {},\n                _c[HighContrastSelector] = {\n                    border: 'none',\n                },\n                _c),\n        },\n        splitButtonMenuButton: {\n            color: p.white,\n            backgroundColor: 'transparent',\n            selectors: {\n                ':hover': {\n                    backgroundColor: p.neutralLight,\n                    selectors: (_d = {},\n                        _d[HighContrastSelector] = {\n                            color: 'Highlight',\n                        },\n                        _d),\n                },\n            },\n        },\n        splitButtonMenuButtonDisabled: {\n            backgroundColor: s.buttonBackgroundDisabled,\n            selectors: {\n                ':hover': {\n                    backgroundColor: s.buttonBackgroundDisabled,\n                },\n            },\n        },\n        splitButtonDivider: __assign(__assign({}, ButtonThemes_splitButtonDividerBaseStyles()), { backgroundColor: p.neutralTertiaryAlt, selectors: (_e = {},\n                _e[HighContrastSelector] = {\n                    backgroundColor: 'WindowText',\n                },\n                _e) }),\n        splitButtonDividerDisabled: {\n            backgroundColor: theme.palette.neutralTertiaryAlt,\n        },\n        splitButtonMenuButtonChecked: {\n            backgroundColor: p.neutralQuaternaryAlt,\n            selectors: {\n                ':hover': {\n                    backgroundColor: p.neutralQuaternaryAlt,\n                },\n            },\n        },\n        splitButtonMenuButtonExpanded: {\n            backgroundColor: p.neutralQuaternaryAlt,\n            selectors: {\n                ':hover': {\n                    backgroundColor: p.neutralQuaternaryAlt,\n                },\n            },\n        },\n        splitButtonMenuIcon: {\n            color: s.buttonText,\n        },\n        splitButtonMenuIconDisabled: {\n            color: s.buttonTextDisabled,\n        },\n    };\n}\nfunction primaryStyles(theme) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    var p = theme.palette, s = theme.semanticColors;\n    return {\n        root: {\n            backgroundColor: s.primaryButtonBackground,\n            border: \"1px solid \" + s.primaryButtonBackground,\n            color: s.primaryButtonText,\n            selectors: (_a = {},\n                _a[HighContrastSelector] = {\n                    color: 'Window',\n                    backgroundColor: 'WindowText',\n                    borderColor: 'WindowText',\n                    MsHighContrastAdjust: 'none',\n                },\n                _a[\".\" + IsFocusVisibleClassName + \" &:focus\"] = {\n                    selectors: {\n                        ':after': {\n                            border: \"none\",\n                            outlineColor: p.white,\n                        },\n                    },\n                },\n                _a),\n        },\n        rootHovered: {\n            backgroundColor: s.primaryButtonBackgroundHovered,\n            border: \"1px solid \" + s.primaryButtonBackgroundHovered,\n            color: s.primaryButtonTextHovered,\n            selectors: (_b = {},\n                _b[HighContrastSelector] = {\n                    color: 'Window',\n                    backgroundColor: 'Highlight',\n                    borderColor: 'Highlight',\n                },\n                _b),\n        },\n        rootPressed: {\n            backgroundColor: s.primaryButtonBackgroundPressed,\n            border: \"1px solid \" + s.primaryButtonBackgroundPressed,\n            color: s.primaryButtonTextPressed,\n            selectors: (_c = {},\n                _c[HighContrastSelector] = {\n                    color: 'Window',\n                    backgroundColor: 'WindowText',\n                    borderColor: 'WindowText',\n                    MsHighContrastAdjust: 'none',\n                },\n                _c),\n        },\n        rootExpanded: {\n            backgroundColor: s.primaryButtonBackgroundPressed,\n            color: s.primaryButtonTextPressed,\n        },\n        rootChecked: {\n            backgroundColor: s.primaryButtonBackgroundPressed,\n            color: s.primaryButtonTextPressed,\n        },\n        rootCheckedHovered: {\n            backgroundColor: s.primaryButtonBackgroundPressed,\n            color: s.primaryButtonTextPressed,\n        },\n        rootDisabled: {\n            selectors: (_d = {},\n                _d[HighContrastSelector] = {\n                    color: 'GrayText',\n                    borderColor: 'GrayText',\n                    backgroundColor: 'Window',\n                },\n                _d),\n        },\n        // Split button styles\n        splitButtonContainer: {\n            selectors: (_e = {},\n                _e[HighContrastSelector] = {\n                    border: 'none',\n                },\n                _e),\n        },\n        splitButtonDivider: __assign(__assign({}, ButtonThemes_splitButtonDividerBaseStyles()), { backgroundColor: p.white, selectors: (_f = {},\n                _f[HighContrastSelector] = {\n                    backgroundColor: 'Window',\n                },\n                _f) }),\n        splitButtonMenuButton: {\n            backgroundColor: s.primaryButtonBackground,\n            color: s.primaryButtonText,\n            selectors: (_g = {},\n                _g[HighContrastSelector] = {\n                    backgroundColor: 'WindowText',\n                },\n                _g[':hover'] = {\n                    backgroundColor: s.primaryButtonBackgroundHovered,\n                    selectors: (_h = {},\n                        _h[HighContrastSelector] = {\n                            color: 'Highlight',\n                        },\n                        _h),\n                },\n                _g),\n        },\n        splitButtonMenuButtonDisabled: {\n            backgroundColor: s.primaryButtonBackgroundDisabled,\n            selectors: {\n                ':hover': {\n                    backgroundColor: s.primaryButtonBackgroundDisabled,\n                },\n            },\n        },\n        splitButtonMenuButtonChecked: {\n            backgroundColor: s.primaryButtonBackgroundPressed,\n            selectors: {\n                ':hover': {\n                    backgroundColor: s.primaryButtonBackgroundPressed,\n                },\n            },\n        },\n        splitButtonMenuButtonExpanded: {\n            backgroundColor: s.primaryButtonBackgroundPressed,\n            selectors: {\n                ':hover': {\n                    backgroundColor: s.primaryButtonBackgroundPressed,\n                },\n            },\n        },\n        splitButtonMenuIcon: {\n            color: s.primaryButtonText,\n        },\n        splitButtonMenuIconDisabled: {\n            color: p.neutralTertiary,\n            selectors: (_j = {},\n                _j[HighContrastSelector] = {\n                    color: 'GrayText',\n                },\n                _j),\n        },\n    };\n}\n//# sourceMappingURL=ButtonThemes.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Button/DefaultButton/DefaultButton.styles.js\n\n\n\n\n\nvar DEFAULT_BUTTON_HEIGHT = '32px';\nvar DEFAULT_BUTTON_MIN_WIDTH = '80px';\nvar DefaultButton_styles_getStyles = memoizeFunction(function (theme, customStyles, primary) {\n    var baseButtonStyles = BaseButton_styles_getStyles(theme);\n    var splitButtonStyles = SplitButton_styles_getStyles(theme);\n    var defaultButtonStyles = {\n        root: {\n            minWidth: DEFAULT_BUTTON_MIN_WIDTH,\n            height: DEFAULT_BUTTON_HEIGHT,\n        },\n        label: {\n            fontWeight: FontWeights.semibold,\n        },\n    };\n    return concatStyleSets(baseButtonStyles, defaultButtonStyles, primary ? primaryStyles(theme) : standardStyles(theme), splitButtonStyles, customStyles);\n});\n//# sourceMappingURL=DefaultButton.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Button/DefaultButton/DefaultButton.js\n\n\n\n\n\n/**\n * {@docCategory Button}\n */\nvar DefaultButton_DefaultButton = /** @class */ (function (_super) {\n    __extends(DefaultButton, _super);\n    function DefaultButton() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DefaultButton.prototype.render = function () {\n        var _a = this.props, _b = _a.primary, primary = _b === void 0 ? false : _b, styles = _a.styles, theme = _a.theme;\n        return (react[\"createElement\"](BaseButton_BaseButton, __assign({}, this.props, { variantClassName: primary ? 'ms-Button--primary' : 'ms-Button--default', styles: DefaultButton_styles_getStyles(theme, styles, primary), onRenderDescription: nullRender })));\n    };\n    DefaultButton = __decorate([\n        customizable_customizable('DefaultButton', ['theme', 'styles'], true)\n    ], DefaultButton);\n    return DefaultButton;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=DefaultButton.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Button/PrimaryButton/PrimaryButton.js\n\n\n\n\n/**\n * {@docCategory Button}\n */\nvar PrimaryButton_PrimaryButton = /** @class */ (function (_super) {\n    __extends(PrimaryButton, _super);\n    function PrimaryButton() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PrimaryButton.prototype.render = function () {\n        return react[\"createElement\"](DefaultButton_DefaultButton, __assign({}, this.props, { primary: true, onRenderDescription: nullRender }));\n    };\n    PrimaryButton = __decorate([\n        customizable_customizable('PrimaryButton', ['theme', 'styles'], true)\n    ], PrimaryButton);\n    return PrimaryButton;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=PrimaryButton.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Separator/Separator.styles.js\nvar Separator_styles_getStyles = function (props) {\n    var theme = props.theme, alignContent = props.alignContent, vertical = props.vertical, className = props.className;\n    var alignStart = alignContent === 'start';\n    var alignCenter = alignContent === 'center';\n    var alignEnd = alignContent === 'end';\n    return {\n        root: [\n            theme.fonts.medium,\n            {\n                position: 'relative',\n            },\n            alignContent && {\n                textAlign: alignContent,\n            },\n            !alignContent && {\n                textAlign: 'center',\n            },\n            vertical &&\n                (alignCenter || !alignContent) && {\n                verticalAlign: 'middle',\n            },\n            vertical &&\n                alignStart && {\n                verticalAlign: 'top',\n            },\n            vertical &&\n                alignEnd && {\n                verticalAlign: 'bottom',\n            },\n            vertical && {\n                padding: '0 4px',\n                height: 'inherit',\n                display: 'table-cell',\n                zIndex: 1,\n                selectors: {\n                    ':after': {\n                        backgroundColor: theme.palette.neutralLighter,\n                        width: '1px',\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: '0',\n                        bottom: '0',\n                        left: '50%',\n                        right: '0',\n                        zIndex: -1,\n                    },\n                },\n            },\n            !vertical && {\n                padding: '4px 0',\n                selectors: {\n                    ':before': {\n                        backgroundColor: theme.palette.neutralLighter,\n                        height: '1px',\n                        content: '\"\"',\n                        display: 'block',\n                        position: 'absolute',\n                        top: '50%',\n                        bottom: '0',\n                        left: '0',\n                        right: '0',\n                    },\n                },\n            },\n            className,\n        ],\n        content: [\n            {\n                position: 'relative',\n                display: 'inline-block',\n                padding: '0 12px',\n                color: theme.semanticColors.bodyText,\n                background: theme.semanticColors.bodyBackground,\n            },\n            vertical && {\n                padding: '12px 0',\n            },\n        ],\n    };\n};\n//# sourceMappingURL=Separator.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Separator/Separator.base.js\n\n\nvar Separator_base_getClassNames = classNamesFunction();\nvar SeparatorBase = function (props) {\n    var styles = props.styles, theme = props.theme, className = props.className, vertical = props.vertical, alignContent = props.alignContent;\n    var _classNames = Separator_base_getClassNames(styles, {\n        theme: theme,\n        className: className,\n        alignContent: alignContent,\n        vertical: vertical,\n    });\n    return (react[\"createElement\"](\"div\", { className: _classNames.root },\n        react[\"createElement\"](\"div\", { className: _classNames.content, role: \"separator\", \"aria-orientation\": vertical ? 'vertical' : 'horizontal' }, props.children)));\n};\n//# sourceMappingURL=Separator.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Separator/Separator.js\n\n\n\nvar Separator = styled(SeparatorBase, Separator_styles_getStyles, undefined, {\n    scope: 'Separator',\n});\n//# sourceMappingURL=Separator.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Button/ActionButton/ActionButton.styles.js\n\n\n\nvar ActionButton_styles_DEFAULT_BUTTON_HEIGHT = '40px';\nvar DEFAULT_PADDING = '0 4px';\nvar ActionButton_styles_getStyles = memoizeFunction(function (theme, customStyles) {\n    var _a;\n    var baseButtonStyles = BaseButton_styles_getStyles(theme);\n    var actionButtonStyles = {\n        root: {\n            padding: DEFAULT_PADDING,\n            height: ActionButton_styles_DEFAULT_BUTTON_HEIGHT,\n            color: theme.palette.neutralPrimary,\n            backgroundColor: 'transparent',\n            border: '1px solid transparent',\n        },\n        rootHovered: {\n            color: theme.palette.themePrimary,\n            selectors: (_a = {},\n                _a[HighContrastSelector] = {\n                    borderColor: 'Highlight',\n                    color: 'Highlight',\n                },\n                _a),\n        },\n        iconHovered: {\n            color: theme.palette.themePrimary,\n        },\n        rootPressed: {\n            color: theme.palette.black,\n        },\n        rootExpanded: {\n            color: theme.palette.themePrimary,\n        },\n        iconPressed: {\n            color: theme.palette.themeDarker,\n        },\n        rootDisabled: {\n            color: theme.palette.neutralTertiary,\n            backgroundColor: 'transparent',\n            borderColor: 'transparent',\n        },\n        rootChecked: {\n            color: theme.palette.black,\n        },\n        iconChecked: {\n            color: theme.palette.themeDarker,\n        },\n        flexContainer: {\n            justifyContent: 'flex-start',\n        },\n        icon: {\n            color: theme.palette.themeDarkAlt,\n        },\n        iconDisabled: {\n            color: 'inherit',\n        },\n        menuIcon: {\n            color: theme.palette.neutralSecondary,\n        },\n        textContainer: {\n            flexGrow: 0,\n        },\n    };\n    return concatStyleSets(baseButtonStyles, actionButtonStyles, customStyles);\n});\n//# sourceMappingURL=ActionButton.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Button/ActionButton/ActionButton.js\n\n\n\n\n\n/**\n * {@docCategory Button}\n */\nvar ActionButton_ActionButton = /** @class */ (function (_super) {\n    __extends(ActionButton, _super);\n    function ActionButton() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ActionButton.prototype.render = function () {\n        var _a = this.props, styles = _a.styles, theme = _a.theme;\n        return (react[\"createElement\"](BaseButton_BaseButton, __assign({}, this.props, { variantClassName: \"ms-Button--action ms-Button--command\", styles: ActionButton_styles_getStyles(theme, styles), onRenderDescription: nullRender })));\n    };\n    ActionButton = __decorate([\n        customizable_customizable('ActionButton', ['theme', 'styles'], true)\n    ], ActionButton);\n    return ActionButton;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=ActionButton.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Nav/Nav.styles.js\n\nvar Nav_styles_GlobalClassNames = {\n    root: 'ms-Nav',\n    linkText: 'ms-Nav-linkText',\n    compositeLink: 'ms-Nav-compositeLink',\n    link: 'ms-Nav-link',\n    chevronButton: 'ms-Nav-chevronButton',\n    chevronIcon: 'ms-Nav-chevron',\n    navItem: 'ms-Nav-navItem',\n    navItems: 'ms-Nav-navItems',\n    group: 'ms-Nav-group',\n    groupContent: 'ms-Nav-groupContent',\n};\nvar buttonStyles = {\n    textContainer: {\n        overflow: 'hidden',\n    },\n    label: {\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n    },\n};\nvar Nav_styles_getStyles = function (props) {\n    var _a;\n    var className = props.className, theme = props.theme, isOnTop = props.isOnTop, isExpanded = props.isExpanded, isGroup = props.isGroup, isLink = props.isLink, isSelected = props.isSelected, isDisabled = props.isDisabled, isButtonEntry = props.isButtonEntry, _b = props.navHeight, navHeight = _b === void 0 ? 44 : _b, position = props.position, _c = props.leftPadding, leftPadding = _c === void 0 ? 20 : _c, _d = props.leftPaddingExpanded, leftPaddingExpanded = _d === void 0 ? 28 : _d, _e = props.rightPadding, rightPadding = _e === void 0 ? 20 : _e;\n    var palette = theme.palette, semanticColors = theme.semanticColors, fonts = theme.fonts;\n    var classNames = getGlobalClassNames(Nav_styles_GlobalClassNames, theme);\n    return {\n        root: [\n            classNames.root,\n            className,\n            fonts.medium,\n            {\n                overflowY: 'auto',\n                userSelect: 'none',\n                WebkitOverflowScrolling: 'touch',\n            },\n            isOnTop && [\n                {\n                    position: 'absolute',\n                },\n                AnimationClassNames.slideRightIn40,\n            ],\n        ],\n        linkText: [\n            classNames.linkText,\n            {\n                margin: '0 4px',\n                overflow: 'hidden',\n                verticalAlign: 'middle',\n                textAlign: 'left',\n                textOverflow: 'ellipsis',\n            },\n        ],\n        compositeLink: [\n            classNames.compositeLink,\n            {\n                display: 'block',\n                position: 'relative',\n                color: semanticColors.bodyText,\n            },\n            isExpanded && 'is-expanded',\n            isSelected && 'is-selected',\n            isDisabled && 'is-disabled',\n            isDisabled && {\n                color: semanticColors.disabledText,\n            },\n        ],\n        link: [\n            classNames.link,\n            getFocusStyle(theme),\n            {\n                display: 'block',\n                position: 'relative',\n                height: navHeight,\n                width: '100%',\n                lineHeight: navHeight + \"px\",\n                textDecoration: 'none',\n                cursor: 'pointer',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n                overflow: 'hidden',\n                paddingLeft: leftPadding,\n                paddingRight: rightPadding,\n                color: semanticColors.bodyText,\n                selectors: (_a = {},\n                    _a[HighContrastSelector] = {\n                        border: 0,\n                        selectors: {\n                            ':focus': {\n                                border: '1px solid WindowText',\n                            },\n                        },\n                    },\n                    _a),\n            },\n            !isDisabled && {\n                selectors: {\n                    '.ms-Nav-compositeLink:hover &': {\n                        backgroundColor: semanticColors.bodyBackgroundHovered,\n                    },\n                },\n            },\n            isSelected && {\n                color: semanticColors.bodyTextChecked,\n                fontWeight: FontWeights.semibold,\n                backgroundColor: semanticColors.bodyBackgroundChecked,\n                selectors: {\n                    '&:after': {\n                        borderLeft: \"2px solid \" + palette.themePrimary,\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        right: 0,\n                        bottom: 0,\n                        left: 0,\n                        pointerEvents: 'none',\n                    },\n                },\n            },\n            isDisabled && {\n                color: semanticColors.disabledText,\n            },\n            isButtonEntry && {\n                color: palette.themePrimary,\n            },\n        ],\n        chevronButton: [\n            classNames.chevronButton,\n            getFocusStyle(theme),\n            fonts.small,\n            {\n                display: 'block',\n                textAlign: 'left',\n                lineHeight: navHeight + \"px\",\n                margin: '5px 0',\n                padding: \"0px, \" + rightPadding + \"px, 0px, \" + leftPaddingExpanded + \"px\",\n                border: 'none',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n                overflow: 'hidden',\n                cursor: 'pointer',\n                color: semanticColors.bodyText,\n                backgroundColor: 'transparent',\n                selectors: {\n                    '&:visited': {\n                        color: semanticColors.bodyText,\n                    },\n                },\n            },\n            isGroup && {\n                fontSize: fonts.large.fontSize,\n                width: '100%',\n                height: navHeight,\n                borderBottom: \"1px solid \" + semanticColors.bodyDivider,\n            },\n            isLink && {\n                display: 'block',\n                width: leftPaddingExpanded - 2,\n                height: navHeight - 2,\n                position: 'absolute',\n                top: '1px',\n                left: position + \"px\",\n                zIndex: ZIndexes.Nav,\n                padding: 0,\n                margin: 0,\n            },\n            isSelected && {\n                color: palette.themePrimary,\n                backgroundColor: palette.neutralLighterAlt,\n                selectors: {\n                    '&:after': {\n                        borderLeft: \"2px solid \" + palette.themePrimary,\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: 0,\n                        right: 0,\n                        bottom: 0,\n                        left: 0,\n                        pointerEvents: 'none',\n                    },\n                },\n            },\n        ],\n        chevronIcon: [\n            classNames.chevronIcon,\n            {\n                position: 'absolute',\n                left: '8px',\n                height: navHeight,\n                lineHeight: navHeight + \"px\",\n                fontSize: fonts.small.fontSize,\n                transition: 'transform .1s linear',\n            },\n            isExpanded && {\n                transform: 'rotate(-180deg)',\n            },\n            isLink && {\n                top: 0,\n            },\n        ],\n        navItem: [\n            classNames.navItem,\n            {\n                padding: 0,\n            },\n        ],\n        navItems: [\n            classNames.navItems,\n            {\n                listStyleType: 'none',\n                padding: 0,\n                margin: 0,\n            },\n        ],\n        group: [classNames.group, isExpanded && 'is-expanded'],\n        groupContent: [\n            classNames.groupContent,\n            {\n                display: 'none',\n                marginBottom: '40px',\n            },\n            AnimationClassNames.slideDownIn20,\n            isExpanded && {\n                display: 'block',\n            },\n        ],\n    };\n};\n//# sourceMappingURL=Nav.styles.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/componentAs/composeComponentAs.js\n\n\n\nfunction createComposedComponent(outer) {\n    var Outer = outer;\n    var outerMemoizer = createMemoizer(function (inner) {\n        if (outer === inner) {\n            throw new Error('Attempted to compose a component with itself.');\n        }\n        var Inner = inner;\n        var innerMemoizer = createMemoizer(function (defaultRender) {\n            var InnerWithDefaultRender = function (innerProps) {\n                return react[\"createElement\"](Inner, __assign({}, innerProps, { defaultRender: defaultRender }));\n            };\n            return InnerWithDefaultRender;\n        });\n        var OuterWithDefaultRender = function (outerProps) {\n            var defaultRender = outerProps.defaultRender;\n            return react[\"createElement\"](Outer, __assign({}, outerProps, { defaultRender: defaultRender ? innerMemoizer(defaultRender) : Inner }));\n        };\n        return OuterWithDefaultRender;\n    });\n    return outerMemoizer;\n}\nvar componentAsMemoizer = createMemoizer(createComposedComponent);\n/**\n * Composes two components which conform to the `IComponentAs` specification; that is, two\n * components which accept a `defaultRender` prop, which is a 'default' implementation of\n * a component which accepts the same overall props.\n *\n * @public\n */\nfunction composeComponentAs(outer, inner) {\n    return componentAsMemoizer(outer)(inner);\n}\n//# sourceMappingURL=composeComponentAs.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/renderFunction/composeRenderFunction.js\n\nfunction createComposedRenderFunction(outer) {\n    var outerMemoizer = createMemoizer(function (inner) {\n        var innerMemoizer = createMemoizer(function (defaultRender) {\n            return function (innerProps) {\n                return inner(innerProps, defaultRender);\n            };\n        });\n        return function (outerProps, defaultRender) {\n            return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);\n        };\n    });\n    return outerMemoizer;\n}\nvar memoizer = createMemoizer(createComposedRenderFunction);\n/**\n * Composes two 'render functions' to produce a final render function that renders\n * the outer function, passing the inner function as 'default render'. The inner function\n * is then passed the original 'default render' prop.\n * @public\n */\nfunction composeRenderFunction(outer, inner) {\n    return memoizer(outer)(inner);\n}\n//# sourceMappingURL=composeRenderFunction.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Nav/Nav.base.js\n\n\n\n\n\n\n\n\n// The number pixels per indentation level for Nav links.\nvar _indentationSize = 14;\n// The number of pixels of left margin\nvar _baseIndent = 3;\n// global var used in _isLinkSelectedKey\nvar _urlResolver;\nfunction isRelativeUrl(url) {\n    // A URL is relative if it has no protocol.\n    return !!url && !/^[a-z0-9+-.]+:\\/\\//i.test(url);\n}\nvar Nav_base_getClassNames = classNamesFunction();\nvar Nav_base_NavBase = /** @class */ (function (_super) {\n    __extends(NavBase, _super);\n    function NavBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._focusZone = react[\"createRef\"]();\n        _this._onRenderLink = function (link) {\n            var _a = _this.props, styles = _a.styles, groups = _a.groups, theme = _a.theme;\n            var classNames = Nav_base_getClassNames(styles, { theme: theme, groups: groups });\n            return react[\"createElement\"](\"div\", { className: classNames.linkText }, link.name);\n        };\n        _this._renderGroup = function (group, groupIndex) {\n            var _a = _this.props, styles = _a.styles, groups = _a.groups, theme = _a.theme, _b = _a.onRenderGroupHeader, onRenderGroupHeader = _b === void 0 ? _this._renderGroupHeader : _b;\n            var isExpanded = _this._isGroupExpanded(group);\n            var classNames = Nav_base_getClassNames(styles, {\n                theme: theme,\n                isGroup: true,\n                isExpanded: isExpanded,\n                groups: groups,\n            });\n            var finalOnHeaderClick = function (ev, isCollapsing) {\n                _this._onGroupHeaderClicked(group, ev);\n            };\n            var groupProps = __assign(__assign({}, group), { isExpanded: isExpanded, onHeaderClick: finalOnHeaderClick });\n            return (react[\"createElement\"](\"div\", { key: groupIndex, className: classNames.group },\n                groupProps.name ? onRenderGroupHeader(groupProps, _this._renderGroupHeader) : null,\n                react[\"createElement\"](\"div\", { className: classNames.groupContent }, _this._renderLinks(groupProps.links, 0 /* nestingLevel */))));\n        };\n        _this._renderGroupHeader = function (group) {\n            // eslint-disable-next-line deprecation/deprecation\n            var _a = _this.props, styles = _a.styles, groups = _a.groups, theme = _a.theme, expandButtonAriaLabel = _a.expandButtonAriaLabel;\n            var isExpanded = group.isExpanded;\n            var classNames = Nav_base_getClassNames(styles, {\n                theme: theme,\n                isGroup: true,\n                isExpanded: isExpanded,\n                groups: groups,\n            });\n            var label = (isExpanded ? group.collapseAriaLabel : group.expandAriaLabel) || expandButtonAriaLabel;\n            var onHeaderClick = group.onHeaderClick;\n            var onClick = onHeaderClick\n                ? function (ev) {\n                    onHeaderClick(ev, isExpanded);\n                }\n                : undefined;\n            return (react[\"createElement\"](\"button\", { className: classNames.chevronButton, onClick: onClick, \"aria-label\": label, \"aria-expanded\": isExpanded },\n                react[\"createElement\"](Icon, { className: classNames.chevronIcon, iconName: \"ChevronDown\" }),\n                group.name));\n        };\n        initializeComponentRef(_this);\n        _this.state = {\n            isGroupCollapsed: {},\n            // TODO: consider removing\n            // eslint-disable-next-line react/no-unused-state\n            isLinkExpandStateChanged: false,\n            selectedKey: props.initialSelectedKey || props.selectedKey,\n        };\n        return _this;\n    }\n    NavBase.prototype.render = function () {\n        var _a = this.props, styles = _a.styles, groups = _a.groups, className = _a.className, isOnTop = _a.isOnTop, theme = _a.theme;\n        if (!groups) {\n            return null;\n        }\n        var groupElements = groups.map(this._renderGroup);\n        var classNames = Nav_base_getClassNames(styles, { theme: theme, className: className, isOnTop: isOnTop, groups: groups });\n        return (react[\"createElement\"](FocusZone_FocusZone, { direction: FocusZoneDirection.vertical, componentRef: this._focusZone },\n            react[\"createElement\"](\"nav\", { role: \"navigation\", className: classNames.root, \"aria-label\": this.props.ariaLabel }, groupElements)));\n    };\n    Object.defineProperty(NavBase.prototype, \"selectedKey\", {\n        get: function () {\n            return this.state.selectedKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets focus to the first tabbable item in the zone.\n     * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n     * if focus is already in the focus zone.\n     * @returns True if focus could be set to an active element, false if no operation was taken.\n     */\n    NavBase.prototype.focus = function (forceIntoFirstElement) {\n        if (forceIntoFirstElement === void 0) { forceIntoFirstElement = false; }\n        if (this._focusZone && this._focusZone.current) {\n            return this._focusZone.current.focus(forceIntoFirstElement);\n        }\n        return false;\n    };\n    NavBase.prototype._renderNavLink = function (link, linkIndex, nestingLevel) {\n        var _a = this.props, styles = _a.styles, groups = _a.groups, theme = _a.theme;\n        var isLinkWithIcon = link.icon || link.iconProps;\n        var isSelectedLink = this._isLinkSelected(link);\n        var _b = link.ariaCurrent, ariaCurrent = _b === void 0 ? 'page' : _b;\n        var classNames = Nav_base_getClassNames(styles, {\n            theme: theme,\n            isSelected: isSelectedLink,\n            isDisabled: link.disabled,\n            isButtonEntry: link.onClick && !link.forceAnchor,\n            leftPadding: _indentationSize * nestingLevel + _baseIndent + (isLinkWithIcon ? 0 : 24),\n            groups: groups,\n        });\n        // Prevent hijacking of the parent window if link.target is defined\n        var rel = link.url && link.target && !isRelativeUrl(link.url) ? 'noopener noreferrer' : undefined;\n        var LinkAs = this.props.linkAs ? composeComponentAs(this.props.linkAs, ActionButton_ActionButton) : ActionButton_ActionButton;\n        var onRenderLink = this.props.onRenderLink\n            ? composeRenderFunction(this.props.onRenderLink, this._onRenderLink)\n            : this._onRenderLink;\n        return (react[\"createElement\"](LinkAs, { className: classNames.link, styles: buttonStyles, href: link.url || (link.forceAnchor ? '#' : undefined), iconProps: link.iconProps || { iconName: link.icon }, \n            // eslint-disable-next-line react/jsx-no-bind\n            onClick: link.onClick ? this._onNavButtonLinkClicked.bind(this, link) : this._onNavAnchorLinkClicked.bind(this, link), title: link.title !== undefined ? link.title : link.name, target: link.target, rel: rel, disabled: link.disabled, \"aria-current\": isSelectedLink ? ariaCurrent : undefined, \"aria-label\": link.ariaLabel ? link.ariaLabel : undefined, link: link }, onRenderLink(link)));\n    };\n    NavBase.prototype._renderCompositeLink = function (link, linkIndex, nestingLevel) {\n        var divProps = __assign({}, getNativeProps(link, divProperties, ['onClick']));\n        // eslint-disable-next-line deprecation/deprecation\n        var _a = this.props, expandButtonAriaLabel = _a.expandButtonAriaLabel, styles = _a.styles, groups = _a.groups, theme = _a.theme;\n        var classNames = Nav_base_getClassNames(styles, {\n            theme: theme,\n            isExpanded: !!link.isExpanded,\n            isSelected: this._isLinkSelected(link),\n            isLink: true,\n            isDisabled: link.disabled,\n            position: _indentationSize * nestingLevel + 1,\n            groups: groups,\n        });\n        var finalExpandBtnAriaLabel = '';\n        if (link.links && link.links.length > 0) {\n            if (link.collapseAriaLabel || link.expandAriaLabel) {\n                finalExpandBtnAriaLabel = link.isExpanded ? link.collapseAriaLabel : link.expandAriaLabel;\n            }\n            else {\n                // TODO remove when `expandButtonAriaLabel` is removed. This is not an ideal concatenation for localization.\n                finalExpandBtnAriaLabel = expandButtonAriaLabel ? link.name + \" \" + expandButtonAriaLabel : link.name;\n            }\n        }\n        return (react[\"createElement\"](\"div\", __assign({}, divProps, { key: link.key || linkIndex, className: classNames.compositeLink }),\n            link.links && link.links.length > 0 ? (react[\"createElement\"](\"button\", { className: classNames.chevronButton, onClick: this._onLinkExpandClicked.bind(this, link), \"aria-label\": finalExpandBtnAriaLabel, \"aria-expanded\": link.isExpanded ? 'true' : 'false' },\n                react[\"createElement\"](Icon, { className: classNames.chevronIcon, iconName: \"ChevronDown\" }))) : null,\n            this._renderNavLink(link, linkIndex, nestingLevel)));\n    };\n    NavBase.prototype._renderLink = function (link, linkIndex, nestingLevel) {\n        var _a = this.props, styles = _a.styles, groups = _a.groups, theme = _a.theme;\n        var classNames = Nav_base_getClassNames(styles, { theme: theme, groups: groups });\n        return (react[\"createElement\"](\"li\", { key: link.key || linkIndex, role: \"listitem\", className: classNames.navItem },\n            this._renderCompositeLink(link, linkIndex, nestingLevel),\n            link.isExpanded ? this._renderLinks(link.links, ++nestingLevel) : null));\n    };\n    NavBase.prototype._renderLinks = function (links, nestingLevel) {\n        var _this = this;\n        if (!links || !links.length) {\n            return null;\n        }\n        var linkElements = links.map(function (link, linkIndex) {\n            return _this._renderLink(link, linkIndex, nestingLevel);\n        });\n        var _a = this.props, styles = _a.styles, groups = _a.groups, theme = _a.theme;\n        var classNames = Nav_base_getClassNames(styles, { theme: theme, groups: groups });\n        return (react[\"createElement\"](\"ul\", { role: \"list\", className: classNames.navItems }, linkElements));\n    };\n    NavBase.prototype._onGroupHeaderClicked = function (group, ev) {\n        if (group.onHeaderClick) {\n            group.onHeaderClick(ev, this._isGroupExpanded(group));\n        }\n        this._toggleCollapsed(group);\n        if (ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n        }\n    };\n    NavBase.prototype._onLinkExpandClicked = function (link, ev) {\n        var onLinkExpandClick = this.props.onLinkExpandClick;\n        if (onLinkExpandClick) {\n            onLinkExpandClick(ev, link);\n        }\n        if (!ev.defaultPrevented) {\n            link.isExpanded = !link.isExpanded;\n            // eslint-disable-next-line react/no-unused-state\n            this.setState({ isLinkExpandStateChanged: true });\n        }\n        ev.preventDefault();\n        ev.stopPropagation();\n    };\n    NavBase.prototype._preventBounce = function (link, ev) {\n        if (!link.url && link.forceAnchor) {\n            ev.preventDefault();\n        }\n    };\n    NavBase.prototype._onNavAnchorLinkClicked = function (link, ev) {\n        // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n        this._preventBounce(link, ev);\n        if (this.props.onLinkClick) {\n            this.props.onLinkClick(ev, link);\n        }\n        if (!link.url && link.links && link.links.length > 0) {\n            this._onLinkExpandClicked(link, ev);\n        }\n        this.setState({ selectedKey: link.key });\n    };\n    NavBase.prototype._onNavButtonLinkClicked = function (link, ev) {\n        // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n        this._preventBounce(link, ev);\n        if (link.onClick) {\n            link.onClick(ev, link);\n        }\n        if (!link.url && link.links && link.links.length > 0) {\n            this._onLinkExpandClicked(link, ev);\n        }\n        this.setState({ selectedKey: link.key });\n    };\n    NavBase.prototype._isLinkSelected = function (link) {\n        // if caller passes in selectedKey, use it as first choice or\n        // if current state.selectedKey (from addressbar) is match to the link or\n        // check if URL is matching location.href (if link.url exists)\n        if (this.props.selectedKey !== undefined) {\n            return link.key === this.props.selectedKey;\n        }\n        else if (this.state.selectedKey !== undefined) {\n            return link.key === this.state.selectedKey;\n        }\n        else if (typeof getWindow() === 'undefined' || !link.url) {\n            // resolve is not supported for ssr\n            return false;\n        }\n        else {\n            // If selectedKey is undefined in props and state, then check URL\n            _urlResolver = _urlResolver || document.createElement('a');\n            _urlResolver.href = link.url || '';\n            var target = _urlResolver.href;\n            if (location.href === target) {\n                return true;\n            }\n            // If selectedKey is not defined in state, then check URL to determine link selected status\n            if (location.protocol + '//' + location.host + location.pathname === target) {\n                return true;\n            }\n            if (location.hash) {\n                // Match the hash to the url.\n                if (location.hash === link.url) {\n                    return true;\n                }\n                // Match a rebased url. (e.g. #foo becomes http://hostname/foo)\n                _urlResolver.href = location.hash.substring(1);\n                return _urlResolver.href === target;\n            }\n        }\n        return false;\n    };\n    NavBase.prototype._isGroupExpanded = function (group) {\n        if (group.name && this.state.isGroupCollapsed.hasOwnProperty(group.name)) {\n            return !this.state.isGroupCollapsed[group.name];\n        }\n        if (group.collapseByDefault !== undefined) {\n            return !group.collapseByDefault;\n        }\n        return true;\n    };\n    NavBase.prototype._toggleCollapsed = function (group) {\n        var _a;\n        if (group.name) {\n            var newGroupCollapsed = __assign(__assign({}, this.state.isGroupCollapsed), (_a = {}, _a[group.name] = this._isGroupExpanded(group), _a));\n            this.setState({ isGroupCollapsed: newGroupCollapsed });\n        }\n    };\n    NavBase.defaultProps = {\n        groups: null,\n    };\n    return NavBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=Nav.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Nav/Nav.js\n\n\n\nvar Nav = styled(Nav_base_NavBase, Nav_styles_getStyles, undefined, {\n    scope: 'Nav',\n});\n//# sourceMappingURL=Nav.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Link/Link.base.js\n\n\n\n\nvar Link_base_getClassNames = classNamesFunction();\nvar Link_base_LinkBase = /** @class */ (function (_super) {\n    __extends(LinkBase, _super);\n    function LinkBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._link = react[\"createRef\"]();\n        _this._renderContent = function (keytipAttributes) {\n            if (keytipAttributes === void 0) { keytipAttributes = {}; }\n            var _a = _this.props, disabled = _a.disabled, children = _a.children, className = _a.className, href = _a.href, theme = _a.theme, styles = _a.styles;\n            var classNames = Link_base_getClassNames(styles, {\n                className: className,\n                isButton: !href,\n                isDisabled: disabled,\n                theme: theme,\n            });\n            var RootType = _this._getRootType(_this.props);\n            return (react[\"createElement\"](RootType, __assign({}, keytipAttributes, _this._adjustPropsForRootType(RootType, _this.props), { className: classNames.root, onClick: _this._onClick, ref: _this._link, \"aria-disabled\": disabled }), children));\n        };\n        _this._onClick = function (ev) {\n            var _a = _this.props, onClick = _a.onClick, disabled = _a.disabled;\n            if (disabled) {\n                ev.preventDefault();\n            }\n            else if (onClick) {\n                onClick(ev);\n            }\n        };\n        initializeComponentRef(_this);\n        return _this;\n    }\n    LinkBase.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, disabled = _a.disabled, keytipProps = _a.keytipProps;\n        if (keytipProps) {\n            return (react[\"createElement\"](KeytipData, { keytipProps: keytipProps, ariaDescribedBy: this.props['aria-describedby'], disabled: disabled }, function (keytipAttributes) { return _this._renderContent(keytipAttributes); }));\n        }\n        return this._renderContent();\n    };\n    LinkBase.prototype.focus = function () {\n        var current = this._link.current;\n        if (current && current.focus) {\n            current.focus();\n        }\n    };\n    LinkBase.prototype._adjustPropsForRootType = function (RootType, props) {\n        // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n        // as those will always be removed. We also take some props that are optional\n        // based on the RootType.\n        var children = props.children, as = props.as, disabled = props.disabled, target = props.target, href = props.href, theme = props.theme, getStyles = props.getStyles, styles = props.styles, componentRef = props.componentRef, keytipProps = props.keytipProps, restProps = __rest(props, [\"children\", \"as\", \"disabled\", \"target\", \"href\", \"theme\", \"getStyles\", \"styles\", \"componentRef\", \"keytipProps\"]);\n        // RootType will be a string if we're dealing with an html component\n        if (typeof RootType === 'string') {\n            // Remove the disabled prop for anchor elements\n            if (RootType === 'a') {\n                return __assign({ target: target, href: disabled ? undefined : href }, restProps);\n            }\n            // Add the type='button' prop for button elements\n            if (RootType === 'button') {\n                return __assign({ type: 'button', disabled: disabled }, restProps);\n            }\n            // Remove the target and href props for all other non anchor elements\n            return __assign(__assign({}, restProps), { disabled: disabled });\n        }\n        // Retain all props except 'as' for ReactComponents\n        return __assign({ target: target, href: href, disabled: disabled }, restProps);\n    };\n    LinkBase.prototype._getRootType = function (props) {\n        if (props.as) {\n            return props.as;\n        }\n        if (props.href) {\n            return 'a';\n        }\n        return 'button';\n    };\n    return LinkBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=Link.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Link/Link.styles.js\n\n\nvar Link_styles_GlobalClassNames = {\n    root: 'ms-Link',\n};\nvar Link_styles_getStyles = function (props) {\n    var _a, _b, _c, _d, _e;\n    var className = props.className, isButton = props.isButton, isDisabled = props.isDisabled, theme = props.theme;\n    var semanticColors = theme.semanticColors;\n    // Tokens\n    var linkColor = semanticColors.link;\n    var linkInteractedColor = semanticColors.linkHovered;\n    var linkDisabledColor = semanticColors.disabledText;\n    var focusBorderColor = semanticColors.focusBorder;\n    var classNames = getGlobalClassNames(Link_styles_GlobalClassNames, theme);\n    return {\n        root: [\n            classNames.root,\n            theme.fonts.medium,\n            {\n                color: linkColor,\n                outline: 'none',\n                fontSize: 'inherit',\n                fontWeight: 'inherit',\n                textDecoration: 'none',\n                selectors: (_a = {\n                        '.ms-Fabric--isFocusVisible &:focus': {\n                            // Can't use getFocusStyle because it doesn't support wrapping links\n                            // https://github.com/microsoft/fluentui/issues/4883#issuecomment-406743543\n                            // Using box-shadow and outline allows the focus rect to wrap links that span multiple lines\n                            // and helps the focus rect avoid getting clipped.\n                            boxShadow: \"0 0 0 1px \" + focusBorderColor + \" inset\",\n                            outline: \"1px auto \" + focusBorderColor,\n                            selectors: (_b = {},\n                                _b[HighContrastSelector] = {\n                                    outline: '1px solid WindowText',\n                                },\n                                _b),\n                        }\n                    },\n                    _a[HighContrastSelector] = {\n                        // For IE high contrast mode\n                        borderBottom: 'none',\n                    },\n                    _a),\n            },\n            isButton && {\n                background: 'none',\n                backgroundColor: 'transparent',\n                border: 'none',\n                cursor: 'pointer',\n                display: 'inline',\n                margin: 0,\n                overflow: 'inherit',\n                padding: 0,\n                textAlign: 'left',\n                textOverflow: 'inherit',\n                userSelect: 'text',\n                borderBottom: '1px solid transparent',\n                selectors: __assign((_c = {}, _c[HighContrastSelectorBlack] = {\n                    color: '#FFFF00',\n                }, _c[HighContrastSelectorWhite] = {\n                    color: '#00009F',\n                }, _c), getEdgeChromiumNoHighContrastAdjustSelector()),\n            },\n            !isButton && {\n                selectors: (_d = {},\n                    _d[HighContrastSelector] = {\n                        // This is mainly for MessageBar, which sets MsHighContrastAdjust: none by default\n                        MsHighContrastAdjust: 'auto',\n                    },\n                    _d),\n            },\n            isDisabled && [\n                'is-disabled',\n                {\n                    color: linkDisabledColor,\n                    cursor: 'default',\n                },\n                {\n                    selectors: {\n                        '&:link, &:visited': {\n                            pointerEvents: 'none',\n                        },\n                    },\n                },\n            ],\n            !isDisabled && {\n                selectors: {\n                    '&:active, &:hover, &:active:hover': {\n                        color: linkInteractedColor,\n                        textDecoration: 'underline',\n                        selectors: (_e = {},\n                            _e[HighContrastSelectorBlack] = {\n                                color: '#FFFF00',\n                            },\n                            _e[HighContrastSelectorWhite] = {\n                                color: '#00009F',\n                            },\n                            _e),\n                    },\n                    '&:focus': {\n                        color: linkColor,\n                    },\n                },\n            },\n            classNames.root,\n            className,\n        ],\n    };\n};\n//# sourceMappingURL=Link.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Link/Link.js\n\n\n\nvar Link = styled(Link_base_LinkBase, Link_styles_getStyles, undefined, {\n    scope: 'Link',\n});\n//# sourceMappingURL=Link.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/DelayedRender.js\n\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nvar DelayedRender_DelayedRender = /** @class */ (function (_super) {\n    __extends(DelayedRender, _super);\n    function DelayedRender(props) {\n        var _this = _super.call(this, props) || this;\n        _this.state = {\n            isRendered: false,\n        };\n        return _this;\n    }\n    DelayedRender.prototype.componentDidMount = function () {\n        var _this = this;\n        var delay = this.props.delay;\n        this._timeoutId = window.setTimeout(function () {\n            _this.setState({\n                isRendered: true,\n            });\n        }, delay);\n    };\n    DelayedRender.prototype.componentWillUnmount = function () {\n        if (this._timeoutId) {\n            clearTimeout(this._timeoutId);\n        }\n    };\n    DelayedRender.prototype.render = function () {\n        return this.state.isRendered ? react[\"Children\"].only(this.props.children) : null;\n    };\n    DelayedRender.defaultProps = {\n        delay: 0,\n    };\n    return DelayedRender;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=DelayedRender.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Button/IconButton/IconButton.styles.js\n\n\n\n\nvar IconButton_styles_getStyles = memoizeFunction(function (theme, customStyles) {\n    var _a;\n    var baseButtonStyles = BaseButton_styles_getStyles(theme);\n    var splitButtonStyles = SplitButton_styles_getStyles(theme);\n    var palette = theme.palette, semanticColors = theme.semanticColors;\n    var iconButtonStyles = {\n        root: {\n            padding: '0 4px',\n            width: '32px',\n            height: '32px',\n            backgroundColor: 'transparent',\n            border: 'none',\n            color: semanticColors.link,\n        },\n        rootHovered: {\n            color: palette.themeDarkAlt,\n            backgroundColor: palette.neutralLighter,\n            selectors: (_a = {},\n                _a[HighContrastSelector] = {\n                    borderColor: 'Highlight',\n                    color: 'Highlight',\n                },\n                _a),\n        },\n        rootHasMenu: {\n            width: 'auto',\n        },\n        rootPressed: {\n            color: palette.themeDark,\n            backgroundColor: palette.neutralLight,\n        },\n        rootExpanded: {\n            color: palette.themeDark,\n            backgroundColor: palette.neutralLight,\n        },\n        rootChecked: {\n            color: palette.themeDark,\n            backgroundColor: palette.neutralLight,\n        },\n        rootCheckedHovered: {\n            color: palette.themeDark,\n            backgroundColor: palette.neutralQuaternaryAlt,\n        },\n        rootDisabled: {\n            color: palette.neutralTertiaryAlt,\n        },\n    };\n    return concatStyleSets(baseButtonStyles, iconButtonStyles, splitButtonStyles, customStyles);\n});\n//# sourceMappingURL=IconButton.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Button/IconButton/IconButton.js\n\n\n\n\n\n/**\n * {@docCategory Button}\n */\nvar IconButton_IconButton = /** @class */ (function (_super) {\n    __extends(IconButton, _super);\n    function IconButton() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    IconButton.prototype.render = function () {\n        var _a = this.props, styles = _a.styles, theme = _a.theme;\n        return (react[\"createElement\"](BaseButton_BaseButton, __assign({}, this.props, { variantClassName: \"ms-Button--icon\", styles: IconButton_styles_getStyles(theme, styles), onRenderText: nullRender, onRenderDescription: nullRender })));\n    };\n    IconButton = __decorate([\n        customizable_customizable('IconButton', ['theme', 'styles'], true)\n    ], IconButton);\n    return IconButton;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=IconButton.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/MessageBar/MessageBar.types.js\n/**\n * {@docCategory MessageBar}\n */\nvar MessageBarType;\n(function (MessageBarType) {\n    /** Info styled MessageBar */\n    MessageBarType[MessageBarType[\"info\"] = 0] = \"info\";\n    /** Error styled MessageBar */\n    MessageBarType[MessageBarType[\"error\"] = 1] = \"error\";\n    /** Blocked styled MessageBar */\n    MessageBarType[MessageBarType[\"blocked\"] = 2] = \"blocked\";\n    /** SevereWarning styled MessageBar */\n    MessageBarType[MessageBarType[\"severeWarning\"] = 3] = \"severeWarning\";\n    /** Success styled MessageBar */\n    MessageBarType[MessageBarType[\"success\"] = 4] = \"success\";\n    /** Warning styled MessageBar */\n    MessageBarType[MessageBarType[\"warning\"] = 5] = \"warning\";\n})(MessageBarType || (MessageBarType = {}));\n//# sourceMappingURL=MessageBar.types.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/MessageBar/MessageBar.base.js\n\n\n\n\n\n\nvar MessageBar_base_getClassNames = classNamesFunction();\nvar MessageBar_base_MessageBarBase = /** @class */ (function (_super) {\n    __extends(MessageBarBase, _super);\n    function MessageBarBase(props) {\n        var _a;\n        var _this = _super.call(this, props) || this;\n        _this.ICON_MAP = (_a = {},\n            _a[MessageBarType.info] = 'Info',\n            _a[MessageBarType.warning] = 'Info',\n            _a[MessageBarType.error] = 'ErrorBadge',\n            _a[MessageBarType.blocked] = 'Blocked2',\n            _a[MessageBarType.severeWarning] = 'Warning',\n            _a[MessageBarType.success] = 'Completed',\n            _a);\n        _this._getRegionProps = function () {\n            var hasActions = !!_this._getActionsDiv() || !!_this._getDismissDiv();\n            var regionProps = {\n                'aria-describedby': _this.state.labelId,\n                role: 'region',\n            };\n            return hasActions ? regionProps : {};\n        };\n        _this._onClick = function (ev) {\n            _this.setState({ expandSingleLine: !_this.state.expandSingleLine });\n        };\n        initializeComponentRef(_this);\n        _this.state = {\n            labelId: getId('MessageBar'),\n            // eslint-disable-next-line react/no-unused-state\n            showContent: false,\n            expandSingleLine: false,\n        };\n        return _this;\n    }\n    MessageBarBase.prototype.render = function () {\n        var isMultiline = this.props.isMultiline;\n        this._classNames = this._getClassNames();\n        return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\n    };\n    MessageBarBase.prototype._getActionsDiv = function () {\n        if (this.props.actions) {\n            return react[\"createElement\"](\"div\", { className: this._classNames.actions }, this.props.actions);\n        }\n        return null;\n    };\n    MessageBarBase.prototype._getDismissDiv = function () {\n        var _a = this.props, onDismiss = _a.onDismiss, dismissIconProps = _a.dismissIconProps;\n        if (onDismiss) {\n            return (react[\"createElement\"](IconButton_IconButton, { disabled: false, className: this._classNames.dismissal, onClick: onDismiss, iconProps: dismissIconProps ? dismissIconProps : { iconName: 'Clear' }, title: this.props.dismissButtonAriaLabel, ariaLabel: this.props.dismissButtonAriaLabel }));\n        }\n        return null;\n    };\n    MessageBarBase.prototype._getDismissSingleLine = function () {\n        if (this.props.onDismiss) {\n            return react[\"createElement\"](\"div\", { className: this._classNames.dismissSingleLine }, this._getDismissDiv());\n        }\n        return null;\n    };\n    MessageBarBase.prototype._getExpandSingleLine = function () {\n        if (!this.props.actions && this.props.truncated) {\n            return (react[\"createElement\"](\"div\", { className: this._classNames.expandSingleLine },\n                react[\"createElement\"](IconButton_IconButton, { disabled: false, className: this._classNames.expand, onClick: this._onClick, iconProps: { iconName: this.state.expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' }, ariaLabel: this.props.overflowButtonAriaLabel, \"aria-expanded\": this.state.expandSingleLine })));\n        }\n        return null;\n    };\n    MessageBarBase.prototype._getIconSpan = function () {\n        var messageBarIconProps = this.props.messageBarIconProps;\n        return (react[\"createElement\"](\"div\", { className: this._classNames.iconContainer, \"aria-hidden\": true }, messageBarIconProps ? (react[\"createElement\"](Icon, __assign({}, messageBarIconProps, { className: css(this._classNames.icon, messageBarIconProps.className) }))) : (react[\"createElement\"](Icon, { iconName: this.ICON_MAP[this.props.messageBarType], className: this._classNames.icon }))));\n    };\n    MessageBarBase.prototype._renderMultiLine = function () {\n        return (react[\"createElement\"](\"div\", __assign({ className: this._classNames.root }, this._getRegionProps()),\n            react[\"createElement\"](\"div\", { className: this._classNames.content },\n                this._getIconSpan(),\n                this._renderInnerText(),\n                this._getDismissDiv()),\n            this._getActionsDiv()));\n    };\n    MessageBarBase.prototype._renderSingleLine = function () {\n        return (react[\"createElement\"](\"div\", __assign({ className: this._classNames.root }, this._getRegionProps()),\n            react[\"createElement\"](\"div\", { className: this._classNames.content },\n                this._getIconSpan(),\n                this._renderInnerText(),\n                this._getExpandSingleLine(),\n                this._getActionsDiv(),\n                this._getDismissSingleLine())));\n    };\n    MessageBarBase.prototype._renderInnerText = function () {\n        var nativeProps = getNativeProps(this.props, htmlElementProperties, [\n            'className',\n        ]);\n        return (react[\"createElement\"](\"div\", { className: this._classNames.text, id: this.state.labelId, role: \"status\", \"aria-live\": this._getAnnouncementPriority() },\n            react[\"createElement\"](\"span\", __assign({ className: this._classNames.innerText }, nativeProps),\n                react[\"createElement\"](DelayedRender_DelayedRender, null,\n                    react[\"createElement\"](\"span\", null, this.props.children)))));\n    };\n    MessageBarBase.prototype._getClassNames = function () {\n        var _a = this.props, theme = _a.theme, className = _a.className, messageBarType = _a.messageBarType, onDismiss = _a.onDismiss, actions = _a.actions, truncated = _a.truncated, isMultiline = _a.isMultiline;\n        var expandSingleLine = this.state.expandSingleLine;\n        return MessageBar_base_getClassNames(this.props.styles, {\n            theme: theme,\n            messageBarType: messageBarType || MessageBarType.info,\n            onDismiss: onDismiss !== undefined,\n            actions: actions !== undefined,\n            truncated: truncated,\n            isMultiline: isMultiline,\n            expandSingleLine: expandSingleLine,\n            className: className,\n        });\n    };\n    MessageBarBase.prototype._getAnnouncementPriority = function () {\n        switch (this.props.messageBarType) {\n            case MessageBarType.blocked:\n            case MessageBarType.error:\n            case MessageBarType.severeWarning:\n                return 'assertive';\n        }\n        return 'polite';\n    };\n    MessageBarBase.defaultProps = {\n        messageBarType: MessageBarType.info,\n        onDismiss: undefined,\n        isMultiline: true,\n    };\n    return MessageBarBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=MessageBar.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/MessageBar/MessageBar.styles.js\nvar MessageBar_styles_a, MessageBar_styles_b, MessageBar_styles_c;\n\n\n\nvar MessageBar_styles_GlobalClassNames = {\n    root: 'ms-MessageBar',\n    error: 'ms-MessageBar--error',\n    blocked: 'ms-MessageBar--blocked',\n    severeWarning: 'ms-MessageBar--severeWarning',\n    success: 'ms-MessageBar--success',\n    warning: 'ms-MessageBar--warning',\n    multiline: 'ms-MessageBar-multiline',\n    singleline: 'ms-MessageBar-singleline',\n    dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n    expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n    content: 'ms-MessageBar-content',\n    iconContainer: 'ms-MessageBar-icon',\n    text: 'ms-MessageBar-text',\n    innerText: 'ms-MessageBar-innerText',\n    dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n    expandSingleLine: 'ms-MessageBar-expandSingleLine',\n    dismissal: 'ms-MessageBar-dismissal',\n    expand: 'ms-MessageBar-expand',\n    actions: 'ms-MessageBar-actions',\n    actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\nvar MessageBar_styles_backgroundColor = (MessageBar_styles_a = {},\n    MessageBar_styles_a[MessageBarType.error] = 'errorBackground',\n    MessageBar_styles_a[MessageBarType.blocked] = 'errorBackground',\n    MessageBar_styles_a[MessageBarType.success] = 'successBackground',\n    MessageBar_styles_a[MessageBarType.warning] = 'warningBackground',\n    MessageBar_styles_a[MessageBarType.severeWarning] = 'severeWarningBackground',\n    MessageBar_styles_a[MessageBarType.info] = 'infoBackground',\n    MessageBar_styles_a);\nvar highContrastBackgroundColor = (MessageBar_styles_b = {},\n    MessageBar_styles_b[MessageBarType.error] = 'rgba(255, 0, 0, 0.3)',\n    MessageBar_styles_b[MessageBarType.blocked] = 'rgba(255, 0, 0, 0.3)',\n    MessageBar_styles_b[MessageBarType.success] = 'rgba(48, 241, 73, 0.3)',\n    MessageBar_styles_b[MessageBarType.warning] = 'rgba(255, 254, 57, 0.3)',\n    MessageBar_styles_b[MessageBarType.severeWarning] = 'rgba(255, 0, 0, 0.3)',\n    MessageBar_styles_b[MessageBarType.info] = 'Window',\n    MessageBar_styles_b);\nvar iconColor = (MessageBar_styles_c = {},\n    MessageBar_styles_c[MessageBarType.error] = 'errorIcon',\n    MessageBar_styles_c[MessageBarType.blocked] = 'errorIcon',\n    MessageBar_styles_c[MessageBarType.success] = 'successIcon',\n    MessageBar_styles_c[MessageBarType.warning] = 'warningIcon',\n    MessageBar_styles_c[MessageBarType.severeWarning] = 'severeWarningIcon',\n    MessageBar_styles_c[MessageBarType.info] = 'infoIcon',\n    MessageBar_styles_c);\nvar MessageBar_styles_getStyles = function (props) {\n    var _a, _b, _c, _d, _e;\n    var theme = props.theme, className = props.className, onDismiss = props.onDismiss, truncated = props.truncated, isMultiline = props.isMultiline, expandSingleLine = props.expandSingleLine, _f = props.messageBarType, messageBarType = _f === void 0 ? MessageBarType.info : _f;\n    var semanticColors = theme.semanticColors, fonts = theme.fonts;\n    var SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n    var classNames = getGlobalClassNames(MessageBar_styles_GlobalClassNames, theme);\n    var dismissalAndExpandIconStyle = {\n        fontSize: IconFontSizes.xSmall,\n        height: 10,\n        lineHeight: '10px',\n        color: semanticColors.messageText,\n        selectors: (_a = {},\n            _a[HighContrastSelector] = {\n                MsHighContrastAdjust: 'none',\n                color: 'WindowText',\n            },\n            _a),\n    };\n    var dismissalAndExpandStyle = [\n        getFocusStyle(theme, {\n            inset: 1,\n            highContrastStyle: {\n                outlineOffset: '-6px',\n                outline: '1px solid Highlight',\n            },\n            borderColor: 'transparent',\n        }),\n        {\n            flexShrink: 0,\n            width: 32,\n            height: 32,\n            padding: '8px 12px',\n            selectors: {\n                '& .ms-Button-icon': dismissalAndExpandIconStyle,\n                ':hover': {\n                    backgroundColor: 'transparent',\n                },\n                ':active': {\n                    backgroundColor: 'transparent',\n                },\n            },\n        },\n    ];\n    return {\n        root: [\n            classNames.root,\n            fonts.medium,\n            messageBarType === MessageBarType.error && classNames.error,\n            messageBarType === MessageBarType.blocked && classNames.blocked,\n            messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n            messageBarType === MessageBarType.success && classNames.success,\n            messageBarType === MessageBarType.warning && classNames.warning,\n            isMultiline ? classNames.multiline : classNames.singleline,\n            !isMultiline && onDismiss && classNames.dismissalSingleLine,\n            !isMultiline && truncated && classNames.expandingSingleLine,\n            {\n                background: semanticColors[MessageBar_styles_backgroundColor[messageBarType]],\n                color: semanticColors.messageText,\n                minHeight: 32,\n                width: '100%',\n                display: 'flex',\n                wordBreak: 'break-word',\n                selectors: (_b = {\n                        '.ms-Link': {\n                            color: semanticColors.messageLink,\n                            selectors: {\n                                ':hover': {\n                                    color: semanticColors.messageLinkHovered,\n                                },\n                            },\n                        }\n                    },\n                    _b[HighContrastSelector] = {\n                        MsHighContrastAdjust: 'none',\n                        background: highContrastBackgroundColor[messageBarType],\n                        border: '1px solid WindowText',\n                        color: 'WindowText',\n                    },\n                    _b),\n            },\n            isMultiline && {\n                flexDirection: 'column',\n            },\n            className,\n        ],\n        content: [\n            classNames.content,\n            {\n                display: 'flex',\n                width: '100%',\n                lineHeight: 'normal',\n            },\n        ],\n        iconContainer: [\n            classNames.iconContainer,\n            {\n                fontSize: IconFontSizes.medium,\n                minWidth: 16,\n                minHeight: 16,\n                display: 'flex',\n                flexShrink: 0,\n                margin: '8px 0 8px 12px',\n            },\n        ],\n        icon: {\n            color: semanticColors[iconColor[messageBarType]],\n            selectors: (_c = {},\n                _c[HighContrastSelector] = {\n                    MsHighContrastAdjust: 'none',\n                    color: 'WindowText',\n                },\n                _c),\n        },\n        text: [\n            classNames.text,\n            __assign(__assign({ minWidth: 0, display: 'flex', flexGrow: 1, margin: 8 }, fonts.small), { selectors: (_d = {},\n                    _d[HighContrastSelector] = {\n                        MsHighContrastAdjust: 'none',\n                    },\n                    _d) }),\n            !onDismiss && {\n                marginRight: 12,\n            },\n        ],\n        innerText: [\n            classNames.innerText,\n            {\n                lineHeight: 16,\n                selectors: {\n                    '& span a': {\n                        paddingLeft: 4,\n                    },\n                },\n            },\n            truncated && {\n                overflow: 'visible',\n                whiteSpace: 'pre-wrap',\n            },\n            !isMultiline && {\n                // In high contrast this causes the top and bottom of links' focus outline to be clipped\n                // (not sure of a good way around that while still maintaining text clipping)\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n            },\n            !isMultiline &&\n                !truncated && {\n                selectors: (_e = {},\n                    _e[SmallScreenSelector] = {\n                        overflow: 'visible',\n                        whiteSpace: 'pre-wrap',\n                    },\n                    _e),\n            },\n            expandSingleLine && {\n                overflow: 'visible',\n                whiteSpace: 'pre-wrap',\n            },\n        ],\n        dismissSingleLine: classNames.dismissSingleLine,\n        expandSingleLine: classNames.expandSingleLine,\n        dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n        expand: [classNames.expand, dismissalAndExpandStyle],\n        actions: [\n            isMultiline ? classNames.actions : classNames.actionsSingleline,\n            {\n                display: 'flex',\n                flexGrow: 0,\n                flexShrink: 0,\n                flexBasis: 'auto',\n                flexDirection: 'row-reverse',\n                alignItems: 'center',\n                margin: '0 12px 0 8px',\n                selectors: {\n                    '& button:nth-child(n+2)': {\n                        marginLeft: 8,\n                    },\n                },\n            },\n            isMultiline && {\n                marginBottom: 8,\n            },\n            onDismiss &&\n                !isMultiline && {\n                marginRight: 0,\n            },\n        ],\n    };\n};\n//# sourceMappingURL=MessageBar.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/MessageBar/MessageBar.js\n\n\n\nvar MessageBar = styled(MessageBar_base_MessageBarBase, MessageBar_styles_getStyles, undefined, {\n    scope: 'MessageBar',\n});\n//# sourceMappingURL=MessageBar.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Label/Label.base.js\n\n\n\n\nvar Label_base_getClassNames = classNamesFunction({\n    // Label is used a lot by other components.\n    // It's likely to see expected cases which pass different className to the Label.\n    // Therefore setting a larger cache size.\n    cacheSize: 100,\n});\nvar Label_base_LabelBase = /** @class */ (function (_super) {\n    __extends(LabelBase, _super);\n    function LabelBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LabelBase.prototype.render = function () {\n        var _a = this.props, _b = _a.as, RootType = _b === void 0 ? 'label' : _b, children = _a.children, className = _a.className, disabled = _a.disabled, styles = _a.styles, required = _a.required, theme = _a.theme;\n        var classNames = Label_base_getClassNames(styles, {\n            className: className,\n            disabled: disabled,\n            required: required,\n            theme: theme,\n        });\n        return (react[\"createElement\"](RootType, __assign({}, getNativeProps(this.props, divProperties), { className: classNames.root }), children));\n    };\n    return LabelBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=Label.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Label/Label.styles.js\n\n\nvar Label_styles_getStyles = function (props) {\n    var _a;\n    var theme = props.theme, className = props.className, disabled = props.disabled, required = props.required;\n    var semanticColors = theme.semanticColors;\n    // Tokens\n    var labelFontWeight = FontWeights.semibold;\n    var labelColor = semanticColors.bodyText;\n    var labelDisabledColor = semanticColors.disabledBodyText;\n    var labelRequiredStarColor = semanticColors.errorText;\n    return {\n        root: [\n            'ms-Label',\n            theme.fonts.medium,\n            {\n                fontWeight: labelFontWeight,\n                color: labelColor,\n                boxSizing: 'border-box',\n                boxShadow: 'none',\n                margin: 0,\n                display: 'block',\n                padding: '5px 0',\n                wordWrap: 'break-word',\n                overflowWrap: 'break-word',\n            },\n            disabled && {\n                color: labelDisabledColor,\n                selectors: __assign((_a = {}, _a[HighContrastSelector] = {\n                    color: 'GrayText',\n                }, _a), getEdgeChromiumNoHighContrastAdjustSelector()),\n            },\n            required && {\n                selectors: {\n                    '::after': {\n                        content: \"' *'\",\n                        color: labelRequiredStarColor,\n                        paddingRight: 12,\n                    },\n                },\n            },\n            className,\n        ],\n    };\n};\n//# sourceMappingURL=Label.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Label/Label.js\n\n\n\nvar Label = styled(Label_base_LabelBase, Label_styles_getStyles, undefined, {\n    scope: 'Label',\n});\n//# sourceMappingURL=Label.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/warn/warnControlledUsage.js\n\n\nvar warningsMap;\nif (false) {}\n/** Reset controlled usage warnings for testing purposes. */\nfunction resetControlledWarnings() {\n    if (false) {}\n}\n/**\n * Check for and warn on the following error conditions with a form component:\n * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n *    and the component is not read-only\n * - Both the value and defaultValue props are provided\n * - The component is attempting to switch between controlled and uncontrolled\n *\n * The messages mimic the warnings React gives for these error conditions on input elements.\n * The warning will only be displayed once per component ID.\n */\nfunction warnControlledUsage(params) {\n    if (false) { var warnMap, newType, oldType, defaultValue, isReadOnly, hasOnChange, newIsControlled, oldIsControlled, componentId, componentName, defaultValueProp, props, oldProps, onChangeProp, readOnlyProp, valueProp; }\n}\n//# sourceMappingURL=warnControlledUsage.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/controlled.js\n/**\n * Determines whether a component is controlled.\n * @param props - Component props\n * @param valueProp - Prop containing the controlled value\n * @returns true if controlled, false if uncontrolled\n */\nfunction isControlled(props, valueProp) {\n    // React's built-in <input> considers a prop to be provided if its value is non-null/undefined.\n    // Mirror that behavior here (rather than checking for just undefined).\n    return props[valueProp] !== undefined && props[valueProp] !== null;\n}\n//# sourceMappingURL=controlled.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/TextField/TextField.base.js\n\n\n\n\n\nvar TextField_base_getClassNames = classNamesFunction();\nvar DEFAULT_STATE_VALUE = '';\nvar TextField_base_COMPONENT_NAME = 'TextField';\nvar TextField_base_TextFieldBase = /** @class */ (function (_super) {\n    __extends(TextFieldBase, _super);\n    function TextFieldBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._textElement = react[\"createRef\"]();\n        _this._onFocus = function (ev) {\n            if (_this.props.onFocus) {\n                _this.props.onFocus(ev);\n            }\n            _this.setState({ isFocused: true }, function () {\n                if (_this.props.validateOnFocusIn) {\n                    _this._validate(_this.value);\n                }\n            });\n        };\n        _this._onBlur = function (ev) {\n            if (_this.props.onBlur) {\n                _this.props.onBlur(ev);\n            }\n            _this.setState({ isFocused: false }, function () {\n                if (_this.props.validateOnFocusOut) {\n                    _this._validate(_this.value);\n                }\n            });\n        };\n        _this._onRenderLabel = function (props) {\n            var label = props.label, required = props.required;\n            // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n            var labelStyles = _this._classNames.subComponentStyles\n                ? _this._classNames.subComponentStyles.label\n                : undefined;\n            if (label) {\n                return (react[\"createElement\"](Label, { required: required, htmlFor: _this._id, styles: labelStyles, disabled: props.disabled, id: _this._labelId }, props.label));\n            }\n            return null;\n        };\n        _this._onRenderDescription = function (props) {\n            if (props.description) {\n                return react[\"createElement\"](\"span\", { className: _this._classNames.description }, props.description);\n            }\n            return null;\n        };\n        _this._onInputChange = function (event) {\n            // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n            // which have *probably* been fixed now:\n            // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n            // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n            // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n            // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n            var element = event.target;\n            var value = element.value;\n            // Ignore this event if the value is undefined (in case one of the IE bugs comes back)\n            if (value === undefined || value === _this._lastChangeValue) {\n                return;\n            }\n            _this._lastChangeValue = value;\n            // This is so developers can access the event properties in asynchronous callbacks\n            // https://reactjs.org/docs/events.html#event-pooling\n            event.persist();\n            var isSameValue;\n            _this.setState(function (prevState, props) {\n                var prevValue = _getValue(props, prevState) || '';\n                isSameValue = value === prevValue;\n                // Avoid doing unnecessary work when the value has not changed.\n                if (isSameValue) {\n                    return null;\n                }\n                // ONLY if this is an uncontrolled component, update the displayed value.\n                // (Controlled components must update the `value` prop from `onChange`.)\n                return _this._isControlled ? null : { uncontrolledValue: value };\n            }, function () {\n                // If the value actually changed, call onChange (for either controlled or uncontrolled)\n                var onChange = _this.props.onChange;\n                if (!isSameValue && onChange) {\n                    onChange(event, value);\n                }\n            });\n        };\n        initializeComponentRef(_this);\n        _this._async = new Async_Async(_this);\n        if (false) {}\n        _this._fallbackId = getId(TextField_base_COMPONENT_NAME);\n        _this._descriptionId = getId(TextField_base_COMPONENT_NAME + 'Description');\n        _this._labelId = getId(TextField_base_COMPONENT_NAME + 'Label');\n        _this._warnControlledUsage();\n        var _a = props.defaultValue, defaultValue = _a === void 0 ? DEFAULT_STATE_VALUE : _a;\n        if (typeof defaultValue === 'number') {\n            // This isn't allowed per the props, but happens anyway.\n            defaultValue = String(defaultValue);\n        }\n        _this.state = {\n            uncontrolledValue: _this._isControlled ? undefined : defaultValue,\n            isFocused: false,\n            errorMessage: '',\n        };\n        _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);\n        _this._lastValidation = 0;\n        return _this;\n    }\n    Object.defineProperty(TextFieldBase.prototype, \"value\", {\n        /**\n         * Gets the current value of the text field.\n         */\n        get: function () {\n            return _getValue(this.props, this.state);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextFieldBase.prototype.componentDidMount = function () {\n        this._adjustInputHeight();\n        if (this.props.validateOnLoad) {\n            this._validate(this.value);\n        }\n    };\n    TextFieldBase.prototype.componentWillUnmount = function () {\n        this._async.dispose();\n    };\n    TextFieldBase.prototype.getSnapshotBeforeUpdate = function (prevProps, prevState) {\n        return {\n            selection: [this.selectionStart, this.selectionEnd],\n        };\n    };\n    TextFieldBase.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {\n        var props = this.props;\n        var _a = (snapshot || {}).selection, selection = _a === void 0 ? [null, null] : _a;\n        var start = selection[0], end = selection[1];\n        if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n            // The text field has just changed between single- and multi-line, so we need to reset focus\n            // and selection/cursor.\n            this.focus();\n            if (start !== null && end !== null && start >= 0 && end >= 0) {\n                this.setSelectionRange(start, end);\n            }\n        }\n        var prevValue = _getValue(prevProps, prevState);\n        var value = this.value;\n        if (prevValue !== value) {\n            // Handle controlled/uncontrolled warnings and status\n            this._warnControlledUsage(prevProps);\n            // Clear error message if needed\n            // TODO: is there any way to do this without an extra render?\n            if (this.state.errorMessage && !props.errorMessage) {\n                this.setState({ errorMessage: '' });\n            }\n            // Adjust height if needed based on new value\n            this._adjustInputHeight();\n            // Reset the record of the last value seen by a change/input event\n            this._lastChangeValue = undefined;\n            // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n            // This seems a bit odd and hard to integrate with the new approach.\n            // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n            if (_shouldValidateAllChanges(props)) {\n                this._delayedValidate(value);\n            }\n        }\n    };\n    TextFieldBase.prototype.render = function () {\n        var _a = this.props, borderless = _a.borderless, className = _a.className, disabled = _a.disabled, iconProps = _a.iconProps, inputClassName = _a.inputClassName, label = _a.label, multiline = _a.multiline, required = _a.required, underlined = _a.underlined, prefix = _a.prefix, resizable = _a.resizable, suffix = _a.suffix, theme = _a.theme, styles = _a.styles, autoAdjustHeight = _a.autoAdjustHeight, _b = _a.onRenderPrefix, onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b, _c = _a.onRenderSuffix, onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c, _d = _a.onRenderLabel, onRenderLabel = _d === void 0 ? this._onRenderLabel : _d, _e = _a.onRenderDescription, onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;\n        var isFocused = this.state.isFocused;\n        var errorMessage = this._errorMessage;\n        this._classNames = TextField_base_getClassNames(styles, {\n            theme: theme,\n            className: className,\n            disabled: disabled,\n            focused: isFocused,\n            required: required,\n            multiline: multiline,\n            hasLabel: !!label,\n            hasErrorMessage: !!errorMessage,\n            borderless: borderless,\n            resizable: resizable,\n            hasIcon: !!iconProps,\n            underlined: underlined,\n            inputClassName: inputClassName,\n            autoAdjustHeight: autoAdjustHeight,\n        });\n        return (react[\"createElement\"](\"div\", { className: this._classNames.root },\n            react[\"createElement\"](\"div\", { className: this._classNames.wrapper },\n                onRenderLabel(this.props, this._onRenderLabel),\n                react[\"createElement\"](\"div\", { className: this._classNames.fieldGroup },\n                    (prefix !== undefined || this.props.onRenderPrefix) && (react[\"createElement\"](\"div\", { className: this._classNames.prefix }, onRenderPrefix(this.props, this._onRenderPrefix))),\n                    multiline ? this._renderTextArea() : this._renderInput(),\n                    iconProps && react[\"createElement\"](Icon, __assign({ className: this._classNames.icon }, iconProps)),\n                    (suffix !== undefined || this.props.onRenderSuffix) && (react[\"createElement\"](\"div\", { className: this._classNames.suffix }, onRenderSuffix(this.props, this._onRenderSuffix))))),\n            this._isDescriptionAvailable && (react[\"createElement\"](\"span\", { id: this._descriptionId },\n                onRenderDescription(this.props, this._onRenderDescription),\n                errorMessage && (react[\"createElement\"](\"div\", { role: \"alert\" },\n                    react[\"createElement\"](DelayedRender_DelayedRender, null,\n                        react[\"createElement\"](\"p\", { className: this._classNames.errorMessage },\n                            react[\"createElement\"](\"span\", { \"data-automation-id\": \"error-message\" }, errorMessage)))))))));\n    };\n    /**\n     * Sets focus on the text field\n     */\n    TextFieldBase.prototype.focus = function () {\n        if (this._textElement.current) {\n            this._textElement.current.focus();\n        }\n    };\n    /**\n     * Blurs the text field.\n     */\n    TextFieldBase.prototype.blur = function () {\n        if (this._textElement.current) {\n            this._textElement.current.blur();\n        }\n    };\n    /**\n     * Selects the text field\n     */\n    TextFieldBase.prototype.select = function () {\n        if (this._textElement.current) {\n            this._textElement.current.select();\n        }\n    };\n    /**\n     * Sets the selection start of the text field to a specified value\n     */\n    TextFieldBase.prototype.setSelectionStart = function (value) {\n        if (this._textElement.current) {\n            this._textElement.current.selectionStart = value;\n        }\n    };\n    /**\n     * Sets the selection end of the text field to a specified value\n     */\n    TextFieldBase.prototype.setSelectionEnd = function (value) {\n        if (this._textElement.current) {\n            this._textElement.current.selectionEnd = value;\n        }\n    };\n    Object.defineProperty(TextFieldBase.prototype, \"selectionStart\", {\n        /**\n         * Gets the selection start of the text field\n         */\n        get: function () {\n            return this._textElement.current ? this._textElement.current.selectionStart : -1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextFieldBase.prototype, \"selectionEnd\", {\n        /**\n         * Gets the selection end of the text field\n         */\n        get: function () {\n            return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the start and end positions of a selection in a text field.\n     * @param start - Index of the start of the selection.\n     * @param end - Index of the end of the selection.\n     */\n    TextFieldBase.prototype.setSelectionRange = function (start, end) {\n        if (this._textElement.current) {\n            this._textElement.current.setSelectionRange(start, end);\n        }\n    };\n    TextFieldBase.prototype._warnControlledUsage = function (prevProps) {\n        // Show warnings if props are being used in an invalid way\n        warnControlledUsage({\n            componentId: this._id,\n            componentName: TextField_base_COMPONENT_NAME,\n            props: this.props,\n            oldProps: prevProps,\n            valueProp: 'value',\n            defaultValueProp: 'defaultValue',\n            onChangeProp: 'onChange',\n            readOnlyProp: 'readOnly',\n        });\n        if (this.props.value === null && !this._hasWarnedNullValue) {\n            this._hasWarnedNullValue = true;\n            warn(\"Warning: 'value' prop on '\" + TextField_base_COMPONENT_NAME + \"' should not be null. Consider using an \" +\n                'empty string to clear the component or undefined to indicate an uncontrolled component.');\n        }\n    };\n    Object.defineProperty(TextFieldBase.prototype, \"_id\", {\n        /** Returns `props.id` if available, or a fallback if not. */\n        get: function () {\n            return this.props.id || this._fallbackId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextFieldBase.prototype, \"_isControlled\", {\n        get: function () {\n            return isControlled(this.props, 'value');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextFieldBase.prototype._onRenderPrefix = function (props) {\n        var prefix = props.prefix;\n        return react[\"createElement\"](\"span\", { style: { paddingBottom: '1px' } }, prefix);\n    };\n    TextFieldBase.prototype._onRenderSuffix = function (props) {\n        var suffix = props.suffix;\n        return react[\"createElement\"](\"span\", { style: { paddingBottom: '1px' } }, suffix);\n    };\n    Object.defineProperty(TextFieldBase.prototype, \"_errorMessage\", {\n        /**\n         * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n         *\n         * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n         * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n         */\n        get: function () {\n            var _a = this.props.errorMessage, errorMessage = _a === void 0 ? this.state.errorMessage : _a;\n            return errorMessage || '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextFieldBase.prototype, \"_isDescriptionAvailable\", {\n        /**\n         * If a custom description render function is supplied then treat description as always available.\n         * Otherwise defer to the presence of description or error message text.\n         */\n        get: function () {\n            var props = this.props;\n            return !!(props.onRenderDescription || props.description || this._errorMessage);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextFieldBase.prototype._renderTextArea = function () {\n        var textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\n        var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n        return (react[\"createElement\"](\"textarea\", __assign({ id: this._id }, textAreaProps, { ref: this._textElement, value: this.value || '', onInput: this._onInputChange, onChange: this._onInputChange, className: this._classNames.field, \"aria-labelledby\": ariaLabelledBy, \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'], \"aria-invalid\": !!this._errorMessage, \"aria-label\": this.props.ariaLabel, readOnly: this.props.readOnly, onFocus: this._onFocus, onBlur: this._onBlur })));\n    };\n    TextFieldBase.prototype._renderInput = function () {\n        var inputProps = getNativeProps(this.props, inputProperties, [\n            'defaultValue',\n        ]);\n        var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n        return (react[\"createElement\"](\"input\", __assign({ type: 'text', id: this._id, \"aria-labelledby\": ariaLabelledBy }, inputProps, { ref: this._textElement, value: this.value || '', onInput: this._onInputChange, onChange: this._onInputChange, className: this._classNames.field, \"aria-label\": this.props.ariaLabel, \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'], \"aria-invalid\": !!this._errorMessage, readOnly: this.props.readOnly, onFocus: this._onFocus, onBlur: this._onBlur })));\n    };\n    TextFieldBase.prototype._validate = function (value) {\n        var _this = this;\n        // In case _validate is called again while validation promise is executing\n        if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n            return;\n        }\n        this._latestValidateValue = value;\n        var onGetErrorMessage = this.props.onGetErrorMessage;\n        var result = onGetErrorMessage && onGetErrorMessage(value || '');\n        if (result !== undefined) {\n            if (typeof result === 'string' || !('then' in result)) {\n                this.setState({ errorMessage: result });\n                this._notifyAfterValidate(value, result);\n            }\n            else {\n                var currentValidation_1 = ++this._lastValidation;\n                result.then(function (errorMessage) {\n                    if (currentValidation_1 === _this._lastValidation) {\n                        _this.setState({ errorMessage: errorMessage });\n                    }\n                    _this._notifyAfterValidate(value, errorMessage);\n                });\n            }\n        }\n        else {\n            this._notifyAfterValidate(value, '');\n        }\n    };\n    TextFieldBase.prototype._notifyAfterValidate = function (value, errorMessage) {\n        if (value === this.value && this.props.onNotifyValidationResult) {\n            this.props.onNotifyValidationResult(errorMessage, value);\n        }\n    };\n    TextFieldBase.prototype._adjustInputHeight = function () {\n        if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n            var textField = this._textElement.current;\n            textField.style.height = '';\n            textField.style.height = textField.scrollHeight + 'px';\n        }\n    };\n    TextFieldBase.defaultProps = {\n        resizable: true,\n        deferredValidationTime: 200,\n        validateOnLoad: true,\n    };\n    return TextFieldBase;\n}(react[\"Component\"]));\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props, state) {\n    var _a = props.value, value = _a === void 0 ? state.uncontrolledValue : _a;\n    if (typeof value === 'number') {\n        // not allowed per typings, but happens anyway\n        return String(value);\n    }\n    return value;\n}\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props) {\n    return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n//# sourceMappingURL=TextField.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/TextField/TextField.styles.js\n\n\nvar globalClassNames = {\n    root: 'ms-TextField',\n    description: 'ms-TextField-description',\n    errorMessage: 'ms-TextField-errorMessage',\n    field: 'ms-TextField-field',\n    fieldGroup: 'ms-TextField-fieldGroup',\n    prefix: 'ms-TextField-prefix',\n    suffix: 'ms-TextField-suffix',\n    wrapper: 'ms-TextField-wrapper',\n    multiline: 'ms-TextField--multiline',\n    borderless: 'ms-TextField--borderless',\n    underlined: 'ms-TextField--underlined',\n    unresizable: 'ms-TextField--unresizable',\n    required: 'is-required',\n    disabled: 'is-disabled',\n    active: 'is-active',\n};\nfunction getLabelStyles(props) {\n    var underlined = props.underlined, disabled = props.disabled, focused = props.focused, theme = props.theme;\n    var palette = theme.palette, fonts = theme.fonts;\n    return function () {\n        var _a;\n        return ({\n            root: [\n                underlined &&\n                    disabled && {\n                    color: palette.neutralTertiary,\n                },\n                underlined && {\n                    fontSize: fonts.medium.fontSize,\n                    marginRight: 8,\n                    paddingLeft: 12,\n                    paddingRight: 0,\n                    lineHeight: '22px',\n                    height: 32,\n                },\n                underlined &&\n                    focused && {\n                    selectors: (_a = {},\n                        _a[HighContrastSelector] = {\n                            height: 31,\n                        },\n                        _a),\n                },\n            ],\n        });\n    };\n}\nfunction TextField_styles_getStyles(props) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    var theme = props.theme, className = props.className, disabled = props.disabled, focused = props.focused, required = props.required, multiline = props.multiline, hasLabel = props.hasLabel, borderless = props.borderless, underlined = props.underlined, hasIcon = props.hasIcon, resizable = props.resizable, hasErrorMessage = props.hasErrorMessage, inputClassName = props.inputClassName, autoAdjustHeight = props.autoAdjustHeight;\n    var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;\n    var classNames = getGlobalClassNames(globalClassNames, theme);\n    var fieldPrefixSuffix = {\n        // Suffix/Prefix are not editable so the disabled slot perfectly fits.\n        background: semanticColors.disabledBackground,\n        color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,\n        display: 'flex',\n        alignItems: 'center',\n        padding: '0 10px',\n        lineHeight: 1,\n        whiteSpace: 'nowrap',\n        flexShrink: 0,\n        selectors: (_a = {},\n            _a[HighContrastSelector] = {\n                background: 'Window',\n                color: disabled ? 'GrayText' : 'WindowText',\n            },\n            _a),\n    };\n    // placeholder style constants\n    var placeholderStyles = [\n        fonts.medium,\n        {\n            color: semanticColors.inputPlaceholderText,\n            opacity: 1,\n            selectors: (_b = {},\n                _b[HighContrastSelector] = {\n                    color: 'GrayText',\n                },\n                _b),\n        },\n    ];\n    var disabledPlaceholderStyles = {\n        color: semanticColors.disabledText,\n        selectors: (_c = {},\n            _c[HighContrastSelector] = {\n                color: 'GrayText',\n            },\n            _c),\n    };\n    return {\n        root: [\n            classNames.root,\n            fonts.medium,\n            required && classNames.required,\n            disabled && classNames.disabled,\n            focused && classNames.active,\n            multiline && classNames.multiline,\n            borderless && classNames.borderless,\n            underlined && classNames.underlined,\n            normalize,\n            {\n                position: 'relative',\n            },\n            className,\n        ],\n        wrapper: [\n            classNames.wrapper,\n            underlined && [\n                {\n                    display: 'flex',\n                    borderBottom: \"1px solid \" + (!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText),\n                    width: '100%',\n                },\n                disabled && {\n                    borderBottomColor: semanticColors.disabledBackground,\n                    selectors: __assign((_d = {}, _d[HighContrastSelector] = {\n                        borderColor: 'GrayText',\n                    }, _d), getEdgeChromiumNoHighContrastAdjustSelector()),\n                },\n                !disabled && {\n                    selectors: {\n                        ':hover': {\n                            borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,\n                            selectors: __assign((_e = {}, _e[HighContrastSelector] = {\n                                borderBottomColor: 'Highlight',\n                            }, _e), getEdgeChromiumNoHighContrastAdjustSelector()),\n                        },\n                    },\n                },\n                focused && [\n                    {\n                        position: 'relative',\n                    },\n                    getInputFocusStyle(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, 0, 'borderBottom'),\n                ],\n            ],\n        ],\n        fieldGroup: [\n            classNames.fieldGroup,\n            normalize,\n            {\n                border: \"1px solid \" + semanticColors.inputBorder,\n                borderRadius: effects.roundedCorner2,\n                background: semanticColors.inputBackground,\n                cursor: 'text',\n                height: 32,\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'stretch',\n                position: 'relative',\n            },\n            multiline && {\n                minHeight: '60px',\n                height: 'auto',\n                display: 'flex',\n            },\n            !focused &&\n                !disabled && {\n                selectors: {\n                    ':hover': {\n                        borderColor: semanticColors.inputBorderHovered,\n                        selectors: __assign((_f = {}, _f[HighContrastSelector] = {\n                            borderColor: 'Highlight',\n                        }, _f), getEdgeChromiumNoHighContrastAdjustSelector()),\n                    },\n                },\n            },\n            focused &&\n                !underlined &&\n                getInputFocusStyle(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, effects.roundedCorner2),\n            disabled && {\n                borderColor: semanticColors.disabledBackground,\n                selectors: __assign((_g = {}, _g[HighContrastSelector] = {\n                    borderColor: 'GrayText',\n                }, _g), getEdgeChromiumNoHighContrastAdjustSelector()),\n                cursor: 'default',\n            },\n            borderless && {\n                border: 'none',\n            },\n            borderless &&\n                focused && {\n                border: 'none',\n                selectors: {\n                    ':after': {\n                        border: 'none',\n                    },\n                },\n            },\n            underlined && {\n                flex: '1 1 0px',\n                border: 'none',\n                textAlign: 'left',\n            },\n            underlined &&\n                disabled && {\n                backgroundColor: 'transparent',\n            },\n            hasErrorMessage &&\n                !underlined && {\n                borderColor: semanticColors.errorText,\n                selectors: {\n                    '&:hover': {\n                        borderColor: semanticColors.errorText,\n                    },\n                },\n            },\n            !hasLabel &&\n                required && {\n                selectors: (_h = {\n                        ':before': {\n                            content: \"'*'\",\n                            color: semanticColors.errorText,\n                            position: 'absolute',\n                            top: -5,\n                            right: -10,\n                        }\n                    },\n                    _h[HighContrastSelector] = {\n                        selectors: {\n                            ':before': {\n                                color: 'WindowText',\n                                right: -14,\n                            },\n                        },\n                    },\n                    _h),\n            },\n        ],\n        field: [\n            fonts.medium,\n            classNames.field,\n            normalize,\n            {\n                borderRadius: 0,\n                border: 'none',\n                background: 'none',\n                backgroundColor: 'transparent',\n                color: semanticColors.inputText,\n                padding: '0 8px',\n                width: '100%',\n                minWidth: 0,\n                textOverflow: 'ellipsis',\n                outline: 0,\n                selectors: (_j = {\n                        '&:active, &:focus, &:hover': { outline: 0 },\n                        '::-ms-clear': {\n                            display: 'none',\n                        }\n                    },\n                    _j[HighContrastSelector] = {\n                        background: 'Window',\n                        color: disabled ? 'GrayText' : 'WindowText',\n                    },\n                    _j),\n            },\n            getPlaceholderStyles(placeholderStyles),\n            multiline &&\n                !resizable && [\n                classNames.unresizable,\n                {\n                    resize: 'none',\n                },\n            ],\n            multiline && {\n                minHeight: 'inherit',\n                lineHeight: 17,\n                flexGrow: 1,\n                paddingTop: 6,\n                paddingBottom: 6,\n                overflow: 'auto',\n                width: '100%',\n            },\n            multiline &&\n                autoAdjustHeight && {\n                overflow: 'hidden',\n            },\n            hasIcon && {\n                paddingRight: 24,\n            },\n            multiline &&\n                hasIcon && {\n                paddingRight: 40,\n            },\n            disabled && [\n                {\n                    backgroundColor: semanticColors.disabledBackground,\n                    color: semanticColors.disabledText,\n                    borderColor: semanticColors.disabledBackground,\n                },\n                getPlaceholderStyles(disabledPlaceholderStyles),\n            ],\n            underlined && {\n                textAlign: 'left',\n            },\n            focused &&\n                !borderless && {\n                selectors: (_k = {},\n                    _k[HighContrastSelector] = {\n                        paddingLeft: 11,\n                        paddingRight: 11,\n                    },\n                    _k),\n            },\n            focused &&\n                multiline &&\n                !borderless && {\n                selectors: (_l = {},\n                    _l[HighContrastSelector] = {\n                        paddingTop: 4,\n                    },\n                    _l),\n            },\n            inputClassName,\n        ],\n        icon: [\n            multiline && {\n                paddingRight: 24,\n                alignItems: 'flex-end',\n            },\n            {\n                pointerEvents: 'none',\n                position: 'absolute',\n                bottom: 6,\n                right: 8,\n                top: 'auto',\n                fontSize: IconFontSizes.medium,\n                lineHeight: 18,\n            },\n            disabled && {\n                color: semanticColors.disabledText,\n            },\n        ],\n        description: [\n            classNames.description,\n            {\n                color: semanticColors.bodySubtext,\n                fontSize: fonts.xSmall.fontSize,\n            },\n        ],\n        errorMessage: [\n            classNames.errorMessage,\n            AnimationClassNames.slideDownIn20,\n            fonts.small,\n            {\n                color: semanticColors.errorText,\n                margin: 0,\n                paddingTop: 5,\n                display: 'flex',\n                alignItems: 'center',\n            },\n        ],\n        prefix: [classNames.prefix, fieldPrefixSuffix],\n        suffix: [classNames.suffix, fieldPrefixSuffix],\n        subComponentStyles: {\n            label: getLabelStyles(props),\n        },\n    };\n}\n//# sourceMappingURL=TextField.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/TextField/TextField.js\n\n\n\nvar TextField = styled(TextField_base_TextFieldBase, TextField_styles_getStyles, undefined, {\n    scope: 'TextField',\n});\n//# sourceMappingURL=TextField.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Dialog/DialogContent.types.js\n\n // Exported because the type is an optional prop and not exported otherwise.\n/**\n * {@docCategory Dialog}\n */\nvar DialogType;\n(function (DialogType) {\n    /** Standard dialog */\n    DialogType[DialogType[\"normal\"] = 0] = \"normal\";\n    /** Dialog with large header banner */\n    DialogType[DialogType[\"largeHeader\"] = 1] = \"largeHeader\";\n    /** Dialog with an 'x' close button in the upper-right corner */\n    DialogType[DialogType[\"close\"] = 2] = \"close\";\n})(DialogType || (DialogType = {}));\n//# sourceMappingURL=DialogContent.types.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/utilities/lib/modalize.js\n/**\n * The helper functions here will make the target element as modal to screen readers, by placing aria-hidden on elements\n * that are siblings to the target element and the target element's ancestors (because aria-hidden gets inherited).\n * That way, all other elements on the page are hidden to the screen reader.\n */\n\n/**\n * Call this on a target element to make it modal to screen readers.\n * Returns a function that undoes the changes it made.\n */\nfunction modalize(target) {\n    var _a;\n    var affectedNodes = [];\n    var targetDocument = getDocument(target) || document;\n    // start at target, then recurse and do the same for parent, until we reach <body>\n    while (target !== targetDocument.body) {\n        // grab all siblings of current element\n        for (var _i = 0, _b = target.parentElement.children; _i < _b.length; _i++) {\n            var sibling = _b[_i];\n            // but ignore elements that are already aria-hidden\n            if (sibling !== target && ((_a = sibling.getAttribute('aria-hidden')) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== 'true') {\n                affectedNodes.push(sibling);\n            }\n        }\n        if (!target.parentElement) {\n            break;\n        }\n        target = target.parentElement;\n    }\n    // take all those elements and set aria-hidden=true on them\n    affectedNodes.forEach(function (node) {\n        node.setAttribute('aria-hidden', 'true');\n    });\n    return function () {\n        unmodalize(affectedNodes);\n        affectedNodes = []; // dispose\n    };\n}\n/**\n * Undoes the changes that modalize() did.\n */\nfunction unmodalize(affectedNodes) {\n    affectedNodes.forEach(function (node) {\n        // set instead of removing in case other components explicitly set aria-hidden and do ==\"true\" or ==\"false\"\n        node.setAttribute('aria-hidden', 'false');\n    });\n}\n//# sourceMappingURL=modalize.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/FocusTrapZone/FocusTrapZone.js\n\n\n\n\nvar FocusTrapZone_FocusTrapZone = /** @class */ (function (_super) {\n    __extends(FocusTrapZone, _super);\n    function FocusTrapZone(props) {\n        var _this = _super.call(this, props) || this;\n        _this._root = react[\"createRef\"]();\n        _this._firstBumper = react[\"createRef\"]();\n        _this._lastBumper = react[\"createRef\"]();\n        _this._hasFocus = false;\n        _this._onRootFocus = function (ev) {\n            if (_this.props.onFocus) {\n                _this.props.onFocus(ev);\n            }\n            _this._hasFocus = true;\n        };\n        _this._onRootBlur = function (ev) {\n            if (_this.props.onBlur) {\n                _this.props.onBlur(ev);\n            }\n            var relatedTarget = ev.relatedTarget;\n            if (ev.relatedTarget === null) {\n                // In IE11, due to lack of support, event.relatedTarget is always\n                // null making every onBlur call to be \"outside\" of the ComboBox\n                // even when it's not. Using document.activeElement is another way\n                // for us to be able to get what the relatedTarget without relying\n                // on the event\n                relatedTarget = _this._getDocument().activeElement;\n            }\n            if (!elementContains(_this._root.current, relatedTarget)) {\n                _this._hasFocus = false;\n            }\n        };\n        _this._onFirstBumperFocus = function () {\n            _this._onBumperFocus(true);\n        };\n        _this._onLastBumperFocus = function () {\n            _this._onBumperFocus(false);\n        };\n        _this._onBumperFocus = function (isFirstBumper) {\n            if (_this.props.disabled) {\n                return;\n            }\n            var currentBumper = (isFirstBumper === _this._hasFocus\n                ? _this._lastBumper.current\n                : _this._firstBumper.current);\n            if (_this._root.current) {\n                var nextFocusable = isFirstBumper === _this._hasFocus\n                    ? getLastTabbable(_this._root.current, currentBumper, true, false)\n                    : getFirstTabbable(_this._root.current, currentBumper, true, false);\n                if (nextFocusable) {\n                    if (_this._isBumper(nextFocusable)) {\n                        // This can happen when FTZ contains no tabbable elements.\n                        // focus will take care of finding a focusable element in FTZ.\n                        _this.focus();\n                    }\n                    else {\n                        nextFocusable.focus();\n                    }\n                }\n            }\n        };\n        _this._onFocusCapture = function (ev) {\n            if (_this.props.onFocusCapture) {\n                _this.props.onFocusCapture(ev);\n            }\n            if (ev.target !== ev.currentTarget && !_this._isBumper(ev.target)) {\n                // every time focus changes within the trap zone, remember the focused element so that\n                // it can be restored if focus leaves the pane and returns via keystroke (i.e. via a call to this.focus(true))\n                _this._previouslyFocusedElementInTrapZone = ev.target;\n            }\n        };\n        _this._forceFocusInTrap = function (ev) {\n            if (_this.props.disabled) {\n                return;\n            }\n            if (FocusTrapZone._focusStack.length && _this === FocusTrapZone._focusStack[FocusTrapZone._focusStack.length - 1]) {\n                var focusedElement = _this._getDocument().activeElement;\n                if (!elementContains(_this._root.current, focusedElement)) {\n                    _this.focus();\n                    _this._hasFocus = true; // set focus here since we stop event propagation\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            }\n        };\n        _this._forceClickInTrap = function (ev) {\n            if (_this.props.disabled) {\n                return;\n            }\n            if (FocusTrapZone._focusStack.length && _this === FocusTrapZone._focusStack[FocusTrapZone._focusStack.length - 1]) {\n                var clickedElement = ev.target;\n                if (clickedElement && !elementContains(_this._root.current, clickedElement)) {\n                    _this.focus();\n                    _this._hasFocus = true; // set focus here since we stop event propagation\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            }\n        };\n        initializeComponentRef(_this);\n        return _this;\n    }\n    FocusTrapZone.prototype.componentDidMount = function () {\n        this._bringFocusIntoZone();\n        this._updateEventHandlers(this.props);\n        if (!this.props.disabled && this._root.current && this.props.enableAriaHiddenSiblings) {\n            this._unmodalize = modalize(this._root.current);\n        }\n    };\n    FocusTrapZone.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n        var elementToFocusOnDismiss = nextProps.elementToFocusOnDismiss;\n        if (elementToFocusOnDismiss && this._previouslyFocusedElementOutsideTrapZone !== elementToFocusOnDismiss) {\n            this._previouslyFocusedElementOutsideTrapZone = elementToFocusOnDismiss;\n        }\n        this._updateEventHandlers(nextProps);\n    };\n    FocusTrapZone.prototype.componentDidUpdate = function (prevProps) {\n        var prevForceFocusInsideTrap = prevProps.forceFocusInsideTrap !== undefined ? prevProps.forceFocusInsideTrap : true;\n        var newForceFocusInsideTrap = this.props.forceFocusInsideTrap !== undefined ? this.props.forceFocusInsideTrap : true;\n        var prevDisabled = prevProps.disabled !== undefined ? prevProps.disabled : false;\n        var newDisabled = this.props.disabled !== undefined ? this.props.disabled : false;\n        if ((!prevForceFocusInsideTrap && newForceFocusInsideTrap) || (prevDisabled && !newDisabled)) {\n            // Transition from forceFocusInsideTrap / FTZ disabled to enabled.\n            // Emulate what happens when a FocusTrapZone gets mounted.\n            this._bringFocusIntoZone();\n            if (!this._unmodalize && this._root.current && this.props.enableAriaHiddenSiblings) {\n                this._unmodalize = modalize(this._root.current);\n            }\n        }\n        else if ((prevForceFocusInsideTrap && !newForceFocusInsideTrap) || (!prevDisabled && newDisabled)) {\n            // Transition from forceFocusInsideTrap / FTZ enabled to disabled.\n            // Emulate what happens when a FocusTrapZone gets unmounted.\n            this._returnFocusToInitiator();\n            if (this._unmodalize) {\n                this._unmodalize();\n            }\n        }\n    };\n    FocusTrapZone.prototype.componentWillUnmount = function () {\n        // don't handle return focus unless forceFocusInsideTrap is true or focus is still within FocusTrapZone\n        if (!this.props.disabled ||\n            this.props.forceFocusInsideTrap ||\n            !elementContains(this._root.current, this._getDocument().activeElement)) {\n            this._returnFocusToInitiator();\n        }\n        // Dispose of event handlers so their closures can be garbage-collected\n        if (this._disposeClickHandler) {\n            this._disposeClickHandler();\n            this._disposeClickHandler = undefined;\n        }\n        if (this._disposeFocusHandler) {\n            this._disposeFocusHandler();\n            this._disposeFocusHandler = undefined;\n        }\n        if (this._unmodalize) {\n            this._unmodalize();\n        }\n        // Dispose of element references so the DOM Nodes can be garbage-collected\n        delete this._previouslyFocusedElementInTrapZone;\n        delete this._previouslyFocusedElementOutsideTrapZone;\n    };\n    FocusTrapZone.prototype.render = function () {\n        var _a = this.props, className = _a.className, _b = _a.disabled, disabled = _b === void 0 ? false : _b, ariaLabelledBy = _a.ariaLabelledBy;\n        var divProps = getNativeProps(this.props, divProperties);\n        var bumperProps = {\n            'aria-hidden': true,\n            style: {\n                pointerEvents: 'none',\n                position: 'fixed',\n            },\n            tabIndex: disabled ? -1 : 0,\n            'data-is-visible': true,\n        };\n        return (react[\"createElement\"](\"div\", __assign({}, divProps, { className: className, ref: this._root, \"aria-labelledby\": ariaLabelledBy, onFocusCapture: this._onFocusCapture, onFocus: this._onRootFocus, onBlur: this._onRootBlur }),\n            react[\"createElement\"](\"div\", __assign({}, bumperProps, { ref: this._firstBumper, onFocus: this._onFirstBumperFocus })),\n            this.props.children,\n            react[\"createElement\"](\"div\", __assign({}, bumperProps, { ref: this._lastBumper, onFocus: this._onLastBumperFocus }))));\n    };\n    FocusTrapZone.prototype.focus = function () {\n        var _a = this.props, focusPreviouslyFocusedInnerElement = _a.focusPreviouslyFocusedInnerElement, firstFocusableSelector = _a.firstFocusableSelector;\n        if (focusPreviouslyFocusedInnerElement &&\n            this._previouslyFocusedElementInTrapZone &&\n            elementContains(this._root.current, this._previouslyFocusedElementInTrapZone)) {\n            // focus on the last item that had focus in the zone before we left the zone\n            this._focusAsync(this._previouslyFocusedElementInTrapZone);\n            return;\n        }\n        var focusSelector = typeof firstFocusableSelector === 'string'\n            ? firstFocusableSelector\n            : firstFocusableSelector && firstFocusableSelector();\n        var _firstFocusableChild = null;\n        if (this._root.current) {\n            if (focusSelector) {\n                _firstFocusableChild = this._root.current.querySelector('.' + focusSelector);\n            }\n            // Fall back to first element if query selector did not match any elements.\n            if (!_firstFocusableChild) {\n                _firstFocusableChild = getNextElement(this._root.current, this._root.current.firstChild, false, false, false, true);\n            }\n        }\n        if (_firstFocusableChild) {\n            this._focusAsync(_firstFocusableChild);\n        }\n    };\n    FocusTrapZone.prototype._focusAsync = function (element) {\n        if (!this._isBumper(element)) {\n            focusAsync(element);\n        }\n    };\n    FocusTrapZone.prototype._bringFocusIntoZone = function () {\n        var _a = this.props, elementToFocusOnDismiss = _a.elementToFocusOnDismiss, _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.disableFirstFocus, disableFirstFocus = _c === void 0 ? false : _c;\n        if (disabled) {\n            return;\n        }\n        FocusTrapZone._focusStack.push(this);\n        this._previouslyFocusedElementOutsideTrapZone = elementToFocusOnDismiss\n            ? elementToFocusOnDismiss\n            : this._getDocument().activeElement;\n        if (!disableFirstFocus && !elementContains(this._root.current, this._previouslyFocusedElementOutsideTrapZone)) {\n            this.focus();\n        }\n    };\n    FocusTrapZone.prototype._returnFocusToInitiator = function () {\n        var _this = this;\n        var ignoreExternalFocusing = this.props.ignoreExternalFocusing;\n        FocusTrapZone._focusStack = FocusTrapZone._focusStack.filter(function (value) {\n            return _this !== value;\n        });\n        var doc = this._getDocument();\n        var activeElement = doc.activeElement;\n        if (!ignoreExternalFocusing &&\n            this._previouslyFocusedElementOutsideTrapZone &&\n            typeof this._previouslyFocusedElementOutsideTrapZone.focus === 'function' &&\n            (elementContains(this._root.current, activeElement) || activeElement === doc.body)) {\n            this._focusAsync(this._previouslyFocusedElementOutsideTrapZone);\n        }\n    };\n    FocusTrapZone.prototype._updateEventHandlers = function (newProps) {\n        var _a = newProps.isClickableOutsideFocusTrap, isClickableOutsideFocusTrap = _a === void 0 ? false : _a, _b = newProps.forceFocusInsideTrap, forceFocusInsideTrap = _b === void 0 ? true : _b;\n        if (forceFocusInsideTrap && !this._disposeFocusHandler) {\n            this._disposeFocusHandler = on(window, 'focus', this._forceFocusInTrap, true);\n        }\n        else if (!forceFocusInsideTrap && this._disposeFocusHandler) {\n            this._disposeFocusHandler();\n            this._disposeFocusHandler = undefined;\n        }\n        if (!isClickableOutsideFocusTrap && !this._disposeClickHandler) {\n            this._disposeClickHandler = on(window, 'click', this._forceClickInTrap, true);\n        }\n        else if (isClickableOutsideFocusTrap && this._disposeClickHandler) {\n            this._disposeClickHandler();\n            this._disposeClickHandler = undefined;\n        }\n    };\n    FocusTrapZone.prototype._isBumper = function (element) {\n        return element === this._firstBumper.current || element === this._lastBumper.current;\n    };\n    FocusTrapZone.prototype._getDocument = function () {\n        return getDocument(this._root.current);\n    };\n    FocusTrapZone._focusStack = [];\n    return FocusTrapZone;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=FocusTrapZone.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Modal/Modal.styles.js\n\nvar animationDuration = AnimationVariables.durationValue2;\nvar Modal_styles_globalClassNames = {\n    root: 'ms-Modal',\n    main: 'ms-Dialog-main',\n    scrollableContent: 'ms-Modal-scrollableContent',\n    isOpen: 'is-open',\n    layer: 'ms-Modal-Layer',\n};\nvar Modal_styles_getStyles = function (props) {\n    var _a;\n    var className = props.className, containerClassName = props.containerClassName, scrollableContentClassName = props.scrollableContentClassName, isOpen = props.isOpen, isVisible = props.isVisible, hasBeenOpened = props.hasBeenOpened, modalRectangleTop = props.modalRectangleTop, theme = props.theme, topOffsetFixed = props.topOffsetFixed, isModeless = props.isModeless, layerClassName = props.layerClassName, isDefaultDragHandle = props.isDefaultDragHandle;\n    var palette = theme.palette, effects = theme.effects, fonts = theme.fonts;\n    var classNames = getGlobalClassNames(Modal_styles_globalClassNames, theme);\n    return {\n        root: [\n            classNames.root,\n            fonts.medium,\n            {\n                backgroundColor: 'transparent',\n                position: isModeless ? 'absolute' : 'fixed',\n                height: '100%',\n                width: '100%',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                opacity: 0,\n                pointerEvents: 'none',\n                transition: \"opacity \" + animationDuration,\n            },\n            topOffsetFixed &&\n                hasBeenOpened && {\n                alignItems: 'flex-start',\n            },\n            isOpen && classNames.isOpen,\n            isVisible && {\n                opacity: 1,\n                pointerEvents: 'auto',\n            },\n            className,\n        ],\n        main: [\n            classNames.main,\n            {\n                boxShadow: effects.elevation64,\n                borderRadius: effects.roundedCorner2,\n                backgroundColor: palette.white,\n                boxSizing: 'border-box',\n                position: 'relative',\n                textAlign: 'left',\n                outline: '3px solid transparent',\n                maxHeight: 'calc(100% - 32px)',\n                maxWidth: 'calc(100% - 32px)',\n                minHeight: '176px',\n                minWidth: '288px',\n                overflowY: 'auto',\n                zIndex: isModeless ? ZIndexes.Layer : undefined,\n            },\n            topOffsetFixed &&\n                hasBeenOpened && {\n                top: modalRectangleTop,\n            },\n            isDefaultDragHandle && {\n                cursor: 'move',\n            },\n            containerClassName,\n        ],\n        scrollableContent: [\n            classNames.scrollableContent,\n            {\n                overflowY: 'auto',\n                flexGrow: 1,\n                maxHeight: '100vh',\n                selectors: (_a = {},\n                    _a['@supports (-webkit-overflow-scrolling: touch)'] = {\n                        maxHeight: window.innerHeight,\n                    },\n                    _a),\n            },\n            scrollableContentClassName,\n        ],\n        layer: isModeless && [\n            layerClassName,\n            classNames.layer,\n            {\n                position: 'static',\n                width: 'unset',\n                height: 'unset',\n            },\n        ],\n        keyboardMoveIconContainer: {\n            position: 'absolute',\n            display: 'flex',\n            justifyContent: 'center',\n            width: '100%',\n            padding: '3px 0px',\n        },\n        keyboardMoveIcon: {\n            // eslint-disable-next-line deprecation/deprecation\n            fontSize: fonts.xLargePlus.fontSize,\n            width: '24px',\n        },\n    };\n};\n//# sourceMappingURL=Modal.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Overlay/Overlay.base.js\n\n\n\nvar Overlay_base_getClassNames = classNamesFunction();\nvar Overlay_base_OverlayBase = /** @class */ (function (_super) {\n    __extends(OverlayBase, _super);\n    function OverlayBase(props) {\n        var _this = _super.call(this, props) || this;\n        initializeComponentRef(_this);\n        var _a = _this.props.allowTouchBodyScroll, allowTouchBodyScroll = _a === void 0 ? false : _a;\n        _this._allowTouchBodyScroll = allowTouchBodyScroll;\n        return _this;\n    }\n    OverlayBase.prototype.componentDidMount = function () {\n        !this._allowTouchBodyScroll && disableBodyScroll();\n    };\n    OverlayBase.prototype.componentWillUnmount = function () {\n        !this._allowTouchBodyScroll && enableBodyScroll();\n    };\n    OverlayBase.prototype.render = function () {\n        var _a = this.props, isDark = _a.isDarkThemed, className = _a.className, theme = _a.theme, styles = _a.styles;\n        var divProps = getNativeProps(this.props, divProperties);\n        var classNames = Overlay_base_getClassNames(styles, {\n            theme: theme,\n            className: className,\n            isDark: isDark,\n        });\n        return react[\"createElement\"](\"div\", __assign({}, divProps, { className: classNames.root }));\n    };\n    return OverlayBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=Overlay.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Overlay/Overlay.styles.js\n\nvar Overlay_styles_GlobalClassNames = {\n    root: 'ms-Overlay',\n    rootDark: 'ms-Overlay--dark',\n};\nvar Overlay_styles_getStyles = function (props) {\n    var _a;\n    var className = props.className, theme = props.theme, isNone = props.isNone, isDark = props.isDark;\n    var palette = theme.palette;\n    var classNames = getGlobalClassNames(Overlay_styles_GlobalClassNames, theme);\n    return {\n        root: [\n            classNames.root,\n            theme.fonts.medium,\n            {\n                backgroundColor: palette.whiteTranslucent40,\n                top: 0,\n                right: 0,\n                bottom: 0,\n                left: 0,\n                position: 'absolute',\n                selectors: (_a = {},\n                    _a[HighContrastSelector] = {\n                        border: '1px solid WindowText',\n                        opacity: 0,\n                    },\n                    _a),\n            },\n            isNone && {\n                visibility: 'hidden',\n            },\n            isDark && [\n                classNames.rootDark,\n                {\n                    backgroundColor: palette.blackTranslucent40,\n                },\n            ],\n            className,\n        ],\n    };\n};\n//# sourceMappingURL=Overlay.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Overlay/Overlay.js\n\n\n\nvar Overlay = styled(Overlay_base_OverlayBase, Overlay_styles_getStyles, undefined, {\n    scope: 'Overlay',\n});\n//# sourceMappingURL=Overlay.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/utilities/DraggableZone/DraggableZone.styles.js\n\n\nvar DraggableZone_styles_getClassNames = memoizeFunction(function (className, isDragging) {\n    return {\n        root: mergeStyles(className, isDragging && {\n            touchAction: 'none',\n            selectors: {\n                '& *': {\n                    userSelect: 'none',\n                },\n            },\n        }),\n    };\n});\n//# sourceMappingURL=DraggableZone.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/utilities/DraggableZone/DraggableZone.js\n\n\n\n\nvar eventMapping = {\n    touch: {\n        start: 'touchstart',\n        move: 'touchmove',\n        stop: 'touchend',\n    },\n    mouse: {\n        start: 'mousedown',\n        move: 'mousemove',\n        stop: 'mouseup',\n    },\n};\nvar DraggableZone_DraggableZone = /** @class */ (function (_super) {\n    __extends(DraggableZone, _super);\n    function DraggableZone(props) {\n        var _this = _super.call(this, props) || this;\n        _this._currentEventType = eventMapping.mouse;\n        _this._events = [];\n        _this._onMouseDown = function (event) {\n            var onMouseDown = react[\"Children\"].only(_this.props.children).props.onMouseDown;\n            if (onMouseDown) {\n                onMouseDown(event);\n            }\n            _this._currentEventType = eventMapping.mouse;\n            return _this._onDragStart(event);\n        };\n        _this._onMouseUp = function (event) {\n            var onMouseUp = react[\"Children\"].only(_this.props.children).props.onMouseUp;\n            if (onMouseUp) {\n                onMouseUp(event);\n            }\n            _this._currentEventType = eventMapping.mouse;\n            return _this._onDragStop(event);\n        };\n        _this._onTouchStart = function (event) {\n            var onTouchStart = react[\"Children\"].only(_this.props.children).props.onTouchStart;\n            if (onTouchStart) {\n                onTouchStart(event);\n            }\n            _this._currentEventType = eventMapping.touch;\n            return _this._onDragStart(event);\n        };\n        _this._onTouchEnd = function (event) {\n            var onTouchEnd = react[\"Children\"].only(_this.props.children).props.onTouchEnd;\n            if (onTouchEnd) {\n                onTouchEnd(event);\n            }\n            _this._currentEventType = eventMapping.touch;\n            _this._onDragStop(event);\n        };\n        _this._onDragStart = function (event) {\n            // Only handle left click for dragging\n            if (typeof event.button === 'number' && event.button !== 0) {\n                return false;\n            }\n            // If the target doesn't match the handleSelector OR\n            // if the target does match the preventDragSelector, bail out\n            if ((_this.props.handleSelector && !_this._matchesSelector(event.target, _this.props.handleSelector)) ||\n                (_this.props.preventDragSelector &&\n                    _this._matchesSelector(event.target, _this.props.preventDragSelector))) {\n                return;\n            }\n            // Remember the touch identifier if this is a touch event so we can\n            // distinguish between individual touches in multitouch scenarios\n            // by remembering which touch point we were given\n            _this._touchId = _this._getTouchId(event);\n            var position = _this._getControlPosition(event);\n            if (position === undefined) {\n                return;\n            }\n            var dragData = _this._createDragDataFromPosition(position);\n            _this.props.onStart && _this.props.onStart(event, dragData);\n            _this.setState({\n                isDragging: true,\n                lastPosition: position,\n            });\n            // hook up the appropriate mouse/touch events to the body to ensure\n            // smooth dragging\n            _this._events = [\n                on(document.body, _this._currentEventType.move, _this._onDrag, true /* use capture phase */),\n                on(document.body, _this._currentEventType.stop, _this._onDragStop, true /* use capture phase */),\n            ];\n        };\n        _this._onDrag = function (event) {\n            // Prevent scrolling on mobile devices\n            if (event.type === 'touchmove') {\n                event.preventDefault();\n            }\n            var position = _this._getControlPosition(event);\n            if (!position) {\n                return;\n            }\n            // create the updated drag data from the position data\n            var updatedData = _this._createUpdatedDragData(_this._createDragDataFromPosition(position));\n            var updatedPosition = updatedData.position;\n            _this.props.onDragChange && _this.props.onDragChange(event, updatedData);\n            _this.setState({\n                position: updatedPosition,\n                lastPosition: position,\n            });\n        };\n        _this._onDragStop = function (event) {\n            if (!_this.state.isDragging) {\n                return;\n            }\n            var position = _this._getControlPosition(event);\n            if (!position) {\n                return;\n            }\n            var baseDragData = _this._createDragDataFromPosition(position);\n            // Set dragging to false and reset the lastPosition\n            _this.setState({\n                isDragging: false,\n                lastPosition: undefined,\n            });\n            _this.props.onStop && _this.props.onStop(event, baseDragData);\n            if (_this.props.position) {\n                _this.setState({\n                    position: _this.props.position,\n                });\n            }\n            // Remove event handlers\n            _this._events.forEach(function (dispose) { return dispose(); });\n        };\n        _this.state = {\n            isDragging: false,\n            position: _this.props.position || { x: 0, y: 0 },\n            lastPosition: undefined,\n        };\n        return _this;\n    }\n    DraggableZone.prototype.componentDidUpdate = function (prevProps) {\n        if (this.props.position && (!prevProps.position || this.props.position !== prevProps.position)) {\n            this.setState({ position: this.props.position });\n        }\n    };\n    DraggableZone.prototype.componentWillUnmount = function () {\n        this._events.forEach(function (dispose) { return dispose(); });\n    };\n    DraggableZone.prototype.render = function () {\n        var child = react[\"Children\"].only(this.props.children);\n        var props = child.props;\n        var position = this.props.position;\n        var _a = this.state, statePosition = _a.position, isDragging = _a.isDragging;\n        var x = statePosition.x;\n        var y = statePosition.y;\n        if (position && !isDragging) {\n            x = position.x;\n            y = position.y;\n        }\n        return react[\"cloneElement\"](child, {\n            style: __assign(__assign({}, props.style), { transform: \"translate(\" + x + \"px, \" + y + \"px)\" }),\n            className: DraggableZone_styles_getClassNames(props.className, this.state.isDragging).root,\n            onMouseDown: this._onMouseDown,\n            onMouseUp: this._onMouseUp,\n            onTouchStart: this._onTouchStart,\n            onTouchEnd: this._onTouchEnd,\n        });\n    };\n    /**\n     * Get the control position based off the event that fired\n     * @param event - The event to get offsets from\n     */\n    DraggableZone.prototype._getControlPosition = function (event) {\n        var touchObj = this._getActiveTouch(event);\n        // did we get the right touch?\n        if (this._touchId !== undefined && !touchObj) {\n            return undefined;\n        }\n        var eventToGetOffset = touchObj || event;\n        return {\n            x: eventToGetOffset.clientX,\n            y: eventToGetOffset.clientY,\n        };\n    };\n    /**\n     * Get the active touch point that we have saved from the event's TouchList\n     * @param event - The event used to get the TouchList for the active touch point\n     */\n    DraggableZone.prototype._getActiveTouch = function (event) {\n        return ((event.targetTouches && this._findTouchInTouchList(event.targetTouches)) ||\n            (event.changedTouches && this._findTouchInTouchList(event.changedTouches)));\n    };\n    /**\n     * Get the initial touch identifier associated with the given event\n     * @param event - The event that contains the TouchList\n     */\n    DraggableZone.prototype._getTouchId = function (event) {\n        var touch = (event.targetTouches && event.targetTouches[0]) || (event.changedTouches && event.changedTouches[0]);\n        if (touch) {\n            return touch.identifier;\n        }\n    };\n    /**\n     * Returns if an element (or any of the element's parents) match the given selector\n     */\n    DraggableZone.prototype._matchesSelector = function (element, selector) {\n        if (!element || element === document.body) {\n            return false;\n        }\n        var matchesSelectorFn = element.matches || element.webkitMatchesSelector || element.msMatchesSelector /* for IE */;\n        if (!matchesSelectorFn) {\n            return false;\n        }\n        return matchesSelectorFn.call(element, selector) || this._matchesSelector(element.parentElement, selector);\n    };\n    /**\n     * Attempts to find the Touch that matches the identifier  we stored in dragStart\n     * @param touchList The TouchList to look for the stored identifier from dragStart\n     */\n    DraggableZone.prototype._findTouchInTouchList = function (touchList) {\n        if (this._touchId === undefined) {\n            return;\n        }\n        for (var i = 0; i < touchList.length; i++) {\n            if (touchList[i].identifier === this._touchId) {\n                return touchList[i];\n            }\n        }\n        return undefined;\n    };\n    /**\n     * Create DragData based off of the last known position and the new position passed in\n     * @param position The new position as part of the drag\n     */\n    DraggableZone.prototype._createDragDataFromPosition = function (position) {\n        var lastPosition = this.state.lastPosition;\n        // If we have no lastPosition, use the given position\n        // for last position\n        if (lastPosition === undefined) {\n            return {\n                delta: { x: 0, y: 0 },\n                lastPosition: position,\n                position: position,\n            };\n        }\n        return {\n            delta: {\n                x: position.x - lastPosition.x,\n                y: position.y - lastPosition.y,\n            },\n            lastPosition: lastPosition,\n            position: position,\n        };\n    };\n    /**\n     * Creates an updated DragData based off the current position and given baseDragData\n     * @param baseDragData The base DragData (from _createDragDataFromPosition) used to calculate the updated positions\n     */\n    DraggableZone.prototype._createUpdatedDragData = function (baseDragData) {\n        var position = this.state.position;\n        return {\n            position: {\n                x: position.x + baseDragData.delta.x,\n                y: position.y + baseDragData.delta.y,\n            },\n            delta: baseDragData.delta,\n            lastPosition: position,\n        };\n    };\n    return DraggableZone;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=DraggableZone.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Modal/Modal.base.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n// @TODO - need to change this to a panel whenever the breakpoint is under medium (verify the spec)\nvar DefaultLayerProps = {\n    eventBubblingEnabled: false,\n};\nvar Modal_base_getClassNames = classNamesFunction();\nvar Modal_base_COMPONENT_NAME = 'Modal';\nvar Modal_base_ModalBase = /** @class */ (function (_super) {\n    __extends(ModalBase, _super);\n    function ModalBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._focusTrapZone = react[\"createRef\"]();\n        // Allow the user to scroll within the modal but not on the body\n        _this._allowScrollOnModal = function (elt) {\n            if (elt) {\n                if (_this._allowTouchBodyScroll) {\n                    allowOverscrollOnElement(elt, _this._events);\n                }\n                else {\n                    allowScrollOnElement(elt, _this._events);\n                }\n            }\n            else {\n                _this._events.off(_this._scrollableContent);\n            }\n            _this._scrollableContent = elt;\n        };\n        _this._onModalContextMenuClose = function () {\n            _this.setState({ isModalMenuOpen: false });\n        };\n        _this._onModalClose = function () {\n            _this._lastSetX = 0;\n            _this._lastSetY = 0;\n            _this.setState({\n                isModalMenuOpen: false,\n                isInKeyboardMoveMode: false,\n                isOpen: false,\n                x: 0,\n                y: 0,\n            });\n            if (_this.props.dragOptions && _this._hasRegisteredKeyUp) {\n                _this._events.off(window, 'keyup', _this._onKeyUp, true /* useCapture */);\n            }\n            // Call the onDismiss callback\n            if (_this.props.onDismissed) {\n                _this.props.onDismissed();\n            }\n        };\n        _this._onDragStart = function () {\n            _this.setState({ isModalMenuOpen: false, isInKeyboardMoveMode: false });\n        };\n        _this._onDrag = function (_, ui) {\n            var _a = _this.state, x = _a.x, y = _a.y;\n            _this.setState({ x: x + ui.delta.x, y: y + ui.delta.y });\n        };\n        _this._onDragStop = function () {\n            _this.focus();\n        };\n        _this._onKeyUp = function (event) {\n            // Need to handle the CTRL + ALT + SPACE key during keyup due to FireFox bug:\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1220143\n            // Otherwise it would continue to fire a click even if the event was cancelled\n            // during mouseDown.\n            if (event.altKey && event.ctrlKey && event.keyCode === KeyCodes.space) {\n                // Since this is a global handler, we should make sure the target is within the dialog\n                // before opening the dropdown\n                if (elementContains(_this._scrollableContent, event.target)) {\n                    _this.setState({ isModalMenuOpen: !_this.state.isModalMenuOpen });\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            }\n        };\n        // We need a global onKeyDown event when we are in the move mode so that we can\n        // handle the key presses and the components inside the modal do not get the events\n        _this._onKeyDown = function (event) {\n            if (event.altKey && event.ctrlKey && event.keyCode === KeyCodes.space) {\n                // CTRL + ALT + SPACE is handled during keyUp\n                event.preventDefault();\n                event.stopPropagation();\n                return;\n            }\n            if (_this.state.isModalMenuOpen && (event.altKey || event.keyCode === KeyCodes.escape)) {\n                _this.setState({ isModalMenuOpen: false });\n            }\n            if (_this.state.isInKeyboardMoveMode && (event.keyCode === KeyCodes.escape || event.keyCode === KeyCodes.enter)) {\n                _this.setState({ isInKeyboardMoveMode: false });\n                event.preventDefault();\n                event.stopPropagation();\n            }\n            if (_this.state.isInKeyboardMoveMode) {\n                var handledEvent = true;\n                var delta = _this._getMoveDelta(event);\n                switch (event.keyCode) {\n                    /* eslint-disable no-fallthrough */\n                    case KeyCodes.escape:\n                        _this.setState({ x: _this._lastSetX, y: _this._lastSetY });\n                    case KeyCodes.enter: {\n                        // TODO: determine if fallthrough was intentional\n                        /* eslint-enable no-fallthrough */\n                        _this._lastSetX = 0;\n                        _this._lastSetY = 0;\n                        _this.setState({ isInKeyboardMoveMode: false });\n                        break;\n                    }\n                    case KeyCodes.up: {\n                        _this.setState({\n                            y: _this.state.y - delta,\n                        });\n                        break;\n                    }\n                    case KeyCodes.down: {\n                        _this.setState({\n                            y: _this.state.y + delta,\n                        });\n                        break;\n                    }\n                    case KeyCodes.left: {\n                        _this.setState({\n                            x: _this.state.x - delta,\n                        });\n                        break;\n                    }\n                    case KeyCodes.right: {\n                        _this.setState({\n                            x: _this.state.x + delta,\n                        });\n                        break;\n                    }\n                    default: {\n                        handledEvent = false;\n                    }\n                }\n                if (handledEvent) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            }\n        };\n        _this._onEnterKeyboardMoveMode = function () {\n            _this._lastSetX = _this.state.x;\n            _this._lastSetY = _this.state.y;\n            _this.setState({ isInKeyboardMoveMode: true, isModalMenuOpen: false });\n            _this._events.on(window, 'keydown', _this._onKeyDown, true /* useCapture */);\n        };\n        _this._onExitKeyboardMoveMode = function () {\n            _this._lastSetX = 0;\n            _this._lastSetY = 0;\n            _this.setState({ isInKeyboardMoveMode: false });\n            _this._events.off(window, 'keydown', _this._onKeyDown, true /* useCapture */);\n        };\n        _this._registerForKeyUp = function () {\n            if (!_this._hasRegisteredKeyUp) {\n                _this._events.on(window, 'keyup', _this._onKeyUp, true /* useCapture */);\n                _this._hasRegisteredKeyUp = true;\n            }\n        };\n        _this._async = new Async_Async(_this);\n        _this._events = new EventGroup_EventGroup(_this);\n        initializeComponentRef(_this);\n        warnDeprecations(Modal_base_COMPONENT_NAME, props, {\n            onLayerDidMount: 'layerProps.onLayerDidMount',\n        });\n        _this.state = {\n            // TODO: investigate removing\n            // eslint-disable-next-line react/no-unused-state\n            id: getId('Modal'),\n            isOpen: props.isOpen,\n            isVisible: props.isOpen,\n            hasBeenOpened: props.isOpen,\n            x: 0,\n            y: 0,\n        };\n        _this._lastSetX = 0;\n        _this._lastSetY = 0;\n        var _a = _this.props.allowTouchBodyScroll, allowTouchBodyScroll = _a === void 0 ? false : _a;\n        _this._allowTouchBodyScroll = allowTouchBodyScroll;\n        return _this;\n    }\n    ModalBase.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n        clearTimeout(this._onModalCloseTimer);\n        // Opening the dialog\n        if (newProps.isOpen) {\n            if (!this.state.isOpen) {\n                // First Open\n                this.setState({\n                    isOpen: true,\n                });\n                // Add a keyUp handler for all key up events when the dialog is open\n                if (newProps.dragOptions) {\n                    this._registerForKeyUp();\n                }\n            }\n            else {\n                // Modal has been opened\n                // Reopen during closing\n                this.setState({\n                    hasBeenOpened: true,\n                    isVisible: true,\n                });\n                if (newProps.topOffsetFixed) {\n                    var dialogMain = document.getElementsByClassName('ms-Dialog-main');\n                    var modalRectangle = void 0;\n                    if (dialogMain.length > 0) {\n                        modalRectangle = dialogMain[0].getBoundingClientRect();\n                        this.setState({\n                            modalRectangleTop: modalRectangle.top,\n                        });\n                    }\n                }\n            }\n        }\n        // Closing the dialog\n        if (!newProps.isOpen && this.state.isOpen) {\n            this._onModalCloseTimer = this._async.setTimeout(this._onModalClose, parseFloat(animationDuration) * 1000);\n            this.setState({\n                isVisible: false,\n            });\n        }\n    };\n    ModalBase.prototype.componentDidMount = function () {\n        // Not all modals show just by updating their props. Some only render when they are mounted and pass in\n        // isOpen as true. We need to add the keyUp handler in componentDidMount if we are in that case.\n        if (this.state.isOpen && this.state.isVisible) {\n            this._registerForKeyUp();\n        }\n    };\n    ModalBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n        if (!prevProps.isOpen && !prevState.isVisible) {\n            this.setState({\n                isVisible: true,\n            });\n        }\n    };\n    ModalBase.prototype.componentWillUnmount = function () {\n        this._async.dispose();\n        this._events.dispose();\n    };\n    ModalBase.prototype.render = function () {\n        var _a = this.props, className = _a.className, containerClassName = _a.containerClassName, scrollableContentClassName = _a.scrollableContentClassName, elementToFocusOnDismiss = _a.elementToFocusOnDismiss, firstFocusableSelector = _a.firstFocusableSelector, forceFocusInsideTrap = _a.forceFocusInsideTrap, ignoreExternalFocusing = _a.ignoreExternalFocusing, isBlocking = _a.isBlocking, isClickableOutsideFocusTrap = _a.isClickableOutsideFocusTrap, isDarkOverlay = _a.isDarkOverlay, onDismiss = _a.onDismiss, layerProps = _a.layerProps, overlay = _a.overlay, responsiveMode = _a.responsiveMode, titleAriaId = _a.titleAriaId, styles = _a.styles, subtitleAriaId = _a.subtitleAriaId, theme = _a.theme, topOffsetFixed = _a.topOffsetFixed, \n        // eslint-disable-next-line deprecation/deprecation\n        onLayerDidMount = _a.onLayerDidMount, isModeless = _a.isModeless, dragOptions = _a.dragOptions, enableAriaHiddenSiblings = _a.enableAriaHiddenSiblings;\n        var _b = this.state, isOpen = _b.isOpen, isVisible = _b.isVisible, hasBeenOpened = _b.hasBeenOpened, modalRectangleTop = _b.modalRectangleTop, x = _b.x, y = _b.y, isInKeyboardMoveMode = _b.isInKeyboardMoveMode;\n        if (!isOpen) {\n            return null;\n        }\n        var layerClassName = layerProps === undefined ? '' : layerProps.className;\n        var classNames = Modal_base_getClassNames(styles, {\n            theme: theme,\n            className: className,\n            containerClassName: containerClassName,\n            scrollableContentClassName: scrollableContentClassName,\n            isOpen: isOpen,\n            isVisible: isVisible,\n            hasBeenOpened: hasBeenOpened,\n            modalRectangleTop: modalRectangleTop,\n            topOffsetFixed: topOffsetFixed,\n            isModeless: isModeless,\n            layerClassName: layerClassName,\n            isDefaultDragHandle: dragOptions && !dragOptions.dragHandleSelector,\n        });\n        var mergedLayerProps = __assign(__assign(__assign({}, DefaultLayerProps), this.props.layerProps), { onLayerDidMount: layerProps && layerProps.onLayerDidMount ? layerProps.onLayerDidMount : onLayerDidMount, insertFirst: isModeless, className: classNames.layer });\n        var modalContent = (react[\"createElement\"](FocusTrapZone_FocusTrapZone, { componentRef: this._focusTrapZone, className: classNames.main, elementToFocusOnDismiss: elementToFocusOnDismiss, isClickableOutsideFocusTrap: isModeless || isClickableOutsideFocusTrap || !isBlocking, ignoreExternalFocusing: ignoreExternalFocusing, forceFocusInsideTrap: isModeless ? !isModeless : forceFocusInsideTrap, firstFocusableSelector: firstFocusableSelector, focusPreviouslyFocusedInnerElement: true, onBlur: isInKeyboardMoveMode ? this._onExitKeyboardMoveMode : undefined, enableAriaHiddenSiblings: enableAriaHiddenSiblings },\n            dragOptions && isInKeyboardMoveMode && (react[\"createElement\"](\"div\", { className: classNames.keyboardMoveIconContainer }, dragOptions.keyboardMoveIconProps ? (react[\"createElement\"](Icon, __assign({}, dragOptions.keyboardMoveIconProps))) : (react[\"createElement\"](Icon, { iconName: \"move\", className: classNames.keyboardMoveIcon })))),\n            react[\"createElement\"](\"div\", { ref: this._allowScrollOnModal, className: classNames.scrollableContent, \"data-is-scrollable\": true },\n                dragOptions && this.state.isModalMenuOpen && (react[\"createElement\"](dragOptions.menu, { items: [\n                        { key: 'move', text: dragOptions.moveMenuItemText, onClick: this._onEnterKeyboardMoveMode },\n                        { key: 'close', text: dragOptions.closeMenuItemText, onClick: this._onModalClose },\n                    ], onDismiss: this._onModalContextMenuClose, alignTargetEdge: true, coverTarget: true, directionalHint: DirectionalHint.topLeftEdge, directionalHintFixed: true, shouldFocusOnMount: true, target: this._scrollableContent })),\n                this.props.children)));\n        // @temp tuatology - Will adjust this to be a panel at certain breakpoints\n        if (responsiveMode >= ResponsiveMode.small) {\n            return (react[\"createElement\"](Layer, __assign({}, mergedLayerProps),\n                react[\"createElement\"](Popup_Popup, { role: isModeless || !isBlocking ? 'dialog' : 'alertdialog', \"aria-modal\": !isModeless, ariaLabelledBy: titleAriaId, ariaDescribedBy: subtitleAriaId, onDismiss: onDismiss, shouldRestoreFocus: !ignoreExternalFocusing },\n                    react[\"createElement\"](\"div\", { className: classNames.root, role: !isModeless ? 'document' : undefined },\n                        !isModeless && (react[\"createElement\"](Overlay, __assign({ isDarkThemed: isDarkOverlay, onClick: isBlocking ? undefined : onDismiss, allowTouchBodyScroll: this._allowTouchBodyScroll }, overlay))),\n                        dragOptions ? (react[\"createElement\"](DraggableZone_DraggableZone, { handleSelector: dragOptions.dragHandleSelector || \".\" + classNames.main.split(' ')[0], preventDragSelector: \"button\", onStart: this._onDragStart, onDragChange: this._onDrag, onStop: this._onDragStop, position: { x: x, y: y } }, modalContent)) : (modalContent)))));\n        }\n        return null;\n    };\n    ModalBase.prototype.focus = function () {\n        if (this._focusTrapZone.current) {\n            this._focusTrapZone.current.focus();\n        }\n    };\n    ModalBase.prototype._getMoveDelta = function (event) {\n        var delta = 10;\n        if (event.shiftKey) {\n            if (!event.ctrlKey) {\n                delta = 50;\n            }\n        }\n        else if (event.ctrlKey) {\n            delta = 1;\n        }\n        return delta;\n    };\n    ModalBase.defaultProps = {\n        isOpen: false,\n        isDarkOverlay: true,\n        isBlocking: false,\n        className: '',\n        containerClassName: '',\n    };\n    ModalBase = __decorate([\n        withResponsiveMode\n    ], ModalBase);\n    return ModalBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=Modal.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Modal/Modal.js\n\n\n\nvar Modal = styled(Modal_base_ModalBase, Modal_styles_getStyles, undefined, {\n    scope: 'Modal',\n    fields: ['theme', 'styles', 'enableAriaHiddenSiblings'],\n});\n//# sourceMappingURL=Modal.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Dialog/DialogFooter.base.js\n\n\n\nvar DialogFooter_base_getClassNames = classNamesFunction();\nvar DialogFooter_base_DialogFooterBase = /** @class */ (function (_super) {\n    __extends(DialogFooterBase, _super);\n    function DialogFooterBase(props) {\n        var _this = _super.call(this, props) || this;\n        initializeComponentRef(_this);\n        return _this;\n    }\n    DialogFooterBase.prototype.render = function () {\n        var _a = this.props, className = _a.className, styles = _a.styles, theme = _a.theme;\n        this._classNames = DialogFooter_base_getClassNames(styles, {\n            theme: theme,\n            className: className,\n        });\n        return (react[\"createElement\"](\"div\", { className: this._classNames.actions },\n            react[\"createElement\"](\"div\", { className: this._classNames.actionsRight }, this._renderChildrenAsActions())));\n    };\n    DialogFooterBase.prototype._renderChildrenAsActions = function () {\n        var _this = this;\n        return react[\"Children\"].map(this.props.children, function (child) {\n            return child ? react[\"createElement\"](\"span\", { className: _this._classNames.action }, child) : null;\n        });\n    };\n    return DialogFooterBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=DialogFooter.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Dialog/DialogFooter.styles.js\n\nvar DialogFooter_styles_GlobalClassNames = {\n    actions: 'ms-Dialog-actions',\n    action: 'ms-Dialog-action',\n    actionsRight: 'ms-Dialog-actionsRight',\n};\nvar DialogFooter_styles_getStyles = function (props) {\n    var className = props.className, theme = props.theme;\n    var classNames = getGlobalClassNames(DialogFooter_styles_GlobalClassNames, theme);\n    return {\n        actions: [\n            classNames.actions,\n            {\n                position: 'relative',\n                width: '100%',\n                minHeight: '24px',\n                lineHeight: '24px',\n                margin: '16px 0 0',\n                fontSize: '0',\n                selectors: {\n                    '.ms-Button': {\n                        lineHeight: 'normal',\n                    },\n                },\n            },\n            className,\n        ],\n        action: [\n            classNames.action,\n            {\n                margin: '0 4px',\n            },\n        ],\n        actionsRight: [\n            classNames.actionsRight,\n            {\n                textAlign: 'right',\n                marginRight: '-4px',\n                fontSize: '0',\n            },\n        ],\n    };\n};\n//# sourceMappingURL=DialogFooter.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Dialog/DialogFooter.js\n\n\n\nvar DialogFooter = styled(DialogFooter_base_DialogFooterBase, DialogFooter_styles_getStyles, undefined, { scope: 'DialogFooter' });\n//# sourceMappingURL=DialogFooter.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Dialog/DialogContent.base.js\n\n\n\n\n\n\n\nvar DialogContent_base_getClassNames = classNamesFunction();\nvar DialogFooterType = (react[\"createElement\"](DialogFooter, null)).type;\nvar DialogContent_base_COMPONENT_NAME = 'DialogContent';\nvar DialogContent_base_DialogContentBase = /** @class */ (function (_super) {\n    __extends(DialogContentBase, _super);\n    function DialogContentBase(props) {\n        var _this = _super.call(this, props) || this;\n        initializeComponentRef(_this);\n        warnDeprecations(DialogContent_base_COMPONENT_NAME, props, {\n            titleId: 'titleProps.id',\n        });\n        return _this;\n    }\n    DialogContentBase.prototype.render = function () {\n        var _a = this.props, showCloseButton = _a.showCloseButton, className = _a.className, closeButtonAriaLabel = _a.closeButtonAriaLabel, onDismiss = _a.onDismiss, subTextId = _a.subTextId, subText = _a.subText, _b = _a.titleProps, titleProps = _b === void 0 ? {} : _b, \n        // eslint-disable-next-line deprecation/deprecation\n        titleId = _a.titleId, title = _a.title, type = _a.type, styles = _a.styles, theme = _a.theme, draggableHeaderClassName = _a.draggableHeaderClassName;\n        var classNames = DialogContent_base_getClassNames(styles, {\n            theme: theme,\n            className: className,\n            isLargeHeader: type === DialogType.largeHeader,\n            isClose: type === DialogType.close,\n            draggableHeaderClassName: draggableHeaderClassName,\n        });\n        var groupings = this._groupChildren();\n        var subTextContent;\n        if (subText) {\n            subTextContent = (react[\"createElement\"](\"p\", { className: classNames.subText, id: subTextId }, subText));\n        }\n        return (react[\"createElement\"](\"div\", { className: classNames.content },\n            react[\"createElement\"](\"div\", { className: classNames.header },\n                react[\"createElement\"](\"div\", __assign({ id: titleId, role: \"heading\", \"aria-level\": 1 }, titleProps, { className: css(classNames.title, titleProps.className) }), title),\n                react[\"createElement\"](\"div\", { className: classNames.topButton },\n                    this.props.topButtonsProps.map(function (props, index) { return (react[\"createElement\"](IconButton_IconButton, __assign({ key: props.uniqueId || index }, props))); }),\n                    (type === DialogType.close || (showCloseButton && type !== DialogType.largeHeader)) && (react[\"createElement\"](IconButton_IconButton, { className: classNames.button, iconProps: { iconName: 'Cancel' }, ariaLabel: closeButtonAriaLabel, onClick: onDismiss, title: closeButtonAriaLabel })))),\n            react[\"createElement\"](\"div\", { className: classNames.inner },\n                react[\"createElement\"](\"div\", { className: classNames.innerContent },\n                    subTextContent,\n                    groupings.contents),\n                groupings.footers)));\n    };\n    // @TODO - typing the footers as an array of DialogFooter is difficult because\n    // casing \"child as DialogFooter\" causes a problem because\n    // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n    DialogContentBase.prototype._groupChildren = function () {\n        var groupings = {\n            footers: [],\n            contents: [],\n        };\n        react[\"Children\"].map(this.props.children, function (child) {\n            if (typeof child === 'object' && child !== null && child.type === DialogFooterType) {\n                groupings.footers.push(child);\n            }\n            else {\n                groupings.contents.push(child);\n            }\n        });\n        return groupings;\n    };\n    DialogContentBase.defaultProps = {\n        showCloseButton: false,\n        className: '',\n        topButtonsProps: [],\n        closeButtonAriaLabel: 'Close',\n    };\n    DialogContentBase = __decorate([\n        withResponsiveMode\n    ], DialogContentBase);\n    return DialogContentBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=DialogContent.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Dialog/DialogContent.styles.js\n\nvar DialogContent_styles_GlobalClassNames = {\n    contentLgHeader: 'ms-Dialog-lgHeader',\n    close: 'ms-Dialog--close',\n    subText: 'ms-Dialog-subText',\n    header: 'ms-Dialog-header',\n    headerLg: 'ms-Dialog--lgHeader',\n    button: 'ms-Dialog-button ms-Dialog-button--close',\n    inner: 'ms-Dialog-inner',\n    content: 'ms-Dialog-content',\n    title: 'ms-Dialog-title',\n};\nvar DialogContent_styles_getStyles = function (props) {\n    var _a, _b, _c;\n    var className = props.className, theme = props.theme, isLargeHeader = props.isLargeHeader, isClose = props.isClose, hidden = props.hidden, isMultiline = props.isMultiline, draggableHeaderClassName = props.draggableHeaderClassName;\n    var palette = theme.palette, fonts = theme.fonts, effects = theme.effects, semanticColors = theme.semanticColors;\n    var classNames = getGlobalClassNames(DialogContent_styles_GlobalClassNames, theme);\n    return {\n        content: [\n            isLargeHeader && [\n                classNames.contentLgHeader,\n                {\n                    borderTop: \"4px solid \" + palette.themePrimary,\n                },\n            ],\n            isClose && classNames.close,\n            {\n                flexGrow: 1,\n                overflowY: 'hidden',\n            },\n            className,\n        ],\n        subText: [\n            classNames.subText,\n            fonts.medium,\n            {\n                margin: '0 0 24px 0',\n                color: semanticColors.bodySubtext,\n                lineHeight: '1.5',\n                wordWrap: 'break-word',\n                fontWeight: FontWeights.regular,\n            },\n        ],\n        header: [\n            classNames.header,\n            {\n                position: 'relative',\n                width: '100%',\n                boxSizing: 'border-box',\n            },\n            isClose && classNames.close,\n            draggableHeaderClassName && [\n                draggableHeaderClassName,\n                {\n                    cursor: 'move',\n                },\n            ],\n        ],\n        button: [\n            classNames.button,\n            hidden && {\n                selectors: {\n                    '.ms-Icon.ms-Icon--Cancel': {\n                        color: semanticColors.buttonText,\n                        fontSize: IconFontSizes.medium,\n                    },\n                },\n            },\n        ],\n        inner: [\n            classNames.inner,\n            {\n                padding: '0 24px 24px',\n                selectors: (_a = {},\n                    _a[\"@media (min-width: \" + ScreenWidthMinSmall + \"px) and (max-width: \" + ScreenWidthMaxSmall + \"px)\"] = {\n                        padding: '0 16px 16px',\n                    },\n                    _a),\n            },\n        ],\n        innerContent: [\n            classNames.content,\n            {\n                position: 'relative',\n                width: '100%',\n            },\n        ],\n        title: [\n            classNames.title,\n            fonts.xLarge,\n            {\n                color: semanticColors.bodyText,\n                margin: '0',\n                minHeight: fonts.xLarge.fontSize,\n                padding: '16px 46px 20px 24px',\n                lineHeight: 'normal',\n                selectors: (_b = {},\n                    _b[\"@media (min-width: \" + ScreenWidthMinSmall + \"px) and (max-width: \" + ScreenWidthMaxSmall + \"px)\"] = {\n                        padding: '16px 46px 16px 16px',\n                    },\n                    _b),\n            },\n            isLargeHeader && {\n                color: semanticColors.menuHeader,\n            },\n            isMultiline && { fontSize: fonts.xxLarge.fontSize },\n        ],\n        topButton: [\n            {\n                display: 'flex',\n                flexDirection: 'row',\n                flexWrap: 'nowrap',\n                position: 'absolute',\n                top: '0',\n                right: '0',\n                padding: '15px 15px 0 0',\n                selectors: (_c = {\n                        '> *': {\n                            flex: '0 0 auto',\n                        },\n                        '.ms-Dialog-button': {\n                            color: semanticColors.buttonText,\n                        },\n                        '.ms-Dialog-button:hover': {\n                            color: semanticColors.buttonTextHovered,\n                            borderRadius: effects.roundedCorner2,\n                        }\n                    },\n                    _c[\"@media (min-width: \" + ScreenWidthMinSmall + \"px) and (max-width: \" + ScreenWidthMaxSmall + \"px)\"] = {\n                        padding: '15px 8px 0 0',\n                    },\n                    _c),\n            },\n        ],\n    };\n};\n//# sourceMappingURL=DialogContent.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Dialog/DialogContent.js\n\n\n\nvar DialogContent = styled(DialogContent_base_DialogContentBase, DialogContent_styles_getStyles, undefined, { scope: 'DialogContent' });\n//# sourceMappingURL=DialogContent.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Dialog/Dialog.base.js\n\n\n\n\n\n\nvar Dialog_base_getClassNames = classNamesFunction();\n\nvar DefaultModalProps = {\n    isDarkOverlay: false,\n    isBlocking: false,\n    className: '',\n    containerClassName: '',\n    topOffsetFixed: false,\n};\nvar DefaultDialogContentProps = {\n    type: DialogType.normal,\n    className: '',\n    topButtonsProps: [],\n};\nvar Dialog_base_DialogBase = /** @class */ (function (_super) {\n    __extends(DialogBase, _super);\n    function DialogBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._getSubTextId = function () {\n            // eslint-disable-next-line deprecation/deprecation\n            var _a = _this.props, ariaDescribedById = _a.ariaDescribedById, modalProps = _a.modalProps, dialogContentProps = _a.dialogContentProps, subText = _a.subText;\n            var id = (modalProps && modalProps.subtitleAriaId) || ariaDescribedById;\n            if (!id) {\n                id = ((dialogContentProps && dialogContentProps.subText) || subText) && _this._defaultSubTextId;\n            }\n            return id;\n        };\n        _this._getTitleTextId = function () {\n            // eslint-disable-next-line deprecation/deprecation\n            var _a = _this.props, ariaLabelledById = _a.ariaLabelledById, modalProps = _a.modalProps, dialogContentProps = _a.dialogContentProps, title = _a.title;\n            var id = (modalProps && modalProps.titleAriaId) || ariaLabelledById;\n            if (!id) {\n                id = ((dialogContentProps && dialogContentProps.title) || title) && _this._defaultTitleTextId;\n            }\n            return id;\n        };\n        _this._id = getId('Dialog');\n        _this._defaultTitleTextId = _this._id + '-title';\n        _this._defaultSubTextId = _this._id + '-subText';\n        if (false) {}\n        return _this;\n    }\n    DialogBase.prototype.render = function () {\n        var _a, _b;\n        var _c = this.props, \n        /* eslint-disable deprecation/deprecation */\n        className = _c.className, containerClassName = _c.containerClassName, contentClassName = _c.contentClassName, elementToFocusOnDismiss = _c.elementToFocusOnDismiss, firstFocusableSelector = _c.firstFocusableSelector, forceFocusInsideTrap = _c.forceFocusInsideTrap, styles = _c.styles, hidden = _c.hidden, ignoreExternalFocusing = _c.ignoreExternalFocusing, isBlocking = _c.isBlocking, isClickableOutsideFocusTrap = _c.isClickableOutsideFocusTrap, isDarkOverlay = _c.isDarkOverlay, isOpen = _c.isOpen, onDismiss = _c.onDismiss, onDismissed = _c.onDismissed, onLayerDidMount = _c.onLayerDidMount, responsiveMode = _c.responsiveMode, subText = _c.subText, theme = _c.theme, title = _c.title, topButtonsProps = _c.topButtonsProps, type = _c.type, \n        /* eslint-enable deprecation/deprecation */\n        minWidth = _c.minWidth, maxWidth = _c.maxWidth, modalProps = _c.modalProps;\n        var mergedLayerProps = __assign({}, (modalProps ? modalProps.layerProps : { onLayerDidMount: onLayerDidMount }));\n        if (onLayerDidMount && !mergedLayerProps.onLayerDidMount) {\n            mergedLayerProps.onLayerDidMount = onLayerDidMount;\n        }\n        var dialogDraggableClassName;\n        var dragOptions;\n        // if we are draggable, make sure we are using the correct\n        // draggable classname and selectors\n        if (modalProps && modalProps.dragOptions && !modalProps.dragOptions.dragHandleSelector) {\n            dialogDraggableClassName = 'ms-Dialog-draggable-header';\n            dragOptions = __assign(__assign({}, modalProps.dragOptions), { dragHandleSelector: \".\" + dialogDraggableClassName });\n        }\n        else {\n            dragOptions = modalProps && modalProps.dragOptions;\n        }\n        var mergedModalProps = __assign(__assign(__assign(__assign({}, DefaultModalProps), { className: className,\n            containerClassName: containerClassName,\n            isBlocking: isBlocking,\n            isDarkOverlay: isDarkOverlay,\n            onDismissed: onDismissed }), modalProps), { layerProps: mergedLayerProps, dragOptions: dragOptions });\n        var dialogContentProps = __assign(__assign(__assign({ className: contentClassName, subText: subText,\n            title: title,\n            topButtonsProps: topButtonsProps,\n            type: type }, DefaultDialogContentProps), this.props.dialogContentProps), { draggableHeaderClassName: dialogDraggableClassName, titleProps: __assign({ \n                // eslint-disable-next-line deprecation/deprecation\n                id: ((_a = this.props.dialogContentProps) === null || _a === void 0 ? void 0 : _a.titleId) || this._defaultTitleTextId }, (_b = this.props.dialogContentProps) === null || _b === void 0 ? void 0 : _b.titleProps) });\n        var classNames = Dialog_base_getClassNames(styles, {\n            theme: theme,\n            className: mergedModalProps.className,\n            containerClassName: mergedModalProps.containerClassName,\n            hidden: hidden,\n            dialogDefaultMinWidth: minWidth,\n            dialogDefaultMaxWidth: maxWidth,\n        });\n        return (react[\"createElement\"](Modal, __assign({ elementToFocusOnDismiss: elementToFocusOnDismiss, firstFocusableSelector: firstFocusableSelector, forceFocusInsideTrap: forceFocusInsideTrap, ignoreExternalFocusing: ignoreExternalFocusing, isClickableOutsideFocusTrap: isClickableOutsideFocusTrap, onDismissed: mergedModalProps.onDismissed, responsiveMode: responsiveMode }, mergedModalProps, { isDarkOverlay: mergedModalProps.isDarkOverlay, isBlocking: mergedModalProps.isBlocking, isOpen: isOpen !== undefined ? isOpen : !hidden, className: classNames.root, containerClassName: classNames.main, onDismiss: onDismiss ? onDismiss : mergedModalProps.onDismiss, subtitleAriaId: this._getSubTextId(), titleAriaId: this._getTitleTextId() }),\n            react[\"createElement\"](DialogContent, __assign({ subTextId: this._defaultSubTextId, title: dialogContentProps.title, subText: dialogContentProps.subText, showCloseButton: mergedModalProps.isBlocking, topButtonsProps: dialogContentProps.topButtonsProps, type: dialogContentProps.type, onDismiss: onDismiss ? onDismiss : dialogContentProps.onDismiss, className: dialogContentProps.className }, dialogContentProps), this.props.children)));\n    };\n    DialogBase.defaultProps = {\n        hidden: true,\n    };\n    DialogBase = __decorate([\n        withResponsiveMode\n    ], DialogBase);\n    return DialogBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=Dialog.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Dialog/Dialog.styles.js\n\nvar Dialog_styles_GlobalClassNames = {\n    root: 'ms-Dialog',\n};\nvar Dialog_styles_getStyles = function (props) {\n    var _a;\n    var className = props.className, containerClassName = props.containerClassName, // eslint-disable-line deprecation/deprecation\n    _b = props.dialogDefaultMinWidth, // eslint-disable-line deprecation/deprecation\n    dialogDefaultMinWidth = _b === void 0 ? '288px' : _b, _c = props.dialogDefaultMaxWidth, dialogDefaultMaxWidth = _c === void 0 ? '340px' : _c, hidden = props.hidden, theme = props.theme;\n    var classNames = getGlobalClassNames(Dialog_styles_GlobalClassNames, theme);\n    return {\n        root: [classNames.root, theme.fonts.medium, className],\n        main: [\n            {\n                width: dialogDefaultMinWidth,\n                outline: '3px solid transparent',\n                selectors: (_a = {},\n                    _a[\"@media (min-width: \" + ScreenWidthMinMedium + \"px)\"] = {\n                        width: 'auto',\n                        maxWidth: dialogDefaultMaxWidth,\n                        minWidth: dialogDefaultMinWidth,\n                    },\n                    _a),\n            },\n            !hidden && { display: 'flex' },\n            containerClassName,\n        ],\n    };\n};\n//# sourceMappingURL=Dialog.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/Dialog/Dialog.js\n\n\n\nvar Dialog = styled(Dialog_base_DialogBase, Dialog_styles_getStyles, undefined, { scope: 'Dialog' });\n//# sourceMappingURL=Dialog.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ProgressIndicator/ProgressIndicator.base.js\n\n\n\nvar ProgressIndicator_base_getClassNames = classNamesFunction();\n// if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\nvar ZERO_THRESHOLD = 0.01;\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\nvar ProgressIndicator_base_ProgressIndicatorBase = /** @class */ (function (_super) {\n    __extends(ProgressIndicatorBase, _super);\n    function ProgressIndicatorBase() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._onRenderProgress = function (props) {\n            var _a = _this.props, ariaValueText = _a.ariaValueText, barHeight = _a.barHeight, className = _a.className, styles = _a.styles, theme = _a.theme;\n            var percentComplete = typeof _this.props.percentComplete === 'number'\n                ? Math.min(100, Math.max(0, _this.props.percentComplete * 100))\n                : undefined;\n            var classNames = ProgressIndicator_base_getClassNames(styles, {\n                theme: theme,\n                className: className,\n                barHeight: barHeight,\n                indeterminate: percentComplete === undefined ? true : false,\n            });\n            var progressBarStyles = {\n                width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n                transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined,\n            };\n            var ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n            var ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n            var ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete) : undefined;\n            return (react[\"createElement\"](\"div\", { className: classNames.itemProgress },\n                react[\"createElement\"](\"div\", { className: classNames.progressTrack }),\n                react[\"createElement\"](\"div\", { className: classNames.progressBar, style: progressBarStyles, role: \"progressbar\", \"aria-valuemin\": ariaValueMin, \"aria-valuemax\": ariaValueMax, \"aria-valuenow\": ariaValueNow, \"aria-valuetext\": ariaValueText })));\n        };\n        return _this;\n    }\n    ProgressIndicatorBase.prototype.render = function () {\n        var _a = this.props, barHeight = _a.barHeight, className = _a.className, \n        // eslint-disable-next-line deprecation/deprecation\n        _b = _a.label, \n        // eslint-disable-next-line deprecation/deprecation\n        label = _b === void 0 ? this.props.title : _b, // Fall back to deprecated value.\n        description = _a.description, styles = _a.styles, theme = _a.theme, progressHidden = _a.progressHidden, _c = _a.onRenderProgress, onRenderProgress = _c === void 0 ? this._onRenderProgress : _c;\n        var percentComplete = typeof this.props.percentComplete === 'number'\n            ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n            : undefined;\n        var classNames = ProgressIndicator_base_getClassNames(styles, {\n            theme: theme,\n            className: className,\n            barHeight: barHeight,\n            indeterminate: percentComplete === undefined ? true : false,\n        });\n        return (react[\"createElement\"](\"div\", { className: classNames.root },\n            label ? react[\"createElement\"](\"div\", { className: classNames.itemName }, label) : null,\n            !progressHidden\n                ? onRenderProgress(__assign(__assign({}, this.props), { percentComplete: percentComplete }), this._onRenderProgress)\n                : null,\n            description ? react[\"createElement\"](\"div\", { className: classNames.itemDescription }, description) : null));\n    };\n    ProgressIndicatorBase.defaultProps = {\n        label: '',\n        description: '',\n        width: 180,\n    };\n    return ProgressIndicatorBase;\n}(react[\"Component\"]));\n\n//# sourceMappingURL=ProgressIndicator.base.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ProgressIndicator/ProgressIndicator.styles.js\n\n\n\nvar ProgressIndicator_styles_GlobalClassNames = {\n    root: 'ms-ProgressIndicator',\n    itemName: 'ms-ProgressIndicator-itemName',\n    itemDescription: 'ms-ProgressIndicator-itemDescription',\n    itemProgress: 'ms-ProgressIndicator-itemProgress',\n    progressTrack: 'ms-ProgressIndicator-progressTrack',\n    progressBar: 'ms-ProgressIndicator-progressBar',\n};\nvar IndeterminateProgress = memoizeFunction(function () {\n    return keyframes({\n        '0%': {\n            left: '-30%',\n        },\n        '100%': {\n            left: '100%',\n        },\n    });\n});\nvar IndeterminateProgressRTL = memoizeFunction(function () {\n    return keyframes({\n        '100%': {\n            right: '-30%',\n        },\n        '0%': {\n            right: '100%',\n        },\n    });\n});\nvar ProgressIndicator_styles_getStyles = function (props) {\n    var _a, _b, _c;\n    var isRTL = rtl_getRTL(props.theme);\n    var className = props.className, indeterminate = props.indeterminate, theme = props.theme, _d = props.barHeight, barHeight = _d === void 0 ? 2 : _d;\n    var palette = theme.palette, semanticColors = theme.semanticColors, fonts = theme.fonts;\n    var classNames = getGlobalClassNames(ProgressIndicator_styles_GlobalClassNames, theme);\n    var marginBetweenText = 8;\n    var textHeight = 18;\n    var progressTrackColor = palette.neutralLight;\n    return {\n        root: [classNames.root, fonts.medium, className],\n        itemName: [\n            classNames.itemName,\n            noWrap,\n            {\n                color: semanticColors.bodyText,\n                paddingTop: marginBetweenText / 2,\n                lineHeight: textHeight + 2,\n            },\n        ],\n        itemDescription: [\n            classNames.itemDescription,\n            {\n                color: semanticColors.bodySubtext,\n                fontSize: fonts.small.fontSize,\n                lineHeight: textHeight,\n            },\n        ],\n        itemProgress: [\n            classNames.itemProgress,\n            {\n                position: 'relative',\n                overflow: 'hidden',\n                height: barHeight,\n                padding: marginBetweenText + \"px 0\",\n            },\n        ],\n        progressTrack: [\n            classNames.progressTrack,\n            {\n                position: 'absolute',\n                width: '100%',\n                height: barHeight,\n                backgroundColor: progressTrackColor,\n                selectors: (_a = {},\n                    _a[HighContrastSelector] = {\n                        borderBottom: '1px solid WindowText',\n                    },\n                    _a),\n            },\n        ],\n        progressBar: [\n            {\n                backgroundColor: palette.themePrimary,\n                height: barHeight,\n                position: 'absolute',\n                transition: 'width .3s ease',\n                width: 0,\n                selectors: __assign((_b = {}, _b[HighContrastSelector] = {\n                    backgroundColor: 'highlight',\n                }, _b), getEdgeChromiumNoHighContrastAdjustSelector()),\n            },\n            indeterminate\n                ? {\n                    position: 'absolute',\n                    minWidth: '33%',\n                    background: \"linear-gradient(to right, \" + progressTrackColor + \" 0%, \" +\n                        (palette.themePrimary + \" 50%, \" + progressTrackColor + \" 100%)\"),\n                    animation: (isRTL ? IndeterminateProgressRTL() : IndeterminateProgress()) + \" 3s infinite\",\n                    selectors: (_c = {},\n                        _c[HighContrastSelector] = {\n                            background: \"highlight\",\n                        },\n                        _c),\n                }\n                : {\n                    transition: 'width .15s linear',\n                },\n            classNames.progressBar,\n        ],\n    };\n};\n//# sourceMappingURL=ProgressIndicator.styles.js.map\n// CONCATENATED MODULE: ./node_modules/office-ui-fabric-react/lib/components/ProgressIndicator/ProgressIndicator.js\n\n\n\n/**\n * ProgressIndicator description\n */\nvar ProgressIndicator = styled(ProgressIndicator_base_ProgressIndicatorBase, ProgressIndicator_styles_getStyles, undefined, { scope: 'ProgressIndicator' });\n//# sourceMappingURL=ProgressIndicator.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/react-hooks/lib/useId.js\n\n\n/**\n * Hook to generate a unique ID in the global scope (spanning across duplicate copies of the same library).\n *\n * @param prefix - Optional prefix for the ID\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\n *  without conditioning the hook call\n * @returns The ID\n */\nfunction useId(prefix, providedId) {\n    // getId should only be called once since it updates the global constant for the next ID value.\n    // (While an extra update isn't likely to cause problems in practice, it's better to avoid it.)\n    var ref = react[\"useRef\"](providedId);\n    if (!ref.current) {\n        ref.current = getId(prefix);\n    }\n    return ref.current;\n}\n//# sourceMappingURL=useId.js.map\n// EXTERNAL MODULE: ../webadb/node_modules/@yume-chan/async-operation-manager/lib/index.js\nvar async_operation_manager_lib = __webpack_require__(11);\nvar lib_default = /*#__PURE__*/__webpack_require__.n(async_operation_manager_lib);\n\n// CONCATENATED MODULE: ../webadb/lib/base64.js\nlet characterSet = [];\nconst pairs = [\n    ['A', 'Z'],\n    ['a', 'z'],\n    ['0', '9'],\n].map(pair => pair.map(character => character.charCodeAt(0)));\nfor (const [begin, end] of pairs) {\n    for (let i = begin; i <= end; i += 1) {\n        characterSet.push(String.fromCharCode(i));\n    }\n}\ncharacterSet.push('+', '/');\nfunction toBase64(buffer) {\n    const array = new Uint8Array(buffer);\n    const length = buffer.byteLength;\n    const remainder = length % 3;\n    let result = '';\n    for (let i = 0; i < length - remainder; i += 3) {\n        // aaaaaabb\n        const x = array[i];\n        // bbbbcccc\n        const y = array[i + 1];\n        // ccdddddd\n        const z = array[i + 2];\n        const a = x >> 2;\n        const b = ((x & 0b11) << 4) | (y >> 4);\n        const c = ((y & 0b1111) << 2) | (z >> 6);\n        const d = z & 0b111111;\n        result += characterSet[a] + characterSet[b] + characterSet[c] + characterSet[d];\n    }\n    if (remainder === 1) {\n        // aaaaaabb\n        const x = array[length - 1];\n        const a = x >> 2;\n        const b = ((x & 0b11) << 4);\n        result += characterSet[a] + characterSet[b] + '==';\n    }\n    else if (remainder === 2) {\n        // aaaaaabb\n        const x = array[length - 2];\n        // bbbbcccc\n        const y = array[length - 1];\n        const a = x >> 2;\n        const b = ((x & 0b11) << 4) | (y >> 4);\n        const c = ((y & 0b1111) << 2);\n        result = characterSet[a] + characterSet[b] + characterSet[c] + '=';\n    }\n    return result;\n}\n//# sourceMappingURL=base64.js.map\n// CONCATENATED MODULE: ../webadb/lib/packet.js\nconst textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\n// TextEncoder.prototype.encodeInto added in Chrome 74\n// Edge for Android 44 is still using Chromium 73\nif (!TextEncoder.prototype.encodeInto) {\n    TextEncoder.prototype.encodeInto = function (source, destination) {\n        const array = this.encode(source);\n        destination.set(array);\n        return { read: source.length, written: array.length };\n    };\n}\nclass AdbPacket {\n    constructor(command, arg0, arg1, payload) {\n        if (command.length !== 4) {\n            throw new TypeError('length of command must be 4');\n        }\n        this.command = command;\n        this.arg0 = arg0;\n        this.arg1 = arg1;\n        if (typeof payload === \"string\") {\n            this.payload = textEncoder.encode(payload + '\\0').buffer;\n        }\n        else {\n            this.payload = payload;\n        }\n    }\n    static parse(buffer) {\n        const command = textDecoder.decode(buffer.slice(0, 4));\n        const view = new DataView(buffer);\n        const arg0 = view.getUint32(4, true);\n        const arg1 = view.getUint32(8, true);\n        const payloadLength = view.getUint32(12, true);\n        const packet = new AdbPacket(command, arg0, arg1, undefined);\n        packet._payloadLength = payloadLength;\n        return packet;\n    }\n    get payloadLength() { return this._payloadLength; }\n    get payload() { return this._payload; }\n    set payload(value) {\n        if (value !== undefined) {\n            this._payloadLength = value.byteLength;\n            this._payload = value;\n        }\n        else {\n            this._payloadLength = 0;\n            this._payload = undefined;\n        }\n    }\n    toBuffer() {\n        const buffer = new ArrayBuffer(24);\n        const array = new Uint8Array(buffer);\n        const view = new DataView(buffer);\n        textEncoder.encodeInto(this.command, array);\n        view.setUint32(4, this.arg0, true);\n        view.setUint32(8, this.arg1, true);\n        view.setUint32(12, this.payloadLength, true);\n        view.setUint32(16, /* checksum */ 0, true);\n        view.setUint32(20, /* magic */ view.getUint32(0, true) ^ 0xFFFFFFFF, true);\n        return buffer;\n    }\n}\n//# sourceMappingURL=packet.js.map\n// EXTERNAL MODULE: ../event/lib/index.js\nvar event_lib = __webpack_require__(15);\n\n// CONCATENATED MODULE: ../webadb/lib/stream.js\n\n\nclass stream_AutoResetEvent {\n    constructor() {\n        this._list = [];\n        this._blocking = false;\n    }\n    wait() {\n        if (!this._blocking) {\n            this._blocking = true;\n            if (this._list.length === 0) {\n                return Promise.resolve();\n            }\n        }\n        const resolver = new async_operation_manager_lib[\"PromiseResolver\"]();\n        this._list.push(resolver);\n        return resolver.promise;\n    }\n    notify() {\n        if (this._list.length !== 0) {\n            this._list.pop().resolve();\n        }\n        else {\n            this._blocking = false;\n        }\n    }\n}\nclass stream_AdbStream {\n    constructor(adb, localId, remoteId) {\n        this._writeMutex = new stream_AutoResetEvent();\n        this.onDataEvent = new event_lib[\"EventEmitter\"]();\n        this.onCloseEvent = new event_lib[\"EventEmitter\"]();\n        this._adb = adb;\n        this.localId = localId;\n        this.remoteId = remoteId;\n    }\n    get onData() { return this.onDataEvent.event; }\n    get onClose() { return this.onCloseEvent.event; }\n    async write(data) {\n        await this._writeMutex.wait();\n        await this._adb.sendMessage('WRTE', this.localId, this.remoteId, data);\n    }\n    async close() {\n        await this._adb.sendMessage('CLSE', this.localId, this.remoteId);\n    }\n    ack() {\n        this._writeMutex.notify();\n    }\n}\n//# sourceMappingURL=stream.js.map\n// CONCATENATED MODULE: ../webadb/lib/webadb.js\n\n\n\n\nconst AdbDeviceFilter = { classCode: 0xFF, subclassCode: 0x42, protocolCode: 1 };\nclass webadb_WebAdb {\n    constructor(transportation) {\n        this._alive = true;\n        this._looping = false;\n        // ADB requires stream id to start from 1\n        // (0 means open failed)\n        this._streamInitializer = new lib_default.a(1);\n        this._streams = new Map();\n        this._transportation = transportation;\n    }\n    get name() { return this._transportation.name; }\n    async receiveLoop() {\n        var _a, _b, _c;\n        if (this._looping) {\n            return;\n        }\n        this._looping = true;\n        while (this._alive) {\n            const response = await this.receiveMessage();\n            switch (response.command) {\n                case 'OKAY':\n                    // OKAY has two meanings\n                    // 1. The device has created the Stream\n                    this._streamInitializer.resolve(response.arg1, response.arg0);\n                    // 2. The device has received last WRTE to the Stream\n                    (_a = this._streams.get(response.arg1)) === null || _a === void 0 ? void 0 : _a.ack();\n                    break;\n                case 'CLSE':\n                    // CLSE also has two meanings\n                    if (response.arg0 === 0) {\n                        // 1. The device don't want to create the Stream\n                        this._streamInitializer.reject(response.arg1, new Error('open failed'));\n                    }\n                    else {\n                        // 2. The device has closed the Stream\n                        (_b = this._streams.get(response.arg1)) === null || _b === void 0 ? void 0 : _b.onCloseEvent.fire();\n                        this._streams.delete(response.arg1);\n                    }\n                    break;\n                case 'WRTE':\n                    (_c = this._streams.get(response.arg1)) === null || _c === void 0 ? void 0 : _c.onDataEvent.fire(response.payload);\n                    await this.sendMessage('OKAY', response.arg1, response.arg0);\n                    break;\n                default:\n                    this._transportation.dispose();\n                    throw new Error('unknown command');\n            }\n        }\n    }\n    async connect() {\n        const version = 0x01000001;\n        await this.sendMessage('CNXN', version, 256 * 1024, 'host::');\n        while (true) {\n            const response = await this.receiveMessage();\n            switch (response.command) {\n                case 'CNXN':\n                    if (response.arg0 !== version) {\n                        this._transportation.dispose();\n                        throw new Error('version mismatch');\n                    }\n                    return;\n                case 'AUTH':\n                    if (response.arg0 !== 1) {\n                        this._transportation.dispose();\n                        throw new Error('unknown auth type');\n                    }\n                    const key = await this.generateKey();\n                    const publicKey = await crypto.subtle.exportKey('spki', key.publicKey);\n                    await this.sendMessage('AUTH', 3, 0, toBase64(publicKey));\n                    break;\n                default:\n                    this._transportation.dispose();\n                    throw new Error('unknown command');\n            }\n        }\n    }\n    async shell(command, ...args) {\n        if (!command) {\n            return this.createStream('shell:');\n        }\n        else {\n            return this.createStreamAndWait(`shell:${command} ${args.join(' ')}`);\n        }\n    }\n    async tcpip(port = 5555) {\n        return this.createStreamAndWait(`tcpip:${port}`);\n    }\n    async usb() {\n        return this.createStreamAndWait('usb:');\n    }\n    async sendMessage(command, arg0, arg1, payload) {\n        const packet = new AdbPacket(command, arg0, arg1, payload);\n        console.log('send', command, arg0, arg1, payload);\n        await this._transportation.write(packet.toBuffer());\n        if (packet.payloadLength !== 0) {\n            await this._transportation.write(packet.payload);\n        }\n    }\n    async createStream(command) {\n        const { id: localId, promise: initializer } = this._streamInitializer.add();\n        await this.sendMessage('OPEN', localId, 0, command);\n        this.receiveLoop();\n        const remoteId = await initializer;\n        const stream = new stream_AdbStream(this, localId, remoteId);\n        this._streams.set(localId, stream);\n        return stream;\n    }\n    async createStreamAndWait(command) {\n        const stream = await this.createStream(command);\n        return new Promise((resolve) => {\n            let output = '';\n            const decoder = new TextDecoder();\n            stream.onData((data) => {\n                output += decoder.decode(data);\n            });\n            stream.onClose(() => {\n                resolve(output);\n            });\n        });\n    }\n    async receiveMessage() {\n        console.log('receiving');\n        const header = await this.receiveData(24);\n        const packet = AdbPacket.parse(header);\n        if (packet.payloadLength !== 0) {\n            packet.payload = await this.receiveData(packet.payloadLength);\n        }\n        console.log('receive', packet.command, packet.arg0, packet.arg1, packet.payload);\n        return packet;\n    }\n    async receiveData(length) {\n        return await this._transportation.read(length);\n    }\n    async generateKey() {\n        return await crypto.subtle.generateKey({\n            name: 'RSASSA-PKCS1-v1_5',\n            modulusLength: 2048,\n            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n            hash: { name: 'SHA-1' },\n        }, false, ['sign', 'verify']);\n    }\n    async dispose() {\n        for (const [localId, stream] of this._streams) {\n            await stream.close();\n        }\n        await this._transportation.dispose();\n    }\n}\n//# sourceMappingURL=webadb.js.map\n// CONCATENATED MODULE: ../webadb/lib/transportation.js\nconst WebUsbDeviceFilter = {\n    classCode: 0xFF,\n    subclassCode: 0x42,\n    protocolCode: 1,\n};\nclass WebUsbTransportation {\n    constructor(device, inEndPointNumber, outEndPointNumber) {\n        this._device = device;\n        this._inEndpointNumber = inEndPointNumber;\n        this._outEndpointNumber = outEndPointNumber;\n    }\n    static async pickDevice() {\n        var _a;\n        try {\n            const device = await navigator.usb.requestDevice({ filters: [WebUsbDeviceFilter] });\n            await device.open();\n            let inEndpointNumber;\n            let outEndpointNumber;\n            for (const configuration of device.configurations) {\n                for (const interface_ of configuration.interfaces) {\n                    for (const alternate of interface_.alternates) {\n                        if (alternate.interfaceSubclass === WebUsbDeviceFilter.subclassCode &&\n                            alternate.interfaceClass === WebUsbDeviceFilter.classCode &&\n                            alternate.interfaceSubclass === WebUsbDeviceFilter.subclassCode) {\n                            if (((_a = device.configuration) === null || _a === void 0 ? void 0 : _a.configurationValue) !== configuration.configurationValue) {\n                                await device.selectConfiguration(configuration.configurationValue);\n                            }\n                            if (!interface_.claimed) {\n                                await device.claimInterface(interface_.interfaceNumber);\n                            }\n                            if (interface_.alternate.alternateSetting !== alternate.alternateSetting) {\n                                await device.selectAlternateInterface(interface_.interfaceNumber, alternate.alternateSetting);\n                            }\n                            for (const endpoint of alternate.endpoints) {\n                                switch (endpoint.direction) {\n                                    case 'in':\n                                        inEndpointNumber = endpoint.endpointNumber;\n                                        if (outEndpointNumber !== undefined) {\n                                            return new WebUsbTransportation(device, inEndpointNumber, outEndpointNumber);\n                                        }\n                                        break;\n                                    case 'out':\n                                        outEndpointNumber = endpoint.endpointNumber;\n                                        if (inEndpointNumber !== undefined) {\n                                            return new WebUsbTransportation(device, inEndpointNumber, outEndpointNumber);\n                                        }\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            throw new Error('Unknown error');\n        }\n        catch (e) {\n            switch (e.name) {\n                case 'NetworkError':\n                    throw new Error('Cannot connect to device. Make sure ADB is not running');\n                case 'NotFoundError':\n                    return undefined;\n                default:\n                    throw e;\n            }\n        }\n    }\n    get name() { return this._device.productName; }\n    async write(buffer) {\n        await this._device.transferOut(this._outEndpointNumber, buffer);\n    }\n    async read(length) {\n        const result = await this._device.transferIn(this._inEndpointNumber, length);\n        if (result.status === 'stall') {\n            await this._device.clearHalt('in', this._inEndpointNumber);\n        }\n        return result.data.buffer;\n    }\n    async dispose() {\n        await this._device.close();\n    }\n}\n//# sourceMappingURL=transportation.js.map\n// CONCATENATED MODULE: ../webadb/lib/index.js\n\n\n//# sourceMappingURL=index.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none',\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-a13498cf.woff') format('woff')\",\n        },\n        icons: {\n            GlobalNavButton: '\\uE700',\n            ChevronDown: '\\uE70D',\n            ChevronUp: '\\uE70E',\n            Edit: '\\uE70F',\n            Add: '\\uE710',\n            Cancel: '\\uE711',\n            More: '\\uE712',\n            Settings: '\\uE713',\n            Mail: '\\uE715',\n            Filter: '\\uE71C',\n            Search: '\\uE721',\n            Share: '\\uE72D',\n            BlockedSite: '\\uE72F',\n            FavoriteStar: '\\uE734',\n            FavoriteStarFill: '\\uE735',\n            CheckMark: '\\uE73E',\n            Delete: '\\uE74D',\n            ChevronLeft: '\\uE76B',\n            ChevronRight: '\\uE76C',\n            Calendar: '\\uE787',\n            Megaphone: '\\uE789',\n            Undo: '\\uE7A7',\n            Flag: '\\uE7C1',\n            Page: '\\uE7C3',\n            Pinned: '\\uE840',\n            View: '\\uE890',\n            Clear: '\\uE894',\n            Download: '\\uE896',\n            Upload: '\\uE898',\n            Folder: '\\uE8B7',\n            Sort: '\\uE8CB',\n            AlignRight: '\\uE8E2',\n            AlignLeft: '\\uE8E4',\n            Tag: '\\uE8EC',\n            AddFriend: '\\uE8FA',\n            Info: '\\uE946',\n            SortLines: '\\uE9D0',\n            List: '\\uEA37',\n            CircleRing: '\\uEA3A',\n            Heart: '\\uEB51',\n            HeartFill: '\\uEB52',\n            Tiles: '\\uECA5',\n            Embed: '\\uECCE',\n            Glimmer: '\\uECF4',\n            Ascending: '\\uEDC0',\n            Descending: '\\uEDC1',\n            SortUp: '\\uEE68',\n            SortDown: '\\uEE69',\n            SyncToPC: '\\uEE6E',\n            LargeGrid: '\\uEECB',\n            SkypeCheck: '\\uEF80',\n            SkypeClock: '\\uEF81',\n            SkypeMinus: '\\uEF82',\n            ClearFilter: '\\uEF8F',\n            Flow: '\\uEF90',\n            StatusCircleCheckmark: '\\uF13E',\n            MoreVertical: '\\uF2BC',\n        },\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-0.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_0_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-0\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-0-467ee27f.woff') format('woff')\"\n        },\n        icons: {\n            'PageLink': '\\uE302',\n            'CommentSolid': '\\uE30E',\n            'ChangeEntitlements': '\\uE310',\n            'Installation': '\\uE311',\n            'WebAppBuilderModule': '\\uE313',\n            'WebAppBuilderFragment': '\\uE314',\n            'WebAppBuilderSlot': '\\uE315',\n            'BullseyeTargetEdit': '\\uE319',\n            'WebAppBuilderFragmentCreate': '\\uE31B',\n            'PageData': '\\uE31C',\n            'PageHeaderEdit': '\\uE31D',\n            'ProductList': '\\uE31E',\n            'UnpublishContent': '\\uE31F',\n            'DependencyAdd': '\\uE344',\n            'DependencyRemove': '\\uE345',\n            'EntitlementPolicy': '\\uE346',\n            'EntitlementRedemption': '\\uE347',\n            'SchoolDataSyncLogo': '\\uE34C',\n            'PinSolid12': '\\uE352',\n            'PinSolidOff12': '\\uE353',\n            'AddLink': '\\uE35E',\n            'SharepointAppIcon16': '\\uE365',\n            'DataflowsLink': '\\uE366',\n            'TimePicker': '\\uE367',\n            'UserWarning': '\\uE368',\n            'ComplianceAudit': '\\uE369',\n            'InternetSharing': '\\uE704',\n            'Brightness': '\\uE706',\n            'MapPin': '\\uE707',\n            'Airplane': '\\uE709',\n            'Tablet': '\\uE70A',\n            'QuickNote': '\\uE70B',\n            'Video': '\\uE714',\n            'People': '\\uE716',\n            'Phone': '\\uE717',\n            'Pin': '\\uE718',\n            'Shop': '\\uE719',\n            'Stop': '\\uE71A',\n            'Link': '\\uE71B',\n            'AllApps': '\\uE71D',\n            'Zoom': '\\uE71E',\n            'ZoomOut': '\\uE71F',\n            'Microphone': '\\uE720',\n            'Camera': '\\uE722',\n            'Attach': '\\uE723',\n            'Send': '\\uE724',\n            'FavoriteList': '\\uE728',\n            'PageSolid': '\\uE729',\n            'Forward': '\\uE72A',\n            'Back': '\\uE72B',\n            'Refresh': '\\uE72C',\n            'Lock': '\\uE72E',\n            'ReportHacked': '\\uE730',\n            'EMI': '\\uE731',\n            'MiniLink': '\\uE732',\n            'Blocked': '\\uE733',\n            'ReadingMode': '\\uE736',\n            'Favicon': '\\uE737',\n            'Remove': '\\uE738',\n            'Checkbox': '\\uE739',\n            'CheckboxComposite': '\\uE73A',\n            'CheckboxFill': '\\uE73B',\n            'CheckboxIndeterminate': '\\uE73C',\n            'CheckboxCompositeReversed': '\\uE73D',\n            'BackToWindow': '\\uE73F',\n            'FullScreen': '\\uE740',\n            'Print': '\\uE749',\n            'Up': '\\uE74A',\n            'Down': '\\uE74B',\n            'OEM': '\\uE74C',\n            'Save': '\\uE74E',\n            'ReturnKey': '\\uE751',\n            'Cloud': '\\uE753',\n            'Flashlight': '\\uE754',\n            'CommandPrompt': '\\uE756',\n            'Sad': '\\uE757',\n            'RealEstate': '\\uE758',\n            'SIPMove': '\\uE759',\n            'EraseTool': '\\uE75C',\n            'GripperTool': '\\uE75E',\n            'Dialpad': '\\uE75F',\n            'PageLeft': '\\uE760',\n            'PageRight': '\\uE761',\n            'MultiSelect': '\\uE762',\n            'KeyboardClassic': '\\uE765',\n            'Play': '\\uE768',\n            'Pause': '\\uE769',\n            'InkingTool': '\\uE76D',\n            'Emoji2': '\\uE76E',\n            'GripperBarHorizontal': '\\uE76F',\n            'System': '\\uE770',\n            'Personalize': '\\uE771',\n            'SearchAndApps': '\\uE773',\n            'Globe': '\\uE774',\n            'EaseOfAccess': '\\uE776',\n            'ContactInfo': '\\uE779',\n            'Unpin': '\\uE77A',\n            'Contact': '\\uE77B',\n            'Memo': '\\uE77C',\n            'IncomingCall': '\\uE77E'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-0.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-1.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_1_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-1\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-1-4d521695.woff') format('woff')\"\n        },\n        icons: {\n            'Paste': '\\uE77F',\n            'WindowsLogo': '\\uE782',\n            'Error': '\\uE783',\n            'GripperBarVertical': '\\uE784',\n            'Unlock': '\\uE785',\n            'Slideshow': '\\uE786',\n            'Trim': '\\uE78A',\n            'AutoEnhanceOn': '\\uE78D',\n            'AutoEnhanceOff': '\\uE78E',\n            'Color': '\\uE790',\n            'SaveAs': '\\uE792',\n            'Light': '\\uE793',\n            'Filters': '\\uE795',\n            'AspectRatio': '\\uE799',\n            'Contrast': '\\uE7A1',\n            'Redo': '\\uE7A6',\n            'Crop': '\\uE7A8',\n            'PhotoCollection': '\\uE7AA',\n            'Album': '\\uE7AB',\n            'Rotate': '\\uE7AD',\n            'PanoIndicator': '\\uE7B0',\n            'Translate': '\\uE7B2',\n            'RedEye': '\\uE7B3',\n            'ViewOriginal': '\\uE7B4',\n            'ThumbnailView': '\\uE7B6',\n            'Package': '\\uE7B8',\n            'Telemarketer': '\\uE7B9',\n            'Warning': '\\uE7BA',\n            'Financial': '\\uE7BB',\n            'Education': '\\uE7BE',\n            'ShoppingCart': '\\uE7BF',\n            'Train': '\\uE7C0',\n            'Move': '\\uE7C2',\n            'TouchPointer': '\\uE7C9',\n            'Merge': '\\uE7D5',\n            'TurnRight': '\\uE7DB',\n            'Ferry': '\\uE7E3',\n            'Highlight': '\\uE7E6',\n            'PowerButton': '\\uE7E8',\n            'Tab': '\\uE7E9',\n            'Admin': '\\uE7EF',\n            'TVMonitor': '\\uE7F4',\n            'Speakers': '\\uE7F5',\n            'Game': '\\uE7FC',\n            'HorizontalTabKey': '\\uE7FD',\n            'UnstackSelected': '\\uE7FE',\n            'StackIndicator': '\\uE7FF',\n            'Nav2DMapView': '\\uE800',\n            'StreetsideSplitMinimize': '\\uE802',\n            'Car': '\\uE804',\n            'Bus': '\\uE806',\n            'EatDrink': '\\uE807',\n            'SeeDo': '\\uE808',\n            'LocationCircle': '\\uE80E',\n            'Home': '\\uE80F',\n            'SwitcherStartEnd': '\\uE810',\n            'ParkingLocation': '\\uE811',\n            'IncidentTriangle': '\\uE814',\n            'Touch': '\\uE815',\n            'MapDirections': '\\uE816',\n            'CaretHollow': '\\uE817',\n            'CaretSolid': '\\uE818',\n            'History': '\\uE81C',\n            'Location': '\\uE81D',\n            'MapLayers': '\\uE81E',\n            'SearchNearby': '\\uE820',\n            'Work': '\\uE821',\n            'Recent': '\\uE823',\n            'Hotel': '\\uE824',\n            'Bank': '\\uE825',\n            'LocationDot': '\\uE827',\n            'Dictionary': '\\uE82D',\n            'ChromeBack': '\\uE830',\n            'FolderOpen': '\\uE838',\n            'PinnedFill': '\\uE842',\n            'RevToggleKey': '\\uE845',\n            'USB': '\\uE88E',\n            'Previous': '\\uE892',\n            'Next': '\\uE893',\n            'Sync': '\\uE895',\n            'Help': '\\uE897',\n            'Emoji': '\\uE899',\n            'MailForward': '\\uE89C',\n            'ClosePane': '\\uE89F',\n            'OpenPane': '\\uE8A0',\n            'PreviewLink': '\\uE8A1',\n            'ZoomIn': '\\uE8A3',\n            'Bookmarks': '\\uE8A4',\n            'Document': '\\uE8A5',\n            'ProtectedDocument': '\\uE8A6',\n            'OpenInNewWindow': '\\uE8A7',\n            'MailFill': '\\uE8A8',\n            'ViewAll': '\\uE8A9',\n            'Switch': '\\uE8AB',\n            'Rename': '\\uE8AC',\n            'Go': '\\uE8AD',\n            'Remote': '\\uE8AF',\n            'SelectAll': '\\uE8B3',\n            'Orientation': '\\uE8B4',\n            'Import': '\\uE8B5'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-1.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-2.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_2_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-2\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-2-63c99abf.woff') format('woff')\"\n        },\n        icons: {\n            'Picture': '\\uE8B9',\n            'ChromeClose': '\\uE8BB',\n            'ShowResults': '\\uE8BC',\n            'Message': '\\uE8BD',\n            'CalendarDay': '\\uE8BF',\n            'CalendarWeek': '\\uE8C0',\n            'MailReplyAll': '\\uE8C2',\n            'Read': '\\uE8C3',\n            'Cut': '\\uE8C6',\n            'PaymentCard': '\\uE8C7',\n            'Copy': '\\uE8C8',\n            'Important': '\\uE8C9',\n            'MailReply': '\\uE8CA',\n            'GotoToday': '\\uE8D1',\n            'Font': '\\uE8D2',\n            'FontColor': '\\uE8D3',\n            'FolderFill': '\\uE8D5',\n            'Permissions': '\\uE8D7',\n            'DisableUpdates': '\\uE8D8',\n            'Unfavorite': '\\uE8D9',\n            'Italic': '\\uE8DB',\n            'Underline': '\\uE8DC',\n            'Bold': '\\uE8DD',\n            'MoveToFolder': '\\uE8DE',\n            'Dislike': '\\uE8E0',\n            'Like': '\\uE8E1',\n            'AlignCenter': '\\uE8E3',\n            'OpenFile': '\\uE8E5',\n            'ClearSelection': '\\uE8E6',\n            'FontDecrease': '\\uE8E7',\n            'FontIncrease': '\\uE8E8',\n            'FontSize': '\\uE8E9',\n            'CellPhone': '\\uE8EA',\n            'RepeatOne': '\\uE8ED',\n            'RepeatAll': '\\uE8EE',\n            'Calculator': '\\uE8EF',\n            'Library': '\\uE8F1',\n            'PostUpdate': '\\uE8F3',\n            'NewFolder': '\\uE8F4',\n            'CalendarReply': '\\uE8F5',\n            'UnsyncFolder': '\\uE8F6',\n            'SyncFolder': '\\uE8F7',\n            'BlockContact': '\\uE8F8',\n            'Accept': '\\uE8FB',\n            'BulletedList': '\\uE8FD',\n            'Preview': '\\uE8FF',\n            'News': '\\uE900',\n            'Chat': '\\uE901',\n            'Group': '\\uE902',\n            'World': '\\uE909',\n            'Comment': '\\uE90A',\n            'DockLeft': '\\uE90C',\n            'DockRight': '\\uE90D',\n            'Repair': '\\uE90F',\n            'Accounts': '\\uE910',\n            'Street': '\\uE913',\n            'RadioBullet': '\\uE915',\n            'Stopwatch': '\\uE916',\n            'Clock': '\\uE917',\n            'WorldClock': '\\uE918',\n            'AlarmClock': '\\uE919',\n            'Photo': '\\uE91B',\n            'ActionCenter': '\\uE91C',\n            'Hospital': '\\uE91D',\n            'Timer': '\\uE91E',\n            'FullCircleMask': '\\uE91F',\n            'LocationFill': '\\uE920',\n            'ChromeMinimize': '\\uE921',\n            'ChromeRestore': '\\uE923',\n            'Annotation': '\\uE924',\n            'Fingerprint': '\\uE928',\n            'Handwriting': '\\uE929',\n            'ChromeFullScreen': '\\uE92D',\n            'Completed': '\\uE930',\n            'Label': '\\uE932',\n            'FlickDown': '\\uE935',\n            'FlickUp': '\\uE936',\n            'FlickLeft': '\\uE937',\n            'FlickRight': '\\uE938',\n            'MiniExpand': '\\uE93A',\n            'MiniContract': '\\uE93B',\n            'Streaming': '\\uE93E',\n            'MusicInCollection': '\\uE940',\n            'OneDriveLogo': '\\uE941',\n            'CompassNW': '\\uE942',\n            'Code': '\\uE943',\n            'LightningBolt': '\\uE945',\n            'CalculatorMultiply': '\\uE947',\n            'CalculatorAddition': '\\uE948',\n            'CalculatorSubtract': '\\uE949',\n            'CalculatorPercentage': '\\uE94C',\n            'CalculatorEqualTo': '\\uE94E',\n            'PrintfaxPrinterFile': '\\uE956',\n            'StorageOptical': '\\uE958',\n            'Communications': '\\uE95A',\n            'Headset': '\\uE95B',\n            'Health': '\\uE95E',\n            'Webcam2': '\\uE960',\n            'FrontCamera': '\\uE96B',\n            'ChevronUpSmall': '\\uE96D'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-2.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-3.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_3_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-3\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-3-089e217a.woff') format('woff')\"\n        },\n        icons: {\n            'ChevronDownSmall': '\\uE96E',\n            'ChevronLeftSmall': '\\uE96F',\n            'ChevronRightSmall': '\\uE970',\n            'ChevronUpMed': '\\uE971',\n            'ChevronDownMed': '\\uE972',\n            'ChevronLeftMed': '\\uE973',\n            'ChevronRightMed': '\\uE974',\n            'Devices2': '\\uE975',\n            'PC1': '\\uE977',\n            'PresenceChickletVideo': '\\uE979',\n            'Reply': '\\uE97A',\n            'HalfAlpha': '\\uE97E',\n            'ConstructionCone': '\\uE98F',\n            'DoubleChevronLeftMed': '\\uE991',\n            'Volume0': '\\uE992',\n            'Volume1': '\\uE993',\n            'Volume2': '\\uE994',\n            'Volume3': '\\uE995',\n            'Chart': '\\uE999',\n            'Robot': '\\uE99A',\n            'Manufacturing': '\\uE99C',\n            'LockSolid': '\\uE9A2',\n            'FitPage': '\\uE9A6',\n            'FitWidth': '\\uE9A7',\n            'BidiLtr': '\\uE9AA',\n            'BidiRtl': '\\uE9AB',\n            'RightDoubleQuote': '\\uE9B1',\n            'Sunny': '\\uE9BD',\n            'CloudWeather': '\\uE9BE',\n            'Cloudy': '\\uE9BF',\n            'PartlyCloudyDay': '\\uE9C0',\n            'PartlyCloudyNight': '\\uE9C1',\n            'ClearNight': '\\uE9C2',\n            'RainShowersDay': '\\uE9C3',\n            'Rain': '\\uE9C4',\n            'Thunderstorms': '\\uE9C6',\n            'RainSnow': '\\uE9C7',\n            'Snow': '\\uE9C8',\n            'BlowingSnow': '\\uE9C9',\n            'Frigid': '\\uE9CA',\n            'Fog': '\\uE9CB',\n            'Squalls': '\\uE9CC',\n            'Duststorm': '\\uE9CD',\n            'Unknown': '\\uE9CE',\n            'Precipitation': '\\uE9CF',\n            'Ribbon': '\\uE9D1',\n            'AreaChart': '\\uE9D2',\n            'Assign': '\\uE9D3',\n            'FlowChart': '\\uE9D4',\n            'CheckList': '\\uE9D5',\n            'Diagnostic': '\\uE9D9',\n            'Generate': '\\uE9DA',\n            'LineChart': '\\uE9E6',\n            'Equalizer': '\\uE9E9',\n            'BarChartHorizontal': '\\uE9EB',\n            'BarChartVertical': '\\uE9EC',\n            'Freezing': '\\uE9EF',\n            'FunnelChart': '\\uE9F1',\n            'Processing': '\\uE9F5',\n            'Quantity': '\\uE9F8',\n            'ReportDocument': '\\uE9F9',\n            'StackColumnChart': '\\uE9FC',\n            'SnowShowerDay': '\\uE9FD',\n            'HailDay': '\\uEA00',\n            'WorkFlow': '\\uEA01',\n            'HourGlass': '\\uEA03',\n            'StoreLogoMed20': '\\uEA04',\n            'TimeSheet': '\\uEA05',\n            'TriangleSolid': '\\uEA08',\n            'UpgradeAnalysis': '\\uEA0B',\n            'VideoSolid': '\\uEA0C',\n            'RainShowersNight': '\\uEA0F',\n            'SnowShowerNight': '\\uEA11',\n            'Teamwork': '\\uEA12',\n            'HailNight': '\\uEA13',\n            'PeopleAdd': '\\uEA15',\n            'Glasses': '\\uEA16',\n            'DateTime2': '\\uEA17',\n            'Shield': '\\uEA18',\n            'Header1': '\\uEA19',\n            'PageAdd': '\\uEA1A',\n            'NumberedList': '\\uEA1C',\n            'PowerBILogo': '\\uEA1E',\n            'Info2': '\\uEA1F',\n            'MusicInCollectionFill': '\\uEA36',\n            'Asterisk': '\\uEA38',\n            'ErrorBadge': '\\uEA39',\n            'CircleFill': '\\uEA3B',\n            'Record2': '\\uEA3F',\n            'AllAppsMirrored': '\\uEA40',\n            'BookmarksMirrored': '\\uEA41',\n            'BulletedListMirrored': '\\uEA42',\n            'CaretHollowMirrored': '\\uEA45',\n            'CaretSolidMirrored': '\\uEA46',\n            'ChromeBackMirrored': '\\uEA47',\n            'ClearSelectionMirrored': '\\uEA48',\n            'ClosePaneMirrored': '\\uEA49',\n            'DockLeftMirrored': '\\uEA4C',\n            'DoubleChevronLeftMedMirrored': '\\uEA4D',\n            'GoMirrored': '\\uEA4F'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-3.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-4.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_4_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-4\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-4-a656cc0a.woff') format('woff')\"\n        },\n        icons: {\n            'HelpMirrored': '\\uEA51',\n            'ImportMirrored': '\\uEA52',\n            'ImportAllMirrored': '\\uEA53',\n            'ListMirrored': '\\uEA55',\n            'MailForwardMirrored': '\\uEA56',\n            'MailReplyMirrored': '\\uEA57',\n            'MailReplyAllMirrored': '\\uEA58',\n            'MiniContractMirrored': '\\uEA59',\n            'MiniExpandMirrored': '\\uEA5A',\n            'OpenPaneMirrored': '\\uEA5B',\n            'ParkingLocationMirrored': '\\uEA5E',\n            'SendMirrored': '\\uEA63',\n            'ShowResultsMirrored': '\\uEA65',\n            'ThumbnailViewMirrored': '\\uEA67',\n            'Media': '\\uEA69',\n            'Devices3': '\\uEA6C',\n            'Focus': '\\uEA6F',\n            'VideoLightOff': '\\uEA74',\n            'Lightbulb': '\\uEA80',\n            'StatusTriangle': '\\uEA82',\n            'VolumeDisabled': '\\uEA85',\n            'Puzzle': '\\uEA86',\n            'EmojiNeutral': '\\uEA87',\n            'EmojiDisappointed': '\\uEA88',\n            'HomeSolid': '\\uEA8A',\n            'Ringer': '\\uEA8F',\n            'PDF': '\\uEA90',\n            'HeartBroken': '\\uEA92',\n            'StoreLogo16': '\\uEA96',\n            'MultiSelectMirrored': '\\uEA98',\n            'Broom': '\\uEA99',\n            'AddToShoppingList': '\\uEA9A',\n            'Cocktails': '\\uEA9D',\n            'Wines': '\\uEABF',\n            'Articles': '\\uEAC1',\n            'Cycling': '\\uEAC7',\n            'DietPlanNotebook': '\\uEAC8',\n            'Pill': '\\uEACB',\n            'ExerciseTracker': '\\uEACC',\n            'HandsFree': '\\uEAD0',\n            'Medical': '\\uEAD4',\n            'Running': '\\uEADA',\n            'Weights': '\\uEADB',\n            'Trackers': '\\uEADF',\n            'AddNotes': '\\uEAE3',\n            'AllCurrency': '\\uEAE4',\n            'BarChart4': '\\uEAE7',\n            'CirclePlus': '\\uEAEE',\n            'Coffee': '\\uEAEF',\n            'Cotton': '\\uEAF3',\n            'Market': '\\uEAFC',\n            'Money': '\\uEAFD',\n            'PieDouble': '\\uEB04',\n            'PieSingle': '\\uEB05',\n            'RemoveFilter': '\\uEB08',\n            'Savings': '\\uEB0B',\n            'Sell': '\\uEB0C',\n            'StockDown': '\\uEB0F',\n            'StockUp': '\\uEB11',\n            'Lamp': '\\uEB19',\n            'Source': '\\uEB1B',\n            'MSNVideos': '\\uEB1C',\n            'Cricket': '\\uEB1E',\n            'Golf': '\\uEB1F',\n            'Baseball': '\\uEB20',\n            'Soccer': '\\uEB21',\n            'MoreSports': '\\uEB22',\n            'AutoRacing': '\\uEB24',\n            'CollegeHoops': '\\uEB25',\n            'CollegeFootball': '\\uEB26',\n            'ProFootball': '\\uEB27',\n            'ProHockey': '\\uEB28',\n            'Rugby': '\\uEB2D',\n            'SubstitutionsIn': '\\uEB31',\n            'Tennis': '\\uEB33',\n            'Arrivals': '\\uEB34',\n            'Design': '\\uEB3C',\n            'Website': '\\uEB41',\n            'Drop': '\\uEB42',\n            'HistoricalWeather': '\\uEB43',\n            'SkiResorts': '\\uEB45',\n            'Snowflake': '\\uEB46',\n            'BusSolid': '\\uEB47',\n            'FerrySolid': '\\uEB48',\n            'AirplaneSolid': '\\uEB4C',\n            'TrainSolid': '\\uEB4D',\n            'Ticket': '\\uEB54',\n            'WifiWarning4': '\\uEB63',\n            'Devices4': '\\uEB66',\n            'AzureLogo': '\\uEB6A',\n            'BingLogo': '\\uEB6B',\n            'MSNLogo': '\\uEB6C',\n            'OutlookLogoInverse': '\\uEB6D',\n            'OfficeLogo': '\\uEB6E',\n            'SkypeLogo': '\\uEB6F',\n            'Door': '\\uEB75',\n            'EditMirrored': '\\uEB7E',\n            'GiftCard': '\\uEB8E',\n            'DoubleBookmark': '\\uEB8F',\n            'StatusErrorFull': '\\uEB90'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-4.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-5.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_5_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-5\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-5-f95ba260.woff') format('woff')\"\n        },\n        icons: {\n            'Certificate': '\\uEB95',\n            'FastForward': '\\uEB9D',\n            'Rewind': '\\uEB9E',\n            'Photo2': '\\uEB9F',\n            'OpenSource': '\\uEBC2',\n            'Movers': '\\uEBCD',\n            'CloudDownload': '\\uEBD3',\n            'Family': '\\uEBDA',\n            'WindDirection': '\\uEBE6',\n            'Bug': '\\uEBE8',\n            'SiteScan': '\\uEBEC',\n            'BrowserScreenShot': '\\uEBED',\n            'F12DevTools': '\\uEBEE',\n            'CSS': '\\uEBEF',\n            'JS': '\\uEBF0',\n            'DeliveryTruck': '\\uEBF4',\n            'ReminderPerson': '\\uEBF7',\n            'ReminderGroup': '\\uEBF8',\n            'ReminderTime': '\\uEBF9',\n            'TabletMode': '\\uEBFC',\n            'Umbrella': '\\uEC04',\n            'NetworkTower': '\\uEC05',\n            'CityNext': '\\uEC06',\n            'CityNext2': '\\uEC07',\n            'Section': '\\uEC0C',\n            'OneNoteLogoInverse': '\\uEC0D',\n            'ToggleFilled': '\\uEC11',\n            'ToggleBorder': '\\uEC12',\n            'SliderThumb': '\\uEC13',\n            'ToggleThumb': '\\uEC14',\n            'Documentation': '\\uEC17',\n            'Badge': '\\uEC1B',\n            'Giftbox': '\\uEC1F',\n            'VisualStudioLogo': '\\uEC22',\n            'HomeGroup': '\\uEC26',\n            'ExcelLogoInverse': '\\uEC28',\n            'WordLogoInverse': '\\uEC29',\n            'PowerPointLogoInverse': '\\uEC2A',\n            'Cafe': '\\uEC32',\n            'SpeedHigh': '\\uEC4A',\n            'Commitments': '\\uEC4D',\n            'ThisPC': '\\uEC4E',\n            'MusicNote': '\\uEC4F',\n            'MicOff': '\\uEC54',\n            'PlaybackRate1x': '\\uEC57',\n            'EdgeLogo': '\\uEC60',\n            'CompletedSolid': '\\uEC61',\n            'AlbumRemove': '\\uEC62',\n            'MessageFill': '\\uEC70',\n            'TabletSelected': '\\uEC74',\n            'MobileSelected': '\\uEC75',\n            'LaptopSelected': '\\uEC76',\n            'TVMonitorSelected': '\\uEC77',\n            'DeveloperTools': '\\uEC7A',\n            'Shapes': '\\uEC7C',\n            'InsertTextBox': '\\uEC7D',\n            'LowerBrightness': '\\uEC8A',\n            'WebComponents': '\\uEC8B',\n            'OfflineStorage': '\\uEC8C',\n            'DOM': '\\uEC8D',\n            'CloudUpload': '\\uEC8E',\n            'ScrollUpDown': '\\uEC8F',\n            'DateTime': '\\uEC92',\n            'Event': '\\uECA3',\n            'Cake': '\\uECA4',\n            'Org': '\\uECA6',\n            'PartyLeader': '\\uECA7',\n            'DRM': '\\uECA8',\n            'CloudAdd': '\\uECA9',\n            'AppIconDefault': '\\uECAA',\n            'Photo2Add': '\\uECAB',\n            'Photo2Remove': '\\uECAC',\n            'Calories': '\\uECAD',\n            'POI': '\\uECAF',\n            'AddTo': '\\uECC8',\n            'RadioBtnOff': '\\uECCA',\n            'RadioBtnOn': '\\uECCB',\n            'ExploreContent': '\\uECCD',\n            'Product': '\\uECDC',\n            'ProgressLoopInner': '\\uECDE',\n            'ProgressLoopOuter': '\\uECDF',\n            'Blocked2': '\\uECE4',\n            'FangBody': '\\uECEB',\n            'Toolbox': '\\uECED',\n            'PageHeader': '\\uECEE',\n            'ChatInviteFriend': '\\uECFE',\n            'Brush': '\\uECFF',\n            'Shirt': '\\uED00',\n            'Crown': '\\uED01',\n            'Diamond': '\\uED02',\n            'ScaleUp': '\\uED09',\n            'QRCode': '\\uED14',\n            'Feedback': '\\uED15',\n            'SharepointLogoInverse': '\\uED18',\n            'YammerLogo': '\\uED19',\n            'Hide': '\\uED1A',\n            'Uneditable': '\\uED1D',\n            'ReturnToSession': '\\uED24',\n            'OpenFolderHorizontal': '\\uED25',\n            'CalendarMirrored': '\\uED28'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-5.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-6.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_6_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-6\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-6-ef6fd590.woff') format('woff')\"\n        },\n        icons: {\n            'SwayLogoInverse': '\\uED29',\n            'OutOfOffice': '\\uED34',\n            'Trophy': '\\uED3F',\n            'ReopenPages': '\\uED50',\n            'EmojiTabSymbols': '\\uED58',\n            'AADLogo': '\\uED68',\n            'AccessLogo': '\\uED69',\n            'AdminALogoInverse32': '\\uED6A',\n            'AdminCLogoInverse32': '\\uED6B',\n            'AdminDLogoInverse32': '\\uED6C',\n            'AdminELogoInverse32': '\\uED6D',\n            'AdminLLogoInverse32': '\\uED6E',\n            'AdminMLogoInverse32': '\\uED6F',\n            'AdminOLogoInverse32': '\\uED70',\n            'AdminPLogoInverse32': '\\uED71',\n            'AdminSLogoInverse32': '\\uED72',\n            'AdminYLogoInverse32': '\\uED73',\n            'DelveLogoInverse': '\\uED76',\n            'ExchangeLogoInverse': '\\uED78',\n            'LyncLogo': '\\uED79',\n            'OfficeVideoLogoInverse': '\\uED7A',\n            'SocialListeningLogo': '\\uED7C',\n            'VisioLogoInverse': '\\uED7D',\n            'Balloons': '\\uED7E',\n            'Cat': '\\uED7F',\n            'MailAlert': '\\uED80',\n            'MailCheck': '\\uED81',\n            'MailLowImportance': '\\uED82',\n            'MailPause': '\\uED83',\n            'MailRepeat': '\\uED84',\n            'SecurityGroup': '\\uED85',\n            'Table': '\\uED86',\n            'VoicemailForward': '\\uED87',\n            'VoicemailReply': '\\uED88',\n            'Waffle': '\\uED89',\n            'RemoveEvent': '\\uED8A',\n            'EventInfo': '\\uED8B',\n            'ForwardEvent': '\\uED8C',\n            'WipePhone': '\\uED8D',\n            'AddOnlineMeeting': '\\uED8E',\n            'JoinOnlineMeeting': '\\uED8F',\n            'RemoveLink': '\\uED90',\n            'PeopleBlock': '\\uED91',\n            'PeopleRepeat': '\\uED92',\n            'PeopleAlert': '\\uED93',\n            'PeoplePause': '\\uED94',\n            'TransferCall': '\\uED95',\n            'AddPhone': '\\uED96',\n            'UnknownCall': '\\uED97',\n            'NoteReply': '\\uED98',\n            'NoteForward': '\\uED99',\n            'NotePinned': '\\uED9A',\n            'RemoveOccurrence': '\\uED9B',\n            'Timeline': '\\uED9C',\n            'EditNote': '\\uED9D',\n            'CircleHalfFull': '\\uED9E',\n            'Room': '\\uED9F',\n            'Unsubscribe': '\\uEDA0',\n            'Subscribe': '\\uEDA1',\n            'HardDrive': '\\uEDA2',\n            'RecurringTask': '\\uEDB2',\n            'TaskManager': '\\uEDB7',\n            'TaskManagerMirrored': '\\uEDB8',\n            'Combine': '\\uEDBB',\n            'Split': '\\uEDBC',\n            'DoubleChevronUp': '\\uEDBD',\n            'DoubleChevronLeft': '\\uEDBE',\n            'DoubleChevronRight': '\\uEDBF',\n            'TextBox': '\\uEDC2',\n            'TextField': '\\uEDC3',\n            'NumberField': '\\uEDC4',\n            'Dropdown': '\\uEDC5',\n            'PenWorkspace': '\\uEDC6',\n            'BookingsLogo': '\\uEDC7',\n            'ClassNotebookLogoInverse': '\\uEDC8',\n            'DelveAnalyticsLogo': '\\uEDCA',\n            'DocsLogoInverse': '\\uEDCB',\n            'Dynamics365Logo': '\\uEDCC',\n            'DynamicSMBLogo': '\\uEDCD',\n            'OfficeAssistantLogo': '\\uEDCE',\n            'OfficeStoreLogo': '\\uEDCF',\n            'OneNoteEduLogoInverse': '\\uEDD0',\n            'PlannerLogo': '\\uEDD1',\n            'PowerApps': '\\uEDD2',\n            'Suitcase': '\\uEDD3',\n            'ProjectLogoInverse': '\\uEDD4',\n            'CaretLeft8': '\\uEDD5',\n            'CaretRight8': '\\uEDD6',\n            'CaretUp8': '\\uEDD7',\n            'CaretDown8': '\\uEDD8',\n            'CaretLeftSolid8': '\\uEDD9',\n            'CaretRightSolid8': '\\uEDDA',\n            'CaretUpSolid8': '\\uEDDB',\n            'CaretDownSolid8': '\\uEDDC',\n            'ClearFormatting': '\\uEDDD',\n            'Superscript': '\\uEDDE',\n            'Subscript': '\\uEDDF',\n            'Strikethrough': '\\uEDE0',\n            'Export': '\\uEDE1',\n            'ExportMirrored': '\\uEDE2'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-6.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-7.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_7_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-7\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-7-2b97bb99.woff') format('woff')\"\n        },\n        icons: {\n            'SingleBookmark': '\\uEDFF',\n            'SingleBookmarkSolid': '\\uEE00',\n            'DoubleChevronDown': '\\uEE04',\n            'FollowUser': '\\uEE05',\n            'ReplyAll': '\\uEE0A',\n            'WorkforceManagement': '\\uEE0F',\n            'RecruitmentManagement': '\\uEE12',\n            'Questionnaire': '\\uEE19',\n            'ManagerSelfService': '\\uEE23',\n            'ProductionFloorManagement': '\\uEE29',\n            'ProductRelease': '\\uEE2E',\n            'ProductVariant': '\\uEE30',\n            'ReplyMirrored': '\\uEE35',\n            'ReplyAllMirrored': '\\uEE36',\n            'Medal': '\\uEE38',\n            'AddGroup': '\\uEE3D',\n            'QuestionnaireMirrored': '\\uEE4B',\n            'CloudImportExport': '\\uEE55',\n            'TemporaryUser': '\\uEE58',\n            'CaretSolid16': '\\uEE62',\n            'GroupedDescending': '\\uEE66',\n            'GroupedAscending': '\\uEE67',\n            'AwayStatus': '\\uEE6A',\n            'MyMoviesTV': '\\uEE6C',\n            'GenericScan': '\\uEE6F',\n            'AustralianRules': '\\uEE70',\n            'WifiEthernet': '\\uEE77',\n            'TrackersMirrored': '\\uEE92',\n            'DateTimeMirrored': '\\uEE93',\n            'StopSolid': '\\uEE95',\n            'DoubleChevronUp12': '\\uEE96',\n            'DoubleChevronDown12': '\\uEE97',\n            'DoubleChevronLeft12': '\\uEE98',\n            'DoubleChevronRight12': '\\uEE99',\n            'CalendarAgenda': '\\uEE9A',\n            'ConnectVirtualMachine': '\\uEE9D',\n            'AddEvent': '\\uEEB5',\n            'AssetLibrary': '\\uEEB6',\n            'DataConnectionLibrary': '\\uEEB7',\n            'DocLibrary': '\\uEEB8',\n            'FormLibrary': '\\uEEB9',\n            'FormLibraryMirrored': '\\uEEBA',\n            'ReportLibrary': '\\uEEBB',\n            'ReportLibraryMirrored': '\\uEEBC',\n            'ContactCard': '\\uEEBD',\n            'CustomList': '\\uEEBE',\n            'CustomListMirrored': '\\uEEBF',\n            'IssueTracking': '\\uEEC0',\n            'IssueTrackingMirrored': '\\uEEC1',\n            'PictureLibrary': '\\uEEC2',\n            'OfficeAddinsLogo': '\\uEEC7',\n            'OfflineOneDriveParachute': '\\uEEC8',\n            'OfflineOneDriveParachuteDisabled': '\\uEEC9',\n            'TriangleSolidUp12': '\\uEECC',\n            'TriangleSolidDown12': '\\uEECD',\n            'TriangleSolidLeft12': '\\uEECE',\n            'TriangleSolidRight12': '\\uEECF',\n            'TriangleUp12': '\\uEED0',\n            'TriangleDown12': '\\uEED1',\n            'TriangleLeft12': '\\uEED2',\n            'TriangleRight12': '\\uEED3',\n            'ArrowUpRight8': '\\uEED4',\n            'ArrowDownRight8': '\\uEED5',\n            'DocumentSet': '\\uEED6',\n            'GoToDashboard': '\\uEEED',\n            'DelveAnalytics': '\\uEEEE',\n            'ArrowUpRightMirrored8': '\\uEEEF',\n            'ArrowDownRightMirrored8': '\\uEEF0',\n            'CompanyDirectory': '\\uEF0D',\n            'OpenEnrollment': '\\uEF1C',\n            'CompanyDirectoryMirrored': '\\uEF2B',\n            'OneDriveAdd': '\\uEF32',\n            'ProfileSearch': '\\uEF35',\n            'Header2': '\\uEF36',\n            'Header3': '\\uEF37',\n            'Header4': '\\uEF38',\n            'RingerSolid': '\\uEF3A',\n            'Eyedropper': '\\uEF3C',\n            'MarketDown': '\\uEF42',\n            'CalendarWorkWeek': '\\uEF51',\n            'SidePanel': '\\uEF52',\n            'GlobeFavorite': '\\uEF53',\n            'CaretTopLeftSolid8': '\\uEF54',\n            'CaretTopRightSolid8': '\\uEF55',\n            'ViewAll2': '\\uEF56',\n            'DocumentReply': '\\uEF57',\n            'PlayerSettings': '\\uEF58',\n            'ReceiptForward': '\\uEF59',\n            'ReceiptReply': '\\uEF5A',\n            'ReceiptCheck': '\\uEF5B',\n            'Fax': '\\uEF5C',\n            'RecurringEvent': '\\uEF5D',\n            'ReplyAlt': '\\uEF5E',\n            'ReplyAllAlt': '\\uEF5F',\n            'EditStyle': '\\uEF60',\n            'EditMail': '\\uEF61',\n            'Lifesaver': '\\uEF62',\n            'LifesaverLock': '\\uEF63',\n            'InboxCheck': '\\uEF64',\n            'FolderSearch': '\\uEF65'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-7.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-8.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_8_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-8\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-8-6fdf1528.woff') format('woff')\"\n        },\n        icons: {\n            'CollapseMenu': '\\uEF66',\n            'ExpandMenu': '\\uEF67',\n            'Boards': '\\uEF68',\n            'SunAdd': '\\uEF69',\n            'SunQuestionMark': '\\uEF6A',\n            'LandscapeOrientation': '\\uEF6B',\n            'DocumentSearch': '\\uEF6C',\n            'PublicCalendar': '\\uEF6D',\n            'PublicContactCard': '\\uEF6E',\n            'PublicEmail': '\\uEF6F',\n            'PublicFolder': '\\uEF70',\n            'WordDocument': '\\uEF71',\n            'PowerPointDocument': '\\uEF72',\n            'ExcelDocument': '\\uEF73',\n            'GroupedList': '\\uEF74',\n            'ClassroomLogo': '\\uEF75',\n            'Sections': '\\uEF76',\n            'EditPhoto': '\\uEF77',\n            'Starburst': '\\uEF78',\n            'ShareiOS': '\\uEF79',\n            'AirTickets': '\\uEF7A',\n            'PencilReply': '\\uEF7B',\n            'Tiles2': '\\uEF7C',\n            'SkypeCircleCheck': '\\uEF7D',\n            'SkypeCircleClock': '\\uEF7E',\n            'SkypeCircleMinus': '\\uEF7F',\n            'SkypeMessage': '\\uEF83',\n            'ClosedCaption': '\\uEF84',\n            'ATPLogo': '\\uEF85',\n            'OfficeFormsLogoInverse': '\\uEF86',\n            'RecycleBin': '\\uEF87',\n            'EmptyRecycleBin': '\\uEF88',\n            'Hide2': '\\uEF89',\n            'Breadcrumb': '\\uEF8C',\n            'BirthdayCake': '\\uEF8D',\n            'TimeEntry': '\\uEF95',\n            'CRMProcesses': '\\uEFB1',\n            'PageEdit': '\\uEFB6',\n            'PageArrowRight': '\\uEFB8',\n            'PageRemove': '\\uEFBA',\n            'Database': '\\uEFC7',\n            'DataManagementSettings': '\\uEFC8',\n            'CRMServices': '\\uEFD2',\n            'EditContact': '\\uEFD3',\n            'ConnectContacts': '\\uEFD4',\n            'AppIconDefaultAdd': '\\uEFDA',\n            'AppIconDefaultList': '\\uEFDE',\n            'ActivateOrders': '\\uEFE0',\n            'DeactivateOrders': '\\uEFE1',\n            'ProductCatalog': '\\uEFE8',\n            'ScatterChart': '\\uEFEB',\n            'AccountActivity': '\\uEFF4',\n            'DocumentManagement': '\\uEFFC',\n            'CRMReport': '\\uEFFE',\n            'KnowledgeArticle': '\\uF000',\n            'Relationship': '\\uF003',\n            'HomeVerify': '\\uF00E',\n            'ZipFolder': '\\uF012',\n            'SurveyQuestions': '\\uF01B',\n            'TextDocument': '\\uF029',\n            'TextDocumentShared': '\\uF02B',\n            'PageCheckedOut': '\\uF02C',\n            'PageShared': '\\uF02D',\n            'SaveAndClose': '\\uF038',\n            'Script': '\\uF03A',\n            'Archive': '\\uF03F',\n            'ActivityFeed': '\\uF056',\n            'Compare': '\\uF057',\n            'EventDate': '\\uF059',\n            'ArrowUpRight': '\\uF069',\n            'CaretRight': '\\uF06B',\n            'SetAction': '\\uF071',\n            'ChatBot': '\\uF08B',\n            'CaretSolidLeft': '\\uF08D',\n            'CaretSolidDown': '\\uF08E',\n            'CaretSolidRight': '\\uF08F',\n            'CaretSolidUp': '\\uF090',\n            'PowerAppsLogo': '\\uF091',\n            'PowerApps2Logo': '\\uF092',\n            'SearchIssue': '\\uF09A',\n            'SearchIssueMirrored': '\\uF09B',\n            'FabricAssetLibrary': '\\uF09C',\n            'FabricDataConnectionLibrary': '\\uF09D',\n            'FabricDocLibrary': '\\uF09E',\n            'FabricFormLibrary': '\\uF09F',\n            'FabricFormLibraryMirrored': '\\uF0A0',\n            'FabricReportLibrary': '\\uF0A1',\n            'FabricReportLibraryMirrored': '\\uF0A2',\n            'FabricPublicFolder': '\\uF0A3',\n            'FabricFolderSearch': '\\uF0A4',\n            'FabricMovetoFolder': '\\uF0A5',\n            'FabricUnsyncFolder': '\\uF0A6',\n            'FabricSyncFolder': '\\uF0A7',\n            'FabricOpenFolderHorizontal': '\\uF0A8',\n            'FabricFolder': '\\uF0A9',\n            'FabricFolderFill': '\\uF0AA',\n            'FabricNewFolder': '\\uF0AB',\n            'FabricPictureLibrary': '\\uF0AC',\n            'PhotoVideoMedia': '\\uF0B1',\n            'AddFavorite': '\\uF0C8'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-8.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-9.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_9_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-9\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-9-c6162b42.woff') format('woff')\"\n        },\n        icons: {\n            'AddFavoriteFill': '\\uF0C9',\n            'BufferTimeBefore': '\\uF0CF',\n            'BufferTimeAfter': '\\uF0D0',\n            'BufferTimeBoth': '\\uF0D1',\n            'PublishContent': '\\uF0D4',\n            'ClipboardList': '\\uF0E3',\n            'ClipboardListMirrored': '\\uF0E4',\n            'CannedChat': '\\uF0F2',\n            'SkypeForBusinessLogo': '\\uF0FC',\n            'TabCenter': '\\uF100',\n            'PageCheckedin': '\\uF104',\n            'PageList': '\\uF106',\n            'ReadOutLoud': '\\uF112',\n            'CaretBottomLeftSolid8': '\\uF121',\n            'CaretBottomRightSolid8': '\\uF122',\n            'FolderHorizontal': '\\uF12B',\n            'MicrosoftStaffhubLogo': '\\uF130',\n            'GiftboxOpen': '\\uF133',\n            'StatusCircleOuter': '\\uF136',\n            'StatusCircleInner': '\\uF137',\n            'StatusCircleRing': '\\uF138',\n            'StatusTriangleOuter': '\\uF139',\n            'StatusTriangleInner': '\\uF13A',\n            'StatusTriangleExclamation': '\\uF13B',\n            'StatusCircleExclamation': '\\uF13C',\n            'StatusCircleErrorX': '\\uF13D',\n            'StatusCircleInfo': '\\uF13F',\n            'StatusCircleBlock': '\\uF140',\n            'StatusCircleBlock2': '\\uF141',\n            'StatusCircleQuestionMark': '\\uF142',\n            'StatusCircleSync': '\\uF143',\n            'Toll': '\\uF160',\n            'ExploreContentSingle': '\\uF164',\n            'CollapseContent': '\\uF165',\n            'CollapseContentSingle': '\\uF166',\n            'InfoSolid': '\\uF167',\n            'GroupList': '\\uF168',\n            'ProgressRingDots': '\\uF16A',\n            'CaloriesAdd': '\\uF172',\n            'BranchFork': '\\uF173',\n            'MuteChat': '\\uF17A',\n            'AddHome': '\\uF17B',\n            'AddWork': '\\uF17C',\n            'MobileReport': '\\uF18A',\n            'ScaleVolume': '\\uF18C',\n            'HardDriveGroup': '\\uF18F',\n            'FastMode': '\\uF19A',\n            'ToggleLeft': '\\uF19E',\n            'ToggleRight': '\\uF19F',\n            'TriangleShape': '\\uF1A7',\n            'RectangleShape': '\\uF1A9',\n            'CubeShape': '\\uF1AA',\n            'Trophy2': '\\uF1AE',\n            'BucketColor': '\\uF1B6',\n            'BucketColorFill': '\\uF1B7',\n            'Taskboard': '\\uF1C2',\n            'SingleColumn': '\\uF1D3',\n            'DoubleColumn': '\\uF1D4',\n            'TripleColumn': '\\uF1D5',\n            'ColumnLeftTwoThirds': '\\uF1D6',\n            'ColumnRightTwoThirds': '\\uF1D7',\n            'AccessLogoFill': '\\uF1DB',\n            'AnalyticsLogo': '\\uF1DE',\n            'AnalyticsQuery': '\\uF1DF',\n            'NewAnalyticsQuery': '\\uF1E0',\n            'AnalyticsReport': '\\uF1E1',\n            'WordLogo': '\\uF1E3',\n            'WordLogoFill': '\\uF1E4',\n            'ExcelLogo': '\\uF1E5',\n            'ExcelLogoFill': '\\uF1E6',\n            'OneNoteLogo': '\\uF1E7',\n            'OneNoteLogoFill': '\\uF1E8',\n            'OutlookLogo': '\\uF1E9',\n            'OutlookLogoFill': '\\uF1EA',\n            'PowerPointLogo': '\\uF1EB',\n            'PowerPointLogoFill': '\\uF1EC',\n            'PublisherLogo': '\\uF1ED',\n            'PublisherLogoFill': '\\uF1EE',\n            'ScheduleEventAction': '\\uF1EF',\n            'FlameSolid': '\\uF1F3',\n            'ServerProcesses': '\\uF1FE',\n            'Server': '\\uF201',\n            'SaveAll': '\\uF203',\n            'LinkedInLogo': '\\uF20A',\n            'Decimals': '\\uF218',\n            'SidePanelMirrored': '\\uF221',\n            'ProtectRestrict': '\\uF22A',\n            'Blog': '\\uF22B',\n            'UnknownMirrored': '\\uF22E',\n            'PublicContactCardMirrored': '\\uF230',\n            'GridViewSmall': '\\uF232',\n            'GridViewMedium': '\\uF233',\n            'GridViewLarge': '\\uF234',\n            'Step': '\\uF241',\n            'StepInsert': '\\uF242',\n            'StepShared': '\\uF243',\n            'StepSharedAdd': '\\uF244',\n            'StepSharedInsert': '\\uF245',\n            'ViewDashboard': '\\uF246',\n            'ViewList': '\\uF247'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-9.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-10.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_10_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-10\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-10-c4ded8e4.woff') format('woff')\"\n        },\n        icons: {\n            'ViewListGroup': '\\uF248',\n            'ViewListTree': '\\uF249',\n            'TriggerAuto': '\\uF24A',\n            'TriggerUser': '\\uF24B',\n            'PivotChart': '\\uF24C',\n            'StackedBarChart': '\\uF24D',\n            'StackedLineChart': '\\uF24E',\n            'BuildQueue': '\\uF24F',\n            'BuildQueueNew': '\\uF250',\n            'UserFollowed': '\\uF25C',\n            'ContactLink': '\\uF25F',\n            'Stack': '\\uF26F',\n            'Bullseye': '\\uF272',\n            'VennDiagram': '\\uF273',\n            'FiveTileGrid': '\\uF274',\n            'FocalPoint': '\\uF277',\n            'Insert': '\\uF278',\n            'RingerRemove': '\\uF279',\n            'TeamsLogoInverse': '\\uF27A',\n            'TeamsLogo': '\\uF27B',\n            'TeamsLogoFill': '\\uF27C',\n            'SkypeForBusinessLogoFill': '\\uF27D',\n            'SharepointLogo': '\\uF27E',\n            'SharepointLogoFill': '\\uF27F',\n            'DelveLogo': '\\uF280',\n            'DelveLogoFill': '\\uF281',\n            'OfficeVideoLogo': '\\uF282',\n            'OfficeVideoLogoFill': '\\uF283',\n            'ExchangeLogo': '\\uF284',\n            'ExchangeLogoFill': '\\uF285',\n            'Signin': '\\uF286',\n            'DocumentApproval': '\\uF28B',\n            'CloneToDesktop': '\\uF28C',\n            'InstallToDrive': '\\uF28D',\n            'Blur': '\\uF28E',\n            'Build': '\\uF28F',\n            'ProcessMetaTask': '\\uF290',\n            'BranchFork2': '\\uF291',\n            'BranchLocked': '\\uF292',\n            'BranchCommit': '\\uF293',\n            'BranchCompare': '\\uF294',\n            'BranchMerge': '\\uF295',\n            'BranchPullRequest': '\\uF296',\n            'BranchSearch': '\\uF297',\n            'BranchShelveset': '\\uF298',\n            'RawSource': '\\uF299',\n            'MergeDuplicate': '\\uF29A',\n            'RowsGroup': '\\uF29B',\n            'RowsChild': '\\uF29C',\n            'Deploy': '\\uF29D',\n            'Redeploy': '\\uF29E',\n            'ServerEnviroment': '\\uF29F',\n            'VisioDiagram': '\\uF2A0',\n            'HighlightMappedShapes': '\\uF2A1',\n            'TextCallout': '\\uF2A2',\n            'IconSetsFlag': '\\uF2A4',\n            'VisioLogo': '\\uF2A7',\n            'VisioLogoFill': '\\uF2A8',\n            'VisioDocument': '\\uF2A9',\n            'TimelineProgress': '\\uF2AA',\n            'TimelineDelivery': '\\uF2AB',\n            'Backlog': '\\uF2AC',\n            'TeamFavorite': '\\uF2AD',\n            'TaskGroup': '\\uF2AE',\n            'TaskGroupMirrored': '\\uF2AF',\n            'ScopeTemplate': '\\uF2B0',\n            'AssessmentGroupTemplate': '\\uF2B1',\n            'NewTeamProject': '\\uF2B2',\n            'CommentAdd': '\\uF2B3',\n            'CommentNext': '\\uF2B4',\n            'CommentPrevious': '\\uF2B5',\n            'ShopServer': '\\uF2B6',\n            'LocaleLanguage': '\\uF2B7',\n            'QueryList': '\\uF2B8',\n            'UserSync': '\\uF2B9',\n            'UserPause': '\\uF2BA',\n            'StreamingOff': '\\uF2BB',\n            'ArrowTallUpLeft': '\\uF2BD',\n            'ArrowTallUpRight': '\\uF2BE',\n            'ArrowTallDownLeft': '\\uF2BF',\n            'ArrowTallDownRight': '\\uF2C0',\n            'FieldEmpty': '\\uF2C1',\n            'FieldFilled': '\\uF2C2',\n            'FieldChanged': '\\uF2C3',\n            'FieldNotChanged': '\\uF2C4',\n            'RingerOff': '\\uF2C5',\n            'PlayResume': '\\uF2C6',\n            'BulletedList2': '\\uF2C7',\n            'BulletedList2Mirrored': '\\uF2C8',\n            'ImageCrosshair': '\\uF2C9',\n            'GitGraph': '\\uF2CA',\n            'Repo': '\\uF2CB',\n            'RepoSolid': '\\uF2CC',\n            'FolderQuery': '\\uF2CD',\n            'FolderList': '\\uF2CE',\n            'FolderListMirrored': '\\uF2CF',\n            'LocationOutline': '\\uF2D0',\n            'POISolid': '\\uF2D1',\n            'CalculatorNotEqualTo': '\\uF2D2',\n            'BoxSubtractSolid': '\\uF2D3'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-10.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-11.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_11_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-11\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-11-2a8393d6.woff') format('woff')\"\n        },\n        icons: {\n            'BoxAdditionSolid': '\\uF2D4',\n            'BoxMultiplySolid': '\\uF2D5',\n            'BoxPlaySolid': '\\uF2D6',\n            'BoxCheckmarkSolid': '\\uF2D7',\n            'CirclePauseSolid': '\\uF2D8',\n            'CirclePause': '\\uF2D9',\n            'MSNVideosSolid': '\\uF2DA',\n            'CircleStopSolid': '\\uF2DB',\n            'CircleStop': '\\uF2DC',\n            'NavigateBack': '\\uF2DD',\n            'NavigateBackMirrored': '\\uF2DE',\n            'NavigateForward': '\\uF2DF',\n            'NavigateForwardMirrored': '\\uF2E0',\n            'UnknownSolid': '\\uF2E1',\n            'UnknownMirroredSolid': '\\uF2E2',\n            'CircleAddition': '\\uF2E3',\n            'CircleAdditionSolid': '\\uF2E4',\n            'FilePDB': '\\uF2E5',\n            'FileTemplate': '\\uF2E6',\n            'FileSQL': '\\uF2E7',\n            'FileJAVA': '\\uF2E8',\n            'FileASPX': '\\uF2E9',\n            'FileCSS': '\\uF2EA',\n            'FileSass': '\\uF2EB',\n            'FileLess': '\\uF2EC',\n            'FileHTML': '\\uF2ED',\n            'JavaScriptLanguage': '\\uF2EE',\n            'CSharpLanguage': '\\uF2EF',\n            'CSharp': '\\uF2F0',\n            'VisualBasicLanguage': '\\uF2F1',\n            'VB': '\\uF2F2',\n            'CPlusPlusLanguage': '\\uF2F3',\n            'CPlusPlus': '\\uF2F4',\n            'FSharpLanguage': '\\uF2F5',\n            'FSharp': '\\uF2F6',\n            'TypeScriptLanguage': '\\uF2F7',\n            'PythonLanguage': '\\uF2F8',\n            'PY': '\\uF2F9',\n            'CoffeeScript': '\\uF2FA',\n            'MarkDownLanguage': '\\uF2FB',\n            'FullWidth': '\\uF2FE',\n            'FullWidthEdit': '\\uF2FF',\n            'Plug': '\\uF300',\n            'PlugSolid': '\\uF301',\n            'PlugConnected': '\\uF302',\n            'PlugDisconnected': '\\uF303',\n            'UnlockSolid': '\\uF304',\n            'Variable': '\\uF305',\n            'Parameter': '\\uF306',\n            'CommentUrgent': '\\uF307',\n            'Storyboard': '\\uF308',\n            'DiffInline': '\\uF309',\n            'DiffSideBySide': '\\uF30A',\n            'ImageDiff': '\\uF30B',\n            'ImagePixel': '\\uF30C',\n            'FileBug': '\\uF30D',\n            'FileCode': '\\uF30E',\n            'FileComment': '\\uF30F',\n            'BusinessHoursSign': '\\uF310',\n            'FileImage': '\\uF311',\n            'FileSymlink': '\\uF312',\n            'AutoFillTemplate': '\\uF313',\n            'WorkItem': '\\uF314',\n            'WorkItemBug': '\\uF315',\n            'LogRemove': '\\uF316',\n            'ColumnOptions': '\\uF317',\n            'Packages': '\\uF318',\n            'BuildIssue': '\\uF319',\n            'AssessmentGroup': '\\uF31A',\n            'VariableGroup': '\\uF31B',\n            'FullHistory': '\\uF31C',\n            'Wheelchair': '\\uF31F',\n            'SingleColumnEdit': '\\uF321',\n            'DoubleColumnEdit': '\\uF322',\n            'TripleColumnEdit': '\\uF323',\n            'ColumnLeftTwoThirdsEdit': '\\uF324',\n            'ColumnRightTwoThirdsEdit': '\\uF325',\n            'StreamLogo': '\\uF329',\n            'PassiveAuthentication': '\\uF32A',\n            'AlertSolid': '\\uF331',\n            'MegaphoneSolid': '\\uF332',\n            'TaskSolid': '\\uF333',\n            'ConfigurationSolid': '\\uF334',\n            'BugSolid': '\\uF335',\n            'CrownSolid': '\\uF336',\n            'Trophy2Solid': '\\uF337',\n            'QuickNoteSolid': '\\uF338',\n            'ConstructionConeSolid': '\\uF339',\n            'PageListSolid': '\\uF33A',\n            'PageListMirroredSolid': '\\uF33B',\n            'StarburstSolid': '\\uF33C',\n            'ReadingModeSolid': '\\uF33D',\n            'SadSolid': '\\uF33E',\n            'HealthSolid': '\\uF33F',\n            'ShieldSolid': '\\uF340',\n            'GiftBoxSolid': '\\uF341',\n            'ShoppingCartSolid': '\\uF342',\n            'MailSolid': '\\uF343',\n            'ChatSolid': '\\uF344',\n            'RibbonSolid': '\\uF345'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-11.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-12.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_12_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-12\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-12-7e945a1e.woff') format('woff')\"\n        },\n        icons: {\n            'FinancialSolid': '\\uF346',\n            'FinancialMirroredSolid': '\\uF347',\n            'HeadsetSolid': '\\uF348',\n            'PermissionsSolid': '\\uF349',\n            'ParkingSolid': '\\uF34A',\n            'ParkingMirroredSolid': '\\uF34B',\n            'DiamondSolid': '\\uF34C',\n            'AsteriskSolid': '\\uF34D',\n            'OfflineStorageSolid': '\\uF34E',\n            'BankSolid': '\\uF34F',\n            'DecisionSolid': '\\uF350',\n            'Parachute': '\\uF351',\n            'ParachuteSolid': '\\uF352',\n            'FiltersSolid': '\\uF353',\n            'ColorSolid': '\\uF354',\n            'ReviewSolid': '\\uF355',\n            'ReviewRequestSolid': '\\uF356',\n            'ReviewRequestMirroredSolid': '\\uF357',\n            'ReviewResponseSolid': '\\uF358',\n            'FeedbackRequestSolid': '\\uF359',\n            'FeedbackRequestMirroredSolid': '\\uF35A',\n            'FeedbackResponseSolid': '\\uF35B',\n            'WorkItemBar': '\\uF35C',\n            'WorkItemBarSolid': '\\uF35D',\n            'Separator': '\\uF35E',\n            'NavigateExternalInline': '\\uF35F',\n            'PlanView': '\\uF360',\n            'TimelineMatrixView': '\\uF361',\n            'EngineeringGroup': '\\uF362',\n            'ProjectCollection': '\\uF363',\n            'CaretBottomRightCenter8': '\\uF364',\n            'CaretBottomLeftCenter8': '\\uF365',\n            'CaretTopRightCenter8': '\\uF366',\n            'CaretTopLeftCenter8': '\\uF367',\n            'DonutChart': '\\uF368',\n            'ChevronUnfold10': '\\uF369',\n            'ChevronFold10': '\\uF36A',\n            'DoubleChevronDown8': '\\uF36B',\n            'DoubleChevronUp8': '\\uF36C',\n            'DoubleChevronLeft8': '\\uF36D',\n            'DoubleChevronRight8': '\\uF36E',\n            'ChevronDownEnd6': '\\uF36F',\n            'ChevronUpEnd6': '\\uF370',\n            'ChevronLeftEnd6': '\\uF371',\n            'ChevronRightEnd6': '\\uF372',\n            'ContextMenu': '\\uF37C',\n            'AzureAPIManagement': '\\uF37F',\n            'AzureServiceEndpoint': '\\uF380',\n            'VSTSLogo': '\\uF381',\n            'VSTSAltLogo1': '\\uF382',\n            'VSTSAltLogo2': '\\uF383',\n            'FileTypeSolution': '\\uF387',\n            'WordLogoInverse16': '\\uF390',\n            'WordLogo16': '\\uF391',\n            'WordLogoFill16': '\\uF392',\n            'PowerPointLogoInverse16': '\\uF393',\n            'PowerPointLogo16': '\\uF394',\n            'PowerPointLogoFill16': '\\uF395',\n            'ExcelLogoInverse16': '\\uF396',\n            'ExcelLogo16': '\\uF397',\n            'ExcelLogoFill16': '\\uF398',\n            'OneNoteLogoInverse16': '\\uF399',\n            'OneNoteLogo16': '\\uF39A',\n            'OneNoteLogoFill16': '\\uF39B',\n            'OutlookLogoInverse16': '\\uF39C',\n            'OutlookLogo16': '\\uF39D',\n            'OutlookLogoFill16': '\\uF39E',\n            'PublisherLogoInverse16': '\\uF39F',\n            'PublisherLogo16': '\\uF3A0',\n            'PublisherLogoFill16': '\\uF3A1',\n            'VisioLogoInverse16': '\\uF3A2',\n            'VisioLogo16': '\\uF3A3',\n            'VisioLogoFill16': '\\uF3A4',\n            'TestBeaker': '\\uF3A5',\n            'TestBeakerSolid': '\\uF3A6',\n            'TestExploreSolid': '\\uF3A7',\n            'TestAutoSolid': '\\uF3A8',\n            'TestUserSolid': '\\uF3A9',\n            'TestImpactSolid': '\\uF3AA',\n            'TestPlan': '\\uF3AB',\n            'TestStep': '\\uF3AC',\n            'TestParameter': '\\uF3AD',\n            'TestSuite': '\\uF3AE',\n            'TestCase': '\\uF3AF',\n            'Sprint': '\\uF3B0',\n            'SignOut': '\\uF3B1',\n            'TriggerApproval': '\\uF3B2',\n            'Rocket': '\\uF3B3',\n            'AzureKeyVault': '\\uF3B4',\n            'Onboarding': '\\uF3BA',\n            'Transition': '\\uF3BC',\n            'LikeSolid': '\\uF3BF',\n            'DislikeSolid': '\\uF3C0',\n            'CRMCustomerInsightsApp': '\\uF3C8',\n            'EditCreate': '\\uF3C9',\n            'PlayReverseResume': '\\uF3E4',\n            'PlayReverse': '\\uF3E5',\n            'SearchData': '\\uF3F1',\n            'UnSetColor': '\\uF3F9',\n            'DeclineCall': '\\uF405'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-12.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-13.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_13_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-13\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-13-c3989a02.woff') format('woff')\"\n        },\n        icons: {\n            'RectangularClipping': '\\uF407',\n            'TeamsLogo16': '\\uF40A',\n            'TeamsLogoFill16': '\\uF40B',\n            'Spacer': '\\uF40D',\n            'SkypeLogo16': '\\uF40E',\n            'SkypeForBusinessLogo16': '\\uF40F',\n            'SkypeForBusinessLogoFill16': '\\uF410',\n            'FilterSolid': '\\uF412',\n            'MailUndelivered': '\\uF415',\n            'MailTentative': '\\uF416',\n            'MailTentativeMirrored': '\\uF417',\n            'MailReminder': '\\uF418',\n            'ReceiptUndelivered': '\\uF419',\n            'ReceiptTentative': '\\uF41A',\n            'ReceiptTentativeMirrored': '\\uF41B',\n            'Inbox': '\\uF41C',\n            'IRMReply': '\\uF41D',\n            'IRMReplyMirrored': '\\uF41E',\n            'IRMForward': '\\uF41F',\n            'IRMForwardMirrored': '\\uF420',\n            'VoicemailIRM': '\\uF421',\n            'EventAccepted': '\\uF422',\n            'EventTentative': '\\uF423',\n            'EventTentativeMirrored': '\\uF424',\n            'EventDeclined': '\\uF425',\n            'IDBadge': '\\uF427',\n            'BackgroundColor': '\\uF42B',\n            'OfficeFormsLogoInverse16': '\\uF433',\n            'OfficeFormsLogo': '\\uF434',\n            'OfficeFormsLogoFill': '\\uF435',\n            'OfficeFormsLogo16': '\\uF436',\n            'OfficeFormsLogoFill16': '\\uF437',\n            'OfficeFormsLogoInverse24': '\\uF43A',\n            'OfficeFormsLogo24': '\\uF43B',\n            'OfficeFormsLogoFill24': '\\uF43C',\n            'PageLock': '\\uF43F',\n            'NotExecuted': '\\uF440',\n            'NotImpactedSolid': '\\uF441',\n            'FieldReadOnly': '\\uF442',\n            'FieldRequired': '\\uF443',\n            'BacklogBoard': '\\uF444',\n            'ExternalBuild': '\\uF445',\n            'ExternalTFVC': '\\uF446',\n            'ExternalXAML': '\\uF447',\n            'IssueSolid': '\\uF448',\n            'DefectSolid': '\\uF449',\n            'LadybugSolid': '\\uF44A',\n            'NugetLogo': '\\uF44C',\n            'TFVCLogo': '\\uF44D',\n            'ProjectLogo32': '\\uF47E',\n            'ProjectLogoFill32': '\\uF47F',\n            'ProjectLogo16': '\\uF480',\n            'ProjectLogoFill16': '\\uF481',\n            'SwayLogo32': '\\uF482',\n            'SwayLogoFill32': '\\uF483',\n            'SwayLogo16': '\\uF484',\n            'SwayLogoFill16': '\\uF485',\n            'ClassNotebookLogo32': '\\uF486',\n            'ClassNotebookLogoFill32': '\\uF487',\n            'ClassNotebookLogo16': '\\uF488',\n            'ClassNotebookLogoFill16': '\\uF489',\n            'ClassNotebookLogoInverse32': '\\uF48A',\n            'ClassNotebookLogoInverse16': '\\uF48B',\n            'StaffNotebookLogo32': '\\uF48C',\n            'StaffNotebookLogoFill32': '\\uF48D',\n            'StaffNotebookLogo16': '\\uF48E',\n            'StaffNotebookLogoFill16': '\\uF48F',\n            'StaffNotebookLogoInverted32': '\\uF490',\n            'StaffNotebookLogoInverted16': '\\uF491',\n            'KaizalaLogo': '\\uF492',\n            'TaskLogo': '\\uF493',\n            'ProtectionCenterLogo32': '\\uF494',\n            'GallatinLogo': '\\uF496',\n            'Globe2': '\\uF49A',\n            'Guitar': '\\uF49B',\n            'Breakfast': '\\uF49C',\n            'Brunch': '\\uF49D',\n            'BeerMug': '\\uF49E',\n            'Vacation': '\\uF49F',\n            'Teeth': '\\uF4A0',\n            'Taxi': '\\uF4A1',\n            'Chopsticks': '\\uF4A2',\n            'SyncOccurence': '\\uF4A3',\n            'UnsyncOccurence': '\\uF4A4',\n            'GIF': '\\uF4A9',\n            'PrimaryCalendar': '\\uF4AE',\n            'SearchCalendar': '\\uF4AF',\n            'VideoOff': '\\uF4B0',\n            'MicrosoftFlowLogo': '\\uF4B1',\n            'BusinessCenterLogo': '\\uF4B2',\n            'ToDoLogoBottom': '\\uF4B3',\n            'ToDoLogoTop': '\\uF4B4',\n            'EditSolid12': '\\uF4B5',\n            'EditSolidMirrored12': '\\uF4B6',\n            'UneditableSolid12': '\\uF4B7',\n            'UneditableSolidMirrored12': '\\uF4B8',\n            'UneditableMirrored': '\\uF4B9',\n            'AdminALogo32': '\\uF4BA',\n            'AdminALogoFill32': '\\uF4BB',\n            'ToDoLogoInverse': '\\uF4BC'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-13.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-14.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_14_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-14\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-14-5cf58db8.woff') format('woff')\"\n        },\n        icons: {\n            'Snooze': '\\uF4BD',\n            'WaffleOffice365': '\\uF4E0',\n            'ImageSearch': '\\uF4E8',\n            'NewsSearch': '\\uF4E9',\n            'VideoSearch': '\\uF4EA',\n            'R': '\\uF4EB',\n            'FontColorA': '\\uF4EC',\n            'FontColorSwatch': '\\uF4ED',\n            'LightWeight': '\\uF4EE',\n            'NormalWeight': '\\uF4EF',\n            'SemiboldWeight': '\\uF4F0',\n            'GroupObject': '\\uF4F1',\n            'UngroupObject': '\\uF4F2',\n            'AlignHorizontalLeft': '\\uF4F3',\n            'AlignHorizontalCenter': '\\uF4F4',\n            'AlignHorizontalRight': '\\uF4F5',\n            'AlignVerticalTop': '\\uF4F6',\n            'AlignVerticalCenter': '\\uF4F7',\n            'AlignVerticalBottom': '\\uF4F8',\n            'HorizontalDistributeCenter': '\\uF4F9',\n            'VerticalDistributeCenter': '\\uF4FA',\n            'Ellipse': '\\uF4FB',\n            'Line': '\\uF4FC',\n            'Octagon': '\\uF4FD',\n            'Hexagon': '\\uF4FE',\n            'Pentagon': '\\uF4FF',\n            'RightTriangle': '\\uF500',\n            'HalfCircle': '\\uF501',\n            'QuarterCircle': '\\uF502',\n            'ThreeQuarterCircle': '\\uF503',\n            '6PointStar': '\\uF504',\n            '12PointStar': '\\uF505',\n            'ArrangeBringToFront': '\\uF506',\n            'ArrangeSendToBack': '\\uF507',\n            'ArrangeSendBackward': '\\uF508',\n            'ArrangeBringForward': '\\uF509',\n            'BorderDash': '\\uF50A',\n            'BorderDot': '\\uF50B',\n            'LineStyle': '\\uF50C',\n            'LineThickness': '\\uF50D',\n            'WindowEdit': '\\uF50E',\n            'HintText': '\\uF50F',\n            'MediaAdd': '\\uF510',\n            'AnchorLock': '\\uF511',\n            'AutoHeight': '\\uF512',\n            'ChartSeries': '\\uF513',\n            'ChartXAngle': '\\uF514',\n            'ChartYAngle': '\\uF515',\n            'Combobox': '\\uF516',\n            'LineSpacing': '\\uF517',\n            'Padding': '\\uF518',\n            'PaddingTop': '\\uF519',\n            'PaddingBottom': '\\uF51A',\n            'PaddingLeft': '\\uF51B',\n            'PaddingRight': '\\uF51C',\n            'NavigationFlipper': '\\uF51D',\n            'AlignJustify': '\\uF51E',\n            'TextOverflow': '\\uF51F',\n            'VisualsFolder': '\\uF520',\n            'VisualsStore': '\\uF521',\n            'PictureCenter': '\\uF522',\n            'PictureFill': '\\uF523',\n            'PicturePosition': '\\uF524',\n            'PictureStretch': '\\uF525',\n            'PictureTile': '\\uF526',\n            'Slider': '\\uF527',\n            'SliderHandleSize': '\\uF528',\n            'DefaultRatio': '\\uF529',\n            'NumberSequence': '\\uF52A',\n            'GUID': '\\uF52B',\n            'ReportAdd': '\\uF52C',\n            'DashboardAdd': '\\uF52D',\n            'MapPinSolid': '\\uF52E',\n            'WebPublish': '\\uF52F',\n            'PieSingleSolid': '\\uF530',\n            'BlockedSolid': '\\uF531',\n            'DrillDown': '\\uF532',\n            'DrillDownSolid': '\\uF533',\n            'DrillExpand': '\\uF534',\n            'DrillShow': '\\uF535',\n            'SpecialEvent': '\\uF536',\n            'OneDriveFolder16': '\\uF53B',\n            'FunctionalManagerDashboard': '\\uF542',\n            'BIDashboard': '\\uF543',\n            'CodeEdit': '\\uF544',\n            'RenewalCurrent': '\\uF545',\n            'RenewalFuture': '\\uF546',\n            'SplitObject': '\\uF547',\n            'BulkUpload': '\\uF548',\n            'DownloadDocument': '\\uF549',\n            'GreetingCard': '\\uF54B',\n            'Flower': '\\uF54E',\n            'WaitlistConfirm': '\\uF550',\n            'WaitlistConfirmMirrored': '\\uF551',\n            'LaptopSecure': '\\uF552',\n            'DragObject': '\\uF553',\n            'EntryView': '\\uF554',\n            'EntryDecline': '\\uF555',\n            'ContactCardSettings': '\\uF556',\n            'ContactCardSettingsMirrored': '\\uF557'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-14.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-15.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_15_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-15\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-15-3807251b.woff') format('woff')\"\n        },\n        icons: {\n            'CalendarSettings': '\\uF558',\n            'CalendarSettingsMirrored': '\\uF559',\n            'HardDriveLock': '\\uF55A',\n            'HardDriveUnlock': '\\uF55B',\n            'AccountManagement': '\\uF55C',\n            'ReportWarning': '\\uF569',\n            'TransitionPop': '\\uF5B2',\n            'TransitionPush': '\\uF5B3',\n            'TransitionEffect': '\\uF5B4',\n            'LookupEntities': '\\uF5B5',\n            'ExploreData': '\\uF5B6',\n            'AddBookmark': '\\uF5B7',\n            'SearchBookmark': '\\uF5B8',\n            'DrillThrough': '\\uF5B9',\n            'MasterDatabase': '\\uF5BA',\n            'CertifiedDatabase': '\\uF5BB',\n            'MaximumValue': '\\uF5BC',\n            'MinimumValue': '\\uF5BD',\n            'VisualStudioIDELogo32': '\\uF5D0',\n            'PasteAsText': '\\uF5D5',\n            'PasteAsCode': '\\uF5D6',\n            'BrowserTab': '\\uF5D7',\n            'BrowserTabScreenshot': '\\uF5D8',\n            'DesktopScreenshot': '\\uF5D9',\n            'FileYML': '\\uF5DA',\n            'ClipboardSolid': '\\uF5DC',\n            'FabricUserFolder': '\\uF5E5',\n            'FabricNetworkFolder': '\\uF5E6',\n            'BullseyeTarget': '\\uF5F0',\n            'AnalyticsView': '\\uF5F1',\n            'Video360Generic': '\\uF609',\n            'Untag': '\\uF60B',\n            'Leave': '\\uF627',\n            'Trending12': '\\uF62D',\n            'Blocked12': '\\uF62E',\n            'Warning12': '\\uF62F',\n            'CheckedOutByOther12': '\\uF630',\n            'CheckedOutByYou12': '\\uF631',\n            'CircleShapeSolid': '\\uF63C',\n            'SquareShapeSolid': '\\uF63D',\n            'TriangleShapeSolid': '\\uF63E',\n            'DropShapeSolid': '\\uF63F',\n            'RectangleShapeSolid': '\\uF640',\n            'ZoomToFit': '\\uF649',\n            'InsertColumnsLeft': '\\uF64A',\n            'InsertColumnsRight': '\\uF64B',\n            'InsertRowsAbove': '\\uF64C',\n            'InsertRowsBelow': '\\uF64D',\n            'DeleteColumns': '\\uF64E',\n            'DeleteRows': '\\uF64F',\n            'DeleteRowsMirrored': '\\uF650',\n            'DeleteTable': '\\uF651',\n            'AccountBrowser': '\\uF652',\n            'VersionControlPush': '\\uF664',\n            'StackedColumnChart2': '\\uF666',\n            'TripleColumnWide': '\\uF66E',\n            'QuadColumn': '\\uF66F',\n            'WhiteBoardApp16': '\\uF673',\n            'WhiteBoardApp32': '\\uF674',\n            'PinnedSolid': '\\uF676',\n            'InsertSignatureLine': '\\uF677',\n            'ArrangeByFrom': '\\uF678',\n            'Phishing': '\\uF679',\n            'CreateMailRule': '\\uF67A',\n            'PublishCourse': '\\uF699',\n            'DictionaryRemove': '\\uF69A',\n            'UserRemove': '\\uF69B',\n            'UserEvent': '\\uF69C',\n            'Encryption': '\\uF69D',\n            'PasswordField': '\\uF6AA',\n            'OpenInNewTab': '\\uF6AB',\n            'Hide3': '\\uF6AC',\n            'VerifiedBrandSolid': '\\uF6AD',\n            'MarkAsProtected': '\\uF6AE',\n            'AuthenticatorApp': '\\uF6B1',\n            'WebTemplate': '\\uF6B2',\n            'DefenderTVM': '\\uF6B3',\n            'MedalSolid': '\\uF6B9',\n            'D365TalentLearn': '\\uF6BB',\n            'D365TalentInsight': '\\uF6BC',\n            'D365TalentHRCore': '\\uF6BD',\n            'BacklogList': '\\uF6BF',\n            'ButtonControl': '\\uF6C0',\n            'TableGroup': '\\uF6D9',\n            'MountainClimbing': '\\uF6DB',\n            'TagUnknown': '\\uF6DF',\n            'TagUnknownMirror': '\\uF6E0',\n            'TagUnknown12': '\\uF6E1',\n            'TagUnknown12Mirror': '\\uF6E2',\n            'Link12': '\\uF6E3',\n            'Presentation': '\\uF6E4',\n            'Presentation12': '\\uF6E5',\n            'Lock12': '\\uF6E6',\n            'BuildDefinition': '\\uF6E9',\n            'ReleaseDefinition': '\\uF6EA',\n            'SaveTemplate': '\\uF6EC',\n            'UserGauge': '\\uF6ED',\n            'BlockedSiteSolid12': '\\uF70A',\n            'TagSolid': '\\uF70E',\n            'OfficeChat': '\\uF70F'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-15.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-16.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_16_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-16\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-16-9cf93f3b.woff') format('woff')\"\n        },\n        icons: {\n            'OfficeChatSolid': '\\uF710',\n            'MailSchedule': '\\uF72E',\n            'WarningSolid': '\\uF736',\n            'Blocked2Solid': '\\uF737',\n            'SkypeCircleArrow': '\\uF747',\n            'SkypeArrow': '\\uF748',\n            'SyncStatus': '\\uF751',\n            'SyncStatusSolid': '\\uF752',\n            'ProjectDocument': '\\uF759',\n            'ToDoLogoOutline': '\\uF75B',\n            'VisioOnlineLogoFill32': '\\uF75F',\n            'VisioOnlineLogo32': '\\uF760',\n            'VisioOnlineLogoCloud32': '\\uF761',\n            'VisioDiagramSync': '\\uF762',\n            'Event12': '\\uF763',\n            'EventDateMissed12': '\\uF764',\n            'UserOptional': '\\uF767',\n            'ResponsesMenu': '\\uF768',\n            'DoubleDownArrow': '\\uF769',\n            'DistributeDown': '\\uF76A',\n            'BookmarkReport': '\\uF76B',\n            'FilterSettings': '\\uF76C',\n            'GripperDotsVertical': '\\uF772',\n            'MailAttached': '\\uF774',\n            'AddIn': '\\uF775',\n            'LinkedDatabase': '\\uF779',\n            'TableLink': '\\uF77A',\n            'PromotedDatabase': '\\uF77D',\n            'BarChartVerticalFilter': '\\uF77E',\n            'BarChartVerticalFilterSolid': '\\uF77F',\n            'MicOff2': '\\uF781',\n            'MicrosoftTranslatorLogo': '\\uF782',\n            'ShowTimeAs': '\\uF787',\n            'FileRequest': '\\uF789',\n            'WorkItemAlert': '\\uF78F',\n            'PowerBILogo16': '\\uF790',\n            'PowerBILogoBackplate16': '\\uF791',\n            'BulletedListText': '\\uF792',\n            'BulletedListBullet': '\\uF793',\n            'BulletedListTextMirrored': '\\uF794',\n            'BulletedListBulletMirrored': '\\uF795',\n            'NumberedListText': '\\uF796',\n            'NumberedListNumber': '\\uF797',\n            'NumberedListTextMirrored': '\\uF798',\n            'NumberedListNumberMirrored': '\\uF799',\n            'RemoveLinkChain': '\\uF79A',\n            'RemoveLinkX': '\\uF79B',\n            'FabricTextHighlight': '\\uF79C',\n            'ClearFormattingA': '\\uF79D',\n            'ClearFormattingEraser': '\\uF79E',\n            'Photo2Fill': '\\uF79F',\n            'IncreaseIndentText': '\\uF7A0',\n            'IncreaseIndentArrow': '\\uF7A1',\n            'DecreaseIndentText': '\\uF7A2',\n            'DecreaseIndentArrow': '\\uF7A3',\n            'IncreaseIndentTextMirrored': '\\uF7A4',\n            'IncreaseIndentArrowMirrored': '\\uF7A5',\n            'DecreaseIndentTextMirrored': '\\uF7A6',\n            'DecreaseIndentArrowMirrored': '\\uF7A7',\n            'CheckListText': '\\uF7A8',\n            'CheckListCheck': '\\uF7A9',\n            'CheckListTextMirrored': '\\uF7AA',\n            'CheckListCheckMirrored': '\\uF7AB',\n            'NumberSymbol': '\\uF7AC',\n            'Coupon': '\\uF7BC',\n            'VerifiedBrand': '\\uF7BD',\n            'ReleaseGate': '\\uF7BE',\n            'ReleaseGateCheck': '\\uF7BF',\n            'ReleaseGateError': '\\uF7C0',\n            'M365InvoicingLogo': '\\uF7C1',\n            'RemoveFromShoppingList': '\\uF7D5',\n            'ShieldAlert': '\\uF7D7',\n            'FabricTextHighlightComposite': '\\uF7DA',\n            'Dataflows': '\\uF7DD',\n            'GenericScanFilled': '\\uF7DE',\n            'DiagnosticDataBarTooltip': '\\uF7DF',\n            'SaveToMobile': '\\uF7E0',\n            'Orientation2': '\\uF7E1',\n            'ScreenCast': '\\uF7E2',\n            'ShowGrid': '\\uF7E3',\n            'SnapToGrid': '\\uF7E4',\n            'ContactList': '\\uF7E5',\n            'NewMail': '\\uF7EA',\n            'EyeShadow': '\\uF7EB',\n            'FabricFolderConfirm': '\\uF7FF',\n            'InformationBarriers': '\\uF803',\n            'CommentActive': '\\uF804',\n            'ColumnVerticalSectionEdit': '\\uF806',\n            'WavingHand': '\\uF807',\n            'ShakeDevice': '\\uF80A',\n            'SmartGlassRemote': '\\uF80B',\n            'Rotate90Clockwise': '\\uF80D',\n            'Rotate90CounterClockwise': '\\uF80E',\n            'CampaignTemplate': '\\uF811',\n            'ChartTemplate': '\\uF812',\n            'PageListFilter': '\\uF813',\n            'SecondaryNav': '\\uF814',\n            'ColumnVerticalSection': '\\uF81E',\n            'SkypeCircleSlash': '\\uF825',\n            'SkypeSlash': '\\uF826'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-16.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/fabric-icons-17.js\n// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license\n\nfunction fabric_icons_17_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = ''; }\n    var subset = {\n        style: {\n            MozOsxFontSmoothing: 'grayscale',\n            WebkitFontSmoothing: 'antialiased',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            speak: 'none'\n        },\n        fontFace: {\n            fontFamily: \"\\\"FabricMDL2Icons-17\\\"\",\n            src: \"url('\" + baseUrl + \"fabric-icons-17-0c4ed701.woff') format('woff')\"\n        },\n        icons: {\n            'CustomizeToolbar': '\\uF828',\n            'DuplicateRow': '\\uF82A',\n            'RemoveFromTrash': '\\uF82B',\n            'MailOptions': '\\uF82C',\n            'Childof': '\\uF82D',\n            'Footer': '\\uF82E',\n            'Header': '\\uF82F',\n            'BarChartVerticalFill': '\\uF830',\n            'StackedColumnChart2Fill': '\\uF831',\n            'PlainText': '\\uF834',\n            'AccessibiltyChecker': '\\uF835',\n            'DatabaseSync': '\\uF842',\n            'ReservationOrders': '\\uF845',\n            'TabOneColumn': '\\uF849',\n            'TabTwoColumn': '\\uF84A',\n            'TabThreeColumn': '\\uF84B',\n            'BulletedTreeList': '\\uF84C',\n            'MicrosoftTranslatorLogoGreen': '\\uF852',\n            'MicrosoftTranslatorLogoBlue': '\\uF853',\n            'InternalInvestigation': '\\uF854',\n            'AddReaction': '\\uF85D',\n            'ContactHeart': '\\uF862',\n            'VisuallyImpaired': '\\uF866',\n            'EventToDoLogo': '\\uF869',\n            'Variable2': '\\uF86D',\n            'ModelingView': '\\uF871',\n            'DisconnectVirtualMachine': '\\uF873',\n            'ReportLock': '\\uF875',\n            'Uneditable2': '\\uF876',\n            'Uneditable2Mirrored': '\\uF877',\n            'BarChartVerticalEdit': '\\uF89D',\n            'GlobalNavButtonActive': '\\uF89F',\n            'PollResults': '\\uF8A0',\n            'Rerun': '\\uF8A1',\n            'QandA': '\\uF8A2',\n            'QandAMirror': '\\uF8A3',\n            'BookAnswers': '\\uF8A4',\n            'AlertSettings': '\\uF8B6',\n            'TrimStart': '\\uF8BB',\n            'TrimEnd': '\\uF8BC',\n            'TableComputed': '\\uF8F5',\n            'DecreaseIndentLegacy': '\\uE290',\n            'IncreaseIndentLegacy': '\\uE291',\n            'SizeLegacy': '\\uE2B2'\n        }\n    };\n    registerIcons(subset, options);\n}\n//# sourceMappingURL=fabric-icons-17.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/iconAliases.js\n\nvar registerIconAliases = function () {\n    registerIconAlias('trash', 'delete');\n    registerIconAlias('onedrive', 'onedrivelogo');\n    registerIconAlias('alertsolid12', 'eventdatemissed12');\n    registerIconAlias('sixpointstar', '6pointstar');\n    registerIconAlias('twelvepointstar', '12pointstar');\n    registerIconAlias('toggleon', 'toggleleft');\n    registerIconAlias('toggleoff', 'toggleright');\n};\n/* harmony default export */ var iconAliases = (registerIconAliases);\n//# sourceMappingURL=iconAliases.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/version.js\n// Do not modify this file; it is generated as part of publish.\n// The checked in version is a placeholder only and will not be updated.\n\nObject(lib[\"a\" /* setVersion */])('@uifabric/icons', '7.4.0');\n//# sourceMappingURL=version.js.map\n// CONCATENATED MODULE: ./node_modules/@uifabric/icons/lib/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DEFAULT_BASE_URL = 'https://spoprod-a.akamaihd.net/files/fabric/assets/icons/';\nfunction lib_initializeIcons(baseUrl, options) {\n    if (baseUrl === void 0) { baseUrl = DEFAULT_BASE_URL; }\n    [\n        initializeIcons,\n        fabric_icons_0_initializeIcons,\n        fabric_icons_1_initializeIcons,\n        fabric_icons_2_initializeIcons,\n        fabric_icons_3_initializeIcons,\n        fabric_icons_4_initializeIcons,\n        fabric_icons_5_initializeIcons,\n        fabric_icons_6_initializeIcons,\n        fabric_icons_7_initializeIcons,\n        fabric_icons_8_initializeIcons,\n        fabric_icons_9_initializeIcons,\n        fabric_icons_10_initializeIcons,\n        fabric_icons_11_initializeIcons,\n        fabric_icons_12_initializeIcons,\n        fabric_icons_13_initializeIcons,\n        fabric_icons_14_initializeIcons,\n        fabric_icons_15_initializeIcons,\n        fabric_icons_16_initializeIcons,\n        fabric_icons_17_initializeIcons,\n    ].forEach(function (initialize) { return initialize(baseUrl, options); });\n    registerIconAliases();\n}\n\n//# sourceMappingURL=index.js.map\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\nvar inheritsLoose = __webpack_require__(4);\n\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(7);\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n// CONCATENATED MODULE: ./node_modules/resolve-pathname/esm/resolve-pathname.js\nfunction isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n}\n\n// About 1.5x faster than the two-arg version of Array#splice()\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n}\n\n// This implementation is based heavily on node's url.parse\nfunction resolvePathname(to, from) {\n  if (from === undefined) from = '';\n\n  var toParts = (to && to.split('/')) || [];\n  var fromParts = (from && from.split('/')) || [];\n\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n\n  var hasTrailingSlash;\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');\n\n  if (\n    mustEndAbs &&\n    fromParts[0] !== '' &&\n    (!fromParts[0] || !isAbsolute(fromParts[0]))\n  )\n    fromParts.unshift('');\n\n  var result = fromParts.join('/');\n\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n\n  return result;\n}\n\n/* harmony default export */ var resolve_pathname = (resolvePathname);\n\n// CONCATENATED MODULE: ./node_modules/value-equal/esm/value-equal.js\nfunction value_equal_valueOf(obj) {\n  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);\n}\n\nfunction valueEqual(a, b) {\n  // Test for strict equality first.\n  if (a === b) return true;\n\n  // Otherwise, if either of them == null they are not equal.\n  if (a == null || b == null) return false;\n\n  if (Array.isArray(a)) {\n    return (\n      Array.isArray(b) &&\n      a.length === b.length &&\n      a.every(function(item, index) {\n        return valueEqual(item, b[index]);\n      })\n    );\n  }\n\n  if (typeof a === 'object' || typeof b === 'object') {\n    var aValue = value_equal_valueOf(a);\n    var bValue = value_equal_valueOf(b);\n\n    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);\n\n    return Object.keys(Object.assign({}, a, b)).every(function(key) {\n      return valueEqual(a[key], b[key]);\n    });\n  }\n\n  return false;\n}\n\n/* harmony default export */ var value_equal = (valueEqual);\n\n// CONCATENATED MODULE: ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js\nvar isProduction = \"production\" === 'production';\nvar tiny_invariant_esm_prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(tiny_invariant_esm_prefix);\n    }\n    throw new Error(tiny_invariant_esm_prefix + \": \" + (message || ''));\n}\n\n/* harmony default export */ var tiny_invariant_esm = (invariant);\n\n// CONCATENATED MODULE: ./node_modules/history/esm/history.js\n\n\n\n\n\n\nfunction addLeadingSlash(path) {\n  return path.charAt(0) === '/' ? path : '/' + path;\n}\nfunction stripLeadingSlash(path) {\n  return path.charAt(0) === '/' ? path.substr(1) : path;\n}\nfunction hasBasename(path, prefix) {\n  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;\n}\nfunction stripBasename(path, prefix) {\n  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;\n}\nfunction stripTrailingSlash(path) {\n  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;\n}\nfunction parsePath(path) {\n  var pathname = path || '/';\n  var search = '';\n  var hash = '';\n  var hashIndex = pathname.indexOf('#');\n\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex);\n    pathname = pathname.substr(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex);\n    pathname = pathname.substr(0, searchIndex);\n  }\n\n  return {\n    pathname: pathname,\n    search: search === '?' ? '' : search,\n    hash: hash === '#' ? '' : hash\n  };\n}\nfunction createPath(location) {\n  var pathname = location.pathname,\n      search = location.search,\n      hash = location.hash;\n  var path = pathname || '/';\n  if (search && search !== '?') path += search.charAt(0) === '?' ? search : \"?\" + search;\n  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : \"#\" + hash;\n  return path;\n}\n\nfunction createLocation(path, state, key, currentLocation) {\n  var location;\n\n  if (typeof path === 'string') {\n    // Two-arg form: push(path, state)\n    location = parsePath(path);\n    location.state = state;\n  } else {\n    // One-arg form: push(location)\n    location = _extends({}, path);\n    if (location.pathname === undefined) location.pathname = '';\n\n    if (location.search) {\n      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;\n    } else {\n      location.search = '';\n    }\n\n    if (location.hash) {\n      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;\n    } else {\n      location.hash = '';\n    }\n\n    if (state !== undefined && location.state === undefined) location.state = state;\n  }\n\n  try {\n    location.pathname = decodeURI(location.pathname);\n  } catch (e) {\n    if (e instanceof URIError) {\n      throw new URIError('Pathname \"' + location.pathname + '\" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');\n    } else {\n      throw e;\n    }\n  }\n\n  if (key) location.key = key;\n\n  if (currentLocation) {\n    // Resolve incomplete/relative pathname relative to current location.\n    if (!location.pathname) {\n      location.pathname = currentLocation.pathname;\n    } else if (location.pathname.charAt(0) !== '/') {\n      location.pathname = resolve_pathname(location.pathname, currentLocation.pathname);\n    }\n  } else {\n    // When there is no prior location and pathname is empty, set it to /\n    if (!location.pathname) {\n      location.pathname = '/';\n    }\n  }\n\n  return location;\n}\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && value_equal(a.state, b.state);\n}\n\nfunction createTransitionManager() {\n  var prompt = null;\n\n  function setPrompt(nextPrompt) {\n     false ? undefined : void 0;\n    prompt = nextPrompt;\n    return function () {\n      if (prompt === nextPrompt) prompt = null;\n    };\n  }\n\n  function confirmTransitionTo(location, action, getUserConfirmation, callback) {\n    // TODO: If another transition starts while we're still confirming\n    // the previous one, we may end up in a weird state. Figure out the\n    // best way to handle this.\n    if (prompt != null) {\n      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;\n\n      if (typeof result === 'string') {\n        if (typeof getUserConfirmation === 'function') {\n          getUserConfirmation(result, callback);\n        } else {\n           false ? undefined : void 0;\n          callback(true);\n        }\n      } else {\n        // Return false from a transition hook to cancel the transition.\n        callback(result !== false);\n      }\n    } else {\n      callback(true);\n    }\n  }\n\n  var listeners = [];\n\n  function appendListener(fn) {\n    var isActive = true;\n\n    function listener() {\n      if (isActive) fn.apply(void 0, arguments);\n    }\n\n    listeners.push(listener);\n    return function () {\n      isActive = false;\n      listeners = listeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function notifyListeners() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    listeners.forEach(function (listener) {\n      return listener.apply(void 0, args);\n    });\n  }\n\n  return {\n    setPrompt: setPrompt,\n    confirmTransitionTo: confirmTransitionTo,\n    appendListener: appendListener,\n    notifyListeners: notifyListeners\n  };\n}\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nfunction getConfirmation(message, callback) {\n  callback(window.confirm(message)); // eslint-disable-line no-alert\n}\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = window.navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;\n  return window.history && 'pushState' in window.history;\n}\n/**\n * Returns true if browser fires popstate on hash change.\n * IE10 and IE11 do not.\n */\n\nfunction supportsPopStateOnHashChange() {\n  return window.navigator.userAgent.indexOf('Trident') === -1;\n}\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  return window.navigator.userAgent.indexOf('Firefox') === -1;\n}\n/**\n * Returns true if a given popstate event is an extraneous WebKit event.\n * Accounts for the fact that Chrome on iOS fires real popstate events\n * containing undefined state when pressing the back button.\n */\n\nfunction isExtraneousPopstateEvent(event) {\n  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;\n}\n\nvar PopStateEvent = 'popstate';\nvar HashChangeEvent = 'hashchange';\n\nfunction getHistoryState() {\n  try {\n    return window.history.state || {};\n  } catch (e) {\n    // IE 11 sometimes throws when accessing window.history.state\n    // See https://github.com/ReactTraining/history/pull/289\n    return {};\n  }\n}\n/**\n * Creates a history object that uses the HTML5 history API including\n * pushState, replaceState, and the popstate event.\n */\n\n\nfunction createBrowserHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n  var globalHistory = window.history;\n  var canUseHistory = supportsHistory();\n  var needsHashChangeListener = !supportsPopStateOnHashChange();\n  var _props = props,\n      _props$forceRefresh = _props.forceRefresh,\n      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';\n\n  function getDOMLocation(historyState) {\n    var _ref = historyState || {},\n        key = _ref.key,\n        state = _ref.state;\n\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    var path = pathname + search + hash;\n     false ? undefined : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path, state, key);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function handlePopState(event) {\n    // Ignore extraneous popstate events in WebKit.\n    if (isExtraneousPopstateEvent(event)) return;\n    handlePop(getDOMLocation(event.state));\n  }\n\n  function handleHashChange() {\n    handlePop(getDOMLocation(getHistoryState()));\n  }\n\n  var forceNextPop = false;\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = 'POP';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of keys we've seen in sessionStorage.\n    // Instead, we just default to 0 for keys we don't know.\n\n    var toIndex = allKeys.indexOf(toLocation.key);\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allKeys.indexOf(fromLocation.key);\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  }\n\n  var initialLocation = getDOMLocation(getHistoryState());\n  var allKeys = [initialLocation.key]; // Public interface\n\n  function createHref(location) {\n    return basename + createPath(location);\n  }\n\n  function push(path, state) {\n     false ? undefined : void 0;\n    var action = 'PUSH';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.pushState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.href = href;\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          var nextKeys = allKeys.slice(0, prevIndex + 1);\n          nextKeys.push(location.key);\n          allKeys = nextKeys;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n         false ? undefined : void 0;\n        window.location.href = href;\n      }\n    });\n  }\n\n  function replace(path, state) {\n     false ? undefined : void 0;\n    var action = 'REPLACE';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.replaceState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.replace(href);\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          if (prevIndex !== -1) allKeys[prevIndex] = location.key;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n         false ? undefined : void 0;\n        window.location.replace(href);\n      }\n    });\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nvar HashChangeEvent$1 = 'hashchange';\nvar HashPathCoders = {\n  hashbang: {\n    encodePath: function encodePath(path) {\n      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);\n    },\n    decodePath: function decodePath(path) {\n      return path.charAt(0) === '!' ? path.substr(1) : path;\n    }\n  },\n  noslash: {\n    encodePath: stripLeadingSlash,\n    decodePath: addLeadingSlash\n  },\n  slash: {\n    encodePath: addLeadingSlash,\n    decodePath: addLeadingSlash\n  }\n};\n\nfunction stripHash(url) {\n  var hashIndex = url.indexOf('#');\n  return hashIndex === -1 ? url : url.slice(0, hashIndex);\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var hashIndex = href.indexOf('#');\n  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);\n}\n\nfunction pushHashPath(path) {\n  window.location.hash = path;\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(stripHash(window.location.href) + '#' + path);\n}\n\nfunction createHashHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n  var globalHistory = window.history;\n  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();\n  var _props = props,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$hashType = _props.hashType,\n      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';\n  var _HashPathCoders$hashT = HashPathCoders[hashType],\n      encodePath = _HashPathCoders$hashT.encodePath,\n      decodePath = _HashPathCoders$hashT.decodePath;\n\n  function getDOMLocation() {\n    var path = decodePath(getHashPath());\n     false ? undefined : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  var forceNextPop = false;\n  var ignorePath = null;\n\n  function locationsAreEqual$$1(a, b) {\n    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;\n  }\n\n  function handleHashChange() {\n    var path = getHashPath();\n    var encodedPath = encodePath(path);\n\n    if (path !== encodedPath) {\n      // Ensure we always have a properly-encoded hash.\n      replaceHashPath(encodedPath);\n    } else {\n      var location = getDOMLocation();\n      var prevLocation = history.location;\n      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.\n\n      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.\n\n      ignorePath = null;\n      handlePop(location);\n    }\n  }\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = 'POP';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of paths we've seen in sessionStorage.\n    // Instead, we just default to 0 for paths we don't know.\n\n    var toIndex = allPaths.lastIndexOf(createPath(toLocation));\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  } // Ensure the hash is encoded properly before doing anything else.\n\n\n  var path = getHashPath();\n  var encodedPath = encodePath(path);\n  if (path !== encodedPath) replaceHashPath(encodedPath);\n  var initialLocation = getDOMLocation();\n  var allPaths = [createPath(initialLocation)]; // Public interface\n\n  function createHref(location) {\n    var baseTag = document.querySelector('base');\n    var href = '';\n\n    if (baseTag && baseTag.getAttribute('href')) {\n      href = stripHash(window.location.href);\n    }\n\n    return href + '#' + encodePath(basename + createPath(location));\n  }\n\n  function push(path, state) {\n     false ? undefined : void 0;\n    var action = 'PUSH';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a PUSH, so we'd\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        pushHashPath(encodedPath);\n        var prevIndex = allPaths.lastIndexOf(createPath(history.location));\n        var nextPaths = allPaths.slice(0, prevIndex + 1);\n        nextPaths.push(path);\n        allPaths = nextPaths;\n        setState({\n          action: action,\n          location: location\n        });\n      } else {\n         false ? undefined : void 0;\n        setState();\n      }\n    });\n  }\n\n  function replace(path, state) {\n     false ? undefined : void 0;\n    var action = 'REPLACE';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a REPLACE, so we'd\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        replaceHashPath(encodedPath);\n      }\n\n      var prevIndex = allPaths.indexOf(createPath(history.location));\n      if (prevIndex !== -1) allPaths[prevIndex] = path;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n     false ? undefined : void 0;\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(HashChangeEvent$1, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(HashChangeEvent$1, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n/**\n * Creates a history object that stores locations in memory.\n */\n\n\nfunction createMemoryHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      getUserConfirmation = _props.getUserConfirmation,\n      _props$initialEntries = _props.initialEntries,\n      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,\n      _props$initialIndex = _props.initialIndex,\n      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = history.entries.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var index = clamp(initialIndex, 0, initialEntries.length - 1);\n  var entries = initialEntries.map(function (entry) {\n    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());\n  }); // Public interface\n\n  var createHref = createPath;\n\n  function push(path, state) {\n     false ? undefined : void 0;\n    var action = 'PUSH';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var prevIndex = history.index;\n      var nextIndex = prevIndex + 1;\n      var nextEntries = history.entries.slice(0);\n\n      if (nextEntries.length > nextIndex) {\n        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);\n      } else {\n        nextEntries.push(location);\n      }\n\n      setState({\n        action: action,\n        location: location,\n        index: nextIndex,\n        entries: nextEntries\n      });\n    });\n  }\n\n  function replace(path, state) {\n     false ? undefined : void 0;\n    var action = 'REPLACE';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      history.entries[history.index] = location;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);\n    var action = 'POP';\n    var location = history.entries[nextIndex];\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (ok) {\n        setState({\n          action: action,\n          location: location,\n          index: nextIndex\n        });\n      } else {\n        // Mimic the behavior of DOM histories by\n        // causing a render after a cancelled POP.\n        setState();\n      }\n    });\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function canGo(n) {\n    var nextIndex = history.index + n;\n    return nextIndex >= 0 && nextIndex < history.entries.length;\n  }\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    return transitionManager.setPrompt(prompt);\n  }\n\n  function listen(listener) {\n    return transitionManager.appendListener(listener);\n  }\n\n  var history = {\n    length: entries.length,\n    action: 'POP',\n    location: entries[index],\n    index: index,\n    entries: entries,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    canGo: canGo,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\n\n\n// EXTERNAL MODULE: ./node_modules/mini-create-react-context/dist/esm/index.js\nvar esm = __webpack_require__(16);\n\n// EXTERNAL MODULE: ./node_modules/react-router/node_modules/path-to-regexp/index.js\nvar path_to_regexp = __webpack_require__(17);\nvar path_to_regexp_default = /*#__PURE__*/__webpack_require__.n(path_to_regexp);\n\n// EXTERNAL MODULE: ./node_modules/react-is/index.js\nvar react_is = __webpack_require__(24);\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\nvar hoist_non_react_statics_cjs = __webpack_require__(27);\nvar hoist_non_react_statics_cjs_default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics_cjs);\n\n// CONCATENATED MODULE: ./node_modules/react-router/esm/react-router.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n// TODO: Replace with React.createContext once we can assume React 16+\n\nvar react_router_createNamedContext = function createNamedContext(name) {\n  var context = Object(esm[\"a\" /* default */])();\n  context.displayName = name;\n  return context;\n};\n\nvar historyContext =\n/*#__PURE__*/\nreact_router_createNamedContext(\"Router-History\");\n\n// TODO: Replace with React.createContext once we can assume React 16+\n\nvar createNamedContext$1 = function createNamedContext(name) {\n  var context = Object(esm[\"a\" /* default */])();\n  context.displayName = name;\n  return context;\n};\n\nvar react_router_context =\n/*#__PURE__*/\ncreateNamedContext$1(\"Router\");\n\n/**\n * The public API for putting history on context.\n */\n\nvar react_router_Router =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose[\"a\" /* default */])(Router, _React$Component);\n\n  Router.computeRootMatch = function computeRootMatch(pathname) {\n    return {\n      path: \"/\",\n      url: \"/\",\n      params: {},\n      isExact: pathname === \"/\"\n    };\n  };\n\n  function Router(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      location: props.history.location\n    }; // This is a bit of a hack. We have to start listening for location\n    // changes here in the constructor in case there are any <Redirect>s\n    // on the initial render. If there are, they will replace/push when\n    // they mount and since cDM fires in children before parents, we may\n    // get a new location before the <Router> is mounted.\n\n    _this._isMounted = false;\n    _this._pendingLocation = null;\n\n    if (!props.staticContext) {\n      _this.unlisten = props.history.listen(function (location) {\n        if (_this._isMounted) {\n          _this.setState({\n            location: location\n          });\n        } else {\n          _this._pendingLocation = location;\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  var _proto = Router.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._isMounted = true;\n\n    if (this._pendingLocation) {\n      this.setState({\n        location: this._pendingLocation\n      });\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.unlisten) this.unlisten();\n  };\n\n  _proto.render = function render() {\n    return react_default.a.createElement(react_router_context.Provider, {\n      value: {\n        history: this.props.history,\n        location: this.state.location,\n        match: Router.computeRootMatch(this.state.location.pathname),\n        staticContext: this.props.staticContext\n      }\n    }, react_default.a.createElement(historyContext.Provider, {\n      children: this.props.children || null,\n      value: this.props.history\n    }));\n  };\n\n  return Router;\n}(react_default.a.Component);\n\nif (false) {}\n\n/**\n * The public API for a <Router> that stores location in memory.\n */\n\nvar react_router_MemoryRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose[\"a\" /* default */])(MemoryRouter, _React$Component);\n\n  function MemoryRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createMemoryHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = MemoryRouter.prototype;\n\n  _proto.render = function render() {\n    return react_default.a.createElement(react_router_Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return MemoryRouter;\n}(react_default.a.Component);\n\nif (false) {}\n\nvar react_router_Lifecycle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose[\"a\" /* default */])(Lifecycle, _React$Component);\n\n  function Lifecycle() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Lifecycle.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.props.onMount) this.props.onMount.call(this, this);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.props.onUnmount) this.props.onUnmount.call(this, this);\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return Lifecycle;\n}(react_default.a.Component);\n\n/**\n * The public API for prompting the user before navigating away from a screen.\n */\n\nfunction Prompt(_ref) {\n  var message = _ref.message,\n      _ref$when = _ref.when,\n      when = _ref$when === void 0 ? true : _ref$when;\n  return react_default.a.createElement(react_router_context.Consumer, null, function (context) {\n    !context ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n    if (!when || context.staticContext) return null;\n    var method = context.history.block;\n    return react_default.a.createElement(react_router_Lifecycle, {\n      onMount: function onMount(self) {\n        self.release = method(message);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        if (prevProps.message !== message) {\n          self.release();\n          self.release = method(message);\n        }\n      },\n      onUnmount: function onUnmount(self) {\n        self.release();\n      },\n      message: message\n    });\n  });\n}\n\nif (false) { var messageType; }\n\nvar react_router_cache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nfunction compilePath(path) {\n  if (react_router_cache[path]) return react_router_cache[path];\n  var generator = path_to_regexp_default.a.compile(path);\n\n  if (cacheCount < cacheLimit) {\n    react_router_cache[path] = generator;\n    cacheCount++;\n  }\n\n  return generator;\n}\n/**\n * Public API for generating a URL pathname from a path and parameters.\n */\n\n\nfunction generatePath(path, params) {\n  if (path === void 0) {\n    path = \"/\";\n  }\n\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path === \"/\" ? path : compilePath(path)(params, {\n    pretty: true\n  });\n}\n\n/**\n * The public API for navigating programmatically with a component.\n */\n\nfunction Redirect(_ref) {\n  var computedMatch = _ref.computedMatch,\n      to = _ref.to,\n      _ref$push = _ref.push,\n      push = _ref$push === void 0 ? false : _ref$push;\n  return react_default.a.createElement(react_router_context.Consumer, null, function (context) {\n    !context ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n    var history = context.history,\n        staticContext = context.staticContext;\n    var method = push ? history.push : history.replace;\n    var location = createLocation(computedMatch ? typeof to === \"string\" ? generatePath(to, computedMatch.params) : _extends({}, to, {\n      pathname: generatePath(to.pathname, computedMatch.params)\n    }) : to); // When rendering in a static context,\n    // set the new location immediately.\n\n    if (staticContext) {\n      method(location);\n      return null;\n    }\n\n    return react_default.a.createElement(react_router_Lifecycle, {\n      onMount: function onMount() {\n        method(location);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        var prevLocation = createLocation(prevProps.to);\n\n        if (!locationsAreEqual(prevLocation, _extends({}, location, {\n          key: prevLocation.key\n        }))) {\n          method(location);\n        }\n      },\n      to: to\n    });\n  });\n}\n\nif (false) {}\n\nvar cache$1 = {};\nvar cacheLimit$1 = 10000;\nvar cacheCount$1 = 0;\n\nfunction compilePath$1(path, options) {\n  var cacheKey = \"\" + options.end + options.strict + options.sensitive;\n  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});\n  if (pathCache[path]) return pathCache[path];\n  var keys = [];\n  var regexp = path_to_regexp_default()(path, keys, options);\n  var result = {\n    regexp: regexp,\n    keys: keys\n  };\n\n  if (cacheCount$1 < cacheLimit$1) {\n    pathCache[path] = result;\n    cacheCount$1++;\n  }\n\n  return result;\n}\n/**\n * Public API for matching a URL pathname to a path.\n */\n\n\nfunction matchPath(pathname, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof options === \"string\" || Array.isArray(options)) {\n    options = {\n      path: options\n    };\n  }\n\n  var _options = options,\n      path = _options.path,\n      _options$exact = _options.exact,\n      exact = _options$exact === void 0 ? false : _options$exact,\n      _options$strict = _options.strict,\n      strict = _options$strict === void 0 ? false : _options$strict,\n      _options$sensitive = _options.sensitive,\n      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;\n  var paths = [].concat(path);\n  return paths.reduce(function (matched, path) {\n    if (!path && path !== \"\") return null;\n    if (matched) return matched;\n\n    var _compilePath = compilePath$1(path, {\n      end: exact,\n      strict: strict,\n      sensitive: sensitive\n    }),\n        regexp = _compilePath.regexp,\n        keys = _compilePath.keys;\n\n    var match = regexp.exec(pathname);\n    if (!match) return null;\n    var url = match[0],\n        values = match.slice(1);\n    var isExact = pathname === url;\n    if (exact && !isExact) return null;\n    return {\n      path: path,\n      // the path used to match\n      url: path === \"/\" && url === \"\" ? \"/\" : url,\n      // the matched portion of the URL\n      isExact: isExact,\n      // whether or not we matched exactly\n      params: keys.reduce(function (memo, key, index) {\n        memo[key.name] = values[index];\n        return memo;\n      }, {})\n    };\n  }, null);\n}\n\nfunction isEmptyChildren(children) {\n  return react_default.a.Children.count(children) === 0;\n}\n\nfunction evalChildrenDev(children, props, path) {\n  var value = children(props);\n   false ? undefined : void 0;\n  return value || null;\n}\n/**\n * The public API for matching a single path and rendering.\n */\n\n\nvar react_router_Route =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose[\"a\" /* default */])(Route, _React$Component);\n\n  function Route() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Route.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return react_default.a.createElement(react_router_context.Consumer, null, function (context$1) {\n      !context$1 ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n      var location = _this.props.location || context$1.location;\n      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us\n      : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;\n\n      var props = _extends({}, context$1, {\n        location: location,\n        match: match\n      });\n\n      var _this$props = _this.props,\n          children = _this$props.children,\n          component = _this$props.component,\n          render = _this$props.render; // Preact uses an empty array as children by\n      // default, so use null if that's the case.\n\n      if (Array.isArray(children) && children.length === 0) {\n        children = null;\n      }\n\n      return react_default.a.createElement(react_router_context.Provider, {\n        value: props\n      }, props.match ? children ? typeof children === \"function\" ?  false ? undefined : children(props) : children : component ? react_default.a.createElement(component, props) : render ? render(props) : null : typeof children === \"function\" ?  false ? undefined : children(props) : null);\n    });\n  };\n\n  return Route;\n}(react_default.a.Component);\n\nif (false) {}\n\nfunction react_router_addLeadingSlash(path) {\n  return path.charAt(0) === \"/\" ? path : \"/\" + path;\n}\n\nfunction addBasename(basename, location) {\n  if (!basename) return location;\n  return _extends({}, location, {\n    pathname: react_router_addLeadingSlash(basename) + location.pathname\n  });\n}\n\nfunction react_router_stripBasename(basename, location) {\n  if (!basename) return location;\n  var base = react_router_addLeadingSlash(basename);\n  if (location.pathname.indexOf(base) !== 0) return location;\n  return _extends({}, location, {\n    pathname: location.pathname.substr(base.length)\n  });\n}\n\nfunction createURL(location) {\n  return typeof location === \"string\" ? location : createPath(location);\n}\n\nfunction staticHandler(methodName) {\n  return function () {\n      false ? undefined : tiny_invariant_esm(false) ;\n  };\n}\n\nfunction noop() {}\n/**\n * The public top-level API for a \"static\" <Router>, so-called because it\n * can't actually change the current location. Instead, it just records\n * location changes in a context object. Useful mainly in testing and\n * server-rendering scenarios.\n */\n\n\nvar react_router_StaticRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose[\"a\" /* default */])(StaticRouter, _React$Component);\n\n  function StaticRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handlePush = function (location) {\n      return _this.navigateTo(location, \"PUSH\");\n    };\n\n    _this.handleReplace = function (location) {\n      return _this.navigateTo(location, \"REPLACE\");\n    };\n\n    _this.handleListen = function () {\n      return noop;\n    };\n\n    _this.handleBlock = function () {\n      return noop;\n    };\n\n    return _this;\n  }\n\n  var _proto = StaticRouter.prototype;\n\n  _proto.navigateTo = function navigateTo(location, action) {\n    var _this$props = this.props,\n        _this$props$basename = _this$props.basename,\n        basename = _this$props$basename === void 0 ? \"\" : _this$props$basename,\n        _this$props$context = _this$props.context,\n        context = _this$props$context === void 0 ? {} : _this$props$context;\n    context.action = action;\n    context.location = addBasename(basename, createLocation(location));\n    context.url = createURL(context.location);\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        _this$props2$basename = _this$props2.basename,\n        basename = _this$props2$basename === void 0 ? \"\" : _this$props2$basename,\n        _this$props2$context = _this$props2.context,\n        context = _this$props2$context === void 0 ? {} : _this$props2$context,\n        _this$props2$location = _this$props2.location,\n        location = _this$props2$location === void 0 ? \"/\" : _this$props2$location,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"basename\", \"context\", \"location\"]);\n\n    var history = {\n      createHref: function createHref(path) {\n        return react_router_addLeadingSlash(basename + createURL(path));\n      },\n      action: \"POP\",\n      location: react_router_stripBasename(basename, createLocation(location)),\n      push: this.handlePush,\n      replace: this.handleReplace,\n      go: staticHandler(\"go\"),\n      goBack: staticHandler(\"goBack\"),\n      goForward: staticHandler(\"goForward\"),\n      listen: this.handleListen,\n      block: this.handleBlock\n    };\n    return react_default.a.createElement(react_router_Router, _extends({}, rest, {\n      history: history,\n      staticContext: context\n    }));\n  };\n\n  return StaticRouter;\n}(react_default.a.Component);\n\nif (false) {}\n\n/**\n * The public API for rendering the first <Route> that matches.\n */\n\nvar react_router_Switch =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose[\"a\" /* default */])(Switch, _React$Component);\n\n  function Switch() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Switch.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return react_default.a.createElement(react_router_context.Consumer, null, function (context) {\n      !context ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n      var location = _this.props.location || context.location;\n      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()\n      // here because toArray adds keys to all child elements and we do not want\n      // to trigger an unmount/remount for two <Route>s that render the same\n      // component at different URLs.\n\n      react_default.a.Children.forEach(_this.props.children, function (child) {\n        if (match == null && react_default.a.isValidElement(child)) {\n          element = child;\n          var path = child.props.path || child.props.from;\n          match = path ? matchPath(location.pathname, _extends({}, child.props, {\n            path: path\n          })) : context.match;\n        }\n      });\n      return match ? react_default.a.cloneElement(element, {\n        location: location,\n        computedMatch: match\n      }) : null;\n    });\n  };\n\n  return Switch;\n}(react_default.a.Component);\n\nif (false) {}\n\n/**\n * A public higher-order component to access the imperative API\n */\n\nfunction withRouter(Component) {\n  var displayName = \"withRouter(\" + (Component.displayName || Component.name) + \")\";\n\n  var C = function C(props) {\n    var wrappedComponentRef = props.wrappedComponentRef,\n        remainingProps = _objectWithoutPropertiesLoose(props, [\"wrappedComponentRef\"]);\n\n    return react_default.a.createElement(react_router_context.Consumer, null, function (context) {\n      !context ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n      return react_default.a.createElement(Component, _extends({}, remainingProps, context, {\n        ref: wrappedComponentRef\n      }));\n    });\n  };\n\n  C.displayName = displayName;\n  C.WrappedComponent = Component;\n\n  if (false) {}\n\n  return hoist_non_react_statics_cjs_default()(C, Component);\n}\n\nvar useContext = react_default.a.useContext;\nfunction useHistory() {\n  if (false) {}\n\n  return useContext(historyContext);\n}\nfunction useLocation() {\n  if (false) {}\n\n  return useContext(react_router_context).location;\n}\nfunction useParams() {\n  if (false) {}\n\n  var match = useContext(react_router_context).match;\n  return match ? match.params : {};\n}\nfunction useRouteMatch(path) {\n  if (false) {}\n\n  var location = useLocation();\n  var match = useContext(react_router_context).match;\n  return path ? matchPath(location.pathname, path) : match;\n}\n\nif (false) { var secondaryBuildName, initialBuildName, buildNames, react_router_key, global; }\n\n\n//# sourceMappingURL=react-router.js.map\n\n// CONCATENATED MODULE: ./node_modules/react-router-dom/esm/react-router-dom.js\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\n\nvar react_router_dom_BrowserRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose[\"a\" /* default */])(BrowserRouter, _React$Component);\n\n  function BrowserRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createBrowserHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = BrowserRouter.prototype;\n\n  _proto.render = function render() {\n    return react_default.a.createElement(react_router_Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return BrowserRouter;\n}(react_default.a.Component);\n\nif (false) {}\n\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\n\nvar react_router_dom_HashRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose[\"a\" /* default */])(HashRouter, _React$Component);\n\n  function HashRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createHashHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = HashRouter.prototype;\n\n  _proto.render = function render() {\n    return react_default.a.createElement(react_router_Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return HashRouter;\n}(react_default.a.Component);\n\nif (false) {}\n\nvar resolveToLocation = function resolveToLocation(to, currentLocation) {\n  return typeof to === \"function\" ? to(currentLocation) : to;\n};\nvar react_router_dom_normalizeToLocation = function normalizeToLocation(to, currentLocation) {\n  return typeof to === \"string\" ? createLocation(to, null, null, currentLocation) : to;\n};\n\nvar forwardRefShim = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef = react_default.a.forwardRef;\n\nif (typeof forwardRef === \"undefined\") {\n  forwardRef = forwardRefShim;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nvar LinkAnchor = forwardRef(function (_ref, forwardedRef) {\n  var innerRef = _ref.innerRef,\n      navigate = _ref.navigate,\n      _onClick = _ref.onClick,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"innerRef\", \"navigate\", \"onClick\"]);\n\n  var target = rest.target;\n\n  var props = _extends({}, rest, {\n    onClick: function onClick(event) {\n      try {\n        if (_onClick) _onClick(event);\n      } catch (ex) {\n        event.preventDefault();\n        throw ex;\n      }\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && ( // ignore everything but left clicks\n      !target || target === \"_self\") && // let browser handle \"target=_blank\" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n          navigate();\n        }\n    }\n  }); // React 15 compat\n\n\n  if (forwardRefShim !== forwardRef) {\n    props.ref = forwardedRef || innerRef;\n  } else {\n    props.ref = innerRef;\n  }\n  /* eslint-disable-next-line jsx-a11y/anchor-has-content */\n\n\n  return react_default.a.createElement(\"a\", props);\n});\n\nif (false) {}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nvar react_router_dom_Link = forwardRef(function (_ref2, forwardedRef) {\n  var _ref2$component = _ref2.component,\n      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,\n      replace = _ref2.replace,\n      to = _ref2.to,\n      innerRef = _ref2.innerRef,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"component\", \"replace\", \"to\", \"innerRef\"]);\n\n  return react_default.a.createElement(react_router_context.Consumer, null, function (context) {\n    !context ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n    var history = context.history;\n    var location = react_router_dom_normalizeToLocation(resolveToLocation(to, context.location), context.location);\n    var href = location ? history.createHref(location) : \"\";\n\n    var props = _extends({}, rest, {\n      href: href,\n      navigate: function navigate() {\n        var location = resolveToLocation(to, context.location);\n        var method = replace ? history.replace : history.push;\n        method(location);\n      }\n    }); // React 15 compat\n\n\n    if (forwardRefShim !== forwardRef) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return react_default.a.createElement(component, props);\n  });\n});\n\nif (false) { var refType, toType; }\n\nvar forwardRefShim$1 = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef$1 = react_default.a.forwardRef;\n\nif (typeof forwardRef$1 === \"undefined\") {\n  forwardRef$1 = forwardRefShim$1;\n}\n\nfunction joinClassnames() {\n  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classnames[_key] = arguments[_key];\n  }\n\n  return classnames.filter(function (i) {\n    return i;\n  }).join(\" \");\n}\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\n\n\nvar NavLink = forwardRef$1(function (_ref, forwardedRef) {\n  var _ref$ariaCurrent = _ref[\"aria-current\"],\n      ariaCurrent = _ref$ariaCurrent === void 0 ? \"page\" : _ref$ariaCurrent,\n      _ref$activeClassName = _ref.activeClassName,\n      activeClassName = _ref$activeClassName === void 0 ? \"active\" : _ref$activeClassName,\n      activeStyle = _ref.activeStyle,\n      classNameProp = _ref.className,\n      exact = _ref.exact,\n      isActiveProp = _ref.isActive,\n      locationProp = _ref.location,\n      sensitive = _ref.sensitive,\n      strict = _ref.strict,\n      styleProp = _ref.style,\n      to = _ref.to,\n      innerRef = _ref.innerRef,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"aria-current\", \"activeClassName\", \"activeStyle\", \"className\", \"exact\", \"isActive\", \"location\", \"sensitive\", \"strict\", \"style\", \"to\", \"innerRef\"]);\n\n  return react_default.a.createElement(react_router_context.Consumer, null, function (context) {\n    !context ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n    var currentLocation = locationProp || context.location;\n    var toLocation = react_router_dom_normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);\n    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n\n    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n    var match = escapedPath ? matchPath(currentLocation.pathname, {\n      path: escapedPath,\n      exact: exact,\n      sensitive: sensitive,\n      strict: strict\n    }) : null;\n    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);\n    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;\n    var style = isActive ? _extends({}, styleProp, {}, activeStyle) : styleProp;\n\n    var props = _extends({\n      \"aria-current\": isActive && ariaCurrent || null,\n      className: className,\n      style: style,\n      to: toLocation\n    }, rest); // React 15 compat\n\n\n    if (forwardRefShim$1 !== forwardRef$1) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return react_default.a.createElement(react_router_dom_Link, props);\n  });\n});\n\nif (false) { var ariaCurrentType; }\n\n\n//# sourceMappingURL=react-router-dom.js.map\n\n// EXTERNAL MODULE: ./src/index.css\nvar src_0 = __webpack_require__(43);\n\n// EXTERNAL MODULE: ./node_modules/xterm/lib/xterm.js\nvar xterm = __webpack_require__(25);\n\n// EXTERNAL MODULE: ./node_modules/xterm-addon-fit/lib/xterm-addon-fit.js\nvar xterm_addon_fit = __webpack_require__(26);\n\n// EXTERNAL MODULE: ./node_modules/xterm/css/xterm.css\nvar css_xterm = __webpack_require__(44);\n\n// CONCATENATED MODULE: ./src/ResizeObserver.tsx\n\nconst iframeStyle = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    visibility: 'hidden',\n};\nfunction ResizeObserver({ onResize, style, children, ...rest }) {\n    const onResizeRef = Object(react[\"useRef\"])(onResize);\n    onResizeRef.current = onResize;\n    const handleResize = Object(react[\"useCallback\"])(() => {\n        onResizeRef.current();\n    }, []);\n    const handleIframeRef = Object(react[\"useCallback\"])((element) => {\n        if (element) {\n            element.contentWindow.addEventListener('resize', handleResize);\n        }\n    }, []);\n    const containerStyle = react_default.a.useMemo(() => {\n        if (!style) {\n            return { position: 'relative' };\n        }\n        if (!style.position) {\n            return { ...style, position: 'relative' };\n        }\n        return style;\n    }, [style]);\n    return (react_default.a.createElement(\"div\", Object.assign({ style: containerStyle }, rest),\n        react_default.a.createElement(\"iframe\", { ref: handleIframeRef, style: iframeStyle }),\n        children));\n}\n\n// CONCATENATED MODULE: ./src/Shell.tsx\n\n\n\n\n// import { SearchAddon } from 'xterm-addon-search';\n\n\nfunction Shell({ device }) {\n    const routeMatch = useRouteMatch();\n    const [cached, setCached] = Object(react[\"useState\"])(false);\n    Object(react[\"useEffect\"])(() => {\n        setCached(true);\n    }, [routeMatch]);\n    const terminalRef = Object(react[\"useRef\"])();\n    const fitAddonRef = Object(react[\"useRef\"])();\n    const handleContainerRef = Object(react[\"useCallback\"])((element) => {\n        if (!element) {\n            return;\n        }\n        const terminal = new xterm[\"Terminal\"]({\n            scrollback: 9001,\n        });\n        const fitAddon = new xterm_addon_fit[\"FitAddon\"]();\n        fitAddonRef.current = fitAddon;\n        terminal.loadAddon(fitAddon);\n        terminalRef.current = terminal;\n        terminal.open(element);\n        fitAddon.fit();\n    }, []);\n    Object(react[\"useEffect\"])(() => {\n        return () => { var _a; return (_a = terminalRef.current) === null || _a === void 0 ? void 0 : _a.dispose(); };\n    }, []);\n    Object(react[\"useEffect\"])(() => {\n        if (!device || !terminalRef.current) {\n            return;\n        }\n        (async () => {\n            const shell = await device.shell();\n            const textEncoder = new TextEncoder();\n            terminalRef.current.onData(data => {\n                const { buffer } = textEncoder.encode(data);\n                shell.write(buffer);\n            });\n            shell.onData(data => {\n                terminalRef.current.write(new Uint8Array(data));\n            });\n        })();\n        return () => {\n            terminalRef.current.reset();\n            terminalRef.current.clear();\n        };\n    }, [device, terminalRef.current]);\n    const handleResize = Object(react[\"useCallback\"])(() => {\n        var _a;\n        (_a = fitAddonRef.current) === null || _a === void 0 ? void 0 : _a.fit();\n    }, []);\n    if (!cached) {\n        return null;\n    }\n    return (react_default.a.createElement(ResizeObserver, { onResize: handleResize },\n        react_default.a.createElement(\"div\", { ref: handleContainerRef, style: { height: '100%' } })));\n}\n\n// CONCATENATED MODULE: ./src/index.tsx\n\n\n\n\n\n\n\n\n\nlib_initializeIcons();\nfunction App() {\n    const location = useLocation();\n    const [device, setDevice] = react_default.a.useState();\n    const [connecting, setConnecting] = react_default.a.useState(false);\n    const [connectError, setConnectError] = react_default.a.useState(undefined);\n    const handleConnectClick = react_default.a.useCallback(async () => {\n        try {\n            const transportation = await WebUsbTransportation.pickDevice();\n            if (transportation) {\n                const device = new webadb_WebAdb(transportation);\n                setConnecting(true);\n                await device.connect();\n                setDevice(device);\n            }\n        }\n        catch (e) {\n            setConnectError(e.message);\n        }\n        finally {\n            setConnecting(false);\n        }\n    }, []);\n    const disconnect = Object(react[\"useCallback\"])(async () => {\n        try {\n            await (device === null || device === void 0 ? void 0 : device.dispose());\n        }\n        catch (e) {\n            console.log(e);\n        }\n        setDevice(undefined);\n    }, [device]);\n    const [tcpPort, setTcpPort] = react_default.a.useState();\n    const queryTcpPort = react_default.a.useCallback(async () => {\n        if (!device) {\n            return;\n        }\n        const result = await device.shell('getprop service.adb.tcp.port');\n        setTcpPort(Number.parseInt(result, 10));\n    }, [device]);\n    const [tcpPortValue, setTcpPortValue] = react_default.a.useState('5555');\n    const tcpPortInputId = useId('tcpPort');\n    const enableTcp = react_default.a.useCallback(async () => {\n        if (!device) {\n            return;\n        }\n        const result = await device.tcpip(Number.parseInt(tcpPortValue, 10));\n        console.log(result);\n    }, [device, tcpPortValue]);\n    const disableTcp = react_default.a.useCallback(async () => {\n        if (!device) {\n            return;\n        }\n        const result = await device.usb();\n        console.log(result);\n    }, [device]);\n    return (react_default.a.createElement(Stack, { verticalFill: true },\n        react_default.a.createElement(StackItem, { tokens: { padding: 8 } },\n            react_default.a.createElement(Text, { variant: \"xxLarge\" }, \"WebADB Demo\")),\n        react_default.a.createElement(StackItem, null,\n            react_default.a.createElement(Stack, { horizontal: true, verticalAlign: \"center\", tokens: { childrenGap: 8, padding: 8 } },\n                !device && react_default.a.createElement(StackItem, null,\n                    react_default.a.createElement(PrimaryButton_PrimaryButton, { text: \"Connect\", onClick: handleConnectClick })),\n                device && react_default.a.createElement(StackItem, null,\n                    react_default.a.createElement(DefaultButton_DefaultButton, { text: \"Disconnect\", onClick: disconnect })),\n                react_default.a.createElement(StackItem, null, device && `Connected to ${device.name}`))),\n        react_default.a.createElement(StackItem, null,\n            react_default.a.createElement(Separator, null)),\n        react_default.a.createElement(StackItem, { grow: true, styles: { root: { minHeight: 0 } } },\n            react_default.a.createElement(Stack, { horizontal: true, verticalFill: true, tokens: { childrenGap: 8 } },\n                react_default.a.createElement(StackItem, null,\n                    react_default.a.createElement(Nav, { styles: { root: { width: 250 } }, groups: [{\n                                links: [\n                                    { key: '/intro', name: 'Introduction', url: '#/intro' },\n                                    { key: '/adb-over-wifi', name: 'ADB over WiFi', url: '#/adb-over-wifi' },\n                                    { key: '/shell', name: 'Interactive Shell', url: '#/shell' },\n                                ]\n                            }], selectedKey: location.pathname })),\n                react_default.a.createElement(StackItem, { grow: true, styles: { root: { minHeight: 0 } } },\n                    react_default.a.createElement(react_router_Route, { path: \"/intro\" },\n                        react_default.a.createElement(Stack, { tokens: { childrenGap: 8, padding: 8 } },\n                            react_default.a.createElement(Text, { block: true },\n                                \"This demo can connect to your Android devices using the\",\n                                ' ',\n                                react_default.a.createElement(Link, { href: \"https://developer.mozilla.org/en-US/docs/Web/API/USB\", target: \"_blank\" }, \"WebUSB\"),\n                                ' ',\n                                \"API.\"),\n                            react_default.a.createElement(Text, { block: true }, \"Before start, please make sure your adb server is not running (`adb kill-server`), as there can be only one connection to your device at same time.\"))),\n                    react_default.a.createElement(react_router_Route, { path: \"/adb-over-wifi\" },\n                        react_default.a.createElement(Stack, { verticalFill: true, tokens: { childrenGap: 8, padding: 8 } },\n                            react_default.a.createElement(StackItem, null,\n                                react_default.a.createElement(MessageBar, null,\n                                    react_default.a.createElement(Text, null, \"Although WebADB can enable ADB over WiFi for you, it can't connect to your device wirelessly.\"))),\n                            react_default.a.createElement(Stack, { horizontal: true, verticalAlign: \"center\", tokens: { childrenGap: 8 } },\n                                react_default.a.createElement(StackItem, null,\n                                    react_default.a.createElement(PrimaryButton_PrimaryButton, { text: \"Update Status\", disabled: !device, onClick: queryTcpPort })),\n                                react_default.a.createElement(StackItem, null, tcpPort !== undefined &&\n                                    (tcpPort !== 0\n                                        ? `Enabled at port ${tcpPort}`\n                                        : 'Disabled'))),\n                            react_default.a.createElement(Stack, { horizontal: true, verticalAlign: \"center\", tokens: { childrenGap: 8 } },\n                                react_default.a.createElement(StackItem, null,\n                                    react_default.a.createElement(Label, { htmlFor: tcpPortInputId }, \"Port: \")),\n                                react_default.a.createElement(StackItem, null,\n                                    react_default.a.createElement(TextField, { id: tcpPortInputId, width: 300, disabled: !device, value: tcpPortValue, onChange: (e, value) => setTcpPortValue(value) })),\n                                react_default.a.createElement(StackItem, null,\n                                    react_default.a.createElement(PrimaryButton_PrimaryButton, { text: \"Enable\", disabled: !device, onClick: enableTcp }))),\n                            react_default.a.createElement(StackItem, null,\n                                react_default.a.createElement(PrimaryButton_PrimaryButton, { text: \"Disable\", disabled: !device || tcpPort === undefined || tcpPort === 0, onClick: disableTcp })))),\n                    react_default.a.createElement(react_router_Route, { path: \"/shell\" }, ({ match }) => (react_default.a.createElement(Stack, { verticalFill: true, styles: { root: { visibility: match ? 'visible' : 'hidden' } }, tokens: { childrenGap: 8, padding: 8 } },\n                        react_default.a.createElement(StackItem, { grow: true, styles: { root: { minHeight: 0 } } },\n                            react_default.a.createElement(Shell, { device: device })))))))),\n        react_default.a.createElement(Dialog, { hidden: !connecting, dialogContentProps: {\n                title: 'Connecting',\n                subText: 'Please authorize the connection on your device'\n            } },\n            react_default.a.createElement(ProgressIndicator, null)),\n        react_default.a.createElement(Dialog, { hidden: !connectError, dialogContentProps: {\n                type: DialogType.normal,\n                title: 'Connection Error',\n                subText: connectError,\n            } },\n            react_default.a.createElement(DialogFooter, null,\n                react_default.a.createElement(PrimaryButton_PrimaryButton, { text: \"OK\", onClick: () => setConnectError(undefined) })))));\n}\nreact_dom_default.a.render(react_default.a.createElement(react_router_dom_HashRouter, null,\n    react_default.a.createElement(App, null),\n    react_default.a.createElement(Redirect, { to: '/intro' })), document.getElementById('container'));\n// document.getElementById('start')!.onclick = async () => {\n//     const transportation = await WebUsbTransportation.pickDevice();\n//     const device = new WebAdb(transportation);\n//     const textEncoder = new TextEncoder();\n//     const output = await device.shell('echo', '1');\n//     console.log(output);\n//     const shell = await device.shell();\n//     const terminal = new Terminal({\n//         scrollback: 9001,\n//     });\n//     const searchAddon = new SearchAddon();\n//     terminal.loadAddon(searchAddon);\n//     const keyword = document.getElementById('search-keyword')! as HTMLInputElement;\n//     keyword.addEventListener('input', () => {\n//         searchAddon.findNext(keyword.value, { incremental: true });\n//     });\n//     const next = document.getElementById('search-next')!;\n//     next.addEventListener('click', () => {\n//         searchAddon.findNext(keyword.value);\n//     });\n//     const prev = document.getElementById('search-prev')!;\n//     prev.addEventListener('click', () => {\n//         searchAddon.findPrevious(keyword.value);\n//     });\n//     terminal.open(document.getElementById('terminal')!);\n//     terminal.onData(data => {\n//         const { buffer } = textEncoder.encode(data);\n//         shell.write(buffer);\n//     });\n//     shell.onData(data => {\n//         terminal.write(new Uint8Array(data));\n//     });\n// };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49\n")}]);