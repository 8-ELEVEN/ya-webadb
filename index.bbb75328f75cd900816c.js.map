{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../event/src/event-emitter.ts","webpack:///../event/src/async-event-emitter.ts","webpack:///../event/src/disposable.ts","webpack:///../adb/src/crypto.ts","webpack:///../struct/src/backing-field.ts","webpack:///../struct/src/field/array.ts","webpack:///../struct/src/field/definition.ts","webpack:///../struct/src/field/number.ts","webpack:///../struct/src/field/variable-length-array.ts","webpack:///../struct/src/field/fixed-length-array.ts","webpack:///../struct/src/types.ts","webpack:///../struct/src/struct.ts","webpack:///../adb/src/utils/auto-reset-event.ts","webpack:///../adb/src/utils/base64.ts","webpack:///../adb/src/utils/event-iterator.ts","webpack:///../adb/src/stream/readable-stream.ts","webpack:///../adb/src/stream/buffered-stream.ts","webpack:///../adb/src/stream/controller.ts","webpack:///../adb/src/stream/stream.ts","webpack:///../adb/src/stream/dispatcher.ts","webpack:///../adb/src/packet.ts","webpack:///../adb/src/auth.ts","webpack:///../adb/src/features.ts","webpack:///../adb/src/framebuffer.ts","webpack:///../adb/src/sync.ts","webpack:///../adb/src/adb.ts","webpack:///../adb-backend-web/src/index.ts","webpack:///./src/utils/with-display-name.ts","webpack:///./src/utils/resize-observer.tsx","webpack:///./src/error-dialog.tsx","webpack:///./src/connect.tsx","webpack:///./src/router.tsx","webpack:///./src/routes/file-manager.tsx","webpack:///./src/routes/framebuffer.tsx","webpack:///./src/routes/intro.tsx","webpack:///./src/routes/shell.tsx","webpack:///./src/routes/tcp-ip.tsx","webpack:///./src/index.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","EventEmitter","listeners","this","event","listener","thisArg","args","info","remove","index","indexOf","dispose","e","AutoDisposable","disposables","disposable","DisposableList","addDisposable","BigInt0","BigInt","BigInt1","BigInt2","BigInt2To64","getBig","buffer","offset","byteLength","view","DataView","getBigUint64","setBigLE","setBigUint64","parsePrivateKey","calculatePublicKey","privateKey","output","outputOffset","outputType","Error","ArrayBuffer","outputView","setUint32","n0inv","a","Number","isNaN","NaN","b","x","y","Math","floor","modInverse","asUintN","Sha1DigestInfo","sign","padded","Uint8Array","fillLength","set","signature","base","exponent","modulus","powMod","uint64Array","setBig","BackingField","getBackingField","field","setBackingField","initialize","subType","configurable","string","registry","getFieldTypeDefinition","type","registerFieldTypeDefinition","_field","_initExtra","methods","placeholder","context","read","options","decodeUtf8","extra","getSize","backingField","dataView","encodeUtf8","SizeMap","DataViewGetterMap","DataViewSetterMap","undefined","littleEndian","VariableLengthArray","getLengthBackingField","lengthField","setLengthBackingField","descriptor","getOwnPropertyDescriptor","emptyBehavior","getDynamicSize","StructDefaultOptions","_size","fields","_extra","array","arrayBuffer","_afterParsed","clone","size","_typescriptType","number","getOwnPropertyDescriptors","callback","fieldTypeDefinition","defineSimpleAccessors","init","defineProperties","initializeField","deserialize","fieldSize","serialize","initialSet","list","blocking","Promise","resolve","resolver","promise","pop","item","reject","ranges","chars","padding","charCodeAt","addRange","start","end","startCharCode","endCharCode","toValue","char","charCode","range","encodeBase64","input","arg1","arg2","_arg3","_arg4","inputOffset","inputLength","outputArgumentIndex","extraBytes","outputLength","maybeOutput","arguments","bufferInputStart","byteOffset","bufferOutputStart","inputIndex","outputIndex","z","sort","IteratorReturnUndefinedResult","done","freeze","pullQueue","pushQueue","ended","waterMark","pendingLowWaterEvent","lowWaterEvent","EventIteratorController","state","highWaterMark","lowWaterMark","cleanup","EventIteratorDefaultOptions","maxConsumerCount","Infinity","autoCleanup","autoStart","initializer","consumerCount","started","next","controller","fire","asyncIterator","return","stream","readLock","iterable","resetEvent","add","onData","wait","onClose","onLowWater","notify","backend","localId","remoteId","write","close","BufferedStream","subarray","super","dispatcher","writeLock","dataEvent","closeEvent","sendPacket","AdbCommand","Write","Close","AdbStream","initializers","streams","Map","packetEvent","streamEvent","errorEvent","_running","receiveLoop","packet","command","OK","handleOk","arg0","has","delete","payload","Open","handleOpen","handled","ack","service","packetOrCommand","values","clear","AdbPacketWithoutPayload","uint32","int32","AdbPacketStruct","afterParsed","magic","AdbPacket","AdbAuthType","checksum","async","bufferUsed","AdbDefaultAuthenticators","iteratorDone","iterator","iterateKeys","Token","Auth","Signature","generateKey","publicKeyBase64Length","publicKeyBuffer","PublicKey","authenticators","map","Constructor","tryAuth","AdbFeatures","FrameBuffer","AdbSyncRequestId","AdbSyncResponseId","AdbSyncStringRequest","LinuxFileType","AdbSyncLstatResponse","id","Lstat","mtime","ErrorCode","AdbSyncStatResponse","uint64","Stat","error","AdbSyncEntryResponse","Entry","AdbSyncDataResponse","Data","AdbSyncDoneResponse","Done","instance","AdbSyncFailResponse","message","ResponseTypeMap","Lstat2","Fail","readResponse","adb","sendLock","features","includes","StatV2","path","requestId","responseType","responseId","supportStat","response","List","results","entry","opendir","Receive","AdbPropKey","_connected","packetDispatcher","onDisconnected","_product","_model","_device","_features","join","authHandler","disposableList","onPacket","Connect","parseBanner","authPacket","tryNextAuth","onError","banner","pieces","split","props","prop","keyValue","Product","Model","Device","Features","createStreamAndReadAll","createStream","propAddr","shell","trim","port","buffered","readAll","WebUsbDeviceFilter","classCode","subclassCode","protocolCode","Utf8Encoder","TextEncoder","Utf8Decoder","TextDecoder","encode","decode","device","inEndPointNumber","outEndPointNumber","onDisconnectedEvent","_inEndpointNumber","_outEndpointNumber","open","configuration","configurations","interface_","interfaces","alternate","alternates","interfaceSubclass","interfaceClass","inEndpointNumber","outEndpointNumber","configurationValue","selectConfiguration","claimed","claimInterface","interfaceNumber","alternateSetting","selectAlternateInterface","endpoint","endpoints","direction","endpointNumber","navigator","usb","requestDevice","filters","fromDevice","productName","localStorage","getItem","sIndex","dIndex","decodeBase64","cryptoKey","crypto","subtle","modulusLength","publicExponent","hash","exportKey","setItem","transferOut","transferIn","status","clearHalt","withDisplayName","Component","displayName","iframeStyle","position","top","left","width","height","visibility","ResizeObserver","onResize","style","children","rest","onResizeRef","current","handleResize","handleIframeRef","element","contentWindow","addEventListener","containerStyle","useMemo","ref","ErrorDialogContext","createContext","errorDialogVisible","setTrue","showErrorDialog","setFalse","hideErrorDialog","useBoolean","errorMessage","setErrorMessage","Provider","Dialog","hidden","dialogContentProps","normal","title","subText","DialogFooter","PrimaryButton","text","onClick","onDeviceChange","show","connecting","setConnecting","connect","pickDevice","disconnect","Stack","horizontal","verticalAlign","tokens","childrenGap","StackItem","DefaultButton","ProgressIndicator","RouteStackProps","verticalFill","className","slideUpIn10","styles","root","overflow","CacheRoute","match","everMatched","stackProps","display","noCache","CacheSwitch","location","computedMatch","contextMatch","cached","Children","forEach","child","isValidElement","isCacheRoute","from","pathname","cloneElement","toListItem","initializeFileTypeIcons","mitm","classNames","cursor","textDecoration","units","extensionName","fileName","lastIndexOf","renderDetailsHeader","defaultRender","paddingTop","delay","time","setTimeout","createReadableStreamFromBufferIterator","ReadableStream","desiredSize","written","enqueue","currentPath","setCurrentPath","currentPathRef","breadcrumbItems","part","filter","Boolean","segment","unshift","isCurrentItem","items","setItems","loading","setLoading","listRef","load","sync","linkItems","intervalId","setInterval","lastBreak","Date","now","Link","followLinkPath","lstat","File","permission","scrollToIndex","clearInterval","sortedList","setSortedList","sortKey","setSortKey","sortDescending","setSortDescendent","aIsFile","bIsFile","aSortKey","bSortKey","columns","iconName","isIconOnly","minWidth","maxWidth","isCollapsible","Icon","getFileTypeIconProps","FileIconType","linkedFolder","Directory","folder","extension","isRowHeader","onRender","toString","toLocaleString","maximumFractionDigits","formatSize","onColumnClick","column","isSorted","isSortedDescending","previewUrl","setPreviewUrl","previewImage","readableStream","receive","Response","blob","url","URL","createObjectURL","hidePreview","handleItemInvoked","selection","useConst","Selection","contextMenuItems","setContextMenuItems","contextMenuTarget","setContextMenuTarget","showContextMenu","selectedItems","getSelection","itemPath","writeableStream","createWriteStream","pipeTo","hideContextMenu","useCallback","MarqueeSelection","Breadcrumb","grow","minHeight","ShimmeredDetailsList","componentRef","setKey","layoutMode","justified","enableShimmer","onItemInvoked","onItemContextMenu","onRenderDetailsHeader","usePageCache","Layer","Overlay","alignItems","justifyContent","src","maxHeight","ContextualMenu","directionalHint","DirectionalHint","bottomLeftEdge","target","onDismiss","canvasRef","timeoutId","running","capture","performance","framebuffer","console","log","canvas","getContext","image","ImageData","Uint8ClampedArray","putImageData","clearTimeout","callout","CopyLink","href","calloutTarget","calloutVisible","showCallout","hideCallout","copyLink","clipboard","writeText","Callout","topCenter","Text","block","fontWeight","findKeyword","setFindKeyword","findAddonRef","handleFindKeywordChange","newValue","findNext","incremental","findPrevious","terminal","setTerminal","fitAddonRef","handleContainerRef","scrollback","findAddon","loadAddon","fitAddon","fit","reset","SearchBox","onChange","onSearch","IconButton","disabled","iconProps","tcpPort","setTcpAddresses","queryTcpAddress","getDaemonTcpAddresses","tcpPortValue","setTcpPortValue","tcpPortInputId","useId","enableTcp","setDaemonTcpPort","parseInt","disableTcp","disableDaemonTcp","MessageBar","Label","htmlFor","TextField","render","setDevice","routes","exact","product","model","variant","Separator","Nav","groups","links","route","selectedKey","to","document","getElementById"],"mappings":"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","file":"index.bbb75328f75cd900816c.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"2YZa\",1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Disposable } from './disposable';\nimport { EventListener, RemoveEventListener } from './event';\n\ninterface EventListenerInfo<TEvent, TResult = unknown> {\n    listener: EventListener<TEvent, any, any, TResult>;\n\n    thisArg: unknown;\n\n    args: unknown[];\n}\n\nexport class EventEmitter<TEvent, TResult = unknown> implements Disposable {\n    protected listeners: EventListenerInfo<TEvent, TResult>[] = [];\n\n    public constructor() {\n        this.event = this.event.bind(this);\n    }\n\n    public event(\n        listener: EventListener<TEvent, unknown, [], TResult>\n    ): RemoveEventListener;\n    public event<TThis, TArgs extends unknown[]>(\n        listener: EventListener<TEvent, TThis, TArgs, TResult>,\n        thisArg: TThis,\n        ...args: TArgs\n    ): RemoveEventListener;\n    public event<TThis, TArgs extends unknown[]>(\n        listener: EventListener<TEvent, TThis, TArgs, TResult>,\n        thisArg?: TThis,\n        ...args: TArgs\n    ): RemoveEventListener {\n        const info: EventListenerInfo<TEvent, TResult> = {\n            listener,\n            thisArg,\n            args,\n        };\n        this.listeners.push(info);\n\n        const remove: RemoveEventListener = () => {\n            const index = this.listeners.indexOf(info);\n            if (index > 0) {\n                this.listeners.splice(index, 1);\n            }\n        };\n        remove.dispose = remove;\n        return remove;\n    }\n\n    public fire(e: TEvent) {\n        for (const info of this.listeners.slice()) {\n            info.listener.apply(info.thisArg, [e, ...info.args]);\n        }\n    }\n\n    public dispose() {\n        this.listeners.length = 0;\n    }\n}\n","import { Event } from './event';\nimport { EventEmitter } from './event-emitter';\n\nexport type AsyncEventResult = void | Promise<void>;\n\nexport type AsyncEvent<TEvent> = Event<TEvent, AsyncEventResult>;\n\nexport class AsyncEventEmitter<TEvent> extends EventEmitter<TEvent, AsyncEventResult> {\n    public async fire(e: TEvent) {\n        for (const info of this.listeners) {\n            await info.listener.apply(info.thisArg, [e, ...info.args]);\n        }\n    }\n}\n","export interface Disposable {\n    dispose(): void;\n}\n\nexport class AutoDisposable implements Disposable {\n    private disposables: Disposable[] = [];\n\n    protected addDisposable<T extends Disposable>(disposable: T): T {\n        this.disposables.push(disposable);\n        return disposable;\n    }\n\n    public dispose() {\n        for (const disposable of this.disposables) {\n            disposable.dispose();\n        }\n\n        this.disposables = [];\n    }\n}\n\nexport class DisposableList extends AutoDisposable {\n    public add<T extends Disposable>(disposable: T): T {\n        return this.addDisposable(disposable);\n    }\n}\n","const BigInt0 = BigInt(0);\nconst BigInt1 = BigInt(1);\nconst BigInt2 = BigInt(2);\n\nconst BigInt2To64 = BigInt2 ** BigInt(64);\n\nexport function getBig(\n    buffer: ArrayBuffer,\n    offset = 0,\n    length = buffer.byteLength - offset\n): bigint {\n    const view = new DataView(buffer);\n\n    let result = BigInt0;\n\n    // Now `length` must be a multiplication of 8\n    // Support for arbitrary length can be easily added\n\n    for (let i = offset; i < offset + length; i += 8) {\n        result *= BigInt2To64;\n        const value = view.getBigUint64(i, false);\n        result += value;\n    }\n\n    return result;\n}\n\nexport function setBig(buffer: ArrayBuffer, value: bigint, offset: number = 0) {\n    const uint64Array: bigint[] = [];\n    while (value > BigInt0) {\n        uint64Array.push(BigInt.asUintN(64, value));\n        value /= BigInt2To64;\n    }\n\n    const view = new DataView(buffer);\n    for (let i = uint64Array.length - 1; i >= 0; i -= 1) {\n        view.setBigUint64(offset, uint64Array[i], false);\n        offset += 8;\n    }\n}\n\nexport function setBigLE(buffer: ArrayBuffer, value: bigint, offset = 0) {\n    const view = new DataView(buffer);\n    while (value > BigInt0) {\n        view.setBigUint64(offset, value, true);\n        offset += 8;\n        value /= BigInt2To64;\n    }\n}\n\n// These values are correct only if\n// modulus length is 2048 and\n// public exponent (e) is 65537\n// Anyway, that's how this library generates keys\n\n// To support other parameters,\n// a proper ASN.1 parser can be used\n\n// References:\n//\n//   https://tools.ietf.org/html/rfc8017#appendix-A.1.2\n//   PKCS #1: RSA Cryptography Specifications Version 2.2\n//     A.1.2.  RSA Private Key Syntax\n//\n//   https://lapo.it/asn1js/\n//   https://github.com/lapo-luchini/asn1js\n//   ASN.1 JavaScript decoder\n//\n//   https://www.itu.int/rec/T-REC-X.690-201508-I/en\n//   X.690: Specification of Distinguished Encoding Rules (DER)\n\nconst RsaPrivateKeyNOffset = 38;\nconst RsaPrivateKeyNLength = 2048 / 8;\nconst RsaPrivateKeyDOffset = 303;\nconst RsaPrivateKeyDLength = 2048 / 8;\n\nexport function parsePrivateKey(key: ArrayBuffer): [n: bigint, d: bigint] {\n    let n = getBig(key, RsaPrivateKeyNOffset, RsaPrivateKeyNLength);\n    let d = getBig(key, RsaPrivateKeyDOffset, RsaPrivateKeyDLength);\n\n    return [n, d];\n}\n\n// Taken from https://stackoverflow.com/a/51562038\n// I can't understand, but it does work\n// Only used with numbers less than 2^32 so doesn't need BigInt\nexport function modInverse(a: number, m: number) {\n    // validate inputs\n    [a, m] = [Number(a), Number(m)];\n    if (Number.isNaN(a) || Number.isNaN(m)) {\n        return NaN; // invalid input\n    }\n    a = (a % m + m) % m;\n    if (!a || m < 2) {\n        return NaN; // invalid input\n    }\n    // find the gcd\n    const s = [];\n    let b = m;\n    while (b) {\n        [a, b] = [b, a % b];\n        s.push({ a, b });\n    }\n    if (a !== 1) {\n        return NaN; // inverse does not exists\n    }\n    // find the inverse\n    let x = 1;\n    let y = 0;\n    for (let i = s.length - 2; i >= 0; --i) {\n        [x, y] = [y, x - y * Math.floor(s[i].a / s[i].b)];\n    }\n    return (y % m + m) % m;\n}\n\nexport function calculatePublicKeyLength() {\n    return 4 + 4 + 2048 / 8 + 2048 / 8 + 4;\n}\n\nexport function calculatePublicKey(\n    privateKey: ArrayBuffer\n): ArrayBuffer;\nexport function calculatePublicKey(\n    privateKey: ArrayBuffer,\n    output: ArrayBuffer,\n    outputOffset?: number\n): number;\nexport function calculatePublicKey(\n    privateKey: ArrayBuffer,\n    output?: ArrayBuffer,\n    outputOffset: number = 0\n): ArrayBuffer | number {\n    // Android has its own public key generation algorithm\n    // See https://github.com/aosp-mirror/platform_system_core/blob/e5c9bbd45381d7bd72fef232d1c6668946253ac8/libcrypto_utils/android_pubkey.cpp#L111\n\n    // The public key is an array of\n    //\n    // [\n    //   modulusLengthInWords, // 32-bit integer, a \"word\" is 32-bit so it must be 2048 / 8 / 4\n    //                         // Actually the comment in Android source code was wrong\n    //   n0inv,                // 32-bit integer, the modular inverse of (lower 32 bits of) n\n    //   modulus,              // n\n    //   rr,                   // Montgomery parameter R^2\n    //   exponent,             // 32-bit integer, must be 65537\n    // ]\n    //\n    // (All in little endian)\n    // See https://github.com/aosp-mirror/platform_system_core/blob/e5c9bbd45381d7bd72fef232d1c6668946253ac8/libcrypto_utils/android_pubkey.cpp#L38\n\n    // extract `n` from private key\n    const [n] = parsePrivateKey(privateKey);\n\n    let outputType: 'ArrayBuffer' | 'number';\n    const outputLength = calculatePublicKeyLength();\n    if (!output) {\n        output = new ArrayBuffer(outputLength);\n        outputType = 'ArrayBuffer';\n    } else {\n        if (output.byteLength - outputOffset < outputLength) {\n            throw new Error('output buffer is too small');\n        }\n\n        outputType = 'number';\n    }\n\n    const outputView = new DataView(output);\n\n    // modulusLengthInWords\n    outputView.setUint32(outputOffset, 2048 / 8 / 4, true);\n    outputOffset += 4;\n\n    // Calculate `n0inv`\n    // Don't know why need to multiple -1\n    // Didn't exist in Android codebase\n    const n0inv = modInverse(Number(BigInt.asUintN(32, n) * BigInt(-1)), 2 ** 32);\n    outputView.setUint32(outputOffset, n0inv, true);\n    outputOffset += 4;\n\n    // Write n\n    setBigLE(output, n, outputOffset);\n    outputOffset += 256;\n\n    // Calculate rr = (2^(rsa_size)) ^ 2 mod n\n    let rr = BigInt(2) ** BigInt(4096) % n;\n    setBigLE(output, rr, outputOffset);\n    outputOffset += 256;\n\n    // exponent\n    outputView.setUint32(outputOffset, 65537, true);\n    outputOffset += 4;\n\n    if (outputType === 'ArrayBuffer') {\n        return output;\n    } else {\n        return outputLength;\n    }\n}\n\n// Modular exponentiation\n// See https://en.wikipedia.org/wiki/Modular_exponentiation#Implementation_in_Lua\nexport function powMod(base: bigint, exponent: bigint, modulus: bigint): bigint {\n    if (modulus === BigInt1) {\n        return BigInt0;\n    }\n\n    let r = BigInt1;\n    base = base % modulus;\n\n    while (exponent > BigInt0) {\n        if (BigInt.asUintN(1, exponent) === BigInt1) {\n            r = r * base % modulus;\n        }\n\n        exponent >>= BigInt1;\n        base = base ** BigInt2 % modulus;\n    }\n\n    return r;\n}\n\nexport const Sha1DigestLength = 20;\n\nexport const Asn1Sequence = 0x30;\nexport const Asn1OctetString = 0x04;\nexport const Asn1Null = 0x05;\nexport const Asn1Oid = 0x06;\n\n// PKCS#1 SHA-1 hash digest info\nexport const Sha1DigestInfo = [\n    Asn1Sequence, 0x0d + Sha1DigestLength,\n    Asn1Sequence, 0x09,\n    // SHA-1 (1 3 14 3 2 26)\n    Asn1Oid, 0x05, 1 * 40 + 3, 14, 3, 2, 26,\n    Asn1Null, 0x00,\n    Asn1OctetString, Sha1DigestLength\n];\n\n// SubtleCrypto.sign() will hash the given data and sign the hash\n// But we don't need the hashing step\n// (In another word, ADB just requires the client to\n// encrypt the given data with its private key)\n// However SubtileCrypto.encrypt() doesn't accept 'RSASSA-PKCS1-v1_5' algorithm\n// So we need to implement the encryption by ourself\nexport function sign(privateKey: ArrayBuffer, data: ArrayBuffer): ArrayBuffer {\n    const [n, d] = parsePrivateKey(privateKey);\n\n    // PKCS#1 padding\n    const padded = new Uint8Array(256);\n    let index = 0;\n\n    padded[index] = 0;\n    index += 1;\n\n    padded[index] = 1;\n    index += 1;\n\n    const fillLength = padded.length - Sha1DigestInfo.length - data.byteLength - 1;\n    while (index < fillLength) {\n        padded[index] = 0xff;\n        index++;\n    }\n\n    padded[index] = 0;\n    index += 1;\n\n    padded.set(new Uint8Array(Sha1DigestInfo), index);\n    index += Sha1DigestInfo.length;\n\n    padded.set(new Uint8Array(data), index);\n\n    // Encryption\n    // signature = padded ** d % n\n    let signature = powMod(getBig(padded.buffer), d, n);\n\n    // Put into an ArrayBuffer\n    const result = new ArrayBuffer(256);\n    setBig(result, signature);\n\n    return result;\n}\n","export const BackingField = Symbol('BackingField');\n\nexport function getBackingField<T = unknown>(object: unknown, field: string): T {\n    return (object as any)[BackingField][field] as T;\n}\n\nexport function setBackingField(object: unknown, field: string, value: any): void {\n    (object as any)[BackingField][field] = value;\n}\n\nexport function defineSimpleAccessors(object: unknown, field: string): void {\n    Object.defineProperty(object, field, {\n        configurable: true,\n        enumerable: true,\n        get() { return getBackingField(object, field); },\n        set(value) { setBackingField(object, field, value); },\n    });\n}\n\nexport type WithBackingField<T> = T & { [BackingField]: any; };\n","import { getBackingField, setBackingField } from '../backing-field';\nimport { FieldDescriptorBase, FieldDescriptorBaseOptions } from './descriptor';\n\nexport namespace Array {\n    export const enum SubType {\n        ArrayBuffer,\n        String,\n    }\n\n    export type TypeScriptType<TType extends SubType = SubType> =\n        TType extends SubType.ArrayBuffer ? ArrayBuffer :\n        TType extends SubType.String ? string :\n        ArrayBuffer | string;\n\n    export interface BackingField {\n        buffer?: ArrayBuffer;\n\n        string?: string;\n    }\n\n    export function initialize(object: any, field: Array, value: BackingField): void {\n        switch (field.subType) {\n            case SubType.ArrayBuffer:\n                Object.defineProperty(object, field.name, {\n                    configurable: true,\n                    enumerable: true,\n                    get(): ArrayBuffer {\n                        return getBackingField<BackingField>(object, field.name).buffer!;\n                    },\n                    set(buffer: ArrayBuffer) {\n                        setBackingField(object, field.name, { buffer });\n                    },\n                });\n                break;\n            case SubType.String:\n                Object.defineProperty(object, field.name, {\n                    configurable: true,\n                    enumerable: true,\n                    get(): string {\n                        return getBackingField<BackingField>(object, field.name).string!;\n                    },\n                    set(string: string) {\n                        setBackingField(object, field.name, { string });\n                    },\n                });\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n        setBackingField(object, field.name, value);\n    }\n}\n\nexport interface Array<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TResultObject = {},\n    TInitObject = {},\n    TOptions extends FieldDescriptorBaseOptions = FieldDescriptorBaseOptions\n    > extends FieldDescriptorBase<\n    TName,\n    TResultObject,\n    TInitObject,\n    TOptions\n    > {\n    subType: TType;\n}\n","import { StructDeserializationContext, StructOptions, StructSerializationContext } from '../types';\nimport { FieldDescriptorBase, FieldType } from './descriptor';\n\nexport interface FieldTypeDefinition<\n    TDescriptor extends FieldDescriptorBase = FieldDescriptorBase,\n    TInitExtra = undefined,\n    > {\n    type: FieldType | string;\n\n    deserialize(options: {\n        context: StructDeserializationContext;\n        field: TDescriptor;\n        object: any;\n        options: StructOptions;\n    }): Promise<{ value: any; extra?: TInitExtra; }>;\n\n    getSize(options: {\n        field: TDescriptor;\n        options: StructOptions;\n    }): number;\n\n    getDynamicSize?(options: {\n        context: StructSerializationContext;\n        field: TDescriptor;\n        object: any;\n        options: StructOptions;\n    }): number;\n\n    initialize?(options: {\n        context: StructSerializationContext;\n        field: TDescriptor;\n        value: any;\n        extra?: TInitExtra;\n        object: any;\n        options: StructOptions;\n    }): void;\n\n    serialize(options: {\n        context: StructSerializationContext;\n        dataView: DataView;\n        field: TDescriptor;\n        object: any;\n        offset: number;\n        options: StructOptions;\n    }): void;\n}\n\nconst registry: Record<number | string, FieldTypeDefinition<any, any>> = {};\n\nexport function getFieldTypeDefinition(type: FieldType | string): FieldTypeDefinition<any, any> {\n    return registry[type];\n}\n\nexport function registerFieldTypeDefinition<\n    TDescriptor extends FieldDescriptorBase,\n    TInitExtra,\n    TDefinition extends FieldTypeDefinition<TDescriptor, TInitExtra>\n>(\n    _field: TDescriptor,\n    _initExtra: TInitExtra,\n    methods: TDefinition\n): void {\n    registry[methods.type] = methods;\n}\n","import { placeholder } from '../utils';\nimport { registerFieldTypeDefinition } from './definition';\nimport { FieldDescriptorBase, FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace Number {\n    export type TypeScriptType<T extends SubType> =\n        T extends SubType.Uint64 ? bigint : number;\n\n    export const enum SubType {\n        Int32,\n        Uint32,\n        Uint64,\n    }\n\n    export const SizeMap: Record<SubType, number> = {\n        [SubType.Int32]: 4,\n        [SubType.Uint32]: 4,\n        [SubType.Uint64]: 8,\n    };\n\n    export const DataViewGetterMap = {\n        [SubType.Int32]: 'getInt32',\n        [SubType.Uint32]: 'getUint32',\n        [SubType.Uint64]: 'getBigUint64',\n    } as const;\n\n    export const DataViewSetterMap = {\n        [SubType.Int32]: 'setInt32',\n        [SubType.Uint32]: 'setUint32',\n        [SubType.Uint64]: 'setBigUint64',\n    } as const;\n}\n\nexport interface Number<\n    TName extends string = string,\n    TSubType extends Number.SubType = Number.SubType,\n    TTypeScriptType = Number.TypeScriptType<TSubType>,\n    TOptions extends FieldDescriptorBaseOptions = FieldDescriptorBaseOptions\n    > extends FieldDescriptorBase<\n    TName,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType>,\n    TOptions\n    > {\n    type: FieldType.Number;\n\n    subType: TSubType;\n}\n\nregisterFieldTypeDefinition(\n    placeholder<Number>(),\n    undefined,\n    {\n        type: FieldType.Number,\n\n        getSize({ field }) {\n            return Number.SizeMap[field.subType];\n        },\n\n        async deserialize({ context, field, options }) {\n            const buffer = await context.read(Number.SizeMap[field.subType]);\n            const view = new DataView(buffer);\n            const value = view[Number.DataViewGetterMap[field.subType]](\n                0,\n                options.littleEndian\n            );\n            return { value };\n        },\n\n        serialize({ dataView, field, object, offset, options }) {\n            (dataView[Number.DataViewSetterMap[field.subType]] as any)(\n                offset,\n                object[field.name],\n                options.littleEndian\n            );\n        },\n    }\n);\n","import { getBackingField, setBackingField } from '../backing-field';\nimport { StructSerializationContext } from '../types';\nimport { Identity, placeholder } from '../utils';\nimport { Array } from './array';\nimport { registerFieldTypeDefinition } from './definition';\nimport { FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace VariableLengthArray {\n    export type TypeScriptTypeCanBeUndefined<\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > =\n        TEmptyBehavior extends EmptyBehavior.Empty ? never :\n        undefined;\n\n    export type TypeScriptType<\n        TType extends Array.SubType = Array.SubType,\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > =\n        Identity<\n            Array.TypeScriptType<TType> |\n            TypeScriptTypeCanBeUndefined<TEmptyBehavior>\n        >;\n\n    export const enum EmptyBehavior {\n        Undefined,\n        Empty,\n    }\n\n    export type KeyOfType<TObject, TProperty> =\n        {\n            [TKey in keyof TObject]:\n            TObject[TKey] extends TProperty ? TKey : never\n        }[keyof TObject];\n\n    export interface Options<\n        TInit = object,\n        TLengthField extends KeyOfType<TInit, number> = any,\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > extends FieldDescriptorBaseOptions {\n        lengthField: TLengthField;\n\n        emptyBehavior?: TEmptyBehavior;\n    }\n\n    export function getLengthBackingField(\n        object: any,\n        field: VariableLengthArray\n    ): number | undefined {\n        return getBackingField<number>(object, field.options.lengthField);\n    }\n\n    export function setLengthBackingField(\n        object: any,\n        field: VariableLengthArray,\n        value: number | undefined\n    ) {\n        setBackingField(object, field.options.lengthField, value);\n    }\n\n    export function initialize(\n        object: any,\n        field: VariableLengthArray,\n        value: Array.BackingField,\n        context: StructSerializationContext,\n    ): void {\n        Array.initialize(object, field, value);\n        const descriptor = Object.getOwnPropertyDescriptor(object, field.name)!;\n        delete object[field.name];\n\n        switch (field.subType) {\n            case Array.SubType.ArrayBuffer:\n                Object.defineProperty(object, field.name, {\n                    ...descriptor,\n                    set(buffer: ArrayBuffer | undefined) {\n                        descriptor.set!.call(object, buffer);\n                        setLengthBackingField(object, field, buffer?.byteLength ?? 0);\n                    },\n                });\n\n                delete object[field.options.lengthField];\n                Object.defineProperty(object, field.options.lengthField, {\n                    configurable: true,\n                    enumerable: true,\n                    get() {\n                        return getLengthBackingField(object, field);\n                    }\n                });\n                break;\n            case Array.SubType.String:\n                Object.defineProperty(object, field.name, {\n                    ...descriptor,\n                    set(string: string | undefined) {\n                        descriptor.set!.call(object, string);\n                        if (string) {\n                            setLengthBackingField(object, field, undefined);\n                        } else {\n                            setLengthBackingField(object, field, 0);\n                        }\n                    },\n                });\n\n                delete object[field.options.lengthField];\n                Object.defineProperty(object, field.options.lengthField, {\n                    configurable: true,\n                    enumerable: true,\n                    get() {\n                        let value = getLengthBackingField(object, field);\n                        if (value === undefined) {\n                            const backingField = getBackingField<Array.BackingField>(object, field.name);\n                            const buffer = context.encodeUtf8(backingField.string!);\n                            backingField.buffer = buffer;\n\n                            value = buffer.byteLength;\n                            setLengthBackingField(object, field, value);\n                        }\n                        return value;\n                    }\n                });\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n        setBackingField(object, field.name, value);\n        if (value.buffer) {\n            setLengthBackingField(object, field, value.buffer.byteLength);\n        }\n    }\n}\n\nexport interface VariableLengthArray<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TInit = object,\n    TLengthField extends VariableLengthArray.KeyOfType<TInit, number> = any,\n    TEmptyBehavior extends VariableLengthArray.EmptyBehavior = VariableLengthArray.EmptyBehavior,\n    TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>,\n    TOptions extends VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior> = VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>\n    > extends Array<\n    TName,\n    TType,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType> & Record<TLengthField, never>,\n    TOptions\n    > {\n    type: FieldType.VariableLengthArray;\n\n    options: TOptions;\n}\n\nregisterFieldTypeDefinition(\n    placeholder<VariableLengthArray>(),\n    placeholder<ArrayBuffer>(),\n    {\n        type: FieldType.VariableLengthArray,\n\n        async deserialize(\n            { context, field, object }\n        ): Promise<{ value: string | ArrayBuffer | undefined, extra?: ArrayBuffer; }> {\n            const length = object[field.options.lengthField];\n            if (length === 0) {\n                if (field.options.emptyBehavior === VariableLengthArray.EmptyBehavior.Empty) {\n                    switch (field.subType) {\n                        case Array.SubType.ArrayBuffer:\n                            return { value: new ArrayBuffer(0) };\n                        case Array.SubType.String:\n                            return { value: '', extra: new ArrayBuffer(0) };\n                        default:\n                            throw new Error('Unknown type');\n                    }\n                } else {\n                    return { value: undefined };\n                }\n            }\n\n            const buffer = await context.read(length);\n            switch (field.subType) {\n                case Array.SubType.ArrayBuffer:\n                    return { value: buffer };\n                case Array.SubType.String:\n                    return {\n                        value: context.decodeUtf8(buffer),\n                        extra: buffer\n                    };\n                default:\n                    throw new Error('Unknown type');\n            }\n        },\n\n        getSize() { return 0; },\n\n        getDynamicSize({ field, object }) {\n            return object[field.options.lengthField];\n        },\n\n        initialize({ context, extra, field, object, value }) {\n            const backingField: Array.BackingField = {};\n            if (typeof value === 'string') {\n                backingField.string = value;\n                if (extra) {\n                    backingField.buffer = extra;\n                }\n            } else {\n                backingField.buffer = value;\n            }\n            Array.initialize(object, field, backingField);\n            VariableLengthArray.initialize(object, field, backingField, context);\n        },\n\n        serialize({ dataView, field, object, offset }) {\n            const backingField = getBackingField<Array.BackingField>(object, field.name);\n            new Uint8Array(dataView.buffer).set(\n                new Uint8Array(backingField.buffer!),\n                offset\n            );\n        },\n    }\n);\n","import { getBackingField } from '../backing-field';\nimport { placeholder } from '../utils';\nimport { Array } from './array';\nimport { registerFieldTypeDefinition } from './definition';\nimport { FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace FixedLengthArray {\n    export interface Options extends FieldDescriptorBaseOptions {\n        length: number;\n    }\n}\n\nexport interface FixedLengthArray<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TTypeScriptType = Array.TypeScriptType<TType>,\n    TOptions extends FixedLengthArray.Options = FixedLengthArray.Options\n    > extends Array<\n    TName,\n    TType,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType>,\n    TOptions\n    > {\n    type: FieldType.FixedLengthArray;\n\n    options: TOptions;\n};\n\nregisterFieldTypeDefinition(\n    placeholder<FixedLengthArray>(),\n    placeholder<ArrayBuffer>(),\n    {\n        type: FieldType.FixedLengthArray,\n\n        async deserialize(\n            { context, field }\n        ): Promise<{ value: string | ArrayBuffer, extra?: ArrayBuffer; }> {\n            const buffer = await context.read(field.options.length);\n\n            switch (field.subType) {\n                case Array.SubType.ArrayBuffer:\n                    return { value: buffer };\n                case Array.SubType.String:\n                    return {\n                        value: context.decodeUtf8(buffer),\n                        extra: buffer\n                    };\n                default:\n                    throw new Error('Unknown type');\n            }\n        },\n\n        getSize({ field }) {\n            return field.options.length;\n        },\n\n        initialize({ extra, field, object, value }) {\n            const backingField: Array.BackingField = {};\n            if (typeof value === 'string') {\n                backingField.string = value;\n                if (extra) {\n                    backingField.buffer = extra;\n                }\n            } else {\n                backingField.buffer = value;\n            }\n            Array.initialize(object, field, backingField);\n        },\n\n        serialize({ context, dataView, field, object, offset }) {\n            const backingField = getBackingField<Array.BackingField>(object, field.name);\n            backingField.buffer ??=\n                context.encodeUtf8(backingField.string!);\n\n            new Uint8Array(dataView.buffer).set(\n                new Uint8Array(backingField.buffer),\n                offset\n            );\n        }\n    }\n);\n","export interface StructSerializationContext {\n    encodeUtf8(input: string): ArrayBuffer;\n}\n\nexport interface StructDeserializationContext extends StructSerializationContext {\n    decodeUtf8(buffer: ArrayBuffer): string;\n\n    read(length: number): ArrayBuffer | Promise<ArrayBuffer>;\n}\n\nexport interface StructOptions {\n    littleEndian: boolean;\n}\n\nexport const StructDefaultOptions: Readonly<StructOptions> = {\n    littleEndian: false,\n};\n","import { BackingField, defineSimpleAccessors, setBackingField, WithBackingField } from './backing-field';\nimport { Array, FieldDescriptorBase, FieldDescriptorBaseOptions, FieldType, FieldTypeDefinition, FixedLengthArray, getFieldTypeDefinition, Number, VariableLengthArray } from './field';\nimport { StructDefaultOptions, StructDeserializationContext, StructOptions, StructSerializationContext } from './types';\nimport { Evaluate, Identity, OmitNever, Overwrite } from './utils';\n\nexport type StructValueType<T extends Struct<object, object, object, unknown>> =\n    T extends { deserialize(reader: StructDeserializationContext): Promise<infer R>; } ? R : never;\n\nexport type StructInitType<T extends Struct<object, object, object, unknown>> =\n    T extends { create(value: infer R, ...args: any): any; } ? Evaluate<R> : never;\n\ninterface AddArrayFieldDescriptor<\n    TResult extends object,\n    TInit extends object,\n    TExtra extends object,\n    TAfterParsed\n    > {\n    <\n        TName extends string,\n        TType extends Array.SubType,\n        TTypeScriptType = Array.TypeScriptType<TType>\n        >(\n        name: TName,\n        type: TType,\n        options: FixedLengthArray.Options,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        FixedLengthArray<\n            TName,\n            TType,\n            TTypeScriptType\n        >\n    >;\n\n    <\n        TName extends string,\n        TType extends Array.SubType,\n        TLengthField extends VariableLengthArray.KeyOfType<TInit, number>,\n        TEmptyBehavior extends VariableLengthArray.EmptyBehavior,\n        TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>\n        >(\n        name: TName,\n        type: TType,\n        options: VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        VariableLengthArray<\n            TName,\n            TType,\n            TInit,\n            TLengthField,\n            TEmptyBehavior,\n            TTypeScriptType\n        >\n    >;\n}\n\ninterface AddArraySubTypeFieldDescriptor<\n    TResult extends object,\n    TInit extends object,\n    TExtra extends object,\n    TAfterParsed,\n    TType extends Array.SubType\n    > {\n    <\n        TName extends string,\n        TTypeScriptType = Array.TypeScriptType<TType>\n        >(\n        name: TName,\n        options: FixedLengthArray.Options,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        FixedLengthArray<\n            TName,\n            TType,\n            TTypeScriptType\n        >\n    >;\n\n    <\n        TName extends string,\n        TLengthField extends VariableLengthArray.KeyOfType<TInit, number>,\n        TEmptyBehavior extends VariableLengthArray.EmptyBehavior,\n        TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>\n        >(\n        name: TName,\n        options: VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>,\n        _typescriptType?: TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        VariableLengthArray<\n            TName,\n            TType,\n            TInit,\n            TLengthField,\n            TEmptyBehavior,\n            TTypeScriptType\n        >\n    >;\n}\n\ntype MergeStruct<\n    TResult extends object,\n    TInit extends object,\n    TExtra extends object,\n    TAfterParsed,\n    TDescriptor extends FieldDescriptorBase\n    > =\n    Identity<Struct<\n        Evaluate<TResult & Exclude<TDescriptor['resultObject'], undefined>>,\n        OmitNever<TInit & Exclude<TDescriptor['initObject'], undefined>>,\n        TExtra,\n        TAfterParsed\n    >>;\n\nexport type StructAfterParsed<TResult, TAfterParsed> =\n    (this: WithBackingField<TResult>, object: WithBackingField<TResult>) => TAfterParsed;\n\nexport default class Struct<\n    TResult extends object = {},\n    TInit extends object = {},\n    TExtra extends object = {},\n    TAfterParsed = undefined,\n    > {\n    public readonly options: Readonly<StructOptions>;\n\n    private _size = 0;\n    public get size() { return this._size; }\n\n    private fields: FieldDescriptorBase[] = [];\n\n    private _extra: PropertyDescriptorMap = {};\n\n    private _afterParsed?: StructAfterParsed<any, any>;\n\n    public constructor(options: Partial<StructOptions> = StructDefaultOptions) {\n        this.options = { ...StructDefaultOptions, ...options };\n    }\n\n    private clone(): Struct<any, any, any, any> {\n        const result = new Struct<any, any, any, any>(this.options);\n        result.fields = this.fields.slice();\n        result._size = this._size;\n        result._extra = this._extra;\n        result._afterParsed = this._afterParsed;\n        return result;\n    }\n\n    public field<TDescriptor extends FieldDescriptorBase>(\n        field: TDescriptor,\n    ): MergeStruct<TResult, TInit, TExtra, TAfterParsed, TDescriptor> {\n        const result = this.clone();\n        result.fields.push(field);\n\n        const definition = getFieldTypeDefinition(field.type);\n        const size = definition.getSize({ field, options: this.options });\n        result._size += size;\n\n        return result;\n    }\n\n    private number<\n        TName extends string,\n        TSubType extends Number.SubType = Number.SubType,\n        TTypeScriptType = Number.TypeScriptType<TSubType>\n    >(\n        name: TName,\n        type: TSubType,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.field<Number<TName, TSubType, TTypeScriptType>>({\n            type: FieldType.Number,\n            name,\n            subType: type,\n            options,\n        });\n    }\n\n    public int32<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType<Number.SubType.Int32>\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Int32,\n            options,\n            _typescriptType\n        );\n    }\n\n    public uint32<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType<Number.SubType.Uint32>\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Uint32,\n            options,\n            _typescriptType\n        );\n    }\n\n    public uint64<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType<Number.SubType.Uint64>\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Uint64,\n            options,\n            _typescriptType\n        );\n    }\n\n    private array: AddArrayFieldDescriptor<TResult, TInit, TExtra, TAfterParsed> = (\n        name: string,\n        type: Array.SubType,\n        options: FixedLengthArray.Options | VariableLengthArray.Options\n    ): Struct<any, any, any, any> => {\n        if ('length' in options) {\n            return this.field<FixedLengthArray>({\n                type: FieldType.FixedLengthArray,\n                name,\n                subType: type,\n                options: options,\n            });\n        } else {\n            return this.field<VariableLengthArray>({\n                type: FieldType.VariableLengthArray,\n                name,\n                subType: type,\n                options: options,\n            });\n        }\n    };\n\n    public arrayBuffer: AddArraySubTypeFieldDescriptor<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        Array.SubType.ArrayBuffer\n    > = <TName extends string>(\n        name: TName,\n        options: any\n    ) => {\n            return this.array(name, Array.SubType.ArrayBuffer, options);\n        };\n\n    public string: AddArraySubTypeFieldDescriptor<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        Array.SubType.String\n    > = <TName extends string>(\n        name: TName,\n        options: any\n    ) => {\n            return this.array(name, Array.SubType.String, options);\n        };\n\n    public extra<TValue extends Record<\n        Exclude<\n            keyof TValue,\n            Exclude<keyof TValue, keyof TResult>>,\n        never\n    >>(\n        value: TValue & ThisType<WithBackingField<Overwrite<Overwrite<TExtra, TValue>, TResult>>>\n    ): Struct<\n        TResult,\n        TInit,\n        Overwrite<TExtra, TValue>,\n        TAfterParsed\n    > {\n        const result = this.clone();\n        result._extra = { ...result._extra, ...Object.getOwnPropertyDescriptors(value) };\n        return result;\n    }\n\n    public afterParsed(\n        callback: StructAfterParsed<TResult, never>\n    ): Struct<TResult, TInit, TExtra, never>;\n    public afterParsed(\n        callback?: StructAfterParsed<TResult, void>\n    ): Struct<TResult, TInit, TExtra, undefined>;\n    public afterParsed<TAfterParsed>(\n        callback?: StructAfterParsed<TResult, TAfterParsed>\n    ): Struct<TResult, TInit, TExtra, TAfterParsed>;\n    public afterParsed(\n        callback?: StructAfterParsed<TResult, any>\n    ) {\n        const result = this.clone();\n        result._afterParsed = callback;\n        return result;\n    }\n\n    private initializeField(\n        context: StructSerializationContext,\n        field: FieldDescriptorBase,\n        fieldTypeDefinition: FieldTypeDefinition<any, any>,\n        object: any,\n        value: any,\n        extra?: any\n    ) {\n        if (fieldTypeDefinition.initialize) {\n            fieldTypeDefinition.initialize({\n                context,\n                extra,\n                field,\n                object,\n                options: this.options,\n                value,\n            });\n        } else {\n            setBackingField(object, field.name, value);\n            defineSimpleAccessors(object, field.name);\n        }\n    }\n\n    public create(init: TInit, context: StructSerializationContext): Overwrite<TExtra, TResult> {\n        const object: any = {\n            [BackingField]: {},\n        };\n        Object.defineProperties(object, this._extra);\n\n        for (const field of this.fields) {\n            const fieldTypeDefinition = getFieldTypeDefinition(field.type);\n            this.initializeField(\n                context,\n                field,\n                fieldTypeDefinition,\n                object,\n                (init as any)[field.name]\n            );\n        }\n\n        return object;\n    }\n\n    public async deserialize(\n        context: StructDeserializationContext\n    ): Promise<TAfterParsed extends undefined ? Overwrite<TExtra, TResult> : TAfterParsed> {\n        const object: any = {\n            [BackingField]: {},\n        };\n        Object.defineProperties(object, this._extra);\n\n        for (const field of this.fields) {\n            const fieldTypeDefinition = getFieldTypeDefinition(field.type);\n            const { value, extra } = await fieldTypeDefinition.deserialize({\n                context,\n                field,\n                object,\n                options: this.options,\n            });\n            this.initializeField(\n                context,\n                field,\n                fieldTypeDefinition,\n                object,\n                value,\n                extra\n            );\n        }\n\n        if (this._afterParsed) {\n            const result = this._afterParsed.call(object, object);\n            if (result) {\n                return result;\n            }\n        }\n\n        return object;\n    }\n\n    public serialize(init: TInit, context: StructSerializationContext): ArrayBuffer {\n        const object = this.create(init, context) as any;\n\n        let size = this._size;\n        let fieldSize: number[] = [];\n        for (let i = 0; i < this.fields.length; i++) {\n            const field = this.fields[i];\n            const type = getFieldTypeDefinition(field.type);\n            if (type.getDynamicSize) {\n                fieldSize[i] = type.getDynamicSize({\n                    context,\n                    field,\n                    object,\n                    options: this.options,\n                });\n                size += fieldSize[i];\n            } else {\n                fieldSize[i] = type.getSize({ field, options: this.options });\n            }\n        }\n\n        const buffer = new ArrayBuffer(size);\n        const dataView = new DataView(buffer);\n        let offset = 0;\n        for (let i = 0; i < this.fields.length; i++) {\n            const field = this.fields[i];\n            const type = getFieldTypeDefinition(field.type);\n            type.serialize({\n                context,\n                dataView,\n                field,\n                object,\n                offset,\n                options: this.options,\n            });\n            offset += fieldSize[i];\n        }\n        return buffer;\n    }\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { Disposable } from '@yume-chan/event';\n\nexport class AutoResetEvent implements Disposable {\n    private readonly list: PromiseResolver<void>[] = [];\n\n    private blocking: boolean;\n\n    public constructor(initialSet = false) {\n        this.blocking = initialSet;\n    }\n\n    public wait(): Promise<void> {\n        if (!this.blocking) {\n            this.blocking = true;\n\n            if (this.list.length === 0) {\n                return Promise.resolve();\n            }\n        }\n\n        const resolver = new PromiseResolver<void>();\n        this.list.push(resolver);\n        return resolver.promise;\n    }\n\n    public notify() {\n        if (this.list.length !== 0) {\n            this.list.pop()!.resolve();\n        } else {\n            this.blocking = false;\n        }\n    }\n\n    public dispose() {\n        for (const item of this.list) {\n            item.reject(new Error('The AutoResetEvent has been disposed'));\n        }\n        this.list.length = 0;\n    }\n}\n","interface Base64CharRange {\n    start: number;\n\n    length: number;\n\n    end: number;\n\n    offset: number;\n}\n\nlet ranges: Base64CharRange[] = [];\nconst chars: number[] = [];\nconst padding = '='.charCodeAt(0);\n\nlet offset = 0;\nfunction addRange(start: string, end: string) {\n    const startCharCode = start.charCodeAt(0);\n    const endCharCode = end.charCodeAt(0);\n    const length = endCharCode - startCharCode + 1;\n\n    for (let i = startCharCode; i <= endCharCode; i++) {\n        chars.push(i);\n    }\n\n    ranges.push({\n        start: startCharCode,\n        length: length,\n        end: endCharCode,\n        offset: startCharCode - offset,\n    });\n\n    offset += length;\n}\n\naddRange('A', 'Z');\naddRange('a', 'z');\naddRange('0', '9');\naddRange('+', '+');\naddRange('/', '/');\n\nranges = ranges.sort((a, b) => a.end - b.end);\n\nfunction toValue(char: string): number {\n    const charCode = char.charCodeAt(0);\n\n    let start = 0;\n    let end = ranges.length - 1;\n    let i = end >> 1;\n\n    while (true) {\n        const range = ranges[i];\n        if (charCode < range.start) {\n            end = i - 1;\n        } else if (charCode > range.end) {\n            start = i + 1;\n        } else {\n            return charCode - range.offset;\n        }\n        i = (start + end) >> 1;\n    }\n}\n\nexport function calculateBase64EncodedLength(inputLength: number): number {\n    const paddingLength = inputLength % 3;\n    return (inputLength + 3 - paddingLength) / 3 * 4;\n}\n\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    inputOffset?: number,\n    inputLength?: number,\n): ArrayBuffer;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    output: ArrayBuffer | Uint8Array,\n    outputOffset?: number\n): number;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    inputOffset: number,\n    output: ArrayBuffer | Uint8Array,\n    outputOffset?: number\n): number;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    inputOffset: number,\n    inputLength: number,\n    output: ArrayBuffer | Uint8Array,\n    outputOffset?: number\n): number;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    arg1?: number | ArrayBuffer | Uint8Array,\n    arg2?: number | ArrayBuffer | Uint8Array,\n    _arg3?: number | ArrayBuffer | Uint8Array,\n    _arg4?: number,\n): ArrayBuffer | Uint8Array | number {\n    if (input instanceof ArrayBuffer) {\n        input = new Uint8Array(input);\n    }\n\n    // Because `Uint8Array` is type compatible with `ArrayBuffer`,\n    // TypeScript doesn't correctly narrow `input` to `Uint8Array` when assigning.\n    // Manually eliminate `ArrayBuffer` from `input` with a type guard.\n    if (input instanceof ArrayBuffer) {\n        return input;\n    }\n\n    let inputOffset: number;\n    let inputLength: number;\n    let output: Uint8Array;\n    let outputOffset: number;\n\n    let outputArgumentIndex: number;\n    if (typeof arg1 !== 'number') {\n        inputOffset = 0;\n        inputLength = input.byteLength;\n        outputArgumentIndex = 1;\n    } else {\n        inputOffset = arg1;\n\n        if (typeof arg2 !== 'number') {\n            inputLength = input.byteLength - inputOffset;\n            outputArgumentIndex = 2;\n        } else {\n            inputLength = arg2;\n            outputArgumentIndex = 3;\n        }\n    }\n\n    const extraBytes = inputLength % 3;\n    const outputLength = (inputLength + 3 - extraBytes) / 3 * 4;\n\n    let maybeOutput: ArrayBuffer | Uint8Array | undefined = arguments[outputArgumentIndex];\n    let outputType: 'ArrayBuffer' | 'number';\n    if (maybeOutput) {\n        outputOffset = arguments[outputArgumentIndex + 1] ?? 0;\n\n        if (maybeOutput.byteLength - outputOffset < outputLength) {\n            throw new Error('output buffer is too small');\n        }\n\n        if (maybeOutput instanceof ArrayBuffer) {\n            output = new Uint8Array(maybeOutput);\n        } else {\n            output = maybeOutput;\n        }\n\n        outputType = 'number';\n    } else {\n        const buffer = new ArrayBuffer(outputLength);\n        output = new Uint8Array(buffer);\n        outputOffset = 0;\n        outputType = 'ArrayBuffer';\n    }\n\n    // Because `Uint8Array` is type compatible with `ArrayBuffer`,\n    // TypeScript doesn't correctly narrow `output` to `Uint8Array` when assigning.\n    // Manually eliminate `ArrayBuffer` from `output` with a type guard.\n    if (output instanceof ArrayBuffer) {\n        return output;\n    }\n\n    if (input.buffer === output.buffer) {\n        const bufferInputStart = input.byteOffset + inputOffset;\n        const bufferOutputStart = output.byteOffset + outputOffset;\n        if (bufferOutputStart < bufferInputStart - 1) {\n            const bufferOutputEnd = bufferOutputStart + outputLength;\n            if (bufferOutputEnd >= bufferInputStart) {\n                throw new Error('input and output buffer can not be overlapping');\n            }\n        }\n    }\n\n    let inputIndex = inputOffset + inputLength - 1;\n    let outputIndex = outputOffset + outputLength - 1;\n\n    if (extraBytes === 1) {\n        // aaaaaabb\n        const x = input[inputIndex];\n        inputIndex -= 1;\n\n        output[outputIndex] = padding;\n        outputIndex -= 1;\n\n        output[outputIndex] = padding;\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((x & 0b11) << 4)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[x >> 2];\n        outputIndex -= 1;\n    } else if (extraBytes === 2) {\n        // bbbbcccc\n        const y = input[inputIndex];\n        inputIndex -= 1;\n\n        // aaaaaabb\n        const x = input[inputIndex];\n        inputIndex -= 1;\n\n        output[outputIndex] = padding;\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((y & 0b1111) << 2)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((x & 0b11) << 4) | (y >> 4)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[x >> 2];\n        outputIndex -= 1;\n    }\n\n    while (inputIndex >= inputOffset) {\n        // ccdddddd\n        const z = input[inputIndex];\n        inputIndex -= 1;\n\n        // bbbbcccc\n        const y = input[inputIndex];\n        inputIndex -= 1;\n\n        // aaaaaabb\n        const x = input[inputIndex];\n        inputIndex -= 1;\n\n        output[outputIndex] = chars[z & 0b111111];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((y & 0b1111) << 2) | (z >> 6)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((x & 0b11) << 4) | (y >> 4)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[x >> 2];\n        outputIndex -= 1;\n    }\n\n    if (outputType === 'ArrayBuffer') {\n        return output.buffer;\n    } else {\n        return outputLength;\n    }\n}\n\nexport function decodeBase64(input: string): ArrayBuffer {\n    let padding: number;\n    if (input[input.length - 2] === '=') {\n        padding = 2;\n    } else if (input[input.length - 1] === '=') {\n        padding = 1;\n    } else {\n        padding = 0;\n    }\n\n    const result = new Uint8Array(input.length / 4 * 3 - padding);\n    let sIndex = 0;\n    let dIndex = 0;\n\n    while (sIndex < input.length - (padding !== 0 ? 4 : 0)) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const c = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const d = toValue(input[sIndex]);\n        sIndex += 1;\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n        dIndex += 1;\n\n        result[dIndex] = ((b & 0b1111) << 4) | ((c & 0b11_1100) >> 2);\n        dIndex += 1;\n\n        result[dIndex] = ((c & 0b11) << 6) | d;\n        dIndex += 1;\n    }\n\n    if (padding === 1) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const c = toValue(input[sIndex]);\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n        dIndex += 1;\n\n        result[dIndex] = ((b & 0b1111) << 4) | ((c & 0b11_1100) >> 2);\n    } else if (padding === 2) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n    }\n\n    return result.buffer;\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { EventEmitter } from '@yume-chan/event';\n\nconst IteratorReturnUndefinedResult: IteratorReturnResult<void> = {\n    done: true,\n    value: undefined,\n};\nObject.freeze(IteratorReturnUndefinedResult);\n\nexport type EventIteratorDestroyer<_T> = (() => void) | undefined;\n\nexport class EventIteratorState<T> {\n    public pullQueue: PromiseResolver<IteratorResult<T>>[] = [];\n\n    public pushQueue: [value: T, size: number][] = [];\n\n    public ended = false;\n\n    public waterMark = 0;\n\n    public pendingLowWaterEvent = false;\n\n    public lowWaterEvent = new EventEmitter<void>();\n\n    public get onLowWater() { return this.lowWaterEvent.event; }\n\n    public cleanup!: EventIteratorDestroyer<T>;\n}\n\nexport class EventIteratorController<T> {\n    private state: EventIteratorState<T>;\n\n    public highWaterMark: number = 10;\n\n    public lowWaterMark: number = 0;\n\n    public get waterMark() { return this.state.waterMark; }\n\n    public get onLowWater() { return this.state.lowWaterEvent.event; }\n\n    public constructor(state: EventIteratorState<T>) {\n        this.state = state;\n    }\n\n    public push(value: T, size = 1): boolean {\n        if (this.state.pullQueue.length) {\n            this.state.pullQueue.shift()!.resolve({ done: false, value });\n            return true;\n        }\n\n        this.state.pushQueue.push([value, size]);\n        this.state.waterMark += size;\n        if (this.state.waterMark < this.highWaterMark) {\n            return true;\n        }\n\n        this.state.pendingLowWaterEvent = true;\n        return false;\n    }\n\n    public end(): void {\n        this.state.ended = true;\n        let item: PromiseResolver<IteratorResult<T, any>> | undefined;\n        while (item = this.state.pullQueue.shift()) {\n            item.resolve(IteratorReturnUndefinedResult);\n        }\n        this.state.cleanup?.();\n    }\n}\n\nexport interface EventIteratorInitializer<T> {\n    (controller: EventIteratorController<T>): EventIteratorDestroyer<T>;\n}\n\nexport interface EventIteratorOptions {\n    maxConsumerCount: number;\n\n    autoCleanup: boolean;\n\n    autoStart: boolean;\n}\n\nexport const EventIteratorDefaultOptions: EventIteratorOptions = {\n    maxConsumerCount: Infinity,\n    autoCleanup: true,\n    autoStart: true,\n};\n\nexport class EventIterable<T> implements AsyncIterable<T> {\n    private initializer: EventIteratorInitializer<T>;\n\n    private options: EventIteratorOptions;\n\n    private consumerCount: number = 0;\n\n    private state: EventIteratorState<T>;\n\n    private controller: EventIteratorController<T>;\n\n    private started = false;\n\n    public constructor(\n        initializer: EventIteratorInitializer<T>,\n        options?: Partial<EventIteratorOptions>\n    ) {\n        this.initializer = initializer;\n        this.options = { ...EventIteratorDefaultOptions, ...options };\n\n        this.state = new EventIteratorState<T>();\n        this.controller = new EventIteratorController<T>(this.state);\n\n        if (this.options.autoStart) {\n            this.state.cleanup = this.initializer(this.controller);\n        }\n    }\n\n    private next = () => {\n        const { state, controller } = this;\n\n        if (state.pushQueue.length) {\n            const [value, size] = state.pushQueue.shift()!;\n            state.waterMark -= size;\n            if (state.pendingLowWaterEvent &&\n                state.waterMark <= controller.lowWaterMark) {\n                state.lowWaterEvent.fire();\n            }\n            return Promise.resolve({ done: false, value });\n        }\n\n        if (state.ended) {\n            return Promise.resolve(IteratorReturnUndefinedResult);\n        }\n\n        const resolver = new PromiseResolver<IteratorResult<T>>();\n        state.pullQueue.push(resolver);\n        return resolver.promise;\n    };\n\n    public [Symbol.asyncIterator](): AsyncIterator<T> {\n        if (this.consumerCount === this.options.maxConsumerCount) {\n            throw new Error('Max consumer count exceeded');\n        }\n        this.consumerCount += 1;\n\n        if (!this.options.autoStart && !this.started) {\n            this.state.cleanup = this.initializer(this.controller);\n            this.started = true;\n        }\n\n        return {\n            next: this.next,\n            return: () => {\n                this.consumerCount -= 1;\n                if (this.consumerCount === 0 && this.options.autoCleanup) {\n                    this.controller.end();\n                }\n                return Promise.resolve(IteratorReturnUndefinedResult);\n            },\n        };\n    }\n}\n","import { DisposableList } from '@yume-chan/event';\nimport { AutoResetEvent, EventIterable } from '../utils';\nimport { AdbStreamBase } from './controller';\nimport { AdbStream } from './stream';\n\nexport class AdbReadableStream implements AdbStreamBase {\n    private stream: AdbStream;\n\n    private iterable: AsyncIterable<ArrayBuffer>;\n\n    private readLock = new AutoResetEvent();\n\n    public get backend() { return this.stream.backend; }\n\n    public get localId() { return this.stream.localId; }\n\n    public get remoteId() { return this.stream.remoteId; }\n\n    public constructor(stream: AdbStream) {\n        this.stream = stream;\n        this.iterable = new EventIterable<ArrayBuffer>(controller => {\n            controller.highWaterMark = 16 * 1024;\n\n            const disposable = new DisposableList();\n            const resetEvent = new AutoResetEvent(true);\n            disposable.add(this.stream.onData(buffer => {\n                if (!controller.push(buffer, buffer.byteLength)) {\n                    return resetEvent.wait();\n                }\n                return;\n            }));\n            disposable.add(this.stream.onClose(() => {\n                controller.end();\n            }));\n            disposable.add(controller.onLowWater(() => {\n                resetEvent.notify();\n            }));\n\n            return () => {\n                disposable.dispose();\n            };\n        }, {\n            maxConsumerCount: 1,\n            autoCleanup: false,\n        });\n    }\n\n    public async read(): Promise<ArrayBuffer> {\n        await this.readLock.wait();\n\n        try {\n            for await (const buffer of this.iterable) {\n                return buffer;\n            }\n            throw new Error('The stream has been closed');\n        } finally {\n            this.readLock.notify();\n        }\n    }\n\n    public async readAll(): Promise<string> {\n        await this.readLock.wait();\n\n        try {\n            let output = '';\n            for await (const buffer of this.iterable) {\n                output += this.stream.backend.decodeUtf8(buffer);\n            }\n            return output;\n        } finally {\n            this.readLock.notify();\n        }\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.stream.write(data);\n    }\n\n    close(): void {\n        this.stream.close();\n    }\n}\n","import { AdbStreamBase } from './controller';\nimport { AdbReadableStream } from './readable-stream';\nimport { AdbStream } from './stream';\n\nexport interface Stream {\n    /**\n     * @param length A hint of how much data should be read.\n     * @returns Data, which can be either more or less than `length`\n     */\n    read(length: number): ArrayBuffer | Promise<ArrayBuffer>;\n\n    close?(): void;\n}\n\nexport class BufferedStream<T extends Stream> {\n    private buffer: Uint8Array | undefined;\n\n    protected readonly stream: T;\n\n    public constructor(stream: T) {\n        this.stream = stream;\n    }\n\n    public async read(length: number): Promise<ArrayBuffer> {\n        let array: Uint8Array;\n        let index: number;\n        if (this.buffer) {\n            const buffer = this.buffer;\n            if (buffer.byteLength > length) {\n                this.buffer = buffer.subarray(length);\n                return buffer.slice(0, length).buffer;\n            }\n\n            array = new Uint8Array(length);\n            array.set(buffer);\n            index = buffer.byteLength;\n            this.buffer = undefined;\n        } else {\n            array = new Uint8Array(length);\n            index = 0;\n        }\n\n        while (index < length) {\n            const buffer = await this.stream.read(length - index);\n            if (buffer.byteLength > length - index) {\n                array.set(new Uint8Array(buffer, 0, length), index);\n                this.buffer = new Uint8Array(buffer, length);\n                return array.buffer;\n            }\n\n            array.set(new Uint8Array(buffer), index);\n            index += buffer.byteLength;\n        }\n\n        return array.buffer;\n    }\n\n    public close() {\n        this.stream.close?.();\n    }\n}\n\nexport class AdbBufferedStream extends BufferedStream<AdbReadableStream> implements AdbStreamBase {\n    public get backend() { return this.stream.backend; }\n\n    public get localId() { return this.stream.localId; }\n\n    public get remoteId() { return this.stream.remoteId; }\n\n    public constructor(stream: AdbStream) {\n        super(new AdbReadableStream(stream));\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.stream.write(data);\n    }\n}\n","import { AsyncEventEmitter, AutoDisposable, EventEmitter } from '@yume-chan/event';\nimport { AdbBackend } from '../backend';\nimport { AdbCommand } from '../packet';\nimport { AutoResetEvent } from '../utils';\nimport { AdbPacketDispatcher } from './dispatcher';\n\nexport interface AdbStreamBase {\n    backend: AdbBackend;\n\n    localId: number;\n\n    remoteId: number;\n}\n\nexport class AdbStreamController extends AutoDisposable implements AdbStreamBase {\n    private readonly writeLock = this.addDisposable(new AutoResetEvent());\n\n    public readonly dispatcher: AdbPacketDispatcher;\n\n    public get backend() { return this.dispatcher.backend; }\n\n    public readonly localId: number;\n\n    public readonly remoteId: number;\n\n    public readonly dataEvent = this.addDisposable(new AsyncEventEmitter<ArrayBuffer>());\n\n    private readonly closeEvent = this.addDisposable(new EventEmitter<void>());\n\n    public get onClose() { return this.closeEvent.event; }\n\n    public constructor(localId: number, remoteId: number, dispatcher: AdbPacketDispatcher) {\n        super();\n\n        this.localId = localId;\n        this.remoteId = remoteId;\n        this.dispatcher = dispatcher;\n    }\n\n    public async write(data: ArrayBuffer): Promise<void> {\n        await this.writeLock.wait();\n        await this.dispatcher.sendPacket(AdbCommand.Write, this.localId, this.remoteId, data);\n    }\n\n    public ack() {\n        this.writeLock.notify();\n    }\n\n    public close() {\n        return this.dispatcher.sendPacket(AdbCommand.Close, this.localId, this.remoteId);\n    }\n\n    public dispose() {\n        this.closeEvent.fire();\n        super.dispose();\n    }\n}\n","import { AdbStreamBase, AdbStreamController } from './controller';\n\nexport class AdbStream implements AdbStreamBase {\n    private controller: AdbStreamController;\n\n    public get backend() { return this.controller.backend; }\n\n    public get localId() { return this.controller.localId; }\n\n    public get remoteId() { return this.controller.remoteId; }\n\n    public get onData() { return this.controller.dataEvent.event; }\n\n    public get onClose() { return this.controller.onClose; }\n\n    public constructor(controller: AdbStreamController) {\n        this.controller = controller;\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.controller.write(data);\n    }\n\n    public close(): Promise<void> {\n        return this.controller.close();\n    }\n}\n","import AsyncOperationManager from '@yume-chan/async-operation-manager';\nimport { AutoDisposable, EventEmitter } from '@yume-chan/event';\nimport { AdbBackend } from '../backend';\nimport { AdbCommand, AdbPacket } from '../packet';\nimport { AdbStreamController } from './controller';\nimport { AdbStream } from './stream';\n\nexport interface AdbPacketReceivedEventArgs {\n    handled: boolean;\n\n    packet: AdbPacket;\n}\n\nexport interface AdbStreamCreatedEventArgs {\n    handled: boolean;\n\n    packet: AdbPacket;\n\n    stream: AdbStream;\n}\n\nexport class AdbPacketDispatcher extends AutoDisposable {\n    // ADB requires stream id to start from 1\n    // (0 means open failed)\n    private readonly initializers = new AsyncOperationManager(1);\n    private readonly streams = new Map<number, AdbStreamController>();\n\n    public readonly backend: AdbBackend;\n\n    private readonly packetEvent = this.addDisposable(new EventEmitter<AdbPacketReceivedEventArgs>());\n    public get onPacket() { return this.packetEvent.event; }\n\n    private readonly streamEvent = this.addDisposable(new EventEmitter<AdbStreamCreatedEventArgs>());\n    public get onStream() { return this.streamEvent.event; }\n\n    private readonly errorEvent = this.addDisposable(new EventEmitter<Error>());\n    public get onError() { return this.errorEvent.event; }\n\n    private _running = true;\n    public get running() { return this._running; }\n\n    public constructor(backend: AdbBackend) {\n        super();\n\n        this.backend = backend;\n        this.receiveLoop();\n    }\n\n    private async receiveLoop() {\n        try {\n            while (this._running) {\n                const packet = await AdbPacket.read(this.backend);\n                switch (packet.command) {\n                    case AdbCommand.OK:\n                        this.handleOk(packet);\n                        continue;\n                    case AdbCommand.Close:\n                        // CLSE also has two meanings\n                        if (packet.arg0 === 0) {\n                            // 1. The device don't want to create the Stream\n                            this.initializers.reject(packet.arg1, new Error('open failed'));\n                            continue;\n                        }\n\n                        if (this.streams.has(packet.arg1)) {\n                            // 2. The device has closed the Stream\n                            this.streams.get(packet.arg1)!.dispose();\n                            this.streams.delete(packet.arg1);\n                            continue;\n                        }\n\n                        // Maybe the device is responding to a packet of last connection\n                        // Just ignore it\n                        continue;\n                    case AdbCommand.Write:\n                        if (this.streams.has(packet.arg1)) {\n                            await this.streams.get(packet.arg1)!.dataEvent.fire(packet.payload!);\n                            await this.sendPacket(AdbCommand.OK, packet.arg1, packet.arg0);\n                        }\n\n                        // Maybe the device is responding to a packet of last connection\n                        // Just ignore it\n                        continue;\n                    case AdbCommand.Open:\n                        await this.handleOpen(packet);\n                        continue;\n                }\n\n                const args: AdbPacketReceivedEventArgs = {\n                    handled: false,\n                    packet,\n                };\n                this.packetEvent.fire(args);\n                if (!args.handled) {\n                    this.dispose();\n                    return;\n                }\n            }\n        } catch (e) {\n            if (!this._running) {\n                // ignore error\n                return;\n            }\n\n            this.errorEvent.fire(e);\n        }\n    }\n\n    private handleOk(packet: AdbPacket) {\n        if (this.initializers.resolve(packet.arg1, packet.arg0)) {\n            // Device has created the `Stream`\n            return;\n        }\n\n        if (this.streams.has(packet.arg1)) {\n            // Device has received last `WRTE` to the `Stream`\n            this.streams.get(packet.arg1)!.ack();\n            return;\n        }\n\n        // Maybe the device is responding to a packet of last connection\n        // Tell the device to close the stream\n        this.sendPacket(AdbCommand.Close, packet.arg1, packet.arg0);\n    }\n\n    private async handleOpen(packet: AdbPacket) {\n        // AsyncOperationManager doesn't support get and skip an ID\n        // Use `add` + `resolve` to simulate the behavior\n        const [localId] = this.initializers.add<number>();\n        this.initializers.resolve(localId, undefined);\n\n        const controller = new AdbStreamController(localId, packet.arg0, this);\n        const stream = new AdbStream(controller);\n\n        const args: AdbStreamCreatedEventArgs = {\n            handled: false,\n            packet,\n            stream,\n        };\n        this.streamEvent.fire(args);\n\n        if (args.handled) {\n            this.streams.set(localId, controller);\n            await this.sendPacket(AdbCommand.OK, localId, packet.arg0);\n        } else {\n            await this.sendPacket(AdbCommand.Close, 0, packet.arg0);\n        }\n    }\n\n    public async createStream(service: string): Promise<AdbStream> {\n        const [localId, initializer] = this.initializers.add<number>();\n        await this.sendPacket(AdbCommand.Open, localId, 0, service);\n\n        const remoteId = await initializer;\n        const controller = new AdbStreamController(localId, remoteId, this);\n        this.streams.set(controller.localId, controller);\n\n        return new AdbStream(controller);\n    }\n\n    public sendPacket(packet: AdbPacket): Promise<void>;\n    public sendPacket(\n        command: AdbCommand,\n        arg0: number,\n        arg1: number,\n        payload?: string | ArrayBuffer\n    ): Promise<void>;\n    public sendPacket(\n        packetOrCommand: AdbPacket | AdbCommand,\n        arg0?: number,\n        arg1?: number,\n        payload?: string | ArrayBuffer\n    ): Promise<void> {\n        let packet: AdbPacket;\n        if (arguments.length === 1) {\n            packet = packetOrCommand as AdbPacket;\n        } else {\n            if (typeof payload === 'string') {\n                payload = this.backend.encodeUtf8(payload);\n            }\n\n            packet = AdbPacket.create({\n                command: packetOrCommand as AdbCommand,\n                arg0: arg0 as number,\n                arg1: arg1 as number,\n                payload,\n            }, this.backend);\n        }\n\n        return AdbPacket.write(packet, this.backend);\n    }\n\n    public dispose() {\n        this._running = false;\n\n        for (const stream of this.streams.values()) {\n            stream.dispose();\n        }\n        this.streams.clear();\n\n        super.dispose();\n    }\n}\n","import { BackingField, Struct, StructInitType, StructValueType } from '@yume-chan/struct';\nimport { AdbBackend } from './backend';\nimport { BufferedStream } from './stream';\n\nexport enum AdbCommand {\n    Auth = 0x48545541,    // 'AUTH'\n    Close = 0x45534c43,   // 'CLSE'\n    Connect = 0x4e584e43, // 'CNXN'\n    OK = 0x59414b4f,      // 'OKAY'\n    Open = 0x4e45504f,    // 'OPEN'\n    Write = 0x45545257,   // 'WRTE'\n}\n\nconst AdbPacketWithoutPayload =\n    new Struct({ littleEndian: true })\n        .uint32('command', undefined)\n        .uint32('arg0')\n        .uint32('arg1')\n        .uint32('payloadLength')\n        .uint32('checksum')\n        .int32('magic');\n\nconst AdbPacketStruct =\n    AdbPacketWithoutPayload\n        .arrayBuffer('payload', { lengthField: 'payloadLength' })\n        .afterParsed((value) => {\n            if (value[BackingField].magic !== value.magic) {\n                throw new Error('Invalid command');\n            }\n        });\n\nexport type AdbPacket = StructValueType<typeof AdbPacketStruct>;\n\nexport type AdbPacketInit = Omit<StructInitType<typeof AdbPacketStruct>, 'checksum' | 'magic'>;\n\nexport namespace AdbPacket {\n    export function create(init: AdbPacketInit, backend: AdbBackend): AdbPacket {\n        return AdbPacketStruct.create({\n            ...init,\n            checksum: 0,\n            magic: init.command ^ 0xFFFFFFFF,\n        }, backend);\n    }\n\n    export async function read(backend: AdbBackend): Promise<AdbPacket> {\n        let buffer = await backend.read(24);\n        if (buffer.byteLength !== 24) {\n            // Maybe it's a payload from last connection.\n            // Ignore and try again\n            buffer = await backend.read(24);\n        }\n\n        let bufferUsed = false;\n        const stream = new BufferedStream({\n            read(length: number) {\n                if (!bufferUsed) {\n                    bufferUsed = true;\n                    return buffer;\n                }\n                return backend.read(length);\n            }\n        });\n\n        return AdbPacketStruct.deserialize({\n            read: stream.read.bind(stream),\n            decodeUtf8: backend.decodeUtf8.bind(backend),\n            encodeUtf8: backend.encodeUtf8.bind(backend),\n        });\n    }\n\n    export async function write(packet: AdbPacket, backend: AdbBackend): Promise<void> {\n        // Write payload separately to avoid an extra copy\n        await backend.write(AdbPacketWithoutPayload.serialize(packet, backend));\n        if (packet.payload) {\n            await backend.write(packet.payload);\n        }\n    }\n}\n","import { AutoDisposable, Disposable } from '@yume-chan/event';\nimport { AdbBackend, AdbKeyIterator } from './backend';\nimport { calculatePublicKey, calculatePublicKeyLength, sign } from './crypto';\nimport { AdbCommand, AdbPacket } from './packet';\nimport { calculateBase64EncodedLength, encodeBase64 } from './utils';\n\nexport enum AdbAuthType {\n    Token = 1,\n    Signature = 2,\n    PublicKey = 3,\n}\n\nexport interface AdbAuthenticator extends Disposable {\n    tryAuth(packet: AdbPacket): Promise<AdbPacket | undefined>;\n}\n\nexport interface AdbAuthenticatorConstructor {\n    new(backend: AdbBackend): AdbAuthenticator;\n}\n\nexport class AdbSignatureAuthenticator implements AdbAuthenticator {\n    private readonly backend: AdbBackend;\n\n    private readonly iterator: AdbKeyIterator;\n\n    private iteratorDone = false;\n\n    public constructor(backend: AdbBackend) {\n        this.backend = backend;\n        this.iterator = backend.iterateKeys();\n    }\n\n    public async tryAuth(packet: AdbPacket): Promise<AdbPacket | undefined> {\n        if (packet.arg0 !== AdbAuthType.Token) {\n            return undefined;\n        }\n\n        const next = await this.iterator.next();\n        if (next.done) {\n            this.iteratorDone = true;\n            return undefined;\n        }\n\n        const signature = sign(next.value, packet.payload!);\n\n        return AdbPacket.create({\n            command: AdbCommand.Auth,\n            arg0: AdbAuthType.Signature,\n            arg1: 0,\n            payload: signature\n        }, this.backend);\n    }\n\n    public dispose() {\n        if (!this.iteratorDone) {\n            this.iterator.return?.();\n        }\n    }\n}\n\nexport class AdbPublicKeyAuthenticator implements AdbAuthenticator {\n    private backend: AdbBackend;\n\n    public constructor(backend: AdbBackend) {\n        this.backend = backend;\n    }\n\n    public async tryAuth(): Promise<AdbPacket> {\n        let privateKey: ArrayBuffer;\n\n        const iterator = this.backend.iterateKeys();\n        const next = await iterator.next();\n        if (!next.done) {\n            privateKey = next.value;\n            await iterator.return?.();\n        } else {\n            privateKey = await this.backend.generateKey();\n        }\n\n        const publicKeyLength = calculatePublicKeyLength();\n        const publicKeyBase64Length = calculateBase64EncodedLength(publicKeyLength);\n\n        // ADBd needs an extra null terminator,\n        // So we allocate the buffer with one extra byte.\n        const publicKeyBuffer = new ArrayBuffer(publicKeyBase64Length + 1);\n\n        calculatePublicKey(privateKey, publicKeyBuffer);\n        encodeBase64(publicKeyBuffer, 0, publicKeyLength, publicKeyBuffer);\n\n        return AdbPacket.create({\n            command: AdbCommand.Auth,\n            arg0: AdbAuthType.PublicKey,\n            arg1: 0,\n            payload: publicKeyBuffer\n        }, this.backend);\n    }\n\n    public dispose() {\n        // do nothing\n    }\n}\n\nexport const AdbDefaultAuthenticators: AdbAuthenticatorConstructor[] = [\n    AdbSignatureAuthenticator,\n    AdbPublicKeyAuthenticator\n];\n\nexport class AdbAuthenticationHandler extends AutoDisposable {\n    public readonly authenticators: readonly AdbAuthenticator[];\n\n    private index = 0;\n\n    public constructor(\n        authenticators: readonly AdbAuthenticatorConstructor[],\n        backend: AdbBackend\n    ) {\n        super();\n\n        this.authenticators = authenticators.map(\n            Constructor => this.addDisposable(new Constructor(backend))\n        );\n    }\n\n    public async tryNextAuth(packet: AdbPacket): Promise<AdbPacket> {\n        while (this.index < this.authenticators.length) {\n            const result = await this.authenticators[this.index].tryAuth(packet);\n            if (result) {\n                return result;\n            }\n\n            this.index += 1;\n        }\n\n        throw new Error('Cannot authenticate with device');\n    }\n}\n","export enum AdbFeatures {\n    StatV2 = 'stat_v2',\n}\n","import { Struct, StructValueType } from \"@yume-chan/struct\";\n\nexport const FrameBuffer =\n    new Struct({ littleEndian: true })\n        .uint32('version', undefined, 2 as const)\n        .uint32('bpp')\n        .uint32('colorSpace')\n        .uint32('size')\n        .uint32('width')\n        .uint32('height')\n        .uint32('red_offset')\n        .uint32('red_length')\n        .uint32('blue_offset')\n        .uint32('blue_length')\n        .uint32('green_offset')\n        .uint32('green_length')\n        .uint32('alpha_offset')\n        .uint32('alpha_length')\n        .arrayBuffer('data', { lengthField: 'size' });\n\nexport type FrameBuffer = StructValueType<typeof FrameBuffer>;\n","import { AutoDisposable } from '@yume-chan/event';\nimport { placeholder, Struct, StructDeserializationContext, StructInitType, StructValueType } from '@yume-chan/struct';\nimport { Adb } from './adb';\nimport { AdbFeatures } from './features';\nimport { AdbBufferedStream, AdbStream } from './stream';\nimport { AutoResetEvent } from './utils';\n\nexport enum AdbSyncRequestId {\n    List = 'LIST',\n    Send = 'SEND',\n    Lstat = 'STAT',\n    Stat = 'STA2',\n    Lstat2 = 'LST2',\n    Data = 'DATA',\n    Done = 'DONE',\n    Receive = 'RECV',\n}\n\nexport enum AdbSyncResponseId {\n    Entry = 'DENT',\n    Lstat = 'STAT',\n    Stat = 'STA2',\n    Lstat2 = 'LST2',\n    Done = 'DONE',\n    Data = 'DATA',\n    Ok = 'OKAY',\n    Fail = 'FAIL',\n}\n\nexport type AdbSyncNumberRequestId =\n    AdbSyncRequestId.Done;\n\nexport type AdbSyncStringRequestId =\n    AdbSyncRequestId.List |\n    AdbSyncRequestId.Send |\n    AdbSyncRequestId.Lstat |\n    AdbSyncRequestId.Stat |\n    AdbSyncRequestId.Lstat2 |\n    AdbSyncRequestId.Receive;\n\nconst AdbSyncStringRequest =\n    new Struct({ littleEndian: true })\n        .string('id', { length: 4 })\n        .uint32('valueLength')\n        .string('value', { lengthField: 'valueLength' });\n\n// https://github.com/python/cpython/blob/4e581d64b8aff3e2eda99b12f080c877bb78dfca/Lib/stat.py#L36\nexport enum LinuxFileType {\n    Directory = 0o04,\n    File = 0o10,\n    Link = 0o12,\n}\n\nexport const AdbSyncLstatResponse =\n    new Struct({ littleEndian: true })\n        .int32('mode')\n        .int32('size')\n        .int32('mtime')\n        .extra({\n            id: AdbSyncResponseId.Lstat as const,\n            get type() { return this.mode >> 12 as LinuxFileType; },\n            get permission() { return this.mode & 0b00001111_11111111; },\n        })\n        .afterParsed((object) => {\n            if (object.mode === 0 &&\n                object.size === 0 &&\n                object.mtime === 0\n            ) {\n                throw new Error('lstat failed');\n            }\n        });\n\nexport type AdbSyncLstatResponse = StructValueType<typeof AdbSyncLstatResponse>;\n\nexport enum ErrorCode {\n    EACCES = 13,\n    EEXIST = 17,\n    EFAULT = 14,\n    EFBIG = 27,\n    EINTR = 4,\n    EINVAL = 22,\n    EIO = 5,\n    EISDIR = 21,\n    ELOOP = 40,\n    EMFILE = 24,\n    ENAMETOOLONG = 36,\n    ENFILE = 23,\n    ENOENT = 2,\n    ENOMEM = 12,\n    ENOSPC = 28,\n    ENOTDIR = 20,\n    EOVERFLOW = 75,\n    EPERM = 1,\n    EROFS = 30,\n    ETXTBSY = 26,\n}\n\nexport const AdbSyncStatResponse =\n    new Struct({ littleEndian: true })\n        .uint32('error', undefined, placeholder<ErrorCode>())\n        .uint64('dev')\n        .uint64('ino')\n        .uint32('mode')\n        .uint32('nlink')\n        .uint32('uid')\n        .uint32('gid')\n        .uint64('size')\n        .uint64('atime')\n        .uint64('mtime')\n        .uint64('ctime')\n        .extra({\n            id: AdbSyncResponseId.Stat as const,\n            get type() { return this.mode >> 12 as LinuxFileType; },\n            get permission() { return this.mode & 0b00001111_11111111; },\n        })\n        .afterParsed((object) => {\n            if (object.error) {\n                throw new Error(ErrorCode[object.error]);\n            }\n        });\n\nexport type AdbSyncStatResponse = StructValueType<typeof AdbSyncStatResponse>;\n\nexport const AdbSyncEntryResponse =\n    AdbSyncLstatResponse\n        .afterParsed()\n        .uint32('nameLength')\n        .string('name', { lengthField: 'nameLength' })\n        .extra({ id: AdbSyncResponseId.Entry as const });\n\nexport type AdbSyncEntryResponse = StructValueType<typeof AdbSyncEntryResponse>;\n\nexport const AdbSyncDataResponse =\n    new Struct({ littleEndian: true })\n        .uint32('dataLength')\n        .arrayBuffer('data', { lengthField: 'dataLength' })\n        .extra({ id: AdbSyncResponseId.Data as const });\n\nexport interface AdbSyncDoneResponseDeserializeContext extends StructDeserializationContext {\n    size: number;\n}\n\nexport class AdbSyncDoneResponse {\n    public static readonly instance = new AdbSyncDoneResponse();\n\n    public static async deserialize(\n        context: AdbSyncDoneResponseDeserializeContext\n    ): Promise<AdbSyncDoneResponse> {\n        await context.read(context.size);\n        return AdbSyncDoneResponse.instance;\n    }\n\n    public readonly id = AdbSyncResponseId.Done;\n}\n\nexport const AdbSyncFailResponse =\n    new Struct({ littleEndian: true })\n        .uint32('messageLength')\n        .string('message', { lengthField: 'messageLength' })\n        .afterParsed(object => {\n            throw new Error(object.message);\n        });\n\nconst ResponseTypeMap = {\n    [AdbSyncResponseId.Entry]: AdbSyncEntryResponse,\n    [AdbSyncResponseId.Lstat]: AdbSyncLstatResponse,\n    [AdbSyncResponseId.Stat]: AdbSyncStatResponse,\n    [AdbSyncResponseId.Lstat2]: AdbSyncStatResponse,\n    [AdbSyncResponseId.Data]: AdbSyncDataResponse,\n    [AdbSyncResponseId.Fail]: AdbSyncFailResponse,\n    [AdbSyncResponseId.Done]: AdbSyncDoneResponse,\n} as const;\n\nasync function readResponse(stream: AdbBufferedStream, size: number) {\n    // DONE responses' size are always same as the request's normal response.\n    // For example DONE responses for LIST requests are 16 bytes (same as DENT responses),\n    // but DONE responses for STAT requests are 12 bytes (same as STAT responses)\n    // So we need to know responses' size in advance.\n    const id = stream.backend.decodeUtf8(await stream.read(4)) as keyof typeof ResponseTypeMap;\n\n    if (ResponseTypeMap[id]) {\n        return ResponseTypeMap[id].deserialize({\n            size,\n            read: stream.read.bind(stream),\n            decodeUtf8: stream.backend.decodeUtf8.bind(stream.backend),\n            encodeUtf8: stream.backend.encodeUtf8.bind(stream.backend),\n        });\n    }\n\n    await stream.read(size);\n    throw new Error('Unexpected response id');\n}\n\nexport class AdbSync extends AutoDisposable {\n    private stream: AdbBufferedStream;\n\n    private adb: Adb;\n\n    public get supportStat(): boolean {\n        return this.adb.features!.includes(AdbFeatures.StatV2);\n    }\n\n    private sendLock = this.addDisposable(new AutoResetEvent());\n\n    public constructor(stream: AdbStream, adb: Adb) {\n        super();\n\n        this.stream = new AdbBufferedStream(stream);\n        this.adb = adb;\n    }\n\n    public async lstat(path: string): Promise<AdbSyncLstatResponse | AdbSyncStatResponse> {\n        await this.sendLock.wait();\n\n        try {\n            let requestId: AdbSyncRequestId.Lstat | AdbSyncRequestId.Lstat2;\n            let responseType: typeof AdbSyncLstatResponse | typeof AdbSyncStatResponse;\n            let responseId: AdbSyncResponseId.Lstat | AdbSyncResponseId.Stat;\n\n            if (this.supportStat) {\n                requestId = AdbSyncRequestId.Lstat2;\n                responseType = AdbSyncStatResponse;\n                responseId = AdbSyncResponseId.Stat;\n            } else {\n                requestId = AdbSyncRequestId.Lstat;\n                responseType = AdbSyncLstatResponse;\n                responseId = AdbSyncResponseId.Lstat;\n            }\n\n            await this.write(AdbSyncStringRequest, { id: requestId, value: path });\n            const response = await readResponse(this.stream, responseType.size);\n            if (response.id !== responseId) {\n                throw new Error('Unexpected response id');\n            }\n            return response;\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async stat(path: string) {\n        if (!this.supportStat) {\n            throw new Error('Not supported');\n        }\n\n        await this.sendLock.wait();\n\n        try {\n            await this.write(AdbSyncStringRequest, { id: AdbSyncRequestId.Stat, value: path });\n            const response = await readResponse(this.stream, AdbSyncStatResponse.size);\n            if (response.id !== AdbSyncResponseId.Stat) {\n                throw new Error('Unexpected response id');\n            }\n            return response;\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async *opendir(path: string) {\n        await this.sendLock.wait();\n\n        try {\n            await this.write(AdbSyncStringRequest, { id: AdbSyncRequestId.List, value: path });\n\n            while (true) {\n                const response = await readResponse(this.stream, AdbSyncEntryResponse.size);\n                switch (response.id) {\n                    case AdbSyncResponseId.Entry:\n                        yield response;\n                        break;\n                    case AdbSyncResponseId.Done:\n                        return;\n                    default:\n                        throw new Error('Unexpected response id');\n                }\n            }\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async readdir(path: string) {\n        const results: AdbSyncEntryResponse[] = [];\n        for await (const entry of this.opendir(path)) {\n            results.push(entry);\n        }\n        return results;\n    }\n\n    public async *receive(path: string): AsyncGenerator<ArrayBuffer, void, void> {\n        await this.sendLock.wait();\n\n        try {\n            await this.write(AdbSyncStringRequest, { id: AdbSyncRequestId.Receive, value: path });\n            while (true) {\n                const response = await readResponse(this.stream, AdbSyncDataResponse.size);\n                switch (response.id) {\n                    case AdbSyncResponseId.Data:\n                        yield response.data!;\n                        break;\n                    case AdbSyncResponseId.Done:\n                        return;\n                    default:\n                        throw new Error('Unexpected response id');\n                }\n            }\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public dispose() {\n        super.dispose();\n        this.stream.close();\n    }\n\n    private write<T extends Struct<object, object, object, unknown>>(\n        type: T,\n        value: StructInitType<T>\n    ) {\n        return this.stream.write(type.serialize(value, this.stream.backend));\n    }\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { DisposableList } from '@yume-chan/event';\nimport { AdbAuthenticationHandler, AdbDefaultAuthenticators } from './auth';\nimport { AdbBackend } from './backend';\nimport { AdbFeatures } from './features';\nimport { FrameBuffer } from './framebuffer';\nimport { AdbCommand } from './packet';\nimport { AdbBufferedStream, AdbPacketDispatcher, AdbReadableStream, AdbStream } from './stream';\nimport { AdbSync } from './sync';\n\nexport enum AdbPropKey {\n    Product = 'ro.product.name',\n    Model = 'ro.product.model',\n    Device = 'ro.product.device',\n    Features = 'features',\n}\n\nexport class Adb {\n    private backend: AdbBackend;\n    public get onDisconnected() { return this.backend.onDisconnected; }\n\n    private _connected = false;\n    public get connected() { return this._connected; }\n\n    public get name() { return this.backend.name; }\n\n    private _product: string | undefined;\n    public get product() { return this._product; }\n\n    private _model: string | undefined;\n    public get model() { return this._model; }\n\n    private _device: string | undefined;\n    public get device() { return this._device; }\n\n    private _features: AdbFeatures[] | undefined;\n    public get features() { return this._features; }\n\n    private packetDispatcher: AdbPacketDispatcher;\n\n    public constructor(backend: AdbBackend) {\n        this.backend = backend;\n        this.packetDispatcher = new AdbPacketDispatcher(backend);\n\n        backend.onDisconnected(this.dispose, this);\n    }\n\n    public async connect(authenticators = AdbDefaultAuthenticators) {\n        const version = 0x01000001;\n\n        const features = [\n            'shell_v2',\n            'cmd',\n            AdbFeatures.StatV2,\n            'ls_v2',\n            'fixed_push_mkdir',\n            'apex',\n            'abb',\n            'fixed_push_symlink_timestamp',\n            'abb_exec',\n            'remount_shell',\n            'track_app',\n            'sendrecv_v2',\n            'sendrecv_v2_brotli',\n            'sendrecv_v2_lz4',\n            'sendrecv_v2_zstd',\n            'sendrecv_v2_dry_run_send',\n        ].join(',');\n\n        const resolver = new PromiseResolver<void>();\n        const authHandler = new AdbAuthenticationHandler(authenticators, this.backend);\n        const disposableList = new DisposableList();\n        disposableList.add(this.packetDispatcher.onPacket(async (e) => {\n            e.handled = true;\n\n            const { packet } = e;\n            try {\n                switch (packet.command) {\n                    case AdbCommand.Connect:\n                        if (packet.arg0 !== version) {\n                            throw new Error('Version mismatch');\n                        }\n\n                        this.parseBanner(this.backend.decodeUtf8(packet.payload!));\n                        resolver.resolve();\n                        break;\n                    case AdbCommand.Auth:\n                        const authPacket = await authHandler.tryNextAuth(e.packet);\n                        await this.packetDispatcher.sendPacket(authPacket);\n                        break;\n                    case AdbCommand.Close:\n                        // Last connection was interrupted\n                        // Ignore this packet, device will recover\n                        break;\n                    default:\n                        throw new Error('Device not in correct state. Reconnect your device and try again');\n                }\n            } catch (e) {\n                resolver.reject(e);\n            }\n        }));\n\n        disposableList.add(this.packetDispatcher.onError(e => {\n            resolver.reject(e);\n        }));\n\n        await this.packetDispatcher.sendPacket(\n            AdbCommand.Connect,\n            version,\n            0x100000,\n            `host::features=${features}`\n        );\n\n        try {\n            await resolver.promise;\n            this._connected = true;\n        } finally {\n            disposableList.dispose();\n        }\n    }\n\n    private parseBanner(banner: string) {\n        const pieces = banner.split('::');\n        if (pieces.length > 1) {\n            const props = pieces[1];\n            for (const prop of props.split(';')) {\n                if (!prop) {\n                    continue;\n                }\n\n                const keyValue = prop.split('=');\n                if (keyValue.length !== 2) {\n                    continue;\n                }\n\n                const [key, value] = keyValue;\n                switch (key) {\n                    case AdbPropKey.Product:\n                        this._product = value;\n                        break;\n                    case AdbPropKey.Model:\n                        this._model = value;\n                        break;\n                    case AdbPropKey.Device:\n                        this._device = value;\n                        break;\n                    case AdbPropKey.Features:\n                        this._features = value.split(',') as AdbFeatures[];\n                        break;\n                }\n            }\n        }\n    }\n\n    public shell(command: string, ...args: string[]): Promise<string>;\n    public shell(): Promise<AdbStream>;\n    public shell(command?: string, ...args: string[]): Promise<AdbStream | string> {\n        // TODO: use shell protocol\n        if (!command) {\n            return this.createStream('shell:');\n        } else {\n            return this.createStreamAndReadAll(`shell:${command} ${args.join(' ')}`);\n        }\n    }\n\n    public async getDaemonTcpAddresses(): Promise<string[]> {\n        const propAddr = (await this.shell('getprop', 'service.adb.listen_addrs')).trim();\n        if (propAddr) {\n            return propAddr.split(',');\n        }\n\n        let port = (await this.shell('getprop', 'service.adb.tcp.port')).trim();\n        if (port) {\n            return [`0.0.0.0:${port}`];\n        }\n\n        port = (await this.shell('getprop', 'persist.adb.tcp.port')).trim();\n        if (port) {\n            return [`0.0.0.0:${port}`];\n        }\n\n        return [];\n    }\n\n    public setDaemonTcpPort(port = 5555): Promise<string> {\n        return this.createStreamAndReadAll(`tcpip:${port}`);\n    }\n\n    public disableDaemonTcp(): Promise<string> {\n        return this.createStreamAndReadAll('usb:');\n    }\n\n    public async sync(): Promise<AdbSync> {\n        const stream = await this.createStream('sync:');\n        return new AdbSync(stream, this);\n    }\n\n    public async framebuffer(): Promise<FrameBuffer> {\n        const stream = await this.createStream('framebuffer:');\n        const buffered = new AdbBufferedStream(stream);\n        return await FrameBuffer.deserialize({\n            read: buffered.read.bind(buffered),\n            encodeUtf8: this.backend.encodeUtf8.bind(this.backend),\n            decodeUtf8: this.backend.decodeUtf8.bind(this.backend),\n        });\n    }\n\n    public async createStream(service: string): Promise<AdbStream> {\n        return this.packetDispatcher.createStream(service);\n    }\n\n    public async createStreamAndReadAll(service: string): Promise<string> {\n        const stream = await this.createStream(service);\n        const readable = new AdbReadableStream(stream);\n        return readable.readAll();\n    }\n\n    public async dispose() {\n        this.packetDispatcher.dispose();\n        await this.backend.dispose();\n    }\n}\n","import { AdbBackend, decodeBase64, encodeBase64 } from '@yume-chan/adb';\nimport { EventEmitter } from '@yume-chan/event';\n\nexport const WebUsbDeviceFilter: USBDeviceFilter = {\n    classCode: 0xFF,\n    subclassCode: 0x42,\n    protocolCode: 1,\n};\n\nconst PrivateKeyStorageKey = 'private-key';\n\nconst Utf8Encoder = new TextEncoder();\nconst Utf8Decoder = new TextDecoder();\n\nexport function encodeUtf8(input: string): ArrayBuffer {\n    return Utf8Encoder.encode(input);\n}\n\nexport function decodeUtf8(buffer: ArrayBuffer): string {\n    return Utf8Decoder.decode(buffer);\n}\n\nexport default class AdbWebBackend implements AdbBackend {\n    public static async fromDevice(device: USBDevice): Promise<AdbWebBackend> {\n        await device.open();\n\n        for (const configuration of device.configurations) {\n            for (const interface_ of configuration.interfaces) {\n                for (const alternate of interface_.alternates) {\n                    if (alternate.interfaceSubclass === WebUsbDeviceFilter.subclassCode &&\n                        alternate.interfaceClass === WebUsbDeviceFilter.classCode &&\n                        alternate.interfaceSubclass === WebUsbDeviceFilter.subclassCode) {\n                        if (device.configuration?.configurationValue !== configuration.configurationValue) {\n                            await device.selectConfiguration(configuration.configurationValue);\n                        }\n\n                        if (!interface_.claimed) {\n                            await device.claimInterface(interface_.interfaceNumber);\n                        }\n\n                        if (interface_.alternate.alternateSetting !== alternate.alternateSetting) {\n                            await device.selectAlternateInterface(interface_.interfaceNumber, alternate.alternateSetting);\n                        }\n\n                        let inEndpointNumber: number | undefined;\n                        let outEndpointNumber: number | undefined;\n\n                        for (const endpoint of alternate.endpoints) {\n                            switch (endpoint.direction) {\n                                case 'in':\n                                    inEndpointNumber = endpoint.endpointNumber;\n                                    if (outEndpointNumber !== undefined) {\n                                        return new AdbWebBackend(device, inEndpointNumber, outEndpointNumber);\n                                    }\n                                    break;\n                                case 'out':\n                                    outEndpointNumber = endpoint.endpointNumber;\n                                    if (inEndpointNumber !== undefined) {\n                                        return new AdbWebBackend(device, inEndpointNumber, outEndpointNumber);\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        throw new Error('Unknown error');\n    }\n\n    public static async pickDevice(): Promise<AdbWebBackend | undefined> {\n        try {\n            const device = await navigator.usb.requestDevice({ filters: [WebUsbDeviceFilter] });\n            return AdbWebBackend.fromDevice(device);\n        } catch (e) {\n            switch (e.name) {\n                case 'NotFoundError':\n                    return undefined;\n                default:\n                    throw e;\n            }\n        }\n    }\n\n    private _device: USBDevice;\n\n    public get name() { return this._device.productName; }\n\n    private readonly onDisconnectedEvent = new EventEmitter<void>();\n    public readonly onDisconnected = this.onDisconnectedEvent.event;\n\n    private _inEndpointNumber!: number;\n    private _outEndpointNumber!: number;\n\n    private constructor(device: USBDevice, inEndPointNumber: number, outEndPointNumber: number) {\n        this._device = device;\n        this._inEndpointNumber = inEndPointNumber;\n        this._outEndpointNumber = outEndPointNumber;\n    }\n\n    public *iterateKeys(): Generator<ArrayBuffer, void, void> {\n        const privateKey = window.localStorage.getItem(PrivateKeyStorageKey);\n        if (privateKey) {\n            yield decodeBase64(privateKey);\n        }\n    }\n\n    public async generateKey(): Promise<ArrayBuffer> {\n        const { privateKey: cryptoKey } = await crypto.subtle.generateKey(\n            {\n                name: 'RSASSA-PKCS1-v1_5',\n                modulusLength: 2048,\n                // 65537\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                hash: 'SHA-1',\n            },\n            true,\n            ['sign', 'verify']\n        );\n\n        const privateKey = await crypto.subtle.exportKey('pkcs8', cryptoKey);\n        window.localStorage.setItem(PrivateKeyStorageKey, decodeUtf8(encodeBase64(privateKey)));\n        return privateKey;\n    }\n\n    public encodeUtf8(input: string): ArrayBuffer {\n        return encodeUtf8(input);\n    }\n\n    public decodeUtf8(buffer: ArrayBuffer): string {\n        return decodeUtf8(buffer);\n    }\n\n    public async write(buffer: ArrayBuffer): Promise<void> {\n        try {\n            await this._device.transferOut(this._outEndpointNumber, buffer);\n        } catch (e) {\n            if (e instanceof Error && e.name === 'NotFoundError') {\n                this.onDisconnectedEvent.fire();\n            }\n\n            throw e;\n        }\n    }\n\n    public async read(length: number): Promise<ArrayBuffer> {\n        try {\n            const result = await this._device.transferIn(this._inEndpointNumber, length);\n\n            if (result.status === 'stall') {\n                await this._device.clearHalt('in', this._inEndpointNumber);\n            }\n\n            const { buffer } = result.data!;\n            return buffer;\n        } catch (e) {\n            if (e instanceof Error && e.name === 'NotFoundError') {\n                this.onDisconnectedEvent.fire();\n            }\n\n            throw e;\n        }\n    }\n\n    public async dispose() {\n        this.onDisconnectedEvent.dispose();\n        await this._device.close();\n    }\n}\n","import { memo, NamedExoticComponent } from 'react';\n\nexport function withDisplayName<P extends object>(\n    name: string,\n    Component: React.FunctionComponent<P>\n): NamedExoticComponent<P> {\n    Component.displayName = name;\n    return memo(Component);\n}\n","import React, { CSSProperties, HTMLAttributes, PropsWithChildren, useCallback, useRef } from 'react';\nimport { withDisplayName } from './with-display-name';\n\nexport interface ResizeObserverProps extends HTMLAttributes<HTMLDivElement>, PropsWithChildren<{}> {\n    onResize: () => void;\n}\n\nconst iframeStyle: CSSProperties = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    visibility: 'hidden',\n};\n\nexport const ResizeObserver = withDisplayName('ResizeObserver', ({\n    onResize,\n    style,\n    children,\n    ...rest\n}: ResizeObserverProps): JSX.Element | null => {\n    const onResizeRef = useRef<() => void>(onResize);\n    onResizeRef.current = onResize;\n\n    const handleResize = useCallback(() => {\n        onResizeRef.current();\n    }, []);\n\n    const handleIframeRef = useCallback((element: HTMLIFrameElement | null) => {\n        if (element) {\n            element.contentWindow!.addEventListener('resize', handleResize);\n        }\n    }, []);\n\n    const containerStyle: CSSProperties = React.useMemo(() => {\n        if (!style) {\n            return { position: 'relative' };\n        }\n\n        if (!style.position) {\n            return { ...style, position: 'relative' };\n        }\n\n        return style;\n    }, [style]);\n\n    return (\n        <div style={containerStyle} {...rest}>\n            <iframe ref={handleIframeRef} style={iframeStyle} />\n            {children}\n        </div>\n    );\n});\n","import { Dialog, DialogFooter, DialogType, PrimaryButton } from '@fluentui/react';\nimport { useBoolean } from '@uifabric/react-hooks';\nimport React, { PropsWithChildren, useMemo, useState } from 'react';\nimport { withDisplayName } from './utils';\n\nexport interface ErrorDialogContext {\n    show(message: string): void;\n}\n\nexport const ErrorDialogContext = React.createContext<ErrorDialogContext>({\n    show() { }\n});\n\nexport default withDisplayName('ErrorDialogProvider', (props: PropsWithChildren<{}>) => {\n    const [errorDialogVisible, { setTrue: showErrorDialog, setFalse: hideErrorDialog }] = useBoolean(false);\n    const [errorMessage, setErrorMessage] = useState<string | undefined>();\n\n    const context = useMemo((): ErrorDialogContext => ({\n        show(message) {\n            setErrorMessage(message);\n            showErrorDialog();\n        }\n    }), []);\n\n    return (\n        <ErrorDialogContext.Provider value={context}>\n            {props.children}\n\n            <Dialog\n                hidden={!errorDialogVisible}\n                dialogContentProps={{\n                    type: DialogType.normal,\n                    title: 'Error',\n                    subText: errorMessage,\n                }}\n            >\n                <DialogFooter>\n                    <PrimaryButton text=\"OK\" onClick={hideErrorDialog} />\n                </DialogFooter>\n            </Dialog>\n        </ErrorDialogContext.Provider>\n    );\n});\n","import { DefaultButton, Dialog, PrimaryButton, ProgressIndicator, Stack, StackItem } from '@fluentui/react';\nimport { Adb } from '@yume-chan/adb';\nimport AdbWebBackend from '@yume-chan/adb-backend-web';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { ErrorDialogContext } from './error-dialog';\nimport { withDisplayName } from './utils';\n\ninterface ConnectProps {\n    device: Adb | undefined;\n\n    onDeviceChange: (device: Adb | undefined) => void;\n}\n\nexport default withDisplayName('Connect', ({\n    device,\n    onDeviceChange,\n}: ConnectProps): JSX.Element | null => {\n    const { show: showErrorDialog } = useContext(ErrorDialogContext);\n\n    const [connecting, setConnecting] = useState(false);\n    const connect = useCallback(async () => {\n        try {\n            const backend = await AdbWebBackend.pickDevice();\n            if (backend) {\n                const device = new Adb(backend);\n                try {\n                    setConnecting(true);\n                    await device.connect();\n                    onDeviceChange(device);\n                } catch (e) {\n                    device.dispose();\n                    throw e;\n                }\n            }\n        } catch (e) {\n            showErrorDialog(e.message);\n        } finally {\n            setConnecting(false);\n        }\n    }, [onDeviceChange]);\n    const disconnect = useCallback(async () => {\n        try {\n            await device!.dispose();\n            onDeviceChange(undefined);\n        } catch (e) {\n            showErrorDialog(e.message);\n        }\n    }, [device]);\n    useEffect(() => {\n        return device?.onDisconnected(() => {\n            onDeviceChange(undefined);\n        });\n    }, [device, onDeviceChange]);\n\n    return (\n        <>\n            <Stack horizontal verticalAlign=\"center\" tokens={{ childrenGap: 8, padding: 8 }}>\n                {!device && <StackItem>\n                    <PrimaryButton text=\"Connect\" onClick={connect} />\n                </StackItem>}\n                {device && <StackItem>\n                    <DefaultButton text=\"Disconnect\" onClick={disconnect} />\n                </StackItem>}\n                <StackItem>\n                    {device && `Connected to ${device.name}`}\n                </StackItem>\n            </Stack>\n\n            <Dialog\n                hidden={!connecting}\n                dialogContentProps={{\n                    title: 'Connecting',\n                    subText: 'Please authorize the connection on your device'\n                }}\n            >\n                <ProgressIndicator />\n            </Dialog>\n        </>\n    );\n});\n","import { AnimationClassNames, concatStyleSets, IStackProps, Stack } from '@fluentui/react';\nimport React, { useMemo, useRef } from 'react';\nimport { match, matchPath, RedirectProps, RouteProps, useLocation, useRouteMatch } from 'react-router-dom';\nimport { withDisplayName } from './utils';\n\nexport const DefaultStackProps: IStackProps = {\n    tokens: { childrenGap: 8, padding: 8 },\n    verticalFill: true,\n};\n\nexport const RouteStackProps: IStackProps = {\n    ...DefaultStackProps,\n    className: AnimationClassNames.slideUpIn10,\n    styles: { root: { overflow: 'auto' } },\n};\n\nexport interface CacheRouteProps extends RouteProps {\n    noCache?: boolean;\n}\n\nexport const CacheRoute = withDisplayName('CacheRoute', (props: CacheRouteProps) => {\n    const match = useRouteMatch(props);\n\n    const everMatched = useRef(!!match);\n    if (!everMatched.current && match) {\n        everMatched.current = true;\n    }\n\n    const stackProps = useMemo((): IStackProps => ({\n        ...RouteStackProps,\n        styles: concatStyleSets(\n            RouteStackProps.styles,\n            { root: { display: match ? 'flex' : 'none' } }\n        ),\n    }), [!!match]);\n\n    if (props.noCache && !match) {\n        return null;\n    }\n\n    if (!everMatched.current) {\n        return null;\n    }\n\n    return (\n        <Stack {...stackProps} >\n            {props.children}\n        </Stack>\n    );\n});\n\nexport interface CacheSwitchProps {\n    children: React.ReactNodeArray;\n}\n\nexport const CacheSwitch = withDisplayName('CacheSwitch', (props: CacheSwitchProps) => {\n    const location = useLocation();\n    let contextMatch = useRouteMatch();\n\n    let element: React.ReactElement | undefined;\n    let computedMatch: match | null | undefined;\n    let cached: React.ReactElement[] = [];\n    React.Children.forEach(props.children, child => {\n        if (React.isValidElement<RouteProps & RedirectProps>(child)) {\n            // Always render all cached routes\n            const isCacheRoute = child.type === CacheRoute;\n            if (isCacheRoute) {\n                cached.push(child);\n            }\n\n            // If we already found the matched route,\n            // Don't care about others\n            if (computedMatch) {\n                return;\n            }\n\n            const path = child.props.path ?? child.props.from;\n            const match = path\n                ? matchPath(location.pathname, { ...child.props, path })\n                : contextMatch;\n\n            if (match) {\n                computedMatch = match;\n\n                if (isCacheRoute) {\n                    // Don't render a CacheRoute twice\n                    element = undefined;\n                } else {\n                    element = child;\n                }\n            }\n        }\n    });\n\n    return (\n        <>\n            {cached}\n            {element ? React.cloneElement(element, { location, computedMatch }) : null}\n        </>\n    );\n});\n","import { Breadcrumb, concatStyleSets, ContextualMenu, DetailsListLayoutMode, DirectionalHint, IBreadcrumbItem, IColumn, Icon, IContextualMenuItem, IDetailsHeaderProps, IDetailsList, IRenderFunction, Layer, MarqueeSelection, mergeStyleSets, Overlay, Selection, ShimmeredDetailsList, StackItem } from '@fluentui/react';\nimport { FileIconType, getFileTypeIconProps, initializeFileTypeIcons } from '@uifabric/file-type-icons';\nimport { useConst } from '@uifabric/react-hooks';\nimport { AdbSyncEntryResponse, LinuxFileType } from '@yume-chan/adb';\nimport { encodeUtf8 } from '@yume-chan/adb-backend-web';\nimport path from 'path';\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport StreamSaver from 'streamsaver';\nimport { ErrorDialogContext } from '../error-dialog';\nimport { withDisplayName } from '../utils';\nimport { RouteProps } from './type';\n\ninitializeFileTypeIcons();\nStreamSaver.mitm = 'streamsaver/mitm.html';\n\ninterface ListItem extends AdbSyncEntryResponse {\n    key: string;\n}\n\nfunction toListItem(item: AdbSyncEntryResponse): ListItem {\n    return { ...item, key: item.name! };\n}\n\nconst classNames = mergeStyleSets({\n    name: {\n        cursor: 'pointer',\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    },\n});\n\nconst units = [' B', ' KB', ' MB', ' GB'];\nfunction formatSize(value: number): string {\n    let index = 0;\n    while (index < units.length && value > 1024) {\n        index += 1;\n        value /= 1024;\n    }\n    return value.toLocaleString(undefined, { maximumFractionDigits: 2 }) + units[index];\n}\n\nfunction extensionName(fileName: string): string {\n    const index = fileName.lastIndexOf('.');\n    if (index === -1) {\n        return '';\n    } else {\n        return fileName.slice(index);\n    }\n}\n\nconst renderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (props?, defaultRender?) => {\n    if (!props || !defaultRender) {\n        return null;\n    }\n\n    return defaultRender({\n        ...props,\n        styles: concatStyleSets(props.styles, { root: { paddingTop: 0 } })\n    });\n};\n\nfunction delay(time: number): Promise<void> {\n    return new Promise(resolve => {\n        setTimeout(resolve, time);\n    });\n}\n\nfunction createReadableStreamFromBufferIterator(\n    iterator: AsyncIterator<ArrayBuffer>\n): ReadableStream<Uint8Array> {\n    return new ReadableStream<Uint8Array>({\n        async pull(controller) {\n            const { desiredSize } = controller;\n            if (!desiredSize || desiredSize < 0) {\n                return;\n            }\n\n            let written = 0;\n            while (written < desiredSize) {\n                const result = await iterator.next();\n                if (result.done) {\n                    controller.close();\n                    return;\n                }\n\n                controller.enqueue(new Uint8Array(result.value));\n                written += result.value.byteLength;\n            }\n        },\n    });\n}\n\nexport default withDisplayName('FileManager', ({\n    device,\n}: RouteProps): JSX.Element | null => {\n    const { show: showErrorDialog } = useContext(ErrorDialogContext);\n\n    const [currentPath, setCurrentPath] = useState('/');\n    const currentPathRef = useRef(currentPath);\n    currentPathRef.current = currentPath;\n\n    const breadcrumbItems = useMemo((): IBreadcrumbItem[] => {\n        let part = '';\n        const list: IBreadcrumbItem[] = currentPath.split('/').filter(Boolean).map(segment => {\n            part += '/' + segment;\n            return {\n                key: part,\n                text: segment,\n                onClick: (e, item) => {\n                    if (!item) {\n                        return;\n                    }\n                    setCurrentPath(item.key);\n                },\n            };\n        });\n        list.unshift({\n            key: '/',\n            text: '/',\n            onClick: () => setCurrentPath('/'),\n        });\n        list[list.length - 1].isCurrentItem = true;\n        list[list.length - 1].onClick = undefined;\n        return list;\n    }, [currentPath]);\n\n    const [items, setItems] = useState<ListItem[]>([]);\n    const [loading, setLoading] = useState(false);\n    const listRef = useRef<IDetailsList | null>(null);\n    const load = useCallback(async () => {\n        setItems([]);\n\n        if (!device) {\n            setCurrentPath('/');\n            return;\n        }\n\n        setLoading(true);\n        const sync = await device.sync();\n\n        const items: ListItem[] = [];\n        const linkItems: AdbSyncEntryResponse[] = [];\n        const intervalId = setInterval(() => {\n            setItems(items.slice());\n        }, 1000);\n\n        try {\n            let lastBreak = Date.now();\n\n            for await (const entry of sync.opendir(currentPath)) {\n                if (currentPath !== currentPathRef.current) {\n                    break;\n                }\n\n                if (entry.name === '.' || entry.name === '..') {\n                    continue;\n                }\n\n                if (entry.type === LinuxFileType.Link) {\n                    linkItems.push(entry);\n                } else {\n                    items.push(toListItem(entry));\n                }\n\n                const now = Date.now();\n                if (now - lastBreak > 16) {\n                    await delay(0);\n                    lastBreak = now;\n                }\n            }\n\n            for (const entry of linkItems) {\n                try {\n                    const followLinkPath = path.resolve(currentPath, entry.name!) + '/';\n                    await sync.lstat(followLinkPath);\n                    items.push(toListItem(entry));\n                } catch (e) {\n                    items.push(toListItem(AdbSyncEntryResponse.create({\n                        mode: (LinuxFileType.File << 12) | entry.permission,\n                        size: 0,\n                        mtime: entry.mtime,\n                        name: entry.name,\n                    }, { encodeUtf8 })));\n                }\n            }\n\n            setItems(items);\n            listRef.current?.scrollToIndex(0);\n        } finally {\n            if (currentPath === currentPathRef.current) {\n                setLoading(false);\n            }\n            clearInterval(intervalId);\n            sync.dispose();\n        }\n    }, [device, currentPath]);\n    useEffect(() => {\n        load();\n    }, [load]);\n\n    const [sortedList, setSortedList] = useState<ListItem[]>([]);\n    const [sortKey, setSortKey] = useState<keyof ListItem>('name');\n    const [sortDescending, setSortDescendent] = useState(false);\n    useEffect(() => {\n        const list = items.slice();\n        list.sort((a, b) => {\n            const aIsFile = a.type === LinuxFileType.File ? 1 : 0;\n            const bIsFile = b.type === LinuxFileType.File ? 1 : 0;\n\n            let result: number;\n            if (aIsFile !== bIsFile) {\n                result = aIsFile - bIsFile;\n            } else {\n                const aSortKey = a[sortKey]!;\n                const bSortKey = b[sortKey]!;\n\n                if (aSortKey === bSortKey) {\n                    result = a.name! < b.name! ? -1 : 1;\n                } else {\n                    result = aSortKey < bSortKey ? -1 : 1;\n                }\n            }\n\n            if (sortDescending) {\n                result *= -1;\n            }\n            return result;\n        });\n        setSortedList(list);\n    }, [items, sortKey, sortDescending]);\n\n    const columns: IColumn[] = useMemo(() => {\n        const list: IColumn[] = [\n            {\n                key: 'type',\n                name: 'File Type',\n                iconName: 'Page',\n                isIconOnly: true,\n                minWidth: 20,\n                maxWidth: 20,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    switch (item.type) {\n                        case LinuxFileType.Link:\n                            return <Icon {...getFileTypeIconProps({ size: 20, type: FileIconType.linkedFolder })} />;\n                        case LinuxFileType.Directory:\n                            return <Icon {...getFileTypeIconProps({ size: 20, type: FileIconType.folder })} />;\n                        case LinuxFileType.File:\n                            return <Icon {...getFileTypeIconProps({ size: 20, extension: extensionName(item.name!) })} />;\n                        default:\n                            return <Icon {...getFileTypeIconProps({ size: 20, extension: 'txt' })} />;\n                    }\n                }\n            },\n            {\n                key: 'name',\n                name: 'Name',\n                minWidth: 0,\n                isRowHeader: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    return (\n                        <span className={classNames.name} data-selection-invoke>\n                            {item.name}\n                        </span>\n                    );\n                }\n            },\n            {\n                key: 'mode',\n                name: 'Mode',\n                minWidth: 0,\n                onRender(item: AdbSyncEntryResponse) {\n                    return `0${(item.mode >> 6 & 0b100).toString(8)}${(item.mode >> 3 & 0b100).toString(8)}${(item.mode & 0b100).toString(8)}`;\n                }\n            },\n            {\n                key: 'logicalSize',\n                name: 'Size',\n                minWidth: 0,\n                onRender(item: AdbSyncEntryResponse) {\n                    if (item.type === LinuxFileType.File) {\n                        return formatSize(item.size);\n                    }\n                    return '';\n                }\n            },\n            {\n                key: 'mtime',\n                name: 'Last Modified Time',\n                minWidth: 150,\n                onRender(item: AdbSyncEntryResponse) {\n                    return new Date(item.mtime * 1000).toLocaleString();\n                },\n            }\n        ];\n\n        for (const item of list) {\n            item.onColumnClick = (e, column) => {\n                if (sortKey === column.key) {\n                    setSortDescendent(!sortDescending);\n                } else {\n                    setSortKey(column.key as keyof ListItem);\n                    setSortDescendent(false);\n                }\n            };\n\n            if (item.key === sortKey) {\n                item.isSorted = true;\n                item.isSortedDescending = sortDescending;\n            }\n        }\n\n        return list;\n    }, [sortKey, sortDescending]);\n\n    const [previewUrl, setPreviewUrl] = useState<string | undefined>();\n    const previewImage = useCallback(async (path: string) => {\n        const sync = await device!.sync();\n        try {\n            const readableStream = createReadableStreamFromBufferIterator(sync.receive(path));\n            const response = new Response(readableStream);\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            setPreviewUrl(url);\n        } finally {\n            sync.dispose();\n        }\n    }, [device]);\n    const hidePreview = useCallback(() => {\n        setPreviewUrl(undefined);\n    }, []);\n\n    const handleItemInvoked = useCallback((item: AdbSyncEntryResponse) => {\n        switch (item.type) {\n            case LinuxFileType.Link:\n            case LinuxFileType.Directory:\n                setCurrentPath(path.resolve(currentPath, item.name!));\n                break;\n            case LinuxFileType.File:\n                switch (extensionName(item.name!)) {\n                    case '.jpg':\n                    case '.png':\n                    case '.svg':\n                    case '.gif':\n                        previewImage(path.resolve(currentPath, item.name!));\n                        break;\n                }\n                break;\n        }\n    }, [currentPath, previewImage]);\n\n    const selection = useConst(() => new Selection());\n\n    const [contextMenuItems, setContextMenuItems] = useState<IContextualMenuItem[]>([]);\n    const [contextMenuTarget, setContextMenuTarget] = useState<MouseEvent>();\n    const showContextMenu = useCallback((\n        item?: AdbSyncEntryResponse,\n        index?: number,\n        e?: Event\n    ) => {\n        if (!e) {\n            return false;\n        }\n\n        const selectedItems = selection.getSelection() as ListItem[];\n\n        let contextMenuItems: IContextualMenuItem[] = [];\n\n        if (selectedItems.length === 1 &&\n            selectedItems[0].type === LinuxFileType.File) {\n            contextMenuItems.push({\n                key: 'download',\n                text: 'Download',\n                onClick() {\n                    (async () => {\n                        const sync = await device!.sync();\n                        try {\n                            const itemPath = path.resolve(currentPath, selectedItems[0].name!);\n                            const readableStream = createReadableStreamFromBufferIterator(sync.receive(itemPath));\n\n                            const writeableStream = StreamSaver.createWriteStream(selectedItems[0].name!, {\n                                size: selectedItems[0].size,\n                            });\n                            await readableStream.pipeTo(writeableStream);\n                        } catch (e) {\n                            showErrorDialog(e.message);\n                        } finally {\n                            sync.dispose();\n                        }\n                    })();\n                    return false;\n                },\n            });\n        }\n\n        contextMenuItems.push({\n            key: 'delete',\n            text: 'Delete',\n            onClick() {\n                (async () => {\n                    try {\n                        for (const item of selectedItems) {\n                            const output = await device!.shell('rm', '-rf', `\"${path.resolve(currentPath, item.name!)}\"`);\n                            if (output) {\n                                showErrorDialog(output);\n                                return;\n                            }\n                        }\n                    } catch (e) {\n                        showErrorDialog(e.message);\n                    } finally {\n                        load();\n                    }\n                })();\n                return false;\n            }\n        });\n\n        if (!contextMenuItems.length) {\n            return false;\n        }\n\n        setContextMenuItems(contextMenuItems);\n        setContextMenuTarget(e as MouseEvent);\n        return false;\n    }, [currentPath, device]);\n    const hideContextMenu = React.useCallback(() => {\n        setContextMenuTarget(undefined);\n    }, []);\n\n    return (\n        <MarqueeSelection selection={selection}>\n            {device && (\n                <StackItem>\n                    <Breadcrumb items={breadcrumbItems} />\n                </StackItem>\n            )}\n\n            <StackItem\n                grow\n                styles={{ root: { minHeight: 0 } }}\n            >\n                <ShimmeredDetailsList\n                    componentRef={listRef}\n                    items={sortedList}\n                    columns={columns}\n                    setKey={currentPath}\n                    selection={selection}\n                    layoutMode={DetailsListLayoutMode.justified}\n                    enableShimmer={loading && items.length === 0}\n                    onItemInvoked={handleItemInvoked}\n                    onItemContextMenu={showContextMenu}\n                    onRenderDetailsHeader={renderDetailsHeader}\n                    usePageCache\n                />\n            </StackItem>\n\n            {previewUrl && (\n                <Layer>\n                    <Overlay onClick={hidePreview}>\n                        <div style={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                            <img src={previewUrl} style={{ maxWidth: '100%', maxHeight: '100%' }} />\n                        </div>\n                    </Overlay>\n                </Layer>\n            )}\n\n            <ContextualMenu\n                items={contextMenuItems}\n                hidden={!contextMenuTarget}\n                directionalHint={DirectionalHint.bottomLeftEdge}\n                target={contextMenuTarget}\n                onDismiss={hideContextMenu}\n            />\n        </MarqueeSelection>\n    );\n});\n","import React, { useEffect, useRef } from 'react';\nimport { withDisplayName } from '../utils';\nimport { RouteProps } from './type';\n\nexport default withDisplayName('FrameBuffer', ({\n    device\n}: RouteProps): JSX.Element | null => {\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n    useEffect(() => {\n        if (!device) {\n            return;\n        }\n\n        let running = true;\n        let timeoutId: any;\n\n        async function capture() {\n            const start = window.performance.now();\n            const framebuffer = await device!.framebuffer();\n            const end = window.performance.now();\n            console.log('time', end - start);\n\n            const { width, height } = framebuffer;\n\n            const canvas = canvasRef.current;\n            if (!canvas) {\n                return;\n            }\n\n            canvas.width = width;\n            canvas.height = height;\n\n            const context = canvas.getContext(\"2d\")!;\n            const image = new ImageData(new Uint8ClampedArray(framebuffer.data!), width, height);\n            context.putImageData(image, 0, 0);\n\n            if (running) {\n                timeoutId = setTimeout(capture, 16);\n            }\n        }\n\n        capture();\n\n        return () => {\n            running = false;\n            clearTimeout(timeoutId);\n        };\n    }, [device]);\n\n    return (\n        <>\n            <canvas ref={canvasRef} style={{ maxWidth: '100%' }} />\n        </>\n    );\n});\n","import { Callout, DirectionalHint, Link, mergeStyleSets, Text } from '@fluentui/react';\nimport { useBoolean } from '@uifabric/react-hooks';\nimport React, { useCallback, useRef } from 'react';\nimport { withDisplayName } from '../utils';\n\nconst classNames = mergeStyleSets({\n    callout: {\n        padding: '8px 12px',\n    },\n});\n\ninterface CopyLinkProps {\n    href: string;\n}\n\nconst CopyLink = withDisplayName('CopyLink', ({\n    href,\n}: CopyLinkProps) => {\n    const calloutTarget = useRef<HTMLButtonElement | null>(null);\n    const [calloutVisible, { setTrue: showCallout, setFalse: hideCallout }] = useBoolean(false);\n    const copyLink = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n        navigator.clipboard.writeText(href);\n        calloutTarget.current = e.target as HTMLButtonElement;\n        showCallout();\n        setTimeout(hideCallout, 3000);\n    }, [href]);\n\n    return (\n        <>\n            <Link onClick={copyLink}>{href}</Link>\n            <Callout\n                directionalHint={DirectionalHint.topCenter}\n                hidden={!calloutVisible}\n                target={calloutTarget}\n                onDismiss={hideCallout}\n            >\n                <div className={classNames.callout}>\n                    Link copied. Open a new tab and paste into address bar.\n                </div>\n            </Callout>\n        </>\n    );\n});\n\nexport default withDisplayName('Intro', () => {\n    return (\n        <>\n            <Text block>\n                This page is a demo of my {' '}\n                <Link href=\"https://github.com/yume-chan/ya-webadb/\" target=\"_blank\">WebADB</Link>{' '}\n                library, which can connect to your Android devices with the {' '}\n                <Link href=\"https://developer.mozilla.org/en-US/docs/Web/API/USB\" target=\"_blank\">WebUSB</Link>{' '}\n                API.\n            </Text>\n            <Text block>\n                The latest version of Google Chrome (or Microsoft Edge) is recommended for best compatibility.\n            </Text>\n\n            <Text block styles={{ root: { fontWeight: '600' } }}>\n                Windows user?\n            </Text>\n            <Text block>\n                The experimental new backend is required. Enable from  {' '}\n                <CopyLink href=\"chrome://flags/#new-usb-backend\" />\n                .\n            </Text>\n\n            <Text block styles={{ root: { fontWeight: '600' } }}>\n                Got \"Unable to claim interface\" error?\n            </Text>\n            <Text block>\n                Only one software can connect to your device at a time.<br />\n                1. Make sure ADB server is not running (run `adb kill-server` to stop it).<br />\n                2. Make sure no other Android management tools are running\n            </Text>\n            <Text block styles={{ root: { fontWeight: '600' } }}>\n                Got \"Access denied\" error?\n            </Text>\n            <Text block>\n                If you have a Samsung device, it's caused by the custom driver. See {' '}\n                <Link href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1127206\">\n                    https://bugs.chromium.org/p/chromium/issues/detail?id=1127206\n                </Link>\n            </Text>\n            <Text block styles={{ root: { fontWeight: '600' } }}>\n                Can I connect my device wirelessly (ADB over WiFi)?\n            </Text>\n            <Text block>\n                No. Web browsers doesn't support TCP connections.<br />\n                Or maybe, with {' '}\n                <Link href=\"https://github.com/novnc/websockify\">websockify</Link>{' '}\n                running on your device and a WebSocket backend for WebADB.\n            </Text>\n        </>\n    );\n});\n","import { IconButton, SearchBox, Stack, StackItem } from '@fluentui/react';\nimport { encodeUtf8 } from '@yume-chan/adb-backend-web';\nimport React, { CSSProperties, useCallback, useEffect, useRef, useState } from 'react';\nimport { Terminal } from 'xterm';\nimport { FitAddon } from 'xterm-addon-fit';\nimport { SearchAddon } from 'xterm-addon-search';\nimport 'xterm/css/xterm.css';\nimport { ResizeObserver, withDisplayName } from '../utils';\nimport { RouteProps } from './type';\n\nconst containerStyle: CSSProperties = {\n    width: '100%',\n    height: '100%',\n};\n\nexport default withDisplayName('Shell', ({\n    device,\n}: RouteProps): JSX.Element | null => {\n    const [findKeyword, setFindKeyword] = useState('');\n    const findAddonRef = useRef<SearchAddon>();\n    const handleFindKeywordChange = useCallback((e, newValue?: string) => {\n        setFindKeyword(newValue ?? '');\n        if (newValue) {\n            findAddonRef.current!.findNext(newValue, { incremental: true });\n        }\n    }, []);\n    const findPrevious = useCallback(() => {\n        findAddonRef.current!.findPrevious(findKeyword);\n    }, [findKeyword]);\n    const findNext = useCallback(() => {\n        findAddonRef.current!.findNext(findKeyword);\n    }, [findKeyword]);\n\n    const [terminal, setTerminal] = useState<Terminal>();\n    const fitAddonRef = useRef<FitAddon>();\n    const handleContainerRef = useCallback((element: HTMLDivElement | null) => {\n        if (!element) {\n            return;\n        }\n\n        const terminal = new Terminal({\n            scrollback: 9001,\n        });\n\n        const findAddon = new SearchAddon();\n        findAddonRef.current = findAddon;\n        terminal.loadAddon(findAddon);\n\n        const fitAddon = new FitAddon();\n        fitAddonRef.current = fitAddon;\n        terminal.loadAddon(fitAddon);\n\n        setTerminal(terminal);\n        terminal.open(element);\n        fitAddon.fit();\n    }, []);\n    useEffect(() => {\n        return () => terminal?.dispose();\n    }, []);\n\n    useEffect(() => {\n        if (!device || !terminal) {\n            return;\n        }\n\n        (async () => {\n            const shell = await device.shell();\n            terminal.onData(data => {\n                const buffer = encodeUtf8(data);\n                shell.write(buffer);\n            });\n            shell.onData(data => {\n                terminal.write(new Uint8Array(data));\n            });\n        })();\n\n        return () => {\n            terminal.reset();\n            terminal.clear();\n        };\n    }, [device, terminal]);\n\n    const handleResize = useCallback(() => {\n        fitAddonRef.current?.fit();\n    }, []);\n\n    return (\n        <>\n            <StackItem>\n                <Stack horizontal>\n                    <StackItem grow>\n                        <SearchBox\n                            placeholder=\"Find\"\n                            value={findKeyword}\n                            onChange={handleFindKeywordChange}\n                            onSearch={findNext}\n                        />\n                    </StackItem>\n                    <StackItem>\n                        <IconButton\n                            disabled={!findKeyword}\n                            iconProps={{ iconName: 'ChevronUp' }}\n                            onClick={findPrevious}\n                        />\n                    </StackItem>\n                    <StackItem>\n                        <IconButton\n                            disabled={!findKeyword}\n                            iconProps={{ iconName: 'ChevronDown' }}\n                            onClick={findNext}\n                        />\n                    </StackItem>\n                </Stack>\n            </StackItem>\n            <StackItem grow styles={{ root: { minHeight: 0 } }}>\n                <ResizeObserver style={containerStyle} onResize={handleResize}>\n                    <div ref={handleContainerRef} style={{ height: '100%' }} />\n                </ResizeObserver>\n            </StackItem>\n        </>\n    );\n});\n","import { Label, MessageBar, PrimaryButton, Stack, StackItem, Text, TextField } from '@fluentui/react';\nimport { useId } from '@uifabric/react-hooks';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { withDisplayName } from '../utils';\nimport { RouteProps } from './type';\n\nexport default withDisplayName('TcpIp', ({\n    device\n}: RouteProps): JSX.Element | null => {\n    const [tcpPort, setTcpAddresses] = useState<string[] | undefined>();\n    useEffect(() => {\n        if (!device) {\n            setTcpAddresses(undefined);\n        }\n    }, [device]);\n\n    const queryTcpAddress = useCallback(async () => {\n        if (!device) {\n            return;\n        }\n\n        const result = await device.getDaemonTcpAddresses();\n        setTcpAddresses(result);\n    }, [device]);\n\n    const [tcpPortValue, setTcpPortValue] = useState('5555');\n    const tcpPortInputId = useId('tcpPort');\n    const enableTcp = useCallback(async () => {\n        if (!device) {\n            return;\n        }\n\n        const result = await device.setDaemonTcpPort(Number.parseInt(tcpPortValue, 10));\n        console.log(result);\n    }, [device, tcpPortValue]);\n\n    const disableTcp = useCallback(async () => {\n        if (!device) {\n            return;\n        }\n\n        const result = await device.disableDaemonTcp();\n        console.log(result);\n    }, [device]);\n\n    return (\n        <>\n            <StackItem>\n                <MessageBar>\n                    <Text>Although WebADB can enable ADB over WiFi for you, it can't connect to your device wirelessly.</Text>\n                </MessageBar>\n            </StackItem>\n            <StackItem>\n                <MessageBar >\n                    <Text>Your device will disconnect after changing ADB over WiFi config.</Text>\n                </MessageBar>\n            </StackItem>\n            <Stack horizontal verticalAlign=\"center\" tokens={{ childrenGap: 8 }}>\n                <StackItem>\n                    <PrimaryButton text=\"Update Status\" disabled={!device} onClick={queryTcpAddress} />\n                </StackItem>\n                <StackItem>\n                    {tcpPort !== undefined &&\n                        (tcpPort.length !== 0\n                            ? `Enabled at ${tcpPort.join(', ')}`\n                            : 'Disabled')}\n                </StackItem>\n            </Stack>\n            <Stack horizontal verticalAlign=\"center\" tokens={{ childrenGap: 8 }}>\n                <StackItem>\n                    <Label htmlFor={tcpPortInputId}>Port: </Label>\n                </StackItem>\n                <StackItem>\n                    <TextField\n                        id={tcpPortInputId}\n                        width={300}\n                        disabled={!device}\n                        value={tcpPortValue}\n                        onChange={(e, value) => setTcpPortValue(value!)}\n                    />\n                </StackItem>\n                <StackItem>\n                    <PrimaryButton\n                        text=\"Enable\"\n                        disabled={!device}\n                        onClick={enableTcp}\n                    />\n                </StackItem>\n            </Stack>\n            <StackItem>\n                <PrimaryButton\n                    text=\"Disable\"\n                    disabled={!device || tcpPort === undefined || tcpPort.length === 0}\n                    onClick={disableTcp}\n                />\n            </StackItem>\n        </>\n    );\n});\n","import { Nav, Separator, Stack, StackItem, Text } from '@fluentui/react';\nimport { initializeIcons } from '@uifabric/icons';\nimport { Adb } from '@yume-chan/adb';\nimport React, { useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Redirect, useLocation } from 'react-router-dom';\nimport Connect from './connect';\nimport ErrorDialogProvider from './error-dialog';\nimport './index.css';\nimport { CacheRoute, CacheSwitch } from './router';\nimport FileManager from './routes/file-manager';\nimport FrameBuffer from './routes/framebuffer';\nimport Intro from './routes/intro';\nimport Shell from './routes/shell';\nimport TcpIp from './routes/tcp-ip';\n\ninitializeIcons();\n\ninterface RouteInfo {\n    path: string;\n\n    exact?: boolean;\n\n    name: string;\n\n    children: JSX.Element | null;\n\n    noCache?: boolean;\n}\n\nfunction App(): JSX.Element | null {\n    const location = useLocation();\n\n    const [device, setDevice] = useState<Adb | undefined>();\n\n    const routes = useMemo((): RouteInfo[] => [\n        {\n            path: '/',\n            exact: true,\n            name: 'Introduction',\n            children: (\n                <Intro />\n            )\n        },\n        {\n            path: '/device-info',\n            name: 'Device Info',\n            children: (\n                <>\n                    <StackItem>\n                        Product: {device?.product}\n                    </StackItem>\n                    <StackItem>\n                        Model: {device?.model}\n                    </StackItem>\n                    <StackItem>\n                        Device: {device?.device}\n                    </StackItem>\n                    <StackItem>\n                        Features: {device?.features?.join(',')}\n                    </StackItem>\n                </>\n            )\n        },\n        {\n            path: '/adb-over-wifi',\n            name: 'ADB over WiFi',\n            children: (\n                <TcpIp device={device} />\n            )\n        },\n        {\n            path: '/shell',\n            name: 'Interactive Shell',\n            children: (\n                <Shell device={device} />\n            ),\n        },\n        {\n            path: '/file-manager',\n            name: 'File Manager',\n            children: (\n                <FileManager device={device} />\n            ),\n        },\n        {\n            path: '/framebuffer',\n            name: 'Screen Capture',\n            noCache: true,\n            children: (\n                <FrameBuffer device={device} />\n            ),\n        },\n    ], [device]);\n\n    return (\n        <Stack verticalFill>\n            <StackItem tokens={{ padding: 8 }}>\n                <Text variant=\"xxLarge\">WebADB Demo</Text>\n            </StackItem>\n            <StackItem>\n                <Connect device={device} onDeviceChange={setDevice} />\n            </StackItem>\n            <StackItem>\n                <Separator />\n            </StackItem>\n            <StackItem grow styles={{ root: { minHeight: 0 } }}>\n                <Stack horizontal verticalFill tokens={{ childrenGap: 8 }}>\n                    <StackItem>\n                        <Nav\n                            styles={{ root: { width: 250 } }}\n                            groups={[{\n                                links: routes.map(route => ({\n                                    key: route.path,\n                                    name: route.name,\n                                    url: `#${route.path}`,\n                                })),\n                            }]}\n                            selectedKey={location.pathname}\n                        />\n                    </StackItem>\n                    <StackItem grow styles={{ root: { minHeight: 0, overflow: 'hidden' } }}>\n                        <CacheSwitch>\n                            {routes.map<React.ReactElement>(route => (\n                                <CacheRoute\n                                    exact={route.exact}\n                                    path={route.path}\n                                    noCache={route.noCache}>\n                                    {route.children}\n                                </CacheRoute>\n                            ))}\n\n                            <Redirect to=\"/\" />\n                        </CacheSwitch>\n                    </StackItem>\n                </Stack>\n            </StackItem>\n        </Stack>\n    );\n}\n\nReactDOM.render(\n    <HashRouter>\n        <ErrorDialogProvider>\n            <App />\n        </ErrorDialogProvider>\n    </HashRouter>,\n    document.getElementById('container')\n);\n"],"sourceRoot":""}