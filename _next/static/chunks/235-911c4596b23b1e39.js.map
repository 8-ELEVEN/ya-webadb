{"version":3,"file":"static/chunks/235-911c4596b23b1e39.js","mappings":"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","sources":["webpack://_N_E/../../libraries/b-tree/src/index.ts","webpack://_N_E/./src/pages/packet-log.tsx","webpack://_N_E/<anon>"],"sourcesContent":["interface BTreeInsertionResult {\n    key: number;\n    child: BTreeNode;\n}\n\nfunction insert(\n    array: Int32Array,\n    length: number,\n    value: number,\n    index: number\n) {\n    if (index !== length) {\n        array.set(array.subarray(index, length), index + 1);\n    }\n    array[index] = value;\n}\n\nfunction remove(array: Int32Array, length: number, index: number) {\n    if (index < length - 1) {\n        array.set(array.subarray(index + 1, length), index);\n    }\n}\n\nexport class BTreeNode {\n    order: number;\n    mid: number;\n    minKeyCount: number;\n\n    keys: Int32Array;\n    keyCount: number;\n\n    height: number;\n    children: BTreeNode[];\n\n    public constructor(\n        order: number,\n        keys: Int32Array,\n        keyCount: number,\n        height: number,\n        children: BTreeNode[]\n    ) {\n        this.order = order;\n        this.mid = this.order >> 1;\n        // Math.ceil(order / 2) - 1\n        this.minKeyCount = ((this.order + 1) >> 1) - 1;\n\n        this.keys = keys;\n        this.keyCount = keyCount;\n\n        this.height = height;\n        this.children = children;\n    }\n\n    /**\n     * Split the current node into two\n     * @param value The key to be inserted.\n     * @param index The index of the key to be inserted at.\n     * @param child The child (right to the key) to be inserted. May be undefined when current node is a leaf.\n     * @returns The new key and child need to be inserted to its parent.\n     * The new key is the middle key of the current node, and the child contains the right half of the current node.\n     */\n    protected split(\n        value: number,\n        index: number,\n        child?: BTreeNode\n    ): BTreeInsertionResult {\n        let middleKey: number;\n        const rightKeys = new Int32Array(this.order - 1);\n        let rightChildren: BTreeNode[];\n\n        if (index < this.mid) {\n            middleKey = this.keys[this.mid - 1]!;\n            rightKeys.set(this.keys.subarray(this.mid), 0);\n\n            insert(this.keys, this.mid - 1, value, index);\n\n            if (child) {\n                // internal node\n                rightChildren = this.children.splice(\n                    this.mid,\n                    this.order - this.mid\n                );\n                // TODO: this may cause the underlying array to grow (re-alloc and copy)\n                // investigate if this hurts performance.\n                this.children.splice(index + 1, 0, child);\n            } else {\n                // leaf node, doesn't have children, create am empty array for it.\n                rightChildren = new Array<BTreeNode>(this.order);\n            }\n        } else {\n            if (index === this.mid) {\n                middleKey = value;\n                rightKeys.set(this.keys.subarray(this.mid), 0);\n            } else {\n                middleKey = this.keys[this.mid]!;\n                if (index !== this.mid + 1) {\n                    rightKeys.set(this.keys.subarray(this.mid + 1, index), 0);\n                }\n                rightKeys[index - this.mid - 1] = value;\n                rightKeys.set(this.keys.subarray(index), index - this.mid);\n            }\n\n            if (child) {\n                rightChildren = this.children.splice(\n                    this.mid + 1,\n                    this.order - this.mid - 1\n                );\n                rightChildren.splice(index - this.mid, 0, child);\n            } else {\n                rightChildren = new Array<BTreeNode>(this.order);\n            }\n        }\n\n        this.keyCount = this.mid;\n        return {\n            key: middleKey,\n            child: new BTreeNode(\n                this.order,\n                rightKeys,\n                this.order - 1 - this.mid,\n                this.height,\n                rightChildren\n            ),\n        };\n    }\n\n    public search(value: number): number {\n        let start = 0;\n        let end = this.keyCount - 1;\n        while (start <= end) {\n            const mid = (start + end) >> 1;\n            if (this.keys[mid] === value) {\n                return mid;\n            } else if (this.keys[mid]! < value) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return ~start;\n    }\n\n    public has(value: number): boolean {\n        let index = this.search(value);\n        if (index >= 0) {\n            return true;\n        }\n        if (this.height > 0) {\n            index = ~index;\n            return this.children[index]!.has(value);\n        }\n        return false;\n    }\n\n    public add(value: number): BTreeInsertionResult | boolean {\n        let index = this.search(value);\n        if (index >= 0) {\n            return false;\n        }\n\n        index = ~index;\n\n        if (this.height === 0) {\n            if (this.keyCount === this.order - 1) {\n                return this.split(value, index);\n            }\n\n            insert(this.keys, this.keyCount, value, index);\n            this.keyCount += 1;\n            return true;\n        }\n\n        const split = this.children[index]!.add(value);\n        if (typeof split === \"object\") {\n            if (this.keyCount === this.order - 1) {\n                return this.split(split.key, index, split.child);\n            }\n\n            insert(this.keys, this.keyCount, split.key, index);\n            this.keyCount += 1;\n\n            this.children.splice(index + 1, 0, split.child);\n        }\n\n        return true;\n    }\n\n    public delete(value: number): boolean {\n        let index = this.search(value);\n        if (index >= 0) {\n            this.deleteAt(index);\n            return true;\n        }\n\n        if (this.height > 0) {\n            index = ~index;\n            const deleted = this.children[index]!.delete(value);\n            if (deleted) {\n                this.balance(index);\n            }\n            return deleted;\n        }\n\n        return false;\n    }\n\n    public max(): number {\n        if (this.height === 0) {\n            return this.keys[this.keyCount - 1]!;\n        }\n        return this.children[this.keyCount]!.max();\n    }\n\n    protected balance(index: number) {\n        const child = this.children[index]!;\n\n        if (child.keyCount >= this.minKeyCount) {\n            return;\n        }\n\n        if (index > 0) {\n            const left = this.children[index - 1]!;\n            if (left.keyCount > this.minKeyCount) {\n                // rotate right\n                insert(child.keys, child.keyCount, this.keys[index - 1]!, 0);\n                if (this.height > 1) {\n                    child.children.splice(0, 0, left.children[left.keyCount]!);\n                }\n                child.keyCount += 1;\n\n                this.keys[index - 1] = left.keys[left.keyCount - 1]!;\n                left.keyCount -= 1;\n                return;\n            }\n\n            // merge with left\n            left.keys[left.keyCount] = this.keys[index - 1]!;\n            left.keyCount += 1;\n            left.keys.set(\n                child.keys.subarray(0, child.keyCount),\n                left.keyCount\n            );\n            if (this.height > 1) {\n                for (let i = 0; i <= child.keyCount; i += 1) {\n                    left.children[left.keyCount + i] = child.children[i]!;\n                }\n            }\n            left.keyCount += child.keyCount;\n            remove(this.keys, this.keyCount, index - 1);\n            this.children.splice(index, 1);\n            this.keyCount -= 1;\n            return;\n        }\n\n        const right = this.children[index + 1]!;\n        if (right.keyCount > this.minKeyCount) {\n            // rotate left\n            child.keys[child.keyCount] = this.keys[index]!;\n            if (this.height > 1) {\n                child.children[child.keyCount + 1] = right.children.splice(\n                    0,\n                    1\n                )[0]!;\n            }\n            child.keyCount += 1;\n\n            this.keys[index] = right.keys[0]!;\n\n            remove(right.keys, right.keyCount, 0);\n            right.keyCount -= 1;\n            return;\n        }\n\n        // merge right into child\n        child.keys[child.keyCount] = this.keys[index]!;\n        child.keyCount += 1;\n        child.keys.set(right.keys.subarray(0, right.keyCount), child.keyCount);\n        if (this.height > 1) {\n            for (let i = 0; i <= right.keyCount; i += 1) {\n                child.children[child.keyCount + i] = right.children[i]!;\n            }\n        }\n        child.keyCount += right.keyCount;\n        remove(this.keys, this.keyCount, index);\n        this.children.splice(index + 1, 1);\n        this.keyCount -= 1;\n    }\n\n    protected deleteMax(): void {\n        if (this.height === 0) {\n            this.keyCount -= 1;\n            return;\n        }\n\n        const child = this.children[this.keyCount]!;\n        child.deleteMax();\n        this.balance(this.keyCount);\n    }\n\n    protected deleteAt(index: number) {\n        if (this.height === 0) {\n            remove(this.keys, this.keyCount, index);\n            this.keyCount -= 1;\n            return;\n        }\n\n        const max = this.children[index]!.max();\n        this.keys[index] = max;\n        this.children[index]!.deleteMax();\n        this.balance(index);\n    }\n\n    public *[Symbol.iterator](): Generator<number, void, void> {\n        if (this.height > 0) {\n            for (let i = 0; i < this.keyCount; i += 1) {\n                yield* this.children[i]!;\n                yield this.keys[i]!;\n            }\n            yield* this.children[this.keyCount]!;\n        } else {\n            for (let i = 0; i < this.keyCount; i += 1) {\n                yield this.keys[i]!;\n            }\n        }\n    }\n}\n\nexport class BTree {\n    order: number;\n    root: BTreeNode;\n\n    size = 0;\n\n    public constructor(order: number) {\n        this.order = order;\n        this.root = new BTreeNode(\n            order,\n            new Int32Array(order - 1),\n            0,\n            0,\n            new Array<BTreeNode>(order)\n        );\n    }\n\n    public has(value: number) {\n        // TODO(btree): benchmark this non-recursive version\n        let node = this.root;\n        while (true) {\n            const index = node.search(value);\n            if (index >= 0) {\n                return true;\n            }\n\n            node = node.children[~index]!;\n            if (!node) {\n                return false;\n            }\n        }\n    }\n\n    public add(value: number) {\n        const split = this.root.add(value);\n        if (typeof split === \"object\") {\n            const keys = new Int32Array(this.order - 1);\n            keys[0] = split.key;\n\n            const children = new Array<BTreeNode>(this.order);\n            children[0] = this.root;\n            children[1] = split.child;\n\n            this.root = new BTreeNode(\n                this.order,\n                keys,\n                1,\n                this.root.height + 1,\n                children\n            );\n        }\n        if (split) {\n            this.size += 1;\n        }\n        return !!split;\n    }\n\n    public delete(value: number) {\n        const deleted = this.root.delete(value);\n        if (deleted) {\n            if (this.root.height > 0 && this.root.keyCount === 0) {\n                this.root = this.root.children[0]!;\n            }\n            this.size -= 1;\n        }\n        return deleted;\n    }\n\n    public clear() {\n        this.root.keyCount = 0;\n        this.root.height = 0;\n        // immediately release all references\n        this.root.children = new Array<BTreeNode>(this.order);\n        this.size = 0;\n    }\n\n    public [Symbol.iterator]() {\n        return this.root[Symbol.iterator]();\n    }\n}\n","import { ICommandBarItemProps, Stack, StackItem } from \"@fluentui/react\";\nimport { makeStyles, mergeClasses, shorthands } from \"@griffel/react\";\nimport { AdbCommand, decodeUtf8 } from \"@yume-chan/adb\";\nimport { BTree, BTreeNode } from \"@yume-chan/b-tree\";\nimport {\n    IAtom,\n    IObservableValue,\n    action,\n    autorun,\n    createAtom,\n    makeAutoObservable,\n    observable,\n    onBecomeUnobserved,\n    runInAction,\n} from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { PointerEvent } from \"react\";\nimport {\n    CommandBar,\n    Grid,\n    GridCellProps,\n    GridColumn,\n    GridHeaderProps,\n    GridRowProps,\n    HexViewer,\n    toText,\n} from \"../components\";\nimport { GLOBAL_STATE } from \"../state\";\nimport {\n    Icons,\n    RouteStackProps,\n    useStableCallback,\n    withDisplayName,\n} from \"../utils\";\n\nexport class ObservableBTree implements BTree {\n    data: BTree;\n    hasMap: Map<number, IObservableValue<boolean>>;\n    keys: IAtom;\n\n    constructor(order: number) {\n        this.data = new BTree(order);\n        this.hasMap = new Map();\n        this.keys = createAtom(\"ObservableBTree.keys\");\n    }\n\n    get order(): number {\n        return this.data.order;\n    }\n\n    get root(): BTreeNode {\n        return this.data.root;\n    }\n\n    get size(): number {\n        this.keys.reportObserved();\n        return this.data.size;\n    }\n\n    has(value: number): boolean {\n        if (!this.hasMap.has(value)) {\n            const observableHasValue = observable.box(this.data.has(value));\n            onBecomeUnobserved(observableHasValue, () =>\n                this.hasMap.delete(value)\n            );\n            this.hasMap.set(value, observableHasValue);\n        }\n        return this.hasMap.get(value)!.get();\n    }\n\n    add(value: number): boolean {\n        if (this.data.add(value)) {\n            this.hasMap.get(value)?.set(true);\n            this.keys.reportChanged();\n            return true;\n        }\n        return false;\n    }\n\n    delete(value: number): boolean {\n        if (this.data.delete(value)) {\n            this.hasMap.get(value)?.set(false);\n            this.keys.reportChanged();\n            return true;\n        }\n        return false;\n    }\n\n    clear(): void {\n        if (this.data.size === 0) {\n            return;\n        }\n        this.data.clear();\n        for (const entry of this.hasMap) {\n            entry[1].set(false);\n        }\n        this.keys.reportChanged();\n    }\n\n    [Symbol.iterator](): Generator<number, void, void> {\n        this.keys.reportObserved();\n        return this.data[Symbol.iterator]();\n    }\n}\n\nexport class ObservableListSelection {\n    selected = new ObservableBTree(6);\n    rangeStart = 0;\n    selectedIndex: number | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get size() {\n        return this.selected.size;\n    }\n\n    has(index: number) {\n        return this.selected.has(index);\n    }\n\n    select(index: number, ctrlKey: boolean, shiftKey: boolean) {\n        if (this.rangeStart !== null && shiftKey) {\n            if (!ctrlKey) {\n                this.selected.clear();\n            }\n\n            let [start, end] = [this.rangeStart, index];\n            if (start > end) {\n                [start, end] = [end, start];\n            }\n            for (let i = start; i <= end; i += 1) {\n                this.selected.add(i);\n            }\n            this.selectedIndex = index;\n            return;\n        }\n\n        if (ctrlKey) {\n            if (this.selected.has(index)) {\n                this.selected.delete(index);\n                this.selectedIndex = null;\n            } else {\n                this.selected.add(index);\n                this.selectedIndex = index;\n            }\n            this.rangeStart = index;\n            return;\n        }\n\n        this.selected.clear();\n        this.selected.add(index);\n        this.rangeStart = index;\n        this.selectedIndex = index;\n    }\n\n    clear() {\n        this.selected.clear();\n        this.rangeStart = 0;\n        this.selectedIndex = null;\n    }\n\n    [Symbol.iterator]() {\n        return this.selected[Symbol.iterator]();\n    }\n}\n\nconst ADB_COMMAND_NAME = {\n    [AdbCommand.Auth]: \"AUTH\",\n    [AdbCommand.Close]: \"CLSE\",\n    [AdbCommand.Connect]: \"CNXN\",\n    [AdbCommand.OK]: \"OKAY\",\n    [AdbCommand.Open]: \"OPEN\",\n    [AdbCommand.Write]: \"WRTE\",\n};\n\ninterface Column extends GridColumn {\n    title: string;\n}\n\nconst LINE_HEIGHT = 32;\n\nfunction uint8ArrayToHexString(array: Uint8Array) {\n    return Array.from(array)\n        .map((byte) => byte.toString(16).padStart(2, \"0\"))\n        .join(\" \");\n}\n\nconst state = new (class {\n    get empty() {\n        return !GLOBAL_STATE.logs.length;\n    }\n\n    get commandBarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: \"clear\",\n                disabled: this.empty,\n                iconProps: { iconName: Icons.Delete },\n                text: \"Clear\",\n                onClick: action(() => GLOBAL_STATE.clearLog()),\n            },\n            {\n                key: \"select-all\",\n                disabled: this.empty,\n                iconProps: { iconName: Icons.Wand },\n                text: \"Select All\",\n                onClick: action(() => {\n                    this.selection.clear();\n                    this.selection.select(\n                        GLOBAL_STATE.logs.length - 1,\n                        false,\n                        true\n                    );\n                }),\n            },\n            {\n                key: \"copy\",\n                disabled: this.selection.size === 0,\n                iconProps: { iconName: Icons.Copy },\n                text: \"Copy\",\n                onClick: () => {\n                    let text = \"\";\n                    for (const index of this.selection) {\n                        const entry = GLOBAL_STATE.logs[index];\n                        // prettier-ignore\n                        text += `${\n                            entry.timestamp!.toISOString()\n                        }\\t${\n                            entry.direction === 'in' ? \"IN\" : \"OUT\"\n                        }\\t${\n                            ADB_COMMAND_NAME[entry.command as keyof typeof ADB_COMMAND_NAME]\n                        }\\t${\n                            entry.arg0.toString(16).padStart(8,'0')\n                        }\\t${\n                            entry.arg1.toString(16).padStart(8,'0')\n                        }\\t${\n                            uint8ArrayToHexString(entry.payload)\n                        }\\n`;\n                    }\n                    navigator.clipboard.writeText(text);\n                },\n            },\n        ];\n    }\n\n    selection = new ObservableListSelection();\n\n    constructor() {\n        makeAutoObservable(this, {});\n\n        autorun(() => {\n            if (GLOBAL_STATE.logs.length === 0) {\n                runInAction(() => this.selection.clear());\n            }\n        });\n    }\n})();\n\nconst useClasses = makeStyles({\n    grow: {\n        height: 0,\n    },\n    grid: {\n        height: \"100%\",\n    },\n    header: {\n        textAlign: \"center\",\n        lineHeight: `${LINE_HEIGHT}px`,\n    },\n    row: {\n        \"&:hover\": {\n            backgroundColor: \"#f3f2f1\",\n        },\n    },\n    selected: {\n        backgroundColor: \"#edebe9\",\n    },\n    code: {\n        fontFamily: \"monospace\",\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\",\n        lineHeight: LINE_HEIGHT + \"px\",\n        cursor: \"default\",\n        ...shorthands.overflow(\"hidden\"),\n    },\n    hexViewer: {\n        ...shorthands.padding(\"12px\"),\n        ...shorthands.borderTop(\"1px\", \"solid\", \"rgb(243, 242, 241)\"),\n    },\n});\n\nconst columns: Column[] = [\n    {\n        title: \"Direction\",\n        width: 100,\n        CellComponent: withDisplayName(\"Direction\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.direction}\n                    </div>\n                );\n            }\n        ),\n    },\n    {\n        title: \"Command\",\n        width: 100,\n        CellComponent: withDisplayName(\"Command\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                if (!item.commandString) {\n                    item.commandString =\n                        ADB_COMMAND_NAME[item.command as AdbCommand] ??\n                        decodeUtf8(new Uint32Array([item.command]));\n                }\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.commandString}\n                    </div>\n                );\n            }\n        ),\n    },\n    {\n        title: \"Arg0\",\n        width: 100,\n        CellComponent: withDisplayName(\"Command\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                if (!item.arg0String) {\n                    item.arg0String = item.arg0.toString(16).padStart(8, \"0\");\n                }\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.arg0String}\n                    </div>\n                );\n            }\n        ),\n    },\n    {\n        title: \"Arg1\",\n        width: 100,\n        CellComponent: withDisplayName(\"Command\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                if (!item.arg1String) {\n                    item.arg1String = item.arg1.toString(16).padStart(8, \"0\");\n                }\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.arg1String}\n                    </div>\n                );\n            }\n        ),\n    },\n    {\n        title: \"Payload\",\n        width: 200,\n        flexGrow: 1,\n        CellComponent: withDisplayName(\"Command\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                if (!item.payloadString) {\n                    item.payloadString = toText(item.payload.subarray(0, 100));\n                }\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.payloadString}\n                    </div>\n                );\n            }\n        ),\n    },\n];\n\nconst Header = withDisplayName(\"Header\")(\n    ({ className, columnIndex, ...rest }: GridHeaderProps) => {\n        const classes = useClasses();\n\n        return (\n            <div className={mergeClasses(className, classes.header)} {...rest}>\n                {columns[columnIndex].title}\n            </div>\n        );\n    }\n);\n\nconst Row = observer(function Row({\n    className,\n    rowIndex,\n    ...rest\n}: GridRowProps) {\n    const classes = useClasses();\n\n    const handlePointerDown = useStableCallback(\n        (e: PointerEvent<HTMLDivElement>) => {\n            runInAction(() => {\n                e.preventDefault();\n                e.stopPropagation();\n                state.selection.select(rowIndex, e.ctrlKey, e.shiftKey);\n            });\n        }\n    );\n\n    return (\n        <div\n            className={mergeClasses(\n                className,\n                classes.row,\n                state.selection.has(rowIndex) && classes.selected\n            )}\n            onPointerDown={handlePointerDown}\n            {...rest}\n        />\n    );\n});\n\nconst PacketLog: NextPage = () => {\n    const classes = useClasses();\n\n    return (\n        <Stack {...RouteStackProps} tokens={{}}>\n            <Head>\n                <title>Packet Log - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} />\n\n            <StackItem className={classes.grow} grow>\n                <Grid\n                    className={classes.grid}\n                    rowCount={GLOBAL_STATE.logs.length}\n                    rowHeight={LINE_HEIGHT}\n                    columns={columns}\n                    HeaderComponent={Header}\n                    RowComponent={Row}\n                />\n            </StackItem>\n\n            {state.selection.selectedIndex !== null &&\n                GLOBAL_STATE.logs[state.selection.selectedIndex].payload\n                    .length > 0 && (\n                    <StackItem className={classes.grow} grow>\n                        <HexViewer\n                            className={classes.hexViewer}\n                            data={\n                                GLOBAL_STATE.logs[state.selection.selectedIndex]\n                                    .payload\n                            }\n                        />\n                    </StackItem>\n                )}\n        </Stack>\n    );\n};\n\nexport default observer(PacketLog);\n"],"names":["insert","array","length","value","index","set","subarray","remove","BTreeNode","order","mid","minKeyCount","keys","keyCount","height","children","split","child","middleKey","rightChildren","rightKeys","Int32Array","splice","key","search","start","end","has","add","delete","deleteAt","deleted","balance","max","left","i","right","deleteMax","Symbol","iterator","BTree","root","size","node","clear","ObservableBTree","data","reportObserved","hasMap","observableHasValue","observable","onBecomeUnobserved","get","_this_hasMap_get","reportChanged","entry","constructor","Map","createAtom","ObservableListSelection","selected","select","ctrlKey","shiftKey","rangeStart","selectedIndex","makeAutoObservable","ADB_COMMAND_NAME","AdbCommand","state","empty","GLOBAL_STATE","commandBarItems","disabled","iconProps","iconName","Icons","text","onClick","action","selection","timestamp","toISOString","direction","command","arg0","toString","padStart","uint8ArrayToHexString","arg1","concat","Array","from","payload","map","byte","join","navigator","clipboard","writeText","autorun","runInAction","useClasses","makeStyles","grow","grid","header","textAlign","lineHeight","row","backgroundColor","code","fontFamily","textOverflow","whiteSpace","LINE_HEIGHT","cursor","shorthands","hexViewer","columns","title","width","CellComponent","withDisplayName","className","rowIndex","rest","param","item","classes","jsx_runtime","jsx","div","mergeClasses","commandString","decodeUtf8","Uint32Array","arg0String","arg1String","flexGrow","payloadString","toText","Header","columnIndex","Row","observer","handlePointerDown","useStableCallback","e","preventDefault","stopPropagation","onPointerDown","PacketLog","jsxs","Stack","RouteStackProps","tokens","Head","CommandBar","items","StackItem","Grid","rowCount","rowHeight","HeaderComponent","RowComponent","HexViewer","packet_log"],"sourceRoot":""}