{"version":3,"file":"static/chunks/783-bef2c39f1477f4c9.js","mappings":"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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.67.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.67.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.67.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.67.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.67.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Text/Text.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.67.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Text/Text.view.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.67.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Text/Text.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.67.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.8.2_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/utilities/src/ie11Detector.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.8.2_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/utilities/src/controlled.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.67.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.styles.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.67.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.8.2_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/utilities/src/DelayedRender.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst ICON_MAP = {\n  [MessageBarType.info]: 'Info',\n  [MessageBarType.warning]: 'Info',\n  [MessageBarType.error]: 'ErrorBadge',\n  [MessageBarType.blocked]: 'Blocked2',\n  [MessageBarType.severeWarning]: 'Warning',\n  [MessageBarType.success]: 'Completed',\n};\n\nconst COMPONENT_NAME = 'MessageBar';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nconst getAnnouncementPriority = (messageBarType: MessageBarType): 'assertive' | 'polite' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\n\nconst getRole = (messageBarType: MessageBarType): 'alert' | 'status' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\n\nexport const MessageBarBase: React.FunctionComponent<IMessageBarProps> = React.forwardRef<\n  HTMLDivElement,\n  IMessageBarProps\n>((props, ref) => {\n  const [expandSingleLine, { toggle: toggleExpandSingleLine }] = useBoolean(false);\n  const labelId = useId('MessageBar');\n\n  const {\n    actions,\n    className,\n    children,\n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel,\n    dismissIconProps,\n    styles,\n    theme,\n    messageBarType = MessageBarType.info,\n    onDismiss = undefined,\n    isMultiline = true,\n    truncated,\n    dismissButtonAriaLabel,\n    messageBarIconProps,\n    role,\n    delayedRender = true,\n    expandButtonProps,\n  } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(props, htmlElementProperties, [\n    'className',\n    'role',\n  ]);\n\n  const classNames: { [key in keyof IMessageBarStyles]: string } = getClassNames(styles, {\n    theme: theme!,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className,\n  });\n\n  const expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n  const regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n  const actionsDiv = actions ? <div className={classNames.actions}>{actions}</div> : null;\n\n  const dismissButton = onDismiss ? (\n    <IconButton\n      disabled={false}\n      className={classNames.dismissal}\n      onClick={onDismiss}\n      iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n      title={dismissButtonAriaLabel}\n      ariaLabel={dismissButtonAriaLabel}\n    />\n  ) : null;\n\n  return (\n    <div ref={ref} className={classNames.root} {...regionProps}>\n      <div className={classNames.content}>\n        <div className={classNames.iconContainer} aria-hidden>\n          {messageBarIconProps ? (\n            <Icon {...messageBarIconProps} className={css(classNames.icon, messageBarIconProps.className)} />\n          ) : (\n            <Icon iconName={ICON_MAP[messageBarType!]} className={classNames.icon} />\n          )}\n        </div>\n        <div\n          className={classNames.text}\n          id={labelId}\n          role={role || getRole(messageBarType)}\n          aria-live={getAnnouncementPriority(messageBarType)}\n        >\n          <span className={classNames.innerText} {...nativeProps}>\n            {delayedRender ? (\n              <DelayedRender>\n                <span>{children}</span>\n              </DelayedRender>\n            ) : (\n              // this span is probably not necessary, but preserving it for now in case anyone\n              // has styling that expects it to be present\n              <span>{children}</span>\n            )}\n          </span>\n        </div>\n        {\n          /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (\n            <div className={classNames.expandSingleLine}>\n              <IconButton\n                disabled={false}\n                className={classNames.expand}\n                onClick={toggleExpandSingleLine}\n                iconProps={expandIconProps}\n                ariaLabel={overflowButtonAriaLabel}\n                aria-expanded={expandSingleLine}\n                {...expandButtonProps}\n              />\n            </div>\n          )\n        }\n        {/* singleline actions */ !isMultiline && actionsDiv}\n        {\n          /* singleline dismiss */ !isMultiline && dismissButton && (\n            <div className={classNames.dismissSingleLine}>{dismissButton}</div>\n          )\n        }\n        {/* multiline dismiss */ isMultiline && dismissButton}\n      </div>\n      {/* multiline actions */ isMultiline && actionsDiv}\n    </div>\n  );\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n","import {\n  HighContrastSelector,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nimport type { IStyle, ISemanticColors } from '../../Styling';\nimport type { IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst highContrastBackgroundColor: { [key: string]: string } = {\n  [MessageBarType.error]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.blocked]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.success]: 'rgba(48, 241, 73, 0.3)',\n  [MessageBarType.warning]: 'rgba(255, 254, 57, 0.3)',\n  [MessageBarType.severeWarning]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.info]: 'Window',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        ...getHighContrastNoAdjustStyle(),\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n            background: highContrastBackgroundColor[messageBarType],\n            border: '1px solid WindowText',\n            color: 'WindowText',\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          ...getHighContrastNoAdjustStyle(),\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        selectors: {\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a:last-child': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MessageBarBase } from './MessageBar.base';\nimport { getStyles } from './MessageBar.styles';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nexport const MessageBar: React.FunctionComponent<IMessageBarProps> = styled<\n  IMessageBarProps,\n  IMessageBarStyleProps,\n  IMessageBarStyles\n>(MessageBarBase, getStyles, undefined, {\n  scope: 'MessageBar',\n});\n","import * as React from 'react';\nimport { BaseButton, Button, IButtonProps } from '../../Button';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IIconProps } from '../../Icon';\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBar {}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarProps extends React.HTMLAttributes<HTMLElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IMessageBar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IMessageBar>;\n\n  /**\n   * The type of MessageBar to render.\n   * @defaultvalue MessageBarType.info\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * The actions you want to show on the other side.\n   */\n  actions?: JSX.Element;\n\n  /**\n   * A description of the message bar for the benefit of screen readers.\n   * @deprecated Use native prop `aria-label` instead.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Whether the message bar has a dismiss button and its callback.\n   * If null, we don't show a dismiss button.\n   * @defaultvalue null\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement | BaseButton | Button>) => any;\n\n  /**\n   * Determines if the message bar is multi lined.\n   * If false, and the text overflows over buttons or to another line, it is clipped.\n   * @defaultvalue true\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Aria label on dismiss button if onDismiss is defined.\n   */\n  dismissButtonAriaLabel?: string;\n\n  /**\n   * Determines if the message bar text is truncated.\n   * If true, a button will render to toggle between a single line view and multiline view.\n   * This prop is for single line message bars with no buttons only in a limited space scenario.\n   * @defaultvalue false\n   */\n  truncated?: boolean;\n\n  /**\n   * Aria label on overflow button if truncated is defined.\n   * @deprecated Use `expandButtonProps` instead.\n   */\n  overflowButtonAriaLabel?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the MessageBar.\n   */\n  className?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;\n\n  /**\n   * Custom icon prop to replace the dismiss icon.\n   * If unset, default will be the Fabric Clear icon.\n   */\n  dismissIconProps?: IIconProps;\n\n  /**\n   * Custom icon prop to replace the message bar icon.\n   * If unset, default will be the icon set by messageBarType.\n   */\n  messageBarIconProps?: IIconProps;\n\n  /**\n   *  Button props that can be applied to the expand button of the MessageBar.\n   */\n  expandButtonProps?: IButtonProps;\n\n  /**\n   * Custom role to apply to the MessageBar.\n   * @defaultvalue `alert` if `messageBarType` is `error`, `blocked`, or `severeWarning`;\n   * or `status` otherwise\n   */\n  role?: 'alert' | 'status' | 'none';\n\n  /**\n   * By default, MessageBar delay-renders its content within an internal live region to help ensure\n   * it's announced by screen readers. You can disable that behavior by setting this prop to `false`.\n   *\n   * If you set this prop to `false`, to ensure proper announcement you should either:\n   * - If appropriate, ensure that the `role` prop is set to `alert` (this will be done by default\n   *   if `messageBarType` is `error`, `blocked`, or `severeWarning`), OR\n   * - Set the `role` prop to `none` (to avoid nested `status` regions), wrap the whole MessageBar\n   *   in a `<div role=\"status\">` which is always rendered, and ensure that the MessageBar is\n   *   rendered either conditionally or with a delay.\n   * @default true\n   */\n  delayedRender?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyleProps {\n  /**\n   * Theme (provided through customization).\n   */\n  theme: ITheme;\n\n  /**\n   * Additional CSS class(es).\n   */\n  className?: string;\n\n  /**\n   * Type of the MessageBar.\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * Whether the MessageBar contains a dismiss button.\n   */\n  onDismiss?: boolean;\n\n  /**\n   * Whether the text is truncated.\n   */\n  truncated?: boolean;\n\n  /**\n   * Whether the MessageBar is rendered in multi line (as opposed to single line) mode.\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Whether the single line MessageBar is being expanded.\n   */\n  expandSingleLine?: boolean;\n\n  /**\n   * Whether the MessageBar contains any action elements.\n   */\n  actions?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyles {\n  /**\n   * Style set for the root element.\n   */\n  root?: IStyle;\n\n  /**\n   * Style set for the element containing the icon, text, and optional dismiss button.\n   */\n  content?: IStyle;\n\n  /**\n   * Style set for the element containing the icon.\n   */\n  iconContainer?: IStyle;\n\n  /**\n   * Style set for the icon.\n   */\n  icon?: IStyle;\n\n  /**\n   * Style set for the element containing the text.\n   */\n  text?: IStyle;\n\n  /**\n   * Style set for the text.\n   */\n  innerText?: IStyle;\n\n  /**\n   * Style set for the optional dismiss button.\n   */\n  dismissal?: IStyle;\n\n  /**\n   * Style set for the icon used to expand and collapse the MessageBar.\n   */\n  expand?: IStyle;\n\n  /**\n   * Style set for the element containing the dismiss button.\n   */\n  dismissSingleLine?: IStyle;\n\n  /**\n   * Style set for the element containing the expand icon.\n   */\n  expandSingleLine?: IStyle;\n\n  /**\n   * Style set for the optional element containing the action elements.\n   */\n  actions?: IStyle;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport enum MessageBarType {\n  /** Info styled MessageBar */\n  info = 0,\n  /** Error styled MessageBar */\n  error = 1,\n  /** Blocked styled MessageBar */\n  blocked = 2,\n  /** SevereWarning styled MessageBar */\n  severeWarning = 3,\n  /** Success styled MessageBar */\n  success = 4,\n  /** Warning styled MessageBar */\n  warning = 5,\n}\n","import * as React from 'react';\nimport { createComponent } from '@fluentui/foundation-legacy';\nimport { TextView } from './Text.view';\nimport { TextStyles as styles } from './Text.styles';\nimport type { ITextProps } from './Text.types';\n\nexport const Text: React.FunctionComponent<ITextProps> = createComponent(TextView, {\n  displayName: 'Text',\n  styles,\n});\n\nexport default Text;\n","/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport { withSlots, getSlots } from '@fluentui/foundation-legacy';\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\nimport type { ITextComponent, ITextProps, ITextSlots } from './Text.types';\n\nexport const TextView: ITextComponent['view'] = props => {\n  // eslint-disable-next-line eqeqeq\n  if (props.children == null) {\n    return null;\n  }\n\n  const { block, className, as: RootType = 'span', variant, nowrap, ...rest } = props;\n\n  const Slots = getSlots<ITextProps, ITextSlots>(props, {\n    root: RootType,\n  });\n\n  return <Slots.root {...getNativeProps(rest, htmlElementProperties)} />;\n};\n","import type { ITextComponent, ITextStyles, ITextStylesReturnType, ITextProps } from './Text.types';\nimport type { ITheme } from '../../Styling';\n\nexport const TextStyles: ITextComponent['styles'] = (props: ITextProps, theme: ITheme): ITextStylesReturnType => {\n  const { as, className, block, nowrap, variant } = props;\n  const { fonts, semanticColors } = theme;\n  const variantObject = fonts[variant || 'medium'];\n\n  return {\n    root: [\n      variantObject,\n      {\n        color: variantObject.color || semanticColors.bodyText,\n        display: block ? (as === 'td' ? 'table-cell' : 'block') : 'inline',\n        mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n        webkitFontSmoothing: variantObject.WebkitFontSmoothing,\n      },\n      nowrap && {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n      className,\n    ],\n  } as ITextStyles;\n};\n","import * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  classNamesFunction,\n  DelayedRender,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ILabelStyleProps, ILabelStyles } from '../../Label';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase\n  extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _prefixId: string;\n  private _suffixId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n    this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      invalid,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      revealPasswordAriaLabel,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n    const isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div ref={this.props.elementRef} className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix} id={this._prefixId}>\n                {onRenderPrefix(this.props, this._onRenderPrefix)}\n              </div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button\n                aria-label={revealPasswordAriaLabel}\n                className={classNames.revealButton}\n                onClick={this._onRevealButtonClick}\n                aria-pressed={!!isRevealingPassword}\n                type=\"button\"\n              >\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix} id={this._suffixId}>\n                {onRenderSuffix(this.props, this._onRenderSuffix)}\n              </div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>{this._renderErrorMessage()}</DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n  private _renderErrorMessage(): JSX.Element | null {\n    const errorMessage = this._errorMessage;\n\n    return errorMessage ? (\n      typeof errorMessage === 'string' ? (\n        <p className={this._classNames.errorMessage}>\n          <span data-automation-id=\"error-message\">{errorMessage}</span>\n        </p>\n      ) : (\n        <div className={this._classNames.errorMessage} data-automation-id=\"error-message\">\n          {errorMessage}\n        </div>\n      )\n    ) : null;\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const { invalid = !!this._errorMessage } = this.props;\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={invalid}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): JSX.Element | null {\n    const {\n      ariaLabel,\n      invalid = !!this._errorMessage,\n      onRenderPrefix,\n      onRenderSuffix,\n      prefix,\n      suffix,\n      type = 'text',\n      label,\n    } = this.props;\n\n    // build aria-labelledby list from label, prefix, and suffix\n    const labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement> = {\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id,\n      ...getNativeProps(this.props, inputProperties, ['defaultValue', 'type']),\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement as React.RefObject<HTMLInputElement>,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur,\n    };\n\n    const defaultRender = (updatedInputProps: React.InputHTMLAttributes<HTMLInputElement>) => {\n      return <input {...updatedInputProps} />;\n    };\n    const onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if any of the following are true:\n    // - the value is undefined (in case one of the IE bugs comes back)\n    // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n    // - it's the same as the previous value\n    const previousValue = _getValue(this.props, this.state) || '';\n    if (value === undefined || value === this._lastChangeValue || value === previousValue) {\n      this._lastChangeValue = undefined;\n      return;\n    }\n    this._lastChangeValue = value;\n\n    this.props.onChange?.(event, value);\n\n    if (!this._isControlled) {\n      // ONLY if this is an uncontrolled component, update the displayed value.\n      // (Controlled components must update the `value` prop from `onChange`.)\n      this.setState({ uncontrolledValue: value });\n    }\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /^Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n","import { getWindow } from './dom/getWindow';\n\nexport const isIE11 = (): boolean => {\n  const win = getWindow();\n\n  if (!win?.navigator?.userAgent) {\n    return false;\n  }\n\n  return win.navigator.userAgent.indexOf('rv:11.0') > -1;\n};\n","/**\n * Determines whether a component is controlled.\n * @param props - Component props\n * @param valueProp - Prop containing the controlled value\n * @returns true if controlled, false if uncontrolled\n */\nexport function isControlled<P>(props: P, valueProp: keyof P): boolean {\n  // React's built-in <input> considers a prop to be provided if its value is non-null/undefined.\n  // Mirror that behavior here (rather than checking for just undefined).\n  return props[valueProp] !== undefined && props[valueProp] !== null;\n}\n","import {\n  AnimationClassNames,\n  getFocusStyle,\n  getGlobalClassNames,\n  getInputFocusStyle,\n  HighContrastSelector,\n  normalize,\n  getPlaceholderStyles,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport type { IStyle } from '../../Styling';\nimport type { ILabelStyles, ILabelStyleProps } from '../../Label';\nimport type { ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\nimport type { IStyleFunctionOrObject } from '@fluentui/utilities';\n\nconst globalClassNames = {\n  root: 'ms-TextField',\n  description: 'ms-TextField-description',\n  errorMessage: 'ms-TextField-errorMessage',\n  field: 'ms-TextField-field',\n  fieldGroup: 'ms-TextField-fieldGroup',\n  prefix: 'ms-TextField-prefix',\n  suffix: 'ms-TextField-suffix',\n  wrapper: 'ms-TextField-wrapper',\n  revealButton: 'ms-TextField-reveal',\n\n  multiline: 'ms-TextField--multiline',\n  borderless: 'ms-TextField--borderless',\n  underlined: 'ms-TextField--underlined',\n  unresizable: 'ms-TextField--unresizable',\n\n  required: 'is-required',\n  disabled: 'is-disabled',\n  active: 'is-active',\n};\n\nfunction getLabelStyles(props: ITextFieldStyleProps): IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles> {\n  const { underlined, disabled, focused, theme } = props;\n  const { palette, fonts } = theme;\n\n  return () => ({\n    root: [\n      underlined &&\n        disabled && {\n          color: palette.neutralTertiary,\n        },\n      underlined && {\n        fontSize: fonts.medium.fontSize,\n        marginRight: 8,\n        paddingLeft: 12,\n        paddingRight: 0,\n        lineHeight: '22px',\n        height: 32,\n      },\n      underlined &&\n        focused && {\n          selectors: {\n            [HighContrastSelector]: {\n              height: 31, // -1px to prevent jumpiness in HC with the increased border-width to 2px\n            },\n          },\n        },\n    ],\n  });\n}\n\nexport function getStyles(props: ITextFieldStyleProps): ITextFieldStyles {\n  const {\n    theme,\n    className,\n    disabled,\n    focused,\n    required,\n    multiline,\n    hasLabel,\n    borderless,\n    underlined,\n    hasIcon,\n    resizable,\n    hasErrorMessage,\n    inputClassName,\n    autoAdjustHeight,\n    hasRevealButton,\n  } = props;\n\n  const { semanticColors, effects, fonts } = theme;\n\n  const classNames = getGlobalClassNames(globalClassNames, theme);\n\n  const fieldPrefixSuffix: IStyle = {\n    // Suffix/Prefix are not editable so the disabled slot perfectly fits.\n    background: semanticColors.disabledBackground,\n    color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 10px',\n    lineHeight: 1,\n    whiteSpace: 'nowrap',\n    flexShrink: 0,\n    selectors: {\n      [HighContrastSelector]: {\n        background: 'Window',\n        color: disabled ? 'GrayText' : 'WindowText',\n      },\n    },\n  };\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = [\n    {\n      color: semanticColors.inputPlaceholderText,\n      opacity: 1,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  ];\n\n  const disabledPlaceholderStyles: IStyle = {\n    color: semanticColors.disabledText,\n    selectors: {\n      [HighContrastSelector]: {\n        color: 'GrayText',\n      },\n    },\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      required && classNames.required,\n      disabled && classNames.disabled,\n      focused && classNames.active,\n      multiline && classNames.multiline,\n      borderless && classNames.borderless,\n      underlined && classNames.underlined,\n      normalize,\n      {\n        position: 'relative',\n      },\n      className,\n    ],\n    wrapper: [\n      classNames.wrapper,\n\n      underlined && [\n        {\n          display: 'flex',\n          borderBottom: `1px solid ${!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText}`,\n          width: '100%',\n        },\n        disabled && {\n          borderBottomColor: semanticColors.disabledBackground,\n          selectors: {\n            [HighContrastSelector]: {\n              borderColor: 'GrayText',\n              ...getHighContrastNoAdjustStyle(),\n            },\n          },\n        },\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderBottomColor: 'Highlight',\n                  ...getHighContrastNoAdjustStyle(),\n                },\n              },\n            },\n          },\n        },\n        focused && [\n          {\n            position: 'relative',\n          },\n          getInputFocusStyle(\n            !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n            0,\n            'borderBottom',\n          ),\n        ],\n      ],\n    ],\n    fieldGroup: [\n      classNames.fieldGroup,\n      normalize,\n      {\n        border: `1px solid ${semanticColors.inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n        background: semanticColors.inputBackground,\n        cursor: 'text',\n        height: 32,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n        position: 'relative',\n      },\n      multiline && {\n        minHeight: '60px',\n        height: 'auto',\n        display: 'flex',\n      },\n\n      !focused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: semanticColors.inputBorderHovered,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderColor: 'Highlight',\n                  ...getHighContrastNoAdjustStyle(),\n                },\n              },\n            },\n          },\n        },\n\n      focused &&\n        !underlined &&\n        getInputFocusStyle(\n          !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n          effects.roundedCorner2,\n        ),\n      disabled && {\n        borderColor: semanticColors.disabledBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n\n        cursor: 'default',\n      },\n      borderless && {\n        border: 'none',\n      },\n      borderless &&\n        focused && {\n          border: 'none',\n          selectors: {\n            ':after': {\n              border: 'none',\n            },\n          },\n        },\n      underlined && {\n        flex: '1 1 0px',\n        border: 'none',\n        textAlign: 'left',\n      },\n      underlined &&\n        disabled && {\n          backgroundColor: 'transparent',\n        },\n\n      hasErrorMessage &&\n        !underlined && {\n          borderColor: semanticColors.errorText,\n          selectors: {\n            '&:hover': {\n              borderColor: semanticColors.errorText,\n            },\n          },\n        },\n      !hasLabel &&\n        required && {\n          selectors: {\n            ':before': {\n              content: `'*'`,\n              color: semanticColors.errorText,\n              position: 'absolute',\n              top: -5,\n              right: -10,\n            },\n            [HighContrastSelector]: {\n              selectors: {\n                ':before': {\n                  color: 'WindowText',\n                  right: -14, // moving the * 4 pixel to right to alleviate border clipping in HC mode.\n                },\n              },\n            },\n          },\n        },\n    ],\n    field: [\n      fonts.medium,\n      classNames.field,\n      normalize,\n      {\n        borderRadius: 0,\n        border: 'none',\n        background: 'none',\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        padding: '0 8px',\n        width: '100%',\n        minWidth: 0,\n        textOverflow: 'ellipsis',\n        outline: 0,\n        selectors: {\n          '&:active, &:focus, &:hover': { outline: 0 },\n          '::-ms-clear': {\n            display: 'none',\n          },\n          [HighContrastSelector]: {\n            background: 'Window',\n            color: disabled ? 'GrayText' : 'WindowText',\n          },\n        },\n      },\n      getPlaceholderStyles(placeholderStyles),\n      multiline &&\n        !resizable && [\n          classNames.unresizable,\n          {\n            resize: 'none',\n          },\n        ],\n      multiline && {\n        minHeight: 'inherit',\n        lineHeight: 17,\n        flexGrow: 1,\n        paddingTop: 6,\n        paddingBottom: 6,\n        overflow: 'auto',\n        width: '100%',\n      },\n      multiline &&\n        autoAdjustHeight && {\n          overflow: 'hidden',\n        },\n      hasIcon &&\n        !hasRevealButton && {\n          paddingRight: 24,\n        },\n      multiline &&\n        hasIcon && {\n          paddingRight: 40,\n        },\n      disabled && [\n        {\n          backgroundColor: semanticColors.disabledBackground,\n          color: semanticColors.disabledText,\n          borderColor: semanticColors.disabledBackground,\n        },\n        getPlaceholderStyles(disabledPlaceholderStyles),\n      ],\n      underlined && {\n        textAlign: 'left',\n      },\n      focused &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingLeft: 11,\n              paddingRight: 11,\n            },\n          },\n        },\n      focused &&\n        multiline &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingTop: 4, // take into consideration the 2px increased border-width (not when borderless).\n            },\n          },\n        },\n      inputClassName,\n    ],\n    icon: [\n      multiline && {\n        paddingRight: 24,\n        alignItems: 'flex-end',\n      },\n      {\n        pointerEvents: 'none',\n        position: 'absolute',\n        bottom: 6,\n        right: 8,\n        top: 'auto',\n        fontSize: IconFontSizes.medium,\n        lineHeight: 18,\n      },\n      disabled && {\n        color: semanticColors.disabledText,\n      },\n    ],\n    description: [\n      classNames.description,\n      {\n        color: semanticColors.bodySubtext,\n        fontSize: fonts.xSmall.fontSize,\n      },\n    ],\n    errorMessage: [\n      classNames.errorMessage,\n      AnimationClassNames.slideDownIn20,\n      fonts.small,\n      {\n        color: semanticColors.errorText,\n        margin: 0,\n        paddingTop: 5,\n        display: 'flex',\n        alignItems: 'center',\n      },\n    ],\n    prefix: [classNames.prefix, fieldPrefixSuffix],\n    suffix: [classNames.suffix, fieldPrefixSuffix],\n    revealButton: [\n      classNames.revealButton,\n      'ms-Button',\n      'ms-Button--icon',\n      getFocusStyle(theme, { inset: 1 }),\n      {\n        height: 30,\n        width: 32,\n        border: 'none',\n        padding: '0px 4px',\n        backgroundColor: 'transparent',\n        color: semanticColors.link,\n        selectors: {\n          ':hover': {\n            outline: 0,\n            color: semanticColors.primaryButtonBackgroundHovered,\n            backgroundColor: semanticColors.buttonBackgroundHovered,\n            selectors: {\n              [HighContrastSelector]: {\n                borderColor: 'Highlight',\n                color: 'Highlight',\n              },\n            },\n          },\n          ':focus': { outline: 0 },\n        },\n      },\n      hasIcon && {\n        marginRight: 28,\n      },\n    ],\n    revealSpan: {\n      display: 'flex',\n      height: '100%',\n      alignItems: 'center',\n    },\n    revealIcon: {\n      margin: '0px 4px',\n      pointerEvents: 'none',\n      bottom: 6,\n      right: 8,\n      top: 'auto',\n      fontSize: IconFontSizes.medium,\n      lineHeight: 18,\n    },\n    subComponentStyles: {\n      label: getLabelStyles(props),\n    },\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TextFieldBase } from './TextField.base';\nimport { getStyles } from './TextField.styles';\nimport type { ITextFieldProps, ITextFieldStyles, ITextFieldStyleProps } from './TextField.types';\n\nexport const TextField: React.FunctionComponent<ITextFieldProps> = styled<\n  ITextFieldProps,\n  ITextFieldStyleProps,\n  ITextFieldStyles\n>(TextFieldBase, getStyles, undefined, {\n  scope: 'TextField',\n});\n\nexport type { ITextField } from './TextField.types';\n","import * as React from 'react';\nimport { getWindow } from './dom/getWindow';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: getWindow() === undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n"],"names":["ICON_MAP","getClassNames","classNamesFunction","getAnnouncementPriority","messageBarType","getRole","MessageBarBase","props","ref","useBoolean","expandSingleLine","toggleExpandSingleLine","labelId","useId","actions","className","children","overflowButtonAriaLabel","dismissIconProps","styles","theme","onDismiss","undefined","isMultiline","truncated","dismissButtonAriaLabel","messageBarIconProps","role","delayedRender","expandButtonProps","nativeProps","classNames","expandIconProps","iconName","regionProps","actionsDiv","dismissButton","IconButton","disabled","dismissal","onClick","iconProps","title","ariaLabel","root","content","iconContainer","Icon","css","icon","text","id","innerText","DelayedRender","expand","dismissSingleLine","displayName","GlobalClassNames","error","blocked","severeWarning","success","warning","multiline","singleline","dismissalSingleLine","expandingSingleLine","actionsSingleline","backgroundColor","highContrastBackgroundColor","iconColor","MessageBar","styled","semanticColors","fonts","SmallScreenSelector","dismissalAndExpandIconStyle","fontSize","height","lineHeight","color","messageText","selectors","dismissalAndExpandStyle","inset","highContrastStyle","outlineOffset","outline","borderColor","flexShrink","width","padding","medium","background","minHeight","display","wordBreak","messageLink","messageLinkHovered","border","flexDirection","minWidth","margin","flexGrow","small","marginRight","paddingLeft","overflow","whiteSpace","textOverflow","flexBasis","alignItems","marginLeft","marginBottom","scope","MessageBarType","Text","createComponent","RootType","rest","Slots","as","block","nowrap","variant","variantObject","bodyText","mozOsxFontSmoothing","MozOsxFontSmoothing","webkitFontSmoothing","WebkitFontSmoothing","__browserNeedsRevealButton","COMPONENT_NAME","_textElement","_onFocus","ev","onFocus","setState","isFocused","validateOnFocusIn","_validate","value","_onBlur","onBlur","validateOnFocusOut","_onRenderLabel","label","required","labelStyles","_classNames","subComponentStyles","Label","htmlFor","_id","_labelId","_onRenderDescription","description","_onRevealButtonClick","event","prevState","isRevealingPassword","_onInputChange","target","previousValue","_getValue","state","_lastChangeValue","onChange","_isControlled","uncontrolledValue","initializeComponentRef","_async","Async","_fallbackId","getId","_descriptionId","_prefixId","_suffixId","_warnControlledUsage","defaultValue","String","errorMessage","_delayedValidate","debounce","deferredValidationTime","_lastValidation","this","componentDidMount","_adjustInputHeight","validateOnLoad","componentWillUnmount","dispose","getSnapshotBeforeUpdate","prevProps","selection","selectionStart","selectionEnd","componentDidUpdate","snapshot","start","end","focus","setSelectionRange","prevValue","_shouldValidateAllChanges","render","borderless","invalid","inputClassName","underlined","prefix","resizable","suffix","autoAdjustHeight","canRevealPassword","revealPasswordAriaLabel","type","onRenderPrefix","_onRenderPrefix","onRenderSuffix","_onRenderSuffix","onRenderLabel","onRenderDescription","_errorMessage","isInvalid","hasRevealButton","win","getWindow","navigator","isEdge","test","userAgent","indexOf","isIE11","_browserNeedsRevealButton","focused","hasLabel","hasErrorMessage","hasIcon","elementRef","wrapper","fieldGroup","_renderTextArea","_renderInput","revealButton","revealSpan","revealIcon","_isDescriptionAvailable","_renderErrorMessage","current","blur","select","setSelectionStart","setSelectionEnd","_hasWarnedNullValue","warn","valueProp","style","paddingBottom","textAreaProps","ariaLabelledBy","onInput","field","readOnly","labelIds","push","inputProps","length","join","defaultRender","updatedInputProps","onRenderInput","_latestValidateValue","onGetErrorMessage","result","then","_notifyAfterValidate","onNotifyValidationResult","textField","scrollHeight","defaultProps","globalClassNames","unresizable","active","getLabelStyles","palette","neutralTertiary","paddingRight","TextField","TextFieldBase","effects","fieldPrefixSuffix","disabledBackground","disabledText","inputPlaceholderText","placeholderStyles","opacity","disabledPlaceholderStyles","position","borderBottom","errorText","inputBorder","borderBottomColor","inputBorderHovered","inputFocusBorderAlt","borderRadius","roundedCorner2","inputBackground","cursor","flex","textAlign","top","right","inputText","resize","paddingTop","pointerEvents","bottom","bodySubtext","xSmall","link","primaryButtonBackgroundHovered","buttonBackgroundHovered","isRendered","delay","_timeoutId","window","setTimeout","clearTimeout"],"sourceRoot":""}