{"version":3,"file":"static/chunks/pages/scrcpy-00a9132332c386a1.js","mappings":"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","sources":["webpack://_N_E/?6587","webpack://_N_E/../../libraries/scrcpy/esm/message.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.48.1_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Layer/LayerHost.js","webpack://_N_E/../../libraries/scrcpy/esm/utils.js","webpack://_N_E/../../libraries/scrcpy/esm/connection.js","webpack://_N_E/../../libraries/scrcpy/esm/options/common.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_16.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_18.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_21.js","webpack://_N_E/../../libraries/scrcpy/esm/push-server.js","webpack://_N_E/../../libraries/scrcpy/esm/sps.js","webpack://_N_E/../../libraries/scrcpy/esm/client.js","webpack://_N_E/../../libraries/scrcpy/esm/codec.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/tinyh264/wrapper.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/tinyh264/index.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/web-codecs/index.js","webpack://_N_E/../../libraries/scrcpy/bin/version.js","webpack://_N_E/./pages/scrcpy.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/next@12.0.7_react-dom@17.0.2+react@17.0.2/node_modules/next/head.js"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/scrcpy\",\n      function () {\n        return require(\"private-next-pages/scrcpy.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/scrcpy\"])\n      });\n    }\n  ","import Struct, { placeholder } from '@yume-chan/struct';\nexport var ScrcpyControlMessageType;\n(function (ScrcpyControlMessageType) {\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectKeycode\"] = 0] = \"InjectKeycode\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectText\"] = 1] = \"InjectText\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectTouch\"] = 2] = \"InjectTouch\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectScroll\"] = 3] = \"InjectScroll\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"BackOrScreenOn\"] = 4] = \"BackOrScreenOn\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"ExpandNotificationPanel\"] = 5] = \"ExpandNotificationPanel\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"CollapseNotificationPanel\"] = 6] = \"CollapseNotificationPanel\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"GetClipboard\"] = 7] = \"GetClipboard\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"SetClipboard\"] = 8] = \"SetClipboard\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"SetScreenPowerMode\"] = 9] = \"SetScreenPowerMode\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"RotateDevice\"] = 10] = \"RotateDevice\";\n})(ScrcpyControlMessageType || (ScrcpyControlMessageType = {}));\nexport var AndroidMotionEventAction;\n(function (AndroidMotionEventAction) {\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Down\"] = 0] = \"Down\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Up\"] = 1] = \"Up\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Move\"] = 2] = \"Move\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Cancel\"] = 3] = \"Cancel\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Outside\"] = 4] = \"Outside\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"PointerDown\"] = 5] = \"PointerDown\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"PointerUp\"] = 6] = \"PointerUp\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverMove\"] = 7] = \"HoverMove\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Scroll\"] = 8] = \"Scroll\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverEnter\"] = 9] = \"HoverEnter\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverExit\"] = 10] = \"HoverExit\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"ButtonPress\"] = 11] = \"ButtonPress\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"ButtonRelease\"] = 12] = \"ButtonRelease\";\n})(AndroidMotionEventAction || (AndroidMotionEventAction = {}));\nexport const ScrcpyInjectTouchControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectTouch)\n    .uint8('action', placeholder())\n    .uint64('pointerId')\n    .uint32('pointerX')\n    .uint32('pointerY')\n    .uint16('screenWidth')\n    .uint16('screenHeight')\n    .uint16('pressure')\n    .uint32('buttons');\nexport const ScrcpyInjectTextControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectText)\n    .uint32('length')\n    .string('text', { lengthField: 'length' });\nexport var AndroidKeyEventAction;\n(function (AndroidKeyEventAction) {\n    AndroidKeyEventAction[AndroidKeyEventAction[\"Down\"] = 0] = \"Down\";\n    AndroidKeyEventAction[AndroidKeyEventAction[\"Up\"] = 1] = \"Up\";\n})(AndroidKeyEventAction || (AndroidKeyEventAction = {}));\nexport var AndroidKeyCode;\n(function (AndroidKeyCode) {\n    AndroidKeyCode[AndroidKeyCode[\"Home\"] = 3] = \"Home\";\n    AndroidKeyCode[AndroidKeyCode[\"Back\"] = 4] = \"Back\";\n    AndroidKeyCode[AndroidKeyCode[\"A\"] = 29] = \"A\";\n    AndroidKeyCode[AndroidKeyCode[\"B\"] = 30] = \"B\";\n    AndroidKeyCode[AndroidKeyCode[\"C\"] = 31] = \"C\";\n    AndroidKeyCode[AndroidKeyCode[\"D\"] = 32] = \"D\";\n    AndroidKeyCode[AndroidKeyCode[\"E\"] = 33] = \"E\";\n    AndroidKeyCode[AndroidKeyCode[\"F\"] = 34] = \"F\";\n    AndroidKeyCode[AndroidKeyCode[\"G\"] = 35] = \"G\";\n    AndroidKeyCode[AndroidKeyCode[\"H\"] = 36] = \"H\";\n    AndroidKeyCode[AndroidKeyCode[\"I\"] = 37] = \"I\";\n    AndroidKeyCode[AndroidKeyCode[\"J\"] = 38] = \"J\";\n    AndroidKeyCode[AndroidKeyCode[\"K\"] = 39] = \"K\";\n    AndroidKeyCode[AndroidKeyCode[\"L\"] = 40] = \"L\";\n    AndroidKeyCode[AndroidKeyCode[\"M\"] = 41] = \"M\";\n    AndroidKeyCode[AndroidKeyCode[\"N\"] = 42] = \"N\";\n    AndroidKeyCode[AndroidKeyCode[\"O\"] = 43] = \"O\";\n    AndroidKeyCode[AndroidKeyCode[\"P\"] = 44] = \"P\";\n    AndroidKeyCode[AndroidKeyCode[\"Q\"] = 45] = \"Q\";\n    AndroidKeyCode[AndroidKeyCode[\"R\"] = 46] = \"R\";\n    AndroidKeyCode[AndroidKeyCode[\"S\"] = 47] = \"S\";\n    AndroidKeyCode[AndroidKeyCode[\"T\"] = 48] = \"T\";\n    AndroidKeyCode[AndroidKeyCode[\"U\"] = 49] = \"U\";\n    AndroidKeyCode[AndroidKeyCode[\"V\"] = 50] = \"V\";\n    AndroidKeyCode[AndroidKeyCode[\"W\"] = 51] = \"W\";\n    AndroidKeyCode[AndroidKeyCode[\"X\"] = 52] = \"X\";\n    AndroidKeyCode[AndroidKeyCode[\"Y\"] = 53] = \"Y\";\n    AndroidKeyCode[AndroidKeyCode[\"Z\"] = 54] = \"Z\";\n    AndroidKeyCode[AndroidKeyCode[\"Space\"] = 62] = \"Space\";\n    AndroidKeyCode[AndroidKeyCode[\"Delete\"] = 67] = \"Delete\";\n    AndroidKeyCode[AndroidKeyCode[\"AppSwitch\"] = 187] = \"AppSwitch\";\n})(AndroidKeyCode || (AndroidKeyCode = {}));\nexport const ScrcpyInjectKeyCodeControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectKeycode)\n    .uint8('action', placeholder())\n    .uint32('keyCode')\n    .uint32('repeat')\n    .uint32('metaState');\nexport const ScrcpyInjectScrollControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectScroll)\n    .uint32('pointerX')\n    .uint32('pointerY')\n    .uint16('screenWidth')\n    .uint16('screenHeight')\n    .int32('scrollX')\n    .int32('scrollY');\n//# sourceMappingURL=message.js.map","import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '../../Utilities';\nimport { notifyHostChanged } from './Layer.notification';\nexport var LayerHost = function (props) {\n    var id = props.id, className = props.className;\n    React.useEffect(function () {\n        notifyHostChanged(id);\n        // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n    }, []);\n    useUnmount(function () {\n        notifyHostChanged(id);\n    });\n    return React.createElement(\"div\", __assign({}, props, { className: css('ms-LayerHost', className) }));\n};\nvar useUnmount = function (unmountFunction) {\n    var unmountRef = React.useRef(unmountFunction);\n    unmountRef.current = unmountFunction;\n    React.useEffect(function () { return function () {\n        if (unmountRef.current) {\n            unmountRef.current();\n        }\n    }; }, []);\n};\n//# sourceMappingURL=LayerHost.js.map","export function delay(time) {\n    return new Promise(resolve => {\n        globalThis.setTimeout(resolve, time);\n    });\n}\nconst Utf8Encoder = new TextEncoder();\nconst Utf8Decoder = new TextDecoder();\nexport function encodeUtf8(input) {\n    return Utf8Encoder.encode(input).buffer;\n}\nexport function decodeUtf8(buffer) {\n    return Utf8Decoder.decode(buffer);\n}\n//# sourceMappingURL=utils.js.map","import { __awaiter } from \"tslib\";\nimport { AdbBufferedStream, EventQueue } from \"@yume-chan/adb\";\nimport { delay } from \"./utils\";\nexport class ScrcpyClientConnection {\n    constructor(device) {\n        this.device = device;\n    }\n    initialize() { }\n    dispose() { }\n}\nexport class ScrcpyClientForwardConnection extends ScrcpyClientConnection {\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new AdbBufferedStream(yield this.device.createSocket('localabstract:scrcpy'));\n        });\n    }\n    connectAndRetry() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let i = 0; i < 100; i++) {\n                try {\n                    return yield this.connect();\n                }\n                catch (e) {\n                    yield delay(100);\n                }\n            }\n            throw new Error(`Can't connect to server after 100 retries`);\n        });\n    }\n    connectAndReadByte() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const stream = yield this.connectAndRetry();\n            // server will write a `0` to signal connection success\n            yield stream.read(1);\n            return stream;\n        });\n    }\n    getStreams() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return [\n                yield this.connectAndReadByte(),\n                yield this.connectAndRetry()\n            ];\n        });\n    }\n}\nexport class ScrcpyClientReverseConnection extends ScrcpyClientConnection {\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // try to unbind first\n                yield this.device.reverse.remove('localabstract:scrcpy');\n            }\n            catch (_a) {\n                // ignore error\n            }\n            this.streams = new EventQueue();\n            this.address = yield this.device.reverse.add('localabstract:scrcpy', 27183, {\n                onSocket: (packet, stream) => {\n                    this.streams.enqueue(stream);\n                },\n            });\n        });\n    }\n    accept() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new AdbBufferedStream(yield this.streams.dequeue());\n        });\n    }\n    getStreams() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return [\n                yield this.accept(),\n                yield this.accept(),\n            ];\n        });\n    }\n    dispose() {\n        // Don't await this!\n        // `reverse.remove`'s response will never arrive\n        // before we read all pending data from `videoStream`\n        this.device.reverse.remove(this.address);\n    }\n}\n//# sourceMappingURL=connection.js.map","export const DEFAULT_SERVER_PATH = '/data/local/tmp/scrcpy-server.jar';\nexport var ScrcpyLogLevel;\n(function (ScrcpyLogLevel) {\n    ScrcpyLogLevel[\"Verbose\"] = \"verbose\";\n    ScrcpyLogLevel[\"Debug\"] = \"debug\";\n    ScrcpyLogLevel[\"Info\"] = \"info\";\n    ScrcpyLogLevel[\"Warn\"] = \"warn\";\n    ScrcpyLogLevel[\"Error\"] = \"error\";\n})(ScrcpyLogLevel || (ScrcpyLogLevel = {}));\nexport var ScrcpyScreenOrientation;\n(function (ScrcpyScreenOrientation) {\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Initial\"] = -2] = \"Initial\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Unlocked\"] = -1] = \"Unlocked\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Portrait\"] = 0] = \"Portrait\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Landscape\"] = 1] = \"Landscape\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"PortraitFlipped\"] = 2] = \"PortraitFlipped\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"LandscapeFlipped\"] = 3] = \"LandscapeFlipped\";\n})(ScrcpyScreenOrientation || (ScrcpyScreenOrientation = {}));\nexport function isScrcpyOptionValue(value) {\n    return typeof value === 'object' &&\n        value !== null &&\n        typeof value.toOptionValue === 'function';\n}\nexport function toScrcpyOptionValue(value, empty) {\n    if (isScrcpyOptionValue(value)) {\n        value = value.toOptionValue();\n    }\n    if (value === undefined) {\n        return empty;\n    }\n    return `${value}`;\n}\n//# sourceMappingURL=common.js.map","import Struct, { placeholder } from \"@yume-chan/struct\";\nimport { ScrcpyClientForwardConnection, ScrcpyClientReverseConnection } from \"../connection\";\nimport { AndroidKeyEventAction, ScrcpyControlMessageType } from \"../message\";\nimport { ScrcpyLogLevel, ScrcpyScreenOrientation, toScrcpyOptionValue } from \"./common\";\nexport class CodecOptions {\n    constructor(value) {\n        this.value = value;\n    }\n    toOptionValue() {\n        const entries = Object.entries(this.value)\n            .filter(([key, value]) => value !== undefined);\n        if (entries.length === 0) {\n            return undefined;\n        }\n        return entries\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n    }\n}\nexport const ScrcpyBackOrScreenOnEvent1_16 = new Struct()\n    .uint8('type', placeholder());\nexport class ScrcpyOptions1_16 {\n    constructor(value) {\n        if (new.target === ScrcpyOptions1_16 &&\n            value.logLevel === ScrcpyLogLevel.Verbose) {\n            value.logLevel = ScrcpyLogLevel.Debug;\n        }\n        if (new.target === ScrcpyOptions1_16 &&\n            value.lockVideoOrientation === ScrcpyScreenOrientation.Initial) {\n            value.lockVideoOrientation = ScrcpyScreenOrientation.Unlocked;\n        }\n        this.value = value;\n    }\n    getArgumnetOrder() {\n        return [\n            'logLevel',\n            'maxSize',\n            'bitRate',\n            'maxFps',\n            'lockVideoOrientation',\n            'tunnelForward',\n            'crop',\n            'sendFrameMeta',\n            'control',\n            'displayId',\n            'showTouches',\n            'stayAwake',\n            'codecOptions',\n            'encoderName',\n        ];\n    }\n    getDefaultValue() {\n        return {\n            logLevel: ScrcpyLogLevel.Error,\n            maxSize: 0,\n            bitRate: 8000000,\n            maxFps: 0,\n            lockVideoOrientation: ScrcpyScreenOrientation.Unlocked,\n            tunnelForward: false,\n            crop: '-',\n            sendFrameMeta: true,\n            control: true,\n            displayId: 0,\n            showTouches: false,\n            stayAwake: true,\n            codecOptions: new CodecOptions({}),\n            encoderName: '-',\n        };\n    }\n    formatServerArguments() {\n        const defaults = this.getDefaultValue();\n        return this.getArgumnetOrder()\n            .map(key => toScrcpyOptionValue(this.value[key] || defaults[key], '-'));\n    }\n    createConnection(device) {\n        if (this.value.tunnelForward) {\n            return new ScrcpyClientForwardConnection(device);\n        }\n        else {\n            return new ScrcpyClientReverseConnection(device);\n        }\n    }\n    getOutputEncoderNameRegex() {\n        return /\\s+scrcpy --encoder-name '(.*?)'/;\n    }\n    createBackOrScreenOnEvent(action, device) {\n        if (action === AndroidKeyEventAction.Down) {\n            return ScrcpyBackOrScreenOnEvent1_16.serialize({ type: ScrcpyControlMessageType.BackOrScreenOn });\n        }\n        return undefined;\n    }\n}\n//# sourceMappingURL=1_16.js.map","import Struct, { placeholder } from \"@yume-chan/struct\";\nimport { ScrcpyControlMessageType } from \"../message\";\nimport { ScrcpyOptions1_16 } from \"./1_16\";\nexport const ScrcpyBackOrScreenOnEvent1_18 = new Struct()\n    .uint8('type', placeholder())\n    .uint8('action', placeholder());\nexport class ScrcpyOptions1_18 extends ScrcpyOptions1_16 {\n    constructor(value) {\n        super(value);\n    }\n    getArgumnetOrder() {\n        return super.getArgumnetOrder().concat(['powerOffOnClose']);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { powerOffOnClose: false });\n    }\n    getOutputEncoderNameRegex() {\n        return /\\s+scrcpy --encoder '(.*?)'/;\n    }\n    createBackOrScreenOnEvent(action, device) {\n        return ScrcpyBackOrScreenOnEvent1_18.serialize({\n            type: ScrcpyControlMessageType.BackOrScreenOn,\n            action,\n        });\n    }\n}\n//# sourceMappingURL=1_18.js.map","import { ScrcpyOptions1_18 } from './1_18';\nimport { toScrcpyOptionValue } from \"./common\";\nfunction toSnakeCase(input) {\n    return input.replace(/([A-Z])/g, '_$1').toLowerCase();\n}\nexport class ScrcpyOptions1_21 extends ScrcpyOptions1_18 {\n    constructor(init) {\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { clipboardAutosync: true });\n    }\n    formatServerArguments() {\n        return Object.entries(this.value)\n            .map(([key, value]) => [key, toScrcpyOptionValue(value, undefined)])\n            .filter((pair) => pair[1] !== undefined)\n            .map(([key, value]) => `${toSnakeCase(key)}=${value}`);\n    }\n}\n//# sourceMappingURL=1_21.js.map","import { __awaiter } from \"tslib\";\nimport { DEFAULT_SERVER_PATH } from \"./options\";\nexport function pushServer(device, file, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { path = DEFAULT_SERVER_PATH, onProgress, } = options;\n        const sync = yield device.sync();\n        return sync.write(path, file, undefined, undefined, onProgress);\n    });\n}\n//# sourceMappingURL=push-server.js.map","class BitReader {\n    constructor(buffer) {\n        this.bytePosition = 0;\n        this.bitPosition = 0;\n        this.buffer = buffer;\n    }\n    read(length) {\n        let result = 0;\n        for (let i = 0; i < length; i += 1) {\n            result = (result << 1) | this.next();\n        }\n        return result;\n    }\n    next() {\n        const value = (this.buffer[this.bytePosition] >> (7 - this.bitPosition)) & 1;\n        this.bitPosition += 1;\n        if (this.bitPosition === 8) {\n            this.bytePosition += 1;\n            this.bitPosition = 0;\n        }\n        return value;\n    }\n    decodeExponentialGolombNumber() {\n        let length = 0;\n        while (this.next() === 0) {\n            length += 1;\n        }\n        if (length === 0) {\n            return 0;\n        }\n        return (1 << length | this.read(length)) - 1;\n    }\n}\nfunction* iterateNalu(buffer) {\n    // -1 means we haven't found the first start code\n    let start = -1;\n    let writeIndex = 0;\n    // How many `0x00`s in a row we have counted\n    let zeroCount = 0;\n    let inEmulation = false;\n    for (const byte of buffer) {\n        buffer[writeIndex] = byte;\n        writeIndex += 1;\n        if (inEmulation) {\n            if (byte > 0x03) {\n                // `0x00000304` or larger are invalid\n                throw new Error('Invalid data');\n            }\n            inEmulation = false;\n            continue;\n        }\n        if (byte == 0x00) {\n            zeroCount += 1;\n            continue;\n        }\n        const lastZeroCount = zeroCount;\n        zeroCount = 0;\n        if (start === -1) {\n            // 0x000001 is the start code\n            // But it can be preceded by any number of zeros\n            // So 2 is the minimal\n            if (lastZeroCount >= 2 && byte === 0x01) {\n                // Found start of first NAL unit\n                writeIndex = 0;\n                start = 0;\n                continue;\n            }\n            // Not begin with start code\n            throw new Error('Invalid data');\n        }\n        if (lastZeroCount < 2) {\n            // zero or one `0x00`s are acceptable\n            continue;\n        }\n        if (byte === 0x01) {\n            // Remove all leading `0x00`s and this `0x01`\n            writeIndex -= lastZeroCount + 1;\n            // Found another NAL unit\n            yield buffer.subarray(start, writeIndex);\n            start = writeIndex;\n            continue;\n        }\n        if (lastZeroCount > 2) {\n            // Too much `0x00`s\n            throw new Error('Invalid data');\n        }\n        switch (byte) {\n            case 0x02:\n                // Didn't find why, but 7.4.1 NAL unit semantics forbids `0x000002` appearing in NAL units\n                throw new Error('Invalid data');\n            case 0x03:\n                // `0x000003` is the \"emulation_prevention_three_byte\"\n                // `0x00000300`, `0x00000301`, `0x00000302` and `0x00000303` represent\n                // `0x000000`, `0x000001`, `0x000002` and `0x000003` respectively\n                // Remove current byte\n                writeIndex -= 1;\n                inEmulation = true;\n                break;\n            default:\n                // `0x000004` or larger are ok\n                break;\n        }\n    }\n    if (inEmulation || zeroCount !== 0) {\n        throw new Error('Invalid data');\n    }\n    yield buffer.subarray(start, writeIndex);\n}\n// 7.3.2.1.1 Sequence parameter set data syntax\nexport function parse_sequence_parameter_set(buffer) {\n    for (const nalu of iterateNalu(new Uint8Array(buffer))) {\n        const reader = new BitReader(nalu);\n        if (reader.next() !== 0) {\n            throw new Error('Invalid data');\n        }\n        const nal_ref_idc = reader.read(2);\n        const nal_unit_type = reader.read(5);\n        if (nal_unit_type !== 7) {\n            continue;\n        }\n        if (nal_ref_idc === 0) {\n            throw new Error('Invalid data');\n        }\n        const profile_idc = reader.read(8);\n        const constraint_set = reader.read(8);\n        const constraint_set_reader = new BitReader(new Uint8Array([constraint_set]));\n        const constraint_set0_flag = !!constraint_set_reader.next();\n        const constraint_set1_flag = !!constraint_set_reader.next();\n        const constraint_set2_flag = !!constraint_set_reader.next();\n        const constraint_set3_flag = !!constraint_set_reader.next();\n        const constraint_set4_flag = !!constraint_set_reader.next();\n        const constraint_set5_flag = !!constraint_set_reader.next();\n        // reserved_zero_2bits\n        if (constraint_set_reader.read(2) !== 0) {\n            throw new Error('Invalid data');\n        }\n        const level_idc = reader.read(8);\n        const seq_parameter_set_id = reader.decodeExponentialGolombNumber();\n        if (profile_idc === 100 || profile_idc === 110 ||\n            profile_idc === 122 || profile_idc === 244 || profile_idc === 44 ||\n            profile_idc === 83 || profile_idc === 86 || profile_idc === 118 ||\n            profile_idc === 128 || profile_idc === 138 || profile_idc === 139 ||\n            profile_idc === 134) {\n            const chroma_format_idc = reader.decodeExponentialGolombNumber();\n            if (chroma_format_idc === 3) {\n                // separate_colour_plane_flag\n                reader.next();\n            }\n            // bit_depth_luma_minus8\n            reader.decodeExponentialGolombNumber();\n            // bit_depth_chroma_minus8\n            reader.decodeExponentialGolombNumber();\n            // qpprime_y_zero_transform_bypass_flag\n            reader.next();\n            const seq_scaling_matrix_present_flag = !!reader.next();\n            if (seq_scaling_matrix_present_flag) {\n                const seq_scaling_list_present_flag = [];\n                for (let i = 0; i < ((chroma_format_idc !== 3) ? 8 : 12); i++) {\n                    seq_scaling_list_present_flag[i] = !!reader.next();\n                    if (seq_scaling_list_present_flag[i])\n                        if (i < 6) {\n                            // TODO\n                            // scaling_list( ScalingList4x4[ i ], 16,\n                            //               UseDefaultScalingMatrix4x4Flag[ i ])\n                        }\n                        else {\n                            // TODO\n                            // scaling_list( ScalingList8x8[ i − 6 ], 64,\n                            //               UseDefaultScalingMatrix8x8Flag[ i − 6 ] )\n                        }\n                }\n            }\n        }\n        // log2_max_frame_num_minus4\n        reader.decodeExponentialGolombNumber();\n        const pic_order_cnt_type = reader.decodeExponentialGolombNumber();\n        if (pic_order_cnt_type === 0) {\n            // log2_max_pic_order_cnt_lsb_minus4\n            reader.decodeExponentialGolombNumber();\n        }\n        else if (pic_order_cnt_type === 1) {\n            // delta_pic_order_always_zero_flag\n            reader.next();\n            // offset_for_non_ref_pic\n            reader.decodeExponentialGolombNumber();\n            // offset_for_top_to_bottom_field\n            reader.decodeExponentialGolombNumber();\n            const num_ref_frames_in_pic_order_cnt_cycle = reader.decodeExponentialGolombNumber();\n            const offset_for_ref_frame = [];\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\n                offset_for_ref_frame[i] = reader.decodeExponentialGolombNumber();\n            }\n        }\n        // max_num_ref_frames\n        reader.decodeExponentialGolombNumber();\n        // gaps_in_frame_num_value_allowed_flag\n        reader.next();\n        const pic_width_in_mbs_minus1 = reader.decodeExponentialGolombNumber();\n        const pic_height_in_map_units_minus1 = reader.decodeExponentialGolombNumber();\n        const frame_mbs_only_flag = reader.next();\n        if (!frame_mbs_only_flag) {\n            // mb_adaptive_frame_field_flag\n            reader.next();\n        }\n        // direct_8x8_inference_flag\n        reader.next();\n        const frame_cropping_flag = !!reader.next();\n        let frame_crop_left_offset;\n        let frame_crop_right_offset;\n        let frame_crop_top_offset;\n        let frame_crop_bottom_offset;\n        if (frame_cropping_flag) {\n            frame_crop_left_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_right_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_top_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_bottom_offset = reader.decodeExponentialGolombNumber();\n        }\n        else {\n            frame_crop_left_offset = 0;\n            frame_crop_right_offset = 0;\n            frame_crop_top_offset = 0;\n            frame_crop_bottom_offset = 0;\n        }\n        const vui_parameters_present_flag = !!reader.next();\n        if (vui_parameters_present_flag) {\n            // TODO\n            // vui_parameters( )\n        }\n        return {\n            profile_idc,\n            constraint_set,\n            constraint_set0_flag,\n            constraint_set1_flag,\n            constraint_set2_flag,\n            constraint_set3_flag,\n            constraint_set4_flag,\n            constraint_set5_flag,\n            level_idc,\n            seq_parameter_set_id,\n            pic_width_in_mbs_minus1,\n            pic_height_in_map_units_minus1,\n            frame_mbs_only_flag,\n            frame_cropping_flag,\n            frame_crop_left_offset,\n            frame_crop_right_offset,\n            frame_crop_top_offset,\n            frame_crop_bottom_offset,\n        };\n    }\n    throw new Error('Invalid data');\n}\n//# sourceMappingURL=sps.js.map","import { __awaiter } from \"tslib\";\nimport { AdbLegacyShell, DataEventEmitter } from '@yume-chan/adb';\nimport { PromiseResolver } from '@yume-chan/async';\nimport { EventEmitter } from '@yume-chan/event';\nimport Struct from '@yume-chan/struct';\nimport { AndroidMotionEventAction, ScrcpyControlMessageType, ScrcpyInjectKeyCodeControlMessage, ScrcpyInjectScrollControlMessage, ScrcpyInjectTextControlMessage, ScrcpyInjectTouchControlMessage } from './message';\nimport { pushServer } from \"./push-server\";\nimport { parse_sequence_parameter_set } from './sps';\nimport { decodeUtf8 } from \"./utils\";\nfunction* splitLines(text) {\n    let start = 0;\n    while (true) {\n        const index = text.indexOf('\\n', start);\n        if (index === -1) {\n            return;\n        }\n        const line = text.substring(start, index);\n        yield line;\n        start = index + 1;\n    }\n}\nconst Size = new Struct()\n    .uint16('width')\n    .uint16('height');\nconst VideoPacket = new Struct()\n    .int64('pts')\n    .uint32('size')\n    .arrayBuffer('data', { lengthField: 'size' });\nexport const NoPts = BigInt(-1);\nconst ClipboardMessage = new Struct()\n    .uint32('length')\n    .string('content', { lengthField: 'length' });\nexport class ScrcpyClient {\n    constructor(device) {\n        this.outputEvent = new EventEmitter();\n        this.closeEvent = new EventEmitter();\n        this._running = false;\n        this.sizeChangedEvent = new EventEmitter();\n        this.videoDataEvent = new DataEventEmitter();\n        this.clipboardChangeEvent = new EventEmitter();\n        this.sendingTouchMessage = false;\n        this.device = device;\n    }\n    static pushServer(device, file, options) {\n        pushServer(device, file, options);\n    }\n    static getEncoders(device, path, version, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const resolver = new PromiseResolver();\n            const encoderNameRegex = options.getOutputEncoderNameRegex();\n            const encoders = [];\n            const client = new ScrcpyClient(device);\n            client.onOutput((line) => {\n                const match = line.match(encoderNameRegex);\n                if (match) {\n                    encoders.push(match[1]);\n                }\n            });\n            client.onClose(() => {\n                resolver.resolve(encoders);\n            });\n            // Provide an invalid encoder name\n            // So the server will return all available encoders\n            options.value.encoderName = '_';\n            // Scrcpy server will open connections, before initializing encoder\n            // Thus although an invalid encoder name is given, the start process will success\n            yield client.start(path, version, options);\n            return resolver.promise;\n        });\n    }\n    get backend() { return this.device.backend; }\n    get onOutput() { return this.outputEvent.event; }\n    get onClose() { return this.closeEvent.event; }\n    get running() { return this._running; }\n    get screenWidth() { return this._screenWidth; }\n    get screenHeight() { return this._screenHeight; }\n    get onSizeChanged() { return this.sizeChangedEvent.event; }\n    get onVideoData() { return this.videoDataEvent.event; }\n    get onClipboardChange() { return this.clipboardChangeEvent.event; }\n    start(path, version, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.options = options;\n            const connection = options.createConnection(this.device);\n            let process;\n            try {\n                yield connection.initialize();\n                process = yield this.device.childProcess.spawn([\n                    `CLASSPATH=${path}`,\n                    'app_process',\n                    /* unused */ '/',\n                    'com.genymobile.scrcpy.Server',\n                    version,\n                    ...options.formatServerArguments(),\n                ], {\n                    // Scrcpy server doesn't split stdout and stderr,\n                    // so disable Shell Protocol to simplify processing\n                    shells: [AdbLegacyShell],\n                });\n                process.onStdout(this.handleProcessOutput, this);\n                const resolver = new PromiseResolver();\n                const removeExitListener = process.onExit(() => {\n                    resolver.reject(new Error('scrcpy server exited prematurely'));\n                });\n                const [videoStream, controlStream] = yield Promise.race([\n                    resolver.promise,\n                    connection.getStreams(),\n                ]);\n                removeExitListener();\n                this.process = process;\n                this.process.onExit(this.handleProcessClosed, this);\n                this.videoStream = videoStream;\n                this.controlStream = controlStream;\n                this._running = true;\n                this.receiveVideo();\n                this.receiveControl();\n            }\n            catch (e) {\n                yield (process === null || process === void 0 ? void 0 : process.kill());\n                throw e;\n            }\n            finally {\n                connection.dispose();\n            }\n        });\n    }\n    handleProcessOutput(data) {\n        const text = decodeUtf8(data);\n        for (const line of splitLines(text)) {\n            if (line === '') {\n                continue;\n            }\n            this.outputEvent.fire(line);\n        }\n    }\n    handleProcessClosed() {\n        this._running = false;\n        this.closeEvent.fire();\n    }\n    receiveVideo() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.videoStream) {\n                throw new Error('receiveVideo started before initialization');\n            }\n            try {\n                // Device name, we don't need it\n                yield this.videoStream.read(64);\n                // Initial video size\n                const { width, height } = yield Size.deserialize(this.videoStream);\n                this._screenWidth = width;\n                this._screenHeight = height;\n                let buffer;\n                while (this._running) {\n                    const { pts, data } = yield VideoPacket.deserialize(this.videoStream);\n                    if (!data || data.byteLength === 0) {\n                        continue;\n                    }\n                    if (pts === NoPts) {\n                        const sequenceParameterSet = parse_sequence_parameter_set(data.slice(0));\n                        const { pic_width_in_mbs_minus1, pic_height_in_map_units_minus1, frame_mbs_only_flag, frame_crop_left_offset, frame_crop_right_offset, frame_crop_top_offset, frame_crop_bottom_offset, } = sequenceParameterSet;\n                        const width = (pic_width_in_mbs_minus1 + 1) * 16;\n                        const height = (pic_height_in_map_units_minus1 + 1) * (2 - frame_mbs_only_flag) * 16;\n                        const cropLeft = frame_crop_left_offset * 2;\n                        const cropRight = frame_crop_right_offset * 2;\n                        const cropTop = frame_crop_top_offset * 2;\n                        const cropBottom = frame_crop_bottom_offset * 2;\n                        const screenWidth = width - cropLeft - cropRight;\n                        const screenHeight = height - cropTop - cropBottom;\n                        this._screenWidth = screenWidth;\n                        this._screenHeight = screenHeight;\n                        this.sizeChangedEvent.fire({\n                            sequenceParameterSet,\n                            width,\n                            height,\n                            cropLeft: cropLeft,\n                            cropRight: cropRight,\n                            cropTop: cropTop,\n                            cropBottom: cropBottom,\n                            croppedWidth: screenWidth,\n                            croppedHeight: screenHeight,\n                        });\n                        buffer = data;\n                        continue;\n                    }\n                    let array;\n                    if (buffer) {\n                        array = new Uint8Array(buffer.byteLength + data.byteLength);\n                        array.set(new Uint8Array(buffer));\n                        array.set(new Uint8Array(data), buffer.byteLength);\n                        buffer = undefined;\n                    }\n                    else {\n                        array = new Uint8Array(data);\n                    }\n                    yield this.videoDataEvent.fire({\n                        pts,\n                        size: array.byteLength,\n                        data: array.buffer,\n                    });\n                }\n            }\n            catch (e) {\n                if (!this._running) {\n                    return;\n                }\n            }\n        });\n    }\n    receiveControl() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.controlStream) {\n                throw new Error('receiveControl started before initialization');\n            }\n            try {\n                while (true) {\n                    const type = yield this.controlStream.read(1);\n                    switch (new Uint8Array(type)[0]) {\n                        case 0:\n                            const { content } = yield ClipboardMessage.deserialize(this.controlStream);\n                            this.clipboardChangeEvent.fire(content);\n                            break;\n                        default:\n                            throw new Error('unknown control message type');\n                    }\n                }\n            }\n            catch (e) {\n                if (!this._running) {\n                    return;\n                }\n            }\n        });\n    }\n    injectKeyCode(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.controlStream) {\n                throw new Error('injectKeyCode called before initialization');\n            }\n            yield this.controlStream.write(ScrcpyInjectKeyCodeControlMessage.serialize(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectKeycode })));\n        });\n    }\n    injectText(text) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.controlStream) {\n                throw new Error('injectText called before initialization');\n            }\n            yield this.controlStream.write(ScrcpyInjectTextControlMessage.serialize({\n                type: ScrcpyControlMessageType.InjectText,\n                text,\n            }));\n        });\n    }\n    injectTouch(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.controlStream) {\n                throw new Error('injectTouch called before initialization');\n            }\n            if (!this.screenWidth || !this.screenHeight) {\n                return;\n            }\n            // ADB streams are actually pretty low-bandwidth and laggy\n            // Re-sample move events to avoid flooding the connection\n            if (this.sendingTouchMessage &&\n                message.action === AndroidMotionEventAction.Move) {\n                return;\n            }\n            this.sendingTouchMessage = true;\n            const buffer = ScrcpyInjectTouchControlMessage.serialize(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectTouch, screenWidth: this.screenWidth, screenHeight: this.screenHeight }));\n            yield this.controlStream.write(buffer);\n            this.sendingTouchMessage = false;\n        });\n    }\n    injectScroll(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.controlStream) {\n                throw new Error('injectScroll called before initialization');\n            }\n            if (!this.screenWidth || !this.screenHeight) {\n                return;\n            }\n            const buffer = ScrcpyInjectScrollControlMessage.serialize(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectScroll, screenWidth: this.screenWidth, screenHeight: this.screenHeight }));\n            yield this.controlStream.write(buffer);\n        });\n    }\n    pressBackOrTurnOnScreen(action) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.controlStream) {\n                throw new Error('pressBackOrTurnOnScreen called before initialization');\n            }\n            const buffer = this.options.createBackOrScreenOnEvent(action, this.device);\n            if (buffer) {\n                yield this.controlStream.write(buffer);\n            }\n        });\n    }\n    close() {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._running) {\n                return;\n            }\n            this._running = false;\n            (_a = this.videoStream) === null || _a === void 0 ? void 0 : _a.close();\n            (_b = this.controlStream) === null || _b === void 0 ? void 0 : _b.close();\n            yield ((_c = this.process) === null || _c === void 0 ? void 0 : _c.kill());\n        });\n    }\n}\n//# sourceMappingURL=client.js.map","// From https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel\nexport var AndroidCodecProfile;\n(function (AndroidCodecProfile) {\n    AndroidCodecProfile[AndroidCodecProfile[\"Baseline\"] = 1] = \"Baseline\";\n    AndroidCodecProfile[AndroidCodecProfile[\"Main\"] = 2] = \"Main\";\n    AndroidCodecProfile[AndroidCodecProfile[\"Extended\"] = 4] = \"Extended\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High\"] = 8] = \"High\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High10\"] = 16] = \"High10\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High422\"] = 32] = \"High422\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High444\"] = 64] = \"High444\";\n    AndroidCodecProfile[AndroidCodecProfile[\"ConstrainedBaseline\"] = 65536] = \"ConstrainedBaseline\";\n    AndroidCodecProfile[AndroidCodecProfile[\"ConstrainedHigh\"] = 524288] = \"ConstrainedHigh\";\n})(AndroidCodecProfile || (AndroidCodecProfile = {}));\nexport var AndroidCodecLevel;\n(function (AndroidCodecLevel) {\n    AndroidCodecLevel[AndroidCodecLevel[\"Level1\"] = 1] = \"Level1\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level1b\"] = 2] = \"Level1b\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level11\"] = 4] = \"Level11\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level12\"] = 8] = \"Level12\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level13\"] = 16] = \"Level13\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level2\"] = 32] = \"Level2\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level21\"] = 64] = \"Level21\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level22\"] = 128] = \"Level22\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level3\"] = 256] = \"Level3\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level31\"] = 512] = \"Level31\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level32\"] = 1024] = \"Level32\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level4\"] = 2048] = \"Level4\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level41\"] = 4096] = \"Level41\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level42\"] = 8192] = \"Level42\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level5\"] = 16384] = \"Level5\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level51\"] = 32768] = \"Level51\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level52\"] = 65536] = \"Level52\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level6\"] = 131072] = \"Level6\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level61\"] = 262144] = \"Level61\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level62\"] = 524288] = \"Level62\";\n})(AndroidCodecLevel || (AndroidCodecLevel = {}));\n//# sourceMappingURL=codec.js.map","import { PromiseResolver } from '@yume-chan/async';\nimport { AutoDisposable, EventEmitter } from '@yume-chan/event';\nlet worker;\nlet workerReady = false;\nconst pendingResolvers = [];\nlet streamId = 0;\nconst pictureReadyEvent = new EventEmitter();\nexport class TinyH264Wrapper extends AutoDisposable {\n    constructor(streamId) {\n        super();\n        this.pictureReadyEvent = new EventEmitter();\n        this.streamId = streamId;\n        this.addDisposable(pictureReadyEvent.event(this.handlePictureReady, this));\n    }\n    get onPictureReady() { return this.pictureReadyEvent.event; }\n    handlePictureReady(e) {\n        if (e.renderStateId === this.streamId) {\n            this.pictureReadyEvent.fire(e);\n        }\n    }\n    feed(data) {\n        worker.postMessage({\n            type: 'decode',\n            data: data,\n            offset: 0,\n            length: data.byteLength,\n            renderStateId: this.streamId,\n        }, [data]);\n    }\n    dispose() {\n        super.dispose();\n        worker.postMessage({\n            type: 'release',\n            renderStateId: this.streamId,\n        });\n    }\n}\nexport function createTinyH264Wrapper() {\n    if (!worker) {\n        worker = new Worker(new URL('./worker.js', import.meta.url));\n        worker.addEventListener('message', (e) => {\n            const { data } = e;\n            switch (data.type) {\n                case 'decoderReady':\n                    workerReady = true;\n                    for (const resolver of pendingResolvers) {\n                        resolver.resolve(new TinyH264Wrapper(streamId));\n                        streamId += 1;\n                    }\n                    pendingResolvers.length = 0;\n                    break;\n                case 'pictureReady':\n                    pictureReadyEvent.fire(data);\n                    break;\n            }\n        });\n    }\n    if (!workerReady) {\n        const resolver = new PromiseResolver();\n        pendingResolvers.push(resolver);\n        return resolver.promise;\n    }\n    const decoder = new TinyH264Wrapper(streamId);\n    streamId += 1;\n    return Promise.resolve(decoder);\n}\n//# sourceMappingURL=wrapper.js.map","import { __awaiter } from \"tslib\";\nimport { PromiseResolver } from \"@yume-chan/async\";\nimport { AndroidCodecLevel, AndroidCodecProfile } from \"../../codec\";\nimport { createTinyH264Wrapper } from \"./wrapper\";\nlet cachedInitializePromise;\nfunction initialize() {\n    if (!cachedInitializePromise) {\n        cachedInitializePromise = Promise.all([import('yuv-buffer'), import('yuv-canvas')]).then(([YuvBuffer, { default: YuvCanvas }]) => ({\n            YuvBuffer, YuvCanvas\n        }));\n    }\n    return cachedInitializePromise;\n}\nexport class TinyH264Decoder {\n    constructor() {\n        this.maxProfile = AndroidCodecProfile.Baseline;\n        this.maxLevel = AndroidCodecLevel.Level4;\n        initialize();\n        this._element = document.createElement('canvas');\n    }\n    get element() { return this._element; }\n    setSize(size) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.dispose();\n            this._initializer = new PromiseResolver();\n            const { YuvBuffer, YuvCanvas } = yield initialize();\n            if (!this._yuvCanvas) {\n                this._yuvCanvas = YuvCanvas.attach(this._element);\n                ;\n            }\n            const { width, height } = size;\n            const chromaWidth = width / 2;\n            const chromaHeight = height / 2;\n            this._element.width = size.croppedWidth;\n            this._element.height = size.croppedHeight;\n            const format = YuvBuffer.format({\n                width,\n                height,\n                chromaWidth,\n                chromaHeight,\n                cropLeft: size.cropLeft,\n                cropTop: size.cropTop,\n                cropWidth: size.croppedWidth,\n                cropHeight: size.croppedHeight,\n                displayWidth: size.croppedWidth,\n                displayHeight: size.croppedHeight,\n            });\n            const wrapper = yield createTinyH264Wrapper();\n            this._initializer.resolve(wrapper);\n            const uPlaneOffset = width * height;\n            const vPlaneOffset = uPlaneOffset + chromaWidth * chromaHeight;\n            wrapper.onPictureReady(({ data }) => {\n                const array = new Uint8Array(data);\n                const frame = YuvBuffer.frame(format, YuvBuffer.lumaPlane(format, array, width, 0), YuvBuffer.chromaPlane(format, array, chromaWidth, uPlaneOffset), YuvBuffer.chromaPlane(format, array, chromaWidth, vPlaneOffset));\n                this._yuvCanvas.drawFrame(frame);\n            });\n        });\n    }\n    feed(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._initializer) {\n                throw new Error('Decoder not initialized');\n            }\n            const wrapper = yield this._initializer.promise;\n            wrapper.feed(data);\n        });\n    }\n    dispose() {\n        var _a;\n        (_a = this._initializer) === null || _a === void 0 ? void 0 : _a.promise.then(wrapper => wrapper.dispose());\n        this._initializer = undefined;\n    }\n}\n//# sourceMappingURL=index.js.map","import { AndroidCodecLevel, AndroidCodecProfile } from \"../../codec\";\nfunction toHex(value) {\n    return value.toString(16).padStart(2, '0').toUpperCase();\n}\nexport class WebCodecsDecoder {\n    constructor() {\n        this.maxProfile = AndroidCodecProfile.High;\n        this.maxLevel = AndroidCodecLevel.Level5;\n        this._element = document.createElement('canvas');\n        this.context = this._element.getContext('2d');\n        this.decoder = new VideoDecoder({\n            output: (frame) => {\n                this.context.drawImage(frame, 0, 0);\n                frame.close();\n            },\n            error() { },\n        });\n    }\n    get element() { return this._element; }\n    setSize(size) {\n        const { sequenceParameterSet: { profile_idc, constraint_set, level_idc } } = size;\n        this._element.width = size.croppedWidth;\n        this._element.height = size.croppedHeight;\n        // https://www.rfc-editor.org/rfc/rfc6381#section-3.3\n        // ISO Base Media File Format Name Space\n        const codec = `avc1.${[profile_idc, constraint_set, level_idc].map(toHex).join('')}`;\n        this.decoder.configure({\n            codec: codec,\n            optimizeForLatency: true,\n        });\n    }\n    feed(data) {\n        this.decoder.decode(new EncodedVideoChunk({\n            type: 'key',\n            timestamp: 0,\n            data,\n        }));\n    }\n    dispose() {\n        this.decoder.close();\n    }\n}\n//# sourceMappingURL=index.js.map","export default '1.21';","import { CommandBar, Dialog, Dropdown, ICommandBarItemProps, Icon, IconButton, IDropdownOption, LayerHost, Position, ProgressIndicator, SpinButton, Stack, Toggle, TooltipHost } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { EventEmitter } from \"@yume-chan/event\";\nimport { AndroidKeyCode, AndroidKeyEventAction, AndroidMotionEventAction, CodecOptions, DEFAULT_SERVER_PATH, H264Decoder, H264DecoderConstructor, pushServer, ScrcpyClient, ScrcpyLogLevel, ScrcpyOptions1_21, ScrcpyScreenOrientation, TinyH264Decoder, WebCodecsDecoder } from \"@yume-chan/scrcpy\";\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport React, { useEffect, useState } from \"react\";\nimport { DemoMode, DeviceView, DeviceViewRef, ExternalLink } from \"../components\";\nimport { globalState } from \"../state\";\nimport { CommonStackTokens, formatSpeed, Icons, RouteStackProps } from \"../utils\";\nimport SCRCPY_SERVER_VERSION from '@yume-chan/scrcpy/bin/version';\n\nconst SERVER_URL = new URL('@yume-chan/scrcpy/bin/scrcpy-server?url', import.meta.url).toString();\n\nclass FetchWithProgress {\n    public readonly promise: Promise<ArrayBuffer>;\n\n    private _downloaded = 0;\n    public get downloaded() { return this._downloaded; }\n\n    private _total = 0;\n    public get total() { return this._total; }\n\n    private progressEvent = new EventEmitter<[download: number, total: number]>();\n    public get onProgress() { return this.progressEvent.event; }\n\n    public constructor(url: string) {\n        this.promise = this.fetch(url);\n    }\n\n    private async fetch(url: string) {\n        const response = await window.fetch(url);\n        this._total = Number.parseInt(response.headers.get('Content-Length') ?? '0', 10);\n        this.progressEvent.fire([this._downloaded, this._total]);\n\n        const reader = response.body!.getReader();\n        const chunks: Uint8Array[] = [];\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                break;\n            }\n            chunks.push(result.value);\n            this._downloaded += result.value.byteLength;\n            this.progressEvent.fire([this._downloaded, this._total]);\n        }\n\n        this._total = chunks.reduce((result, item) => result + item.byteLength, 0);\n        const result = new Uint8Array(this._total);\n        let position = 0;\n        for (const chunk of chunks) {\n            result.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return result.buffer;\n    }\n}\n\nlet cachedValue: FetchWithProgress | undefined;\nfunction fetchServer(onProgress?: (e: [downloaded: number, total: number]) => void) {\n    if (!cachedValue) {\n        cachedValue = new FetchWithProgress(SERVER_URL);\n        cachedValue.promise.catch((e) => {\n            cachedValue = undefined;\n        });\n    }\n\n    if (onProgress) {\n        cachedValue.onProgress(onProgress);\n        onProgress([cachedValue.downloaded, cachedValue.total]);\n    }\n\n    return cachedValue.promise;\n}\n\nfunction clamp(value: number, min: number, max: number): number {\n    if (value < min) {\n        return min;\n    }\n\n    if (value > max) {\n        return max;\n    }\n\n    return value;\n}\n\nclass KeyRepeater {\n    key: AndroidKeyCode;\n    client: ScrcpyClient;\n\n    delay: number;\n    interval: number;\n\n    onRelease: VoidFunction | undefined;\n\n    constructor(key: AndroidKeyCode, client: ScrcpyClient, delay = 0, interval = 0) {\n        this.key = key;\n        this.client = client;\n\n        this.delay = delay;\n        this.interval = interval;\n    }\n\n    async press() {\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Down,\n            keyCode: this.key,\n            repeat: 0,\n            metaState: 0,\n        });\n\n        if (this.delay === 0) {\n            return;\n        }\n\n        const timeoutId = setTimeout(async () => {\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Down,\n                keyCode: this.key,\n                repeat: 1,\n                metaState: 0,\n            });\n\n            if (this.interval === 0) {\n                return;\n            }\n\n            const intervalId = setInterval(async () => {\n                await this.client.injectKeyCode({\n                    action: AndroidKeyEventAction.Down,\n                    keyCode: this.key,\n                    repeat: 1,\n                    metaState: 0,\n                });\n            }, this.interval);\n            this.onRelease = () => clearInterval(intervalId);\n        }, this.delay);\n        this.onRelease = () => clearTimeout(timeoutId);\n    }\n\n    async release() {\n        this.onRelease?.();\n\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Up,\n            keyCode: this.key,\n            repeat: 0,\n            metaState: 0,\n        });\n    }\n}\n\nclass ScrcpyPageState {\n    running = false;\n\n    deviceView: DeviceViewRef | null = null;\n    rendererContainer: HTMLDivElement | null = null;\n\n    logVisible = false;\n    log: string[] = [];\n    settingsVisible = false;\n    demoModeVisible = false;\n\n    width = 0;\n    height = 0;\n\n    client: ScrcpyClient | undefined = undefined;\n\n    encoders: string[] = [];\n    selectedEncoder: string | undefined = undefined;\n\n    decoders: { name: string; factory: H264DecoderConstructor; }[] = [{\n        name: 'TinyH264 (Software)',\n        factory: TinyH264Decoder,\n    }];\n    selectedDecoder: { name: string, factory: H264DecoderConstructor; } = this.decoders[0];\n    decoder: H264Decoder | undefined = undefined;\n\n    resolution = 1080;\n    bitRate = 4_000_000;\n    tunnelForward = false;\n\n    connecting = false;\n    serverTotalSize = 0;\n    serverDownloadedSize = 0;\n    debouncedServerDownloadedSize = 0;\n    serverDownloadSpeed = 0;\n    serverUploadedSize = 0;\n    debouncedServerUploadedSize = 0;\n    serverUploadSpeed = 0;\n\n    homeKeyRepeater: KeyRepeater | undefined = undefined;\n    appSwitchKeyRepeater: KeyRepeater | undefined = undefined;\n\n    get commandBarItems() {\n        const result: ICommandBarItemProps[] = [];\n\n        if (!this.running) {\n            result.push({\n                key: 'start',\n                disabled: !globalState.device,\n                iconProps: { iconName: Icons.Play },\n                text: 'Start',\n                onClick: this.start as VoidFunction,\n            });\n        } else {\n            result.push({\n                key: 'stop',\n                iconProps: { iconName: Icons.Stop },\n                text: 'Stop',\n                onClick: this.stop,\n            });\n        }\n\n        result.push({\n            key: 'fullscreen',\n            disabled: !this.running,\n            iconProps: { iconName: Icons.FullScreenMaximize },\n            text: 'Fullscreen',\n            onClick: () => { this.deviceView?.enterFullscreen(); },\n        });\n\n        return result;\n    }\n\n    get commandBarFarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: 'Log',\n                iconProps: { iconName: Icons.TextGrammarError },\n                checked: this.logVisible,\n                text: 'Log',\n                onClick: action(() => {\n                    this.logVisible = !this.logVisible;\n                }),\n            },\n            {\n                key: 'Settings',\n                iconProps: { iconName: Icons.Settings },\n                checked: this.settingsVisible,\n                text: 'Settings',\n                onClick: action(() => {\n                    this.settingsVisible = !this.settingsVisible;\n                }),\n            },\n            {\n                key: 'DemoMode',\n                iconProps: { iconName: Icons.Wand },\n                checked: this.demoModeVisible,\n                text: 'Demo Mode',\n                onClick: action(() => {\n                    this.demoModeVisible = !this.demoModeVisible;\n                }),\n            },\n            {\n                key: 'info',\n                iconProps: { iconName: Icons.Info },\n                iconOnly: true,\n                tooltipHostProps: {\n                    content: (\n                        <>\n                            <p>\n                                <ExternalLink href=\"https://github.com/Genymobile/scrcpy\" spaceAfter>Scrcpy</ExternalLink>\n                                developed by Genymobile can display the screen with low latency (1~2 frames) and control the device, all without root access.\n                            </p>\n                            <p>\n                                This is a TypeScript implementation of the client part. Paired with official pre-built server binary.\n                            </p>\n                        </>\n                    ),\n                    calloutProps: {\n                        calloutMaxWidth: 300,\n                    }\n                },\n            }\n        ];\n    }\n\n    constructor() {\n        makeAutoObservable(this, {\n            decoders: observable.shallow,\n            selectedDecoder: observable.ref,\n            start: false,\n            stop: action.bound,\n            handleDeviceViewRef: action.bound,\n            handleRendererContainerRef: action.bound,\n            handleBackPointerDown: false,\n            handleBackPointerUp: false,\n            handleHomePointerDown: false,\n            handleHomePointerUp: false,\n            handleAppSwitchPointerDown: false,\n            handleAppSwitchPointerUp: false,\n            handleCurrentEncoderChange: action.bound,\n            handleSelectedDecoderChange: action.bound,\n            handleResolutionChange: action.bound,\n            handleTunnelForwardChange: action.bound,\n            handleBitRateChange: action.bound,\n            calculatePointerPosition: false,\n            injectTouch: false,\n            handlePointerDown: false,\n            handlePointerMove: false,\n            handlePointerUp: false,\n            handleWheel: false,\n            handleKeyDown: false,\n            homeKeyRepeater: false,\n            appSwitchKeyRepeater: false,\n        });\n\n        autorun(() => {\n            if (globalState.device) {\n                runInAction(() => {\n                    this.encoders = [];\n                    this.selectedEncoder = undefined;\n                });\n            } else {\n                this.stop();\n            }\n        });\n\n        autorun(() => {\n            if (this.rendererContainer && this.decoder) {\n                while (this.rendererContainer.firstChild) {\n                    this.rendererContainer.firstChild.remove();\n                }\n                this.rendererContainer.appendChild(this.decoder.element);\n            }\n        });\n\n        autorun(() => {\n            if (this.client) {\n                this.homeKeyRepeater = new KeyRepeater(AndroidKeyCode.Home, this.client);\n                this.appSwitchKeyRepeater = new KeyRepeater(AndroidKeyCode.AppSwitch, this.client);\n            } else {\n                this.homeKeyRepeater = undefined;\n                this.appSwitchKeyRepeater = undefined;\n            }\n        });\n\n        if (typeof window !== 'undefined' && typeof window.VideoDecoder === 'function') {\n            setTimeout(action(() => {\n                this.decoders.unshift({\n                    name: 'WebCodecs',\n                    factory: WebCodecsDecoder,\n                });\n                this.selectedDecoder = this.decoders[0];\n            }), 0);\n        }\n    }\n\n    start = async () => {\n        if (!globalState.device) {\n            return;\n        }\n\n        try {\n            if (!state.selectedDecoder) {\n                throw new Error('No available decoder');\n            }\n\n            runInAction(() => {\n                this.serverTotalSize = 0;\n                this.serverDownloadedSize = 0;\n                this.debouncedServerDownloadedSize = 0;\n                this.serverUploadedSize = 0;\n                this.debouncedServerUploadedSize = 0;\n                this.connecting = true;\n            });\n\n            let intervalId = setInterval(action(() => {\n                this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n            }), 1000);\n\n            let serverBuffer: ArrayBuffer;\n\n            try {\n                serverBuffer = await fetchServer(action(([downloaded, total]) => {\n                    this.serverDownloadedSize = downloaded;\n                    this.serverTotalSize = total;\n                }));\n                runInAction(() => {\n                    this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                    this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            intervalId = setInterval(action(() => {\n                this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                this.debouncedServerUploadedSize = this.serverUploadedSize;\n            }), 1000);\n\n            try {\n                await pushServer(globalState.device, serverBuffer, {\n                    onProgress: action((progress) => {\n                        this.serverUploadedSize = progress;\n                    }),\n                });\n                runInAction(() => {\n                    this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                    this.debouncedServerUploadedSize = this.serverUploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            const encoders = await ScrcpyClient.getEncoders(\n                globalState.device,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                new ScrcpyOptions1_21({\n                    logLevel: ScrcpyLogLevel.Debug,\n                    bitRate: 4_000_000,\n                    tunnelForward: this.tunnelForward,\n                })\n            );\n            if (encoders.length === 0) {\n                throw new Error('No available encoder found');\n            }\n\n            runInAction(() => {\n                this.encoders = encoders;\n            });\n\n            // Run scrcpy once will delete the server file\n            // Re-push it\n            await pushServer(globalState.device, serverBuffer);\n\n            const factory = this.selectedDecoder.factory;\n            const decoder = new factory();\n            runInAction(() => {\n                this.decoder = decoder;\n            });\n\n            const client = new ScrcpyClient(globalState.device);\n            runInAction(() => this.log = []);\n            client.onOutput(action(line => this.log.push(line)));\n            client.onClose(this.stop);\n\n            client.onSizeChanged(action((size) => {\n                const { croppedWidth, croppedHeight, } = size;\n\n                this.log.push(`[client] Video size changed: ${croppedWidth}x${croppedHeight}`);\n\n                this.width = croppedWidth;\n                this.height = croppedHeight;\n\n                decoder.setSize(size);\n            }));\n\n            client.onVideoData(({ data }) => {\n                decoder.feed(data);\n            });\n\n            client.onClipboardChange(content => {\n                window.navigator.clipboard.writeText(content);\n            });\n\n            const options = new ScrcpyOptions1_21({\n                logLevel: ScrcpyLogLevel.Debug,\n                maxSize: this.resolution,\n                bitRate: this.bitRate,\n                lockVideoOrientation: ScrcpyScreenOrientation.Unlocked,\n                tunnelForward: this.tunnelForward,\n                encoderName: this.selectedEncoder ?? encoders[0],\n                codecOptions: new CodecOptions({\n                    profile: decoder.maxProfile,\n                    level: decoder.maxLevel,\n                }),\n            });\n\n            runInAction(() => {\n                this.log.push(`[client] Server version: ${SCRCPY_SERVER_VERSION}`);\n                this.log.push(`[client] Server arguments: ${options.formatServerArguments().join(' ')}`);\n            });\n\n            await client.start(\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                options,\n            );\n\n            runInAction(() => {\n                this.client = client;\n                this.running = true;\n            });\n        } catch (e: any) {\n            globalState.showErrorDialog(e.message);\n        } finally {\n            runInAction(() => {\n                this.connecting = false;\n            });\n        }\n    };\n\n    stop() {\n        this.decoder?.dispose();\n        this.decoder = undefined;\n\n        this.client?.close();\n        this.client = undefined;\n\n        this.running = false;\n    }\n\n    handleDeviceViewRef(element: DeviceViewRef | null) {\n        this.deviceView = element;\n    }\n\n    handleRendererContainerRef(element: HTMLDivElement | null) {\n        this.rendererContainer = element;\n        this.rendererContainer?.addEventListener('wheel', this.handleWheel, { passive: false });\n    };\n\n    handleBackPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.client!.pressBackOrTurnOnScreen(AndroidKeyEventAction.Down);\n    };\n\n    handleBackPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.client!.pressBackOrTurnOnScreen(AndroidKeyEventAction.Up);\n    };\n\n    handleHomePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.homeKeyRepeater?.press();\n    };\n\n    handleHomePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.homeKeyRepeater?.release();\n    };\n\n    handleAppSwitchPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.appSwitchKeyRepeater?.press();\n    };\n\n    handleAppSwitchPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.appSwitchKeyRepeater?.release();\n    };\n\n    handleCurrentEncoderChange(e?: any, option?: IDropdownOption) {\n        if (!option) {\n            return;\n        }\n\n        this.selectedEncoder = option.text;\n    }\n\n    handleSelectedDecoderChange(e?: any, option?: IDropdownOption) {\n        if (!option) {\n            return;\n        }\n\n        this.selectedDecoder = option.data;\n    }\n\n    handleResolutionChange(e: any, value?: string) {\n        if (value === undefined) {\n            return;\n        }\n        this.resolution = +value;\n    }\n\n    handleBitRateChange(e: any, value?: string) {\n        if (value === undefined) {\n            return;\n        }\n        this.bitRate = +value;\n    }\n\n    handleTunnelForwardChange(event: React.MouseEvent<HTMLElement>, checked?: boolean) {\n        if (checked === undefined) {\n            return;\n        }\n\n        this.tunnelForward = checked;\n    };\n\n    calculatePointerPosition(clientX: number, clientY: number) {\n        const view = this.rendererContainer!.getBoundingClientRect();\n        const pointerViewX = clientX - view.x;\n        const pointerViewY = clientY - view.y;\n        const pointerScreenX = clamp(pointerViewX / view.width, 0, 1) * this.width;\n        const pointerScreenY = clamp(pointerViewY / view.height, 0, 1) * this.height;\n\n        return {\n            x: pointerScreenX,\n            y: pointerScreenY,\n        };\n    }\n\n    injectTouch = (\n        action: AndroidMotionEventAction,\n        e: React.PointerEvent<HTMLDivElement>\n    ) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectTouch({\n            action,\n            pointerId: BigInt(e.pointerId),\n            pointerX: x,\n            pointerY: y,\n            pressure: e.pressure * 65535,\n            buttons: 0,\n        });\n    };\n\n    handlePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.rendererContainer!.focus();\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.injectTouch(AndroidMotionEventAction.Down, e);\n    };\n\n    handlePointerMove = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.buttons !== 1) {\n            return;\n        }\n        this.injectTouch(AndroidMotionEventAction.Move, e);\n    };\n\n    handlePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.releasePointerCapture(e.pointerId);\n        this.injectTouch(AndroidMotionEventAction.Up, e);\n    };\n\n    handleWheel = (e: WheelEvent) => {\n        if (!this.client) {\n            return;\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectScroll({\n            pointerX: x,\n            pointerY: y,\n            scrollX: -Math.sign(e.deltaX),\n            scrollY: -Math.sign(e.deltaY),\n        });\n    };\n\n    handleKeyDown = async (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { key, code } = e;\n        if (key.match(/^[a-z0-9]$/i)) {\n            this.client!.injectText(key);\n            return;\n        }\n\n        const keyCode = ({\n            Backspace: AndroidKeyCode.Delete,\n            Space: AndroidKeyCode.Space,\n        } as Record<string, AndroidKeyCode | undefined>)[code];\n\n        if (keyCode) {\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Down,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Up,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n        }\n    };\n}\n\nconst state = new ScrcpyPageState();\n\nconst ConnectionDialog = observer(() => {\n    const layerHostId = useId('layerHost');\n\n    const [isClient, setIsClient] = useState(false);\n\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    if (!isClient) {\n        return null;\n    }\n\n    return (\n        <>\n            <LayerHost id={layerHostId} style={{ position: 'absolute', top: 0, bottom: 0, left: 0, right: 0, margin: 0, pointerEvents: 'none' }} />\n\n            <Dialog\n                hidden={!state.connecting}\n                modalProps={{ layerProps: { hostId: layerHostId } }}\n                dialogContentProps={{ title: 'Connecting...' }}\n            >\n                <Stack tokens={CommonStackTokens}>\n                    <ProgressIndicator\n                        label=\"1. Downloading scrcpy server...\"\n                        percentComplete={state.serverTotalSize ? state.serverDownloadedSize / state.serverTotalSize : undefined}\n                        description={formatSpeed(state.debouncedServerDownloadedSize, state.serverTotalSize, state.serverDownloadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"2. Pushing scrcpy server to device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverDownloadedSize !== state.serverTotalSize}\n                        percentComplete={state.serverUploadedSize / state.serverTotalSize}\n                        description={formatSpeed(state.debouncedServerUploadedSize, state.serverTotalSize, state.serverUploadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"3. Starting scrcpy server on device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverUploadedSize !== state.serverTotalSize}\n                    />\n                </Stack>\n            </Dialog>\n        </>\n    );\n});\n\nconst Scrcpy: NextPage = () => {\n    const bottomElement = (\n        <Stack verticalFill horizontalAlign=\"center\" style={{ background: '#999' }}>\n            <Stack verticalFill horizontal style={{ width: '100%', maxWidth: 300 }} horizontalAlign=\"space-evenly\" verticalAlign=\"center\">\n                <IconButton\n                    iconProps={{ iconName: Icons.Play }}\n                    style={{ transform: 'rotate(180deg)', color: 'white' }}\n                    onPointerDown={state.handleBackPointerDown}\n                    onPointerUp={state.handleBackPointerUp}\n                />\n                <IconButton\n                    iconProps={{ iconName: Icons.Circle }}\n                    style={{ color: 'white' }}\n                    onPointerDown={state.handleHomePointerDown}\n                    onPointerUp={state.handleHomePointerUp}\n                />\n                <IconButton\n                    iconProps={{ iconName: Icons.Stop }}\n                    style={{ color: 'white' }}\n                    onPointerDown={state.handleAppSwitchPointerDown}\n                    onPointerUp={state.handleAppSwitchPointerUp}\n                />\n            </Stack>\n        </Stack>\n    );\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Scrcpy - WebADB</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} farItems={state.commandBarFarItems} />\n\n            <Stack horizontal grow styles={{ root: { height: 0 } }}>\n                <DeviceView\n                    ref={state.handleDeviceViewRef}\n                    width={state.width}\n                    height={state.height}\n                    bottomElement={bottomElement}\n                    bottomHeight={40}\n                >\n                    <div\n                        ref={state.handleRendererContainerRef}\n                        tabIndex={-1}\n                        onPointerDown={state.handlePointerDown}\n                        onPointerMove={state.handlePointerMove}\n                        onPointerUp={state.handlePointerUp}\n                        onPointerCancel={state.handlePointerUp}\n                        onKeyDown={state.handleKeyDown}\n                    />\n                </DeviceView>\n\n                <div style={{\n                    padding: 12,\n                    overflow: 'hidden auto',\n                    display: state.logVisible ? 'block' : 'none',\n                    width: 500,\n                    fontFamily: 'monospace',\n                    overflowY: 'auto',\n                    whiteSpace: 'pre-wrap',\n                    wordWrap: 'break-word',\n                }}>\n                    {state.log.map((line, index) => (\n                        <div key={index}>\n                            {line}\n                        </div>\n                    ))}\n                </div>\n\n                <div style={{ padding: 12, overflow: 'hidden auto', display: state.settingsVisible ? 'block' : 'none', width: 300 }}>\n                    <div>Changes will take effect on next connection</div>\n\n                    <Dropdown\n                        label=\"Encoder\"\n                        options={state.encoders.map(item => ({ key: item, text: item }))}\n                        selectedKey={state.selectedEncoder}\n                        placeholder=\"Connect once to retrieve encoder list\"\n                        onChange={state.handleCurrentEncoderChange}\n                    />\n\n                    {state.decoders.length > 1 && (\n                        <Dropdown\n                            label=\"Decoder\"\n                            options={state.decoders.map(item => ({ key: item.name, text: item.name, data: item }))}\n                            selectedKey={state.selectedDecoder.name}\n                            onChange={state.handleSelectedDecoderChange}\n                        />\n                    )}\n\n                    <SpinButton\n                        label=\"Max Resolution (longer side, 0 = unlimited)\"\n                        labelPosition={Position.top}\n                        value={state.resolution.toString()}\n                        min={0}\n                        max={2560}\n                        step={100}\n                        onChange={state.handleResolutionChange}\n                    />\n\n                    <SpinButton\n                        label=\"Max Bit Rate\"\n                        labelPosition={Position.top}\n                        value={state.bitRate.toString()}\n                        min={100}\n                        max={10_000_000}\n                        step={100}\n                        onChange={state.handleBitRateChange}\n                    />\n\n                    <Toggle\n                        label={\n                            <>\n                                <span>Use forward connection{' '}</span>\n                                <TooltipHost content=\"Old Android devices may not support reverse connection when using ADB over WiFi\">\n                                    <Icon iconName={Icons.Info} />\n                                </TooltipHost>\n                            </>\n                        }\n                        checked={state.tunnelForward}\n                        onChange={state.handleTunnelForwardChange}\n                    />\n                </div>\n\n                <DemoMode\n                    style={{ display: state.demoModeVisible ? 'block' : 'none' }}\n                />\n\n                <ConnectionDialog />\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default observer(Scrcpy);\n","module.exports = require('./dist/shared/lib/head')\n"],"names":["window","__NEXT_P","push","ScrcpyControlMessageType","AndroidMotionEventAction","LayerHost","props","id","className","useUnmount","css","unmountFunction","unmountRef","current","ScrcpyInjectTouchControlMessage","uint8","InjectTouch","uint64","uint32","uint16","ScrcpyInjectTextControlMessage","InjectText","string","lengthField","AndroidKeyEventAction","AndroidKeyCode","ScrcpyInjectKeyCodeControlMessage","InjectKeycode","ScrcpyInjectScrollControlMessage","InjectScroll","int32","delay","time","Promise","resolve","globalThis","setTimeout","TextEncoder","Utf8Decoder","TextDecoder","ScrcpyClientConnection","constructor","device","this","initialize","dispose","ScrcpyClientForwardConnection","connect","createSocket","connectAndRetry","i","e","Error","connectAndReadByte","stream","read","getStreams","ScrcpyClientReverseConnection","reverse","remove","_a","streams","address","add","onSocket","packet","enqueue","accept","dequeue","DEFAULT_SERVER_PATH","ScrcpyLogLevel","ScrcpyScreenOrientation","toScrcpyOptionValue","value","empty","toOptionValue","isScrcpyOptionValue","undefined","CodecOptions","entries","Object","filter","key","length","map","join","ScrcpyBackOrScreenOnEvent1_16","ScrcpyOptions1_16","logLevel","Verbose","Debug","lockVideoOrientation","Initial","Unlocked","getArgumnetOrder","getDefaultValue","maxSize","bitRate","maxFps","tunnelForward","crop","sendFrameMeta","control","displayId","showTouches","stayAwake","codecOptions","encoderName","formatServerArguments","defaults","createConnection","getOutputEncoderNameRegex","createBackOrScreenOnEvent","action","Down","serialize","type","BackOrScreenOn","ScrcpyBackOrScreenOnEvent1_18","ScrcpyOptions1_18","super","concat","assign","powerOffOnClose","ScrcpyOptions1_21","init","clipboardAutosync","pair","input","replace","toLowerCase","pushServer","file","options","path","onProgress","sync","write","BitReader","buffer","bytePosition","bitPosition","result","next","decodeExponentialGolombNumber","parse_sequence_parameter_set","nalu","start","writeIndex","zeroCount","inEmulation","byte","lastZeroCount","subarray","iterateNalu","Uint8Array","reader","nal_ref_idc","profile_idc","constraint_set","constraint_set_reader","constraint_set0_flag","constraint_set1_flag","constraint_set2_flag","constraint_set3_flag","constraint_set4_flag","constraint_set5_flag","level_idc","seq_parameter_set_id","chroma_format_idc","seq_scaling_list_present_flag","pic_order_cnt_type","num_ref_frames_in_pic_order_cnt_cycle","offset_for_ref_frame","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","frame_cropping_flag","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","Size","VideoPacket","int64","arrayBuffer","NoPts","BigInt","ClipboardMessage","ScrcpyClient","outputEvent","closeEvent","_running","sizeChangedEvent","videoDataEvent","clipboardChangeEvent","sendingTouchMessage","version","resolver","encoderNameRegex","encoders","client","onOutput","line","match","onClose","promise","backend","event","_screenWidth","_screenHeight","connection","process","childProcess","spawn","shells","onStdout","handleProcessOutput","removeExitListener","onExit","reject","videoStream","controlStream","race","handleProcessClosed","receiveVideo","receiveControl","kill","data","text","decode","index","indexOf","substring","splitLines","fire","width","height","deserialize","pts","byteLength","sequenceParameterSet","slice","cropLeft","cropRight","cropTop","cropBottom","screenWidth","screenHeight","croppedWidth","croppedHeight","array","set","size","content","injectKeyCode","message","injectText","injectTouch","Move","injectScroll","pressBackOrTurnOnScreen","close","_b","_c","AndroidCodecProfile","AndroidCodecLevel","worker","workerReady","pendingResolvers","streamId","pictureReadyEvent","TinyH264Wrapper","addDisposable","handlePictureReady","renderStateId","feed","postMessage","offset","cachedInitializePromise","all","then","YuvBuffer","default","YuvCanvas","TinyH264Decoder","maxProfile","Baseline","maxLevel","Level4","_element","document","createElement","setSize","_initializer","_yuvCanvas","attach","chromaWidth","chromaHeight","format","cropWidth","cropHeight","displayWidth","displayHeight","wrapper","Worker","URL","addEventListener","decoder","createTinyH264Wrapper","uPlaneOffset","vPlaneOffset","onPictureReady","frame","lumaPlane","chromaPlane","drawFrame","toHex","toString","padStart","toUpperCase","WebCodecsDecoder","High","Level5","context","getContext","VideoDecoder","output","drawImage","error","codec","configure","optimizeForLatency","EncodedVideoChunk","timestamp","cachedValue","SERVER_URL","FetchWithProgress","url","_downloaded","_total","progressEvent","EventEmitter","fetch","downloaded","total","response","chunks","position","chunk","Number","parseInt","headers","get","body","getReader","done","reduce","item","clamp","min","max","KeyRepeater","interval","press","timeoutId","keyCode","repeat","metaState","intervalId","setInterval","onRelease","clearInterval","clearTimeout","release","Up","state","ScrcpyPageState","running","deviceView","rendererContainer","logVisible","log","settingsVisible","demoModeVisible","selectedEncoder","decoders","name","factory","selectedDecoder","resolution","connecting","serverTotalSize","serverDownloadedSize","debouncedServerDownloadedSize","serverDownloadSpeed","serverUploadedSize","debouncedServerUploadedSize","serverUploadSpeed","homeKeyRepeater","appSwitchKeyRepeater","serverBuffer","globalState","runInAction","catch","progress","getEncoders","SCRCPY_SERVER_VERSION","stop","onSizeChanged","onVideoData","onClipboardChange","navigator","clipboard","writeText","profile","level","handleBackPointerDown","button","currentTarget","setPointerCapture","pointerId","handleBackPointerUp","handleHomePointerDown","handleHomePointerUp","handleAppSwitchPointerDown","handleAppSwitchPointerUp","calculatePointerPosition","clientX","clientY","x","y","pointerX","pointerY","pressure","buttons","handlePointerDown","focus","handlePointerMove","handlePointerUp","releasePointerCapture","handleWheel","preventDefault","stopPropagation","scrollX","Math","sign","deltaX","scrollY","deltaY","handleKeyDown","code","Backspace","Delete","Space","makeAutoObservable","observable","handleDeviceViewRef","handleRendererContainerRef","handleCurrentEncoderChange","handleSelectedDecoderChange","handleResolutionChange","handleTunnelForwardChange","handleBitRateChange","autorun","firstChild","appendChild","element","Home","AppSwitch","unshift","commandBarItems","iconProps","iconName","Icons","onClick","disabled","enterFullscreen","commandBarFarItems","checked","iconOnly","tooltipHostProps","p","ExternalLink","href","spaceAfter","calloutProps","calloutMaxWidth","passive","option","view","getBoundingClientRect","pointerViewX","pointerViewY","ConnectionDialog","observer","layerHostId","useId","useState","isClient","setIsClient","useEffect","style","top","bottom","left","right","margin","pointerEvents","Dialog","hidden","modalProps","layerProps","hostId","dialogContentProps","title","Stack","tokens","CommonStackTokens","ProgressIndicator","label","percentComplete","description","formatSpeed","progressHidden","bottomElement","verticalFill","horizontalAlign","background","horizontal","maxWidth","verticalAlign","IconButton","transform","color","onPointerDown","onPointerUp","RouteStackProps","Head","CommandBar","items","farItems","grow","styles","root","DeviceView","ref","bottomHeight","div","tabIndex","onPointerMove","onPointerCancel","onKeyDown","padding","overflow","display","fontFamily","overflowY","whiteSpace","wordWrap","Dropdown","selectedKey","placeholder","onChange","SpinButton","labelPosition","Position","step","Toggle","span","TooltipHost","Icon","DemoMode","module","exports"],"sourceRoot":""}