{"version":3,"file":"static/chunks/pages/scrcpy-e21c1e775072c419.js","mappings":"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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.67.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Layer/LayerHost.js","webpack://_N_E/?5356","webpack://_N_E/./src/pages/scrcpy.tsx","webpack://_N_E/../../libraries/scrcpy/bin/version.js","webpack://_N_E/../../libraries/scrcpy/esm/message.js","webpack://_N_E/../../libraries/scrcpy/esm/client.js","webpack://_N_E/../../libraries/scrcpy/esm/codec.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/tinyh264/wrapper.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/tinyh264/index.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/web-codecs/index.js","webpack://_N_E/../../libraries/scrcpy/esm/utils.js","webpack://_N_E/../../libraries/scrcpy/esm/connection.js","webpack://_N_E/../../libraries/scrcpy/esm/options/common.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_16/sps.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_16/index.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_18.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_21.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_22.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_23.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_24.js","webpack://_N_E/../../libraries/scrcpy/esm/push-server.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nexport var LayerHost = function (props) {\n    var className = props.className;\n    var layerHostId = React.useState(function () { return getId(); })[0];\n    var _a = props.id, hostId = _a === void 0 ? layerHostId : _a;\n    var layerHostRef = React.useRef({\n        hostId: hostId,\n        rootRef: React.useRef(null),\n        notifyLayersChanged: function () {\n            // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n        },\n    });\n    React.useImperativeHandle(props.componentRef, function () { return layerHostRef.current; });\n    React.useEffect(function () {\n        registerLayerHost(hostId, layerHostRef.current);\n        notifyHostChanged(hostId);\n        // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n    }, []);\n    useUnmount(function () {\n        unregisterLayerHost(hostId, layerHostRef.current);\n        notifyHostChanged(hostId);\n    });\n    return React.createElement(\"div\", __assign({}, props, { className: css('ms-LayerHost', className), ref: layerHostRef.current.rootRef }));\n};\n//# sourceMappingURL=LayerHost.js.map","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/scrcpy\",\n      function () {\n        return require(\"private-next-pages/scrcpy.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/scrcpy\"])\n      });\n    }\n  ","import { CommandBar, Dialog, Dropdown, ICommandBarItemProps, Icon, IconButton, IDropdownOption, LayerHost, Position, ProgressIndicator, SpinButton, Stack, Toggle, TooltipHost } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { makeStyles } from \"@griffel/react\";\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { CSSProperties, ReactNode, useEffect, useState } from \"react\";\n\nimport { ADB_SYNC_MAX_PACKET_SIZE, ChunkStream, InspectStream, ReadableStream, WritableStream } from '@yume-chan/adb';\nimport { EventEmitter } from \"@yume-chan/event\";\nimport { AndroidKeyCode, AndroidKeyEventAction, AndroidMotionEventAction, CodecOptions, DEFAULT_SERVER_PATH, pushServer, ScrcpyClient, ScrcpyLogLevel, ScrcpyOptions1_24, ScrcpyScreenOrientation, TinyH264Decoder, WebCodecsDecoder, type H264Decoder, type H264DecoderConstructor, type VideoStreamPacket } from \"@yume-chan/scrcpy\";\nimport SCRCPY_SERVER_VERSION from '@yume-chan/scrcpy/bin/version';\n\nimport { DemoModePanel, DeviceView, DeviceViewRef, ExternalLink } from \"../components\";\nimport { globalState } from \"../state\";\nimport { CommonStackTokens, formatSpeed, Icons, ProgressStream, RouteStackProps } from \"../utils\";\n\nconst SERVER_URL = new URL('@yume-chan/scrcpy/bin/scrcpy-server?url', import.meta.url).toString();\n\nclass FetchWithProgress {\n    public readonly promise: Promise<Uint8Array>;\n\n    private _downloaded = 0;\n    public get downloaded() { return this._downloaded; }\n\n    private _total = 0;\n    public get total() { return this._total; }\n\n    private progressEvent = new EventEmitter<[download: number, total: number]>();\n    public get onProgress() { return this.progressEvent.event; }\n\n    public constructor(url: string) {\n        this.promise = this.fetch(url);\n    }\n\n    private async fetch(url: string) {\n        const response = await window.fetch(url);\n        this._total = Number.parseInt(response.headers.get('Content-Length') ?? '0', 10);\n        this.progressEvent.fire([this._downloaded, this._total]);\n\n        const reader = response.body!.getReader();\n        const chunks: Uint8Array[] = [];\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                break;\n            }\n            chunks.push(result.value);\n            this._downloaded += result.value.byteLength;\n            this.progressEvent.fire([this._downloaded, this._total]);\n        }\n\n        this._total = chunks.reduce((result, item) => result + item.byteLength, 0);\n        const result = new Uint8Array(this._total);\n        let position = 0;\n        for (const chunk of chunks) {\n            result.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return result;\n    }\n}\n\nlet cachedValue: FetchWithProgress | undefined;\nfunction fetchServer(onProgress?: (e: [downloaded: number, total: number]) => void) {\n    if (!cachedValue) {\n        cachedValue = new FetchWithProgress(SERVER_URL);\n        cachedValue.promise.catch((e) => {\n            cachedValue = undefined;\n        });\n    }\n\n    if (onProgress) {\n        cachedValue.onProgress(onProgress);\n        onProgress([cachedValue.downloaded, cachedValue.total]);\n    }\n\n    return cachedValue.promise;\n}\n\nfunction clamp(value: number, min: number, max: number): number {\n    if (value < min) {\n        return min;\n    }\n\n    if (value > max) {\n        return max;\n    }\n\n    return value;\n}\n\ninterface DecoderDefinition {\n    key: string;\n    name: string;\n    Constructor: H264DecoderConstructor;\n}\n\ninterface Settings {\n    maxSize: number;\n    bitRate: number;\n    tunnelForward?: boolean;\n    encoder?: string;\n    decoder?: string;\n    ignoreDecoderCodecArgs?: boolean;\n}\n\ninterface SettingDefinitionBase {\n    key: keyof Settings;\n    type: string;\n    label: string;\n    description?: string;\n}\n\ninterface DropdownSettingDefinition extends SettingDefinitionBase {\n    type: 'dropdown';\n    placeholder?: string;\n    options: IDropdownOption[];\n}\n\ninterface ToggleSettingDefinition extends SettingDefinitionBase {\n    type: 'toggle',\n}\n\ninterface NumberSettingDefinition extends SettingDefinitionBase {\n    type: 'number',\n    min?: number;\n    max?: number;\n    step?: number;\n}\n\ntype SettingDefinition =\n    DropdownSettingDefinition |\n    ToggleSettingDefinition |\n    NumberSettingDefinition;\n\ninterface SettingItemProps {\n    definition: SettingDefinition;\n    settings: any;\n    onChange: (key: keyof Settings, value: any) => void;\n}\n\nconst SettingItem = observer(function SettingItem({\n    definition,\n    settings,\n    onChange,\n}: SettingItemProps) {\n    let label: string | JSX.Element;\n    if (definition.description) {\n        label = (\n            <>\n                <span>{definition.label}{' '}</span>\n                <TooltipHost content={definition.description}>\n                    <Icon iconName={Icons.Info} />\n                </TooltipHost>\n            </>\n        );\n    } else {\n        label = definition.label;\n    }\n\n    switch (definition.type) {\n        case 'dropdown':\n            return (\n                <Dropdown\n                    label={definition.label}\n                    options={definition.options}\n                    placeholder={definition.placeholder}\n                    selectedKey={settings[definition.key]}\n                    onChange={(e, option) => onChange(definition.key, option!.key)}\n                />\n            );\n        case 'toggle':\n            return (\n                <Toggle\n                    label={label}\n                    checked={settings[definition.key]}\n                    onChange={(e, checked) => onChange(definition.key, checked)}\n                />\n            );\n        case 'number':\n            return (\n                <SpinButton\n                    label={definition.label}\n                    labelPosition={Position.top}\n                    min={definition.min}\n                    max={definition.max}\n                    step={definition.step}\n                    value={settings[definition.key].toString()}\n                    onChange={(e, value) => onChange(definition.key, Number.parseInt(value!, 10))}\n                />\n            );\n    }\n});\n\nclass ScrcpyPageState {\n    running = false;\n\n    deviceView: DeviceViewRef | null = null;\n    rendererContainer: HTMLDivElement | null = null;\n\n    logVisible = false;\n    log: string[] = [];\n    settingsVisible = false;\n    demoModeVisible = false;\n    navigationBarVisible = true;\n\n    width = 0;\n    height = 0;\n    rotate = 0;\n\n    get rotatedWidth() { return state.rotate & 1 ? state.height : state.width; }\n    get rotatedHeight() { return state.rotate & 1 ? state.width : state.height; }\n\n    client: ScrcpyClient | undefined = undefined;\n\n    encoders: string[] = [];\n\n    decoders: DecoderDefinition[] = [{\n        key: 'tinyh264',\n        name: 'TinyH264 (Software)',\n        Constructor: TinyH264Decoder,\n    }];\n    decoder: H264Decoder | undefined = undefined;\n\n    connecting = false;\n    serverTotalSize = 0;\n    serverDownloadedSize = 0;\n    debouncedServerDownloadedSize = 0;\n    serverDownloadSpeed = 0;\n    serverUploadedSize = 0;\n    debouncedServerUploadedSize = 0;\n    serverUploadSpeed = 0;\n\n    get commandBarItems() {\n        const result: ICommandBarItemProps[] = [];\n\n        if (!this.running) {\n            result.push({\n                key: 'start',\n                disabled: !globalState.device,\n                iconProps: { iconName: Icons.Play },\n                text: 'Start',\n                onClick: this.start as VoidFunction,\n            });\n        } else {\n            result.push({\n                key: 'stop',\n                iconProps: { iconName: Icons.Stop },\n                text: 'Stop',\n                onClick: this.stop as VoidFunction,\n            });\n        }\n\n        result.push({\n            key: 'fullscreen',\n            disabled: !this.running,\n            iconProps: { iconName: Icons.FullScreenMaximize },\n            iconOnly: true,\n            text: 'Fullscreen',\n            onClick: () => { this.deviceView?.enterFullscreen(); },\n        });\n\n        result.push({\n            key: 'rotateDevice',\n            disabled: !this.running,\n            iconProps: { iconName: Icons.Orientation },\n            iconOnly: true,\n            text: 'Rotate Device',\n            onClick: () => { this.client!.rotateDevice(); },\n        });\n\n        result.push({\n            key: 'rotateVideoLeft',\n            disabled: !this.running,\n            iconProps: { iconName: Icons.RotateLeft },\n            iconOnly: true,\n            text: 'Rotate Video Left',\n            onClick: () => {\n                this.rotate -= 1;\n                if (this.rotate < 0) {\n                    this.rotate = 3;\n                }\n            }\n        });\n\n        result.push({\n            key: 'rotateVideoRight',\n            disabled: !this.running,\n            iconProps: { iconName: Icons.RotateRight },\n            iconOnly: true,\n            text: 'Rotate Video Right',\n            onClick: () => {\n                this.rotate = (this.rotate + 1) & 3;\n            },\n        });\n\n        return result;\n    }\n\n    get commandBarFarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: 'NavigationBar',\n                iconProps: { iconName: Icons.PanelBottom },\n                checked: this.navigationBarVisible,\n                text: 'Navigation Bar',\n                iconOnly: true,\n                onClick: action(() => {\n                    this.navigationBarVisible = !this.navigationBarVisible;\n                }),\n            },\n            {\n                key: 'Log',\n                iconProps: { iconName: Icons.TextGrammarError },\n                checked: this.logVisible,\n                text: 'Log',\n                iconOnly: true,\n                onClick: action(() => {\n                    this.logVisible = !this.logVisible;\n                }),\n            },\n            {\n                key: 'Settings',\n                iconProps: { iconName: Icons.Settings },\n                checked: this.settingsVisible,\n                text: 'Settings',\n                iconOnly: true,\n                onClick: action(() => {\n                    this.settingsVisible = !this.settingsVisible;\n                }),\n            },\n            {\n                key: 'DemoMode',\n                iconProps: { iconName: Icons.Wand },\n                checked: this.demoModeVisible,\n                text: 'Demo Mode',\n                iconOnly: true,\n                onClick: action(() => {\n                    this.demoModeVisible = !this.demoModeVisible;\n                }),\n            },\n            {\n                key: 'info',\n                iconProps: { iconName: Icons.Info },\n                iconOnly: true,\n                tooltipHostProps: {\n                    content: (\n                        <>\n                            <p>\n                                <ExternalLink href=\"https://github.com/Genymobile/scrcpy\" spaceAfter>Scrcpy</ExternalLink>\n                                developed by Genymobile can display the screen with low latency (1~2 frames) and control the device, all without root access.\n                            </p>\n                            <p>\n                                This is a TypeScript implementation of the client part. Paired with official pre-built server binary.\n                            </p>\n                        </>\n                    ),\n                    calloutProps: {\n                        calloutMaxWidth: 300,\n                    }\n                },\n            }\n        ];\n    }\n\n    settings: Settings = {\n        maxSize: 1080,\n        bitRate: 4_000_000,\n    };\n\n    get settingDefinitions() {\n        const result: SettingDefinition[] = [];\n\n        result.push({\n            key: 'encoder',\n            type: 'dropdown',\n            label: 'Encoder',\n            placeholder: 'Connect once to retrieve encoder list',\n            options: this.encoders.map(item => ({\n                key: item,\n                text: item,\n            })),\n        });\n\n        if (this.decoders.length > 1) {\n            result.push({\n                key: 'decoder',\n                type: 'dropdown',\n                label: 'Decoder',\n                options: this.decoders.map(item => ({\n                    key: item.key,\n                    text: item.name,\n                    data: item,\n                })),\n            });\n        }\n\n        result.push({\n            key: 'ignoreDecoderCodecArgs',\n            type: 'toggle',\n            label: `Ignore decoder's codec arguments`,\n            description: `Some decoders don't support all H.264 profile/levels, so they request the device to encode at their highest-supported codec. However, some super old devices may not support that codec so their encoders will fail to start. Use this option to let device choose the codec to be used.`,\n        });\n\n        result.push({\n            key: 'maxSize',\n            type: 'number',\n            label: 'Max Resolution (longer side, 0 = unlimited)',\n            min: 0,\n            max: 2560,\n            step: 50,\n        });\n\n        result.push({\n            key: 'bitRate',\n            type: 'number',\n            label: 'Max Bit Rate',\n            min: 100,\n            max: 100_000_000,\n            step: 100,\n        });\n\n        result.push({\n            key: 'tunnelForward',\n            type: 'toggle',\n            label: 'Use forward connection',\n            description: 'Android before version 9 has a bug that prevents reverse tunneling when using ADB over WiFi.'\n        });\n\n        return result;\n    }\n\n    constructor() {\n        makeAutoObservable(this, {\n            decoders: observable.shallow,\n            settings: observable.deep,\n            start: false,\n            stop: action.bound,\n            handleDeviceViewRef: action.bound,\n            handleRendererContainerRef: action.bound,\n            handleBackPointerDown: false,\n            handleBackPointerUp: false,\n            handleHomePointerDown: false,\n            handleHomePointerUp: false,\n            handleAppSwitchPointerDown: false,\n            handleAppSwitchPointerUp: false,\n            calculatePointerPosition: false,\n            injectTouch: false,\n            handlePointerDown: false,\n            handlePointerMove: false,\n            handlePointerUp: false,\n            handleWheel: false,\n            handleContextMenu: false,\n            handleKeyDown: false,\n        });\n\n        autorun(() => {\n            if (globalState.device) {\n                runInAction(() => {\n                    this.encoders = [];\n                    this.settings.encoder = undefined;\n                });\n            } else {\n                this.stop();\n            }\n        });\n\n        autorun(() => {\n            if (this.rendererContainer && this.decoder) {\n                while (this.rendererContainer.firstChild) {\n                    this.rendererContainer.firstChild.remove();\n                }\n                this.rendererContainer.appendChild(this.decoder.renderer);\n            }\n        });\n\n        autorun(() => {\n            this.settings.decoder = this.decoders[0].key;\n        });\n\n        if (typeof window !== 'undefined' && typeof window.VideoDecoder === 'function') {\n            setTimeout(action(() => {\n                this.decoders.unshift({\n                    key: 'webcodecs',\n                    name: 'WebCodecs',\n                    Constructor: WebCodecsDecoder,\n                });\n            }), 0);\n        }\n    }\n\n    start = async () => {\n        if (!globalState.device) {\n            return;\n        }\n\n        try {\n            if (!this.settings.decoder) {\n                throw new Error('No available decoder');\n            }\n\n            runInAction(() => {\n                this.serverTotalSize = 0;\n                this.serverDownloadedSize = 0;\n                this.debouncedServerDownloadedSize = 0;\n                this.serverUploadedSize = 0;\n                this.debouncedServerUploadedSize = 0;\n                this.connecting = true;\n            });\n\n            let intervalId = setInterval(action(() => {\n                this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n            }), 1000);\n\n            let serverBuffer: Uint8Array;\n\n            try {\n                serverBuffer = await fetchServer(action(([downloaded, total]) => {\n                    this.serverDownloadedSize = downloaded;\n                    this.serverTotalSize = total;\n                }));\n                runInAction(() => {\n                    this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                    this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            intervalId = setInterval(action(() => {\n                this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                this.debouncedServerUploadedSize = this.serverUploadedSize;\n            }), 1000);\n\n            try {\n                await new ReadableStream<Uint8Array>({\n                    start(controller) {\n                        controller.enqueue(serverBuffer);\n                        controller.close();\n                    },\n                })\n                    .pipeThrough(new ChunkStream(ADB_SYNC_MAX_PACKET_SIZE))\n                    .pipeThrough(new ProgressStream(action((progress) => {\n                        this.serverUploadedSize = progress;\n                    })))\n                    .pipeTo(pushServer(globalState.device));\n\n                runInAction(() => {\n                    this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                    this.debouncedServerUploadedSize = this.serverUploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            const encoders = await ScrcpyClient.getEncoders(\n                globalState.device,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                new ScrcpyOptions1_24({\n                    logLevel: ScrcpyLogLevel.Debug,\n                    bitRate: 4_000_000,\n                    tunnelForward: this.settings.tunnelForward,\n                    sendDeviceMeta: false,\n                    sendDummyByte: false,\n                    control: false,\n                    // Don't cleanup when getting encoders,\n                    // so doesn't need to push server binary again\n                    cleanup: false,\n                })\n            );\n            if (encoders.length === 0) {\n                throw new Error('No available encoder found');\n            }\n\n            runInAction(() => {\n                this.encoders = encoders;\n            });\n\n            const decoderDefinition = this.decoders.find(x => x.key === this.settings.decoder) ?? this.decoders[0];\n            const decoder = new decoderDefinition.Constructor();\n            runInAction(() => {\n                this.decoder = decoder;\n            });\n\n            const options = new ScrcpyOptions1_24({\n                logLevel: ScrcpyLogLevel.Debug,\n                ...this.settings,\n                lockVideoOrientation: ScrcpyScreenOrientation.Unlocked,\n                encoderName: this.settings.encoder ?? encoders[0],\n                sendDeviceMeta: false,\n                sendDummyByte: false,\n                codecOptions: !this.settings.ignoreDecoderCodecArgs\n                    ? new CodecOptions({\n                        profile: decoder.maxProfile,\n                        level: decoder.maxLevel,\n                    })\n                    : undefined,\n            });\n\n            runInAction(() => {\n                this.log = [];\n                this.log.push(`[client] Server version: ${SCRCPY_SERVER_VERSION}`);\n                this.log.push(`[client] Server arguments: ${options.formatServerArguments().join(' ')}`);\n            });\n\n            const client = await ScrcpyClient.start(\n                globalState.device,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                options\n            );\n\n            client.stdout.pipeTo(new WritableStream<string>({\n                write: action((line) => {\n                    this.log.push(line);\n                }),\n            }));\n\n            client.videoStream\n                .pipeThrough(new InspectStream(action((packet: VideoStreamPacket) => {\n                    if (packet.type === 'configuration') {\n                        const { croppedWidth, croppedHeight, } = packet.data;\n                        this.log.push(`[client] Video size changed: ${croppedWidth}x${croppedHeight}`);\n\n                        this.width = croppedWidth;\n                        this.height = croppedHeight;\n                    }\n                })))\n                .pipeTo(decoder.writable)\n                .catch(() => { });\n\n            client.exit.then(() => this.stop());\n\n            client.onClipboardChange(content => {\n                window.navigator.clipboard.writeText(content);\n            });\n\n            runInAction(() => {\n                this.client = client;\n                this.running = true;\n            });\n        } catch (e: any) {\n            globalState.showErrorDialog(e);\n        } finally {\n            runInAction(() => {\n                this.connecting = false;\n            });\n        }\n    };\n\n    async stop() {\n        // Request to close client first\n        await this.client?.close();\n\n        // Otherwise some packets may still arrive at decoder\n        this.decoder?.dispose();\n\n        runInAction(() => {\n            this.client = undefined;\n            this.decoder = undefined;\n            this.running = false;\n        });\n    }\n\n    handleDeviceViewRef(element: DeviceViewRef | null) {\n        this.deviceView = element;\n    }\n\n    handleRendererContainerRef(element: HTMLDivElement | null) {\n        this.rendererContainer = element;\n        this.rendererContainer?.addEventListener('wheel', this.handleWheel, { passive: false });\n    };\n\n    handleBackPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n\n        this.client.pressBackOrTurnOnScreen(AndroidKeyEventAction.Down);\n    };\n\n    handleBackPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n\n        this.client.pressBackOrTurnOnScreen(AndroidKeyEventAction.Up);\n    };\n\n    handleHomePointerDown = async (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Down,\n            keyCode: AndroidKeyCode.Home,\n            repeat: 0,\n            metaState: 0,\n        });\n    };\n\n    handleHomePointerUp = async (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Up,\n            keyCode: AndroidKeyCode.Home,\n            repeat: 0,\n            metaState: 0,\n        });\n    };\n\n    handleAppSwitchPointerDown = async (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Down,\n            keyCode: AndroidKeyCode.AppSwitch,\n            repeat: 0,\n            metaState: 0,\n        });\n    };\n\n    handleAppSwitchPointerUp = async (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Up,\n            keyCode: AndroidKeyCode.AppSwitch,\n            repeat: 0,\n            metaState: 0,\n        });\n    };\n\n    calculatePointerPosition(clientX: number, clientY: number) {\n        const viewRect = this.rendererContainer!.getBoundingClientRect();\n        let pointerViewX = clamp((clientX - viewRect.x) / viewRect.width, 0, 1);\n        let pointerViewY = clamp((clientY - viewRect.y) / viewRect.height, 0, 1);\n\n        if (this.rotate & 1) {\n            ([pointerViewX, pointerViewY] = [pointerViewY, pointerViewX]);\n        }\n        switch (this.rotate) {\n            case 1:\n                pointerViewY = 1 - pointerViewY;\n                break;\n            case 2:\n                pointerViewX = 1 - pointerViewX;\n                pointerViewY = 1 - pointerViewY;\n                break;\n            case 3:\n                pointerViewX = 1 - pointerViewX;\n                break;\n        }\n\n        return {\n            x: pointerViewX * this.width,\n            y: pointerViewY * this.height,\n        };\n    }\n\n    injectTouch = (\n        action: AndroidMotionEventAction,\n        e: React.PointerEvent<HTMLDivElement>\n    ) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectTouch({\n            action,\n            pointerId: e.pointerType === \"mouse\" ? BigInt(-1) : BigInt(e.pointerId),\n            pointerX: x,\n            pointerY: y,\n            pressure: e.pressure * 65535,\n            buttons: e.buttons,\n        });\n    };\n\n    handlePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.rendererContainer!.focus();\n        e.preventDefault();\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.injectTouch(AndroidMotionEventAction.Down, e);\n    };\n\n    handlePointerMove = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(\n            e.buttons === 0 ? AndroidMotionEventAction.HoverMove : AndroidMotionEventAction.Move,\n            e\n        );\n    };\n\n    handlePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(AndroidMotionEventAction.Up, e);\n    };\n\n    handleWheel = (e: WheelEvent) => {\n        if (!this.client) {\n            return;\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectScroll({\n            pointerX: x,\n            pointerY: y,\n            scrollX: -Math.sign(e.deltaX),\n            scrollY: -Math.sign(e.deltaY),\n            buttons: 0,\n        });\n    };\n\n    handleContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    handleKeyDown = async (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { key, code } = e;\n        if (key.match(/^[a-z0-9]$/i)) {\n            this.client!.injectText(key);\n            return;\n        }\n\n        const keyCode = ({\n            Backspace: AndroidKeyCode.Delete,\n            Space: AndroidKeyCode.Space,\n        } as Record<string, AndroidKeyCode | undefined>)[code];\n\n        if (keyCode) {\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Down,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Up,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n        }\n    };\n}\n\nconst state = new ScrcpyPageState();\nconsole.log(state);\n\nconst ConnectionDialog = observer(() => {\n    const layerHostId = useId('layerHost');\n\n    const [isClient, setIsClient] = useState(false);\n\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    if (!isClient) {\n        return null;\n    }\n\n    return (\n        <>\n            <LayerHost id={layerHostId} style={{ position: 'absolute', top: 0, bottom: 0, left: 0, right: 0, margin: 0, pointerEvents: 'none' }} />\n\n            <Dialog\n                hidden={!state.connecting}\n                modalProps={{ layerProps: { hostId: layerHostId } }}\n                dialogContentProps={{ title: 'Connecting...' }}\n            >\n                <Stack tokens={CommonStackTokens}>\n                    <ProgressIndicator\n                        label=\"1. Downloading scrcpy server...\"\n                        percentComplete={state.serverTotalSize ? state.serverDownloadedSize / state.serverTotalSize : undefined}\n                        description={formatSpeed(state.debouncedServerDownloadedSize, state.serverTotalSize, state.serverDownloadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"2. Pushing scrcpy server to device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverDownloadedSize !== state.serverTotalSize}\n                        percentComplete={state.serverUploadedSize / state.serverTotalSize}\n                        description={formatSpeed(state.debouncedServerUploadedSize, state.serverTotalSize, state.serverUploadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"3. Starting scrcpy server on device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverUploadedSize !== state.serverTotalSize}\n                    />\n                </Stack>\n            </Dialog>\n        </>\n    );\n});\n\nconst NavigationBar = observer(function NavigationBar({\n    className,\n    style,\n    children\n}: {\n    className: string;\n    style: CSSProperties;\n    children: ReactNode;\n    }) {\n    if (!state.navigationBarVisible) {\n        return null;\n    }\n\n    return (\n        <Stack className={className} verticalFill horizontalAlign=\"center\" style={{ height: '40px', background: '#999', ...style }}>\n            {children}\n            <Stack verticalFill horizontal style={{ width: '100%', maxWidth: 300 }} horizontalAlign=\"space-evenly\" verticalAlign=\"center\">\n                <IconButton\n                    iconProps={{ iconName: Icons.Play }}\n                    style={{ transform: 'rotate(180deg)', color: 'white' }}\n                    onPointerDown={state.handleBackPointerDown}\n                    onPointerUp={state.handleBackPointerUp}\n                />\n                <IconButton\n                    iconProps={{ iconName: Icons.Circle }}\n                    style={{ color: 'white' }}\n                    onPointerDown={state.handleHomePointerDown}\n                    onPointerUp={state.handleHomePointerUp}\n                />\n                <IconButton\n                    iconProps={{ iconName: Icons.Stop }}\n                    style={{ color: 'white' }}\n                    onPointerDown={state.handleAppSwitchPointerDown}\n                    onPointerUp={state.handleAppSwitchPointerUp}\n                />\n            </Stack>\n        </Stack>\n    );\n});\n\nconst useClasses = makeStyles({\n    video: {\n        transformOrigin: 'center center',\n    },\n});\n\nconst Scrcpy: NextPage = () => {\n    const classes = useClasses();\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Scrcpy - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} farItems={state.commandBarFarItems} />\n\n            <Stack horizontal grow styles={{ root: { height: 0 } }}>\n                <DeviceView\n                    ref={state.handleDeviceViewRef}\n                    width={state.rotatedWidth}\n                    height={state.rotatedHeight}\n                    BottomElement={NavigationBar}\n                >\n                    <div\n                        ref={state.handleRendererContainerRef}\n                        tabIndex={-1}\n                        className={classes.video}\n                        style={{\n                            width: state.width,\n                            height: state.height,\n                            transform: `translate(${(state.rotatedWidth - state.width) / 2}px, ${(state.rotatedHeight - state.height) / 2}px) rotate(${state.rotate * 90}deg)`\n                        }}\n                        onPointerDown={state.handlePointerDown}\n                        onPointerMove={state.handlePointerMove}\n                        onPointerUp={state.handlePointerUp}\n                        onPointerCancel={state.handlePointerUp}\n                        onKeyDown={state.handleKeyDown}\n                        onContextMenu={state.handleContextMenu}\n                    />\n                </DeviceView>\n\n                <div style={{\n                    padding: 12,\n                    overflow: 'hidden auto',\n                    display: state.logVisible ? 'block' : 'none',\n                    width: 500,\n                    fontFamily: 'monospace',\n                    overflowY: 'auto',\n                    whiteSpace: 'pre-wrap',\n                    wordWrap: 'break-word',\n                }}>\n                    {state.log.map((line, index) => (\n                        <div key={index}>\n                            {line}\n                        </div>\n                    ))}\n                </div>\n\n                <div style={{ padding: 12, overflow: 'hidden auto', display: state.settingsVisible ? 'block' : 'none', width: 300 }}>\n                    <div>Changes will take effect on next connection</div>\n\n                    {state.settingDefinitions.map(definition => (\n                        <SettingItem\n                            key={definition.key}\n                            definition={definition}\n                            settings={state.settings}\n                            onChange={action((key, value) => (state.settings as any)[key] = value)}\n                        />\n                    ))}\n                </div>\n\n                <DemoModePanel\n                    style={{ display: state.demoModeVisible ? 'block' : 'none' }}\n                />\n\n                <ConnectionDialog />\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default observer(Scrcpy);\n","export default '1.24';","import Struct, { placeholder } from '@yume-chan/struct';\n// https://github.com/Genymobile/scrcpy/blob/fa5b2a29e983a46b49531def9cf3d80c40c3de37/app/src/control_msg.h#L23\n// For their message bodies, see https://github.com/Genymobile/scrcpy/blob/5c62f3419d252d10cd8c9cbb7c918b358b81f2d0/app/src/control_msg.c#L92\nexport var ScrcpyControlMessageType;\n(function (ScrcpyControlMessageType) {\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectKeycode\"] = 0] = \"InjectKeycode\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectText\"] = 1] = \"InjectText\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectTouch\"] = 2] = \"InjectTouch\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectScroll\"] = 3] = \"InjectScroll\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"BackOrScreenOn\"] = 4] = \"BackOrScreenOn\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"ExpandNotificationPanel\"] = 5] = \"ExpandNotificationPanel\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"ExpandSettingPanel\"] = 6] = \"ExpandSettingPanel\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"CollapseNotificationPanel\"] = 7] = \"CollapseNotificationPanel\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"GetClipboard\"] = 8] = \"GetClipboard\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"SetClipboard\"] = 9] = \"SetClipboard\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"SetScreenPowerMode\"] = 10] = \"SetScreenPowerMode\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"RotateDevice\"] = 11] = \"RotateDevice\";\n})(ScrcpyControlMessageType || (ScrcpyControlMessageType = {}));\n// https://developer.android.com/reference/android/view/MotionEvent#constants_1\nexport var AndroidMotionEventAction;\n(function (AndroidMotionEventAction) {\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Down\"] = 0] = \"Down\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Up\"] = 1] = \"Up\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Move\"] = 2] = \"Move\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Cancel\"] = 3] = \"Cancel\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Outside\"] = 4] = \"Outside\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"PointerDown\"] = 5] = \"PointerDown\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"PointerUp\"] = 6] = \"PointerUp\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverMove\"] = 7] = \"HoverMove\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Scroll\"] = 8] = \"Scroll\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverEnter\"] = 9] = \"HoverEnter\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverExit\"] = 10] = \"HoverExit\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"ButtonPress\"] = 11] = \"ButtonPress\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"ButtonRelease\"] = 12] = \"ButtonRelease\";\n})(AndroidMotionEventAction || (AndroidMotionEventAction = {}));\nexport const ScrcpySimpleControlMessage = new Struct()\n    .uint8('type');\nexport const ScrcpyInjectTouchControlMessage = new Struct()\n    .fields(ScrcpySimpleControlMessage)\n    .uint8('action', placeholder())\n    .uint64('pointerId')\n    .uint32('pointerX')\n    .uint32('pointerY')\n    .uint16('screenWidth')\n    .uint16('screenHeight')\n    .uint16('pressure')\n    .uint32('buttons');\nexport const ScrcpyInjectTextControlMessage = new Struct()\n    .fields(ScrcpySimpleControlMessage)\n    .uint32('length')\n    .string('text', { lengthField: 'length' });\nexport var AndroidKeyEventAction;\n(function (AndroidKeyEventAction) {\n    AndroidKeyEventAction[AndroidKeyEventAction[\"Down\"] = 0] = \"Down\";\n    AndroidKeyEventAction[AndroidKeyEventAction[\"Up\"] = 1] = \"Up\";\n})(AndroidKeyEventAction || (AndroidKeyEventAction = {}));\nexport var AndroidKeyCode;\n(function (AndroidKeyCode) {\n    AndroidKeyCode[AndroidKeyCode[\"Home\"] = 3] = \"Home\";\n    AndroidKeyCode[AndroidKeyCode[\"Back\"] = 4] = \"Back\";\n    AndroidKeyCode[AndroidKeyCode[\"A\"] = 29] = \"A\";\n    AndroidKeyCode[AndroidKeyCode[\"B\"] = 30] = \"B\";\n    AndroidKeyCode[AndroidKeyCode[\"C\"] = 31] = \"C\";\n    AndroidKeyCode[AndroidKeyCode[\"D\"] = 32] = \"D\";\n    AndroidKeyCode[AndroidKeyCode[\"E\"] = 33] = \"E\";\n    AndroidKeyCode[AndroidKeyCode[\"F\"] = 34] = \"F\";\n    AndroidKeyCode[AndroidKeyCode[\"G\"] = 35] = \"G\";\n    AndroidKeyCode[AndroidKeyCode[\"H\"] = 36] = \"H\";\n    AndroidKeyCode[AndroidKeyCode[\"I\"] = 37] = \"I\";\n    AndroidKeyCode[AndroidKeyCode[\"J\"] = 38] = \"J\";\n    AndroidKeyCode[AndroidKeyCode[\"K\"] = 39] = \"K\";\n    AndroidKeyCode[AndroidKeyCode[\"L\"] = 40] = \"L\";\n    AndroidKeyCode[AndroidKeyCode[\"M\"] = 41] = \"M\";\n    AndroidKeyCode[AndroidKeyCode[\"N\"] = 42] = \"N\";\n    AndroidKeyCode[AndroidKeyCode[\"O\"] = 43] = \"O\";\n    AndroidKeyCode[AndroidKeyCode[\"P\"] = 44] = \"P\";\n    AndroidKeyCode[AndroidKeyCode[\"Q\"] = 45] = \"Q\";\n    AndroidKeyCode[AndroidKeyCode[\"R\"] = 46] = \"R\";\n    AndroidKeyCode[AndroidKeyCode[\"S\"] = 47] = \"S\";\n    AndroidKeyCode[AndroidKeyCode[\"T\"] = 48] = \"T\";\n    AndroidKeyCode[AndroidKeyCode[\"U\"] = 49] = \"U\";\n    AndroidKeyCode[AndroidKeyCode[\"V\"] = 50] = \"V\";\n    AndroidKeyCode[AndroidKeyCode[\"W\"] = 51] = \"W\";\n    AndroidKeyCode[AndroidKeyCode[\"X\"] = 52] = \"X\";\n    AndroidKeyCode[AndroidKeyCode[\"Y\"] = 53] = \"Y\";\n    AndroidKeyCode[AndroidKeyCode[\"Z\"] = 54] = \"Z\";\n    AndroidKeyCode[AndroidKeyCode[\"Space\"] = 62] = \"Space\";\n    AndroidKeyCode[AndroidKeyCode[\"Delete\"] = 67] = \"Delete\";\n    AndroidKeyCode[AndroidKeyCode[\"AppSwitch\"] = 187] = \"AppSwitch\";\n})(AndroidKeyCode || (AndroidKeyCode = {}));\nexport const ScrcpyInjectKeyCodeControlMessage = new Struct()\n    .fields(ScrcpySimpleControlMessage)\n    .uint8('action', placeholder())\n    .uint32('keyCode')\n    .uint32('repeat')\n    .uint32('metaState');\n//# sourceMappingURL=message.js.map","import { __awaiter } from \"tslib\";\nimport { AdbBufferedStream, AdbSubprocessNoneProtocol, DecodeUtf8Stream, InspectStream, TransformStream, WritableStream } from '@yume-chan/adb';\nimport { EventEmitter } from '@yume-chan/event';\nimport Struct from '@yume-chan/struct';\nimport { AndroidMotionEventAction, ScrcpyControlMessageType, ScrcpyInjectKeyCodeControlMessage, ScrcpyInjectTextControlMessage, ScrcpyInjectTouchControlMessage, ScrcpySimpleControlMessage } from './message.js';\nfunction* splitLines(text) {\n    let start = 0;\n    while (true) {\n        const index = text.indexOf('\\n', start);\n        if (index === -1) {\n            return;\n        }\n        const line = text.substring(start, index);\n        yield line;\n        start = index + 1;\n    }\n}\nconst ClipboardMessage = new Struct()\n    .uint32('length')\n    .string('content', { lengthField: 'length' });\nexport class ScrcpyClient {\n    constructor(adb, options, process, videoStream, controlStream) {\n        this.clipboardChangeEvent = new EventEmitter();\n        this.lastTouchMessage = 0;\n        this._adb = adb;\n        this.options = options;\n        this.process = process;\n        this._stdout = process.stdout\n            .pipeThrough(new DecodeUtf8Stream())\n            .pipeThrough(new TransformStream({\n            transform(chunk, controller) {\n                for (const line of splitLines(chunk)) {\n                    if (line === '') {\n                        continue;\n                    }\n                    controller.enqueue(line);\n                }\n            },\n        }));\n        this._videoStream = videoStream.readable\n            .pipeThrough(options.createVideoStreamTransformer())\n            .pipeThrough(new InspectStream(packet => {\n            if (packet.type === 'configuration') {\n                this._screenWidth = packet.data.croppedWidth;\n                this._screenHeight = packet.data.croppedHeight;\n            }\n        }));\n        if (controlStream) {\n            const buffered = new AdbBufferedStream(controlStream);\n            this._controlStreamWriter = controlStream.writable.getWriter();\n            (() => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    while (true) {\n                        const type = yield buffered.read(1);\n                        switch (type[0]) {\n                            case 0:\n                                const { content } = yield ClipboardMessage.deserialize(buffered);\n                                this.clipboardChangeEvent.fire(content);\n                                break;\n                            default:\n                                throw new Error('unknown control message type');\n                        }\n                    }\n                }\n                catch (_a) {\n                    // TODO: Scrcpy: handle error\n                }\n            }))();\n        }\n    }\n    static getEncoders(adb, path, version, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Provide an invalid encoder name\n            // So the server will return all available encoders\n            options.value.encoderName = '_';\n            // Disable control for faster connection in 1.22+\n            options.value.control = false;\n            // Scrcpy server will open connections, before initializing encoder\n            // Thus although an invalid encoder name is given, the start process will success\n            const client = yield ScrcpyClient.start(adb, path, version, options);\n            const encoderNameRegex = options.getOutputEncoderNameRegex();\n            const encoders = [];\n            yield client.stdout.pipeTo(new WritableStream({\n                write(line) {\n                    const match = line.match(encoderNameRegex);\n                    if (match) {\n                        encoders.push(match[1]);\n                    }\n                },\n            }));\n            return encoders;\n        });\n    }\n    static start(adb, path, version, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const connection = options.createConnection(adb);\n            let process;\n            try {\n                yield connection.initialize();\n                process = yield adb.subprocess.spawn([\n                    // cspell: disable-next-line\n                    `CLASSPATH=${path}`,\n                    'app_process',\n                    /* unused */ '/',\n                    'com.genymobile.scrcpy.Server',\n                    version,\n                    ...options.formatServerArguments(),\n                ], {\n                    // Scrcpy server doesn't split stdout and stderr,\n                    // so disable Shell Protocol to simplify processing\n                    protocols: [AdbSubprocessNoneProtocol],\n                });\n                const result = yield Promise.race([\n                    process.exit,\n                    connection.getStreams(),\n                ]);\n                if (typeof result === 'number') {\n                    throw new Error('scrcpy server exited prematurely');\n                }\n                const [videoStream, controlStream] = result;\n                return new ScrcpyClient(adb, options, process, videoStream, controlStream);\n            }\n            catch (e) {\n                yield (process === null || process === void 0 ? void 0 : process.kill());\n                throw e;\n            }\n            finally {\n                connection.dispose();\n            }\n        });\n    }\n    get adb() { return this._adb; }\n    get stdout() { return this._stdout; }\n    get exit() { return this.process.exit; }\n    get screenWidth() { return this._screenWidth; }\n    get screenHeight() { return this._screenHeight; }\n    get videoStream() { return this._videoStream; }\n    get onClipboardChange() { return this.clipboardChangeEvent.event; }\n    checkControlStream(caller) {\n        if (!this._controlStreamWriter) {\n            throw new Error(`${caller} called with control disabled`);\n        }\n        return this._controlStreamWriter;\n    }\n    getControlMessageTypeValue(type) {\n        const list = this.options.getControlMessageTypes();\n        const index = list.indexOf(type);\n        if (index === -1) {\n            throw new Error('Not supported');\n        }\n        return index;\n    }\n    injectKeyCode(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectKeyCode');\n            yield controlStream.write(ScrcpyInjectKeyCodeControlMessage.serialize(Object.assign(Object.assign({}, message), { type: this.getControlMessageTypeValue(ScrcpyControlMessageType.InjectKeycode) })));\n        });\n    }\n    injectText(text) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectText');\n            yield controlStream.write(ScrcpyInjectTextControlMessage.serialize({\n                type: this.getControlMessageTypeValue(ScrcpyControlMessageType.InjectText),\n                text,\n            }));\n        });\n    }\n    injectTouch(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectTouch');\n            if (!this.screenWidth || !this.screenHeight) {\n                return;\n            }\n            // ADB streams are actually pretty low-bandwidth and laggy\n            // Re-sample move events to avoid flooding the connection\n            // TODO: Scrcpy: investigate how to throttle touch events\n            // because 60FPS may still be too high\n            const now = Date.now();\n            if (now - this.lastTouchMessage < 16 &&\n                [AndroidMotionEventAction.Move, AndroidMotionEventAction.HoverMove].includes(message.action)) {\n                return;\n            }\n            this.lastTouchMessage = now;\n            yield controlStream.write(ScrcpyInjectTouchControlMessage.serialize(Object.assign(Object.assign({}, message), { type: this.getControlMessageTypeValue(ScrcpyControlMessageType.InjectTouch), screenWidth: this.screenWidth, screenHeight: this.screenHeight })));\n        });\n    }\n    injectScroll(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectScroll');\n            if (!this.screenWidth || !this.screenHeight) {\n                return;\n            }\n            const buffer = this.options.serializeInjectScrollControlMessage(Object.assign(Object.assign({}, message), { type: this.getControlMessageTypeValue(ScrcpyControlMessageType.InjectScroll), screenWidth: this.screenWidth, screenHeight: this.screenHeight }));\n            yield controlStream.write(buffer);\n        });\n    }\n    pressBackOrTurnOnScreen(action) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('pressBackOrTurnOnScreen');\n            const buffer = this.options.serializeBackOrScreenOnControlMessage({\n                type: this.getControlMessageTypeValue(ScrcpyControlMessageType.BackOrScreenOn),\n                action,\n            });\n            if (buffer) {\n                yield controlStream.write(buffer);\n            }\n        });\n    }\n    sendSimpleControlMessage(type, name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream(name);\n            const buffer = ScrcpySimpleControlMessage.serialize({\n                type: this.getControlMessageTypeValue(type),\n            });\n            yield controlStream.write(buffer);\n        });\n    }\n    rotateDevice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.sendSimpleControlMessage(ScrcpyControlMessageType.RotateDevice, 'rotateDevice');\n        });\n    }\n    close() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            // No need to close streams. Kill the process will destroy them from the other side.\n            yield ((_a = this.process) === null || _a === void 0 ? void 0 : _a.kill());\n        });\n    }\n}\n//# sourceMappingURL=client.js.map","// From https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel\nexport var AndroidCodecProfile;\n(function (AndroidCodecProfile) {\n    AndroidCodecProfile[AndroidCodecProfile[\"Baseline\"] = 1] = \"Baseline\";\n    AndroidCodecProfile[AndroidCodecProfile[\"Main\"] = 2] = \"Main\";\n    AndroidCodecProfile[AndroidCodecProfile[\"Extended\"] = 4] = \"Extended\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High\"] = 8] = \"High\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High10\"] = 16] = \"High10\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High422\"] = 32] = \"High422\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High444\"] = 64] = \"High444\";\n    AndroidCodecProfile[AndroidCodecProfile[\"ConstrainedBaseline\"] = 65536] = \"ConstrainedBaseline\";\n    AndroidCodecProfile[AndroidCodecProfile[\"ConstrainedHigh\"] = 524288] = \"ConstrainedHigh\";\n})(AndroidCodecProfile || (AndroidCodecProfile = {}));\nexport var AndroidCodecLevel;\n(function (AndroidCodecLevel) {\n    AndroidCodecLevel[AndroidCodecLevel[\"Level1\"] = 1] = \"Level1\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level1b\"] = 2] = \"Level1b\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level11\"] = 4] = \"Level11\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level12\"] = 8] = \"Level12\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level13\"] = 16] = \"Level13\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level2\"] = 32] = \"Level2\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level21\"] = 64] = \"Level21\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level22\"] = 128] = \"Level22\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level3\"] = 256] = \"Level3\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level31\"] = 512] = \"Level31\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level32\"] = 1024] = \"Level32\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level4\"] = 2048] = \"Level4\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level41\"] = 4096] = \"Level41\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level42\"] = 8192] = \"Level42\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level5\"] = 16384] = \"Level5\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level51\"] = 32768] = \"Level51\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level52\"] = 65536] = \"Level52\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level6\"] = 131072] = \"Level6\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level61\"] = 262144] = \"Level61\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level62\"] = 524288] = \"Level62\";\n})(AndroidCodecLevel || (AndroidCodecLevel = {}));\n//# sourceMappingURL=codec.js.map","import { PromiseResolver } from '@yume-chan/async';\nimport { AutoDisposable, EventEmitter } from '@yume-chan/event';\nlet worker;\nlet workerReady = false;\nconst pendingResolvers = [];\nlet streamId = 0;\nconst pictureReadyEvent = new EventEmitter();\nexport class TinyH264Wrapper extends AutoDisposable {\n    constructor(streamId) {\n        super();\n        this.pictureReadyEvent = new EventEmitter();\n        this.streamId = streamId;\n        this.addDisposable(pictureReadyEvent.event(this.handlePictureReady, this));\n    }\n    get onPictureReady() { return this.pictureReadyEvent.event; }\n    handlePictureReady(e) {\n        if (e.renderStateId === this.streamId) {\n            this.pictureReadyEvent.fire(e);\n        }\n    }\n    feed(data) {\n        worker.postMessage({\n            type: 'decode',\n            data: data,\n            offset: 0,\n            length: data.byteLength,\n            renderStateId: this.streamId,\n        }, [data]);\n    }\n    dispose() {\n        super.dispose();\n        worker.postMessage({\n            type: 'release',\n            renderStateId: this.streamId,\n        });\n    }\n}\nexport function createTinyH264Wrapper() {\n    if (!worker) {\n        worker = new Worker(new URL('./worker.js', import.meta.url));\n        worker.addEventListener('message', (e) => {\n            const { data } = e;\n            switch (data.type) {\n                case 'decoderReady':\n                    workerReady = true;\n                    for (const resolver of pendingResolvers) {\n                        resolver.resolve(new TinyH264Wrapper(streamId));\n                        streamId += 1;\n                    }\n                    pendingResolvers.length = 0;\n                    break;\n                case 'pictureReady':\n                    pictureReadyEvent.fire(data);\n                    break;\n            }\n        });\n    }\n    if (!workerReady) {\n        const resolver = new PromiseResolver();\n        pendingResolvers.push(resolver);\n        return resolver.promise;\n    }\n    const decoder = new TinyH264Wrapper(streamId);\n    streamId += 1;\n    return Promise.resolve(decoder);\n}\n//# sourceMappingURL=wrapper.js.map","import { __awaiter } from \"tslib\";\nimport { WritableStream } from \"@yume-chan/adb\";\nimport { PromiseResolver } from \"@yume-chan/async\";\nimport { AndroidCodecLevel, AndroidCodecProfile } from \"../../codec.js\";\nimport { createTinyH264Wrapper } from \"./wrapper.js\";\nlet cachedInitializePromise;\nfunction initialize() {\n    if (!cachedInitializePromise) {\n        cachedInitializePromise = Promise.all([import('yuv-buffer'), import('yuv-canvas')]).then(([YuvBuffer, { default: YuvCanvas }]) => ({\n            YuvBuffer, YuvCanvas\n        }));\n    }\n    return cachedInitializePromise;\n}\nexport class TinyH264Decoder {\n    constructor() {\n        this.maxProfile = AndroidCodecProfile.Baseline;\n        this.maxLevel = AndroidCodecLevel.Level4;\n        this._frameRendered = 0;\n        initialize();\n        this._renderer = document.createElement('canvas');\n        this._writable = new WritableStream({\n            write: (packet) => __awaiter(this, void 0, void 0, function* () {\n                switch (packet.type) {\n                    case 'configuration':\n                        this.configure(packet.data);\n                        break;\n                    case 'frame':\n                        if (!this._initializer) {\n                            throw new Error('Decoder not initialized');\n                        }\n                        const wrapper = yield this._initializer.promise;\n                        wrapper.feed(packet.data.slice().buffer);\n                        break;\n                }\n            })\n        });\n    }\n    get renderer() { return this._renderer; }\n    get frameRendered() { return this._frameRendered; }\n    get writable() { return this._writable; }\n    configure(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.dispose();\n            this._initializer = new PromiseResolver();\n            const { YuvBuffer, YuvCanvas } = yield initialize();\n            if (!this._yuvCanvas) {\n                this._yuvCanvas = YuvCanvas.attach(this._renderer);\n                ;\n            }\n            const { encodedWidth, encodedHeight } = config;\n            const chromaWidth = encodedWidth / 2;\n            const chromaHeight = encodedHeight / 2;\n            this._renderer.width = config.croppedWidth;\n            this._renderer.height = config.croppedHeight;\n            const format = YuvBuffer.format({\n                width: encodedWidth,\n                height: encodedHeight,\n                chromaWidth,\n                chromaHeight,\n                cropLeft: config.cropLeft,\n                cropTop: config.cropTop,\n                cropWidth: config.croppedWidth,\n                cropHeight: config.croppedHeight,\n                displayWidth: config.croppedWidth,\n                displayHeight: config.croppedHeight,\n            });\n            const wrapper = yield createTinyH264Wrapper();\n            this._initializer.resolve(wrapper);\n            const uPlaneOffset = encodedWidth * encodedHeight;\n            const vPlaneOffset = uPlaneOffset + chromaWidth * chromaHeight;\n            wrapper.onPictureReady(({ data }) => {\n                this._frameRendered += 1;\n                const array = new Uint8Array(data);\n                const frame = YuvBuffer.frame(format, YuvBuffer.lumaPlane(format, array, encodedWidth, 0), YuvBuffer.chromaPlane(format, array, chromaWidth, uPlaneOffset), YuvBuffer.chromaPlane(format, array, chromaWidth, vPlaneOffset));\n                this._yuvCanvas.drawFrame(frame);\n            });\n        });\n    }\n    dispose() {\n        var _a;\n        (_a = this._initializer) === null || _a === void 0 ? void 0 : _a.promise.then(wrapper => wrapper.dispose());\n        this._initializer = undefined;\n    }\n}\n//# sourceMappingURL=index.js.map","import { __awaiter } from \"tslib\";\nimport { WritableStream } from '@yume-chan/adb';\nfunction toHex(value) {\n    return value.toString(16).padStart(2, '0').toUpperCase();\n}\nexport class WebCodecsDecoder {\n    constructor() {\n        // Usually, browsers can decode most configurations,\n        // So let device choose best profile and level for itself.\n        this.maxProfile = undefined;\n        this.maxLevel = undefined;\n        this._frameRendered = 0;\n        this.animationFrame = 0;\n        this.render = () => {\n            if (this.lastFrame) {\n                this._frameRendered += 1;\n                this.context.drawImage(this.lastFrame, 0, 0);\n                this.lastFrame.close();\n                this.lastFrame = undefined;\n            }\n            this.animationFrame = requestAnimationFrame(this.render);\n        };\n        this._renderer = document.createElement('canvas');\n        this.context = this._renderer.getContext('2d');\n        this.decoder = new VideoDecoder({\n            output: (frame) => {\n                if (this.lastFrame) {\n                    this.lastFrame.close();\n                }\n                this.lastFrame = frame;\n                if (!this.animationFrame) {\n                    // Start render loop on first frame\n                    this.render();\n                }\n            },\n            error() { },\n        });\n        this._writable = new WritableStream({\n            write: (packet) => __awaiter(this, void 0, void 0, function* () {\n                switch (packet.type) {\n                    case 'configuration':\n                        this.configure(packet.data);\n                        break;\n                    case 'frame':\n                        this.decoder.decode(new EncodedVideoChunk({\n                            // Treat `undefined` as `key`, otherwise won't decode.\n                            type: packet.keyframe === false ? 'delta' : 'key',\n                            timestamp: 0,\n                            data: packet.data,\n                        }));\n                        break;\n                }\n            })\n        });\n    }\n    get writable() { return this._writable; }\n    get renderer() { return this._renderer; }\n    get frameRendered() { return this._frameRendered; }\n    configure(config) {\n        const { profileIndex, constraintSet, levelIndex } = config;\n        this._renderer.width = config.croppedWidth;\n        this._renderer.height = config.croppedHeight;\n        // https://www.rfc-editor.org/rfc/rfc6381#section-3.3\n        // ISO Base Media File Format Name Space\n        const codec = `avc1.${[profileIndex, constraintSet, levelIndex].map(toHex).join('')}`;\n        this.decoder.configure({\n            codec: codec,\n            optimizeForLatency: true,\n        });\n    }\n    dispose() {\n        cancelAnimationFrame(this.animationFrame);\n        this.decoder.close();\n    }\n}\n//# sourceMappingURL=index.js.map","export function delay(time) {\n    return new Promise(resolve => {\n        globalThis.setTimeout(resolve, time);\n    });\n}\n//# sourceMappingURL=utils.js.map","import { __awaiter } from \"tslib\";\nimport { delay } from \"./utils.js\";\nexport class ScrcpyClientConnection {\n    constructor(device, options) {\n        this.device = device;\n        this.options = options;\n    }\n    initialize() { }\n    dispose() { }\n}\nexport class ScrcpyClientForwardConnection extends ScrcpyClientConnection {\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.device.createSocket('localabstract:scrcpy');\n        });\n    }\n    connectAndRetry() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let i = 0; i < 100; i++) {\n                try {\n                    return yield this.connect();\n                }\n                catch (e) {\n                    yield delay(100);\n                }\n            }\n            throw new Error(`Can't connect to server after 100 retries`);\n        });\n    }\n    connectVideoStream() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const stream = yield this.connectAndRetry();\n            if (this.options.sendDummyByte) {\n                const reader = stream.readable.getReader();\n                const { done, value } = yield reader.read();\n                // server will write a `0` to signal connection success\n                if (done || value.byteLength !== 1 || value[0] !== 0) {\n                    throw new Error('Unexpected response from server');\n                }\n                reader.releaseLock();\n            }\n            return stream;\n        });\n    }\n    getStreams() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const videoStream = yield this.connectVideoStream();\n            let controlStream;\n            if (this.options.control) {\n                controlStream = yield this.connectAndRetry();\n            }\n            // Server only writes device meta after control socket is connected (if enabled)\n            if (this.options.sendDeviceMeta) {\n                const reader = videoStream.readable.getReader();\n                const { done, value } = yield reader.read();\n                // 64 bytes device name + 2 bytes video width + 2 bytes video height\n                if (done || value.byteLength !== 64 + 2 + 2) {\n                    throw new Error('Unexpected response from server');\n                }\n                reader.releaseLock();\n            }\n            return [videoStream, controlStream];\n        });\n    }\n}\nexport class ScrcpyClientReverseConnection extends ScrcpyClientConnection {\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // try to unbind first\n                yield this.device.reverse.remove('localabstract:scrcpy');\n            }\n            catch (_a) {\n                // ignore error\n            }\n            const queue = new TransformStream();\n            this.streams = queue.readable.getReader();\n            const writer = queue.writable.getWriter();\n            this.address = yield this.device.reverse.add('localabstract:scrcpy', 27183, socket => {\n                writer.write(socket);\n                return true;\n            });\n        });\n    }\n    accept() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.streams.read()).value;\n        });\n    }\n    getStreams() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const videoStream = yield this.accept();\n            let controlStream;\n            if (this.options.control) {\n                controlStream = yield this.accept();\n            }\n            // Server only writes device meta after control socket is connected (if enabled)\n            if (this.options.sendDeviceMeta) {\n                const reader = videoStream.readable.getReader();\n                const { done, value } = yield reader.read();\n                // 64 bytes device name + 2 bytes video width + 2 bytes video height\n                if (done || value.byteLength !== 64 + 2 + 2) {\n                    throw new Error('Unexpected response from server');\n                }\n                reader.releaseLock();\n            }\n            return [videoStream, controlStream];\n        });\n    }\n    dispose() {\n        // Don't await this!\n        // `reverse.remove`'s response will never arrive\n        // before we read all pending data from `videoStream`\n        this.device.reverse.remove(this.address);\n    }\n}\n//# sourceMappingURL=connection.js.map","export const DEFAULT_SERVER_PATH = '/data/local/tmp/scrcpy-server.jar';\nexport function isScrcpyOptionValue(value) {\n    return typeof value === 'object' &&\n        value !== null &&\n        typeof value.toOptionValue === 'function';\n}\nexport function toScrcpyOptionValue(value, empty) {\n    if (isScrcpyOptionValue(value)) {\n        value = value.toOptionValue();\n    }\n    if (value === undefined) {\n        return empty;\n    }\n    return `${value}`;\n}\n//# sourceMappingURL=common.js.map","// cspell: ignore golomb\n// cspell: ignore qpprime\nclass BitReader {\n    constructor(buffer) {\n        this.bytePosition = 0;\n        this.bitPosition = 0;\n        this.buffer = buffer;\n    }\n    read(length) {\n        let result = 0;\n        for (let i = 0; i < length; i += 1) {\n            result = (result << 1) | this.next();\n        }\n        return result;\n    }\n    next() {\n        const value = (this.buffer[this.bytePosition] >> (7 - this.bitPosition)) & 1;\n        this.bitPosition += 1;\n        if (this.bitPosition === 8) {\n            this.bytePosition += 1;\n            this.bitPosition = 0;\n        }\n        return value;\n    }\n    decodeExponentialGolombNumber() {\n        let length = 0;\n        while (this.next() === 0) {\n            length += 1;\n        }\n        if (length === 0) {\n            return 0;\n        }\n        return (1 << length | this.read(length)) - 1;\n    }\n}\nfunction* iterateNalu(buffer) {\n    // -1 means we haven't found the first start code\n    let start = -1;\n    let writeIndex = 0;\n    // How many `0x00`s in a row we have counted\n    let zeroCount = 0;\n    let inEmulation = false;\n    for (const byte of buffer) {\n        buffer[writeIndex] = byte;\n        writeIndex += 1;\n        if (inEmulation) {\n            if (byte > 0x03) {\n                // `0x00000304` or larger are invalid\n                throw new Error('Invalid data');\n            }\n            inEmulation = false;\n            continue;\n        }\n        if (byte == 0x00) {\n            zeroCount += 1;\n            continue;\n        }\n        const lastZeroCount = zeroCount;\n        zeroCount = 0;\n        if (start === -1) {\n            // 0x000001 is the start code\n            // But it can be preceded by any number of zeros\n            // So 2 is the minimal\n            if (lastZeroCount >= 2 && byte === 0x01) {\n                // Found start of first NAL unit\n                writeIndex = 0;\n                start = 0;\n                continue;\n            }\n            // Not begin with start code\n            throw new Error('Invalid data');\n        }\n        if (lastZeroCount < 2) {\n            // zero or one `0x00`s are acceptable\n            continue;\n        }\n        if (byte === 0x01) {\n            // Remove all leading `0x00`s and this `0x01`\n            writeIndex -= lastZeroCount + 1;\n            // Found another NAL unit\n            yield buffer.subarray(start, writeIndex);\n            start = writeIndex;\n            continue;\n        }\n        if (lastZeroCount > 2) {\n            // Too much `0x00`s\n            throw new Error('Invalid data');\n        }\n        switch (byte) {\n            case 0x02:\n                // Didn't find why, but 7.4.1 NAL unit semantics forbids `0x000002` appearing in NAL units\n                throw new Error('Invalid data');\n            case 0x03:\n                // `0x000003` is the \"emulation_prevention_three_byte\"\n                // `0x00000300`, `0x00000301`, `0x00000302` and `0x00000303` represent\n                // `0x000000`, `0x000001`, `0x000002` and `0x000003` respectively\n                // Remove current byte\n                writeIndex -= 1;\n                inEmulation = true;\n                break;\n            default:\n                // `0x000004` or larger are ok\n                break;\n        }\n    }\n    if (inEmulation || zeroCount !== 0) {\n        throw new Error('Invalid data');\n    }\n    yield buffer.subarray(start, writeIndex);\n}\n// 7.3.2.1.1 Sequence parameter set data syntax\nexport function parse_sequence_parameter_set(buffer) {\n    for (const nalu of iterateNalu(new Uint8Array(buffer))) {\n        const reader = new BitReader(nalu);\n        if (reader.next() !== 0) {\n            throw new Error('Invalid data');\n        }\n        const nal_ref_idc = reader.read(2);\n        const nal_unit_type = reader.read(5);\n        if (nal_unit_type !== 7) {\n            continue;\n        }\n        if (nal_ref_idc === 0) {\n            throw new Error('Invalid data');\n        }\n        const profile_idc = reader.read(8);\n        const constraint_set = reader.read(8);\n        const constraint_set_reader = new BitReader(new Uint8Array([constraint_set]));\n        const constraint_set0_flag = !!constraint_set_reader.next();\n        const constraint_set1_flag = !!constraint_set_reader.next();\n        const constraint_set2_flag = !!constraint_set_reader.next();\n        const constraint_set3_flag = !!constraint_set_reader.next();\n        const constraint_set4_flag = !!constraint_set_reader.next();\n        const constraint_set5_flag = !!constraint_set_reader.next();\n        // reserved_zero_2bits\n        if (constraint_set_reader.read(2) !== 0) {\n            throw new Error('Invalid data');\n        }\n        const level_idc = reader.read(8);\n        const seq_parameter_set_id = reader.decodeExponentialGolombNumber();\n        if (profile_idc === 100 || profile_idc === 110 ||\n            profile_idc === 122 || profile_idc === 244 || profile_idc === 44 ||\n            profile_idc === 83 || profile_idc === 86 || profile_idc === 118 ||\n            profile_idc === 128 || profile_idc === 138 || profile_idc === 139 ||\n            profile_idc === 134) {\n            const chroma_format_idc = reader.decodeExponentialGolombNumber();\n            if (chroma_format_idc === 3) {\n                // separate_colour_plane_flag\n                reader.next();\n            }\n            // bit_depth_luma_minus8\n            reader.decodeExponentialGolombNumber();\n            // bit_depth_chroma_minus8\n            reader.decodeExponentialGolombNumber();\n            // qpprime_y_zero_transform_bypass_flag\n            reader.next();\n            const seq_scaling_matrix_present_flag = !!reader.next();\n            if (seq_scaling_matrix_present_flag) {\n                const seq_scaling_list_present_flag = [];\n                for (let i = 0; i < ((chroma_format_idc !== 3) ? 8 : 12); i++) {\n                    seq_scaling_list_present_flag[i] = !!reader.next();\n                    if (seq_scaling_list_present_flag[i])\n                        if (i < 6) {\n                            // TODO\n                            // scaling_list( ScalingList4x4[ i ], 16,\n                            //               UseDefaultScalingMatrix4x4Flag[ i ])\n                        }\n                        else {\n                            // TODO\n                            // scaling_list( ScalingList8x8[ i − 6 ], 64,\n                            //               UseDefaultScalingMatrix8x8Flag[ i − 6 ] )\n                        }\n                }\n            }\n        }\n        // log2_max_frame_num_minus4\n        reader.decodeExponentialGolombNumber();\n        const pic_order_cnt_type = reader.decodeExponentialGolombNumber();\n        if (pic_order_cnt_type === 0) {\n            // log2_max_pic_order_cnt_lsb_minus4\n            reader.decodeExponentialGolombNumber();\n        }\n        else if (pic_order_cnt_type === 1) {\n            // delta_pic_order_always_zero_flag\n            reader.next();\n            // offset_for_non_ref_pic\n            reader.decodeExponentialGolombNumber();\n            // offset_for_top_to_bottom_field\n            reader.decodeExponentialGolombNumber();\n            const num_ref_frames_in_pic_order_cnt_cycle = reader.decodeExponentialGolombNumber();\n            const offset_for_ref_frame = [];\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\n                offset_for_ref_frame[i] = reader.decodeExponentialGolombNumber();\n            }\n        }\n        // max_num_ref_frames\n        reader.decodeExponentialGolombNumber();\n        // gaps_in_frame_num_value_allowed_flag\n        reader.next();\n        const pic_width_in_mbs_minus1 = reader.decodeExponentialGolombNumber();\n        const pic_height_in_map_units_minus1 = reader.decodeExponentialGolombNumber();\n        const frame_mbs_only_flag = reader.next();\n        if (!frame_mbs_only_flag) {\n            // mb_adaptive_frame_field_flag\n            reader.next();\n        }\n        // direct_8x8_inference_flag\n        reader.next();\n        const frame_cropping_flag = !!reader.next();\n        let frame_crop_left_offset;\n        let frame_crop_right_offset;\n        let frame_crop_top_offset;\n        let frame_crop_bottom_offset;\n        if (frame_cropping_flag) {\n            frame_crop_left_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_right_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_top_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_bottom_offset = reader.decodeExponentialGolombNumber();\n        }\n        else {\n            frame_crop_left_offset = 0;\n            frame_crop_right_offset = 0;\n            frame_crop_top_offset = 0;\n            frame_crop_bottom_offset = 0;\n        }\n        const vui_parameters_present_flag = !!reader.next();\n        if (vui_parameters_present_flag) {\n            // TODO\n            // vui_parameters( )\n        }\n        return {\n            profile_idc,\n            constraint_set,\n            constraint_set0_flag,\n            constraint_set1_flag,\n            constraint_set2_flag,\n            constraint_set3_flag,\n            constraint_set4_flag,\n            constraint_set5_flag,\n            level_idc,\n            seq_parameter_set_id,\n            pic_width_in_mbs_minus1,\n            pic_height_in_map_units_minus1,\n            frame_mbs_only_flag,\n            frame_cropping_flag,\n            frame_crop_left_offset,\n            frame_crop_right_offset,\n            frame_crop_top_offset,\n            frame_crop_bottom_offset,\n        };\n    }\n    throw new Error('Invalid data');\n}\n//# sourceMappingURL=sps.js.map","import { StructDeserializeStream, TransformStream } from \"@yume-chan/adb\";\nimport Struct from \"@yume-chan/struct\";\nimport { ScrcpyClientForwardConnection, ScrcpyClientReverseConnection } from \"../../connection.js\";\nimport { AndroidKeyEventAction, ScrcpyControlMessageType, ScrcpySimpleControlMessage } from \"../../message.js\";\nimport { toScrcpyOptionValue } from \"../common.js\";\nimport { parse_sequence_parameter_set } from \"./sps.js\";\nexport var ScrcpyLogLevel;\n(function (ScrcpyLogLevel) {\n    ScrcpyLogLevel[\"Verbose\"] = \"verbose\";\n    ScrcpyLogLevel[\"Debug\"] = \"debug\";\n    ScrcpyLogLevel[\"Info\"] = \"info\";\n    ScrcpyLogLevel[\"Warn\"] = \"warn\";\n    ScrcpyLogLevel[\"Error\"] = \"error\";\n})(ScrcpyLogLevel || (ScrcpyLogLevel = {}));\nexport var ScrcpyScreenOrientation;\n(function (ScrcpyScreenOrientation) {\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Initial\"] = -2] = \"Initial\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Unlocked\"] = -1] = \"Unlocked\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Portrait\"] = 0] = \"Portrait\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Landscape\"] = 1] = \"Landscape\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"PortraitFlipped\"] = 2] = \"PortraitFlipped\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"LandscapeFlipped\"] = 3] = \"LandscapeFlipped\";\n})(ScrcpyScreenOrientation || (ScrcpyScreenOrientation = {}));\nexport class CodecOptions {\n    constructor(value) {\n        this.value = value;\n    }\n    toOptionValue() {\n        const entries = Object.entries(this.value)\n            .filter(([key, value]) => value !== undefined);\n        if (entries.length === 0) {\n            return undefined;\n        }\n        return entries\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n    }\n}\nexport const VideoPacket = new Struct()\n    .uint64('pts')\n    .uint32('size')\n    .uint8Array('data', { lengthField: 'size' });\nexport const NO_PTS = BigInt(1) << BigInt(63);\nexport const ScrcpyBackOrScreenOnEvent1_16 = ScrcpySimpleControlMessage;\nexport const ScrcpyInjectScrollControlMessage1_16 = new Struct()\n    .fields(ScrcpySimpleControlMessage)\n    .uint32('pointerX')\n    .uint32('pointerY')\n    .uint16('screenWidth')\n    .uint16('screenHeight')\n    .int32('scrollX')\n    .int32('scrollY');\nexport class ScrcpyOptions1_16 {\n    constructor(value) {\n        if (new.target === ScrcpyOptions1_16 &&\n            value.logLevel === ScrcpyLogLevel.Verbose) {\n            value.logLevel = ScrcpyLogLevel.Debug;\n        }\n        if (new.target === ScrcpyOptions1_16 &&\n            value.lockVideoOrientation === ScrcpyScreenOrientation.Initial) {\n            value.lockVideoOrientation = ScrcpyScreenOrientation.Unlocked;\n        }\n        this.value = value;\n    }\n    getArgumentOrder() {\n        return [\n            'logLevel',\n            'maxSize',\n            'bitRate',\n            'maxFps',\n            'lockVideoOrientation',\n            'tunnelForward',\n            'crop',\n            'sendFrameMeta',\n            'control',\n            'displayId',\n            'showTouches',\n            'stayAwake',\n            'codecOptions',\n            'encoderName',\n        ];\n    }\n    getDefaultValue() {\n        return {\n            logLevel: ScrcpyLogLevel.Debug,\n            maxSize: 0,\n            bitRate: 8000000,\n            maxFps: 0,\n            lockVideoOrientation: ScrcpyScreenOrientation.Unlocked,\n            tunnelForward: false,\n            crop: '-',\n            sendFrameMeta: true,\n            control: true,\n            displayId: 0,\n            showTouches: false,\n            stayAwake: false,\n            codecOptions: new CodecOptions({}),\n            encoderName: '-',\n        };\n    }\n    formatServerArguments() {\n        const defaults = this.getDefaultValue();\n        return this.getArgumentOrder()\n            .map(key => toScrcpyOptionValue(this.value[key] || defaults[key], '-'));\n    }\n    createConnection(adb) {\n        const options = {\n            // Old scrcpy connection always have control stream no matter what the option is\n            control: true,\n            sendDummyByte: true,\n            sendDeviceMeta: true,\n        };\n        if (this.value.tunnelForward) {\n            return new ScrcpyClientForwardConnection(adb, options);\n        }\n        else {\n            return new ScrcpyClientReverseConnection(adb, options);\n        }\n    }\n    getOutputEncoderNameRegex() {\n        return /\\s+scrcpy --encoder-name '(.*?)'/;\n    }\n    createVideoStreamTransformer() {\n        // Optimized path for video frames only\n        if (this.value.sendFrameMeta === false) {\n            return new TransformStream({\n                transform(chunk, controller) {\n                    controller.enqueue({\n                        type: 'frame',\n                        data: chunk,\n                    });\n                },\n            });\n        }\n        let header;\n        let deserializeStream = new StructDeserializeStream(VideoPacket);\n        return {\n            writable: deserializeStream.writable,\n            readable: deserializeStream.readable.pipeThrough(new TransformStream({\n                transform(packet, controller) {\n                    if (packet.pts === NO_PTS) {\n                        const sequenceParameterSet = parse_sequence_parameter_set(packet.data.slice().buffer);\n                        const { profile_idc: profileIndex, constraint_set: constraintSet, level_idc: levelIndex, pic_width_in_mbs_minus1, pic_height_in_map_units_minus1, frame_mbs_only_flag, frame_crop_left_offset, frame_crop_right_offset, frame_crop_top_offset, frame_crop_bottom_offset, } = sequenceParameterSet;\n                        const encodedWidth = (pic_width_in_mbs_minus1 + 1) * 16;\n                        const encodedHeight = (pic_height_in_map_units_minus1 + 1) * (2 - frame_mbs_only_flag) * 16;\n                        const cropLeft = frame_crop_left_offset * 2;\n                        const cropRight = frame_crop_right_offset * 2;\n                        const cropTop = frame_crop_top_offset * 2;\n                        const cropBottom = frame_crop_bottom_offset * 2;\n                        const croppedWidth = encodedWidth - cropLeft - cropRight;\n                        const croppedHeight = encodedHeight - cropTop - cropBottom;\n                        header = packet.data;\n                        controller.enqueue({\n                            type: 'configuration',\n                            data: {\n                                profileIndex,\n                                constraintSet,\n                                levelIndex,\n                                encodedWidth,\n                                encodedHeight,\n                                cropLeft,\n                                cropRight,\n                                cropTop,\n                                cropBottom,\n                                croppedWidth,\n                                croppedHeight,\n                            }\n                        });\n                        return;\n                    }\n                    let frameData;\n                    if (header) {\n                        frameData = new Uint8Array(header.byteLength + packet.data.byteLength);\n                        frameData.set(header);\n                        frameData.set(packet.data, header.byteLength);\n                        header = undefined;\n                    }\n                    else {\n                        frameData = packet.data;\n                    }\n                    controller.enqueue({\n                        type: 'frame',\n                        pts: packet.pts,\n                        data: frameData,\n                    });\n                }\n            }))\n        };\n    }\n    getControlMessageTypes() {\n        return [\n            /*  0 */ ScrcpyControlMessageType.InjectKeycode,\n            /*  1 */ ScrcpyControlMessageType.InjectText,\n            /*  2 */ ScrcpyControlMessageType.InjectTouch,\n            /*  3 */ ScrcpyControlMessageType.InjectScroll,\n            /*  4 */ ScrcpyControlMessageType.BackOrScreenOn,\n            /*  5 */ ScrcpyControlMessageType.ExpandNotificationPanel,\n            /*  6 */ ScrcpyControlMessageType.CollapseNotificationPanel,\n            /*  7 */ ScrcpyControlMessageType.GetClipboard,\n            /*  8 */ ScrcpyControlMessageType.SetClipboard,\n            /*  9 */ ScrcpyControlMessageType.SetScreenPowerMode,\n            /* 10 */ ScrcpyControlMessageType.RotateDevice,\n        ];\n    }\n    serializeBackOrScreenOnControlMessage(message) {\n        if (message.action === AndroidKeyEventAction.Down) {\n            return ScrcpyBackOrScreenOnEvent1_16.serialize(message);\n        }\n        return undefined;\n    }\n    serializeInjectScrollControlMessage(message) {\n        return ScrcpyInjectScrollControlMessage1_16.serialize(message);\n    }\n}\n//# sourceMappingURL=index.js.map","import Struct, { placeholder } from \"@yume-chan/struct\";\nimport { ScrcpyControlMessageType } from \"../message.js\";\nimport { ScrcpyBackOrScreenOnEvent1_16, ScrcpyOptions1_16 } from \"./1_16/index.js\";\nexport const ScrcpyBackOrScreenOnEvent1_18 = new Struct()\n    .fields(ScrcpyBackOrScreenOnEvent1_16)\n    .uint8('action', placeholder());\nexport class ScrcpyOptions1_18 extends ScrcpyOptions1_16 {\n    constructor(value) {\n        super(value);\n    }\n    getArgumentOrder() {\n        return super.getArgumentOrder().concat(['powerOffOnClose']);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { powerOffOnClose: false });\n    }\n    getOutputEncoderNameRegex() {\n        return /\\s+scrcpy --encoder '(.*?)'/;\n    }\n    getControlMessageTypes() {\n        /**\n         *  0 InjectKeycode\n         *  1 InjectText\n         *  2 InjectTouch\n         *  3 InjectScroll\n         *  4 BackOrScreenOn\n         *  5 ExpandNotificationPanel\n         *  6 ExpandSettingsPanel\n         *  7 CollapseNotificationPanel\n         *  8 GetClipboard\n         *  9 SetClipboard\n         * 10 SetScreenPowerMode\n         * 11 RotateDevice\n         */\n        const types = super.getControlMessageTypes();\n        types.splice(6, 0, ScrcpyControlMessageType.ExpandSettingPanel);\n        return types;\n    }\n    serializeBackOrScreenOnControlMessage(message) {\n        return ScrcpyBackOrScreenOnEvent1_18.serialize(message);\n    }\n}\n//# sourceMappingURL=1_18.js.map","// cspell: ignore autosync\nimport { ScrcpyOptions1_18 } from './1_18.js';\nimport { toScrcpyOptionValue } from \"./common.js\";\nfunction toSnakeCase(input) {\n    return input.replace(/([A-Z])/g, '_$1').toLowerCase();\n}\nexport class ScrcpyOptions1_21 extends ScrcpyOptions1_18 {\n    constructor(init) {\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { clipboardAutosync: true });\n    }\n    formatServerArguments() {\n        // 1.21 changed the format of arguments\n        // So `getArgumentOrder()` is no longer needed\n        return Object.entries(this.value)\n            .map(([key, value]) => [key, toScrcpyOptionValue(value, undefined)])\n            .filter((pair) => pair[1] !== undefined)\n            .map(([key, value]) => `${toSnakeCase(key)}=${value}`);\n    }\n}\n//# sourceMappingURL=1_21.js.map","import Struct from \"@yume-chan/struct\";\nimport { ScrcpyClientForwardConnection, ScrcpyClientReverseConnection } from \"../connection.js\";\nimport { ScrcpyInjectScrollControlMessage1_16 } from \"./1_16/index.js\";\nimport { ScrcpyOptions1_21 } from \"./1_21.js\";\nexport const ScrcpyInjectScrollControlMessage1_22 = new Struct()\n    .fields(ScrcpyInjectScrollControlMessage1_16)\n    .int32(\"buttons\");\nexport class ScrcpyOptions1_22 extends ScrcpyOptions1_21 {\n    constructor(init) {\n        if (init.rawVideoStream) {\n            // Set implied options for client-side processing\n            init.sendDeviceMeta = false;\n            init.sendFrameMeta = false;\n            init.sendDummyByte = false;\n        }\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { downsizeOnError: true, sendDeviceMeta: true, sendDummyByte: true, rawVideoStream: false });\n    }\n    createConnection(device) {\n        var _a, _b, _c;\n        const defaultValue = this.getDefaultValue();\n        const options = {\n            control: (_a = this.value.control) !== null && _a !== void 0 ? _a : defaultValue.control,\n            sendDummyByte: (_b = this.value.sendDummyByte) !== null && _b !== void 0 ? _b : defaultValue.sendDummyByte,\n            sendDeviceMeta: (_c = this.value.sendDeviceMeta) !== null && _c !== void 0 ? _c : defaultValue.sendDeviceMeta,\n        };\n        if (this.value.tunnelForward) {\n            return new ScrcpyClientForwardConnection(device, options);\n        }\n        else {\n            return new ScrcpyClientReverseConnection(device, options);\n        }\n    }\n    serializeInjectScrollControlMessage(message) {\n        return ScrcpyInjectScrollControlMessage1_22.serialize(message);\n    }\n}\n//# sourceMappingURL=1_22.js.map","import { TransformStream } from \"@yume-chan/adb\";\nimport { ScrcpyOptions1_22 } from './1_22.js';\nconst KEYFRAME_PTS = BigInt(1) << BigInt(62);\nexport class ScrcpyOptions1_23 extends ScrcpyOptions1_22 {\n    constructor(init) {\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { cleanup: true });\n    }\n    createVideoStreamTransformer() {\n        const superStream = super.createVideoStreamTransformer();\n        return {\n            writable: superStream.writable,\n            readable: superStream.readable.pipeThrough(new TransformStream({\n                transform(packet, controller) {\n                    if (packet.type !== 'frame') {\n                        controller.enqueue(packet);\n                        return;\n                    }\n                    if (packet.pts !== undefined && packet.pts & KEYFRAME_PTS) {\n                        packet.keyframe = true;\n                        packet.pts &= ~KEYFRAME_PTS;\n                    }\n                    controller.enqueue(packet);\n                }\n            }))\n        };\n    }\n}\n//# sourceMappingURL=1_23.js.map","import { ScrcpyOptions1_23 } from './1_23.js';\nexport class ScrcpyOptions1_24 extends ScrcpyOptions1_23 {\n    constructor(init) {\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { powerOn: true });\n    }\n}\n//# sourceMappingURL=1_24.js.map","import { __awaiter } from \"tslib\";\nimport { WrapWritableStream } from \"@yume-chan/adb\";\nimport { DEFAULT_SERVER_PATH } from \"./options/index.js\";\nexport function pushServer(device, options = {}) {\n    const { path = DEFAULT_SERVER_PATH } = options;\n    let sync;\n    return new WrapWritableStream({\n        start() {\n            return __awaiter(this, void 0, void 0, function* () {\n                sync = yield device.sync();\n                return sync.write(path);\n            });\n        },\n        close() {\n            return __awaiter(this, void 0, void 0, function* () {\n                yield sync.dispose();\n            });\n        },\n    });\n}\n//# sourceMappingURL=push-server.js.map"],"names":["LayerHost","props","className","layerHostId","_a","id","hostId","layerHostRef","rootRef","notifyLayersChanged","componentRef","current","ref","window","__NEXT_P","push","cachedValue","SERVER_URL","toString","FetchWithProgress","url","_downloaded","_total","progressEvent","EventEmitter","this","promise","fetch","response","reader","chunks","result","position","chunk","Number","parseInt","headers","get","fire","body","getReader","read","done","value","byteLength","reduce","item","Uint8Array","set","downloaded","total","onProgress","event","clamp","min","max","SettingItem","observer","label","definition","settings","onChange","description","span","TooltipHost","content","Icon","iconName","Icons","type","Dropdown","options","placeholder","selectedKey","key","e","option","Toggle","checked","SpinButton","labelPosition","Position","step","ScrcpyPageState","running","deviceView","rendererContainer","logVisible","log","settingsVisible","demoModeVisible","navigationBarVisible","width","height","rotate","client","undefined","encoders","decoders","name","Constructor","TinyH264Decoder","decoder","connecting","serverTotalSize","serverDownloadedSize","debouncedServerDownloadedSize","serverDownloadSpeed","serverUploadedSize","debouncedServerUploadedSize","serverUploadSpeed","maxSize","bitRate","start","intervalId","serverBuffer","decoderDefinition","globalState","Error","runInAction","setInterval","action","catch","clearInterval","ReadableStream","controller","enqueue","close","pipeThrough","ChunkStream","ADB_SYNC_MAX_PACKET_SIZE","ProgressStream","progress","pipeTo","pushServer","ScrcpyClient","DEFAULT_SERVER_PATH","SCRCPY_SERVER_VERSION","ScrcpyOptions1_24","logLevel","ScrcpyLogLevel","tunnelForward","sendDeviceMeta","sendDummyByte","control","cleanup","length","find","x","lockVideoOrientation","ScrcpyScreenOrientation","encoderName","encoder","codecOptions","ignoreDecoderCodecArgs","CodecOptions","profile","maxProfile","level","maxLevel","formatServerArguments","join","stdout","WritableStream","write","line","videoStream","InspectStream","packet","data","croppedWidth","croppedHeight","writable","exit","then","stop","onClipboardChange","navigator","clipboard","writeText","handleBackPointerDown","button","currentTarget","setPointerCapture","pointerId","pressBackOrTurnOnScreen","AndroidKeyEventAction","handleBackPointerUp","handleHomePointerDown","injectKeyCode","keyCode","AndroidKeyCode","repeat","metaState","handleHomePointerUp","handleAppSwitchPointerDown","handleAppSwitchPointerUp","injectTouch","calculatePointerPosition","clientX","clientY","y","pointerType","BigInt","pointerX","pointerY","pressure","buttons","handlePointerDown","focus","preventDefault","AndroidMotionEventAction","handlePointerMove","handlePointerUp","handleWheel","stopPropagation","injectScroll","scrollX","Math","sign","deltaX","scrollY","deltaY","handleContextMenu","handleKeyDown","code","match","injectText","Backspace","Space","makeAutoObservable","observable","handleDeviceViewRef","handleRendererContainerRef","autorun","firstChild","remove","appendChild","renderer","VideoDecoder","setTimeout","unshift","WebCodecsDecoder","dispose","element","addEventListener","passive","viewRect","getBoundingClientRect","pointerViewX","pointerViewY","rotatedWidth","state","rotatedHeight","commandBarItems","iconProps","text","onClick","disabled","iconOnly","enterFullscreen","rotateDevice","commandBarFarItems","tooltipHostProps","p","ExternalLink","href","spaceAfter","calloutProps","calloutMaxWidth","settingDefinitions","map","console","ConnectionDialog","useId","useState","useEffect","setIsClient","isClient","style","top","bottom","left","right","margin","pointerEvents","Dialog","hidden","modalProps","layerProps","dialogContentProps","title","Stack","tokens","CommonStackTokens","ProgressIndicator","percentComplete","formatSpeed","progressHidden","NavigationBar","children","verticalFill","horizontalAlign","background","horizontal","maxWidth","verticalAlign","IconButton","transform","color","onPointerDown","onPointerUp","useClasses","makeStyles","video","transformOrigin","classes","RouteStackProps","Head","CommandBar","items","farItems","grow","styles","root","DeviceView","BottomElement","div","tabIndex","onPointerMove","onPointerCancel","onKeyDown","onContextMenu","padding","overflow","display","fontFamily","overflowY","whiteSpace","wordWrap","index","DemoModePanel","ScrcpyControlMessageType","ScrcpySimpleControlMessage","uint8","ScrcpyInjectTouchControlMessage","fields","uint64","uint32","uint16","ScrcpyInjectTextControlMessage","string","lengthField","ScrcpyInjectKeyCodeControlMessage","ClipboardMessage","constructor","adb","process","controlStream","clipboardChangeEvent","lastTouchMessage","_adb","_stdout","DecodeUtf8Stream","TransformStream","indexOf","substring","splitLines","_videoStream","readable","createVideoStreamTransformer","_screenWidth","_screenHeight","buffered","AdbBufferedStream","_controlStreamWriter","getWriter","deserialize","static","path","version","encoderNameRegex","getOutputEncoderNameRegex","connection","createConnection","initialize","subprocess","spawn","protocols","AdbSubprocessNoneProtocol","Promise","race","getStreams","kill","screenWidth","screenHeight","checkControlStream","caller","getControlMessageTypeValue","getControlMessageTypes","message","serialize","Object","assign","InjectKeycode","InjectText","now","Date","Move","HoverMove","includes","InjectTouch","buffer","serializeInjectScrollControlMessage","InjectScroll","serializeBackOrScreenOnControlMessage","BackOrScreenOn","sendSimpleControlMessage","RotateDevice","AndroidCodecProfile","AndroidCodecLevel","worker","workerReady","pendingResolvers","streamId","pictureReadyEvent","TinyH264Wrapper","super","addDisposable","handlePictureReady","onPictureReady","renderStateId","feed","postMessage","offset","cachedInitializePromise","all","YuvBuffer","default","YuvCanvas","Baseline","Level4","_frameRendered","_renderer","document","createElement","_writable","configure","_initializer","slice","frameRendered","config","_yuvCanvas","attach","encodedWidth","encodedHeight","chromaWidth","chromaHeight","format","cropLeft","cropTop","cropWidth","cropHeight","displayWidth","displayHeight","wrapper","Worker","URL","resolver","resolve","createTinyH264Wrapper","uPlaneOffset","vPlaneOffset","array","frame","lumaPlane","chromaPlane","drawFrame","toHex","padStart","toUpperCase","animationFrame","render","lastFrame","context","drawImage","requestAnimationFrame","getContext","output","error","decode","EncodedVideoChunk","keyframe","timestamp","profileIndex","constraintSet","levelIndex","codec","optimizeForLatency","cancelAnimationFrame","delay","time","globalThis","ScrcpyClientConnection","device","ScrcpyClientForwardConnection","connect","createSocket","connectAndRetry","i","connectVideoStream","stream","releaseLock","ScrcpyClientReverseConnection","reverse","queue","streams","writer","address","add","socket","accept","toScrcpyOptionValue","empty","toOptionValue","isScrcpyOptionValue","BitReader","bytePosition","bitPosition","next","decodeExponentialGolombNumber","parse_sequence_parameter_set","nalu","writeIndex","zeroCount","inEmulation","byte","lastZeroCount","subarray","iterateNalu","nal_ref_idc","profile_idc","constraint_set","constraint_set_reader","constraint_set0_flag","constraint_set1_flag","constraint_set2_flag","constraint_set3_flag","constraint_set4_flag","constraint_set5_flag","level_idc","seq_parameter_set_id","chroma_format_idc","seq_scaling_list_present_flag","pic_order_cnt_type","num_ref_frames_in_pic_order_cnt_cycle","offset_for_ref_frame","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","frame_cropping_flag","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","entries","filter","VideoPacket","uint8Array","NO_PTS","ScrcpyBackOrScreenOnEvent1_16","ScrcpyInjectScrollControlMessage1_16","int32","ScrcpyOptions1_16","Verbose","Debug","Initial","Unlocked","getArgumentOrder","getDefaultValue","maxFps","crop","sendFrameMeta","displayId","showTouches","stayAwake","defaults","header","deserializeStream","StructDeserializeStream","pts","sequenceParameterSet","cropRight","cropBottom","frameData","ExpandNotificationPanel","CollapseNotificationPanel","GetClipboard","SetClipboard","SetScreenPowerMode","Down","ScrcpyBackOrScreenOnEvent1_18","ScrcpyOptions1_18","concat","powerOffOnClose","types","splice","ExpandSettingPanel","ScrcpyOptions1_21","init","clipboardAutosync","pair","input","replace","toLowerCase","ScrcpyInjectScrollControlMessage1_22","ScrcpyOptions1_22","rawVideoStream","downsizeOnError","_b","_c","defaultValue","KEYFRAME_PTS","ScrcpyOptions1_23","superStream","powerOn","sync","WrapWritableStream"],"sourceRoot":""}