{"version":3,"file":"static/chunks/pages/packet-log-88d56e7a0f535589.js","mappings":"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","sources":["webpack://_N_E/?8c44","webpack://_N_E/./src/pages/packet-log.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/packet-log\",\n      function () {\n        return require(\"private-next-pages/packet-log.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/packet-log\"])\n      });\n    }\n  ","import { ICommandBarItemProps, Stack, StackItem } from \"@fluentui/react\";\nimport { makeStyles, mergeClasses, shorthands } from \"@griffel/react\";\nimport { AdbCommand, decodeUtf8 } from \"@yume-chan/adb\";\nimport { autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport {\n    CommandBar,\n    Grid,\n    GridCellProps,\n    GridColumn,\n    GridHeaderProps,\n    GridRowProps,\n    HexViewer,\n    toText,\n} from \"../components\";\nimport { GLOBAL_STATE, PacketLogItem } from \"../state\";\nimport {\n    Icons,\n    RouteStackProps,\n    useStableCallback,\n    withDisplayName,\n} from \"../utils\";\n\nconst ADB_COMMAND_NAME = {\n    [AdbCommand.Auth]: \"AUTH\",\n    [AdbCommand.Close]: \"CLSE\",\n    [AdbCommand.Connect]: \"CNXN\",\n    [AdbCommand.OK]: \"OKAY\",\n    [AdbCommand.Open]: \"OPEN\",\n    [AdbCommand.Write]: \"WRTE\",\n};\n\ninterface Column extends GridColumn {\n    title: string;\n}\n\nconst LINE_HEIGHT = 32;\n\nconst state = new (class {\n    get empty() {\n        return !GLOBAL_STATE.logs.length;\n    }\n\n    get commandBarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: \"clear\",\n                disabled: this.empty,\n                iconProps: { iconName: Icons.Delete },\n                text: \"Clear\",\n                onClick: () => GLOBAL_STATE.clearLog(),\n            },\n        ];\n    }\n\n    selectedPacket: PacketLogItem | undefined = undefined;\n\n    constructor() {\n        makeAutoObservable(this, {\n            selectedPacket: observable.ref,\n        });\n\n        autorun(() => {\n            if (GLOBAL_STATE.logs.length === 0) {\n                this.selectedPacket = undefined;\n            }\n        });\n    }\n})();\n\nconst useClasses = makeStyles({\n    grow: {\n        height: 0,\n    },\n    grid: {\n        height: \"100%\",\n    },\n    header: {\n        textAlign: \"center\",\n        lineHeight: `${LINE_HEIGHT}px`,\n    },\n    row: {\n        \"&:hover\": {\n            backgroundColor: \"#f3f2f1\",\n        },\n    },\n    selected: {\n        backgroundColor: \"#edebe9\",\n    },\n    code: {\n        fontFamily: \"monospace\",\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\",\n        lineHeight: LINE_HEIGHT + \"px\",\n        cursor: \"default\",\n        ...shorthands.overflow(\"hidden\"),\n    },\n    hexViewer: {\n        ...shorthands.padding(\"12px\"),\n        ...shorthands.borderTop(\"1px\", \"solid\", \"rgb(243, 242, 241)\"),\n    },\n});\n\nconst columns: Column[] = [\n    {\n        title: \"Direction\",\n        width: 100,\n        CellComponent: withDisplayName(\"Direction\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.direction}\n                    </div>\n                );\n            }\n        ),\n    },\n    {\n        title: \"Command\",\n        width: 100,\n        CellComponent: withDisplayName(\"Command\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                if (!item.commandString) {\n                    item.commandString =\n                        ADB_COMMAND_NAME[item.command as AdbCommand] ??\n                        decodeUtf8(new Uint32Array([item.command]));\n                }\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.commandString}\n                    </div>\n                );\n            }\n        ),\n    },\n    {\n        title: \"Arg0\",\n        width: 100,\n        CellComponent: withDisplayName(\"Command\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                if (!item.arg0String) {\n                    item.arg0String = item.arg0.toString(16).padStart(8, \"0\");\n                }\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.arg0String}\n                    </div>\n                );\n            }\n        ),\n    },\n    {\n        title: \"Arg1\",\n        width: 100,\n        CellComponent: withDisplayName(\"Command\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                if (!item.arg1String) {\n                    item.arg1String = item.arg1.toString(16).padStart(8, \"0\");\n                }\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.arg1String}\n                    </div>\n                );\n            }\n        ),\n    },\n    {\n        title: \"Payload\",\n        width: 200,\n        flexGrow: 1,\n        CellComponent: withDisplayName(\"Command\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                if (!item.payloadString) {\n                    item.payloadString = toText(item.payload.subarray(0, 100));\n                }\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.payloadString}\n                    </div>\n                );\n            }\n        ),\n    },\n];\n\nconst Header = withDisplayName(\"Header\")(\n    ({ className, columnIndex, ...rest }: GridHeaderProps) => {\n        const classes = useClasses();\n\n        return (\n            <div className={mergeClasses(className, classes.header)} {...rest}>\n                {columns[columnIndex].title}\n            </div>\n        );\n    }\n);\n\nconst Row = observer(function Row({\n    className,\n    rowIndex,\n    ...rest\n}: GridRowProps) {\n    const classes = useClasses();\n\n    const handleClick = useStableCallback(() => {\n        runInAction(() => {\n            state.selectedPacket = GLOBAL_STATE.logs[rowIndex];\n        });\n    });\n\n    return (\n        <div\n            className={mergeClasses(\n                className,\n                classes.row,\n                state.selectedPacket === GLOBAL_STATE.logs[rowIndex] &&\n                    classes.selected\n            )}\n            onClick={handleClick}\n            {...rest}\n        />\n    );\n});\n\nconst PacketLog: NextPage = () => {\n    const classes = useClasses();\n\n    return (\n        <Stack {...RouteStackProps} tokens={{}}>\n            <Head>\n                <title>Packet Log - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} />\n\n            <StackItem className={classes.grow} grow>\n                <Grid\n                    className={classes.grid}\n                    rowCount={GLOBAL_STATE.logs.length}\n                    rowHeight={LINE_HEIGHT}\n                    columns={columns}\n                    HeaderComponent={Header}\n                    RowComponent={Row}\n                />\n            </StackItem>\n\n            {state.selectedPacket &&\n                state.selectedPacket.payload.length > 0 && (\n                    <StackItem className={classes.grow} grow>\n                        <HexViewer\n                            className={classes.hexViewer}\n                            data={state.selectedPacket.payload}\n                        />\n                    </StackItem>\n                )}\n        </Stack>\n    );\n};\n\nexport default observer(PacketLog);\n"],"names":["window","__NEXT_P","push","__webpack_require__","ADB_COMMAND_NAME","AdbCommand","state","empty","GLOBAL_STATE","commandBarItems","key","disabled","iconProps","iconName","Icons","text","onClick","constructor","selectedPacket","undefined","makeAutoObservable","observable","autorun","useClasses","makeStyles","grow","height","grid","header","textAlign","lineHeight","concat","row","backgroundColor","selected","code","fontFamily","textOverflow","whiteSpace","LINE_HEIGHT","cursor","shorthands","hexViewer","columns","title","width","CellComponent","withDisplayName","className","rowIndex","rest","param","item","classes","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","mergeClasses","direction","commandString","command","decodeUtf8","Uint32Array","arg0String","arg0","toString","padStart","arg1String","arg1","flexGrow","payloadString","toText","payload","subarray","Header","columnIndex","Row","observer","handleClick","useStableCallback","runInAction","PacketLog","jsxs","Stack","RouteStackProps","tokens","Head","CommandBar","items","StackItem","Grid","rowCount","rowHeight","HeaderComponent","RowComponent","length","HexViewer","data","__webpack_exports__"],"sourceRoot":""}