{"version":3,"file":"static/chunks/pages/packet-log-0a0d3598b684b1ea.js","mappings":"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","sources":["webpack://_N_E/?0b91","webpack://_N_E/./src/pages/packet-log.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/packet-log\",\n      function () {\n        return require(\"private-next-pages/packet-log.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/packet-log\"])\n      });\n    }\n  ","import { ICommandBarItemProps, mergeStyleSets, Stack, StackItem } from \"@fluentui/react\";\nimport { useMergedRefs } from \"@fluentui/react-hooks\";\nimport { AdbCommand, decodeUtf8 } from \"@yume-chan/adb\";\nimport { makeAutoObservable, toJS } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { Children, createElement, CSSProperties, forwardRef, isValidElement, memo, ReactNode, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { GridChildComponentProps, VariableSizeGrid, VariableSizeGridProps } from 'react-window';\nimport { CommandBar, ResizeObserver, Size } from \"../components\";\nimport { globalState, PacketLogItem } from \"../state\";\nimport { Icons, RouteStackProps } from \"../utils\";\n\nconst ADB_COMMAND_NAME = {\n    [AdbCommand.Auth]: 'AUTH',\n    [AdbCommand.Close]: 'CLSE',\n    [AdbCommand.Connect]: 'CNXN',\n    [AdbCommand.OK]: 'OKAY',\n    [AdbCommand.Open]: 'OPEN',\n    [AdbCommand.Write]: 'WRTE',\n};\n\ninterface Column<T> {\n    key: string;\n    title: string;\n    width?: number;\n    flexGrow?: number;\n    render: (value: T, style: CSSProperties) => JSX.Element;\n}\n\nconst LINE_HEIGHT = 32;\n\ninterface GridProps extends Omit<VariableSizeGridProps<void>, 'width' | 'height'> {\n    stickyRowCount?: number | undefined;\n    // stickyColumnCount?: number | undefined;\n}\n\nconst Grid = forwardRef<VariableSizeGrid, GridProps>(\n    function Grid({\n        rowCount,\n        rowHeight,\n        columnCount,\n        columnWidth,\n        children,\n        ...props\n    }, ref) {\n        const styles = mergeStyleSets({\n            container: {\n                display: 'flex',\n                flexDirection: 'column',\n            },\n            scroller: {\n                flex: 1,\n                height: 0,\n                overflow: 'auto',\n            },\n            stickyRows: {\n                flexShrink: 0,\n            },\n        });\n\n        const gridRef = useRef<VariableSizeGrid<void> | null>(null);\n        const combinedRef = useMergedRefs(ref, gridRef);\n\n        const [containerSize, setContainerSize] = useState<Size>({ width: 0, height: 0 });\n\n        useEffect(() => {\n            gridRef.current?.resetAfterRowIndex(rowCount - 2);\n        }, [rowCount]);\n\n        const stickyRowCount = props.stickyRowCount ?? 0;\n        // const stickyColumnCount = props.stickyColumnCount ?? 0;\n\n        const stickyRowItems: ReactNode[] = [];\n\n        if (gridRef.current) {\n            let rowStartIndex = 0;\n            const rowStopIndex = rowStartIndex + stickyRowCount;\n\n            let [\n                columnStartIndex,\n                columnStopIndex,\n                // @ts-expect-error\n            ] = gridRef.current._getHorizontalRangeToRender();\n\n            for (let rowIndex = rowStartIndex; rowIndex < rowStopIndex; rowIndex += 1) {\n                for (let columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex += 1) {\n                    stickyRowItems.push(\n                        createElement(children, {\n                            rowIndex,\n                            columnIndex,\n                            data: undefined,\n                            key: `${rowIndex}-${columnIndex}`,\n                            // @ts-expect-error\n                            style: gridRef.current._getItemStyle(rowIndex, columnIndex),\n                        })\n                    );\n                }\n            }\n        }\n\n        return (\n            <div>\n                <div className={styles.stickyRows}>\n                    {stickyRowItems}\n                </div>\n                <ResizeObserver\n                    className={styles.scroller}\n                    onResize={setContainerSize}\n                >\n                    <VariableSizeGrid\n                        {...props}\n                        ref={combinedRef}\n                        width={containerSize.width}\n                        height={containerSize.height}\n                        rowCount={rowCount}\n                        rowHeight={rowHeight}\n                        columnCount={columnCount}\n                        columnWidth={columnWidth}\n                    >\n                        {children}\n                    </VariableSizeGrid>\n                </ResizeObserver>\n            </div>\n        );\n    }\n);\n\ninterface DataGridProps<T> {\n    data: T[];\n    columns: Column<T>[];\n    rowHeight: number;\n}\n\nconst DataGrid = <T extends unknown>({\n    data,\n    columns,\n    rowHeight,\n}: DataGridProps<T>) => {\n    const styles = mergeStyleSets({\n        container: {\n            width: '100%',\n            height: '100%',\n        },\n        grid: {\n            position: 'absolute !important',\n            top: 0,\n            left: 0,\n        },\n    });\n\n    const [containerSize, setContainerSize] = useState<Size>({ width: 0, height: 0 });\n    const columnWidths = useMemo(() => {\n        let distributableWidth = containerSize.width;\n        let distributedSlices = 0;\n        for (const column of columns) {\n            if (column.width) {\n                distributableWidth -= column.width;\n            } else {\n                distributedSlices += column.flexGrow ?? 1;\n            }\n        }\n        const widthPerSlice = distributableWidth / distributedSlices;\n\n        return columns.map(column => {\n            if (column.width) {\n                return column.width;\n            } else {\n                return widthPerSlice * (column.flexGrow ?? 1);\n            }\n        });\n    }, [containerSize.width, columns]);\n    const columnWidth = useCallback(\n        (index: number) => columnWidths[index],\n        [columnWidths]\n    );\n\n    const gridRef = useRef<VariableSizeGrid | null>(null);\n    useEffect(() => {\n        gridRef.current?.resetAfterColumnIndex(\n            columns.findIndex(column => !column.width),\n            true\n        );\n    }, [columns, columnWidths]);\n\n    const DataGridItem = useMemo(() => memo(\n        function DataGridItem({\n            rowIndex,\n            columnIndex,\n            style,\n        }: GridChildComponentProps<any>) {\n            if (rowIndex === 0) {\n                return (\n                    <div\n                        key={columns[columnIndex].key}\n                        style={style}\n                    >\n                        {columns[columnIndex].title}\n                    </div>\n                );\n            }\n            return columns[columnIndex].render(data[rowIndex - 1], style);\n        }),\n        [columns, data]\n    );\n\n    return (\n        <ResizeObserver\n            className={styles.container}\n            onResize={setContainerSize}\n        >\n            <Grid\n                ref={gridRef}\n                className={styles.grid}\n                rowCount={data.length + 1}\n                rowHeight={() => rowHeight}\n                estimatedRowHeight={rowHeight}\n                columnCount={columns.length}\n                columnWidth={columnWidth}\n                stickyRowCount={1}\n            >\n                {DataGridItem}\n            </Grid>\n        </ResizeObserver>\n    );\n};\n\nconst PRINTABLE_CHARACTERS: [number, number][] = [\n    [33, 126],\n    [161, 172],\n    [174, 255],\n];\n\nfunction isPrintableCharacter(code: number) {\n    return PRINTABLE_CHARACTERS.some(\n        ([start, end]) =>\n            code >= start &&\n            code <= end\n    );\n}\n\nfunction toCharacter(code: number) {\n    if (isPrintableCharacter(code))\n        return String.fromCharCode(code);\n    return '.';\n}\n\nfunction toText(data: Uint8Array) {\n    let result = '';\n    for (const code of data) {\n        result += toCharacter(code);\n    }\n    return result;\n}\n\nconst state = new class {\n    get commandBarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: 'clear',\n                disabled: !globalState.device,\n                iconProps: { iconName: Icons.Delete },\n                text: 'Clear',\n                onClick: () => globalState.clearLog(),\n            }\n        ];\n    }\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n};\n\nconst PacketLog: NextPage = () => {\n    const styles = mergeStyleSets({\n        header: {\n            position: 'sticky',\n            textAlign: 'center',\n            fontWeight: 'bold',\n            lineHeight: LINE_HEIGHT + 'px',\n        },\n        code: {\n            fontFamily: 'monospace',\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            lineHeight: LINE_HEIGHT + 'px',\n        }\n    });\n\n    const columns: Column<PacketLogItem>[] = useMemo(() => [\n        {\n            key: 'direction',\n            title: 'Direction',\n            width: 100,\n            render(item, style) {\n                return (\n                    <div\n                        className={styles.code}\n                        style={style}\n                    >\n                        {item.direction}\n                    </div>\n                );\n            },\n        },\n        {\n            key: 'command',\n            title: 'Command',\n            width: 100,\n            render(item, style) {\n                if (!item.commandString) {\n                    item.commandString =\n                        ADB_COMMAND_NAME[item.command as AdbCommand] ??\n                        decodeUtf8(new Uint32Array([item.command]));\n                }\n\n                return (\n                    <div\n                        className={styles.code}\n                        style={style}\n                    >\n                        {item.commandString}\n                    </div>\n                );\n            }\n        },\n        {\n            key: 'arg0',\n            title: 'Arg0',\n            width: 100,\n            render(item, style) {\n                if (!item.arg0String) {\n                    item.arg0String = item.arg0.toString(16).padStart(8, '0');\n                }\n\n                return (\n                    <div\n                        className={styles.code}\n                        style={style}\n                    >\n                        {item.arg0String}\n                    </div>\n                );\n            }\n        },\n        {\n            key: 'arg1',\n            title: 'Arg1',\n            width: 100,\n            render(item, style) {\n                if (!item.arg1String) {\n                    item.arg1String = item.arg1.toString(16).padStart(8, '0');\n                }\n\n                return (\n                    <div\n                        className={styles.code}\n                        style={style}\n                    >\n                        {item.arg1String}\n                    </div>\n                );\n            }\n        },\n        {\n            key: 'payload',\n            title: 'Payload',\n            render(item, style) {\n                if (!item.payloadString) {\n                    item.payloadString = toText(item.payload);\n                }\n\n                return (\n                    <div\n                        className={styles.code}\n                        style={style}\n                    >\n                        {item.payloadString}\n                    </div>\n                );\n            }\n        }\n    ], [styles.code]);\n\n    return (\n        <Stack {...RouteStackProps} tokens={{}}>\n            <Head>\n                <title>Packet Log - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} />\n\n            <StackItem grow shrink>\n                <DataGrid\n                    data={toJS(globalState.logs)}\n                    columns={columns}\n                    rowHeight={LINE_HEIGHT}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(PacketLog);\n"],"names":["window","__NEXT_P","push","ADB_COMMAND_NAME","AdbCommand","Grid","forwardRef","ref","props","rowCount","rowHeight","columnCount","columnWidth","children","styles","mergeStyleSets","container","display","flexDirection","scroller","flex","height","overflow","stickyRows","flexShrink","gridRef","useRef","combinedRef","useMergedRefs","useState","width","containerSize","setContainerSize","useEffect","current","resetAfterRowIndex","stickyRowCount","stickyRowItems","rowStopIndex","_getHorizontalRangeToRender","columnStartIndex","columnStopIndex","rowIndex","columnIndex","createElement","data","undefined","key","style","_getItemStyle","div","className","ResizeObserver","onResize","VariableSizeGrid","DataGrid","columns","grid","position","top","left","columnWidths","useMemo","distributableWidth","distributedSlices","column","flexGrow","widthPerSlice","map","useCallback","index","resetAfterColumnIndex","findIndex","DataGridItem","memo","title","render","length","estimatedRowHeight","PRINTABLE_CHARACTERS","isPrintableCharacter","code","some","start","end","toCharacter","String","fromCharCode","toText","result","state","makeAutoObservable","this","commandBarItems","disabled","globalState","iconProps","iconName","Icons","text","onClick","observer","header","textAlign","fontWeight","lineHeight","LINE_HEIGHT","fontFamily","textOverflow","whiteSpace","item","direction","commandString","command","decodeUtf8","Uint32Array","arg0String","arg0","toString","padStart","arg1String","arg1","payloadString","payload","Stack","RouteStackProps","tokens","Head","CommandBar","items","StackItem","grow","shrink","toJS"],"sourceRoot":""}