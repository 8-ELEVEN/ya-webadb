{"version":3,"file":"static/chunks/pages/scrcpy-90e7f606cd791938.js","mappings":"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","sources":["webpack://_N_E/?76ef","webpack://_N_E/../../libraries/scrcpy/esm/message.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.52.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Layer/LayerHost.js","webpack://_N_E/../../libraries/scrcpy/esm/utils.js","webpack://_N_E/../../libraries/scrcpy/esm/connection.js","webpack://_N_E/../../libraries/scrcpy/esm/options/common.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_16.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_18.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_21.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_22.js","webpack://_N_E/../../libraries/scrcpy/esm/push-server.js","webpack://_N_E/../../libraries/scrcpy/esm/sps.js","webpack://_N_E/../../libraries/scrcpy/esm/client.js","webpack://_N_E/../../libraries/scrcpy/esm/codec.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/tinyh264/wrapper.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/tinyh264/index.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/web-codecs/index.js","webpack://_N_E/../../libraries/scrcpy/bin/version.js","webpack://_N_E/./pages/scrcpy.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/next@12.0.11-canary.6_react-dom@17.0.2+react@17.0.2/node_modules/next/head.js"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/scrcpy\",\n      function () {\n        return require(\"private-next-pages/scrcpy.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/scrcpy\"])\n      });\n    }\n  ","import Struct, { placeholder } from '@yume-chan/struct';\nexport var ScrcpyControlMessageType;\n(function (ScrcpyControlMessageType) {\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectKeycode\"] = 0] = \"InjectKeycode\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectText\"] = 1] = \"InjectText\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectTouch\"] = 2] = \"InjectTouch\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectScroll\"] = 3] = \"InjectScroll\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"BackOrScreenOn\"] = 4] = \"BackOrScreenOn\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"ExpandNotificationPanel\"] = 5] = \"ExpandNotificationPanel\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"CollapseNotificationPanel\"] = 6] = \"CollapseNotificationPanel\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"GetClipboard\"] = 7] = \"GetClipboard\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"SetClipboard\"] = 8] = \"SetClipboard\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"SetScreenPowerMode\"] = 9] = \"SetScreenPowerMode\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"RotateDevice\"] = 10] = \"RotateDevice\";\n})(ScrcpyControlMessageType || (ScrcpyControlMessageType = {}));\nexport var AndroidMotionEventAction;\n(function (AndroidMotionEventAction) {\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Down\"] = 0] = \"Down\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Up\"] = 1] = \"Up\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Move\"] = 2] = \"Move\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Cancel\"] = 3] = \"Cancel\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Outside\"] = 4] = \"Outside\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"PointerDown\"] = 5] = \"PointerDown\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"PointerUp\"] = 6] = \"PointerUp\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverMove\"] = 7] = \"HoverMove\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Scroll\"] = 8] = \"Scroll\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverEnter\"] = 9] = \"HoverEnter\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverExit\"] = 10] = \"HoverExit\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"ButtonPress\"] = 11] = \"ButtonPress\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"ButtonRelease\"] = 12] = \"ButtonRelease\";\n})(AndroidMotionEventAction || (AndroidMotionEventAction = {}));\nexport const ScrcpyInjectTouchControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectTouch)\n    .uint8('action', placeholder())\n    .uint64('pointerId')\n    .uint32('pointerX')\n    .uint32('pointerY')\n    .uint16('screenWidth')\n    .uint16('screenHeight')\n    .uint16('pressure')\n    .uint32('buttons');\nexport const ScrcpyInjectTextControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectText)\n    .uint32('length')\n    .string('text', { lengthField: 'length' });\nexport var AndroidKeyEventAction;\n(function (AndroidKeyEventAction) {\n    AndroidKeyEventAction[AndroidKeyEventAction[\"Down\"] = 0] = \"Down\";\n    AndroidKeyEventAction[AndroidKeyEventAction[\"Up\"] = 1] = \"Up\";\n})(AndroidKeyEventAction || (AndroidKeyEventAction = {}));\nexport var AndroidKeyCode;\n(function (AndroidKeyCode) {\n    AndroidKeyCode[AndroidKeyCode[\"Home\"] = 3] = \"Home\";\n    AndroidKeyCode[AndroidKeyCode[\"Back\"] = 4] = \"Back\";\n    AndroidKeyCode[AndroidKeyCode[\"A\"] = 29] = \"A\";\n    AndroidKeyCode[AndroidKeyCode[\"B\"] = 30] = \"B\";\n    AndroidKeyCode[AndroidKeyCode[\"C\"] = 31] = \"C\";\n    AndroidKeyCode[AndroidKeyCode[\"D\"] = 32] = \"D\";\n    AndroidKeyCode[AndroidKeyCode[\"E\"] = 33] = \"E\";\n    AndroidKeyCode[AndroidKeyCode[\"F\"] = 34] = \"F\";\n    AndroidKeyCode[AndroidKeyCode[\"G\"] = 35] = \"G\";\n    AndroidKeyCode[AndroidKeyCode[\"H\"] = 36] = \"H\";\n    AndroidKeyCode[AndroidKeyCode[\"I\"] = 37] = \"I\";\n    AndroidKeyCode[AndroidKeyCode[\"J\"] = 38] = \"J\";\n    AndroidKeyCode[AndroidKeyCode[\"K\"] = 39] = \"K\";\n    AndroidKeyCode[AndroidKeyCode[\"L\"] = 40] = \"L\";\n    AndroidKeyCode[AndroidKeyCode[\"M\"] = 41] = \"M\";\n    AndroidKeyCode[AndroidKeyCode[\"N\"] = 42] = \"N\";\n    AndroidKeyCode[AndroidKeyCode[\"O\"] = 43] = \"O\";\n    AndroidKeyCode[AndroidKeyCode[\"P\"] = 44] = \"P\";\n    AndroidKeyCode[AndroidKeyCode[\"Q\"] = 45] = \"Q\";\n    AndroidKeyCode[AndroidKeyCode[\"R\"] = 46] = \"R\";\n    AndroidKeyCode[AndroidKeyCode[\"S\"] = 47] = \"S\";\n    AndroidKeyCode[AndroidKeyCode[\"T\"] = 48] = \"T\";\n    AndroidKeyCode[AndroidKeyCode[\"U\"] = 49] = \"U\";\n    AndroidKeyCode[AndroidKeyCode[\"V\"] = 50] = \"V\";\n    AndroidKeyCode[AndroidKeyCode[\"W\"] = 51] = \"W\";\n    AndroidKeyCode[AndroidKeyCode[\"X\"] = 52] = \"X\";\n    AndroidKeyCode[AndroidKeyCode[\"Y\"] = 53] = \"Y\";\n    AndroidKeyCode[AndroidKeyCode[\"Z\"] = 54] = \"Z\";\n    AndroidKeyCode[AndroidKeyCode[\"Space\"] = 62] = \"Space\";\n    AndroidKeyCode[AndroidKeyCode[\"Delete\"] = 67] = \"Delete\";\n    AndroidKeyCode[AndroidKeyCode[\"AppSwitch\"] = 187] = \"AppSwitch\";\n})(AndroidKeyCode || (AndroidKeyCode = {}));\nexport const ScrcpyInjectKeyCodeControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectKeycode)\n    .uint8('action', placeholder())\n    .uint32('keyCode')\n    .uint32('repeat')\n    .uint32('metaState');\n//# sourceMappingURL=message.js.map","import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '../../Utilities';\nimport { notifyHostChanged } from './Layer.notification';\nexport var LayerHost = function (props) {\n    var id = props.id, className = props.className;\n    React.useEffect(function () {\n        notifyHostChanged(id);\n        // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n    }, []);\n    useUnmount(function () {\n        notifyHostChanged(id);\n    });\n    return React.createElement(\"div\", __assign({}, props, { className: css('ms-LayerHost', className) }));\n};\nvar useUnmount = function (unmountFunction) {\n    var unmountRef = React.useRef(unmountFunction);\n    unmountRef.current = unmountFunction;\n    React.useEffect(function () { return function () {\n        if (unmountRef.current) {\n            unmountRef.current();\n        }\n    }; }, []);\n};\n//# sourceMappingURL=LayerHost.js.map","export function delay(time) {\n    return new Promise(resolve => {\n        globalThis.setTimeout(resolve, time);\n    });\n}\nconst Utf8Encoder = new TextEncoder();\nconst Utf8Decoder = new TextDecoder();\nexport function encodeUtf8(input) {\n    return Utf8Encoder.encode(input).buffer;\n}\nexport function decodeUtf8(buffer) {\n    return Utf8Decoder.decode(buffer);\n}\n//# sourceMappingURL=utils.js.map","import { __awaiter } from \"tslib\";\nimport { AdbBufferedStream, EventQueue } from \"@yume-chan/adb\";\nimport { delay } from \"./utils\";\nexport class ScrcpyClientConnection {\n    constructor(device, options) {\n        this.device = device;\n        this.options = options;\n    }\n    initialize() { }\n    dispose() { }\n}\nexport class ScrcpyClientForwardConnection extends ScrcpyClientConnection {\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new AdbBufferedStream(yield this.device.createSocket('localabstract:scrcpy'));\n        });\n    }\n    connectAndRetry() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let i = 0; i < 100; i++) {\n                try {\n                    return yield this.connect();\n                }\n                catch (e) {\n                    yield delay(100);\n                }\n            }\n            throw new Error(`Can't connect to server after 100 retries`);\n        });\n    }\n    connectVideoStream() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const stream = yield this.connectAndRetry();\n            if (this.options.sendDummyByte) {\n                // server will write a `0` to signal connection success\n                yield stream.read(1);\n            }\n            return stream;\n        });\n    }\n    getStreams() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const videoStream = yield this.connectVideoStream();\n            let controlStream;\n            if (this.options.control) {\n                controlStream = yield this.connectAndRetry();\n            }\n            if (this.options.sendDeviceMeta) {\n                // 64 bytes device name + 2 bytes video width + 2 bytes video height\n                yield videoStream.read(64 + 2 + 2);\n            }\n            return [videoStream, controlStream];\n        });\n    }\n}\nexport class ScrcpyClientReverseConnection extends ScrcpyClientConnection {\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // try to unbind first\n                yield this.device.reverse.remove('localabstract:scrcpy');\n            }\n            catch (_a) {\n                // ignore error\n            }\n            this.streams = new EventQueue();\n            this.address = yield this.device.reverse.add('localabstract:scrcpy', 27183, {\n                onSocket: (packet, stream) => {\n                    this.streams.enqueue(stream);\n                },\n            });\n        });\n    }\n    accept() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new AdbBufferedStream(yield this.streams.dequeue());\n        });\n    }\n    getStreams() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const videoStream = yield this.accept();\n            let controlStream;\n            if (this.options.control) {\n                controlStream = yield this.accept();\n            }\n            if (this.options.sendDeviceMeta) {\n                // 64 bytes device name + 2 bytes video width + 2 bytes video height\n                yield videoStream.read(64 + 2 + 2);\n            }\n            return [videoStream, controlStream];\n        });\n    }\n    dispose() {\n        // Don't await this!\n        // `reverse.remove`'s response will never arrive\n        // before we read all pending data from `videoStream`\n        this.device.reverse.remove(this.address);\n    }\n}\n//# sourceMappingURL=connection.js.map","export const DEFAULT_SERVER_PATH = '/data/local/tmp/scrcpy-server.jar';\nexport var ScrcpyLogLevel;\n(function (ScrcpyLogLevel) {\n    ScrcpyLogLevel[\"Verbose\"] = \"verbose\";\n    ScrcpyLogLevel[\"Debug\"] = \"debug\";\n    ScrcpyLogLevel[\"Info\"] = \"info\";\n    ScrcpyLogLevel[\"Warn\"] = \"warn\";\n    ScrcpyLogLevel[\"Error\"] = \"error\";\n})(ScrcpyLogLevel || (ScrcpyLogLevel = {}));\nexport var ScrcpyScreenOrientation;\n(function (ScrcpyScreenOrientation) {\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Initial\"] = -2] = \"Initial\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Unlocked\"] = -1] = \"Unlocked\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Portrait\"] = 0] = \"Portrait\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Landscape\"] = 1] = \"Landscape\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"PortraitFlipped\"] = 2] = \"PortraitFlipped\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"LandscapeFlipped\"] = 3] = \"LandscapeFlipped\";\n})(ScrcpyScreenOrientation || (ScrcpyScreenOrientation = {}));\nexport function isScrcpyOptionValue(value) {\n    return typeof value === 'object' &&\n        value !== null &&\n        typeof value.toOptionValue === 'function';\n}\nexport function toScrcpyOptionValue(value, empty) {\n    if (isScrcpyOptionValue(value)) {\n        value = value.toOptionValue();\n    }\n    if (value === undefined) {\n        return empty;\n    }\n    return `${value}`;\n}\n//# sourceMappingURL=common.js.map","import Struct, { placeholder } from \"@yume-chan/struct\";\nimport { ScrcpyClientForwardConnection, ScrcpyClientReverseConnection } from \"../connection\";\nimport { AndroidKeyEventAction, ScrcpyControlMessageType } from \"../message\";\nimport { ScrcpyLogLevel, ScrcpyScreenOrientation, toScrcpyOptionValue } from \"./common\";\nexport class CodecOptions {\n    constructor(value) {\n        this.value = value;\n    }\n    toOptionValue() {\n        const entries = Object.entries(this.value)\n            .filter(([key, value]) => value !== undefined);\n        if (entries.length === 0) {\n            return undefined;\n        }\n        return entries\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n    }\n}\nexport const ScrcpyBackOrScreenOnEvent1_16 = new Struct()\n    .uint8('type', placeholder());\nexport const ScrcpyInjectScrollControlMessage1_16 = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectScroll)\n    .uint32('pointerX')\n    .uint32('pointerY')\n    .uint16('screenWidth')\n    .uint16('screenHeight')\n    .int32('scrollX')\n    .int32('scrollY');\nexport class ScrcpyOptions1_16 {\n    constructor(value) {\n        if (new.target === ScrcpyOptions1_16 &&\n            value.logLevel === ScrcpyLogLevel.Verbose) {\n            value.logLevel = ScrcpyLogLevel.Debug;\n        }\n        if (new.target === ScrcpyOptions1_16 &&\n            value.lockVideoOrientation === ScrcpyScreenOrientation.Initial) {\n            value.lockVideoOrientation = ScrcpyScreenOrientation.Unlocked;\n        }\n        this.value = value;\n    }\n    getArgumnetOrder() {\n        return [\n            'logLevel',\n            'maxSize',\n            'bitRate',\n            'maxFps',\n            'lockVideoOrientation',\n            'tunnelForward',\n            'crop',\n            'sendFrameMeta',\n            'control',\n            'displayId',\n            'showTouches',\n            'stayAwake',\n            'codecOptions',\n            'encoderName',\n        ];\n    }\n    getDefaultValue() {\n        return {\n            logLevel: ScrcpyLogLevel.Debug,\n            maxSize: 0,\n            bitRate: 8000000,\n            maxFps: 0,\n            lockVideoOrientation: ScrcpyScreenOrientation.Unlocked,\n            tunnelForward: false,\n            crop: '-',\n            sendFrameMeta: true,\n            control: true,\n            displayId: 0,\n            showTouches: false,\n            stayAwake: false,\n            codecOptions: new CodecOptions({}),\n            encoderName: '-',\n        };\n    }\n    formatServerArguments() {\n        const defaults = this.getDefaultValue();\n        return this.getArgumnetOrder()\n            .map(key => toScrcpyOptionValue(this.value[key] || defaults[key], '-'));\n    }\n    createConnection(device) {\n        const options = {\n            // Old scrcpy connection always have control stream no matter what the option is\n            control: true,\n            sendDummyByte: true,\n            sendDeviceMeta: true,\n        };\n        if (this.value.tunnelForward) {\n            return new ScrcpyClientForwardConnection(device, options);\n        }\n        else {\n            return new ScrcpyClientReverseConnection(device, options);\n        }\n    }\n    getOutputEncoderNameRegex() {\n        return /\\s+scrcpy --encoder-name '(.*?)'/;\n    }\n    serializeBackOrScreenOnControlMessage(action, device) {\n        if (action === AndroidKeyEventAction.Down) {\n            return ScrcpyBackOrScreenOnEvent1_16.serialize({ type: ScrcpyControlMessageType.BackOrScreenOn });\n        }\n        return undefined;\n    }\n    serializeInjectScrollControlMessage(message) {\n        return ScrcpyInjectScrollControlMessage1_16.serialize(message);\n    }\n}\n//# sourceMappingURL=1_16.js.map","import Struct, { placeholder } from \"@yume-chan/struct\";\nimport { ScrcpyControlMessageType } from \"../message\";\nimport { ScrcpyOptions1_16 } from \"./1_16\";\nexport const ScrcpyBackOrScreenOnEvent1_18 = new Struct()\n    .uint8('type', placeholder())\n    .uint8('action', placeholder());\nexport class ScrcpyOptions1_18 extends ScrcpyOptions1_16 {\n    constructor(value) {\n        super(value);\n    }\n    getArgumnetOrder() {\n        return super.getArgumnetOrder().concat(['powerOffOnClose']);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { powerOffOnClose: false });\n    }\n    getOutputEncoderNameRegex() {\n        return /\\s+scrcpy --encoder '(.*?)'/;\n    }\n    serializeBackOrScreenOnControlMessage(action, device) {\n        return ScrcpyBackOrScreenOnEvent1_18.serialize({\n            type: ScrcpyControlMessageType.BackOrScreenOn,\n            action,\n        });\n    }\n}\n//# sourceMappingURL=1_18.js.map","import { ScrcpyOptions1_18 } from './1_18';\nimport { toScrcpyOptionValue } from \"./common\";\nfunction toSnakeCase(input) {\n    return input.replace(/([A-Z])/g, '_$1').toLowerCase();\n}\nexport class ScrcpyOptions1_21 extends ScrcpyOptions1_18 {\n    constructor(init) {\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { clipboardAutosync: true });\n    }\n    formatServerArguments() {\n        return Object.entries(this.value)\n            .map(([key, value]) => [key, toScrcpyOptionValue(value, undefined)])\n            .filter((pair) => pair[1] !== undefined)\n            .map(([key, value]) => `${toSnakeCase(key)}=${value}`);\n    }\n}\n//# sourceMappingURL=1_21.js.map","import Struct from \"@yume-chan/struct\";\nimport { ScrcpyClientForwardConnection, ScrcpyClientReverseConnection } from \"../connection\";\nimport { ScrcpyInjectScrollControlMessage1_16 } from \"./1_16\";\nimport { ScrcpyOptions1_21 } from \"./1_21\";\nexport const ScrcpyInjectScrollControlMessage1_22 = new Struct()\n    .fields(ScrcpyInjectScrollControlMessage1_16)\n    .int32(\"buttons\");\nexport class ScrcpyOptions1_22 extends ScrcpyOptions1_21 {\n    constructor(init) {\n        if (init.rawVideoStream) {\n            // Set implied options for client-side processing\n            init.sendDeviceMeta = false;\n            init.sendFrameMeta = false;\n            init.sendDummyByte = false;\n            // TODO: Add support for `sendFrameMeta: false`\n            throw new Error('`rawVideoStream:true` is not supported');\n        }\n        if (init.sendFrameMeta === false) {\n            // TODO: Add support for `sendFrameMeta: false`\n            throw new Error('`sendFrameMeta:false` is not supported');\n        }\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { downsizeOnError: true, sendDeviceMeta: true, sendDummyByte: true, rawVideoStream: false });\n    }\n    createConnection(device) {\n        var _a, _b, _c;\n        const defaultValue = this.getDefaultValue();\n        const options = {\n            control: (_a = this.value.control) !== null && _a !== void 0 ? _a : defaultValue.control,\n            sendDummyByte: (_b = this.value.sendDummyByte) !== null && _b !== void 0 ? _b : defaultValue.sendDummyByte,\n            sendDeviceMeta: (_c = this.value.sendDeviceMeta) !== null && _c !== void 0 ? _c : defaultValue.sendDeviceMeta,\n        };\n        if (this.value.tunnelForward) {\n            return new ScrcpyClientForwardConnection(device, options);\n        }\n        else {\n            return new ScrcpyClientReverseConnection(device, options);\n        }\n    }\n    serializeInjectScrollControlMessage(message) {\n        return ScrcpyInjectScrollControlMessage1_22.serialize(message);\n    }\n}\n//# sourceMappingURL=1_22.js.map","import { __awaiter } from \"tslib\";\nimport { DEFAULT_SERVER_PATH } from \"./options\";\nexport function pushServer(device, file, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { path = DEFAULT_SERVER_PATH, onProgress, } = options;\n        const sync = yield device.sync();\n        return sync.write(path, file, undefined, undefined, onProgress);\n    });\n}\n//# sourceMappingURL=push-server.js.map","class BitReader {\n    constructor(buffer) {\n        this.bytePosition = 0;\n        this.bitPosition = 0;\n        this.buffer = buffer;\n    }\n    read(length) {\n        let result = 0;\n        for (let i = 0; i < length; i += 1) {\n            result = (result << 1) | this.next();\n        }\n        return result;\n    }\n    next() {\n        const value = (this.buffer[this.bytePosition] >> (7 - this.bitPosition)) & 1;\n        this.bitPosition += 1;\n        if (this.bitPosition === 8) {\n            this.bytePosition += 1;\n            this.bitPosition = 0;\n        }\n        return value;\n    }\n    decodeExponentialGolombNumber() {\n        let length = 0;\n        while (this.next() === 0) {\n            length += 1;\n        }\n        if (length === 0) {\n            return 0;\n        }\n        return (1 << length | this.read(length)) - 1;\n    }\n}\nfunction* iterateNalu(buffer) {\n    // -1 means we haven't found the first start code\n    let start = -1;\n    let writeIndex = 0;\n    // How many `0x00`s in a row we have counted\n    let zeroCount = 0;\n    let inEmulation = false;\n    for (const byte of buffer) {\n        buffer[writeIndex] = byte;\n        writeIndex += 1;\n        if (inEmulation) {\n            if (byte > 0x03) {\n                // `0x00000304` or larger are invalid\n                throw new Error('Invalid data');\n            }\n            inEmulation = false;\n            continue;\n        }\n        if (byte == 0x00) {\n            zeroCount += 1;\n            continue;\n        }\n        const lastZeroCount = zeroCount;\n        zeroCount = 0;\n        if (start === -1) {\n            // 0x000001 is the start code\n            // But it can be preceded by any number of zeros\n            // So 2 is the minimal\n            if (lastZeroCount >= 2 && byte === 0x01) {\n                // Found start of first NAL unit\n                writeIndex = 0;\n                start = 0;\n                continue;\n            }\n            // Not begin with start code\n            throw new Error('Invalid data');\n        }\n        if (lastZeroCount < 2) {\n            // zero or one `0x00`s are acceptable\n            continue;\n        }\n        if (byte === 0x01) {\n            // Remove all leading `0x00`s and this `0x01`\n            writeIndex -= lastZeroCount + 1;\n            // Found another NAL unit\n            yield buffer.subarray(start, writeIndex);\n            start = writeIndex;\n            continue;\n        }\n        if (lastZeroCount > 2) {\n            // Too much `0x00`s\n            throw new Error('Invalid data');\n        }\n        switch (byte) {\n            case 0x02:\n                // Didn't find why, but 7.4.1 NAL unit semantics forbids `0x000002` appearing in NAL units\n                throw new Error('Invalid data');\n            case 0x03:\n                // `0x000003` is the \"emulation_prevention_three_byte\"\n                // `0x00000300`, `0x00000301`, `0x00000302` and `0x00000303` represent\n                // `0x000000`, `0x000001`, `0x000002` and `0x000003` respectively\n                // Remove current byte\n                writeIndex -= 1;\n                inEmulation = true;\n                break;\n            default:\n                // `0x000004` or larger are ok\n                break;\n        }\n    }\n    if (inEmulation || zeroCount !== 0) {\n        throw new Error('Invalid data');\n    }\n    yield buffer.subarray(start, writeIndex);\n}\n// 7.3.2.1.1 Sequence parameter set data syntax\nexport function parse_sequence_parameter_set(buffer) {\n    for (const nalu of iterateNalu(new Uint8Array(buffer))) {\n        const reader = new BitReader(nalu);\n        if (reader.next() !== 0) {\n            throw new Error('Invalid data');\n        }\n        const nal_ref_idc = reader.read(2);\n        const nal_unit_type = reader.read(5);\n        if (nal_unit_type !== 7) {\n            continue;\n        }\n        if (nal_ref_idc === 0) {\n            throw new Error('Invalid data');\n        }\n        const profile_idc = reader.read(8);\n        const constraint_set = reader.read(8);\n        const constraint_set_reader = new BitReader(new Uint8Array([constraint_set]));\n        const constraint_set0_flag = !!constraint_set_reader.next();\n        const constraint_set1_flag = !!constraint_set_reader.next();\n        const constraint_set2_flag = !!constraint_set_reader.next();\n        const constraint_set3_flag = !!constraint_set_reader.next();\n        const constraint_set4_flag = !!constraint_set_reader.next();\n        const constraint_set5_flag = !!constraint_set_reader.next();\n        // reserved_zero_2bits\n        if (constraint_set_reader.read(2) !== 0) {\n            throw new Error('Invalid data');\n        }\n        const level_idc = reader.read(8);\n        const seq_parameter_set_id = reader.decodeExponentialGolombNumber();\n        if (profile_idc === 100 || profile_idc === 110 ||\n            profile_idc === 122 || profile_idc === 244 || profile_idc === 44 ||\n            profile_idc === 83 || profile_idc === 86 || profile_idc === 118 ||\n            profile_idc === 128 || profile_idc === 138 || profile_idc === 139 ||\n            profile_idc === 134) {\n            const chroma_format_idc = reader.decodeExponentialGolombNumber();\n            if (chroma_format_idc === 3) {\n                // separate_colour_plane_flag\n                reader.next();\n            }\n            // bit_depth_luma_minus8\n            reader.decodeExponentialGolombNumber();\n            // bit_depth_chroma_minus8\n            reader.decodeExponentialGolombNumber();\n            // qpprime_y_zero_transform_bypass_flag\n            reader.next();\n            const seq_scaling_matrix_present_flag = !!reader.next();\n            if (seq_scaling_matrix_present_flag) {\n                const seq_scaling_list_present_flag = [];\n                for (let i = 0; i < ((chroma_format_idc !== 3) ? 8 : 12); i++) {\n                    seq_scaling_list_present_flag[i] = !!reader.next();\n                    if (seq_scaling_list_present_flag[i])\n                        if (i < 6) {\n                            // TODO\n                            // scaling_list( ScalingList4x4[ i ], 16,\n                            //               UseDefaultScalingMatrix4x4Flag[ i ])\n                        }\n                        else {\n                            // TODO\n                            // scaling_list( ScalingList8x8[ i − 6 ], 64,\n                            //               UseDefaultScalingMatrix8x8Flag[ i − 6 ] )\n                        }\n                }\n            }\n        }\n        // log2_max_frame_num_minus4\n        reader.decodeExponentialGolombNumber();\n        const pic_order_cnt_type = reader.decodeExponentialGolombNumber();\n        if (pic_order_cnt_type === 0) {\n            // log2_max_pic_order_cnt_lsb_minus4\n            reader.decodeExponentialGolombNumber();\n        }\n        else if (pic_order_cnt_type === 1) {\n            // delta_pic_order_always_zero_flag\n            reader.next();\n            // offset_for_non_ref_pic\n            reader.decodeExponentialGolombNumber();\n            // offset_for_top_to_bottom_field\n            reader.decodeExponentialGolombNumber();\n            const num_ref_frames_in_pic_order_cnt_cycle = reader.decodeExponentialGolombNumber();\n            const offset_for_ref_frame = [];\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\n                offset_for_ref_frame[i] = reader.decodeExponentialGolombNumber();\n            }\n        }\n        // max_num_ref_frames\n        reader.decodeExponentialGolombNumber();\n        // gaps_in_frame_num_value_allowed_flag\n        reader.next();\n        const pic_width_in_mbs_minus1 = reader.decodeExponentialGolombNumber();\n        const pic_height_in_map_units_minus1 = reader.decodeExponentialGolombNumber();\n        const frame_mbs_only_flag = reader.next();\n        if (!frame_mbs_only_flag) {\n            // mb_adaptive_frame_field_flag\n            reader.next();\n        }\n        // direct_8x8_inference_flag\n        reader.next();\n        const frame_cropping_flag = !!reader.next();\n        let frame_crop_left_offset;\n        let frame_crop_right_offset;\n        let frame_crop_top_offset;\n        let frame_crop_bottom_offset;\n        if (frame_cropping_flag) {\n            frame_crop_left_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_right_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_top_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_bottom_offset = reader.decodeExponentialGolombNumber();\n        }\n        else {\n            frame_crop_left_offset = 0;\n            frame_crop_right_offset = 0;\n            frame_crop_top_offset = 0;\n            frame_crop_bottom_offset = 0;\n        }\n        const vui_parameters_present_flag = !!reader.next();\n        if (vui_parameters_present_flag) {\n            // TODO\n            // vui_parameters( )\n        }\n        return {\n            profile_idc,\n            constraint_set,\n            constraint_set0_flag,\n            constraint_set1_flag,\n            constraint_set2_flag,\n            constraint_set3_flag,\n            constraint_set4_flag,\n            constraint_set5_flag,\n            level_idc,\n            seq_parameter_set_id,\n            pic_width_in_mbs_minus1,\n            pic_height_in_map_units_minus1,\n            frame_mbs_only_flag,\n            frame_cropping_flag,\n            frame_crop_left_offset,\n            frame_crop_right_offset,\n            frame_crop_top_offset,\n            frame_crop_bottom_offset,\n        };\n    }\n    throw new Error('Invalid data');\n}\n//# sourceMappingURL=sps.js.map","import { __awaiter } from \"tslib\";\nimport { AdbLegacyShell, DataEventEmitter } from '@yume-chan/adb';\nimport { PromiseResolver } from '@yume-chan/async';\nimport { EventEmitter } from '@yume-chan/event';\nimport Struct from '@yume-chan/struct';\nimport { AndroidMotionEventAction, ScrcpyControlMessageType, ScrcpyInjectKeyCodeControlMessage, ScrcpyInjectTextControlMessage, ScrcpyInjectTouchControlMessage } from './message';\nimport { pushServer } from \"./push-server\";\nimport { parse_sequence_parameter_set } from './sps';\nimport { decodeUtf8 } from \"./utils\";\nfunction* splitLines(text) {\n    let start = 0;\n    while (true) {\n        const index = text.indexOf('\\n', start);\n        if (index === -1) {\n            return;\n        }\n        const line = text.substring(start, index);\n        yield line;\n        start = index + 1;\n    }\n}\nconst VideoPacket = new Struct()\n    .int64('pts')\n    .uint32('size')\n    .arrayBuffer('data', { lengthField: 'size' });\nexport const NoPts = BigInt(-1);\nconst ClipboardMessage = new Struct()\n    .uint32('length')\n    .string('content', { lengthField: 'length' });\nexport class ScrcpyClient {\n    constructor(device) {\n        this.outputEvent = new EventEmitter();\n        this.closeEvent = new EventEmitter();\n        this._running = false;\n        this.sizeChangedEvent = new EventEmitter();\n        this.videoDataEvent = new DataEventEmitter();\n        this.clipboardChangeEvent = new EventEmitter();\n        this.sendingTouchMessage = false;\n        this.device = device;\n    }\n    static pushServer(device, file, options) {\n        pushServer(device, file, options);\n    }\n    static getEncoders(device, path, version, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const resolver = new PromiseResolver();\n            const encoderNameRegex = options.getOutputEncoderNameRegex();\n            const encoders = [];\n            const client = new ScrcpyClient(device);\n            client.onOutput((line) => {\n                const match = line.match(encoderNameRegex);\n                if (match) {\n                    encoders.push(match[1]);\n                }\n            });\n            client.onClose(() => {\n                resolver.resolve(encoders);\n            });\n            // Provide an invalid encoder name\n            // So the server will return all available encoders\n            options.value.encoderName = '_';\n            // Disable control for faster connection in 1.22+\n            options.value.control = false;\n            // Scrcpy server will open connections, before initializing encoder\n            // Thus although an invalid encoder name is given, the start process will success\n            yield client.start(path, version, options);\n            return resolver.promise;\n        });\n    }\n    get backend() { return this.device.backend; }\n    get onOutput() { return this.outputEvent.event; }\n    get onClose() { return this.closeEvent.event; }\n    get running() { return this._running; }\n    get screenWidth() { return this._screenWidth; }\n    get screenHeight() { return this._screenHeight; }\n    get onSizeChanged() { return this.sizeChangedEvent.event; }\n    get onVideoData() { return this.videoDataEvent.event; }\n    get onClipboardChange() { return this.clipboardChangeEvent.event; }\n    start(path, version, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.options = options;\n            const connection = options.createConnection(this.device);\n            let process;\n            try {\n                yield connection.initialize();\n                process = yield this.device.childProcess.spawn([\n                    `CLASSPATH=${path}`,\n                    'app_process',\n                    /* unused */ '/',\n                    'com.genymobile.scrcpy.Server',\n                    version,\n                    ...options.formatServerArguments(),\n                ], {\n                    // Scrcpy server doesn't split stdout and stderr,\n                    // so disable Shell Protocol to simplify processing\n                    shells: [AdbLegacyShell],\n                });\n                process.onStdout(this.handleProcessOutput, this);\n                const resolver = new PromiseResolver();\n                const removeExitListener = process.onExit(() => {\n                    resolver.reject(new Error('scrcpy server exited prematurely'));\n                });\n                const [videoStream, controlStream] = yield Promise.race([\n                    resolver.promise,\n                    connection.getStreams(),\n                ]);\n                removeExitListener();\n                this.process = process;\n                this.process.onExit(this.handleProcessClosed, this);\n                this.videoStream = videoStream;\n                this.controlStream = controlStream;\n                this._running = true;\n                this.receiveVideo();\n                this.receiveControl();\n            }\n            catch (e) {\n                yield (process === null || process === void 0 ? void 0 : process.kill());\n                throw e;\n            }\n            finally {\n                connection.dispose();\n            }\n        });\n    }\n    handleProcessOutput(data) {\n        const text = decodeUtf8(data);\n        for (const line of splitLines(text)) {\n            if (line === '') {\n                continue;\n            }\n            this.outputEvent.fire(line);\n        }\n    }\n    handleProcessClosed() {\n        this._running = false;\n        this.closeEvent.fire();\n    }\n    receiveVideo() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.videoStream) {\n                throw new Error('receiveVideo started before initialization');\n            }\n            try {\n                let buffer;\n                while (this._running) {\n                    const { pts, data } = yield VideoPacket.deserialize(this.videoStream);\n                    if (!data || data.byteLength === 0) {\n                        continue;\n                    }\n                    if (pts === NoPts) {\n                        const sequenceParameterSet = parse_sequence_parameter_set(data.slice(0));\n                        const { pic_width_in_mbs_minus1, pic_height_in_map_units_minus1, frame_mbs_only_flag, frame_crop_left_offset, frame_crop_right_offset, frame_crop_top_offset, frame_crop_bottom_offset, } = sequenceParameterSet;\n                        const width = (pic_width_in_mbs_minus1 + 1) * 16;\n                        const height = (pic_height_in_map_units_minus1 + 1) * (2 - frame_mbs_only_flag) * 16;\n                        const cropLeft = frame_crop_left_offset * 2;\n                        const cropRight = frame_crop_right_offset * 2;\n                        const cropTop = frame_crop_top_offset * 2;\n                        const cropBottom = frame_crop_bottom_offset * 2;\n                        const screenWidth = width - cropLeft - cropRight;\n                        const screenHeight = height - cropTop - cropBottom;\n                        this._screenWidth = screenWidth;\n                        this._screenHeight = screenHeight;\n                        this.sizeChangedEvent.fire({\n                            sequenceParameterSet,\n                            width,\n                            height,\n                            cropLeft: cropLeft,\n                            cropRight: cropRight,\n                            cropTop: cropTop,\n                            cropBottom: cropBottom,\n                            croppedWidth: screenWidth,\n                            croppedHeight: screenHeight,\n                        });\n                        buffer = data;\n                        continue;\n                    }\n                    let array;\n                    if (buffer) {\n                        array = new Uint8Array(buffer.byteLength + data.byteLength);\n                        array.set(new Uint8Array(buffer));\n                        array.set(new Uint8Array(data), buffer.byteLength);\n                        buffer = undefined;\n                    }\n                    else {\n                        array = new Uint8Array(data);\n                    }\n                    yield this.videoDataEvent.fire({\n                        pts,\n                        size: array.byteLength,\n                        data: array.buffer,\n                    });\n                }\n            }\n            catch (e) {\n                if (!this._running) {\n                    return;\n                }\n            }\n        });\n    }\n    receiveControl() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.controlStream) {\n                // control disabled\n                return;\n            }\n            try {\n                while (true) {\n                    const type = yield this.controlStream.read(1);\n                    switch (new Uint8Array(type)[0]) {\n                        case 0:\n                            const { content } = yield ClipboardMessage.deserialize(this.controlStream);\n                            this.clipboardChangeEvent.fire(content);\n                            break;\n                        default:\n                            throw new Error('unknown control message type');\n                    }\n                }\n            }\n            catch (e) {\n                if (!this._running) {\n                    return;\n                }\n            }\n        });\n    }\n    checkControlStream(caller) {\n        if (!this._running) {\n            throw new Error(`${caller} called before start`);\n        }\n        if (!this.controlStream) {\n            throw new Error(`${caller} called with control disabled`);\n        }\n        return this.controlStream;\n    }\n    injectKeyCode(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectKeyCode');\n            yield controlStream.write(ScrcpyInjectKeyCodeControlMessage.serialize(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectKeycode })));\n        });\n    }\n    injectText(text) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectText');\n            yield controlStream.write(ScrcpyInjectTextControlMessage.serialize({\n                type: ScrcpyControlMessageType.InjectText,\n                text,\n            }));\n        });\n    }\n    injectTouch(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectTouch');\n            if (!this.screenWidth || !this.screenHeight) {\n                return;\n            }\n            // ADB streams are actually pretty low-bandwidth and laggy\n            // Re-sample move events to avoid flooding the connection\n            if (this.sendingTouchMessage &&\n                (message.action === AndroidMotionEventAction.Move ||\n                    message.action === AndroidMotionEventAction.HoverMove)) {\n                return;\n            }\n            this.sendingTouchMessage = true;\n            yield controlStream.write(ScrcpyInjectTouchControlMessage.serialize(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectTouch, screenWidth: this.screenWidth, screenHeight: this.screenHeight })));\n            this.sendingTouchMessage = false;\n        });\n    }\n    injectScroll(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectScroll');\n            if (!this.screenWidth || !this.screenHeight) {\n                return;\n            }\n            const buffer = this.options.serializeInjectScrollControlMessage(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectScroll, screenWidth: this.screenWidth, screenHeight: this.screenHeight }));\n            yield controlStream.write(buffer);\n        });\n    }\n    pressBackOrTurnOnScreen(action) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('pressBackOrTurnOnScreen');\n            const buffer = this.options.serializeBackOrScreenOnControlMessage(action, this.device);\n            if (buffer) {\n                yield controlStream.write(buffer);\n            }\n        });\n    }\n    close() {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._running) {\n                return;\n            }\n            this._running = false;\n            (_a = this.videoStream) === null || _a === void 0 ? void 0 : _a.close();\n            this.videoStream = undefined;\n            (_b = this.controlStream) === null || _b === void 0 ? void 0 : _b.close();\n            this.controlStream = undefined;\n            yield ((_c = this.process) === null || _c === void 0 ? void 0 : _c.kill());\n        });\n    }\n}\n//# sourceMappingURL=client.js.map","// From https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel\nexport var AndroidCodecProfile;\n(function (AndroidCodecProfile) {\n    AndroidCodecProfile[AndroidCodecProfile[\"Baseline\"] = 1] = \"Baseline\";\n    AndroidCodecProfile[AndroidCodecProfile[\"Main\"] = 2] = \"Main\";\n    AndroidCodecProfile[AndroidCodecProfile[\"Extended\"] = 4] = \"Extended\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High\"] = 8] = \"High\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High10\"] = 16] = \"High10\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High422\"] = 32] = \"High422\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High444\"] = 64] = \"High444\";\n    AndroidCodecProfile[AndroidCodecProfile[\"ConstrainedBaseline\"] = 65536] = \"ConstrainedBaseline\";\n    AndroidCodecProfile[AndroidCodecProfile[\"ConstrainedHigh\"] = 524288] = \"ConstrainedHigh\";\n})(AndroidCodecProfile || (AndroidCodecProfile = {}));\nexport var AndroidCodecLevel;\n(function (AndroidCodecLevel) {\n    AndroidCodecLevel[AndroidCodecLevel[\"Level1\"] = 1] = \"Level1\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level1b\"] = 2] = \"Level1b\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level11\"] = 4] = \"Level11\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level12\"] = 8] = \"Level12\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level13\"] = 16] = \"Level13\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level2\"] = 32] = \"Level2\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level21\"] = 64] = \"Level21\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level22\"] = 128] = \"Level22\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level3\"] = 256] = \"Level3\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level31\"] = 512] = \"Level31\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level32\"] = 1024] = \"Level32\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level4\"] = 2048] = \"Level4\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level41\"] = 4096] = \"Level41\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level42\"] = 8192] = \"Level42\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level5\"] = 16384] = \"Level5\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level51\"] = 32768] = \"Level51\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level52\"] = 65536] = \"Level52\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level6\"] = 131072] = \"Level6\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level61\"] = 262144] = \"Level61\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level62\"] = 524288] = \"Level62\";\n})(AndroidCodecLevel || (AndroidCodecLevel = {}));\n//# sourceMappingURL=codec.js.map","import { PromiseResolver } from '@yume-chan/async';\nimport { AutoDisposable, EventEmitter } from '@yume-chan/event';\nlet worker;\nlet workerReady = false;\nconst pendingResolvers = [];\nlet streamId = 0;\nconst pictureReadyEvent = new EventEmitter();\nexport class TinyH264Wrapper extends AutoDisposable {\n    constructor(streamId) {\n        super();\n        this.pictureReadyEvent = new EventEmitter();\n        this.streamId = streamId;\n        this.addDisposable(pictureReadyEvent.event(this.handlePictureReady, this));\n    }\n    get onPictureReady() { return this.pictureReadyEvent.event; }\n    handlePictureReady(e) {\n        if (e.renderStateId === this.streamId) {\n            this.pictureReadyEvent.fire(e);\n        }\n    }\n    feed(data) {\n        worker.postMessage({\n            type: 'decode',\n            data: data,\n            offset: 0,\n            length: data.byteLength,\n            renderStateId: this.streamId,\n        }, [data]);\n    }\n    dispose() {\n        super.dispose();\n        worker.postMessage({\n            type: 'release',\n            renderStateId: this.streamId,\n        });\n    }\n}\nexport function createTinyH264Wrapper() {\n    if (!worker) {\n        worker = new Worker(new URL('./worker.js', import.meta.url));\n        worker.addEventListener('message', (e) => {\n            const { data } = e;\n            switch (data.type) {\n                case 'decoderReady':\n                    workerReady = true;\n                    for (const resolver of pendingResolvers) {\n                        resolver.resolve(new TinyH264Wrapper(streamId));\n                        streamId += 1;\n                    }\n                    pendingResolvers.length = 0;\n                    break;\n                case 'pictureReady':\n                    pictureReadyEvent.fire(data);\n                    break;\n            }\n        });\n    }\n    if (!workerReady) {\n        const resolver = new PromiseResolver();\n        pendingResolvers.push(resolver);\n        return resolver.promise;\n    }\n    const decoder = new TinyH264Wrapper(streamId);\n    streamId += 1;\n    return Promise.resolve(decoder);\n}\n//# sourceMappingURL=wrapper.js.map","import { __awaiter } from \"tslib\";\nimport { PromiseResolver } from \"@yume-chan/async\";\nimport { AndroidCodecLevel, AndroidCodecProfile } from \"../../codec\";\nimport { createTinyH264Wrapper } from \"./wrapper\";\nlet cachedInitializePromise;\nfunction initialize() {\n    if (!cachedInitializePromise) {\n        cachedInitializePromise = Promise.all([import('yuv-buffer'), import('yuv-canvas')]).then(([YuvBuffer, { default: YuvCanvas }]) => ({\n            YuvBuffer, YuvCanvas\n        }));\n    }\n    return cachedInitializePromise;\n}\nexport class TinyH264Decoder {\n    constructor() {\n        this.maxProfile = AndroidCodecProfile.Baseline;\n        this.maxLevel = AndroidCodecLevel.Level4;\n        initialize();\n        this._element = document.createElement('canvas');\n    }\n    get element() { return this._element; }\n    setSize(size) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.dispose();\n            this._initializer = new PromiseResolver();\n            const { YuvBuffer, YuvCanvas } = yield initialize();\n            if (!this._yuvCanvas) {\n                this._yuvCanvas = YuvCanvas.attach(this._element);\n                ;\n            }\n            const { width, height } = size;\n            const chromaWidth = width / 2;\n            const chromaHeight = height / 2;\n            this._element.width = size.croppedWidth;\n            this._element.height = size.croppedHeight;\n            const format = YuvBuffer.format({\n                width,\n                height,\n                chromaWidth,\n                chromaHeight,\n                cropLeft: size.cropLeft,\n                cropTop: size.cropTop,\n                cropWidth: size.croppedWidth,\n                cropHeight: size.croppedHeight,\n                displayWidth: size.croppedWidth,\n                displayHeight: size.croppedHeight,\n            });\n            const wrapper = yield createTinyH264Wrapper();\n            this._initializer.resolve(wrapper);\n            const uPlaneOffset = width * height;\n            const vPlaneOffset = uPlaneOffset + chromaWidth * chromaHeight;\n            wrapper.onPictureReady(({ data }) => {\n                const array = new Uint8Array(data);\n                const frame = YuvBuffer.frame(format, YuvBuffer.lumaPlane(format, array, width, 0), YuvBuffer.chromaPlane(format, array, chromaWidth, uPlaneOffset), YuvBuffer.chromaPlane(format, array, chromaWidth, vPlaneOffset));\n                this._yuvCanvas.drawFrame(frame);\n            });\n        });\n    }\n    feed(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._initializer) {\n                throw new Error('Decoder not initialized');\n            }\n            const wrapper = yield this._initializer.promise;\n            wrapper.feed(data);\n        });\n    }\n    dispose() {\n        var _a;\n        (_a = this._initializer) === null || _a === void 0 ? void 0 : _a.promise.then(wrapper => wrapper.dispose());\n        this._initializer = undefined;\n    }\n}\n//# sourceMappingURL=index.js.map","import { AndroidCodecLevel, AndroidCodecProfile } from \"../../codec\";\nfunction toHex(value) {\n    return value.toString(16).padStart(2, '0').toUpperCase();\n}\nexport class WebCodecsDecoder {\n    constructor() {\n        this.maxProfile = AndroidCodecProfile.High;\n        this.maxLevel = AndroidCodecLevel.Level5;\n        this._element = document.createElement('canvas');\n        this.context = this._element.getContext('2d');\n        this.decoder = new VideoDecoder({\n            output: (frame) => {\n                this.context.drawImage(frame, 0, 0);\n                frame.close();\n            },\n            error() { },\n        });\n    }\n    get element() { return this._element; }\n    setSize(size) {\n        const { sequenceParameterSet: { profile_idc, constraint_set, level_idc } } = size;\n        this._element.width = size.croppedWidth;\n        this._element.height = size.croppedHeight;\n        // https://www.rfc-editor.org/rfc/rfc6381#section-3.3\n        // ISO Base Media File Format Name Space\n        const codec = `avc1.${[profile_idc, constraint_set, level_idc].map(toHex).join('')}`;\n        this.decoder.configure({\n            codec: codec,\n            optimizeForLatency: true,\n        });\n    }\n    feed(data) {\n        this.decoder.decode(new EncodedVideoChunk({\n            type: 'key',\n            timestamp: 0,\n            data,\n        }));\n    }\n    dispose() {\n        this.decoder.close();\n    }\n}\n//# sourceMappingURL=index.js.map","export default '1.22';","import { CommandBar, Dialog, Dropdown, ICommandBarItemProps, Icon, IconButton, IDropdownOption, LayerHost, Position, ProgressIndicator, SpinButton, Stack, Toggle, TooltipHost } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { EventEmitter } from \"@yume-chan/event\";\nimport { AndroidKeyCode, AndroidKeyEventAction, AndroidMotionEventAction, CodecOptions, DEFAULT_SERVER_PATH, H264Decoder, H264DecoderConstructor, pushServer, ScrcpyClient, ScrcpyLogLevel, ScrcpyOptions1_22, ScrcpyScreenOrientation, TinyH264Decoder, WebCodecsDecoder } from \"@yume-chan/scrcpy\";\nimport SCRCPY_SERVER_VERSION from '@yume-chan/scrcpy/bin/version';\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport React, { useEffect, useState } from \"react\";\nimport { DemoMode, DeviceView, DeviceViewRef, ExternalLink } from \"../components\";\nimport { globalState } from \"../state\";\nimport { CommonStackTokens, formatSpeed, Icons, RouteStackProps } from \"../utils\";\n\nconst SERVER_URL = new URL('@yume-chan/scrcpy/bin/scrcpy-server?url', import.meta.url).toString();\n\nclass FetchWithProgress {\n    public readonly promise: Promise<ArrayBuffer>;\n\n    private _downloaded = 0;\n    public get downloaded() { return this._downloaded; }\n\n    private _total = 0;\n    public get total() { return this._total; }\n\n    private progressEvent = new EventEmitter<[download: number, total: number]>();\n    public get onProgress() { return this.progressEvent.event; }\n\n    public constructor(url: string) {\n        this.promise = this.fetch(url);\n    }\n\n    private async fetch(url: string) {\n        const response = await window.fetch(url);\n        this._total = Number.parseInt(response.headers.get('Content-Length') ?? '0', 10);\n        this.progressEvent.fire([this._downloaded, this._total]);\n\n        const reader = response.body!.getReader();\n        const chunks: Uint8Array[] = [];\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                break;\n            }\n            chunks.push(result.value);\n            this._downloaded += result.value.byteLength;\n            this.progressEvent.fire([this._downloaded, this._total]);\n        }\n\n        this._total = chunks.reduce((result, item) => result + item.byteLength, 0);\n        const result = new Uint8Array(this._total);\n        let position = 0;\n        for (const chunk of chunks) {\n            result.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return result.buffer;\n    }\n}\n\nlet cachedValue: FetchWithProgress | undefined;\nfunction fetchServer(onProgress?: (e: [downloaded: number, total: number]) => void) {\n    if (!cachedValue) {\n        cachedValue = new FetchWithProgress(SERVER_URL);\n        cachedValue.promise.catch((e) => {\n            cachedValue = undefined;\n        });\n    }\n\n    if (onProgress) {\n        cachedValue.onProgress(onProgress);\n        onProgress([cachedValue.downloaded, cachedValue.total]);\n    }\n\n    return cachedValue.promise;\n}\n\nfunction clamp(value: number, min: number, max: number): number {\n    if (value < min) {\n        return min;\n    }\n\n    if (value > max) {\n        return max;\n    }\n\n    return value;\n}\n\nclass KeyRepeater {\n    key: AndroidKeyCode;\n    client: ScrcpyClient;\n\n    delay: number;\n    interval: number;\n\n    onRelease: VoidFunction | undefined;\n\n    constructor(key: AndroidKeyCode, client: ScrcpyClient, delay = 0, interval = 0) {\n        this.key = key;\n        this.client = client;\n\n        this.delay = delay;\n        this.interval = interval;\n    }\n\n    async press() {\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Down,\n            keyCode: this.key,\n            repeat: 0,\n            metaState: 0,\n        });\n\n        if (this.delay === 0) {\n            return;\n        }\n\n        const timeoutId = setTimeout(async () => {\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Down,\n                keyCode: this.key,\n                repeat: 1,\n                metaState: 0,\n            });\n\n            if (this.interval === 0) {\n                return;\n            }\n\n            const intervalId = setInterval(async () => {\n                await this.client.injectKeyCode({\n                    action: AndroidKeyEventAction.Down,\n                    keyCode: this.key,\n                    repeat: 1,\n                    metaState: 0,\n                });\n            }, this.interval);\n            this.onRelease = () => clearInterval(intervalId);\n        }, this.delay);\n        this.onRelease = () => clearTimeout(timeoutId);\n    }\n\n    async release() {\n        this.onRelease?.();\n\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Up,\n            keyCode: this.key,\n            repeat: 0,\n            metaState: 0,\n        });\n    }\n}\n\nclass ScrcpyPageState {\n    running = false;\n\n    deviceView: DeviceViewRef | null = null;\n    rendererContainer: HTMLDivElement | null = null;\n\n    logVisible = false;\n    log: string[] = [];\n    settingsVisible = false;\n    demoModeVisible = false;\n\n    width = 0;\n    height = 0;\n\n    client: ScrcpyClient | undefined = undefined;\n\n    encoders: string[] = [];\n    selectedEncoder: string | undefined = undefined;\n\n    decoders: { name: string; factory: H264DecoderConstructor; }[] = [{\n        name: 'TinyH264 (Software)',\n        factory: TinyH264Decoder,\n    }];\n    selectedDecoder: { name: string, factory: H264DecoderConstructor; } = this.decoders[0];\n    decoder: H264Decoder | undefined = undefined;\n\n    resolution = 1080;\n    bitRate = 4_000_000;\n    tunnelForward = false;\n\n    connecting = false;\n    serverTotalSize = 0;\n    serverDownloadedSize = 0;\n    debouncedServerDownloadedSize = 0;\n    serverDownloadSpeed = 0;\n    serverUploadedSize = 0;\n    debouncedServerUploadedSize = 0;\n    serverUploadSpeed = 0;\n\n    homeKeyRepeater: KeyRepeater | undefined = undefined;\n    appSwitchKeyRepeater: KeyRepeater | undefined = undefined;\n\n    get commandBarItems() {\n        const result: ICommandBarItemProps[] = [];\n\n        if (!this.running) {\n            result.push({\n                key: 'start',\n                disabled: !globalState.device,\n                iconProps: { iconName: Icons.Play },\n                text: 'Start',\n                onClick: this.start as VoidFunction,\n            });\n        } else {\n            result.push({\n                key: 'stop',\n                iconProps: { iconName: Icons.Stop },\n                text: 'Stop',\n                onClick: this.stop,\n            });\n        }\n\n        result.push({\n            key: 'fullscreen',\n            disabled: !this.running,\n            iconProps: { iconName: Icons.FullScreenMaximize },\n            text: 'Fullscreen',\n            onClick: () => { this.deviceView?.enterFullscreen(); },\n        });\n\n        return result;\n    }\n\n    get commandBarFarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: 'Log',\n                iconProps: { iconName: Icons.TextGrammarError },\n                checked: this.logVisible,\n                text: 'Log',\n                onClick: action(() => {\n                    this.logVisible = !this.logVisible;\n                }),\n            },\n            {\n                key: 'Settings',\n                iconProps: { iconName: Icons.Settings },\n                checked: this.settingsVisible,\n                text: 'Settings',\n                onClick: action(() => {\n                    this.settingsVisible = !this.settingsVisible;\n                }),\n            },\n            {\n                key: 'DemoMode',\n                iconProps: { iconName: Icons.Wand },\n                checked: this.demoModeVisible,\n                text: 'Demo Mode',\n                onClick: action(() => {\n                    this.demoModeVisible = !this.demoModeVisible;\n                }),\n            },\n            {\n                key: 'info',\n                iconProps: { iconName: Icons.Info },\n                iconOnly: true,\n                tooltipHostProps: {\n                    content: (\n                        <>\n                            <p>\n                                <ExternalLink href=\"https://github.com/Genymobile/scrcpy\" spaceAfter>Scrcpy</ExternalLink>\n                                developed by Genymobile can display the screen with low latency (1~2 frames) and control the device, all without root access.\n                            </p>\n                            <p>\n                                This is a TypeScript implementation of the client part. Paired with official pre-built server binary.\n                            </p>\n                        </>\n                    ),\n                    calloutProps: {\n                        calloutMaxWidth: 300,\n                    }\n                },\n            }\n        ];\n    }\n\n    constructor() {\n        makeAutoObservable(this, {\n            decoders: observable.shallow,\n            selectedDecoder: observable.ref,\n            start: false,\n            stop: action.bound,\n            handleDeviceViewRef: action.bound,\n            handleRendererContainerRef: action.bound,\n            handleBackPointerDown: false,\n            handleBackPointerUp: false,\n            handleHomePointerDown: false,\n            handleHomePointerUp: false,\n            handleAppSwitchPointerDown: false,\n            handleAppSwitchPointerUp: false,\n            handleCurrentEncoderChange: action.bound,\n            handleSelectedDecoderChange: action.bound,\n            handleResolutionChange: action.bound,\n            handleTunnelForwardChange: action.bound,\n            handleBitRateChange: action.bound,\n            calculatePointerPosition: false,\n            injectTouch: false,\n            handlePointerDown: false,\n            handlePointerMove: false,\n            handlePointerUp: false,\n            handleWheel: false,\n            handleContextMenu: false,\n            handleKeyDown: false,\n            homeKeyRepeater: false,\n            appSwitchKeyRepeater: false,\n        });\n\n        autorun(() => {\n            if (globalState.device) {\n                runInAction(() => {\n                    this.encoders = [];\n                    this.selectedEncoder = undefined;\n                });\n            } else {\n                this.stop();\n            }\n        });\n\n        autorun(() => {\n            if (this.rendererContainer && this.decoder) {\n                while (this.rendererContainer.firstChild) {\n                    this.rendererContainer.firstChild.remove();\n                }\n                this.rendererContainer.appendChild(this.decoder.element);\n            }\n        });\n\n        autorun(() => {\n            if (this.client) {\n                this.homeKeyRepeater = new KeyRepeater(AndroidKeyCode.Home, this.client);\n                this.appSwitchKeyRepeater = new KeyRepeater(AndroidKeyCode.AppSwitch, this.client);\n            } else {\n                this.homeKeyRepeater = undefined;\n                this.appSwitchKeyRepeater = undefined;\n            }\n        });\n\n        if (typeof window !== 'undefined' && typeof window.VideoDecoder === 'function') {\n            setTimeout(action(() => {\n                this.decoders.unshift({\n                    name: 'WebCodecs',\n                    factory: WebCodecsDecoder,\n                });\n                this.selectedDecoder = this.decoders[0];\n            }), 0);\n        }\n    }\n\n    start = async () => {\n        if (!globalState.device) {\n            return;\n        }\n\n        try {\n            if (!state.selectedDecoder) {\n                throw new Error('No available decoder');\n            }\n\n            runInAction(() => {\n                this.serverTotalSize = 0;\n                this.serverDownloadedSize = 0;\n                this.debouncedServerDownloadedSize = 0;\n                this.serverUploadedSize = 0;\n                this.debouncedServerUploadedSize = 0;\n                this.connecting = true;\n            });\n\n            let intervalId = setInterval(action(() => {\n                this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n            }), 1000);\n\n            let serverBuffer: ArrayBuffer;\n\n            try {\n                serverBuffer = await fetchServer(action(([downloaded, total]) => {\n                    this.serverDownloadedSize = downloaded;\n                    this.serverTotalSize = total;\n                }));\n                runInAction(() => {\n                    this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                    this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            intervalId = setInterval(action(() => {\n                this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                this.debouncedServerUploadedSize = this.serverUploadedSize;\n            }), 1000);\n\n            try {\n                await pushServer(globalState.device, serverBuffer, {\n                    onProgress: action((progress) => {\n                        this.serverUploadedSize = progress;\n                    }),\n                });\n                runInAction(() => {\n                    this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                    this.debouncedServerUploadedSize = this.serverUploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            const encoders = await ScrcpyClient.getEncoders(\n                globalState.device,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                new ScrcpyOptions1_22({\n                    logLevel: ScrcpyLogLevel.Debug,\n                    bitRate: 4_000_000,\n                    tunnelForward: this.tunnelForward,\n                    sendDeviceMeta: false,\n                    sendDummyByte: false,\n                })\n            );\n            if (encoders.length === 0) {\n                throw new Error('No available encoder found');\n            }\n\n            runInAction(() => {\n                this.encoders = encoders;\n            });\n\n            // Run scrcpy once will delete the server file\n            // Re-push it\n            await pushServer(globalState.device, serverBuffer);\n\n            const factory = this.selectedDecoder.factory;\n            const decoder = new factory();\n            runInAction(() => {\n                this.decoder = decoder;\n            });\n\n            const client = new ScrcpyClient(globalState.device);\n            runInAction(() => this.log = []);\n            client.onOutput(action(line => this.log.push(line)));\n            client.onClose(this.stop);\n\n            client.onSizeChanged(action((size) => {\n                const { croppedWidth, croppedHeight, } = size;\n\n                this.log.push(`[client] Video size changed: ${croppedWidth}x${croppedHeight}`);\n\n                this.width = croppedWidth;\n                this.height = croppedHeight;\n\n                decoder.setSize(size);\n            }));\n\n            client.onVideoData(({ data }) => {\n                decoder.feed(data);\n            });\n\n            client.onClipboardChange(content => {\n                window.navigator.clipboard.writeText(content);\n            });\n\n            const options = new ScrcpyOptions1_22({\n                logLevel: ScrcpyLogLevel.Debug,\n                maxSize: this.resolution,\n                bitRate: this.bitRate,\n                lockVideoOrientation: ScrcpyScreenOrientation.Unlocked,\n                tunnelForward: this.tunnelForward,\n                encoderName: this.selectedEncoder ?? encoders[0],\n                sendDeviceMeta: false,\n                sendDummyByte: false,\n                codecOptions: new CodecOptions({\n                    profile: decoder.maxProfile,\n                    level: decoder.maxLevel,\n                }),\n            });\n\n            runInAction(() => {\n                this.log.push(`[client] Server version: ${SCRCPY_SERVER_VERSION}`);\n                this.log.push(`[client] Server arguments: ${options.formatServerArguments().join(' ')}`);\n            });\n\n            await client.start(\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                options,\n            );\n\n            runInAction(() => {\n                this.client = client;\n                this.running = true;\n            });\n        } catch (e: any) {\n            globalState.showErrorDialog(e.message);\n        } finally {\n            runInAction(() => {\n                this.connecting = false;\n            });\n        }\n    };\n\n    stop() {\n        this.decoder?.dispose();\n        this.decoder = undefined;\n\n        this.client?.close();\n        this.client = undefined;\n\n        this.running = false;\n    }\n\n    handleDeviceViewRef(element: DeviceViewRef | null) {\n        this.deviceView = element;\n    }\n\n    handleRendererContainerRef(element: HTMLDivElement | null) {\n        this.rendererContainer = element;\n        this.rendererContainer?.addEventListener('wheel', this.handleWheel, { passive: false });\n    };\n\n    handleBackPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.client!.pressBackOrTurnOnScreen(AndroidKeyEventAction.Down);\n    };\n\n    handleBackPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.client!.pressBackOrTurnOnScreen(AndroidKeyEventAction.Up);\n    };\n\n    handleHomePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.homeKeyRepeater?.press();\n    };\n\n    handleHomePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.homeKeyRepeater?.release();\n    };\n\n    handleAppSwitchPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.appSwitchKeyRepeater?.press();\n    };\n\n    handleAppSwitchPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.appSwitchKeyRepeater?.release();\n    };\n\n    handleCurrentEncoderChange(e?: any, option?: IDropdownOption) {\n        if (!option) {\n            return;\n        }\n\n        this.selectedEncoder = option.text;\n    }\n\n    handleSelectedDecoderChange(e?: any, option?: IDropdownOption) {\n        if (!option) {\n            return;\n        }\n\n        this.selectedDecoder = option.data;\n    }\n\n    handleResolutionChange(e: any, value?: string) {\n        if (value === undefined) {\n            return;\n        }\n        this.resolution = +value;\n    }\n\n    handleBitRateChange(e: any, value?: string) {\n        if (value === undefined) {\n            return;\n        }\n        this.bitRate = +value;\n    }\n\n    handleTunnelForwardChange(event: React.MouseEvent<HTMLElement>, checked?: boolean) {\n        if (checked === undefined) {\n            return;\n        }\n\n        this.tunnelForward = checked;\n    };\n\n    calculatePointerPosition(clientX: number, clientY: number) {\n        const view = this.rendererContainer!.getBoundingClientRect();\n        const pointerViewX = clientX - view.x;\n        const pointerViewY = clientY - view.y;\n        const pointerScreenX = clamp(pointerViewX / view.width, 0, 1) * this.width;\n        const pointerScreenY = clamp(pointerViewY / view.height, 0, 1) * this.height;\n\n        return {\n            x: pointerScreenX,\n            y: pointerScreenY,\n        };\n    }\n\n    injectTouch = (\n        action: AndroidMotionEventAction,\n        e: React.PointerEvent<HTMLDivElement>\n    ) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectTouch({\n            action,\n            pointerId: e.pointerType === \"mouse\" ? BigInt(-1) : BigInt(e.pointerId),\n            pointerX: x,\n            pointerY: y,\n            pressure: e.pressure * 65535,\n            buttons: e.buttons,\n        });\n    };\n\n    handlePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.rendererContainer!.focus();\n        e.preventDefault();\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.injectTouch(AndroidMotionEventAction.Down, e);\n    };\n\n    handlePointerMove = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(\n            e.buttons === 0 ? AndroidMotionEventAction.HoverMove : AndroidMotionEventAction.Move,\n            e\n        );\n    };\n\n    handlePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(AndroidMotionEventAction.Up, e);\n    };\n\n    handleWheel = (e: WheelEvent) => {\n        if (!this.client) {\n            return;\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectScroll({\n            pointerX: x,\n            pointerY: y,\n            scrollX: -Math.sign(e.deltaX),\n            scrollY: -Math.sign(e.deltaY),\n            buttons: 0,\n        });\n    };\n\n    handleContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    handleKeyDown = async (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { key, code } = e;\n        if (key.match(/^[a-z0-9]$/i)) {\n            this.client!.injectText(key);\n            return;\n        }\n\n        const keyCode = ({\n            Backspace: AndroidKeyCode.Delete,\n            Space: AndroidKeyCode.Space,\n        } as Record<string, AndroidKeyCode | undefined>)[code];\n\n        if (keyCode) {\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Down,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Up,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n        }\n    };\n}\n\nconst state = new ScrcpyPageState();\n\nconst ConnectionDialog = observer(() => {\n    const layerHostId = useId('layerHost');\n\n    const [isClient, setIsClient] = useState(false);\n\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    if (!isClient) {\n        return null;\n    }\n\n    return (\n        <>\n            <LayerHost id={layerHostId} style={{ position: 'absolute', top: 0, bottom: 0, left: 0, right: 0, margin: 0, pointerEvents: 'none' }} />\n\n            <Dialog\n                hidden={!state.connecting}\n                modalProps={{ layerProps: { hostId: layerHostId } }}\n                dialogContentProps={{ title: 'Connecting...' }}\n            >\n                <Stack tokens={CommonStackTokens}>\n                    <ProgressIndicator\n                        label=\"1. Downloading scrcpy server...\"\n                        percentComplete={state.serverTotalSize ? state.serverDownloadedSize / state.serverTotalSize : undefined}\n                        description={formatSpeed(state.debouncedServerDownloadedSize, state.serverTotalSize, state.serverDownloadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"2. Pushing scrcpy server to device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverDownloadedSize !== state.serverTotalSize}\n                        percentComplete={state.serverUploadedSize / state.serverTotalSize}\n                        description={formatSpeed(state.debouncedServerUploadedSize, state.serverTotalSize, state.serverUploadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"3. Starting scrcpy server on device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverUploadedSize !== state.serverTotalSize}\n                    />\n                </Stack>\n            </Dialog>\n        </>\n    );\n});\n\nconst Scrcpy: NextPage = () => {\n    const bottomElement = (\n        <Stack verticalFill horizontalAlign=\"center\" style={{ background: '#999' }}>\n            <Stack verticalFill horizontal style={{ width: '100%', maxWidth: 300 }} horizontalAlign=\"space-evenly\" verticalAlign=\"center\">\n                <IconButton\n                    iconProps={{ iconName: Icons.Play }}\n                    style={{ transform: 'rotate(180deg)', color: 'white' }}\n                    onPointerDown={state.handleBackPointerDown}\n                    onPointerUp={state.handleBackPointerUp}\n                />\n                <IconButton\n                    iconProps={{ iconName: Icons.Circle }}\n                    style={{ color: 'white' }}\n                    onPointerDown={state.handleHomePointerDown}\n                    onPointerUp={state.handleHomePointerUp}\n                />\n                <IconButton\n                    iconProps={{ iconName: Icons.Stop }}\n                    style={{ color: 'white' }}\n                    onPointerDown={state.handleAppSwitchPointerDown}\n                    onPointerUp={state.handleAppSwitchPointerUp}\n                />\n            </Stack>\n        </Stack>\n    );\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Scrcpy - WebADB</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} farItems={state.commandBarFarItems} />\n\n            <Stack horizontal grow styles={{ root: { height: 0 } }}>\n                <DeviceView\n                    ref={state.handleDeviceViewRef}\n                    width={state.width}\n                    height={state.height}\n                    bottomElement={bottomElement}\n                    bottomHeight={40}\n                >\n                    <div\n                        ref={state.handleRendererContainerRef}\n                        tabIndex={-1}\n                        onPointerDown={state.handlePointerDown}\n                        onPointerMove={state.handlePointerMove}\n                        onPointerUp={state.handlePointerUp}\n                        onPointerCancel={state.handlePointerUp}\n                        onKeyDown={state.handleKeyDown}\n                        onContextMenu={state.handleContextMenu}\n                    />\n                </DeviceView>\n\n                <div style={{\n                    padding: 12,\n                    overflow: 'hidden auto',\n                    display: state.logVisible ? 'block' : 'none',\n                    width: 500,\n                    fontFamily: 'monospace',\n                    overflowY: 'auto',\n                    whiteSpace: 'pre-wrap',\n                    wordWrap: 'break-word',\n                }}>\n                    {state.log.map((line, index) => (\n                        <div key={index}>\n                            {line}\n                        </div>\n                    ))}\n                </div>\n\n                <div style={{ padding: 12, overflow: 'hidden auto', display: state.settingsVisible ? 'block' : 'none', width: 300 }}>\n                    <div>Changes will take effect on next connection</div>\n\n                    <Dropdown\n                        label=\"Encoder\"\n                        options={state.encoders.map(item => ({ key: item, text: item }))}\n                        selectedKey={state.selectedEncoder}\n                        placeholder=\"Connect once to retrieve encoder list\"\n                        onChange={state.handleCurrentEncoderChange}\n                    />\n\n                    {state.decoders.length > 1 && (\n                        <Dropdown\n                            label=\"Decoder\"\n                            options={state.decoders.map(item => ({ key: item.name, text: item.name, data: item }))}\n                            selectedKey={state.selectedDecoder.name}\n                            onChange={state.handleSelectedDecoderChange}\n                        />\n                    )}\n\n                    <SpinButton\n                        label=\"Max Resolution (longer side, 0 = unlimited)\"\n                        labelPosition={Position.top}\n                        value={state.resolution.toString()}\n                        min={0}\n                        max={2560}\n                        step={100}\n                        onChange={state.handleResolutionChange}\n                    />\n\n                    <SpinButton\n                        label=\"Max Bit Rate\"\n                        labelPosition={Position.top}\n                        value={state.bitRate.toString()}\n                        min={100}\n                        max={10_000_000}\n                        step={100}\n                        onChange={state.handleBitRateChange}\n                    />\n\n                    <Toggle\n                        label={\n                            <>\n                                <span>Use forward connection{' '}</span>\n                                <TooltipHost content=\"Old Android devices may not support reverse connection when using ADB over WiFi\">\n                                    <Icon iconName={Icons.Info} />\n                                </TooltipHost>\n                            </>\n                        }\n                        checked={state.tunnelForward}\n                        onChange={state.handleTunnelForwardChange}\n                    />\n                </div>\n\n                <DemoMode\n                    style={{ display: state.demoModeVisible ? 'block' : 'none' }}\n                />\n\n                <ConnectionDialog />\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default observer(Scrcpy);\n","module.exports = require('./dist/shared/lib/head')\n"],"names":["window","__NEXT_P","push","ScrcpyControlMessageType","AndroidMotionEventAction","LayerHost","props","id","className","useUnmount","css","unmountFunction","unmountRef","current","ScrcpyInjectTouchControlMessage","uint8","InjectTouch","uint64","uint32","uint16","ScrcpyInjectTextControlMessage","InjectText","string","lengthField","AndroidKeyEventAction","AndroidKeyCode","ScrcpyInjectKeyCodeControlMessage","InjectKeycode","delay","time","Promise","resolve","globalThis","setTimeout","TextEncoder","Utf8Decoder","TextDecoder","ScrcpyClientConnection","constructor","device","options","this","initialize","dispose","ScrcpyClientForwardConnection","connect","createSocket","connectAndRetry","i","e","Error","connectVideoStream","stream","sendDummyByte","read","getStreams","videoStream","controlStream","control","sendDeviceMeta","ScrcpyClientReverseConnection","reverse","remove","_a","streams","address","add","onSocket","packet","enqueue","accept","dequeue","DEFAULT_SERVER_PATH","ScrcpyLogLevel","ScrcpyScreenOrientation","toScrcpyOptionValue","value","empty","toOptionValue","isScrcpyOptionValue","undefined","CodecOptions","entries","Object","filter","key","length","map","join","ScrcpyBackOrScreenOnEvent1_16","ScrcpyInjectScrollControlMessage1_16","InjectScroll","int32","ScrcpyOptions1_16","logLevel","Verbose","Debug","lockVideoOrientation","Initial","Unlocked","getArgumnetOrder","getDefaultValue","maxSize","bitRate","maxFps","tunnelForward","crop","sendFrameMeta","displayId","showTouches","stayAwake","codecOptions","encoderName","formatServerArguments","defaults","createConnection","getOutputEncoderNameRegex","serializeBackOrScreenOnControlMessage","action","Down","serialize","type","BackOrScreenOn","serializeInjectScrollControlMessage","message","ScrcpyBackOrScreenOnEvent1_18","ScrcpyOptions1_18","super","concat","assign","powerOffOnClose","ScrcpyOptions1_21","init","clipboardAutosync","pair","input","replace","toLowerCase","ScrcpyInjectScrollControlMessage1_22","fields","ScrcpyOptions1_22","rawVideoStream","downsizeOnError","_b","_c","defaultValue","pushServer","file","path","onProgress","sync","write","BitReader","buffer","bytePosition","bitPosition","result","next","decodeExponentialGolombNumber","parse_sequence_parameter_set","nalu","start","writeIndex","zeroCount","inEmulation","byte","lastZeroCount","subarray","iterateNalu","Uint8Array","reader","nal_ref_idc","profile_idc","constraint_set","constraint_set_reader","constraint_set0_flag","constraint_set1_flag","constraint_set2_flag","constraint_set3_flag","constraint_set4_flag","constraint_set5_flag","level_idc","seq_parameter_set_id","chroma_format_idc","seq_scaling_list_present_flag","pic_order_cnt_type","num_ref_frames_in_pic_order_cnt_cycle","offset_for_ref_frame","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","frame_cropping_flag","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","VideoPacket","int64","arrayBuffer","NoPts","BigInt","ClipboardMessage","ScrcpyClient","outputEvent","closeEvent","_running","sizeChangedEvent","videoDataEvent","clipboardChangeEvent","sendingTouchMessage","static","version","resolver","encoderNameRegex","encoders","client","onOutput","line","match","onClose","promise","backend","event","running","screenWidth","_screenWidth","screenHeight","_screenHeight","onSizeChanged","onVideoData","onClipboardChange","connection","process","childProcess","spawn","shells","onStdout","handleProcessOutput","removeExitListener","onExit","reject","race","handleProcessClosed","receiveVideo","receiveControl","kill","data","text","decode","index","indexOf","substring","splitLines","fire","pts","deserialize","byteLength","sequenceParameterSet","slice","width","height","cropLeft","cropRight","cropTop","cropBottom","croppedWidth","croppedHeight","array","set","size","content","checkControlStream","caller","injectKeyCode","injectText","injectTouch","Move","HoverMove","injectScroll","pressBackOrTurnOnScreen","close","AndroidCodecProfile","AndroidCodecLevel","worker","workerReady","pendingResolvers","streamId","pictureReadyEvent","TinyH264Wrapper","addDisposable","handlePictureReady","onPictureReady","renderStateId","feed","postMessage","offset","cachedInitializePromise","all","then","YuvBuffer","default","YuvCanvas","TinyH264Decoder","maxProfile","Baseline","maxLevel","Level4","_element","document","createElement","element","setSize","_initializer","_yuvCanvas","attach","chromaWidth","chromaHeight","format","cropWidth","cropHeight","displayWidth","displayHeight","wrapper","Worker","URL","addEventListener","decoder","createTinyH264Wrapper","uPlaneOffset","vPlaneOffset","frame","lumaPlane","chromaPlane","drawFrame","toHex","toString","padStart","toUpperCase","WebCodecsDecoder","High","Level5","context","getContext","VideoDecoder","output","drawImage","error","codec","configure","optimizeForLatency","EncodedVideoChunk","timestamp","cachedValue","SERVER_URL","FetchWithProgress","url","_downloaded","_total","progressEvent","EventEmitter","fetch","downloaded","total","response","chunks","position","chunk","Number","parseInt","headers","get","body","getReader","done","reduce","item","clamp","min","max","KeyRepeater","interval","press","timeoutId","keyCode","repeat","metaState","intervalId","setInterval","onRelease","clearInterval","clearTimeout","release","Up","ScrcpyPageState","deviceView","rendererContainer","logVisible","log","settingsVisible","demoModeVisible","selectedEncoder","decoders","name","factory","selectedDecoder","resolution","connecting","serverTotalSize","serverDownloadedSize","debouncedServerDownloadedSize","serverDownloadSpeed","serverUploadedSize","debouncedServerUploadedSize","serverUploadSpeed","homeKeyRepeater","appSwitchKeyRepeater","serverBuffer","globalState","state","runInAction","catch","progress","getEncoders","SCRCPY_SERVER_VERSION","stop","navigator","clipboard","writeText","profile","level","handleBackPointerDown","button","currentTarget","setPointerCapture","pointerId","handleBackPointerUp","handleHomePointerDown","handleHomePointerUp","handleAppSwitchPointerDown","handleAppSwitchPointerUp","calculatePointerPosition","clientX","clientY","x","y","pointerType","pointerX","pointerY","pressure","buttons","handlePointerDown","focus","preventDefault","handlePointerMove","handlePointerUp","handleWheel","stopPropagation","scrollX","Math","sign","deltaX","scrollY","deltaY","handleContextMenu","handleKeyDown","code","Backspace","Delete","Space","makeAutoObservable","observable","handleDeviceViewRef","handleRendererContainerRef","handleCurrentEncoderChange","handleSelectedDecoderChange","handleResolutionChange","handleTunnelForwardChange","handleBitRateChange","autorun","firstChild","appendChild","Home","AppSwitch","unshift","commandBarItems","iconProps","iconName","Icons","onClick","disabled","enterFullscreen","commandBarFarItems","checked","iconOnly","tooltipHostProps","p","ExternalLink","href","spaceAfter","calloutProps","calloutMaxWidth","passive","option","view","getBoundingClientRect","pointerViewX","pointerViewY","ConnectionDialog","observer","layerHostId","useId","useState","isClient","setIsClient","useEffect","style","top","bottom","left","right","margin","pointerEvents","Dialog","hidden","modalProps","layerProps","hostId","dialogContentProps","title","Stack","tokens","CommonStackTokens","ProgressIndicator","label","percentComplete","description","formatSpeed","progressHidden","bottomElement","verticalFill","horizontalAlign","background","horizontal","maxWidth","verticalAlign","IconButton","transform","color","onPointerDown","onPointerUp","RouteStackProps","Head","CommandBar","items","farItems","grow","styles","root","DeviceView","ref","bottomHeight","div","tabIndex","onPointerMove","onPointerCancel","onKeyDown","onContextMenu","padding","overflow","display","fontFamily","overflowY","whiteSpace","wordWrap","Dropdown","selectedKey","placeholder","onChange","SpinButton","labelPosition","Position","step","Toggle","span","TooltipHost","Icon","DemoMode","module","exports"],"sourceRoot":""}