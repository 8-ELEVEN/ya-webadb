{"version":3,"file":"static/chunks/pages/device-info-6b11b28d08040acf.js","mappings":"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","sources":["webpack://_N_E/?112e","webpack://_N_E/./src/pages/device-info.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.104.1_ib3m5ricvtkl2cll7qpr2f6lvq/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.104.1_ib3m5ricvtkl2cll7qpr2f6lvq/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.104.1_ib3m5ricvtkl2cll7qpr2f6lvq/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.104.1_ib3m5ricvtkl2cll7qpr2f6lvq/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.13.4_kzbn2opkn2327fwg5yzwzya5o4/node_modules/@fluentui/utilities/src/DelayedRender.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/device-info\",\n      function () {\n        return require(\"private-next-pages/device-info.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/device-info\"])\n      });\n    }\n  ","import { Icon, MessageBar, Separator, Stack, TooltipHost } from \"@fluentui/react\";\nimport { AdbFeatures } from \"@yume-chan/adb\";\nimport { observer } from 'mobx-react-lite';\nimport type { NextPage } from 'next';\nimport Head from 'next/head';\nimport React from \"react\";\nimport { ExternalLink } from \"../components\";\nimport { GlobalState } from '../state';\nimport { Icons, RouteStackProps } from \"../utils\";\n\nconst KNOWN_FEATURES: Record<string, string> = {\n    [AdbFeatures.ShellV2]: `\"shell\" command now supports separating child process's stdout and stderr, and returning exit code`,\n    // 'cmd': '',\n    [AdbFeatures.StatV2]: '\"sync\" command now supports \"STA2\" (returns more information of a file than old \"STAT\") and \"LST2\" (returns information of a directory) sub command',\n    [AdbFeatures.ListV2]: '\"sync\" command now supports \"LST2\" sub command which returns more information when listing a directory than old \"LIST\"',\n    [AdbFeatures.FixedPushMkdir]: 'Android 9 (P) introduced a bug that pushing files to a non-existing directory would fail. This feature indicates it\\'s fixed (Android 10)',\n    // 'apex': '',\n    // 'abb': '',\n    // 'fixed_push_symlink_timestamp': '',\n    'abb_exec': 'Support \"exec\" command which can stream stdin into child process',\n    // 'remount_shell': '',\n    // 'track_app': '',\n    // 'sendrecv_v2': '',\n    // 'sendrecv_v2_brotli': '',\n    // 'sendrecv_v2_lz4': '',\n    // 'sendrecv_v2_zstd': '',\n    // 'sendrecv_v2_dry_run_send': '',\n};\n\nconst DeviceInfo: NextPage = () => {\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Device Info - Android Web Toolbox</title>\n            </Head>\n\n            <MessageBar>\n                <span>ADB protocol version decides the packet format between client and server. By now it has 2 versions:</span>\n                <br />\n\n                <code>01000000</code>\n                <span> used in Android versions until 8 (Oreo)</span>\n                <br />\n\n                <code>01000001</code>\n                <span> used in Android versions from 9 (Pie)</span>\n                <br />\n\n                <span>For more information, you can check</span>\n                <ExternalLink href=\"https://chensi.moe/blog/2020/09/30/webadb-part2-connection/#version\">my blog post</ExternalLink>\n            </MessageBar>\n            <span>\n                <span>Protocol Version: </span>\n                <code>{GlobalState.device?.protocolVersion?.toString(16).padStart(8, '0')}</code>\n            </span>\n            <Separator />\n\n            <MessageBar>\n                <code>ro.product.name</code>\n                <span> field in Android Build Props</span>\n            </MessageBar>\n            <span>Product Name: {GlobalState.device?.product}</span>\n            <Separator />\n\n            <MessageBar>\n                <code>ro.product.model</code>\n                <span> field in Android Build Props</span>\n            </MessageBar>\n            <span>Model Name: {GlobalState.device?.model}</span>\n            <Separator />\n\n            <MessageBar>\n                <code>ro.product.device</code>\n                <span> field in Android Build Props</span>\n            </MessageBar>\n            <span>Device Name: {GlobalState.device?.device}</span>\n            <Separator />\n\n            <MessageBar>\n                <span>Feature list decides how each individual commands should behavior.</span>\n                <br />\n\n                <span>For example, it may indicate the availability of a new command, </span>\n                <span>{`or a workaround for an old bug is not required because it's already been fixed.`}</span>\n                <br />\n            </MessageBar>\n            <span>\n                <span>Features: </span>\n                {GlobalState.device?.features?.map((feature, index) => (\n                    <span key={feature}>\n                        {index !== 0 && (<span>, </span>)}\n                        <span>{feature}</span>\n                        {KNOWN_FEATURES[feature] && (\n                            <TooltipHost content={<span>{KNOWN_FEATURES[feature]}</span>}>\n                                <Icon style={{ marginLeft: 4 }} iconName={Icons.Info} />\n                            </TooltipHost>\n                        )}\n                    </span>\n                ))}\n            </span>\n        </Stack>\n    );\n};\n\nexport default observer(DeviceInfo);\n","import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst ICON_MAP = {\n  [MessageBarType.info]: 'Info',\n  [MessageBarType.warning]: 'Info',\n  [MessageBarType.error]: 'ErrorBadge',\n  [MessageBarType.blocked]: 'Blocked2',\n  [MessageBarType.severeWarning]: 'Warning',\n  [MessageBarType.success]: 'Completed',\n};\n\nconst COMPONENT_NAME = 'MessageBar';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nconst getAnnouncementPriority = (messageBarType: MessageBarType): 'assertive' | 'polite' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\n\nconst getRole = (messageBarType: MessageBarType): 'alert' | 'status' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\n\nexport const MessageBarBase: React.FunctionComponent<IMessageBarProps> = React.forwardRef<\n  HTMLDivElement,\n  IMessageBarProps\n>((props, ref) => {\n  const [expandSingleLine, { toggle: toggleExpandSingleLine }] = useBoolean(false);\n  const labelId = useId('MessageBar');\n\n  const {\n    actions,\n    className,\n    children,\n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel,\n    dismissIconProps,\n    styles,\n    theme,\n    messageBarType = MessageBarType.info,\n    onDismiss = undefined,\n    isMultiline = true,\n    truncated,\n    dismissButtonAriaLabel,\n    messageBarIconProps,\n    role,\n    delayedRender = true,\n    expandButtonProps,\n  } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(props, htmlElementProperties, [\n    'className',\n    'role',\n  ]);\n\n  const classNames: { [key in keyof IMessageBarStyles]: string } = getClassNames(styles, {\n    theme: theme!,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className,\n  });\n\n  const expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n  const regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n  const actionsDiv = actions ? <div className={classNames.actions}>{actions}</div> : null;\n\n  const dismissButton = onDismiss ? (\n    <IconButton\n      disabled={false}\n      className={classNames.dismissal}\n      onClick={onDismiss}\n      iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n      title={dismissButtonAriaLabel}\n      ariaLabel={dismissButtonAriaLabel}\n    />\n  ) : null;\n\n  return (\n    <div ref={ref} className={classNames.root} {...regionProps}>\n      <div className={classNames.content}>\n        <div className={classNames.iconContainer} aria-hidden>\n          {messageBarIconProps ? (\n            <Icon {...messageBarIconProps} className={css(classNames.icon, messageBarIconProps.className)} />\n          ) : (\n            <Icon iconName={ICON_MAP[messageBarType!]} className={classNames.icon} />\n          )}\n        </div>\n        <div\n          className={classNames.text}\n          id={labelId}\n          role={role || getRole(messageBarType)}\n          aria-live={getAnnouncementPriority(messageBarType)}\n        >\n          <span className={classNames.innerText} {...nativeProps}>\n            {delayedRender ? (\n              <DelayedRender>\n                <span>{children}</span>\n              </DelayedRender>\n            ) : (\n              // this span is probably not necessary, but preserving it for now in case anyone\n              // has styling that expects it to be present\n              <span>{children}</span>\n            )}\n          </span>\n        </div>\n        {\n          /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (\n            <div className={classNames.expandSingleLine}>\n              <IconButton\n                disabled={false}\n                className={classNames.expand}\n                onClick={toggleExpandSingleLine}\n                iconProps={expandIconProps}\n                ariaLabel={overflowButtonAriaLabel}\n                aria-expanded={expandSingleLine}\n                {...expandButtonProps}\n              />\n            </div>\n          )\n        }\n        {/* singleline actions */ !isMultiline && actionsDiv}\n        {\n          /* singleline dismiss */ !isMultiline && dismissButton && (\n            <div className={classNames.dismissSingleLine}>{dismissButton}</div>\n          )\n        }\n        {/* multiline dismiss */ isMultiline && dismissButton}\n      </div>\n      {/* multiline actions */ isMultiline && actionsDiv}\n    </div>\n  );\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n","import {\n  HighContrastSelector,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nimport type { IStyle, ISemanticColors } from '../../Styling';\nimport type { IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst highContrastBackgroundColor: { [key: string]: string } = {\n  [MessageBarType.error]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.blocked]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.success]: 'rgba(48, 241, 73, 0.3)',\n  [MessageBarType.warning]: 'rgba(255, 254, 57, 0.3)',\n  [MessageBarType.severeWarning]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.info]: 'Window',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        ...getHighContrastNoAdjustStyle(),\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n            background: highContrastBackgroundColor[messageBarType],\n            border: '1px solid WindowText',\n            color: 'WindowText',\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          ...getHighContrastNoAdjustStyle(),\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        selectors: {\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a:last-child': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        // reset forced colors to browser control for inner actions\n        forcedColorAdjust: 'auto',\n        MsHighContrastAdjust: 'auto',\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MessageBarBase } from './MessageBar.base';\nimport { getStyles } from './MessageBar.styles';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nexport const MessageBar: React.FunctionComponent<IMessageBarProps> = styled<\n  IMessageBarProps,\n  IMessageBarStyleProps,\n  IMessageBarStyles\n>(MessageBarBase, getStyles, undefined, {\n  scope: 'MessageBar',\n});\n","import * as React from 'react';\nimport { BaseButton, Button, IButtonProps } from '../../Button';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IIconProps } from '../../Icon';\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBar {}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarProps extends React.HTMLAttributes<HTMLElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IMessageBar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IMessageBar>;\n\n  /**\n   * The type of MessageBar to render.\n   * @defaultvalue MessageBarType.info\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * The actions you want to show on the other side.\n   */\n  actions?: JSX.Element;\n\n  /**\n   * A description of the message bar for the benefit of screen readers.\n   * @deprecated Use native prop `aria-label` instead.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Whether the message bar has a dismiss button and its callback.\n   * If null, we don't show a dismiss button.\n   * @defaultvalue null\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement | BaseButton | Button>) => any;\n\n  /**\n   * Determines if the message bar is multi lined.\n   * If false, and the text overflows over buttons or to another line, it is clipped.\n   * @defaultvalue true\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Aria label on dismiss button if onDismiss is defined.\n   */\n  dismissButtonAriaLabel?: string;\n\n  /**\n   * Determines if the message bar text is truncated.\n   * If true, a button will render to toggle between a single line view and multiline view.\n   * This prop is for single line message bars with no buttons only in a limited space scenario.\n   * @defaultvalue false\n   */\n  truncated?: boolean;\n\n  /**\n   * Aria label on overflow button if truncated is defined.\n   * @deprecated Use `expandButtonProps` instead.\n   */\n  overflowButtonAriaLabel?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the MessageBar.\n   */\n  className?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;\n\n  /**\n   * Custom icon prop to replace the dismiss icon.\n   * If unset, default will be the Fabric Clear icon.\n   */\n  dismissIconProps?: IIconProps;\n\n  /**\n   * Custom icon prop to replace the message bar icon.\n   * If unset, default will be the icon set by messageBarType.\n   */\n  messageBarIconProps?: IIconProps;\n\n  /**\n   *  Button props that can be applied to the expand button of the MessageBar.\n   */\n  expandButtonProps?: IButtonProps;\n\n  /**\n   * Custom role to apply to the MessageBar.\n   * @defaultvalue `alert` if `messageBarType` is `error`, `blocked`, or `severeWarning`;\n   * or `status` otherwise\n   */\n  role?: 'alert' | 'status' | 'none';\n\n  /**\n   * By default, MessageBar delay-renders its content within an internal live region to help ensure\n   * it's announced by screen readers. You can disable that behavior by setting this prop to `false`.\n   *\n   * If you set this prop to `false`, to ensure proper announcement you should either:\n   * - If appropriate, ensure that the `role` prop is set to `alert` (this will be done by default\n   *   if `messageBarType` is `error`, `blocked`, or `severeWarning`), OR\n   * - Set the `role` prop to `none` (to avoid nested `status` regions), wrap the whole MessageBar\n   *   in a `<div role=\"status\">` which is always rendered, and ensure that the MessageBar is\n   *   rendered either conditionally or with a delay.\n   * @default true\n   */\n  delayedRender?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyleProps {\n  /**\n   * Theme (provided through customization).\n   */\n  theme: ITheme;\n\n  /**\n   * Additional CSS class(es).\n   */\n  className?: string;\n\n  /**\n   * Type of the MessageBar.\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * Whether the MessageBar contains a dismiss button.\n   */\n  onDismiss?: boolean;\n\n  /**\n   * Whether the text is truncated.\n   */\n  truncated?: boolean;\n\n  /**\n   * Whether the MessageBar is rendered in multi line (as opposed to single line) mode.\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Whether the single line MessageBar is being expanded.\n   */\n  expandSingleLine?: boolean;\n\n  /**\n   * Whether the MessageBar contains any action elements.\n   */\n  actions?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyles {\n  /**\n   * Style set for the root element.\n   */\n  root?: IStyle;\n\n  /**\n   * Style set for the element containing the icon, text, and optional dismiss button.\n   */\n  content?: IStyle;\n\n  /**\n   * Style set for the element containing the icon.\n   */\n  iconContainer?: IStyle;\n\n  /**\n   * Style set for the icon.\n   */\n  icon?: IStyle;\n\n  /**\n   * Style set for the element containing the text.\n   */\n  text?: IStyle;\n\n  /**\n   * Style set for the text.\n   */\n  innerText?: IStyle;\n\n  /**\n   * Style set for the optional dismiss button.\n   */\n  dismissal?: IStyle;\n\n  /**\n   * Style set for the icon used to expand and collapse the MessageBar.\n   */\n  expand?: IStyle;\n\n  /**\n   * Style set for the element containing the dismiss button.\n   */\n  dismissSingleLine?: IStyle;\n\n  /**\n   * Style set for the element containing the expand icon.\n   */\n  expandSingleLine?: IStyle;\n\n  /**\n   * Style set for the optional element containing the action elements.\n   */\n  actions?: IStyle;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport enum MessageBarType {\n  /** Info styled MessageBar */\n  info = 0,\n  /** Error styled MessageBar */\n  error = 1,\n  /** Blocked styled MessageBar */\n  blocked = 2,\n  /** SevereWarning styled MessageBar */\n  severeWarning = 3,\n  /** Success styled MessageBar */\n  success = 4,\n  /** Warning styled MessageBar */\n  warning = 5,\n}\n","import * as React from 'react';\nimport { getWindow } from './dom/getWindow';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: getWindow() === undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n"],"names":["window","__NEXT_P","push","__webpack_require__","KNOWN_FEATURES","AdbFeatures","DeviceInfo","GlobalState","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Stack","RouteStackProps","jsx","Head","title","MessageBar","span","br","code","ExternalLink","href","protocolVersion","toString","padStart","Separator","product","model","device","features","map","feature","index","TooltipHost","content","Icon","style","marginLeft","iconName","Icons","__webpack_exports__","observer","ICON_MAP","_a","MessageBar_types","f","info","warning","error","blocked","severeWarning","success","getClassNames","classNamesFunction","y","getAnnouncementPriority","messageBarType","getRole","MessageBarBase","react","forwardRef","props","ref","useBoolean","k","expandSingleLine","toggleExpandSingleLine","toggle","labelId","useId","M","actions","className","children","overflowButtonAriaLabel","dismissIconProps","styles","theme","_b","_c","onDismiss","undefined","_d","isMultiline","truncated","dismissButtonAriaLabel","messageBarIconProps","role","_e","delayedRender","expandButtonProps","nativeProps","properties","pq","iY","classNames","actionsDiv","createElement","dismissButton","IconButton","h","disabled","dismissal","onClick","iconProps","ariaLabel","tslib_es6","pi","root","iconContainer","J","css","i","icon","text","id","innerText","DelayedRender","U","expand","dismissSingleLine","displayName","GlobalClassNames","multiline","singleline","dismissalSingleLine","expandingSingleLine","actionsSingleline","backgroundColor","MessageBar_styles_a","highContrastBackgroundColor","iconColor","styled","z","_f","semanticColors","fonts","SmallScreenSelector","lib","sK","mV","Cn","dismissalAndExpandIconStyle","fontSize","ld","xSmall","height","lineHeight","color","messageText","selectors","qJ","xM","dismissalAndExpandStyle","GL","inset","highContrastStyle","outlineOffset","outline","borderColor","flexShrink","width","padding","medium","background","minHeight","display","wordBreak","messageLink","messageLinkHovered","border","flexDirection","minWidth","margin","flexGrow","small","marginRight","paddingLeft","overflow","whiteSpace","textOverflow","flexBasis","alignItems","forcedColorAdjust","MsHighContrastAdjust","marginBottom","scope","MessageBarType","_super","_this","call","state","isRendered","_dom_getWindow__WEBPACK_IMPORTED_MODULE_2__","tslib__WEBPACK_IMPORTED_MODULE_1__","ZT","prototype","componentDidMount","delay","_timeoutId","setTimeout","setState","componentWillUnmount","clearTimeout","render","react__WEBPACK_IMPORTED_MODULE_0__","Children","only","defaultProps","Component"],"sourceRoot":""}