{"version":3,"file":"static/chunks/pages/logcat-9003aa628abb0213.js","mappings":"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","sources":["webpack://_N_E/?7144","webpack://_N_E/../../libraries/b-tree/src/index.ts","webpack://_N_E/./src/pages/logcat.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/logcat\",\n      function () {\n        return require(\"private-next-pages/logcat.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/logcat\"])\n      });\n    }\n  ","interface BTreeInsertionResult {\n    key: number;\n    child: BTreeNode;\n}\n\nfunction insert(\n    array: Int32Array,\n    length: number,\n    value: number,\n    index: number\n) {\n    if (index !== length) {\n        array.set(array.subarray(index, length), index + 1);\n    }\n    array[index] = value;\n}\n\nfunction remove(array: Int32Array, length: number, index: number) {\n    if (index < length - 1) {\n        array.set(array.subarray(index + 1, length), index);\n    }\n}\n\nexport class BTreeNode {\n    order: number;\n    mid: number;\n    minKeyCount: number;\n\n    keys: Int32Array;\n    keyCount: number;\n\n    height: number;\n    children: BTreeNode[];\n\n    public constructor(\n        order: number,\n        keys: Int32Array,\n        keyCount: number,\n        height: number,\n        children: BTreeNode[]\n    ) {\n        this.order = order;\n        this.mid = this.order >> 1;\n        // Math.ceil(order / 2) - 1\n        this.minKeyCount = ((this.order + 1) >> 1) - 1;\n\n        this.keys = keys;\n        this.keyCount = keyCount;\n\n        this.height = height;\n        this.children = children;\n    }\n\n    /**\n     * Split the current node into two\n     * @param value The key to be inserted.\n     * @param index The index of the key to be inserted at.\n     * @param child The child (right to the key) to be inserted. May be undefined when current node is a leaf.\n     * @returns The new key and child need to be inserted to its parent.\n     * The new key is the middle key of the current node, and the child contains the right half of the current node.\n     */\n    protected split(\n        value: number,\n        index: number,\n        child?: BTreeNode\n    ): BTreeInsertionResult {\n        let middleKey: number;\n        const rightKeys = new Int32Array(this.order - 1);\n        let rightChildren: BTreeNode[];\n\n        if (index < this.mid) {\n            middleKey = this.keys[this.mid - 1]!;\n            rightKeys.set(this.keys.subarray(this.mid), 0);\n\n            insert(this.keys, this.mid - 1, value, index);\n\n            if (child) {\n                // internal node\n                rightChildren = this.children.splice(\n                    this.mid,\n                    this.order - this.mid\n                );\n                // TODO: this may cause the underlying array to grow (re-alloc and copy)\n                // investigate if this hurts performance.\n                this.children.splice(index + 1, 0, child);\n            } else {\n                // leaf node, doesn't have children, create am empty array for it.\n                rightChildren = new Array<BTreeNode>(this.order);\n            }\n        } else {\n            if (index === this.mid) {\n                middleKey = value;\n                rightKeys.set(this.keys.subarray(this.mid), 0);\n            } else {\n                middleKey = this.keys[this.mid]!;\n                if (index !== this.mid + 1) {\n                    rightKeys.set(this.keys.subarray(this.mid + 1, index), 0);\n                }\n                rightKeys[index - this.mid - 1] = value;\n                rightKeys.set(this.keys.subarray(index), index - this.mid);\n            }\n\n            if (child) {\n                rightChildren = this.children.splice(\n                    this.mid + 1,\n                    this.order - this.mid - 1\n                );\n                rightChildren.splice(index - this.mid, 0, child);\n            } else {\n                rightChildren = new Array<BTreeNode>(this.order);\n            }\n        }\n\n        this.keyCount = this.mid;\n        return {\n            key: middleKey,\n            child: new BTreeNode(\n                this.order,\n                rightKeys,\n                this.order - 1 - this.mid,\n                this.height,\n                rightChildren\n            ),\n        };\n    }\n\n    public search(value: number): number {\n        let start = 0;\n        let end = this.keyCount - 1;\n        while (start <= end) {\n            const mid = (start + end) >> 1;\n            if (this.keys[mid] === value) {\n                return mid;\n            } else if (this.keys[mid]! < value) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return ~start;\n    }\n\n    public has(value: number): boolean {\n        let index = this.search(value);\n        if (index >= 0) {\n            return true;\n        }\n        if (this.height > 0) {\n            index = ~index;\n            return this.children[index]!.has(value);\n        }\n        return false;\n    }\n\n    public add(value: number): BTreeInsertionResult | boolean {\n        let index = this.search(value);\n        if (index >= 0) {\n            return false;\n        }\n\n        index = ~index;\n\n        if (this.height === 0) {\n            if (this.keyCount === this.order - 1) {\n                return this.split(value, index);\n            }\n\n            insert(this.keys, this.keyCount, value, index);\n            this.keyCount += 1;\n            return true;\n        }\n\n        const split = this.children[index]!.add(value);\n        if (typeof split === \"object\") {\n            if (this.keyCount === this.order - 1) {\n                return this.split(split.key, index, split.child);\n            }\n\n            insert(this.keys, this.keyCount, split.key, index);\n            this.keyCount += 1;\n\n            this.children.splice(index + 1, 0, split.child);\n        }\n\n        return true;\n    }\n\n    public delete(value: number): boolean {\n        let index = this.search(value);\n        if (index >= 0) {\n            this.deleteAt(index);\n            return true;\n        }\n\n        if (this.height > 0) {\n            index = ~index;\n            const deleted = this.children[index]!.delete(value);\n            if (deleted) {\n                this.balance(index);\n            }\n            return deleted;\n        }\n\n        return false;\n    }\n\n    public max(): number {\n        if (this.height === 0) {\n            return this.keys[this.keyCount - 1]!;\n        }\n        return this.children[this.keyCount]!.max();\n    }\n\n    protected balance(index: number) {\n        const child = this.children[index]!;\n\n        if (child.keyCount >= this.minKeyCount) {\n            return;\n        }\n\n        if (index > 0) {\n            const left = this.children[index - 1]!;\n            if (left.keyCount > this.minKeyCount) {\n                // rotate right\n                insert(child.keys, child.keyCount, this.keys[index - 1]!, 0);\n                if (this.height > 1) {\n                    child.children.splice(0, 0, left.children[left.keyCount]!);\n                }\n                child.keyCount += 1;\n\n                this.keys[index - 1] = left.keys[left.keyCount - 1]!;\n                left.keyCount -= 1;\n                return;\n            }\n\n            // merge with left\n            left.keys[left.keyCount] = this.keys[index - 1]!;\n            left.keyCount += 1;\n            left.keys.set(\n                child.keys.subarray(0, child.keyCount),\n                left.keyCount\n            );\n            if (this.height > 1) {\n                for (let i = 0; i <= child.keyCount; i += 1) {\n                    left.children[left.keyCount + i] = child.children[i]!;\n                }\n            }\n            left.keyCount += child.keyCount;\n            remove(this.keys, this.keyCount, index - 1);\n            this.children.splice(index, 1);\n            this.keyCount -= 1;\n            return;\n        }\n\n        const right = this.children[index + 1]!;\n        if (right.keyCount > this.minKeyCount) {\n            // rotate left\n            child.keys[child.keyCount] = this.keys[index]!;\n            if (this.height > 1) {\n                child.children[child.keyCount + 1] = right.children.splice(\n                    0,\n                    1\n                )[0]!;\n            }\n            child.keyCount += 1;\n\n            this.keys[index] = right.keys[0]!;\n\n            remove(right.keys, right.keyCount, 0);\n            right.keyCount -= 1;\n            return;\n        }\n\n        // merge right into child\n        child.keys[child.keyCount] = this.keys[index]!;\n        child.keyCount += 1;\n        child.keys.set(right.keys.subarray(0, right.keyCount), child.keyCount);\n        if (this.height > 1) {\n            for (let i = 0; i <= right.keyCount; i += 1) {\n                child.children[child.keyCount + i] = right.children[i]!;\n            }\n        }\n        child.keyCount += right.keyCount;\n        remove(this.keys, this.keyCount, index);\n        this.children.splice(index + 1, 1);\n        this.keyCount -= 1;\n    }\n\n    protected deleteMax(): void {\n        if (this.height === 0) {\n            this.keyCount -= 1;\n            return;\n        }\n\n        const child = this.children[this.keyCount]!;\n        child.deleteMax();\n        this.balance(this.keyCount);\n    }\n\n    protected deleteAt(index: number) {\n        if (this.height === 0) {\n            remove(this.keys, this.keyCount, index);\n            this.keyCount -= 1;\n            return;\n        }\n\n        const max = this.children[index]!.max();\n        this.keys[index] = max;\n        this.children[index]!.deleteMax();\n        this.balance(index);\n    }\n\n    public *[Symbol.iterator](): Generator<number, void, void> {\n        if (this.height > 0) {\n            for (let i = 0; i < this.keyCount; i += 1) {\n                yield* this.children[i]!;\n                yield this.keys[i]!;\n            }\n            yield* this.children[this.keyCount]!;\n        } else {\n            for (let i = 0; i < this.keyCount; i += 1) {\n                yield this.keys[i]!;\n            }\n        }\n    }\n}\n\nexport class BTree {\n    order: number;\n    root: BTreeNode;\n\n    size = 0;\n\n    public constructor(order: number) {\n        this.order = order;\n        this.root = new BTreeNode(\n            order,\n            new Int32Array(order - 1),\n            0,\n            0,\n            new Array<BTreeNode>(order)\n        );\n    }\n\n    public has(value: number) {\n        // TODO(btree): benchmark this non-recursive version\n        let node = this.root;\n        while (true) {\n            const index = node.search(value);\n            if (index >= 0) {\n                return true;\n            }\n\n            node = node.children[~index]!;\n            if (!node) {\n                return false;\n            }\n        }\n    }\n\n    public add(value: number) {\n        const split = this.root.add(value);\n        if (typeof split === \"object\") {\n            const keys = new Int32Array(this.order - 1);\n            keys[0] = split.key;\n\n            const children = new Array<BTreeNode>(this.order);\n            children[0] = this.root;\n            children[1] = split.child;\n\n            this.root = new BTreeNode(\n                this.order,\n                keys,\n                1,\n                this.root.height + 1,\n                children\n            );\n        }\n        if (split) {\n            this.size += 1;\n        }\n        return !!split;\n    }\n\n    public delete(value: number) {\n        const deleted = this.root.delete(value);\n        if (deleted) {\n            if (this.root.height > 0 && this.root.keyCount === 0) {\n                this.root = this.root.children[0]!;\n            }\n            this.size -= 1;\n        }\n        return deleted;\n    }\n\n    public clear() {\n        this.root.keyCount = 0;\n        this.root.height = 0;\n        // immediately release all references\n        this.root.children = new Array<BTreeNode>(this.order);\n        this.size = 0;\n    }\n\n    public [Symbol.iterator]() {\n        return this.root[Symbol.iterator]();\n    }\n}\n","import { Checkbox, ICommandBarItemProps, Stack, StackItem } from \"@fluentui/react\";\nimport { makeStyles, mergeClasses, shorthands } from \"@griffel/react\";\nimport { AndroidLogEntry, AndroidLogPriority, formatAndroidLogEntry, Logcat, LogcatFormat } from '@yume-chan/android-bin';\nimport { BTree } from '@yume-chan/b-tree';\nimport { AbortController, ReadableStream, WritableStream } from '@yume-chan/stream-extra';\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { FormEvent, useEffect, useState } from 'react';\n\nimport { CommandBar, Grid, GridColumn, GridHeaderProps, GridRowProps } from \"../components\";\nimport { GlobalState } from \"../state\";\nimport { Icons, RouteStackProps, useStableCallback } from \"../utils\";\n\nconst LINE_HEIGHT = 32;\n\nconst useClasses = makeStyles({\n    grid: {\n        height: '100%',\n        marginLeft: '-16px',\n        marginRight: '-16px',\n    },\n    header: {\n        textAlign: 'center',\n        lineHeight: `${LINE_HEIGHT}px`,\n    },\n    row: {\n        '&:hover': {\n            backgroundColor: '#f3f2f1',\n        },\n    },\n    selected: {\n        backgroundColor: '#edebe9',\n    },\n    code: {\n        fontFamily: 'monospace',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        lineHeight: LINE_HEIGHT + 'px',\n        cursor: 'default',\n        ...shorthands.overflow('hidden'),\n    },\n});\n\nexport interface Column extends GridColumn {\n    title: string;\n}\n\nexport interface LogRow extends AndroidLogEntry {\n    timeString?: string;\n}\n\nconst state = makeAutoObservable({\n    logcat: undefined as Logcat | undefined,\n    running: false,\n    buffer: [] as LogRow[],\n    flushRequested: false,\n    list: [] as LogRow[],\n    selection: new BTree(6),\n    count: 0,\n    stream: undefined as ReadableStream<AndroidLogEntry> | undefined,\n    stopSignal: undefined as AbortController | undefined,\n    selectedCount: 0,\n    animationFrameId: undefined as number | undefined,\n    start() {\n        if (this.running) {\n            return;\n        }\n\n        // Logcat always starts from beginning,\n        // so don't append.\n        this.list = [];\n\n        this.running = true;\n        this.stream = this.logcat!.binary();\n        this.stopSignal = new AbortController();\n        this.stream\n            .pipeTo(\n                new WritableStream({\n                    write: (chunk) => {\n                        this.buffer.push(chunk);\n                        if (!this.flushRequested) {\n                            this.flushRequested = true;\n                            requestAnimationFrame(this.flush);\n                        }\n                    },\n                }),\n                { signal: this.stopSignal.signal }\n            )\n            .catch(() => { });\n    },\n    flush() {\n        this.list.push(...this.buffer);\n        this.buffer = [];\n        this.flushRequested = false;\n    },\n    stop() {\n        this.running = false;\n        this.stopSignal!.abort();\n    },\n    clear() {\n        this.list = [];\n        this.selection.clear();\n        this.selectedCount = 0;\n    },\n    get empty() {\n        return this.list.length === 0;\n    },\n    get commandBar(): ICommandBarItemProps[] {\n        return [\n            this.running ? {\n                key: \"stop\",\n                text: \"Stop\",\n                iconProps: { iconName: Icons.Stop },\n                onClick: () => this.stop(),\n            } : {\n                key: \"start\",\n                text: \"Start\",\n                disabled: this.logcat === undefined,\n                iconProps: { iconName: Icons.Play },\n                onClick: () => this.start(),\n            },\n            {\n                key: 'clear',\n                text: 'Clear',\n                disabled: this.empty,\n                iconProps: { iconName: Icons.Delete },\n                onClick: () => this.clear(),\n            },\n            {\n                key: 'copyAll',\n                text: 'Copy Rows',\n                disabled: this.selectedCount === 0,\n                iconProps: { iconName: Icons.Copy },\n                onClick: () => {\n                    let text = '';\n                    for (const index of this.selection) {\n                        text += formatAndroidLogEntry(\n                            this.list[index],\n                            LogcatFormat.Brief\n                        ) + '\\n';\n                    }\n                    // Chrome on Windows can't copy null characters\n                    text = text.replace(/\\u0000/g, '');\n                    navigator.clipboard.writeText(text);\n                }\n            },\n            {\n                key: 'copyText',\n                text: 'Copy Messages',\n                disabled: this.selectedCount === 0,\n                iconProps: { iconName: Icons.Copy },\n                onClick: () => {\n                    let text = '';\n                    for (const index of this.selection) {\n                        text += this.list[index].message + '\\n';\n                    }\n                    // Chrome on Windows can't copy null characters\n                    text = text.replace(/\\u0000/g, '');\n                    navigator.clipboard.writeText(text);\n                }\n            }\n        ];\n    },\n    get columns(): Column[] {\n        return [\n            {\n                width: 40,\n                title: '',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const [checked, setChecked] = useState(false);\n                    useEffect(() => {\n                        setChecked(this.selection.has(rowIndex));\n                    }, [rowIndex]);\n\n                    const handleChange = useStableCallback((e?: FormEvent<EventTarget>, checked?: boolean) => {\n                        if (checked === undefined) {\n                            return;\n                        }\n                        if (checked) {\n                            this.selection.add(rowIndex);\n                            setChecked(true);\n                        } else {\n                            this.selection.delete(rowIndex);\n                            setChecked(false);\n                        }\n                        runInAction(() => {\n                            // Trigger mobx\n                            this.selectedCount = this.selection.size;\n                        });\n                    });\n\n                    return (\n                        <Stack className={className} verticalAlign='center' horizontalAlign='center' {...rest}>\n                            <Checkbox checked={checked} onChange={handleChange} />\n                        </Stack>\n                    );\n                }\n            },\n            {\n                width: 200,\n                title: 'Time',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n                    if (!item.timeString) {\n                        item.timeString = new Date(item.second * 1000).toISOString();\n                    }\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.timeString}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 60,\n                title: 'PID',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.pid}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 60,\n                title: 'TID',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.tid}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 80,\n                title: 'Priority',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {AndroidLogPriority[item.priority]}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 300,\n                title: 'Tag',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.tag}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 300,\n                flexGrow: 1,\n                title: 'Message',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.message}\n                        </div>\n                    );\n                }\n            },\n        ];\n    },\n}, {\n    buffer: false,\n    list: observable.shallow,\n    flush: action.bound,\n});\n\nautorun(() => {\n    if (GlobalState.device) {\n        runInAction(() => {\n            state.logcat = new Logcat(GlobalState.device!);\n        });\n    } else {\n        runInAction(() => {\n            state.logcat = undefined;\n            if (state.running) {\n                state.stop();\n            }\n        });\n    }\n});\n\nconst Header = observer(function Header({\n    className,\n    columnIndex,\n    ...rest\n}: GridHeaderProps) {\n    const classes = useClasses();\n\n    return (\n        <div className={mergeClasses(className, classes.header)} {...rest}>\n            {state.columns[columnIndex].title}\n        </div>\n    );\n});\n\nconst Row = function Row({\n    className,\n    rowIndex,\n    ...rest\n}: GridRowProps) {\n    const item = state.list[rowIndex];\n    const classes = useClasses();\n\n    const handleClick = useStableCallback(() => {\n        runInAction(() => {\n        });\n    });\n\n    return (\n        <div\n            className={mergeClasses(\n                className,\n                classes.row,\n            )}\n            onClick={handleClick}\n            {...rest}\n        />\n    );\n};\n\nconst LogcatPage: NextPage = () => {\n    const classes = useClasses();\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Logcat - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBar} />\n\n            <StackItem grow>\n                <Grid\n                    className={classes.grid}\n                    rowCount={state.list.length}\n                    rowHeight={LINE_HEIGHT}\n                    columns={state.columns}\n                    HeaderComponent={Header}\n                    RowComponent={Row}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(LogcatPage);\n"],"names":["window","__NEXT_P","push","__webpack_require__","insert","array","length","value","index","set","subarray","remove","BTreeNode","order","mid","minKeyCount","keys","keyCount","height","children","split","child","middleKey","rightChildren","rightKeys","Int32Array","splice","key","search","start","end","has","add","delete","deleteAt","deleted","balance","max","left","i","right","deleteMax","Symbol","iterator","BTree","root","size","node","clear","useClasses","makeStyles","grid","marginLeft","marginRight","header","textAlign","lineHeight","concat","row","backgroundColor","selected","code","fontFamily","textOverflow","whiteSpace","LINE_HEIGHT","cursor","shorthands","state","makeAutoObservable","logcat","undefined","running","buffer","flushRequested","list","selection","count","stream","stopSignal","selectedCount","animationFrameId","binary","AbortController","pipeTo","WritableStream","write","chunk","requestAnimationFrame","flush","signal","catch","stop","abort","empty","commandBar","text","iconProps","iconName","Icons","onClick","disabled","formatAndroidLogEntry","LogcatFormat","replace","navigator","clipboard","writeText","message","columns","width","title","CellComponent","rowIndex","columnIndex","className","rest","param","checked","setChecked","useState","useEffect","handleChange","useStableCallback","e","runInAction","jsx_runtime","jsx","Stack","verticalAlign","horizontalAlign","Checkbox","onChange","item","timeString","Date","second","toISOString","classes","div","mergeClasses","pid","tid","AndroidLogPriority","priority","tag","flexGrow","observable","action","autorun","GlobalState","Logcat","Header","observer","Row","handleClick","LogcatPage","jsxs","RouteStackProps","Head","CommandBar","items","StackItem","grow","Grid","rowCount","rowHeight","HeaderComponent","RowComponent"],"sourceRoot":""}