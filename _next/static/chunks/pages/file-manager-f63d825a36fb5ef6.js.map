{"version":3,"file":"static/chunks/pages/file-manager-f63d825a36fb5ef6.js","mappings":"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","sources":["webpack://_N_E/?3aa5","webpack://_N_E/./pages/file-manager.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/file-manager\",\n      function () {\n        return require(\"private-next-pages/file-manager.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/file-manager\"])\n      });\n    }\n  ","import { Breadcrumb, concatStyleSets, ContextualMenu, ContextualMenuItem, DetailsListLayoutMode, Dialog, DirectionalHint, IBreadcrumbItem, IColumn, Icon, IContextualMenuItem, IDetailsHeaderProps, IRenderFunction, Layer, MarqueeSelection, mergeStyleSets, Overlay, ProgressIndicator, Selection, ShimmeredDetailsList, Stack, StackItem } from '@fluentui/react';\nimport { FileIconType } from \"@fluentui/react-file-type-icons\";\nimport { getFileTypeIconNameFromExtensionOrType } from '@fluentui/react-file-type-icons/lib-commonjs/getFileTypeIconProps';\nimport { DEFAULT_BASE_URL as FILE_TYPE_ICONS_BASE_URL } from '@fluentui/react-file-type-icons/lib-commonjs/initializeFileTypeIcons';\nimport { useConst } from '@fluentui/react-hooks';\nimport { AdbSyncEntryResponse, AdbSyncMaxPacketSize, LinuxFileType } from '@yume-chan/adb';\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Router, { useRouter } from \"next/router\";\nimport path from 'path';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { CommandBar, NoSsr } from '../components';\nimport { globalState } from '../state';\nimport { asyncEffect, chunkFile, formatSize, formatSpeed, Icons, pickFile, RouteStackProps } from '../utils';\n\nlet StreamSaver: typeof import('streamsaver');\nif (typeof window !== 'undefined') {\n    StreamSaver = require('streamsaver');\n    StreamSaver.mitm = Router.basePath + '/StreamSaver/mitm.html';\n}\n\ninterface ListItem extends AdbSyncEntryResponse {\n    key: string;\n}\n\nfunction toListItem(item: AdbSyncEntryResponse): ListItem {\n    return { ...item, key: item.name! };\n}\n\nconst classNames = mergeStyleSets({\n    name: {\n        cursor: 'pointer',\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    },\n});\n\nconst renderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (props?, defaultRender?) => {\n    if (!props || !defaultRender) {\n        return null;\n    }\n\n    return defaultRender({\n        ...props,\n        styles: concatStyleSets(props.styles, { root: { paddingTop: 0 } })\n    });\n};\n\nfunction createReadableStreamFromBufferIterator(\n    iterator: AsyncIterator<ArrayBuffer>\n): ReadableStream<Uint8Array> {\n    return new ReadableStream<Uint8Array>({\n        async pull(controller) {\n            const { desiredSize } = controller;\n            if (!desiredSize || desiredSize < 0) {\n                return;\n            }\n\n            let written = 0;\n            while (written < desiredSize) {\n                const result = await iterator.next();\n                if (result.done) {\n                    controller.close();\n                    return;\n                }\n\n                controller.enqueue(new Uint8Array(result.value));\n                written += result.value.byteLength;\n            }\n        },\n    });\n}\n\nfunction compareCaseInsensitively(a: string, b: string) {\n    let result = a.toLocaleLowerCase().localeCompare(b.toLocaleLowerCase());\n    if (result !== 0) {\n        return result;\n    } else {\n        return a.localeCompare(b);\n    }\n}\n\nclass FileManagerState {\n    initial = true;\n    visible = false;\n    path = '/';\n    loading = false;\n    items: ListItem[] = [];\n    sortKey: keyof ListItem = 'name';\n    sortDescending = false;\n\n    uploading = false;\n    uploadPath: string | undefined = undefined;\n    uploadedSize = 0;\n    uploadTotalSize = 0;\n    debouncedUploadedSize = 0;\n    uploadSpeed = 0;\n\n    selectedItems: ListItem[] = [];\n    contextMenuTarget: MouseEvent | undefined = undefined;\n\n    get breadcrumbItems(): IBreadcrumbItem[] {\n        let part = '';\n        const list: IBreadcrumbItem[] = this.path.split('/').filter(Boolean).map(segment => {\n            part += '/' + segment;\n            return {\n                key: part,\n                text: segment,\n                onClick: (e, item) => {\n                    if (!item) {\n                        return;\n                    }\n                    this.pushPathQuery(item.key);\n                },\n            };\n        });\n        list.unshift({\n            key: '/',\n            text: 'Device',\n            onClick: () => this.pushPathQuery('/'),\n        });\n        list[list.length - 1].isCurrentItem = true;\n        delete list[list.length - 1].onClick;\n        return list;\n    }\n\n    get menuItems() {\n        let result: IContextualMenuItem[] = [];\n\n        switch (this.selectedItems.length) {\n            case 0:\n                result.push({\n                    key: 'upload',\n                    text: 'Upload',\n                    iconProps: {\n                        iconName: Icons.CloudArrowUp,\n                        style: { height: 20, fontSize: 20, lineHeight: 1.5 }\n                    },\n                    disabled: !globalState.device,\n                    onClick: () => {\n                        (async () => {\n                            const files = await pickFile({ multiple: true });\n                            for (let i = 0; i < files.length; i++) {\n                                const file = files.item(i)!;\n                                await this.upload(file);\n                            }\n                        })();\n\n                        return false;\n                    }\n                });\n                break;\n            case 1:\n                if (this.selectedItems[0].type === LinuxFileType.File) {\n                    result.push({\n                        key: 'download',\n                        text: 'Download',\n                        iconProps: {\n                            iconName: Icons.CloudArrowDown,\n                            style: { height: 20, fontSize: 20, lineHeight: 1.5 }\n                        },\n                        onClick: () => {\n                            (async () => {\n                                const sync = await globalState.device!.sync();\n                                try {\n                                    const itemPath = path.resolve(this.path, this.selectedItems[0].name!);\n                                    const readableStream = createReadableStreamFromBufferIterator(sync.read(itemPath));\n\n                                    const writeableStream = StreamSaver!.createWriteStream(this.selectedItems[0].name!, {\n                                        size: this.selectedItems[0].size,\n                                    });\n                                    await readableStream.pipeTo(writeableStream);\n                                } catch (e) {\n                                    globalState.showErrorDialog(e instanceof Error ? e.message : `${e}`);\n                                } finally {\n                                    sync.dispose();\n                                }\n                            })();\n                            return false;\n                        },\n                    });\n                }\n            // fall through\n            default:\n                result.push({\n                    key: 'delete',\n                    text: 'Delete',\n                    iconProps: {\n                        iconName: Icons.Delete,\n                        style: { height: 20, fontSize: 20, lineHeight: 1.5 }\n                    },\n                    onClick: () => {\n                        (async () => {\n                            try {\n                                for (const item of this.selectedItems) {\n                                    const output = await globalState.device!.rm(path.resolve(this.path, item.name!));\n                                    if (output) {\n                                        globalState.showErrorDialog(output);\n                                        return;\n                                    }\n                                }\n                            } catch (e) {\n                                globalState.showErrorDialog(e instanceof Error ? e.message : `${e}`);\n                            } finally {\n                                this.loadFiles();\n                            }\n                        })();\n                        return false;\n                    }\n                });\n                break;\n        }\n\n        return result;\n    }\n\n    get sortedList() {\n        const list = this.items.slice();\n        list.sort((a, b) => {\n            const aIsFile = a.type === LinuxFileType.File ? 1 : 0;\n            const bIsFile = b.type === LinuxFileType.File ? 1 : 0;\n\n            let result: number;\n            if (aIsFile !== bIsFile) {\n                result = aIsFile - bIsFile;\n            } else {\n                const aSortKey = a[this.sortKey]!;\n                const bSortKey = b[this.sortKey]!;\n\n                if (aSortKey === bSortKey) {\n                    result = compareCaseInsensitively(a.name!, b.name!);\n                } else if (typeof aSortKey === 'string') {\n                    result = compareCaseInsensitively(aSortKey, bSortKey as string);\n                } else {\n                    result = aSortKey < bSortKey ? -1 : 1;\n                }\n            }\n\n            if (this.sortDescending) {\n                result *= -1;\n            }\n            return result;\n        });\n        return list;\n    }\n\n    get columns(): IColumn[] {\n        const ICON_SIZE = 20;\n\n        const list: IColumn[] = [\n            {\n                key: 'type',\n                name: 'File Type',\n                iconName: Icons.Document20,\n                isIconOnly: true,\n                minWidth: ICON_SIZE,\n                maxWidth: ICON_SIZE,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    let iconName: string;\n\n                    switch (item.type) {\n                        case LinuxFileType.Link:\n                            iconName = getFileTypeIconNameFromExtensionOrType(undefined, FileIconType.linkedFolder);\n                            break;\n                        case LinuxFileType.Directory:\n                            iconName = getFileTypeIconNameFromExtensionOrType(undefined, FileIconType.folder);\n                            break;\n                        case LinuxFileType.File:\n                            iconName = getFileTypeIconNameFromExtensionOrType(path.extname(item.name!), undefined);\n                            break;\n                        default:\n                            iconName = getFileTypeIconNameFromExtensionOrType('txt', undefined);\n                            break;\n                    }\n\n                    return <Icon imageProps={{ crossOrigin: '', src: `${FILE_TYPE_ICONS_BASE_URL}${ICON_SIZE}/${iconName}.svg` }} style={{ width: ICON_SIZE, height: ICON_SIZE }} />;\n                }\n            },\n            {\n                key: 'name',\n                name: 'Name',\n                minWidth: 0,\n                isRowHeader: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    return (\n                        <span className={classNames.name} data-selection-invoke>\n                            {item.name}\n                        </span>\n                    );\n                }\n            },\n            {\n                key: 'permission',\n                name: 'Permission',\n                minWidth: 0,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    return `${(item.mode >> 6 & 0b100).toString(8)}${(item.mode >> 3 & 0b100).toString(8)}${(item.mode & 0b100).toString(8)}`;\n                }\n            },\n            {\n                key: 'size',\n                name: 'Size',\n                minWidth: 0,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    if (item.type === LinuxFileType.File) {\n                        return formatSize(item.size);\n                    }\n                    return '';\n                }\n            },\n            {\n                key: 'mtime',\n                name: 'Last Modified Time',\n                minWidth: 150,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    return new Date(item.mtime * 1000).toLocaleString();\n                },\n            }\n        ];\n\n        for (const item of list) {\n            item.onColumnClick = (e, column) => {\n                if (this.sortKey === column.key) {\n                    runInAction(() => this.sortDescending = !this.sortDescending);\n                } else {\n                    runInAction(() => {\n                        this.sortKey = column.key as keyof ListItem;\n                        this.sortDescending = false;\n                    });\n                }\n            };\n\n            if (item.key === this.sortKey) {\n                item.isSorted = true;\n                item.isSortedDescending = this.sortDescending;\n            }\n        }\n\n        return list;\n    }\n\n    constructor() {\n        makeAutoObservable(this, {\n            initial: false,\n            items: observable.shallow,\n            pushPathQuery: false,\n            changeDirectory: action.bound,\n            loadFiles: false,\n        });\n\n        autorun(() => {\n            if (globalState.device) {\n                if (this.initial && this.visible) {\n                    this.initial = false;\n                    this.loadFiles();\n                }\n            } else {\n                this.initial = true;\n            }\n        });\n    }\n\n    pushPathQuery = (path: string) => {\n        Router.push({ query: { ...Router.query, path } });\n    };\n\n    changeDirectory(path: string) {\n        if (this.path === path) {\n            return;\n        }\n\n        this.path = path;\n\n        if (!globalState.device) {\n            return;\n        }\n\n        this.loadFiles();\n    }\n\n    loadFiles = asyncEffect(async (signal) => {\n        const currentPath = this.path;\n\n        runInAction(() => this.items = []);\n\n        if (!globalState.device) {\n            return;\n        }\n\n        runInAction(() => this.loading = true);\n\n        const sync = await globalState.device.sync();\n\n        const items: ListItem[] = [];\n        const linkItems: AdbSyncEntryResponse[] = [];\n        const intervalId = setInterval(() => {\n            if (signal.aborted) {\n                return;\n            }\n\n            runInAction(() => this.items = items.slice());\n        }, 1000);\n\n        try {\n            for await (const entry of sync.opendir(currentPath)) {\n                if (signal.aborted) {\n                    return;\n                }\n\n                if (entry.name === '.' || entry.name === '..') {\n                    continue;\n                }\n\n                if (entry.type === LinuxFileType.Link) {\n                    linkItems.push(entry);\n                } else {\n                    items.push(toListItem(entry));\n                }\n            }\n\n            for (const entry of linkItems) {\n                if (signal.aborted) {\n                    return;\n                }\n\n                if (!await sync.isDirectory(path.resolve(currentPath, entry.name!))) {\n                    entry.mode = (LinuxFileType.File << 12) | entry.permission;\n                    entry.size = 0;\n                }\n\n                items.push(toListItem(entry));\n            }\n\n            if (signal.aborted) {\n                return;\n            }\n\n            runInAction(() => this.items = items);\n        } finally {\n            if (!signal.aborted) {\n                runInAction(() => this.loading = false);\n            }\n            clearInterval(intervalId);\n            sync.dispose();\n        }\n    });\n\n    upload = async (file: File) => {\n        const sync = await globalState.device!.sync();\n        try {\n            const itemPath = path.resolve(this.path!, file.name);\n            runInAction(() => {\n                this.uploading = true;\n                this.uploadPath = file.name;\n                this.uploadedSize = 0;\n                this.uploadTotalSize = file.size;\n                this.debouncedUploadedSize = 0;\n                this.uploadSpeed = 0;\n            });\n\n            const intervalId = setInterval(action(() => {\n                this.uploadSpeed = this.uploadedSize - this.debouncedUploadedSize;\n                this.debouncedUploadedSize = this.uploadedSize;\n            }), 1000);\n\n            try {\n                await sync.write(\n                    itemPath,\n                    chunkFile(file, AdbSyncMaxPacketSize),\n                    (LinuxFileType.File << 12) | 0o666,\n                    file.lastModified / 1000,\n                    action((uploaded) => {\n                        this.uploadedSize = uploaded;\n                    }),\n                );\n                runInAction(() => {\n                    this.uploadSpeed = this.uploadedSize - this.debouncedUploadedSize;\n                    this.debouncedUploadedSize = this.uploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n        } catch (e) {\n            globalState.showErrorDialog(e instanceof Error ? e.message : `${e}`);\n        } finally {\n            sync.dispose();\n            this.loadFiles();\n            runInAction(() => {\n                this.uploading = false;\n            });\n        }\n    };\n}\n\nconst state = new FileManagerState();\n\nconst UploadDialog = observer(() => {\n    return (\n        <Dialog\n            hidden={!state.uploading}\n            dialogContentProps={{\n                title: 'Uploading...',\n                subText: state.uploadPath\n            }}\n        >\n            <ProgressIndicator\n                description={formatSpeed(state.debouncedUploadedSize, state.uploadTotalSize, state.uploadSpeed)}\n                percentComplete={state.uploadedSize / state.uploadTotalSize}\n            />\n        </Dialog>\n    );\n});\n\nconst FileManager: NextPage = (): JSX.Element | null => {\n    useEffect(() => {\n        runInAction(() => {\n            state.visible = true;\n        });\n\n        return () => {\n            runInAction(() => {\n                state.visible = false;\n            });\n        };\n    });\n\n    const router = useRouter();\n    useEffect(() => {\n        let pathQuery = router.query.path;\n        if (!pathQuery) {\n            router.replace({ query: { ...router.query, path: state.path } });\n            return;\n        }\n\n        if (Array.isArray(pathQuery)) {\n            pathQuery = pathQuery[0];\n        }\n\n        state.changeDirectory(pathQuery);\n    }, [router]);\n\n    const [previewUrl, setPreviewUrl] = useState<string | undefined>();\n    const previewImage = useCallback(async (path: string) => {\n        const sync = await globalState.device!.sync();\n        try {\n            const readableStream = createReadableStreamFromBufferIterator(sync.read(path));\n            const response = new Response(readableStream);\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            setPreviewUrl(url);\n        } finally {\n            sync.dispose();\n        }\n    }, []);\n    const hidePreview = useCallback(() => {\n        setPreviewUrl(undefined);\n    }, []);\n\n    const handleItemInvoked = useCallback((item: AdbSyncEntryResponse) => {\n        switch (item.type) {\n            case LinuxFileType.Link:\n            case LinuxFileType.Directory:\n                state.pushPathQuery(path.resolve(state.path!, item.name!));\n                break;\n            case LinuxFileType.File:\n                switch (path.extname(item.name!)) {\n                    case '.jpg':\n                    case '.png':\n                    case '.svg':\n                    case '.gif':\n                        previewImage(path.resolve(state.path!, item.name!));\n                        break;\n                }\n                break;\n        }\n    }, [previewImage]);\n\n    const selection = useConst(() => new Selection({\n        onSelectionChanged() {\n            const selectedItems = selection.getSelection() as ListItem[];\n            runInAction(() => {\n                state.selectedItems = selectedItems;\n            });\n        },\n    }));\n\n    const showContextMenu = useCallback((\n        item?: AdbSyncEntryResponse,\n        index?: number,\n        e?: Event\n    ) => {\n        if (!e) {\n            return false;\n        }\n\n        if (state.menuItems.length) {\n            runInAction(() => {\n                state.contextMenuTarget = e as MouseEvent;\n            });\n        }\n\n        return false;\n    }, []);\n    const hideContextMenu = useCallback(() => {\n        runInAction(() => state.contextMenuTarget = undefined);\n    }, []);\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>File Manager - WebADB</title>\n            </Head>\n\n            <CommandBar items={state.menuItems} />\n\n            <StackItem grow styles={{\n                root: {\n                    margin: '-8px -16px -16px -16px',\n                    padding: '8px 16px 16px 16px',\n                    minHeight: 0,\n                }\n            }}>\n                <MarqueeSelection selection={selection}>\n                    <Breadcrumb items={state.breadcrumbItems} />\n\n                    <ShimmeredDetailsList\n                        items={state.sortedList}\n                        columns={state.columns}\n                        setKey={state.path}\n                        selection={selection}\n                        layoutMode={DetailsListLayoutMode.justified}\n                        enableShimmer={state.loading && state.items.length === 0}\n                        onItemInvoked={handleItemInvoked}\n                        onItemContextMenu={showContextMenu}\n                        onRenderDetailsHeader={renderDetailsHeader}\n                        usePageCache\n                        useReducedRowRenderer\n                    />\n                </MarqueeSelection>\n\n                {previewUrl && (\n                    <Layer>\n                        <Overlay onClick={hidePreview}>\n                            <div style={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                                {/* eslint-disable-next-line @next/next/no-img-element */}\n                                <img src={previewUrl} alt=\"\" style={{ maxWidth: '100%', maxHeight: '100%' }} />\n                            </div>\n                        </Overlay>\n                    </Layer>\n                )}\n\n                <NoSsr>\n                    <ContextualMenu\n                        items={state.menuItems}\n                        hidden={!state.contextMenuTarget}\n                        directionalHint={DirectionalHint.bottomLeftEdge}\n                        target={state.contextMenuTarget}\n                        onDismiss={hideContextMenu}\n                        contextualMenuItemAs={props => <ContextualMenuItem {...props} hasIcons={false} />}\n                    />\n                </NoSsr>\n\n                <UploadDialog />\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(FileManager);\n"],"names":["window","__NEXT_P","push","StreamSaver","toListItem","item","key","name","require","mitm","Router","classNames","mergeStyleSets","cursor","textDecoration","renderDetailsHeader","props","defaultRender","styles","concatStyleSets","root","paddingTop","createReadableStreamFromBufferIterator","iterator","ReadableStream","pull","controller","desiredSize","written","result","next","done","close","enqueue","Uint8Array","value","byteLength","compareCaseInsensitively","a","b","toLocaleLowerCase","localeCompare","FileManagerState","initial","visible","path","loading","items","sortKey","sortDescending","uploading","uploadPath","undefined","uploadedSize","uploadTotalSize","debouncedUploadedSize","uploadSpeed","selectedItems","contextMenuTarget","pushPathQuery","query","loadFiles","asyncEffect","signal","currentPath","sync","linkItems","intervalId","entry","runInAction","globalState","setInterval","aborted","slice","opendir","type","LinuxFileType","isDirectory","mode","permission","size","clearInterval","dispose","upload","file","itemPath","action","write","chunkFile","AdbSyncMaxPacketSize","lastModified","uploaded","e","Error","message","makeAutoObservable","this","observable","changeDirectory","autorun","breadcrumbItems","part","list","split","filter","Boolean","map","segment","text","onClick","unshift","length","isCurrentItem","menuItems","iconProps","iconName","Icons","style","height","fontSize","lineHeight","disabled","files","i","pickFile","multiple","readableStream","writeableStream","read","createWriteStream","pipeTo","output","sortedList","sort","aIsFile","bIsFile","aSortKey","bSortKey","columns","isIconOnly","minWidth","maxWidth","isCollapsible","onRender","getFileTypeIconNameFromExtensionOrType","FileIconType","Icon","imageProps","crossOrigin","src","ICON_SIZE","FILE_TYPE_ICONS_BASE_URL","width","isRowHeader","span","className","data-selection-invoke","toString","formatSize","Date","mtime","toLocaleString","onColumnClick","column","isSorted","isSortedDescending","state","UploadDialog","observer","Dialog","hidden","dialogContentProps","title","subText","ProgressIndicator","description","formatSpeed","percentComplete","useEffect","router","useRouter","pathQuery","Array","isArray","replace","useState","previewUrl","setPreviewUrl","previewImage","useCallback","response","blob","url","Response","URL","createObjectURL","hidePreview","handleItemInvoked","selection","useConst","Selection","onSelectionChanged","getSelection","showContextMenu","index","hideContextMenu","Stack","RouteStackProps","Head","CommandBar","StackItem","grow","margin","padding","minHeight","MarqueeSelection","Breadcrumb","ShimmeredDetailsList","setKey","layoutMode","DetailsListLayoutMode","enableShimmer","onItemInvoked","onItemContextMenu","onRenderDetailsHeader","usePageCache","useReducedRowRenderer","Layer","Overlay","div","display","alignItems","justifyContent","img","alt","maxHeight","NoSsr","ContextualMenu","directionalHint","DirectionalHint","target","onDismiss","contextualMenuItemAs","ContextualMenuItem","hasIcons"],"sourceRoot":""}