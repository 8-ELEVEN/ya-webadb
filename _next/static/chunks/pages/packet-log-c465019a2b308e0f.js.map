{"version":3,"file":"static/chunks/pages/packet-log-c465019a2b308e0f.js","mappings":"qFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,cACA,WACE,OAAO,EAAQ,U,4ECOE,E,2IAXzB,gB,ukCAWA,IAAMC,GACF,EADqB,EAOxB,GANIC,EAAAA,GAAAA,KAAkB,QACnB,EAFqB,EAEpBA,EAAAA,GAAAA,MAAmB,QACpB,EAHqB,EAGpBA,EAAAA,GAAAA,QAAqB,QACtB,EAJqB,EAIpBA,EAAAA,GAAAA,GAAgB,QACjB,EALqB,EAKpBA,EAAAA,GAAAA,KAAkB,QACnB,EANqB,EAMpBA,EAAAA,GAAAA,MAAmB,QANC,GAenBC,EAAQ,IAAI,W,kCAadC,KAAAA,oBAA4CC,GAGxCC,EAAAA,EAAAA,IACIC,KACA,CACIH,eAAgBI,EAAAA,GAAAA,OAIxBC,EAAAA,EAAAA,KAAQ,WAC4B,IAA5BC,EAAAA,EAAAA,KAAAA,SACA,EAAKN,oBAAiBC,M,0BAxB9BM,IAAAA,kB,IAAJ,WACI,MAAO,CACH,CACIC,IAAK,QACLC,UAAWH,EAAAA,EAAAA,OACXI,UAAW,CAAEC,SAAUC,EAAAA,GAAAA,QACvBC,KAAM,QACNC,QAAS,W,OAAMR,EAAAA,EAAAA,mB,6BARb,IA+BZS,GAAaC,EAAAA,EAAAA,GAAW,CAC1BC,KAAM,CACFC,OAAQ,GAEZC,KAAM,CACFD,OAAQ,QAEZE,OAAQ,CACJC,UAAW,SACXC,WAAY,GAAe,OA1Cf,GA0Ce,OAE/BC,IAAK,CACD,UAAW,CACPC,gBAAiB,YAGzBC,SAAU,CACND,gBAAiB,WAErBE,KAAM,GACFC,WAAY,YACZC,aAAc,WACdC,WAAY,SACZP,WAAYQ,OACZC,OAAQ,WACLC,EAAAA,GAAAA,SAAoB,WAE3BC,UAAW,KACJD,EAAAA,GAAAA,QAAmB,QACnBA,EAAAA,GAAAA,UAAqB,MAAO,QAAS,yBAI1CE,EAAoB,CACtB,CACIC,MAAO,YACPC,MAAO,IACPC,eAAeC,EAAAA,EAAAA,IAAgB,YAAhBA,EAA6B,Y,IAAGC,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAaC,EAAI,KAA5BF,YAAWC,aAChDE,EAAOpC,EAAAA,EAAAA,KAAiBkC,GAExBG,EAAU5B,IAEhB,OACI,SAAC6B,MAAG,GACAL,WAAWM,EAAAA,EAAAA,GAAaN,EAAWI,EAAQjB,OACvCe,EAAI,C,SAEPC,EAAKI,iBAKtB,CACIX,MAAO,UACPC,MAAO,IACPC,eAAeC,EAAAA,EAAAA,IAAgB,UAAhBA,EAA2B,Y,IAK9BzC,EALiC0C,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAaC,EAAI,KAA5BF,YAAWC,aAC9CE,EAAOpC,EAAAA,EAAAA,KAAiBkC,GAEzBE,EAAKK,gBACNL,EAAKK,cAC2C,QAA5ClD,EAAAA,EAAiB6C,EAAKM,gBAAsB,IAA5CnD,EAAAA,GACAoD,EAAAA,EAAAA,IAAW,IAAIC,YAAY,CAACR,EAAKM,YAGzC,IAAML,EAAU5B,IAEhB,OACI,SAAC6B,MAAG,GACAL,WAAWM,EAAAA,EAAAA,GAAaN,EAAWI,EAAQjB,OACvCe,EAAI,C,SAEPC,EAAKK,qBAKtB,CACIZ,MAAO,OACPC,MAAO,IACPC,eAAeC,EAAAA,EAAAA,IAAgB,UAAhBA,EAA2B,Y,IAAGC,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAaC,EAAI,KAA5BF,YAAWC,aAC9CE,EAAOpC,EAAAA,EAAAA,KAAiBkC,GAEzBE,EAAKS,aACNT,EAAKS,WAAaT,EAAKU,KAAKC,SAAS,IAAIC,SAAS,EAAG,MAGzD,IAAMX,EAAU5B,IAEhB,OACI,SAAC6B,MAAG,GACAL,WAAWM,EAAAA,EAAAA,GAAaN,EAAWI,EAAQjB,OACvCe,EAAI,C,SAEPC,EAAKS,kBAKtB,CACIhB,MAAO,OACPC,MAAO,IACPC,eAAeC,EAAAA,EAAAA,IAAgB,UAAhBA,EAA2B,Y,IAAGC,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAaC,EAAI,KAA5BF,YAAWC,aAC9CE,EAAOpC,EAAAA,EAAAA,KAAiBkC,GAEzBE,EAAKa,aACNb,EAAKa,WAAab,EAAKc,KAAKH,SAAS,IAAIC,SAAS,EAAG,MAGzD,IAAMX,EAAU5B,IAEhB,OACI,SAAC6B,MAAG,GACAL,WAAWM,EAAAA,EAAAA,GAAaN,EAAWI,EAAQjB,OACvCe,EAAI,C,SAEPC,EAAKa,kBAKtB,CACIpB,MAAO,UACPC,MAAO,IACPqB,SAAU,EACVpB,eAAeC,EAAAA,EAAAA,IAAgB,UAAhBA,EAA2B,Y,IAAGC,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAaC,EAAI,KAA5BF,YAAWC,aAC9CE,EAAOpC,EAAAA,EAAAA,KAAiBkC,GAEzBE,EAAKgB,gBACNhB,EAAKgB,eAAgBC,EAAAA,EAAAA,IAAOjB,EAAKkB,QAAQC,SAAS,EAAG,OAGzD,IAAMlB,EAAU5B,IAEhB,OACI,SAAC6B,MAAG,GACAL,WAAWM,EAAAA,EAAAA,GAAaN,EAAWI,EAAQjB,OACvCe,EAAI,C,SAEPC,EAAKgB,sBAOpBI,GAASxB,EAAAA,EAAAA,IAAgB,SAAhBA,EAA0B,Y,IACrCC,EAAS,EAATA,UACAwB,EAAW,EAAXA,YACGtB,EAAI,KAFPF,YACAwB,gBAGMpB,EAAU5B,IAEhB,OACI,SAAC6B,MAAG,GAACL,WAAWM,EAAAA,EAAAA,GAAaN,EAAWI,EAAQvB,SAAaqB,EAAI,C,SAC5DP,EAAQ6B,GAAa5B,YAK5B6B,GAAMC,EAAAA,EAAAA,KAAS,SAAa,G,IAC9B1B,EAD8B,EAC9BA,UACAC,EAF8B,EAE9BA,SACGC,EAAI,EAHuB,EAInB,CAHXF,YACAC,aAGMG,EAAU5B,IAEVmD,GAAcC,EAAAA,EAAAA,KAAkB,YAClCC,EAAAA,EAAAA,IAAY,WACRrE,EAAMC,eAAiBM,EAAAA,EAAAA,KAAiBkC,SAIhD,OACI,SAACI,MAAG,GACAL,WAAWM,EAAAA,EAAAA,GACPN,EACAI,EAAQpB,IACRxB,EAAMC,iBAAmBM,EAAAA,EAAAA,KAAiBkC,IAAaG,EAAQlB,UAEnEX,QAASoD,GACLzB,OAoChB,WAAewB,EAAAA,EAAAA,KA/Ba,WACxB,IAAMtB,EAAU5B,IAEhB,OACI,UAACsD,EAAAA,EAAK,KAAKC,EAAAA,GAAe,CAAEC,OAAQ,G,WAChC,SAACC,EAAAA,QAAI,C,UACD,SAACrC,QAAK,C,SAAC,wCAGX,SAACsC,EAAAA,GAAU,CAACC,MAAO3E,EAAMQ,mBAEzB,SAACoE,EAAAA,EAAS,CAACpC,UAAWI,EAAQ1B,KAAMA,MAAI,E,UACpC,SAAC2D,EAAAA,GAAI,CACDrC,UAAWI,EAAQxB,KACnB0D,SAAUvE,EAAAA,EAAAA,KAAAA,OACVwE,UAzOA,GA0OA5C,QAASA,EACT6C,gBAAiBjB,EACjBkB,aAAchB,MAIrBjE,EAAMC,gBAAkBD,EAAMC,eAAe4D,QAAQqB,OAAS,IAC3D,SAACN,EAAAA,EAAS,CAACpC,UAAWI,EAAQ1B,KAAMA,MAAI,E,UACpC,SAACiE,EAAAA,GAAS,CAAC3C,UAAWI,EAAQV,UAAWkD,KAAMpF,EAAMC,eAAe4D,mB","sources":["webpack://_N_E/?c2aa","webpack://_N_E/./src/pages/packet-log.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/packet-log\",\n      function () {\n        return require(\"private-next-pages/packet-log.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/packet-log\"])\n      });\n    }\n  ","import { ICommandBarItemProps, Stack, StackItem } from \"@fluentui/react\";\r\nimport { makeStyles, mergeClasses, shorthands } from \"@griffel/react\";\r\nimport { AdbCommand, decodeUtf8 } from \"@yume-chan/adb\";\r\nimport { autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { NextPage } from \"next\";\r\nimport Head from \"next/head\";\r\nimport { CommandBar, Grid, GridCellProps, GridColumn, GridHeaderProps, GridRowProps, HexViewer, toText } from \"../components\";\r\nimport { GlobalState, PacketLogItem } from \"../state\";\r\nimport { Icons, RouteStackProps, useStableCallback, withDisplayName } from \"../utils\";\r\n\r\nconst ADB_COMMAND_NAME = {\r\n    [AdbCommand.Auth]: 'AUTH',\r\n    [AdbCommand.Close]: 'CLSE',\r\n    [AdbCommand.Connect]: 'CNXN',\r\n    [AdbCommand.OK]: 'OKAY',\r\n    [AdbCommand.Open]: 'OPEN',\r\n    [AdbCommand.Write]: 'WRTE',\r\n};\r\n\r\ninterface Column extends GridColumn {\r\n    title: string;\r\n}\r\n\r\nconst LINE_HEIGHT = 32;\r\n\r\nconst state = new class {\r\n    get commandBarItems(): ICommandBarItemProps[] {\r\n        return [\r\n            {\r\n                key: 'clear',\r\n                disabled: !GlobalState.device,\r\n                iconProps: { iconName: Icons.Delete },\r\n                text: 'Clear',\r\n                onClick: () => GlobalState.clearLog(),\r\n            }\r\n        ];\r\n    }\r\n\r\n    selectedPacket: PacketLogItem | undefined = undefined;\r\n\r\n    constructor() {\r\n        makeAutoObservable(\r\n            this,\r\n            {\r\n                selectedPacket: observable.ref,\r\n            }\r\n        );\r\n\r\n        autorun(() => {\r\n            if (GlobalState.logs.length === 0) {\r\n                this.selectedPacket = undefined;\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nconst useClasses = makeStyles({\r\n    grow: {\r\n        height: 0,\r\n    },\r\n    grid: {\r\n        height: '100%',\r\n    },\r\n    header: {\r\n        textAlign: 'center',\r\n        lineHeight: `${LINE_HEIGHT}px`,\r\n    },\r\n    row: {\r\n        '&:hover': {\r\n            backgroundColor: '#f3f2f1',\r\n        },\r\n    },\r\n    selected: {\r\n        backgroundColor: '#edebe9',\r\n    },\r\n    code: {\r\n        fontFamily: 'monospace',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n        lineHeight: LINE_HEIGHT + 'px',\r\n        cursor: 'default',\r\n        ...shorthands.overflow('hidden'),\r\n    },\r\n    hexViewer: {\r\n        ...shorthands.padding('12px'),\r\n        ...shorthands.borderTop('1px', 'solid', 'rgb(243, 242, 241)'),\r\n    },\r\n});\r\n\r\nconst columns: Column[] = [\r\n    {\r\n        title: 'Direction',\r\n        width: 100,\r\n        CellComponent: withDisplayName('Direction')(({ className, rowIndex, ...rest }: GridCellProps) => {\r\n            const item = GlobalState.logs[rowIndex];\r\n\r\n            const classes = useClasses();\r\n\r\n            return (\r\n                <div\r\n                    className={mergeClasses(className, classes.code)}\r\n                    {...rest}\r\n                >\r\n                    {item.direction}\r\n                </div>\r\n            );\r\n        }),\r\n    },\r\n    {\r\n        title: 'Command',\r\n        width: 100,\r\n        CellComponent: withDisplayName('Command')(({ className, rowIndex, ...rest }: GridCellProps) => {\r\n            const item = GlobalState.logs[rowIndex];\r\n\r\n            if (!item.commandString) {\r\n                item.commandString =\r\n                    ADB_COMMAND_NAME[item.command as AdbCommand] ??\r\n                    decodeUtf8(new Uint32Array([item.command]));\r\n            }\r\n\r\n            const classes = useClasses();\r\n\r\n            return (\r\n                <div\r\n                    className={mergeClasses(className, classes.code)}\r\n                    {...rest}\r\n                >\r\n                    {item.commandString}\r\n                </div>\r\n            );\r\n        }),\r\n    },\r\n    {\r\n        title: 'Arg0',\r\n        width: 100,\r\n        CellComponent: withDisplayName('Command')(({ className, rowIndex, ...rest }: GridCellProps) => {\r\n            const item = GlobalState.logs[rowIndex];\r\n\r\n            if (!item.arg0String) {\r\n                item.arg0String = item.arg0.toString(16).padStart(8, '0');\r\n            }\r\n\r\n            const classes = useClasses();\r\n\r\n            return (\r\n                <div\r\n                    className={mergeClasses(className, classes.code)}\r\n                    {...rest}\r\n                >\r\n                    {item.arg0String}\r\n                </div>\r\n            );\r\n        }),\r\n    },\r\n    {\r\n        title: 'Arg1',\r\n        width: 100,\r\n        CellComponent: withDisplayName('Command')(({ className, rowIndex, ...rest }: GridCellProps) => {\r\n            const item = GlobalState.logs[rowIndex];\r\n\r\n            if (!item.arg1String) {\r\n                item.arg1String = item.arg1.toString(16).padStart(8, '0');\r\n            }\r\n\r\n            const classes = useClasses();\r\n\r\n            return (\r\n                <div\r\n                    className={mergeClasses(className, classes.code)}\r\n                    {...rest}\r\n                >\r\n                    {item.arg1String}\r\n                </div>\r\n            );\r\n        }),\r\n    },\r\n    {\r\n        title: 'Payload',\r\n        width: 200,\r\n        flexGrow: 1,\r\n        CellComponent: withDisplayName('Command')(({ className, rowIndex, ...rest }: GridCellProps) => {\r\n            const item = GlobalState.logs[rowIndex];\r\n\r\n            if (!item.payloadString) {\r\n                item.payloadString = toText(item.payload.subarray(0, 100));\r\n            }\r\n\r\n            const classes = useClasses();\r\n\r\n            return (\r\n                <div\r\n                    className={mergeClasses(className, classes.code)}\r\n                    {...rest}\r\n                >\r\n                    {item.payloadString}\r\n                </div>\r\n            );\r\n        }),\r\n    },\r\n];\r\n\r\nconst Header = withDisplayName('Header')(({\r\n    className,\r\n    columnIndex,\r\n    ...rest\r\n}: GridHeaderProps) => {\r\n    const classes = useClasses();\r\n\r\n    return (\r\n        <div className={mergeClasses(className, classes.header)} {...rest}>\r\n            {columns[columnIndex].title}\r\n        </div>\r\n    );\r\n});\r\n\r\nconst Row = observer(function Row({\r\n    className,\r\n    rowIndex,\r\n    ...rest\r\n}: GridRowProps) {\r\n    const classes = useClasses();\r\n\r\n    const handleClick = useStableCallback(() => {\r\n        runInAction(() => {\r\n            state.selectedPacket = GlobalState.logs[rowIndex];\r\n        });\r\n    });\r\n\r\n    return (\r\n        <div\r\n            className={mergeClasses(\r\n                className,\r\n                classes.row,\r\n                state.selectedPacket === GlobalState.logs[rowIndex] && classes.selected\r\n            )}\r\n            onClick={handleClick}\r\n            {...rest}\r\n        />\r\n    );\r\n});\r\n\r\nconst PacketLog: NextPage = () => {\r\n    const classes = useClasses();\r\n\r\n    return (\r\n        <Stack {...RouteStackProps} tokens={{}}>\r\n            <Head>\r\n                <title>Packet Log - Android Web Toolbox</title>\r\n            </Head>\r\n\r\n            <CommandBar items={state.commandBarItems} />\r\n\r\n            <StackItem className={classes.grow} grow>\r\n                <Grid\r\n                    className={classes.grid}\r\n                    rowCount={GlobalState.logs.length}\r\n                    rowHeight={LINE_HEIGHT}\r\n                    columns={columns}\r\n                    HeaderComponent={Header}\r\n                    RowComponent={Row}\r\n                />\r\n            </StackItem>\r\n\r\n            {state.selectedPacket && state.selectedPacket.payload.length > 0 && (\r\n                <StackItem className={classes.grow} grow>\r\n                    <HexViewer className={classes.hexViewer} data={state.selectedPacket.payload} />\r\n                </StackItem>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default observer(PacketLog);\r\n"],"names":["window","__NEXT_P","push","ADB_COMMAND_NAME","AdbCommand","state","selectedPacket","undefined","makeAutoObservable","this","observable","autorun","GlobalState","commandBarItems","key","disabled","iconProps","iconName","Icons","text","onClick","useClasses","makeStyles","grow","height","grid","header","textAlign","lineHeight","row","backgroundColor","selected","code","fontFamily","textOverflow","whiteSpace","LINE_HEIGHT","cursor","shorthands","hexViewer","columns","title","width","CellComponent","withDisplayName","className","rowIndex","rest","item","classes","div","mergeClasses","direction","commandString","command","decodeUtf8","Uint32Array","arg0String","arg0","toString","padStart","arg1String","arg1","flexGrow","payloadString","toText","payload","subarray","Header","columnIndex","Row","observer","handleClick","useStableCallback","runInAction","Stack","RouteStackProps","tokens","Head","CommandBar","items","StackItem","Grid","rowCount","rowHeight","HeaderComponent","RowComponent","length","HexViewer","data"],"sourceRoot":""}