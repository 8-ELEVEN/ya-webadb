{"version":3,"file":"static/chunks/pages/packet-log-846a1738edf574fb.js","mappings":"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","sources":["webpack://_N_E/?0b91","webpack://_N_E/./src/pages/packet-log.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/packet-log\",\n      function () {\n        return require(\"private-next-pages/packet-log.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/packet-log\"])\n      });\n    }\n  ","import { ICommandBarItemProps, Stack, StackItem } from \"@fluentui/react\";\nimport { makeStyles, mergeClasses, shorthands } from \"@griffel/react\";\nimport { AdbCommand, decodeUtf8 } from \"@yume-chan/adb\";\nimport { autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { useMemo } from \"react\";\nimport { CommandBar, Grid, GridCellProps, GridColumn, GridHeaderProps, GridRowProps, HexViewer, toText } from \"../components\";\nimport { globalState, PacketLogItem } from \"../state\";\nimport { Icons, RouteStackProps, useCallbackRef, withDisplayName } from \"../utils\";\n\nconst ADB_COMMAND_NAME = {\n    [AdbCommand.Auth]: 'AUTH',\n    [AdbCommand.Close]: 'CLSE',\n    [AdbCommand.Connect]: 'CNXN',\n    [AdbCommand.OK]: 'OKAY',\n    [AdbCommand.Open]: 'OPEN',\n    [AdbCommand.Write]: 'WRTE',\n};\n\ninterface Column extends GridColumn {\n    title: string;\n}\n\nconst LINE_HEIGHT = 32;\n\nconst state = new class {\n    get commandBarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: 'clear',\n                disabled: !globalState.device,\n                iconProps: { iconName: Icons.Delete },\n                text: 'Clear',\n                onClick: () => globalState.clearLog(),\n            }\n        ];\n    }\n\n    selectedPacket: PacketLogItem | undefined = undefined;\n\n    constructor() {\n        makeAutoObservable(\n            this,\n            {\n                selectedPacket: observable.ref,\n            }\n        );\n\n        autorun(() => {\n            if (globalState.logs.length === 0) {\n                this.selectedPacket = undefined;\n            }\n        });\n    }\n};\n\nconst useClasses = makeStyles({\n    grow: {\n        height: 0,\n    },\n    grid: {\n        height: '100%',\n    },\n    header: {\n        textAlign: 'center',\n        lineHeight: `${LINE_HEIGHT}px`,\n    },\n    row: {\n        '&:hover': {\n            backgroundColor: '#f3f2f1',\n        },\n    },\n    selected: {\n        backgroundColor: '#edebe9',\n    },\n    code: {\n        fontFamily: 'monospace',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        lineHeight: LINE_HEIGHT + 'px',\n        cursor: 'default',\n        ...shorthands.overflow('hidden'),\n    },\n    hexViewer: {\n        ...shorthands.padding('12px'),\n        ...shorthands.borderTop('1px', 'solid', 'rgb(243, 242, 241)'),\n    },\n});\n\nconst PacketLog: NextPage = () => {\n    const classes = useClasses();\n\n    const columns: Column[] = useMemo(() => [\n        {\n            key: 'direction',\n            title: 'Direction',\n            width: 100,\n            CellComponent: withDisplayName('Direction')(({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = globalState.logs[rowIndex];\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.direction}\n                    </div>\n                );\n            }),\n        },\n        {\n            key: 'command',\n            title: 'Command',\n            width: 100,\n            CellComponent: withDisplayName('Command')(({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = globalState.logs[rowIndex];\n\n                if (!item.commandString) {\n                    item.commandString =\n                        ADB_COMMAND_NAME[item.command as AdbCommand] ??\n                        decodeUtf8(new Uint32Array([item.command]));\n                }\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.commandString}\n                    </div>\n                );\n            }),\n        },\n        {\n            key: 'arg0',\n            title: 'Arg0',\n            width: 100,\n            CellComponent: withDisplayName('Command')(({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = globalState.logs[rowIndex];\n\n                if (!item.arg0String) {\n                    item.arg0String = item.arg0.toString(16).padStart(8, '0');\n                }\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.arg0String}\n                    </div>\n                );\n            }),\n        },\n        {\n            key: 'arg1',\n            title: 'Arg1',\n            width: 100,\n            CellComponent: withDisplayName('Command')(({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = globalState.logs[rowIndex];\n\n                if (!item.arg1String) {\n                    item.arg1String = item.arg0.toString(16).padStart(8, '0');\n                }\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.arg1String}\n                    </div>\n                );\n            }),\n        },\n        {\n            key: 'payload',\n            title: 'Payload',\n            width: 200,\n            flexGrow: 1,\n            CellComponent: withDisplayName('Command')(({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = globalState.logs[rowIndex];\n\n                if (!item.payloadString) {\n                    item.payloadString = toText(item.payload.subarray(0, 100));\n                }\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.payloadString}\n                    </div>\n                );\n            }),\n        },\n    ], [classes.code]);\n\n    const Header = useMemo(\n        () => withDisplayName('Header')(({\n            className,\n            columnIndex,\n            ...rest\n        }: GridHeaderProps) => {\n            return (\n                <div className={mergeClasses(className, classes.header)} {...rest}>\n                    {columns[columnIndex].title}\n                </div>\n            );\n        }),\n        [classes.header, columns]\n    );\n\n    const Row = useMemo(\n        () => observer(function Row({\n            className,\n            rowIndex,\n            ...rest\n        }: GridRowProps) {\n            /* eslint-disable-next-line */\n            const handleClick = useCallbackRef(() => {\n                runInAction(() => {\n                    state.selectedPacket = globalState.logs[rowIndex];\n                });\n            });\n\n            return (\n                <div\n                    className={mergeClasses(\n                        className,\n                        classes.row,\n                        state.selectedPacket === globalState.logs[rowIndex] && classes.selected\n                    )}\n                    onClick={handleClick}\n                    {...rest}\n                />\n            );\n        }),\n        [classes]\n    );\n\n    return (\n        <Stack {...RouteStackProps} tokens={{}}>\n            <Head>\n                <title>Packet Log - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} />\n\n            <StackItem className={classes.grow} grow>\n                <Grid\n                    className={classes.grid}\n                    rowCount={globalState.logs.length}\n                    rowHeight={LINE_HEIGHT}\n                    columns={columns}\n                    HeaderComponent={Header}\n                    RowComponent={Row}\n                />\n            </StackItem>\n\n            {state.selectedPacket && state.selectedPacket.payload.length > 0 && (\n                <StackItem className={classes.grow} grow>\n                    <HexViewer className={classes.hexViewer} data={state.selectedPacket.payload} />\n                </StackItem>\n            )}\n        </Stack>\n    );\n};\n\nexport default observer(PacketLog);\n"],"names":["window","__NEXT_P","push","ADB_COMMAND_NAME","AdbCommand","state","selectedPacket","undefined","makeAutoObservable","this","observable","autorun","globalState","commandBarItems","key","disabled","iconProps","iconName","Icons","text","onClick","useClasses","makeStyles","grow","height","grid","header","textAlign","lineHeight","row","backgroundColor","selected","code","fontFamily","textOverflow","whiteSpace","LINE_HEIGHT","cursor","shorthands","hexViewer","observer","classes","columns","useMemo","title","width","CellComponent","withDisplayName","className","rowIndex","rest","item","div","mergeClasses","direction","commandString","command","decodeUtf8","Uint32Array","arg0String","arg0","toString","padStart","arg1String","flexGrow","payloadString","toText","payload","subarray","Header","columnIndex","Row","handleClick","useCallbackRef","runInAction","Stack","RouteStackProps","tokens","Head","CommandBar","items","StackItem","Grid","rowCount","rowHeight","HeaderComponent","RowComponent","length","HexViewer","data"],"sourceRoot":""}