{"version":3,"file":"static/chunks/pages/reverse-4bc54e45ef785d45.js","mappings":"mFACA,CAAAA,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,WACA,WACA,OAAeC,EAAQ,KACvB,EACA,4GCCA,IAAMC,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,EAAmB,CAC7BC,IAAK,EAAE,GAGXC,CAAAA,EAAAA,EAAAA,EAAAA,EAAS,IAAMC,EAAAA,CAAAA,CAAAA,MAAkB,CAAE,MAAMC,GAAU,CAC1CA,IAIL,MAAMA,EAAOC,OAAO,CAACC,MAAM,CAAC,YAAYC,KAAK,CAAC,IAAM,CAAE,GACtD,MAAMH,EAAOC,OAAO,CAACG,GAAG,CAAC,WAAY,WAAYC,IAC7CC,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,IAAM,CACdX,EAAME,GAAG,CAACJ,IAAI,CAAC,mBAAkCc,MAAA,CAAfF,EAAOG,OAAO,EACpD,GACAH,EAAOI,QAAQ,CAACC,MAAM,CAAC,IAAIC,EAAAA,EAAcA,CAAC,CACtCC,MAAOC,GAAS,CACZP,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,IAAM,CACdX,EAAME,GAAG,CAACJ,IAAI,CAAC,aAAgCqB,MAAAA,CAAnBT,EAAOG,OAAO,CAAC,MAAsBD,MAAA,CAAlBO,CAAAA,EAAAA,EAAAA,EAAAA,EAAWD,IAC9D,EACJ,CACJ,IAGO,KAEf,EAAG,CAAEE,gBAAiB,EAAK,GAE3B,IAAMC,EAA8B,IAE5B,GAAAC,EAAAC,GAAA,EAACC,MAAAA,UACIxB,EAAME,GAAG,CAACuB,GAAG,CAAC,CAACC,EAAMC,IAClB,GAAAL,EAAAC,GAAA,EAACC,MAAAA,UAAiBE,GAARC,KAM1BC,CAAAA,EAAA,QAAeC,CAAAA,EAAAA,EAAAA,EAAAA,EAASR","sources":["webpack://_N_E/?dc2b","webpack://_N_E/./src/pages/reverse.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/reverse\",\n      function () {\n        return require(\"private-next-pages/reverse.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/reverse\"])\n      });\n    }\n  ","import { decodeUtf8 } from \"@yume-chan/adb\";\nimport { WritableStream } from '@yume-chan/stream-extra';\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport { GlobalState } from \"../state\";\n\nconst state = makeAutoObservable({\n    log: [] as string[],\n});\n\nreaction(() => GlobalState.device, async device => {\n    if (!device) {\n        return;\n    }\n\n    await device.reverse.remove('tcp:3000').catch(() => { });\n    await device.reverse.add('tcp:3000', 'tcp:1234', socket => {\n        runInAction(() => {\n            state.log.push(`received stream ${socket.localId}`);\n        });\n        socket.readable.pipeTo(new WritableStream({\n            write: chunk => {\n                runInAction(() => {\n                    state.log.push(`data from ${socket.localId}: ${decodeUtf8(chunk)}`);\n                });\n            }\n        }));\n\n        // Return true to accept the connection.\n        return true;\n    });\n}, { fireImmediately: true });\n\nconst ReverseTesterPage: NextPage = () => {\n    return (\n        <div>\n            {state.log.map((line, index) => (\n                <div key={index}>{line}</div>\n            ))}\n        </div>\n    );\n};\n\nexport default observer(ReverseTesterPage);\n"],"names":["window","__NEXT_P","push","__webpack_require__","state","makeAutoObservable","log","reaction","GlobalState","device","reverse","remove","catch","add","socket","runInAction","concat","localId","readable","pipeTo","WritableStream","write","chunk","decodeUtf8","fireImmediately","ReverseTesterPage","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","map","line","index","__webpack_exports__","observer"],"sourceRoot":""}