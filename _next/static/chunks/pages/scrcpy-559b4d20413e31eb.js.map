{"version":3,"file":"static/chunks/pages/scrcpy-559b4d20413e31eb.js","mappings":"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","sources":["webpack://_N_E/?30bf","webpack://_N_E/../../libraries/scrcpy/esm/message.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.63.0_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Layer/LayerHost.js","webpack://_N_E/../../libraries/scrcpy/esm/client.js","webpack://_N_E/../../libraries/scrcpy/esm/codec.js","webpack://_N_E/../../libraries/scrcpy/esm/utils.js","webpack://_N_E/../../libraries/scrcpy/esm/connection.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/tinyh264/wrapper.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/tinyh264/index.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/web-codecs/index.js","webpack://_N_E/../../libraries/scrcpy/esm/options/common.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_16/sps.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_16/index.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_18.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_21.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_22.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_23.js","webpack://_N_E/../../libraries/scrcpy/esm/push-server.js","webpack://_N_E/../../libraries/scrcpy/bin/version.js","webpack://_N_E/./pages/scrcpy.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/scrcpy\",\n      function () {\n        return require(\"private-next-pages/scrcpy.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/scrcpy\"])\n      });\n    }\n  ","import Struct, { placeholder } from '@yume-chan/struct';\nexport var ScrcpyControlMessageType;\n(function (ScrcpyControlMessageType) {\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectKeycode\"] = 0] = \"InjectKeycode\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectText\"] = 1] = \"InjectText\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectTouch\"] = 2] = \"InjectTouch\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectScroll\"] = 3] = \"InjectScroll\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"BackOrScreenOn\"] = 4] = \"BackOrScreenOn\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"ExpandNotificationPanel\"] = 5] = \"ExpandNotificationPanel\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"CollapseNotificationPanel\"] = 6] = \"CollapseNotificationPanel\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"GetClipboard\"] = 7] = \"GetClipboard\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"SetClipboard\"] = 8] = \"SetClipboard\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"SetScreenPowerMode\"] = 9] = \"SetScreenPowerMode\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"RotateDevice\"] = 10] = \"RotateDevice\";\n})(ScrcpyControlMessageType || (ScrcpyControlMessageType = {}));\n// https://developer.android.com/reference/android/view/MotionEvent#constants_1\nexport var AndroidMotionEventAction;\n(function (AndroidMotionEventAction) {\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Down\"] = 0] = \"Down\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Up\"] = 1] = \"Up\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Move\"] = 2] = \"Move\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Cancel\"] = 3] = \"Cancel\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Outside\"] = 4] = \"Outside\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"PointerDown\"] = 5] = \"PointerDown\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"PointerUp\"] = 6] = \"PointerUp\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverMove\"] = 7] = \"HoverMove\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Scroll\"] = 8] = \"Scroll\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverEnter\"] = 9] = \"HoverEnter\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverExit\"] = 10] = \"HoverExit\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"ButtonPress\"] = 11] = \"ButtonPress\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"ButtonRelease\"] = 12] = \"ButtonRelease\";\n})(AndroidMotionEventAction || (AndroidMotionEventAction = {}));\nexport const ScrcpyInjectTouchControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectTouch)\n    .uint8('action', placeholder())\n    .uint64('pointerId')\n    .uint32('pointerX')\n    .uint32('pointerY')\n    .uint16('screenWidth')\n    .uint16('screenHeight')\n    .uint16('pressure')\n    .uint32('buttons');\nexport const ScrcpyInjectTextControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectText)\n    .uint32('length')\n    .string('text', { lengthField: 'length' });\nexport var AndroidKeyEventAction;\n(function (AndroidKeyEventAction) {\n    AndroidKeyEventAction[AndroidKeyEventAction[\"Down\"] = 0] = \"Down\";\n    AndroidKeyEventAction[AndroidKeyEventAction[\"Up\"] = 1] = \"Up\";\n})(AndroidKeyEventAction || (AndroidKeyEventAction = {}));\nexport var AndroidKeyCode;\n(function (AndroidKeyCode) {\n    AndroidKeyCode[AndroidKeyCode[\"Home\"] = 3] = \"Home\";\n    AndroidKeyCode[AndroidKeyCode[\"Back\"] = 4] = \"Back\";\n    AndroidKeyCode[AndroidKeyCode[\"A\"] = 29] = \"A\";\n    AndroidKeyCode[AndroidKeyCode[\"B\"] = 30] = \"B\";\n    AndroidKeyCode[AndroidKeyCode[\"C\"] = 31] = \"C\";\n    AndroidKeyCode[AndroidKeyCode[\"D\"] = 32] = \"D\";\n    AndroidKeyCode[AndroidKeyCode[\"E\"] = 33] = \"E\";\n    AndroidKeyCode[AndroidKeyCode[\"F\"] = 34] = \"F\";\n    AndroidKeyCode[AndroidKeyCode[\"G\"] = 35] = \"G\";\n    AndroidKeyCode[AndroidKeyCode[\"H\"] = 36] = \"H\";\n    AndroidKeyCode[AndroidKeyCode[\"I\"] = 37] = \"I\";\n    AndroidKeyCode[AndroidKeyCode[\"J\"] = 38] = \"J\";\n    AndroidKeyCode[AndroidKeyCode[\"K\"] = 39] = \"K\";\n    AndroidKeyCode[AndroidKeyCode[\"L\"] = 40] = \"L\";\n    AndroidKeyCode[AndroidKeyCode[\"M\"] = 41] = \"M\";\n    AndroidKeyCode[AndroidKeyCode[\"N\"] = 42] = \"N\";\n    AndroidKeyCode[AndroidKeyCode[\"O\"] = 43] = \"O\";\n    AndroidKeyCode[AndroidKeyCode[\"P\"] = 44] = \"P\";\n    AndroidKeyCode[AndroidKeyCode[\"Q\"] = 45] = \"Q\";\n    AndroidKeyCode[AndroidKeyCode[\"R\"] = 46] = \"R\";\n    AndroidKeyCode[AndroidKeyCode[\"S\"] = 47] = \"S\";\n    AndroidKeyCode[AndroidKeyCode[\"T\"] = 48] = \"T\";\n    AndroidKeyCode[AndroidKeyCode[\"U\"] = 49] = \"U\";\n    AndroidKeyCode[AndroidKeyCode[\"V\"] = 50] = \"V\";\n    AndroidKeyCode[AndroidKeyCode[\"W\"] = 51] = \"W\";\n    AndroidKeyCode[AndroidKeyCode[\"X\"] = 52] = \"X\";\n    AndroidKeyCode[AndroidKeyCode[\"Y\"] = 53] = \"Y\";\n    AndroidKeyCode[AndroidKeyCode[\"Z\"] = 54] = \"Z\";\n    AndroidKeyCode[AndroidKeyCode[\"Space\"] = 62] = \"Space\";\n    AndroidKeyCode[AndroidKeyCode[\"Delete\"] = 67] = \"Delete\";\n    AndroidKeyCode[AndroidKeyCode[\"AppSwitch\"] = 187] = \"AppSwitch\";\n})(AndroidKeyCode || (AndroidKeyCode = {}));\nexport const ScrcpyInjectKeyCodeControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectKeycode)\n    .uint8('action', placeholder())\n    .uint32('keyCode')\n    .uint32('repeat')\n    .uint32('metaState');\n//# sourceMappingURL=message.js.map","import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nexport var LayerHost = function (props) {\n    var className = props.className;\n    var layerHostId = React.useState(function () { return getId(); })[0];\n    var _a = props.id, hostId = _a === void 0 ? layerHostId : _a;\n    var layerHostRef = React.useRef({\n        hostId: hostId,\n        rootRef: React.useRef(null),\n        notifyLayersChanged: function () {\n            // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n        },\n    });\n    React.useImperativeHandle(props.componentRef, function () { return layerHostRef.current; });\n    React.useEffect(function () {\n        registerLayerHost(hostId, layerHostRef.current);\n        notifyHostChanged(hostId);\n        // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n    }, []);\n    useUnmount(function () {\n        unregisterLayerHost(hostId, layerHostRef.current);\n        notifyHostChanged(hostId);\n    });\n    return React.createElement(\"div\", __assign({}, props, { className: css('ms-LayerHost', className), ref: layerHostRef.current.rootRef }));\n};\n//# sourceMappingURL=LayerHost.js.map","import { __awaiter } from \"tslib\";\nimport { AdbBufferedStream, AdbNoneSubprocessProtocol, DecodeUtf8Stream, InspectStream, TransformStream, WritableStream } from '@yume-chan/adb';\nimport { EventEmitter } from '@yume-chan/event';\nimport Struct from '@yume-chan/struct';\nimport { AndroidMotionEventAction, ScrcpyControlMessageType, ScrcpyInjectKeyCodeControlMessage, ScrcpyInjectTextControlMessage, ScrcpyInjectTouchControlMessage } from './message.js';\nfunction* splitLines(text) {\n    let start = 0;\n    while (true) {\n        const index = text.indexOf('\\n', start);\n        if (index === -1) {\n            return;\n        }\n        const line = text.substring(start, index);\n        yield line;\n        start = index + 1;\n    }\n}\nconst ClipboardMessage = new Struct()\n    .uint32('length')\n    .string('content', { lengthField: 'length' });\nexport class ScrcpyClient {\n    constructor(adb, options, process, videoStream, controlStream) {\n        this.clipboardChangeEvent = new EventEmitter();\n        this.lastTouchMessage = 0;\n        this._adb = adb;\n        this.options = options;\n        this.process = process;\n        this._stdout = process.stdout\n            .pipeThrough(new DecodeUtf8Stream())\n            .pipeThrough(new TransformStream({\n            transform(chunk, controller) {\n                for (const line of splitLines(chunk)) {\n                    if (line === '') {\n                        continue;\n                    }\n                    controller.enqueue(line);\n                }\n            },\n        }));\n        this._videoStream = videoStream.readable\n            .pipeThrough(options.createVideoStreamTransformer())\n            .pipeThrough(new InspectStream(packet => {\n            if (packet.type === 'configuration') {\n                this._screenWidth = packet.data.croppedWidth;\n                this._screenHeight = packet.data.croppedHeight;\n            }\n        }));\n        if (controlStream) {\n            const buffered = new AdbBufferedStream(controlStream);\n            this._controlStreamWriter = controlStream.writable.getWriter();\n            (() => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    while (true) {\n                        const type = yield buffered.read(1);\n                        switch (type[0]) {\n                            case 0:\n                                const { content } = yield ClipboardMessage.deserialize(buffered);\n                                this.clipboardChangeEvent.fire(content);\n                                break;\n                            default:\n                                throw new Error('unknown control message type');\n                        }\n                    }\n                }\n                catch (_a) {\n                    // TODO: Scrcpy: handle error\n                }\n            }))();\n        }\n    }\n    static getEncoders(adb, path, version, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Provide an invalid encoder name\n            // So the server will return all available encoders\n            options.value.encoderName = '_';\n            // Disable control for faster connection in 1.22+\n            options.value.control = false;\n            // Scrcpy server will open connections, before initializing encoder\n            // Thus although an invalid encoder name is given, the start process will success\n            const client = yield ScrcpyClient.start(adb, path, version, options);\n            const encoderNameRegex = options.getOutputEncoderNameRegex();\n            const encoders = [];\n            yield client.stdout.pipeTo(new WritableStream({\n                write(line) {\n                    const match = line.match(encoderNameRegex);\n                    if (match) {\n                        encoders.push(match[1]);\n                    }\n                },\n            }));\n            return encoders;\n        });\n    }\n    static start(adb, path, version, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const connection = options.createConnection(adb);\n            let process;\n            try {\n                yield connection.initialize();\n                process = yield adb.subprocess.spawn([\n                    // cspell: disable-next-line\n                    `CLASSPATH=${path}`,\n                    'app_process',\n                    /* unused */ '/',\n                    'com.genymobile.scrcpy.Server',\n                    version,\n                    ...options.formatServerArguments(),\n                ], {\n                    // Scrcpy server doesn't split stdout and stderr,\n                    // so disable Shell Protocol to simplify processing\n                    protocols: [AdbNoneSubprocessProtocol],\n                });\n                const result = yield Promise.race([\n                    process.exit,\n                    connection.getStreams(),\n                ]);\n                if (typeof result === 'number') {\n                    throw new Error('scrcpy server exited prematurely');\n                }\n                const [videoStream, controlStream] = result;\n                return new ScrcpyClient(adb, options, process, videoStream, controlStream);\n            }\n            catch (e) {\n                yield (process === null || process === void 0 ? void 0 : process.kill());\n                throw e;\n            }\n            finally {\n                connection.dispose();\n            }\n        });\n    }\n    get adb() { return this._adb; }\n    get stdout() { return this._stdout; }\n    get exit() { return this.process.exit; }\n    get screenWidth() { return this._screenWidth; }\n    get screenHeight() { return this._screenHeight; }\n    get videoStream() { return this._videoStream; }\n    get onClipboardChange() { return this.clipboardChangeEvent.event; }\n    checkControlStream(caller) {\n        if (!this._controlStreamWriter) {\n            throw new Error(`${caller} called with control disabled`);\n        }\n        return this._controlStreamWriter;\n    }\n    injectKeyCode(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectKeyCode');\n            yield controlStream.write(ScrcpyInjectKeyCodeControlMessage.serialize(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectKeycode })));\n        });\n    }\n    injectText(text) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectText');\n            yield controlStream.write(ScrcpyInjectTextControlMessage.serialize({\n                type: ScrcpyControlMessageType.InjectText,\n                text,\n            }));\n        });\n    }\n    injectTouch(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectTouch');\n            if (!this.screenWidth || !this.screenHeight) {\n                return;\n            }\n            // ADB streams are actually pretty low-bandwidth and laggy\n            // Re-sample move events to avoid flooding the connection\n            // TODO: Scrcpy: investigate how to throttle touch events\n            // because 60FPS may still be too high\n            const now = Date.now();\n            if (now - this.lastTouchMessage < 16 &&\n                [AndroidMotionEventAction.Move, AndroidMotionEventAction.HoverMove].includes(message.action)) {\n                return;\n            }\n            this.lastTouchMessage = now;\n            yield controlStream.write(ScrcpyInjectTouchControlMessage.serialize(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectTouch, screenWidth: this.screenWidth, screenHeight: this.screenHeight })));\n        });\n    }\n    injectScroll(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectScroll');\n            if (!this.screenWidth || !this.screenHeight) {\n                return;\n            }\n            const buffer = this.options.serializeInjectScrollControlMessage(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectScroll, screenWidth: this.screenWidth, screenHeight: this.screenHeight }));\n            yield controlStream.write(buffer);\n        });\n    }\n    pressBackOrTurnOnScreen(action) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('pressBackOrTurnOnScreen');\n            const buffer = this.options.serializeBackOrScreenOnControlMessage({\n                type: ScrcpyControlMessageType.BackOrScreenOn,\n                action,\n            });\n            if (buffer) {\n                yield controlStream.write(buffer);\n            }\n        });\n    }\n    close() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            // No need to close streams. Kill the process will destroy them from the other side.\n            yield ((_a = this.process) === null || _a === void 0 ? void 0 : _a.kill());\n        });\n    }\n}\n//# sourceMappingURL=client.js.map","// From https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel\nexport var AndroidCodecProfile;\n(function (AndroidCodecProfile) {\n    AndroidCodecProfile[AndroidCodecProfile[\"Baseline\"] = 1] = \"Baseline\";\n    AndroidCodecProfile[AndroidCodecProfile[\"Main\"] = 2] = \"Main\";\n    AndroidCodecProfile[AndroidCodecProfile[\"Extended\"] = 4] = \"Extended\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High\"] = 8] = \"High\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High10\"] = 16] = \"High10\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High422\"] = 32] = \"High422\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High444\"] = 64] = \"High444\";\n    AndroidCodecProfile[AndroidCodecProfile[\"ConstrainedBaseline\"] = 65536] = \"ConstrainedBaseline\";\n    AndroidCodecProfile[AndroidCodecProfile[\"ConstrainedHigh\"] = 524288] = \"ConstrainedHigh\";\n})(AndroidCodecProfile || (AndroidCodecProfile = {}));\nexport var AndroidCodecLevel;\n(function (AndroidCodecLevel) {\n    AndroidCodecLevel[AndroidCodecLevel[\"Level1\"] = 1] = \"Level1\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level1b\"] = 2] = \"Level1b\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level11\"] = 4] = \"Level11\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level12\"] = 8] = \"Level12\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level13\"] = 16] = \"Level13\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level2\"] = 32] = \"Level2\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level21\"] = 64] = \"Level21\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level22\"] = 128] = \"Level22\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level3\"] = 256] = \"Level3\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level31\"] = 512] = \"Level31\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level32\"] = 1024] = \"Level32\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level4\"] = 2048] = \"Level4\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level41\"] = 4096] = \"Level41\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level42\"] = 8192] = \"Level42\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level5\"] = 16384] = \"Level5\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level51\"] = 32768] = \"Level51\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level52\"] = 65536] = \"Level52\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level6\"] = 131072] = \"Level6\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level61\"] = 262144] = \"Level61\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level62\"] = 524288] = \"Level62\";\n})(AndroidCodecLevel || (AndroidCodecLevel = {}));\n//# sourceMappingURL=codec.js.map","export function delay(time) {\n    return new Promise(resolve => {\n        globalThis.setTimeout(resolve, time);\n    });\n}\nconst Utf8Encoder = new TextEncoder();\nconst Utf8Decoder = new TextDecoder();\nexport function encodeUtf8(input) {\n    return Utf8Encoder.encode(input).buffer;\n}\nexport function decodeUtf8(buffer) {\n    return Utf8Decoder.decode(buffer);\n}\n//# sourceMappingURL=utils.js.map","import { __awaiter } from \"tslib\";\nimport { delay } from \"./utils.js\";\nexport class ScrcpyClientConnection {\n    constructor(device, options) {\n        this.device = device;\n        this.options = options;\n    }\n    initialize() { }\n    dispose() { }\n}\nexport class ScrcpyClientForwardConnection extends ScrcpyClientConnection {\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.device.createSocket('localabstract:scrcpy');\n        });\n    }\n    connectAndRetry() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let i = 0; i < 100; i++) {\n                try {\n                    return yield this.connect();\n                }\n                catch (e) {\n                    yield delay(100);\n                }\n            }\n            throw new Error(`Can't connect to server after 100 retries`);\n        });\n    }\n    connectVideoStream() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const stream = yield this.connectAndRetry();\n            if (this.options.sendDummyByte) {\n                const reader = stream.readable.getReader();\n                const { done, value } = yield reader.read();\n                // server will write a `0` to signal connection success\n                if (done || value.byteLength !== 1 || value[0] !== 0) {\n                    throw new Error('Unexpected response from server');\n                }\n                reader.releaseLock();\n            }\n            return stream;\n        });\n    }\n    getStreams() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const videoStream = yield this.connectVideoStream();\n            let controlStream;\n            if (this.options.control) {\n                controlStream = yield this.connectAndRetry();\n            }\n            // Server only writes device meta after control socket is connected (if enabled)\n            if (this.options.sendDeviceMeta) {\n                const reader = videoStream.readable.getReader();\n                const { done, value } = yield reader.read();\n                // 64 bytes device name + 2 bytes video width + 2 bytes video height\n                if (done || value.byteLength !== 64 + 2 + 2) {\n                    throw new Error('Unexpected response from server');\n                }\n                reader.releaseLock();\n            }\n            return [videoStream, controlStream];\n        });\n    }\n}\nexport class ScrcpyClientReverseConnection extends ScrcpyClientConnection {\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // try to unbind first\n                yield this.device.reverse.remove('localabstract:scrcpy');\n            }\n            catch (_a) {\n                // ignore error\n            }\n            const queue = new TransformStream();\n            this.streams = queue.readable.getReader();\n            const writer = queue.writable.getWriter();\n            this.address = yield this.device.reverse.add('localabstract:scrcpy', 27183, {\n                onSocket: (packet, stream) => {\n                    writer.write(stream);\n                },\n            });\n        });\n    }\n    accept() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.streams.read()).value;\n        });\n    }\n    getStreams() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const videoStream = yield this.accept();\n            let controlStream;\n            if (this.options.control) {\n                controlStream = yield this.accept();\n            }\n            // Server only writes device meta after control socket is connected (if enabled)\n            if (this.options.sendDeviceMeta) {\n                const reader = videoStream.readable.getReader();\n                const { done, value } = yield reader.read();\n                // 64 bytes device name + 2 bytes video width + 2 bytes video height\n                if (done || value.byteLength !== 64 + 2 + 2) {\n                    throw new Error('Unexpected response from server');\n                }\n                reader.releaseLock();\n            }\n            return [videoStream, controlStream];\n        });\n    }\n    dispose() {\n        // Don't await this!\n        // `reverse.remove`'s response will never arrive\n        // before we read all pending data from `videoStream`\n        this.device.reverse.remove(this.address);\n    }\n}\n//# sourceMappingURL=connection.js.map","import { PromiseResolver } from '@yume-chan/async';\nimport { AutoDisposable, EventEmitter } from '@yume-chan/event';\nlet worker;\nlet workerReady = false;\nconst pendingResolvers = [];\nlet streamId = 0;\nconst pictureReadyEvent = new EventEmitter();\nexport class TinyH264Wrapper extends AutoDisposable {\n    constructor(streamId) {\n        super();\n        this.pictureReadyEvent = new EventEmitter();\n        this.streamId = streamId;\n        this.addDisposable(pictureReadyEvent.event(this.handlePictureReady, this));\n    }\n    get onPictureReady() { return this.pictureReadyEvent.event; }\n    handlePictureReady(e) {\n        if (e.renderStateId === this.streamId) {\n            this.pictureReadyEvent.fire(e);\n        }\n    }\n    feed(data) {\n        worker.postMessage({\n            type: 'decode',\n            data: data,\n            offset: 0,\n            length: data.byteLength,\n            renderStateId: this.streamId,\n        }, [data]);\n    }\n    dispose() {\n        super.dispose();\n        worker.postMessage({\n            type: 'release',\n            renderStateId: this.streamId,\n        });\n    }\n}\nexport function createTinyH264Wrapper() {\n    if (!worker) {\n        worker = new Worker(new URL('./worker.js', import.meta.url));\n        worker.addEventListener('message', (e) => {\n            const { data } = e;\n            switch (data.type) {\n                case 'decoderReady':\n                    workerReady = true;\n                    for (const resolver of pendingResolvers) {\n                        resolver.resolve(new TinyH264Wrapper(streamId));\n                        streamId += 1;\n                    }\n                    pendingResolvers.length = 0;\n                    break;\n                case 'pictureReady':\n                    pictureReadyEvent.fire(data);\n                    break;\n            }\n        });\n    }\n    if (!workerReady) {\n        const resolver = new PromiseResolver();\n        pendingResolvers.push(resolver);\n        return resolver.promise;\n    }\n    const decoder = new TinyH264Wrapper(streamId);\n    streamId += 1;\n    return Promise.resolve(decoder);\n}\n//# sourceMappingURL=wrapper.js.map","import { __awaiter } from \"tslib\";\nimport { WritableStream } from \"@yume-chan/adb\";\nimport { PromiseResolver } from \"@yume-chan/async\";\nimport { AndroidCodecLevel, AndroidCodecProfile } from \"../../codec.js\";\nimport { createTinyH264Wrapper } from \"./wrapper.js\";\nlet cachedInitializePromise;\nfunction initialize() {\n    if (!cachedInitializePromise) {\n        cachedInitializePromise = Promise.all([import('yuv-buffer'), import('yuv-canvas')]).then(([YuvBuffer, { default: YuvCanvas }]) => ({\n            YuvBuffer, YuvCanvas\n        }));\n    }\n    return cachedInitializePromise;\n}\nexport class TinyH264Decoder {\n    constructor() {\n        this.maxProfile = AndroidCodecProfile.Baseline;\n        this.maxLevel = AndroidCodecLevel.Level4;\n        this._frameRendered = 0;\n        initialize();\n        this._renderer = document.createElement('canvas');\n        this._writable = new WritableStream({\n            write: (packet) => __awaiter(this, void 0, void 0, function* () {\n                switch (packet.type) {\n                    case 'configuration':\n                        this.configure(packet.data);\n                        break;\n                    case 'frame':\n                        if (!this._initializer) {\n                            throw new Error('Decoder not initialized');\n                        }\n                        const wrapper = yield this._initializer.promise;\n                        wrapper.feed(packet.data.slice().buffer);\n                        break;\n                }\n            })\n        });\n    }\n    get renderer() { return this._renderer; }\n    get frameRendered() { return this._frameRendered; }\n    get writable() { return this._writable; }\n    configure(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.dispose();\n            this._initializer = new PromiseResolver();\n            const { YuvBuffer, YuvCanvas } = yield initialize();\n            if (!this._yuvCanvas) {\n                this._yuvCanvas = YuvCanvas.attach(this._renderer);\n                ;\n            }\n            const { encodedWidth, encodedHeight } = config;\n            const chromaWidth = encodedWidth / 2;\n            const chromaHeight = encodedHeight / 2;\n            this._renderer.width = config.croppedWidth;\n            this._renderer.height = config.croppedHeight;\n            const format = YuvBuffer.format({\n                width: encodedWidth,\n                height: encodedHeight,\n                chromaWidth,\n                chromaHeight,\n                cropLeft: config.cropLeft,\n                cropTop: config.cropTop,\n                cropWidth: config.croppedWidth,\n                cropHeight: config.croppedHeight,\n                displayWidth: config.croppedWidth,\n                displayHeight: config.croppedHeight,\n            });\n            const wrapper = yield createTinyH264Wrapper();\n            this._initializer.resolve(wrapper);\n            const uPlaneOffset = encodedWidth * encodedHeight;\n            const vPlaneOffset = uPlaneOffset + chromaWidth * chromaHeight;\n            wrapper.onPictureReady(({ data }) => {\n                this._frameRendered += 1;\n                const array = new Uint8Array(data);\n                const frame = YuvBuffer.frame(format, YuvBuffer.lumaPlane(format, array, encodedWidth, 0), YuvBuffer.chromaPlane(format, array, chromaWidth, uPlaneOffset), YuvBuffer.chromaPlane(format, array, chromaWidth, vPlaneOffset));\n                this._yuvCanvas.drawFrame(frame);\n            });\n        });\n    }\n    dispose() {\n        var _a;\n        (_a = this._initializer) === null || _a === void 0 ? void 0 : _a.promise.then(wrapper => wrapper.dispose());\n        this._initializer = undefined;\n    }\n}\n//# sourceMappingURL=index.js.map","import { __awaiter } from \"tslib\";\nimport { WritableStream } from '@yume-chan/adb';\nfunction toHex(value) {\n    return value.toString(16).padStart(2, '0').toUpperCase();\n}\nexport class WebCodecsDecoder {\n    constructor() {\n        // Usually, browsers can decode most configurations,\n        // So let device choose best profile and level for itself.\n        this.maxProfile = undefined;\n        this.maxLevel = undefined;\n        this._frameRendered = 0;\n        this.animationFrame = 0;\n        this.render = () => {\n            if (this.lastFrame) {\n                this._frameRendered += 1;\n                this.context.drawImage(this.lastFrame, 0, 0);\n                this.lastFrame.close();\n                this.lastFrame = undefined;\n            }\n            this.animationFrame = requestAnimationFrame(this.render);\n        };\n        this._renderer = document.createElement('canvas');\n        this.context = this._renderer.getContext('2d');\n        this.decoder = new VideoDecoder({\n            output: (frame) => {\n                if (this.lastFrame) {\n                    this.lastFrame.close();\n                }\n                this.lastFrame = frame;\n                if (!this.animationFrame) {\n                    // Start render loop on first frame\n                    this.render();\n                }\n            },\n            error() { },\n        });\n        this._writable = new WritableStream({\n            write: (packet) => __awaiter(this, void 0, void 0, function* () {\n                switch (packet.type) {\n                    case 'configuration':\n                        this.configure(packet.data);\n                        break;\n                    case 'frame':\n                        this.decoder.decode(new EncodedVideoChunk({\n                            // Treat `undefined` as `key`, otherwise won't decode.\n                            type: packet.keyframe === false ? 'delta' : 'key',\n                            timestamp: 0,\n                            data: packet.data,\n                        }));\n                        break;\n                }\n            })\n        });\n    }\n    get writable() { return this._writable; }\n    get renderer() { return this._renderer; }\n    get frameRendered() { return this._frameRendered; }\n    configure(config) {\n        const { profileIndex, constraintSet, levelIndex } = config;\n        this._renderer.width = config.croppedWidth;\n        this._renderer.height = config.croppedHeight;\n        // https://www.rfc-editor.org/rfc/rfc6381#section-3.3\n        // ISO Base Media File Format Name Space\n        const codec = `avc1.${[profileIndex, constraintSet, levelIndex].map(toHex).join('')}`;\n        this.decoder.configure({\n            codec: codec,\n            optimizeForLatency: true,\n        });\n    }\n    dispose() {\n        cancelAnimationFrame(this.animationFrame);\n        this.decoder.close();\n    }\n}\n//# sourceMappingURL=index.js.map","export const DEFAULT_SERVER_PATH = '/data/local/tmp/scrcpy-server.jar';\nexport function isScrcpyOptionValue(value) {\n    return typeof value === 'object' &&\n        value !== null &&\n        typeof value.toOptionValue === 'function';\n}\nexport function toScrcpyOptionValue(value, empty) {\n    if (isScrcpyOptionValue(value)) {\n        value = value.toOptionValue();\n    }\n    if (value === undefined) {\n        return empty;\n    }\n    return `${value}`;\n}\n//# sourceMappingURL=common.js.map","// cspell: ignore golomb\n// cspell: ignore qpprime\nclass BitReader {\n    constructor(buffer) {\n        this.bytePosition = 0;\n        this.bitPosition = 0;\n        this.buffer = buffer;\n    }\n    read(length) {\n        let result = 0;\n        for (let i = 0; i < length; i += 1) {\n            result = (result << 1) | this.next();\n        }\n        return result;\n    }\n    next() {\n        const value = (this.buffer[this.bytePosition] >> (7 - this.bitPosition)) & 1;\n        this.bitPosition += 1;\n        if (this.bitPosition === 8) {\n            this.bytePosition += 1;\n            this.bitPosition = 0;\n        }\n        return value;\n    }\n    decodeExponentialGolombNumber() {\n        let length = 0;\n        while (this.next() === 0) {\n            length += 1;\n        }\n        if (length === 0) {\n            return 0;\n        }\n        return (1 << length | this.read(length)) - 1;\n    }\n}\nfunction* iterateNalu(buffer) {\n    // -1 means we haven't found the first start code\n    let start = -1;\n    let writeIndex = 0;\n    // How many `0x00`s in a row we have counted\n    let zeroCount = 0;\n    let inEmulation = false;\n    for (const byte of buffer) {\n        buffer[writeIndex] = byte;\n        writeIndex += 1;\n        if (inEmulation) {\n            if (byte > 0x03) {\n                // `0x00000304` or larger are invalid\n                throw new Error('Invalid data');\n            }\n            inEmulation = false;\n            continue;\n        }\n        if (byte == 0x00) {\n            zeroCount += 1;\n            continue;\n        }\n        const lastZeroCount = zeroCount;\n        zeroCount = 0;\n        if (start === -1) {\n            // 0x000001 is the start code\n            // But it can be preceded by any number of zeros\n            // So 2 is the minimal\n            if (lastZeroCount >= 2 && byte === 0x01) {\n                // Found start of first NAL unit\n                writeIndex = 0;\n                start = 0;\n                continue;\n            }\n            // Not begin with start code\n            throw new Error('Invalid data');\n        }\n        if (lastZeroCount < 2) {\n            // zero or one `0x00`s are acceptable\n            continue;\n        }\n        if (byte === 0x01) {\n            // Remove all leading `0x00`s and this `0x01`\n            writeIndex -= lastZeroCount + 1;\n            // Found another NAL unit\n            yield buffer.subarray(start, writeIndex);\n            start = writeIndex;\n            continue;\n        }\n        if (lastZeroCount > 2) {\n            // Too much `0x00`s\n            throw new Error('Invalid data');\n        }\n        switch (byte) {\n            case 0x02:\n                // Didn't find why, but 7.4.1 NAL unit semantics forbids `0x000002` appearing in NAL units\n                throw new Error('Invalid data');\n            case 0x03:\n                // `0x000003` is the \"emulation_prevention_three_byte\"\n                // `0x00000300`, `0x00000301`, `0x00000302` and `0x00000303` represent\n                // `0x000000`, `0x000001`, `0x000002` and `0x000003` respectively\n                // Remove current byte\n                writeIndex -= 1;\n                inEmulation = true;\n                break;\n            default:\n                // `0x000004` or larger are ok\n                break;\n        }\n    }\n    if (inEmulation || zeroCount !== 0) {\n        throw new Error('Invalid data');\n    }\n    yield buffer.subarray(start, writeIndex);\n}\n// 7.3.2.1.1 Sequence parameter set data syntax\nexport function parse_sequence_parameter_set(buffer) {\n    for (const nalu of iterateNalu(new Uint8Array(buffer))) {\n        const reader = new BitReader(nalu);\n        if (reader.next() !== 0) {\n            throw new Error('Invalid data');\n        }\n        const nal_ref_idc = reader.read(2);\n        const nal_unit_type = reader.read(5);\n        if (nal_unit_type !== 7) {\n            continue;\n        }\n        if (nal_ref_idc === 0) {\n            throw new Error('Invalid data');\n        }\n        const profile_idc = reader.read(8);\n        const constraint_set = reader.read(8);\n        const constraint_set_reader = new BitReader(new Uint8Array([constraint_set]));\n        const constraint_set0_flag = !!constraint_set_reader.next();\n        const constraint_set1_flag = !!constraint_set_reader.next();\n        const constraint_set2_flag = !!constraint_set_reader.next();\n        const constraint_set3_flag = !!constraint_set_reader.next();\n        const constraint_set4_flag = !!constraint_set_reader.next();\n        const constraint_set5_flag = !!constraint_set_reader.next();\n        // reserved_zero_2bits\n        if (constraint_set_reader.read(2) !== 0) {\n            throw new Error('Invalid data');\n        }\n        const level_idc = reader.read(8);\n        const seq_parameter_set_id = reader.decodeExponentialGolombNumber();\n        if (profile_idc === 100 || profile_idc === 110 ||\n            profile_idc === 122 || profile_idc === 244 || profile_idc === 44 ||\n            profile_idc === 83 || profile_idc === 86 || profile_idc === 118 ||\n            profile_idc === 128 || profile_idc === 138 || profile_idc === 139 ||\n            profile_idc === 134) {\n            const chroma_format_idc = reader.decodeExponentialGolombNumber();\n            if (chroma_format_idc === 3) {\n                // separate_colour_plane_flag\n                reader.next();\n            }\n            // bit_depth_luma_minus8\n            reader.decodeExponentialGolombNumber();\n            // bit_depth_chroma_minus8\n            reader.decodeExponentialGolombNumber();\n            // qpprime_y_zero_transform_bypass_flag\n            reader.next();\n            const seq_scaling_matrix_present_flag = !!reader.next();\n            if (seq_scaling_matrix_present_flag) {\n                const seq_scaling_list_present_flag = [];\n                for (let i = 0; i < ((chroma_format_idc !== 3) ? 8 : 12); i++) {\n                    seq_scaling_list_present_flag[i] = !!reader.next();\n                    if (seq_scaling_list_present_flag[i])\n                        if (i < 6) {\n                            // TODO\n                            // scaling_list( ScalingList4x4[ i ], 16,\n                            //               UseDefaultScalingMatrix4x4Flag[ i ])\n                        }\n                        else {\n                            // TODO\n                            // scaling_list( ScalingList8x8[ i − 6 ], 64,\n                            //               UseDefaultScalingMatrix8x8Flag[ i − 6 ] )\n                        }\n                }\n            }\n        }\n        // log2_max_frame_num_minus4\n        reader.decodeExponentialGolombNumber();\n        const pic_order_cnt_type = reader.decodeExponentialGolombNumber();\n        if (pic_order_cnt_type === 0) {\n            // log2_max_pic_order_cnt_lsb_minus4\n            reader.decodeExponentialGolombNumber();\n        }\n        else if (pic_order_cnt_type === 1) {\n            // delta_pic_order_always_zero_flag\n            reader.next();\n            // offset_for_non_ref_pic\n            reader.decodeExponentialGolombNumber();\n            // offset_for_top_to_bottom_field\n            reader.decodeExponentialGolombNumber();\n            const num_ref_frames_in_pic_order_cnt_cycle = reader.decodeExponentialGolombNumber();\n            const offset_for_ref_frame = [];\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\n                offset_for_ref_frame[i] = reader.decodeExponentialGolombNumber();\n            }\n        }\n        // max_num_ref_frames\n        reader.decodeExponentialGolombNumber();\n        // gaps_in_frame_num_value_allowed_flag\n        reader.next();\n        const pic_width_in_mbs_minus1 = reader.decodeExponentialGolombNumber();\n        const pic_height_in_map_units_minus1 = reader.decodeExponentialGolombNumber();\n        const frame_mbs_only_flag = reader.next();\n        if (!frame_mbs_only_flag) {\n            // mb_adaptive_frame_field_flag\n            reader.next();\n        }\n        // direct_8x8_inference_flag\n        reader.next();\n        const frame_cropping_flag = !!reader.next();\n        let frame_crop_left_offset;\n        let frame_crop_right_offset;\n        let frame_crop_top_offset;\n        let frame_crop_bottom_offset;\n        if (frame_cropping_flag) {\n            frame_crop_left_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_right_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_top_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_bottom_offset = reader.decodeExponentialGolombNumber();\n        }\n        else {\n            frame_crop_left_offset = 0;\n            frame_crop_right_offset = 0;\n            frame_crop_top_offset = 0;\n            frame_crop_bottom_offset = 0;\n        }\n        const vui_parameters_present_flag = !!reader.next();\n        if (vui_parameters_present_flag) {\n            // TODO\n            // vui_parameters( )\n        }\n        return {\n            profile_idc,\n            constraint_set,\n            constraint_set0_flag,\n            constraint_set1_flag,\n            constraint_set2_flag,\n            constraint_set3_flag,\n            constraint_set4_flag,\n            constraint_set5_flag,\n            level_idc,\n            seq_parameter_set_id,\n            pic_width_in_mbs_minus1,\n            pic_height_in_map_units_minus1,\n            frame_mbs_only_flag,\n            frame_cropping_flag,\n            frame_crop_left_offset,\n            frame_crop_right_offset,\n            frame_crop_top_offset,\n            frame_crop_bottom_offset,\n        };\n    }\n    throw new Error('Invalid data');\n}\n//# sourceMappingURL=sps.js.map","import { StructDeserializeStream, TransformStream } from \"@yume-chan/adb\";\nimport Struct, { placeholder } from \"@yume-chan/struct\";\nimport { ScrcpyClientForwardConnection, ScrcpyClientReverseConnection } from \"../../connection.js\";\nimport { AndroidKeyEventAction, ScrcpyControlMessageType } from \"../../message.js\";\nimport { toScrcpyOptionValue } from \"../common.js\";\nimport { parse_sequence_parameter_set } from \"./sps.js\";\nexport var ScrcpyLogLevel;\n(function (ScrcpyLogLevel) {\n    ScrcpyLogLevel[\"Verbose\"] = \"verbose\";\n    ScrcpyLogLevel[\"Debug\"] = \"debug\";\n    ScrcpyLogLevel[\"Info\"] = \"info\";\n    ScrcpyLogLevel[\"Warn\"] = \"warn\";\n    ScrcpyLogLevel[\"Error\"] = \"error\";\n})(ScrcpyLogLevel || (ScrcpyLogLevel = {}));\nexport var ScrcpyScreenOrientation;\n(function (ScrcpyScreenOrientation) {\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Initial\"] = -2] = \"Initial\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Unlocked\"] = -1] = \"Unlocked\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Portrait\"] = 0] = \"Portrait\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Landscape\"] = 1] = \"Landscape\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"PortraitFlipped\"] = 2] = \"PortraitFlipped\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"LandscapeFlipped\"] = 3] = \"LandscapeFlipped\";\n})(ScrcpyScreenOrientation || (ScrcpyScreenOrientation = {}));\nexport class CodecOptions {\n    constructor(value) {\n        this.value = value;\n    }\n    toOptionValue() {\n        const entries = Object.entries(this.value)\n            .filter(([key, value]) => value !== undefined);\n        if (entries.length === 0) {\n            return undefined;\n        }\n        return entries\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n    }\n}\nexport const VideoPacket = new Struct()\n    .uint64('pts')\n    .uint32('size')\n    .uint8Array('data', { lengthField: 'size' });\nexport const NO_PTS = BigInt(1) << BigInt(63);\nexport const ScrcpyBackOrScreenOnEvent1_16 = new Struct()\n    .uint8('type', placeholder());\nexport const ScrcpyInjectScrollControlMessage1_16 = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectScroll)\n    .uint32('pointerX')\n    .uint32('pointerY')\n    .uint16('screenWidth')\n    .uint16('screenHeight')\n    .int32('scrollX')\n    .int32('scrollY');\nexport class ScrcpyOptions1_16 {\n    constructor(value) {\n        if (new.target === ScrcpyOptions1_16 &&\n            value.logLevel === ScrcpyLogLevel.Verbose) {\n            value.logLevel = ScrcpyLogLevel.Debug;\n        }\n        if (new.target === ScrcpyOptions1_16 &&\n            value.lockVideoOrientation === ScrcpyScreenOrientation.Initial) {\n            value.lockVideoOrientation = ScrcpyScreenOrientation.Unlocked;\n        }\n        this.value = value;\n    }\n    getArgumentOrder() {\n        return [\n            'logLevel',\n            'maxSize',\n            'bitRate',\n            'maxFps',\n            'lockVideoOrientation',\n            'tunnelForward',\n            'crop',\n            'sendFrameMeta',\n            'control',\n            'displayId',\n            'showTouches',\n            'stayAwake',\n            'codecOptions',\n            'encoderName',\n        ];\n    }\n    getDefaultValue() {\n        return {\n            logLevel: ScrcpyLogLevel.Debug,\n            maxSize: 0,\n            bitRate: 8000000,\n            maxFps: 0,\n            lockVideoOrientation: ScrcpyScreenOrientation.Unlocked,\n            tunnelForward: false,\n            crop: '-',\n            sendFrameMeta: true,\n            control: true,\n            displayId: 0,\n            showTouches: false,\n            stayAwake: false,\n            codecOptions: new CodecOptions({}),\n            encoderName: '-',\n        };\n    }\n    formatServerArguments() {\n        const defaults = this.getDefaultValue();\n        return this.getArgumentOrder()\n            .map(key => toScrcpyOptionValue(this.value[key] || defaults[key], '-'));\n    }\n    createConnection(adb) {\n        const options = {\n            // Old scrcpy connection always have control stream no matter what the option is\n            control: true,\n            sendDummyByte: true,\n            sendDeviceMeta: true,\n        };\n        if (this.value.tunnelForward) {\n            return new ScrcpyClientForwardConnection(adb, options);\n        }\n        else {\n            return new ScrcpyClientReverseConnection(adb, options);\n        }\n    }\n    getOutputEncoderNameRegex() {\n        return /\\s+scrcpy --encoder-name '(.*?)'/;\n    }\n    createVideoStreamTransformer() {\n        // Optimized path for video frames only\n        if (this.value.sendFrameMeta === false) {\n            return new TransformStream({\n                transform(chunk, controller) {\n                    controller.enqueue({\n                        type: 'frame',\n                        data: chunk,\n                    });\n                },\n            });\n        }\n        let header;\n        let deserializeStream = new StructDeserializeStream(VideoPacket);\n        return {\n            writable: deserializeStream.writable,\n            readable: deserializeStream.readable.pipeThrough(new TransformStream({\n                transform(packet, controller) {\n                    if (packet.pts === NO_PTS) {\n                        const sequenceParameterSet = parse_sequence_parameter_set(packet.data.slice().buffer);\n                        const { profile_idc: profileIndex, constraint_set: constraintSet, level_idc: levelIndex, pic_width_in_mbs_minus1, pic_height_in_map_units_minus1, frame_mbs_only_flag, frame_crop_left_offset, frame_crop_right_offset, frame_crop_top_offset, frame_crop_bottom_offset, } = sequenceParameterSet;\n                        const encodedWidth = (pic_width_in_mbs_minus1 + 1) * 16;\n                        const encodedHeight = (pic_height_in_map_units_minus1 + 1) * (2 - frame_mbs_only_flag) * 16;\n                        const cropLeft = frame_crop_left_offset * 2;\n                        const cropRight = frame_crop_right_offset * 2;\n                        const cropTop = frame_crop_top_offset * 2;\n                        const cropBottom = frame_crop_bottom_offset * 2;\n                        const croppedWidth = encodedWidth - cropLeft - cropRight;\n                        const croppedHeight = encodedHeight - cropTop - cropBottom;\n                        header = packet.data;\n                        controller.enqueue({\n                            type: 'configuration',\n                            data: {\n                                profileIndex,\n                                constraintSet,\n                                levelIndex,\n                                encodedWidth,\n                                encodedHeight,\n                                cropLeft,\n                                cropRight,\n                                cropTop,\n                                cropBottom,\n                                croppedWidth,\n                                croppedHeight,\n                            }\n                        });\n                        return;\n                    }\n                    let frameData;\n                    if (header) {\n                        frameData = new Uint8Array(header.byteLength + packet.data.byteLength);\n                        frameData.set(header);\n                        frameData.set(packet.data, header.byteLength);\n                        header = undefined;\n                    }\n                    else {\n                        frameData = packet.data;\n                    }\n                    controller.enqueue({\n                        type: 'frame',\n                        pts: packet.pts,\n                        data: frameData,\n                    });\n                }\n            }))\n        };\n    }\n    serializeBackOrScreenOnControlMessage(message) {\n        if (message.action === AndroidKeyEventAction.Down) {\n            return ScrcpyBackOrScreenOnEvent1_16.serialize(message);\n        }\n        return undefined;\n    }\n    serializeInjectScrollControlMessage(message) {\n        return ScrcpyInjectScrollControlMessage1_16.serialize(message);\n    }\n}\n//# sourceMappingURL=index.js.map","import Struct, { placeholder } from \"@yume-chan/struct\";\nimport { ScrcpyBackOrScreenOnEvent1_16, ScrcpyOptions1_16 } from \"./1_16/index.js\";\nexport const ScrcpyBackOrScreenOnEvent1_18 = new Struct()\n    .fields(ScrcpyBackOrScreenOnEvent1_16)\n    .uint8('action', placeholder());\nexport class ScrcpyOptions1_18 extends ScrcpyOptions1_16 {\n    constructor(value) {\n        super(value);\n    }\n    getArgumentOrder() {\n        return super.getArgumentOrder().concat(['powerOffOnClose']);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { powerOffOnClose: false });\n    }\n    getOutputEncoderNameRegex() {\n        return /\\s+scrcpy --encoder '(.*?)'/;\n    }\n    serializeBackOrScreenOnControlMessage(message) {\n        return ScrcpyBackOrScreenOnEvent1_18.serialize(message);\n    }\n}\n//# sourceMappingURL=1_18.js.map","// cspell: ignore autosync\nimport { ScrcpyOptions1_18 } from './1_18.js';\nimport { toScrcpyOptionValue } from \"./common.js\";\nfunction toSnakeCase(input) {\n    return input.replace(/([A-Z])/g, '_$1').toLowerCase();\n}\nexport class ScrcpyOptions1_21 extends ScrcpyOptions1_18 {\n    constructor(init) {\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { clipboardAutosync: true });\n    }\n    formatServerArguments() {\n        // 1.21 changed the format of arguments\n        // So `getArgumentOrder()` is no longer needed\n        return Object.entries(this.value)\n            .map(([key, value]) => [key, toScrcpyOptionValue(value, undefined)])\n            .filter((pair) => pair[1] !== undefined)\n            .map(([key, value]) => `${toSnakeCase(key)}=${value}`);\n    }\n}\n//# sourceMappingURL=1_21.js.map","import Struct from \"@yume-chan/struct\";\nimport { ScrcpyClientForwardConnection, ScrcpyClientReverseConnection } from \"../connection.js\";\nimport { ScrcpyInjectScrollControlMessage1_16 } from \"./1_16/index.js\";\nimport { ScrcpyOptions1_21 } from \"./1_21.js\";\nexport const ScrcpyInjectScrollControlMessage1_22 = new Struct()\n    .fields(ScrcpyInjectScrollControlMessage1_16)\n    .int32(\"buttons\");\nexport class ScrcpyOptions1_22 extends ScrcpyOptions1_21 {\n    constructor(init) {\n        if (init.rawVideoStream) {\n            // Set implied options for client-side processing\n            init.sendDeviceMeta = false;\n            init.sendFrameMeta = false;\n            init.sendDummyByte = false;\n        }\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { downsizeOnError: true, sendDeviceMeta: true, sendDummyByte: true, rawVideoStream: false });\n    }\n    createConnection(device) {\n        var _a, _b, _c;\n        const defaultValue = this.getDefaultValue();\n        const options = {\n            control: (_a = this.value.control) !== null && _a !== void 0 ? _a : defaultValue.control,\n            sendDummyByte: (_b = this.value.sendDummyByte) !== null && _b !== void 0 ? _b : defaultValue.sendDummyByte,\n            sendDeviceMeta: (_c = this.value.sendDeviceMeta) !== null && _c !== void 0 ? _c : defaultValue.sendDeviceMeta,\n        };\n        if (this.value.tunnelForward) {\n            return new ScrcpyClientForwardConnection(device, options);\n        }\n        else {\n            return new ScrcpyClientReverseConnection(device, options);\n        }\n    }\n    serializeInjectScrollControlMessage(message) {\n        return ScrcpyInjectScrollControlMessage1_22.serialize(message);\n    }\n}\n//# sourceMappingURL=1_22.js.map","import { TransformStream } from \"@yume-chan/adb\";\nimport { ScrcpyOptions1_22 } from './1_22.js';\nconst KEYFRAME_PTS = BigInt(1) << BigInt(62);\nexport class ScrcpyOptions1_23 extends ScrcpyOptions1_22 {\n    constructor(init) {\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { cleanup: true });\n    }\n    createVideoStreamTransformer() {\n        const superStream = super.createVideoStreamTransformer();\n        return {\n            writable: superStream.writable,\n            readable: superStream.readable.pipeThrough(new TransformStream({\n                transform(packet, controller) {\n                    if (packet.type !== 'frame') {\n                        controller.enqueue(packet);\n                        return;\n                    }\n                    if (packet.pts !== undefined && packet.pts & KEYFRAME_PTS) {\n                        packet.keyframe = true;\n                        packet.pts &= ~KEYFRAME_PTS;\n                    }\n                    controller.enqueue(packet);\n                }\n            }))\n        };\n    }\n}\n//# sourceMappingURL=1_23.js.map","import { __awaiter } from \"tslib\";\nimport { WrapWritableStream } from \"@yume-chan/adb\";\nimport { DEFAULT_SERVER_PATH } from \"./options/index.js\";\nexport function pushServer(device, options = {}) {\n    const { path = DEFAULT_SERVER_PATH } = options;\n    return new WrapWritableStream({\n        start() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const sync = yield device.sync();\n                return {\n                    writable: sync.write(path),\n                    state: sync,\n                };\n            });\n        },\n        close(sync) {\n            return __awaiter(this, void 0, void 0, function* () {\n                yield sync.dispose();\n            });\n        },\n    });\n}\n//# sourceMappingURL=push-server.js.map","export default '1.23';","import { CommandBar, Dialog, Dropdown, ICommandBarItemProps, Icon, IconButton, IDropdownOption, LayerHost, Position, ProgressIndicator, SpinButton, Stack, Toggle, TooltipHost } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { ADB_SYNC_MAX_PACKET_SIZE, ChunkStream, InspectStream, ReadableStream, WritableStream } from '@yume-chan/adb';\nimport { EventEmitter } from \"@yume-chan/event\";\nimport { AndroidKeyCode, AndroidKeyEventAction, AndroidMotionEventAction, CodecOptions, DEFAULT_SERVER_PATH, H264Decoder, H264DecoderConstructor, pushServer, ScrcpyClient, ScrcpyLogLevel, ScrcpyOptions1_23, ScrcpyScreenOrientation, TinyH264Decoder, WebCodecsDecoder, type VideoStreamPacket } from \"@yume-chan/scrcpy\";\nimport SCRCPY_SERVER_VERSION from '@yume-chan/scrcpy/bin/version';\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { DemoModePanel, DeviceView, DeviceViewRef, ExternalLink } from \"../components\";\nimport { globalState } from \"../state\";\nimport { CommonStackTokens, formatSpeed, Icons, ProgressStream, RouteStackProps } from \"../utils\";\n\nconst SERVER_URL = new URL('@yume-chan/scrcpy/bin/scrcpy-server?url', import.meta.url).toString();\n\nclass FetchWithProgress {\n    public readonly promise: Promise<Uint8Array>;\n\n    private _downloaded = 0;\n    public get downloaded() { return this._downloaded; }\n\n    private _total = 0;\n    public get total() { return this._total; }\n\n    private progressEvent = new EventEmitter<[download: number, total: number]>();\n    public get onProgress() { return this.progressEvent.event; }\n\n    public constructor(url: string) {\n        this.promise = this.fetch(url);\n    }\n\n    private async fetch(url: string) {\n        const response = await window.fetch(url);\n        this._total = Number.parseInt(response.headers.get('Content-Length') ?? '0', 10);\n        this.progressEvent.fire([this._downloaded, this._total]);\n\n        const reader = response.body!.getReader();\n        const chunks: Uint8Array[] = [];\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                break;\n            }\n            chunks.push(result.value);\n            this._downloaded += result.value.byteLength;\n            this.progressEvent.fire([this._downloaded, this._total]);\n        }\n\n        this._total = chunks.reduce((result, item) => result + item.byteLength, 0);\n        const result = new Uint8Array(this._total);\n        let position = 0;\n        for (const chunk of chunks) {\n            result.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return result;\n    }\n}\n\nlet cachedValue: FetchWithProgress | undefined;\nfunction fetchServer(onProgress?: (e: [downloaded: number, total: number]) => void) {\n    if (!cachedValue) {\n        cachedValue = new FetchWithProgress(SERVER_URL);\n        cachedValue.promise.catch((e) => {\n            cachedValue = undefined;\n        });\n    }\n\n    if (onProgress) {\n        cachedValue.onProgress(onProgress);\n        onProgress([cachedValue.downloaded, cachedValue.total]);\n    }\n\n    return cachedValue.promise;\n}\n\nfunction clamp(value: number, min: number, max: number): number {\n    if (value < min) {\n        return min;\n    }\n\n    if (value > max) {\n        return max;\n    }\n\n    return value;\n}\n\nclass KeyRepeater {\n    key: AndroidKeyCode;\n    client: ScrcpyClient;\n\n    delay: number;\n    interval: number;\n\n    onRelease: VoidFunction | undefined;\n\n    constructor(key: AndroidKeyCode, client: ScrcpyClient, delay = 0, interval = 0) {\n        this.key = key;\n        this.client = client;\n\n        this.delay = delay;\n        this.interval = interval;\n    }\n\n    async press() {\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Down,\n            keyCode: this.key,\n            repeat: 0,\n            metaState: 0,\n        });\n\n        if (this.delay === 0) {\n            return;\n        }\n\n        const timeoutId = setTimeout(async () => {\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Down,\n                keyCode: this.key,\n                repeat: 1,\n                metaState: 0,\n            });\n\n            if (this.interval === 0) {\n                return;\n            }\n\n            const intervalId = setInterval(async () => {\n                await this.client.injectKeyCode({\n                    action: AndroidKeyEventAction.Down,\n                    keyCode: this.key,\n                    repeat: 1,\n                    metaState: 0,\n                });\n            }, this.interval);\n            this.onRelease = () => clearInterval(intervalId);\n        }, this.delay);\n        this.onRelease = () => clearTimeout(timeoutId);\n    }\n\n    async release() {\n        this.onRelease?.();\n\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Up,\n            keyCode: this.key,\n            repeat: 0,\n            metaState: 0,\n        });\n    }\n}\n\nclass ScrcpyPageState {\n    running = false;\n\n    deviceView: DeviceViewRef | null = null;\n    rendererContainer: HTMLDivElement | null = null;\n\n    logVisible = false;\n    log: string[] = [];\n    settingsVisible = false;\n    demoModeVisible = false;\n    navigationBarVisible = true;\n\n    width = 0;\n    height = 0;\n\n    client: ScrcpyClient | undefined = undefined;\n\n    encoders: string[] = [];\n    selectedEncoder: string | undefined = undefined;\n\n    decoders: { name: string; factory: H264DecoderConstructor; }[] = [{\n        name: 'TinyH264 (Software)',\n        factory: TinyH264Decoder,\n    }];\n    selectedDecoder: { name: string, factory: H264DecoderConstructor; } = this.decoders[0];\n    ignoreDecoderCodecArgs = false;\n    decoder: H264Decoder | undefined = undefined;\n\n    resolution = 1080;\n    bitRate = 4_000_000;\n    tunnelForward = false;\n\n    connecting = false;\n    serverTotalSize = 0;\n    serverDownloadedSize = 0;\n    debouncedServerDownloadedSize = 0;\n    serverDownloadSpeed = 0;\n    serverUploadedSize = 0;\n    debouncedServerUploadedSize = 0;\n    serverUploadSpeed = 0;\n\n    homeKeyRepeater: KeyRepeater | undefined = undefined;\n    appSwitchKeyRepeater: KeyRepeater | undefined = undefined;\n\n    get commandBarItems() {\n        const result: ICommandBarItemProps[] = [];\n\n        if (!this.running) {\n            result.push({\n                key: 'start',\n                disabled: !globalState.device,\n                iconProps: { iconName: Icons.Play },\n                text: 'Start',\n                onClick: this.start as VoidFunction,\n            });\n        } else {\n            result.push({\n                key: 'stop',\n                iconProps: { iconName: Icons.Stop },\n                text: 'Stop',\n                onClick: this.stop as VoidFunction,\n            });\n        }\n\n        result.push({\n            key: 'fullscreen',\n            disabled: !this.running,\n            iconProps: { iconName: Icons.FullScreenMaximize },\n            text: 'Fullscreen',\n            onClick: () => { this.deviceView?.enterFullscreen(); },\n        });\n\n        return result;\n    }\n\n    get commandBarFarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: 'NavigationBar',\n                iconProps: { iconName: Icons.PanelBottom },\n                checked: this.navigationBarVisible,\n                text: 'Navigation Bar',\n                onClick: action(() => {\n                    this.navigationBarVisible = !this.navigationBarVisible;\n                }),\n            },\n            {\n                key: 'Log',\n                iconProps: { iconName: Icons.TextGrammarError },\n                checked: this.logVisible,\n                text: 'Log',\n                onClick: action(() => {\n                    this.logVisible = !this.logVisible;\n                }),\n            },\n            {\n                key: 'Settings',\n                iconProps: { iconName: Icons.Settings },\n                checked: this.settingsVisible,\n                text: 'Settings',\n                onClick: action(() => {\n                    this.settingsVisible = !this.settingsVisible;\n                }),\n            },\n            {\n                key: 'DemoMode',\n                iconProps: { iconName: Icons.Wand },\n                checked: this.demoModeVisible,\n                text: 'Demo Mode',\n                onClick: action(() => {\n                    this.demoModeVisible = !this.demoModeVisible;\n                }),\n            },\n            {\n                key: 'info',\n                iconProps: { iconName: Icons.Info },\n                iconOnly: true,\n                tooltipHostProps: {\n                    content: (\n                        <>\n                            <p>\n                                <ExternalLink href=\"https://github.com/Genymobile/scrcpy\" spaceAfter>Scrcpy</ExternalLink>\n                                developed by Genymobile can display the screen with low latency (1~2 frames) and control the device, all without root access.\n                            </p>\n                            <p>\n                                This is a TypeScript implementation of the client part. Paired with official pre-built server binary.\n                            </p>\n                        </>\n                    ),\n                    calloutProps: {\n                        calloutMaxWidth: 300,\n                    }\n                },\n            }\n        ];\n    }\n\n    constructor() {\n        makeAutoObservable(this, {\n            decoders: observable.shallow,\n            selectedDecoder: observable.ref,\n            start: false,\n            stop: action.bound,\n            handleDeviceViewRef: action.bound,\n            handleRendererContainerRef: action.bound,\n            handleBackPointerDown: false,\n            handleBackPointerUp: false,\n            handleHomePointerDown: false,\n            handleHomePointerUp: false,\n            handleAppSwitchPointerDown: false,\n            handleAppSwitchPointerUp: false,\n            handleCurrentEncoderChange: action.bound,\n            handleSelectedDecoderChange: action.bound,\n            handleIgnoreDecoderCodecArgsChange: action.bound,\n            handleResolutionChange: action.bound,\n            handleTunnelForwardChange: action.bound,\n            handleBitRateChange: action.bound,\n            calculatePointerPosition: false,\n            injectTouch: false,\n            handlePointerDown: false,\n            handlePointerMove: false,\n            handlePointerUp: false,\n            handleWheel: false,\n            handleContextMenu: false,\n            handleKeyDown: false,\n            homeKeyRepeater: false,\n            appSwitchKeyRepeater: false,\n        });\n\n        autorun(() => {\n            if (globalState.device) {\n                runInAction(() => {\n                    this.encoders = [];\n                    this.selectedEncoder = undefined;\n                });\n            } else {\n                this.stop();\n            }\n        });\n\n        autorun(() => {\n            if (this.rendererContainer && this.decoder) {\n                while (this.rendererContainer.firstChild) {\n                    this.rendererContainer.firstChild.remove();\n                }\n                this.rendererContainer.appendChild(this.decoder.renderer);\n            }\n        });\n\n        autorun(() => {\n            if (this.client) {\n                this.homeKeyRepeater = new KeyRepeater(AndroidKeyCode.Home, this.client);\n                this.appSwitchKeyRepeater = new KeyRepeater(AndroidKeyCode.AppSwitch, this.client);\n            } else {\n                this.homeKeyRepeater = undefined;\n                this.appSwitchKeyRepeater = undefined;\n            }\n        });\n\n        if (typeof window !== 'undefined' && typeof window.VideoDecoder === 'function') {\n            setTimeout(action(() => {\n                this.decoders.unshift({\n                    name: 'WebCodecs',\n                    factory: WebCodecsDecoder,\n                });\n                this.selectedDecoder = this.decoders[0];\n            }), 0);\n        }\n    }\n\n    start = async () => {\n        if (!globalState.device) {\n            return;\n        }\n\n        try {\n            if (!state.selectedDecoder) {\n                throw new Error('No available decoder');\n            }\n\n            runInAction(() => {\n                this.serverTotalSize = 0;\n                this.serverDownloadedSize = 0;\n                this.debouncedServerDownloadedSize = 0;\n                this.serverUploadedSize = 0;\n                this.debouncedServerUploadedSize = 0;\n                this.connecting = true;\n            });\n\n            let intervalId = setInterval(action(() => {\n                this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n            }), 1000);\n\n            let serverBuffer: Uint8Array;\n\n            try {\n                serverBuffer = await fetchServer(action(([downloaded, total]) => {\n                    this.serverDownloadedSize = downloaded;\n                    this.serverTotalSize = total;\n                }));\n                runInAction(() => {\n                    this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                    this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            intervalId = setInterval(action(() => {\n                this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                this.debouncedServerUploadedSize = this.serverUploadedSize;\n            }), 1000);\n\n            try {\n                await new ReadableStream<Uint8Array>({\n                    start(controller) {\n                        controller.enqueue(serverBuffer);\n                        controller.close();\n                    },\n                })\n                    .pipeThrough(new ChunkStream(ADB_SYNC_MAX_PACKET_SIZE))\n                    .pipeThrough(new ProgressStream(action((progress) => {\n                        this.serverUploadedSize = progress;\n                    })))\n                    .pipeTo(pushServer(globalState.device));\n\n                runInAction(() => {\n                    this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                    this.debouncedServerUploadedSize = this.serverUploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            const encoders = await ScrcpyClient.getEncoders(\n                globalState.device,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                new ScrcpyOptions1_23({\n                    logLevel: ScrcpyLogLevel.Debug,\n                    bitRate: 4_000_000,\n                    tunnelForward: this.tunnelForward,\n                    sendDeviceMeta: false,\n                    sendDummyByte: false,\n                    control: false,\n                    // Don't cleanup when getting encoders,\n                    // so doesn't need to push server binary again\n                    cleanup: false,\n                })\n            );\n            if (encoders.length === 0) {\n                throw new Error('No available encoder found');\n            }\n\n            runInAction(() => {\n                this.encoders = encoders;\n            });\n\n            const factory = this.selectedDecoder.factory;\n            const decoder = new factory();\n            runInAction(() => {\n                this.decoder = decoder;\n            });\n\n            const options = new ScrcpyOptions1_23({\n                logLevel: ScrcpyLogLevel.Debug,\n                maxSize: this.resolution,\n                bitRate: this.bitRate,\n                lockVideoOrientation: ScrcpyScreenOrientation.Unlocked,\n                tunnelForward: this.tunnelForward,\n                encoderName: this.selectedEncoder ?? encoders[0],\n                sendDeviceMeta: false,\n                sendDummyByte: false,\n                codecOptions: !this.ignoreDecoderCodecArgs\n                    ? new CodecOptions({\n                        profile: decoder.maxProfile,\n                        level: decoder.maxLevel,\n                    })\n                    : undefined,\n            });\n\n            runInAction(() => {\n                this.log = [];\n                this.log.push(`[client] Server version: ${SCRCPY_SERVER_VERSION}`);\n                this.log.push(`[client] Server arguments: ${options.formatServerArguments().join(' ')}`);\n            });\n\n            const client = await ScrcpyClient.start(\n                globalState.device,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                options\n            );\n\n            client.stdout.pipeTo(new WritableStream<string>({\n                write: action((line) => {\n                    this.log.push(line);\n                }),\n            }));\n\n            client.videoStream\n                .pipeThrough(new InspectStream(action((packet: VideoStreamPacket) => {\n                    if (packet.type === 'configuration') {\n                        const { croppedWidth, croppedHeight, } = packet.data;\n                        this.log.push(`[client] Video size changed: ${croppedWidth}x${croppedHeight}`);\n\n                        this.width = croppedWidth;\n                        this.height = croppedHeight;\n                    }\n                })))\n                .pipeTo(decoder.writable)\n                .catch(() => { });\n\n            client.exit.then(() => this.stop());\n\n            client.onClipboardChange(content => {\n                window.navigator.clipboard.writeText(content);\n            });\n\n            runInAction(() => {\n                this.client = client;\n                this.running = true;\n            });\n        } catch (e: any) {\n            globalState.showErrorDialog(e.message);\n        } finally {\n            runInAction(() => {\n                this.connecting = false;\n            });\n        }\n    };\n\n    async stop() {\n        // Request to close client first\n        await this.client?.close();\n\n        // Otherwise some packets may still arrive at decoder\n        this.decoder?.dispose();\n\n        runInAction(() => {\n            this.client = undefined;\n            this.decoder = undefined;\n            this.running = false;\n        });\n    }\n\n    handleDeviceViewRef(element: DeviceViewRef | null) {\n        this.deviceView = element;\n    }\n\n    handleRendererContainerRef(element: HTMLDivElement | null) {\n        this.rendererContainer = element;\n        this.rendererContainer?.addEventListener('wheel', this.handleWheel, { passive: false });\n    };\n\n    handleBackPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.client!.pressBackOrTurnOnScreen(AndroidKeyEventAction.Down);\n    };\n\n    handleBackPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.client!.pressBackOrTurnOnScreen(AndroidKeyEventAction.Up);\n    };\n\n    handleHomePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.homeKeyRepeater?.press();\n    };\n\n    handleHomePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.homeKeyRepeater?.release();\n    };\n\n    handleAppSwitchPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.appSwitchKeyRepeater?.press();\n    };\n\n    handleAppSwitchPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.appSwitchKeyRepeater?.release();\n    };\n\n    handleCurrentEncoderChange(e?: any, option?: IDropdownOption) {\n        if (!option) {\n            return;\n        }\n\n        this.selectedEncoder = option.text;\n    }\n\n    handleSelectedDecoderChange(e?: any, option?: IDropdownOption) {\n        if (!option) {\n            return;\n        }\n\n        this.selectedDecoder = option.data;\n    }\n\n    handleIgnoreDecoderCodecArgsChange(e?: any, checked?: boolean) {\n        if (checked === undefined) {\n            return;\n        }\n        this.ignoreDecoderCodecArgs = checked;\n    }\n\n    handleResolutionChange(e: any, value?: string) {\n        if (value === undefined) {\n            return;\n        }\n        this.resolution = +value;\n    }\n\n    handleBitRateChange(e: any, value?: string) {\n        if (value === undefined) {\n            return;\n        }\n        this.bitRate = +value;\n    }\n\n    handleTunnelForwardChange(event: React.MouseEvent<HTMLElement>, checked?: boolean) {\n        if (checked === undefined) {\n            return;\n        }\n        this.tunnelForward = checked;\n    };\n\n    calculatePointerPosition(clientX: number, clientY: number) {\n        const view = this.rendererContainer!.getBoundingClientRect();\n        const pointerViewX = clientX - view.x;\n        const pointerViewY = clientY - view.y;\n        const pointerScreenX = clamp(pointerViewX / view.width, 0, 1) * this.width;\n        const pointerScreenY = clamp(pointerViewY / view.height, 0, 1) * this.height;\n\n        return {\n            x: pointerScreenX,\n            y: pointerScreenY,\n        };\n    }\n\n    injectTouch = (\n        action: AndroidMotionEventAction,\n        e: React.PointerEvent<HTMLDivElement>\n    ) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectTouch({\n            action,\n            pointerId: e.pointerType === \"mouse\" ? BigInt(-1) : BigInt(e.pointerId),\n            pointerX: x,\n            pointerY: y,\n            pressure: e.pressure * 65535,\n            buttons: e.buttons,\n        });\n    };\n\n    handlePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.rendererContainer!.focus();\n        e.preventDefault();\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.injectTouch(AndroidMotionEventAction.Down, e);\n    };\n\n    handlePointerMove = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(\n            e.buttons === 0 ? AndroidMotionEventAction.HoverMove : AndroidMotionEventAction.Move,\n            e\n        );\n    };\n\n    handlePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(AndroidMotionEventAction.Up, e);\n    };\n\n    handleWheel = (e: WheelEvent) => {\n        if (!this.client) {\n            return;\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectScroll({\n            pointerX: x,\n            pointerY: y,\n            scrollX: -Math.sign(e.deltaX),\n            scrollY: -Math.sign(e.deltaY),\n            buttons: 0,\n        });\n    };\n\n    handleContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    handleKeyDown = async (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { key, code } = e;\n        if (key.match(/^[a-z0-9]$/i)) {\n            this.client!.injectText(key);\n            return;\n        }\n\n        const keyCode = ({\n            Backspace: AndroidKeyCode.Delete,\n            Space: AndroidKeyCode.Space,\n        } as Record<string, AndroidKeyCode | undefined>)[code];\n\n        if (keyCode) {\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Down,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Up,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n        }\n    };\n}\n\nconst state = new ScrcpyPageState();\n\nconst ConnectionDialog = observer(() => {\n    const layerHostId = useId('layerHost');\n\n    const [isClient, setIsClient] = useState(false);\n\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    if (!isClient) {\n        return null;\n    }\n\n    return (\n        <>\n            <LayerHost id={layerHostId} style={{ position: 'absolute', top: 0, bottom: 0, left: 0, right: 0, margin: 0, pointerEvents: 'none' }} />\n\n            <Dialog\n                hidden={!state.connecting}\n                modalProps={{ layerProps: { hostId: layerHostId } }}\n                dialogContentProps={{ title: 'Connecting...' }}\n            >\n                <Stack tokens={CommonStackTokens}>\n                    <ProgressIndicator\n                        label=\"1. Downloading scrcpy server...\"\n                        percentComplete={state.serverTotalSize ? state.serverDownloadedSize / state.serverTotalSize : undefined}\n                        description={formatSpeed(state.debouncedServerDownloadedSize, state.serverTotalSize, state.serverDownloadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"2. Pushing scrcpy server to device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverDownloadedSize !== state.serverTotalSize}\n                        percentComplete={state.serverUploadedSize / state.serverTotalSize}\n                        description={formatSpeed(state.debouncedServerUploadedSize, state.serverTotalSize, state.serverUploadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"3. Starting scrcpy server on device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverUploadedSize !== state.serverTotalSize}\n                    />\n                </Stack>\n            </Dialog>\n        </>\n    );\n});\n\nconst Scrcpy: NextPage = () => {\n    const bottomElement = useMemo(() =>\n        state.navigationBarVisible && (\n            <Stack verticalFill horizontalAlign=\"center\" style={{ height: '40px', background: '#999' }}>\n                <Stack verticalFill horizontal style={{ width: '100%', maxWidth: 300 }} horizontalAlign=\"space-evenly\" verticalAlign=\"center\">\n                    <IconButton\n                        iconProps={{ iconName: Icons.Play }}\n                        style={{ transform: 'rotate(180deg)', color: 'white' }}\n                        onPointerDown={state.handleBackPointerDown}\n                        onPointerUp={state.handleBackPointerUp}\n                    />\n                    <IconButton\n                        iconProps={{ iconName: Icons.Circle }}\n                        style={{ color: 'white' }}\n                        onPointerDown={state.handleHomePointerDown}\n                        onPointerUp={state.handleHomePointerUp}\n                    />\n                    <IconButton\n                        iconProps={{ iconName: Icons.Stop }}\n                        style={{ color: 'white' }}\n                        onPointerDown={state.handleAppSwitchPointerDown}\n                        onPointerUp={state.handleAppSwitchPointerUp}\n                    />\n                </Stack>\n            </Stack>\n        ),\n        [state.navigationBarVisible]\n    );\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Scrcpy - WebADB</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} farItems={state.commandBarFarItems} />\n\n            <Stack horizontal grow styles={{ root: { height: 0 } }}>\n                <DeviceView\n                    ref={state.handleDeviceViewRef}\n                    width={state.width}\n                    height={state.height}\n                    bottomElement={bottomElement}\n                >\n                    <div\n                        ref={state.handleRendererContainerRef}\n                        tabIndex={-1}\n                        onPointerDown={state.handlePointerDown}\n                        onPointerMove={state.handlePointerMove}\n                        onPointerUp={state.handlePointerUp}\n                        onPointerCancel={state.handlePointerUp}\n                        onKeyDown={state.handleKeyDown}\n                        onContextMenu={state.handleContextMenu}\n                    />\n                </DeviceView>\n\n                <div style={{\n                    padding: 12,\n                    overflow: 'hidden auto',\n                    display: state.logVisible ? 'block' : 'none',\n                    width: 500,\n                    fontFamily: 'monospace',\n                    overflowY: 'auto',\n                    whiteSpace: 'pre-wrap',\n                    wordWrap: 'break-word',\n                }}>\n                    {state.log.map((line, index) => (\n                        <div key={index}>\n                            {line}\n                        </div>\n                    ))}\n                </div>\n\n                <div style={{ padding: 12, overflow: 'hidden auto', display: state.settingsVisible ? 'block' : 'none', width: 300 }}>\n                    <div>Changes will take effect on next connection</div>\n\n                    <Dropdown\n                        label=\"Encoder\"\n                        options={state.encoders.map(item => ({ key: item, text: item }))}\n                        selectedKey={state.selectedEncoder}\n                        placeholder=\"Connect once to retrieve encoder list\"\n                        onChange={state.handleCurrentEncoderChange}\n                    />\n\n                    {state.decoders.length > 1 && (\n                        <Dropdown\n                            label=\"Decoder\"\n                            options={state.decoders.map(item => ({ key: item.name, text: item.name, data: item }))}\n                            selectedKey={state.selectedDecoder.name}\n                            onChange={state.handleSelectedDecoderChange}\n                        />\n                    )}\n\n                    <Toggle\n                        label={\n                            <>\n                                <span>{`Ignore decoder's codec arguments `}</span>\n                                <TooltipHost content=\"Some decoders don't support all H.264 profile/levels, so they request the device to encode at their highest-supported codec. However, some super old devices may not support that codec so their encoders will fail to start. Use this option to let device choose the codec to be used.\">\n                                    <Icon iconName={Icons.Info} />\n                                </TooltipHost>\n                            </>\n                        }\n                        checked={state.ignoreDecoderCodecArgs}\n                        onChange={state.handleIgnoreDecoderCodecArgsChange}\n                    />\n\n                    <SpinButton\n                        label=\"Max Resolution (longer side, 0 = unlimited)\"\n                        labelPosition={Position.top}\n                        value={state.resolution.toString()}\n                        min={0}\n                        max={2560}\n                        step={100}\n                        onChange={state.handleResolutionChange}\n                    />\n\n                    <SpinButton\n                        label=\"Max Bit Rate\"\n                        labelPosition={Position.top}\n                        value={state.bitRate.toString()}\n                        min={100}\n                        max={10_000_000}\n                        step={100}\n                        onChange={state.handleBitRateChange}\n                    />\n\n                    <Toggle\n                        label={\n                            <>\n                                <span>Use forward connection{' '}</span>\n                                <TooltipHost content=\"Old Android devices may not support reverse connection when using ADB over WiFi\">\n                                    <Icon iconName={Icons.Info} />\n                                </TooltipHost>\n                            </>\n                        }\n                        checked={state.tunnelForward}\n                        onChange={state.handleTunnelForwardChange}\n                    />\n                </div>\n\n                <DemoModePanel\n                    style={{ display: state.demoModeVisible ? 'block' : 'none' }}\n                />\n\n                <ConnectionDialog />\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default observer(Scrcpy);\n"],"names":["window","__NEXT_P","push","ScrcpyControlMessageType","AndroidMotionEventAction","LayerHost","props","className","layerHostId","getId","_a","id","hostId","layerHostRef","rootRef","notifyLayersChanged","componentRef","current","useUnmount","css","ref","ScrcpyInjectTouchControlMessage","uint8","InjectTouch","uint64","uint32","uint16","ScrcpyInjectTextControlMessage","InjectText","string","lengthField","AndroidKeyEventAction","AndroidKeyCode","ScrcpyInjectKeyCodeControlMessage","InjectKeycode","ClipboardMessage","ScrcpyClient","constructor","adb","options","process","videoStream","controlStream","this","clipboardChangeEvent","lastTouchMessage","_adb","_stdout","stdout","pipeThrough","DecodeUtf8Stream","TransformStream","transform","chunk","controller","line","text","start","index","indexOf","substring","splitLines","enqueue","_videoStream","readable","createVideoStreamTransformer","InspectStream","packet","type","_screenWidth","data","croppedWidth","_screenHeight","croppedHeight","buffered","AdbBufferedStream","_controlStreamWriter","writable","getWriter","read","Error","content","deserialize","fire","static","path","version","value","encoderName","control","client","encoderNameRegex","getOutputEncoderNameRegex","encoders","pipeTo","WritableStream","write","match","connection","createConnection","initialize","subprocess","spawn","formatServerArguments","protocols","AdbNoneSubprocessProtocol","result","Promise","race","exit","getStreams","e","kill","dispose","screenWidth","screenHeight","onClipboardChange","event","checkControlStream","caller","injectKeyCode","message","serialize","Object","assign","injectText","injectTouch","now","Date","Move","HoverMove","includes","action","injectScroll","buffer","serializeInjectScrollControlMessage","InjectScroll","pressBackOrTurnOnScreen","serializeBackOrScreenOnControlMessage","BackOrScreenOn","close","AndroidCodecProfile","AndroidCodecLevel","delay","time","resolve","globalThis","setTimeout","TextEncoder","TextDecoder","ScrcpyClientConnection","device","ScrcpyClientForwardConnection","connect","createSocket","connectAndRetry","i","connectVideoStream","stream","sendDummyByte","reader","getReader","done","byteLength","releaseLock","sendDeviceMeta","ScrcpyClientReverseConnection","reverse","remove","queue","streams","writer","address","add","onSocket","accept","worker","workerReady","pendingResolvers","streamId","pictureReadyEvent","TinyH264Wrapper","super","addDisposable","handlePictureReady","onPictureReady","renderStateId","feed","postMessage","offset","length","cachedInitializePromise","all","then","YuvBuffer","default","YuvCanvas","TinyH264Decoder","maxProfile","Baseline","maxLevel","Level4","_frameRendered","_renderer","document","createElement","_writable","configure","_initializer","promise","slice","renderer","frameRendered","config","_yuvCanvas","attach","encodedWidth","encodedHeight","chromaWidth","chromaHeight","width","height","format","cropLeft","cropTop","cropWidth","cropHeight","displayWidth","displayHeight","wrapper","Worker","URL","addEventListener","resolver","decoder","createTinyH264Wrapper","uPlaneOffset","vPlaneOffset","array","Uint8Array","frame","lumaPlane","chromaPlane","drawFrame","undefined","toHex","toString","padStart","toUpperCase","WebCodecsDecoder","animationFrame","render","lastFrame","context","drawImage","requestAnimationFrame","getContext","VideoDecoder","output","error","decode","EncodedVideoChunk","keyframe","timestamp","profileIndex","constraintSet","levelIndex","codec","map","join","optimizeForLatency","cancelAnimationFrame","DEFAULT_SERVER_PATH","toScrcpyOptionValue","empty","toOptionValue","isScrcpyOptionValue","BitReader","bytePosition","bitPosition","next","decodeExponentialGolombNumber","parse_sequence_parameter_set","nalu","writeIndex","zeroCount","inEmulation","byte","lastZeroCount","subarray","iterateNalu","nal_ref_idc","profile_idc","constraint_set","constraint_set_reader","constraint_set0_flag","constraint_set1_flag","constraint_set2_flag","constraint_set3_flag","constraint_set4_flag","constraint_set5_flag","level_idc","seq_parameter_set_id","chroma_format_idc","seq_scaling_list_present_flag","pic_order_cnt_type","num_ref_frames_in_pic_order_cnt_cycle","offset_for_ref_frame","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","frame_cropping_flag","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","ScrcpyLogLevel","ScrcpyScreenOrientation","CodecOptions","entries","filter","key","VideoPacket","uint8Array","NO_PTS","BigInt","ScrcpyBackOrScreenOnEvent1_16","ScrcpyInjectScrollControlMessage1_16","int32","ScrcpyOptions1_16","logLevel","Verbose","Debug","lockVideoOrientation","Initial","Unlocked","getArgumentOrder","getDefaultValue","maxSize","bitRate","maxFps","tunnelForward","crop","sendFrameMeta","displayId","showTouches","stayAwake","codecOptions","defaults","header","deserializeStream","StructDeserializeStream","pts","sequenceParameterSet","cropRight","cropBottom","frameData","set","Down","ScrcpyBackOrScreenOnEvent1_18","fields","ScrcpyOptions1_18","concat","powerOffOnClose","ScrcpyOptions1_21","init","clipboardAutosync","pair","input","replace","toLowerCase","ScrcpyInjectScrollControlMessage1_22","ScrcpyOptions1_22","rawVideoStream","downsizeOnError","_b","_c","defaultValue","KEYFRAME_PTS","ScrcpyOptions1_23","cleanup","superStream","pushServer","WrapWritableStream","sync","state","cachedValue","SERVER_URL","FetchWithProgress","url","_downloaded","_total","progressEvent","EventEmitter","fetch","response","chunks","position","Number","parseInt","headers","get","body","reduce","item","downloaded","total","onProgress","clamp","min","max","KeyRepeater","interval","press","timeoutId","keyCode","repeat","metaState","intervalId","setInterval","onRelease","clearInterval","clearTimeout","release","Up","ScrcpyPageState","running","deviceView","rendererContainer","logVisible","log","settingsVisible","demoModeVisible","navigationBarVisible","selectedEncoder","decoders","name","factory","selectedDecoder","ignoreDecoderCodecArgs","resolution","connecting","serverTotalSize","serverDownloadedSize","debouncedServerDownloadedSize","serverDownloadSpeed","serverUploadedSize","debouncedServerUploadedSize","serverUploadSpeed","homeKeyRepeater","appSwitchKeyRepeater","serverBuffer","globalState","runInAction","catch","ReadableStream","ChunkStream","ADB_SYNC_MAX_PACKET_SIZE","ProgressStream","progress","getEncoders","SCRCPY_SERVER_VERSION","profile","level","stop","navigator","clipboard","writeText","handleBackPointerDown","button","currentTarget","setPointerCapture","pointerId","handleBackPointerUp","handleHomePointerDown","handleHomePointerUp","handleAppSwitchPointerDown","handleAppSwitchPointerUp","calculatePointerPosition","clientX","clientY","x","y","pointerType","pointerX","pointerY","pressure","buttons","handlePointerDown","focus","preventDefault","handlePointerMove","handlePointerUp","handleWheel","stopPropagation","scrollX","Math","sign","deltaX","scrollY","deltaY","handleContextMenu","handleKeyDown","code","Backspace","Delete","Space","makeAutoObservable","observable","handleDeviceViewRef","handleRendererContainerRef","handleCurrentEncoderChange","handleSelectedDecoderChange","handleIgnoreDecoderCodecArgsChange","handleResolutionChange","handleTunnelForwardChange","handleBitRateChange","autorun","firstChild","appendChild","Home","AppSwitch","unshift","element","passive","option","checked","view","getBoundingClientRect","pointerViewX","pointerViewY","commandBarItems","iconProps","iconName","Icons","onClick","disabled","enterFullscreen","commandBarFarItems","iconOnly","tooltipHostProps","p","ExternalLink","href","spaceAfter","calloutProps","calloutMaxWidth","ConnectionDialog","observer","useId","useState","isClient","setIsClient","useEffect","style","top","bottom","left","right","margin","pointerEvents","Dialog","hidden","modalProps","layerProps","dialogContentProps","title","Stack","tokens","CommonStackTokens","ProgressIndicator","label","percentComplete","description","formatSpeed","progressHidden","bottomElement","useMemo","verticalFill","horizontalAlign","background","horizontal","maxWidth","verticalAlign","IconButton","color","onPointerDown","onPointerUp","RouteStackProps","Head","CommandBar","items","farItems","grow","styles","root","DeviceView","div","tabIndex","onPointerMove","onPointerCancel","onKeyDown","onContextMenu","padding","overflow","display","fontFamily","overflowY","whiteSpace","wordWrap","Dropdown","selectedKey","placeholder","onChange","Toggle","span","TooltipHost","Icon","SpinButton","labelPosition","Position","step","DemoModePanel"],"sourceRoot":""}