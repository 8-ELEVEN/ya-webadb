{"version":3,"file":"static/chunks/pages/packet-log-69b37efc370f94a7.js","mappings":"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","sources":["webpack://_N_E/?0b91","webpack://_N_E/./src/pages/packet-log.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/packet-log\",\n      function () {\n        return require(\"private-next-pages/packet-log.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/packet-log\"])\n      });\n    }\n  ","import { ICommandBarItemProps, Stack, StackItem } from \"@fluentui/react\";\nimport { makeStyles, mergeClasses, shorthands } from \"@griffel/react\";\nimport { AdbCommand, decodeUtf8 } from \"@yume-chan/adb\";\nimport { makeAutoObservable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { useMemo, useState } from \"react\";\nimport { CommandBar, Grid, GridCellProps, GridColumn, GridHeaderProps, GridRowProps } from \"../components\";\nimport { globalState, PacketLogItem } from \"../state\";\nimport { Icons, RouteStackProps, useCallbackRef, withDisplayName } from \"../utils\";\n\nconst ADB_COMMAND_NAME = {\n    [AdbCommand.Auth]: 'AUTH',\n    [AdbCommand.Close]: 'CLSE',\n    [AdbCommand.Connect]: 'CNXN',\n    [AdbCommand.OK]: 'OKAY',\n    [AdbCommand.Open]: 'OPEN',\n    [AdbCommand.Write]: 'WRTE',\n};\n\ninterface Column<T> extends GridColumn {\n    title: string;\n}\n\nconst LINE_HEIGHT = 32;\n\nconst PRINTABLE_CHARACTERS: [number, number][] = [\n    [33, 126],\n    [161, 172],\n    [174, 255],\n];\n\nfunction isPrintableCharacter(code: number) {\n    return PRINTABLE_CHARACTERS.some(\n        ([start, end]) =>\n            code >= start &&\n            code <= end\n    );\n}\n\nfunction toCharacter(code: number) {\n    if (isPrintableCharacter(code))\n        return String.fromCharCode(code);\n    return '.';\n}\n\nfunction toText(data: Uint8Array) {\n    let result = '';\n    for (const code of data) {\n        result += toCharacter(code);\n    }\n    return result;\n}\n\nconst state = new class {\n    get commandBarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: 'clear',\n                disabled: !globalState.device,\n                iconProps: { iconName: Icons.Delete },\n                text: 'Clear',\n                onClick: () => globalState.clearLog(),\n            }\n        ];\n    }\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n};\n\nconst useClasses = makeStyles({\n    grid: {\n        height: '100%',\n    },\n    header: {\n        textAlign: 'center',\n        lineHeight: `${LINE_HEIGHT}px`,\n    },\n    row: {\n        '&:hover': {\n            backgroundColor: '#f3f2f1',\n        },\n    },\n    selected: {\n        backgroundColor: '#edebe9',\n    },\n    code: {\n        fontFamily: 'monospace',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        lineHeight: LINE_HEIGHT + 'px',\n        cursor: 'default',\n        ...shorthands.overflow('hidden'),\n    },\n});\n\nconst PacketLog: NextPage = () => {\n    const classes = useClasses();\n\n    const columns: Column<PacketLogItem>[] = useMemo(() => [\n        {\n            key: 'direction',\n            title: 'Direction',\n            width: 100,\n            CellComponent: withDisplayName('Direction')(({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = globalState.logs[rowIndex];\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.direction}\n                    </div>\n                );\n            }),\n        },\n        {\n            key: 'command',\n            title: 'Command',\n            width: 100,\n            CellComponent: withDisplayName('Command')(({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = globalState.logs[rowIndex];\n\n                if (!item.commandString) {\n                    item.commandString =\n                        ADB_COMMAND_NAME[item.command as AdbCommand] ??\n                        decodeUtf8(new Uint32Array([item.command]));\n                }\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.commandString}\n                    </div>\n                );\n            }),\n        },\n        {\n            key: 'arg0',\n            title: 'Arg0',\n            width: 100,\n            CellComponent: withDisplayName('Command')(({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = globalState.logs[rowIndex];\n\n                if (!item.arg0String) {\n                    item.arg0String = item.arg0.toString(16).padStart(8, '0');\n                }\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.arg0String}\n                    </div>\n                );\n            }),\n        },\n        {\n            key: 'arg1',\n            title: 'Arg1',\n            width: 100,\n            CellComponent: withDisplayName('Command')(({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = globalState.logs[rowIndex];\n\n                if (!item.arg1String) {\n                    item.arg1String = item.arg0.toString(16).padStart(8, '0');\n                }\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.arg1String}\n                    </div>\n                );\n            }),\n        },\n        {\n            key: 'payload',\n            title: 'Payload',\n            width: 200,\n            flexGrow: 1,\n            CellComponent: withDisplayName('Command')(({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = globalState.logs[rowIndex];\n\n                if (!item.payloadString) {\n                    item.payloadString = toText(item.payload.subarray(0, 100));\n                }\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.payloadString}\n                    </div>\n                );\n            }),\n        },\n    ], [classes.code]);\n\n    const [selectedRowIndex, setSelectedRowIndex] = useState(-1);\n\n    const Header = useMemo(() => withDisplayName('Header')(({ className, columnIndex, ...rest }: GridHeaderProps) => {\n        return (\n            <div className={mergeClasses(className, classes.header)} {...rest}>\n                {columns[columnIndex].title}\n            </div>\n        );\n    }), [classes.header, columns]);\n\n    const Row = useMemo(() => withDisplayName('Row')(({\n        className,\n        rowIndex,\n        ...rest\n    }: GridRowProps) => {\n        /* eslint-disable-next-line */\n        const handleClick = useCallbackRef(() => {\n            setSelectedRowIndex(rowIndex);\n        });\n\n        return (\n            <div\n                className={mergeClasses(\n                    className,\n                    classes.row,\n                    selectedRowIndex === rowIndex && classes.selected\n                )}\n                onClick={handleClick}\n                {...rest}\n            />\n        );\n    }), [classes, selectedRowIndex]);\n\n    return (\n        <Stack {...RouteStackProps} tokens={{}}>\n            <Head>\n                <title>Packet Log - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} />\n\n            <StackItem basis={0} grow>\n                <Grid\n                    className={classes.grid}\n                    rowCount={globalState.logs.length}\n                    rowHeight={LINE_HEIGHT}\n                    columns={columns}\n                    HeaderComponent={Header}\n                    RowComponent={Row}\n                />\n            </StackItem>\n\n            <StackItem grow>\n                {selectedRowIndex !== -1 && (\n                    <div>\n\n                    </div>\n                )}\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(PacketLog);\n"],"names":["window","__NEXT_P","push","ADB_COMMAND_NAME","AdbCommand","PRINTABLE_CHARACTERS","isPrintableCharacter","code","some","start","end","toCharacter","String","fromCharCode","toText","data","result","state","makeAutoObservable","this","commandBarItems","key","disabled","globalState","iconProps","iconName","Icons","text","onClick","useClasses","makeStyles","grid","height","header","textAlign","lineHeight","row","backgroundColor","selected","fontFamily","textOverflow","whiteSpace","LINE_HEIGHT","cursor","shorthands","observer","classes","columns","useMemo","title","width","CellComponent","withDisplayName","className","rowIndex","rest","item","div","mergeClasses","direction","commandString","command","decodeUtf8","Uint32Array","arg0String","arg0","toString","padStart","arg1String","flexGrow","payloadString","payload","subarray","useState","selectedRowIndex","setSelectedRowIndex","Header","columnIndex","Row","handleClick","useCallbackRef","Stack","RouteStackProps","tokens","Head","CommandBar","items","StackItem","basis","grow","Grid","rowCount","rowHeight","HeaderComponent","RowComponent"],"sourceRoot":""}