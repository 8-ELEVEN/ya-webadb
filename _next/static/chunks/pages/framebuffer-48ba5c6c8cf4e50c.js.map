{"version":3,"file":"static/chunks/pages/framebuffer-48ba5c6c8cf4e50c.js","mappings":"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","sources":["webpack://_N_E/?845c","webpack://_N_E/./pages/framebuffer.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/next@12.0.11-canary.9_react-dom@17.0.2+react@17.0.2/node_modules/next/head.js"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/framebuffer\",\n      function () {\n        return require(\"private-next-pages/framebuffer.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/framebuffer\"])\n      });\n    }\n  ","import { ICommandBarItemProps, Stack } from '@fluentui/react';\nimport { AdbFrameBuffer } from \"@yume-chan/adb\";\nimport { action, autorun, computed, makeAutoObservable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { CommandBar, DemoMode, DeviceView } from '../components';\nimport { globalState } from \"../state\";\nimport { Icons, RouteStackProps } from \"../utils\";\n\nclass FrameBufferState {\n    width = 0;\n    height = 0;\n    imageData: ImageData | undefined = undefined;\n    demoModeVisible = false;\n\n    constructor() {\n        makeAutoObservable(this, {\n            toggleDemoModeVisible: action.bound,\n        });\n    }\n\n    setImage(image: AdbFrameBuffer) {\n        this.width = image.width;\n        this.height = image.height;\n        this.imageData = new ImageData(image.data, image.width, image.height);\n    }\n\n    toggleDemoModeVisible() {\n        this.demoModeVisible = !this.demoModeVisible;\n    }\n}\n\nconst state = new FrameBufferState();\n\nconst FrameBuffer: NextPage = (): JSX.Element | null => {\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n    const capture = useCallback(async () => {\n        if (!globalState.device) {\n            return;\n        }\n\n        try {\n            const framebuffer = await globalState.device.framebuffer();\n            state.setImage(framebuffer);\n        } catch (e) {\n            globalState.showErrorDialog(e instanceof Error ? e.message : `${e}`);\n        }\n    }, []);\n\n    useEffect(() => {\n        return autorun(() => {\n            const canvas = canvasRef.current;\n            if (canvas && state.imageData) {\n                canvas.width = state.width;\n                canvas.height = state.height;\n                const context = canvas.getContext(\"2d\")!;\n                context.putImageData(state.imageData, 0, 0);\n            }\n        });\n    }, []);\n\n    const commandBarItems = computed(() => [\n        {\n            key: 'start',\n            disabled: !globalState.device,\n            iconProps: { iconName: Icons.Camera, style: { height: 20, fontSize: 20, lineHeight: 1.5 } },\n            text: 'Capture',\n            onClick: capture,\n        },\n        {\n            key: 'Save',\n            disabled: !state.imageData,\n            iconProps: { iconName: Icons.Save, style: { height: 20, fontSize: 20, lineHeight: 1.5 } },\n            text: 'Save',\n            onClick: () => {\n                const canvas = canvasRef.current;\n                if (!canvas) {\n                    return;\n                }\n\n                const url = canvas.toDataURL();\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = `Screenshot of ${globalState.device!.name}.png`;\n                a.click();\n            },\n        },\n    ]);\n\n    const commandBarFarItems = computed((): ICommandBarItemProps[] => [\n        {\n            key: 'DemoMode',\n            iconProps: { iconName: Icons.Wand, style: { height: 20, fontSize: 20, lineHeight: 1.5 } },\n            checked: state.demoModeVisible,\n            text: 'Demo Mode',\n            onClick: state.toggleDemoModeVisible,\n        },\n        {\n            key: 'info',\n            iconProps: { iconName: Icons.Info, style: { height: 20, fontSize: 20, lineHeight: 1.5 } },\n            iconOnly: true,\n            tooltipHostProps: {\n                content: 'Use ADB FrameBuffer command to capture a full-size, high-resolution screenshot.',\n                calloutProps: {\n                    calloutMaxWidth: 250,\n                }\n            },\n        }\n    ]);\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Screen Capture - WebADB</title>\n            </Head>\n\n            <CommandBar items={commandBarItems.get()} farItems={commandBarFarItems.get()} />\n            <Stack horizontal grow styles={{ root: { height: 0 } }}>\n                <DeviceView width={state.width} height={state.height}>\n                    <canvas ref={canvasRef} style={{ display: 'block' }} />\n                </DeviceView>\n\n                <DemoMode style={{ display: state.demoModeVisible ? 'block' : 'none' }} />\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default observer(FrameBuffer);\n","module.exports = require('./dist/shared/lib/head')\n"],"names":["window","__NEXT_P","push","state","FrameBufferState","width","height","imageData","undefined","demoModeVisible","makeAutoObservable","this","toggleDemoModeVisible","action","setImage","image","ImageData","data","observer","canvasRef","useRef","capture","useCallback","framebuffer","globalState","Error","message","useEffect","autorun","canvas","current","getContext","putImageData","commandBarItems","computed","key","disabled","iconProps","iconName","Icons","style","fontSize","lineHeight","text","onClick","url","toDataURL","a","document","createElement","href","download","click","commandBarFarItems","checked","iconOnly","tooltipHostProps","content","calloutProps","calloutMaxWidth","Stack","RouteStackProps","Head","title","CommandBar","items","get","farItems","horizontal","grow","styles","root","DeviceView","ref","display","DemoMode","module","exports"],"sourceRoot":""}