{"version":3,"file":"static/chunks/pages/scrcpy-87d3723328cff3c9.js","mappings":"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","sources":["webpack://_N_E/?d793","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.104.0_ib3m5ricvtkl2cll7qpr2f6lvq/node_modules/@fluentui/react/lib/components/src/components/Layer/LayerHost.tsx","webpack://_N_E/../../libraries/scrcpy/src/adb/connection.ts","webpack://_N_E/../../libraries/scrcpy/src/adb/options/types.ts","webpack://_N_E/../../libraries/scrcpy/src/adb/options/1_16.ts","webpack://_N_E/../../libraries/scrcpy/src/adb/options/1_22.ts","webpack://_N_E/../../libraries/scrcpy/src/adb/options/index.ts","webpack://_N_E/../../libraries/scrcpy/src/control/type.ts","webpack://_N_E/../../libraries/scrcpy/src/control/inject-keycode.ts","webpack://_N_E/../../libraries/scrcpy/src/control/inject-text.ts","webpack://_N_E/../../libraries/scrcpy/src/control/inject-touch.ts","webpack://_N_E/../../libraries/scrcpy/src/control/rotate-device.ts","webpack://_N_E/../../libraries/scrcpy/src/control/set-screen-power-mode.ts","webpack://_N_E/../../libraries/scrcpy/src/control/serializer.ts","webpack://_N_E/../../libraries/scrcpy/src/control/index.ts","webpack://_N_E/../../libraries/scrcpy/src/device-message/type.ts","webpack://_N_E/../../libraries/scrcpy/src/device-message/clipboard.ts","webpack://_N_E/../../libraries/scrcpy/src/device-message/stream.ts","webpack://_N_E/../../libraries/scrcpy/src/device-message/index.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/codec-options.ts","webpack://_N_E/../../libraries/scrcpy/src/options/types.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/scroll.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/sps.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/options.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/index.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_18.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_21.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_22/scroll.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_22/options.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_22/index.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_23.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_24.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_25/scroll.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_25/options.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_25/index.ts","webpack://_N_E/../../libraries/scrcpy/src/options/index.ts","webpack://_N_E/../../libraries/scrcpy/src/adb/client.ts","webpack://_N_E/../../libraries/scrcpy/src/adb/index.ts","webpack://_N_E/../../libraries/scrcpy/src/codec.ts","webpack://_N_E/../../libraries/scrcpy/src/index.ts","webpack://_N_E/../../libraries/scrcpy-decoder-tinyh264/src/wrapper.ts","webpack://_N_E/../../libraries/scrcpy-decoder-tinyh264/src/index.ts","webpack://_N_E/../../libraries/scrcpy-decoder-webcodecs/src/index.ts","webpack://_N_E/../../libraries/scrcpy/bin/version.js","webpack://_N_E/./src/pages/scrcpy.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/scrcpy\",\n      function () {\n        return require(\"private-next-pages/scrcpy.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/scrcpy\"])\n      });\n    }\n  ","import * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nimport type { ILayerHost, ILayerHostProps } from './LayerHost.types';\n\nexport const LayerHost: React.FunctionComponent<ILayerHostProps> = props => {\n  const { className } = props;\n\n  const [layerHostId] = React.useState(() => getId());\n\n  const { id: hostId = layerHostId } = props;\n\n  const layerHostRef = React.useRef<ILayerHost>({\n    hostId,\n    rootRef: React.useRef<HTMLDivElement | null>(null),\n    notifyLayersChanged: () => {\n      // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n    },\n  });\n\n  React.useImperativeHandle(props.componentRef, () => layerHostRef.current);\n\n  React.useEffect(() => {\n    registerLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useUnmount(() => {\n    unregisterLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n  });\n\n  return <div {...props} className={css('ms-LayerHost', className)} ref={layerHostRef.current.rootRef} />;\n};\n","import { type Adb } from \"@yume-chan/adb\";\nimport { delay } from \"@yume-chan/async\";\nimport { type Disposable } from \"@yume-chan/event\";\nimport {\n    TransformStream,\n    type ReadableStream,\n    type ReadableStreamDefaultReader,\n    type ReadableWritablePair,\n} from \"@yume-chan/stream-extra\";\nimport { type ValueOrPromise } from \"@yume-chan/struct\";\n\nexport interface AdbScrcpyConnectionOptions {\n    control: boolean;\n\n    /**\n     * Write a byte on start to detect connection issues\n     */\n    sendDummyByte: boolean;\n\n    /**\n     * Send device name and size\n     */\n    sendDeviceMeta: boolean;\n}\n\nexport abstract class AdbScrcpyConnection implements Disposable {\n    protected adb: Adb;\n\n    protected options: AdbScrcpyConnectionOptions;\n\n    public constructor(adb: Adb, options: AdbScrcpyConnectionOptions) {\n        this.adb = adb;\n        this.options = options;\n    }\n\n    public initialize(): ValueOrPromise<void> {\n        // do nothing\n    }\n\n    public abstract getStreams(): ValueOrPromise<\n        [\n            videoSteam: ReadableStream<Uint8Array>,\n            controlStream:\n                | ReadableWritablePair<Uint8Array, Uint8Array>\n                | undefined\n        ]\n    >;\n\n    public dispose(): void {\n        // do nothing\n    }\n}\n\nexport class AdbScrcpyForwardConnection extends AdbScrcpyConnection {\n    private connect(): Promise<ReadableWritablePair<Uint8Array, Uint8Array>> {\n        return this.adb.createSocket(\"localabstract:scrcpy\");\n    }\n\n    private async connectAndRetry(): Promise<\n        ReadableWritablePair<Uint8Array, Uint8Array>\n    > {\n        for (let i = 0; i < 100; i += 1) {\n            try {\n                return await this.connect();\n            } catch (e) {\n                await delay(100);\n            }\n        }\n        throw new Error(`Can't connect to server after 100 retries`);\n    }\n\n    private async connectVideoStream(): Promise<ReadableStream<Uint8Array>> {\n        const { readable: videoStream } = await this.connectAndRetry();\n        if (this.options.sendDummyByte) {\n            const reader = videoStream.getReader();\n            const { done, value } = await reader.read();\n            // server will write a `0` to signal connection success\n            if (done || value.byteLength !== 1 || value[0] !== 0) {\n                throw new Error(\"Unexpected response from server\");\n            }\n            reader.releaseLock();\n        }\n        return videoStream;\n    }\n\n    public async getStreams(): Promise<\n        [\n            videoSteam: ReadableStream<Uint8Array>,\n            controlStream:\n                | ReadableWritablePair<Uint8Array, Uint8Array>\n                | undefined\n        ]\n    > {\n        const videoStream = await this.connectVideoStream();\n\n        let controlStream:\n            | ReadableWritablePair<Uint8Array, Uint8Array>\n            | undefined;\n        if (this.options.control) {\n            controlStream = await this.connectAndRetry();\n        }\n\n        // Server only writes device meta after control socket is connected (if enabled)\n        if (this.options.sendDeviceMeta) {\n            const reader = videoStream.getReader();\n            const { done, value } = await reader.read();\n            // 64 bytes device name + 2 bytes video width + 2 bytes video height\n            if (done || value.byteLength !== 64 + 2 + 2) {\n                throw new Error(\"Unexpected response from server\");\n            }\n            reader.releaseLock();\n        }\n\n        return [videoStream, controlStream];\n    }\n}\n\nexport class AdbScrcpyReverseConnection extends AdbScrcpyConnection {\n    private streams!: ReadableStreamDefaultReader<\n        ReadableWritablePair<Uint8Array, Uint8Array>\n    >;\n\n    private address!: string;\n\n    public override async initialize(): Promise<void> {\n        // try to unbind first, ignore errors\n        await this.adb.reverse.remove(\"localabstract:scrcpy\").catch((e) => {\n            void e;\n        });\n\n        const queue = new TransformStream<\n            ReadableWritablePair<Uint8Array, Uint8Array>,\n            ReadableWritablePair<Uint8Array, Uint8Array>\n        >();\n        this.streams = queue.readable.getReader();\n        const writer = queue.writable.getWriter();\n        this.address = await this.adb.reverse.add(\n            \"localabstract:scrcpy\",\n            \"tcp:27183\",\n            (socket) => {\n                void writer.write(socket);\n                return true;\n            }\n        );\n    }\n\n    private async accept(): Promise<\n        ReadableWritablePair<Uint8Array, Uint8Array>\n    > {\n        return (await this.streams.read()).value!;\n    }\n\n    public async getStreams(): Promise<\n        [\n            videoSteam: ReadableStream<Uint8Array>,\n            controlStream:\n                | ReadableWritablePair<Uint8Array, Uint8Array>\n                | undefined\n        ]\n    > {\n        const { readable: videoStream } = await this.accept();\n\n        let controlStream:\n            | ReadableWritablePair<Uint8Array, Uint8Array>\n            | undefined;\n        if (this.options.control) {\n            controlStream = await this.accept();\n        }\n\n        // Server only writes device meta after control socket is connected (if enabled)\n        if (this.options.sendDeviceMeta) {\n            const reader = videoStream.getReader();\n            const { done, value } = await reader.read();\n            // 64 bytes device name + 2 bytes video width + 2 bytes video height\n            if (done || value.byteLength !== 64 + 2 + 2) {\n                throw new Error(\"Unexpected response from server\");\n            }\n            reader.releaseLock();\n        }\n\n        return [videoStream, controlStream];\n    }\n\n    public override dispose() {\n        // Don't await this!\n        // `reverse.remove`'s response will never arrive\n        // before we read all pending data from `videoStream`\n        this.adb.reverse.remove(this.address).catch((e) => {\n            void e;\n        });\n    }\n}\n","import { type Adb } from \"@yume-chan/adb\";\nimport { type TransformStream } from \"@yume-chan/stream-extra\";\n\nimport {\n    type ScrcpyBackOrScreenOnControlMessage,\n    type ScrcpyControlMessageType,\n} from \"../../control/index.js\";\nimport {\n    type ScrcpyOptions,\n    type ScrcpyVideoStreamPacket,\n} from \"../../options/index.js\";\nimport { type AdbScrcpyConnection } from \"../connection.js\";\n\nexport interface AdbScrcpyOptions<T extends object> extends ScrcpyOptions<T> {\n    createConnection(adb: Adb): AdbScrcpyConnection;\n}\n\nexport abstract class AdbScrcpyOptionsBase<T extends object>\n    implements ScrcpyOptions<T>\n{\n    private raw: ScrcpyOptions<T>;\n\n    public get value(): Partial<T> {\n        return this.raw.value;\n    }\n    public set value(value: Partial<T>) {\n        this.raw.value = value;\n    }\n\n    public constructor(raw: ScrcpyOptions<T>) {\n        this.raw = raw;\n    }\n\n    public getDefaultValue(): T {\n        return this.raw.getDefaultValue();\n    }\n\n    public formatServerArguments(): string[] {\n        return this.raw.formatServerArguments();\n    }\n\n    public getOutputEncoderNameRegex(): RegExp {\n        return this.raw.getOutputEncoderNameRegex();\n    }\n\n    public createVideoStreamTransformer(): TransformStream<\n        Uint8Array,\n        ScrcpyVideoStreamPacket\n    > {\n        return this.raw.createVideoStreamTransformer();\n    }\n\n    public getControlMessageTypes(): ScrcpyControlMessageType[] {\n        return this.raw.getControlMessageTypes();\n    }\n\n    public serializeBackOrScreenOnControlMessage(\n        message: ScrcpyBackOrScreenOnControlMessage\n    ): Uint8Array | undefined {\n        return this.raw.serializeBackOrScreenOnControlMessage(message);\n    }\n\n    public getScrollController() {\n        return this.raw.getScrollController();\n    }\n\n    public abstract createConnection(adb: Adb): AdbScrcpyConnection;\n}\n","import { type Adb } from \"@yume-chan/adb\";\n\nimport { type ScrcpyOptionsInit1_16 } from \"../../options/index.js\";\nimport {\n    AdbScrcpyForwardConnection,\n    AdbScrcpyReverseConnection,\n    type AdbScrcpyConnection,\n    type AdbScrcpyConnectionOptions,\n} from \"../connection.js\";\n\nimport { AdbScrcpyOptionsBase } from \"./types.js\";\n\nexport class AdbScrcpyOptions1_16<\n    T extends ScrcpyOptionsInit1_16 = ScrcpyOptionsInit1_16\n> extends AdbScrcpyOptionsBase<T> {\n    public override createConnection(adb: Adb): AdbScrcpyConnection {\n        const options: AdbScrcpyConnectionOptions = {\n            // Old versions always have control stream no matter what the option is\n            // Pass `control: false` to `Connection` will disable the control stream\n            control: true,\n            sendDummyByte: true,\n            sendDeviceMeta: true,\n        };\n        if (this.value.tunnelForward) {\n            return new AdbScrcpyForwardConnection(adb, options);\n        } else {\n            return new AdbScrcpyReverseConnection(adb, options);\n        }\n    }\n}\n","import { type Adb } from \"@yume-chan/adb\";\n\nimport { type ScrcpyOptionsInit1_22 } from \"../../options/index.js\";\nimport {\n    type AdbScrcpyConnection,\n    AdbScrcpyForwardConnection,\n    AdbScrcpyReverseConnection,\n} from \"../connection.js\";\n\nimport { AdbScrcpyOptions1_16 } from \"./1_16.js\";\n\nexport class AdbScrcpyOptions1_22<\n    T extends ScrcpyOptionsInit1_22 = ScrcpyOptionsInit1_22\n> extends AdbScrcpyOptions1_16<T> {\n    public override createConnection(adb: Adb): AdbScrcpyConnection {\n        const options = {\n            ...this.getDefaultValue(),\n            ...this.value,\n        };\n        if (this.value.tunnelForward) {\n            return new AdbScrcpyForwardConnection(adb, options);\n        } else {\n            return new AdbScrcpyReverseConnection(adb, options);\n        }\n    }\n}\n","export * from './1_16.js';\nexport * from './1_22.js';\nexport * from './types.js';\n","// https://github.com/Genymobile/scrcpy/blob/fa5b2a29e983a46b49531def9cf3d80c40c3de37/app/src/control_msg.h#L23\n// For their message bodies, see https://github.com/Genymobile/scrcpy/blob/5c62f3419d252d10cd8c9cbb7c918b358b81f2d0/app/src/control_msg.c#L92\n// Their IDs change between versions, so always use `options.getControlMessageTypes()`\nexport enum ScrcpyControlMessageType {\n    InjectKeyCode,\n    InjectText,\n    InjectTouch,\n    InjectScroll,\n    BackOrScreenOn,\n    ExpandNotificationPanel,\n    ExpandSettingPanel,\n    CollapseNotificationPanel,\n    GetClipboard,\n    SetClipboard,\n    SetScreenPowerMode,\n    RotateDevice,\n}\n","import Struct, { placeholder } from \"@yume-chan/struct\";\n\nimport { ScrcpyControlMessageType } from \"./type.js\";\n\nexport enum AndroidKeyEventAction {\n    Down = 0,\n    Up = 1,\n}\n\n// https://github.com/Genymobile/scrcpy/blob/cabb102a04153f9c237b18257d3269a058558c63/app/src/android/keycodes.h#L26\nexport enum AndroidKeyCode {\n    Home = 3,\n    Back = 4,\n\n    DPadUp = 19,\n    DPadDown,\n    DPadLeft,\n    DPadRight,\n\n    VolumeUp = 24,\n    VolumeDown,\n\n    A = 29,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X,\n    Y,\n    Z,\n\n    Tab = 61,\n    Space,\n    Enter = 66,\n    Delete,\n    Escape = 111,\n    ForwardDelete,\n\n    MoveHome = 122,\n    MoveEnd = 123,\n\n    VolumeMute = 164,\n    AppSwitch = 187,\n}\n\nexport const ScrcpyInjectKeyCodeControlMessage = new Struct()\n    .uint8(\"type\", ScrcpyControlMessageType.InjectKeyCode as const)\n    .uint8(\"action\", placeholder<AndroidKeyEventAction>())\n    .uint32(\"keyCode\")\n    .uint32(\"repeat\")\n    .uint32(\"metaState\");\n\nexport type ScrcpyInjectKeyCodeControlMessage =\n    typeof ScrcpyInjectKeyCodeControlMessage[\"TInit\"];\n","import Struct from '@yume-chan/struct';\n\nimport { ScrcpyControlMessageType } from './type.js';\n\nexport const ScrcpyInjectTextControlMessage =\n    new Struct()\n        .uint8('type', ScrcpyControlMessageType.InjectText as const)\n        .uint32('length')\n        .string('text', { lengthField: 'length' });\n\nexport type ScrcpyInjectTextControlMessage =\n    typeof ScrcpyInjectTextControlMessage['TInit'];\n","import Struct, {\n    NumberFieldDefinition,\n    NumberFieldType,\n    placeholder,\n} from \"@yume-chan/struct\";\n\nimport { ScrcpyControlMessageType } from \"./type.js\";\n\n// https://developer.android.com/reference/android/view/MotionEvent#constants_1\nexport enum AndroidMotionEventAction {\n    Down,\n    Up,\n    Move,\n    Cancel,\n    Outside,\n    PointerDown,\n    PointerUp,\n    HoverMove,\n    Scroll,\n    HoverEnter,\n    HoverExit,\n    ButtonPress,\n    ButtonRelease,\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ScrcpyPointerId {\n    export const Mouse = BigInt(-1);\n    export const Finger = BigInt(-2);\n    export const VirtualMouse = BigInt(-3);\n    export const VirtualFinger = BigInt(-4);\n}\n\nconst Uint16Max = (1 << 16) - 1;\n\nconst ScrcpyFloatToUint16NumberType: NumberFieldType = {\n    size: 2,\n    signed: false,\n    deserialize(array, littleEndian) {\n        const value = NumberFieldType.Uint16.deserialize(array, littleEndian);\n        return value / Uint16Max;\n    },\n    serialize(dataView, offset, value, littleEndian) {\n        value = value * Uint16Max;\n        NumberFieldType.Uint16.serialize(dataView, offset, value, littleEndian);\n    },\n};\n\nconst ScrcpyFloatToUint16FieldDefinition = new NumberFieldDefinition(\n    ScrcpyFloatToUint16NumberType\n);\n\nexport const ScrcpyInjectTouchControlMessage = new Struct()\n    .uint8(\"type\", ScrcpyControlMessageType.InjectTouch as const)\n    .uint8(\"action\", placeholder<AndroidMotionEventAction>())\n    .uint64(\"pointerId\")\n    .uint32(\"pointerX\")\n    .uint32(\"pointerY\")\n    .uint16(\"screenWidth\")\n    .uint16(\"screenHeight\")\n    .field(\"pressure\", ScrcpyFloatToUint16FieldDefinition)\n    .uint32(\"buttons\");\n\nexport type ScrcpyInjectTouchControlMessage =\n    typeof ScrcpyInjectTouchControlMessage[\"TInit\"];\n","import Struct from '@yume-chan/struct';\n\nimport { ScrcpyControlMessageType } from './type.js';\n\nexport const ScrcpyRotateDeviceControlMessage =\n    new Struct()\n        .uint8('type', ScrcpyControlMessageType.RotateDevice as const)\n\nexport type ScrcpyRotateDeviceControlMessage =\n    typeof ScrcpyRotateDeviceControlMessage['TInit'];\n","import Struct, { placeholder } from '@yume-chan/struct';\n\nimport { ScrcpyControlMessageType } from './type.js';\n\n// https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/SurfaceControl.java;l=659;drc=20303e05bf73796124ab70a279cf849b61b97905\nexport enum AndroidScreenPowerMode {\n    Off = 0,\n    Normal = 2\n}\n\nexport const ScrcpySetScreenPowerModeControlMessage =\n    new Struct()\n        .uint8('type', ScrcpyControlMessageType.SetScreenPowerMode as const)\n        .uint8('mode', placeholder<AndroidScreenPowerMode>());\n\nexport type ScrcpySetScreenPowerModeControlMessage =\n    typeof ScrcpySetScreenPowerModeControlMessage['TInit'];\n","import {\n    type WritableStream,\n    type WritableStreamDefaultWriter,\n} from \"@yume-chan/stream-extra\";\n\nimport {\n    type ScrcpyOptions,\n    type ScrcpyScrollController,\n} from \"../options/index.js\";\n\nimport {\n    ScrcpyInjectKeyCodeControlMessage,\n    type AndroidKeyEventAction,\n} from \"./inject-keycode.js\";\nimport { type ScrcpyInjectScrollControlMessage } from \"./inject-scroll.js\";\nimport { ScrcpyInjectTextControlMessage } from \"./inject-text.js\";\nimport { ScrcpyInjectTouchControlMessage } from \"./inject-touch.js\";\nimport { ScrcpyRotateDeviceControlMessage } from \"./rotate-device.js\";\nimport {\n    ScrcpySetScreenPowerModeControlMessage,\n    type AndroidScreenPowerMode,\n} from \"./set-screen-power-mode.js\";\nimport { ScrcpyControlMessageType } from \"./type.js\";\n\nexport class ScrcpyControlMessageSerializer {\n    private options: ScrcpyOptions<object>;\n    /** Control message type values for current version of server */\n    private types: ScrcpyControlMessageType[];\n    private writer: WritableStreamDefaultWriter<Uint8Array>;\n    private scrollController: ScrcpyScrollController;\n\n    public constructor(\n        stream: WritableStream<Uint8Array>,\n        options: ScrcpyOptions<object>\n    ) {\n        this.writer = stream.getWriter();\n\n        this.options = options;\n        this.types = options.getControlMessageTypes();\n        this.scrollController = options.getScrollController();\n    }\n\n    public getTypeValue(type: ScrcpyControlMessageType): number {\n        const value = this.types.indexOf(type);\n        if (value === -1) {\n            throw new Error(\"Not supported\");\n        }\n        return value;\n    }\n\n    public injectKeyCode(\n        message: Omit<ScrcpyInjectKeyCodeControlMessage, \"type\">\n    ) {\n        return this.writer.write(\n            ScrcpyInjectKeyCodeControlMessage.serialize({\n                ...message,\n                type: this.getTypeValue(ScrcpyControlMessageType.InjectKeyCode),\n            })\n        );\n    }\n\n    public injectText(text: string) {\n        return this.writer.write(\n            ScrcpyInjectTextControlMessage.serialize({\n                text,\n                type: this.getTypeValue(ScrcpyControlMessageType.InjectText),\n            })\n        );\n    }\n\n    /**\n     * `pressure` is a float value between 0 and 1.\n     */\n    public injectTouch(message: Omit<ScrcpyInjectTouchControlMessage, \"type\">) {\n        return this.writer.write(\n            ScrcpyInjectTouchControlMessage.serialize({\n                ...message,\n                type: this.getTypeValue(ScrcpyControlMessageType.InjectTouch),\n            })\n        );\n    }\n\n    /**\n     * `scrollX` and `scrollY` are float values between 0 and 1.\n     */\n    public injectScroll(\n        message: Omit<ScrcpyInjectScrollControlMessage, \"type\">\n    ) {\n        (message as ScrcpyInjectScrollControlMessage).type = this.getTypeValue(\n            ScrcpyControlMessageType.InjectScroll\n        );\n\n        const data = this.scrollController.serializeScrollMessage(\n            message as ScrcpyInjectScrollControlMessage\n        );\n        if (!data) {\n            return;\n        }\n\n        return this.writer.write(data);\n    }\n\n    public async backOrScreenOn(action: AndroidKeyEventAction) {\n        const buffer = this.options.serializeBackOrScreenOnControlMessage({\n            action,\n            type: this.getTypeValue(ScrcpyControlMessageType.BackOrScreenOn),\n        });\n\n        if (buffer) {\n            return await this.writer.write(buffer);\n        }\n    }\n\n    public setScreenPowerMode(mode: AndroidScreenPowerMode) {\n        return this.writer.write(\n            ScrcpySetScreenPowerModeControlMessage.serialize({\n                mode,\n                type: this.getTypeValue(\n                    ScrcpyControlMessageType.SetScreenPowerMode\n                ),\n            })\n        );\n    }\n\n    public rotateDevice() {\n        return this.writer.write(\n            ScrcpyRotateDeviceControlMessage.serialize({\n                type: this.getTypeValue(ScrcpyControlMessageType.RotateDevice),\n            })\n        );\n    }\n\n    public close() {\n        return this.writer.close();\n    }\n}\n","export * from \"./back-or-screen-on.js\";\nexport * from \"./inject-keycode.js\";\nexport * from \"./inject-scroll.js\";\nexport * from \"./inject-text.js\";\nexport * from \"./inject-touch.js\";\nexport * from \"./rotate-device.js\";\nexport * from \"./serializer.js\";\nexport * from \"./set-screen-power-mode.js\";\nexport * from \"./type.js\";\n","// https://github.com/Genymobile/scrcpy/blob/41abe021e2a73efd4899b0efcd0b9eef9ec68c9b/server/src/main/java/com/genymobile/scrcpy/DeviceMessage.java#L5\nexport enum ScrcpyDeviceMessageType {\n    Clipboard,\n    AckClipboard,\n}\n","import Struct from \"@yume-chan/struct\";\n\nimport { ScrcpyDeviceMessageType } from \"./type.js\";\n\nexport const ScrcpyClipboardDeviceMessage = new Struct()\n    .uint32(\"length\")\n    .string(\"content\", { lengthField: \"length\" })\n    .extra({ type: ScrcpyDeviceMessageType.Clipboard as const });\n\nexport type ScrcpyClipboardDeviceMessage =\n    typeof ScrcpyClipboardDeviceMessage[\"TDeserializeResult\"];\n","import { BufferedTransformStream } from \"@yume-chan/stream-extra\";\n\nimport { ScrcpyClipboardDeviceMessage } from \"./clipboard.js\";\n\nexport type ScrcpyDeviceMessage = ScrcpyClipboardDeviceMessage;\n\nexport class ScrcpyDeviceMessageDeserializeStream extends BufferedTransformStream<ScrcpyDeviceMessage> {\n    constructor() {\n        super(async (stream) => {\n            const type = await stream.read(1);\n            switch (type[0]) {\n                case 0:\n                    return await ScrcpyClipboardDeviceMessage.deserialize(\n                        stream\n                    );\n                default:\n                    throw new Error(\"unknown control message type\");\n            }\n        });\n    }\n}\n","export * from './clipboard.js';\nexport * from './stream.js';\nexport * from './type.js';\n","import {\n    type AndroidCodecLevel,\n    type AndroidCodecProfile,\n} from \"../../codec.js\";\nimport { type ScrcpyOptionValue } from \"../types.js\";\n\n/**\n * If the option you need is not in this type,\n * please file an issue on GitHub.\n */\nexport interface CodecOptionsInit {\n    profile: AndroidCodecProfile;\n    level: AndroidCodecLevel;\n\n    iFrameInterval: number;\n    repeatPreviousFrameAfter: number;\n    maxPtsGapToEncoder: number;\n}\n\nfunction toDashCase(input: string) {\n    return input.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n}\n\nconst CODEC_OPTION_TYPES: Partial<\n    Record<keyof CodecOptionsInit, \"long\" | \"float\" | \"string\">\n> = {\n    repeatPreviousFrameAfter: \"long\",\n    maxPtsGapToEncoder: \"long\",\n};\n\nexport class CodecOptions implements ScrcpyOptionValue {\n    public value: Partial<CodecOptionsInit>;\n\n    public constructor(value: Partial<CodecOptionsInit>) {\n        this.value = value;\n    }\n\n    public toOptionValue(): string | undefined {\n        const entries = Object.entries(this.value).filter(\n            ([, value]) => value !== undefined\n        );\n\n        if (entries.length === 0) {\n            return undefined;\n        }\n\n        return entries\n            .map(([key, value]) => {\n                const type = CODEC_OPTION_TYPES[key as keyof CodecOptionsInit];\n                return `${toDashCase(key)}${type ? `:${type}` : \"\"}=${value}`;\n            })\n            .join(\",\");\n    }\n}\n","import { type TransformStream } from \"@yume-chan/stream-extra\";\n\nimport {\n    type ScrcpyBackOrScreenOnControlMessage,\n    type ScrcpyControlMessageType,\n} from \"../control/index.js\";\n\nimport { type ScrcpyScrollController } from \"./1_16/scroll.js\";\n\nexport const DEFAULT_SERVER_PATH = \"/data/local/tmp/scrcpy-server.jar\";\n\nexport interface ScrcpyOptionValue {\n    toOptionValue(): string | undefined;\n}\n\nexport function isScrcpyOptionValue(\n    value: unknown\n): value is ScrcpyOptionValue {\n    return (\n        typeof value === \"object\" &&\n        value !== null &&\n        \"toOptionValue\" in value &&\n        typeof value.toOptionValue === \"function\"\n    );\n}\n\nexport function toScrcpyOptionValue<T>(value: unknown, empty: T): string | T {\n    if (isScrcpyOptionValue(value)) {\n        value = value.toOptionValue();\n    }\n\n    // `value` may become `undefined` after `toOptionValue`\n    if (value === undefined) {\n        return empty;\n    }\n\n    return String(value);\n}\n\nexport interface H264Configuration {\n    profileIndex: number;\n    constraintSet: number;\n    levelIndex: number;\n\n    encodedWidth: number;\n    encodedHeight: number;\n\n    cropLeft: number;\n    cropRight: number;\n\n    cropTop: number;\n    cropBottom: number;\n\n    croppedWidth: number;\n    croppedHeight: number;\n}\n\nexport interface ScrcpyVideoStreamConfigurationPacket {\n    type: \"configuration\";\n    data: H264Configuration;\n}\n\nexport interface ScrcpyVideoStreamFramePacket {\n    type: \"frame\";\n    keyframe?: boolean | undefined;\n    pts?: bigint | undefined;\n    data: Uint8Array;\n}\n\nexport type ScrcpyVideoStreamPacket =\n    | ScrcpyVideoStreamConfigurationPacket\n    | ScrcpyVideoStreamFramePacket;\n\nexport interface ScrcpyOptions<T extends object> {\n    value: Partial<T>;\n\n    getDefaultValue(): T;\n\n    formatServerArguments(): string[];\n\n    getOutputEncoderNameRegex(): RegExp;\n\n    createVideoStreamTransformer(): TransformStream<\n        Uint8Array,\n        ScrcpyVideoStreamPacket\n    >;\n\n    getControlMessageTypes(): ScrcpyControlMessageType[];\n\n    serializeBackOrScreenOnControlMessage(\n        message: ScrcpyBackOrScreenOnControlMessage\n    ): Uint8Array | undefined;\n\n    getScrollController(): ScrcpyScrollController;\n}\n","import Struct from \"@yume-chan/struct\";\n\nimport {\n    ScrcpyControlMessageType,\n    type ScrcpyInjectScrollControlMessage,\n} from \"../../control/index.js\";\n\nexport interface ScrcpyScrollController {\n    serializeScrollMessage(\n        message: ScrcpyInjectScrollControlMessage\n    ): Uint8Array | undefined;\n}\n\nexport const ScrcpyInjectScrollControlMessage1_16 = new Struct()\n    .uint8(\"type\", ScrcpyControlMessageType.InjectScroll as const)\n    .uint32(\"pointerX\")\n    .uint32(\"pointerY\")\n    .uint16(\"screenWidth\")\n    .uint16(\"screenHeight\")\n    .int32(\"scrollX\")\n    .int32(\"scrollY\");\n\n/**\n * Old version of Scrcpy server only supports integer values for scroll.\n *\n * Accumulate scroll values and send scroll message when accumulated value\n * reaches 1 or -1.\n */\nexport class ScrcpyScrollController1_16 implements ScrcpyScrollController {\n    private accumulatedX = 0;\n    private accumulatedY = 0;\n\n    protected processMessage(\n        message: ScrcpyInjectScrollControlMessage\n    ): ScrcpyInjectScrollControlMessage | undefined {\n        this.accumulatedX += message.scrollX;\n        this.accumulatedY += message.scrollY;\n\n        let scrollX = 0;\n        let scrollY = 0;\n        if (this.accumulatedX >= 1) {\n            scrollX = 1;\n            this.accumulatedX -= 1;\n        } else if (this.accumulatedX <= -1) {\n            scrollX = -1;\n            this.accumulatedX += 1;\n        }\n\n        if (this.accumulatedY >= 1) {\n            scrollY = 1;\n            this.accumulatedY -= 1;\n        } else if (this.accumulatedY <= -1) {\n            scrollY = -1;\n            this.accumulatedY += 1;\n        }\n\n        if (scrollX === 0 && scrollY === 0) {\n            return undefined;\n        }\n\n        message.scrollX = scrollX;\n        message.scrollY = scrollY;\n        return message;\n    }\n\n    public serializeScrollMessage(\n        message: ScrcpyInjectScrollControlMessage\n    ): Uint8Array | undefined {\n        const processed = this.processMessage(message);\n        if (!processed) {\n            return undefined;\n        }\n\n        return ScrcpyInjectScrollControlMessage1_16.serialize(processed);\n    }\n}\n","// cspell: ignore golomb\n// cspell: ignore qpprime\n\nclass BitReader {\n    private buffer: Uint8Array;\n\n    private bytePosition = 0;\n\n    private bitPosition = 0;\n\n    public constructor(buffer: Uint8Array) {\n        this.buffer = buffer;\n    }\n\n    public read(length: number): number {\n        let result = 0;\n        for (let i = 0; i < length; i += 1) {\n            result = (result << 1) | this.next();\n        }\n        return result;\n    }\n\n    public next(): number {\n        const value =\n            (this.buffer[this.bytePosition]! >> (7 - this.bitPosition)) & 1;\n        this.bitPosition += 1;\n        if (this.bitPosition === 8) {\n            this.bytePosition += 1;\n            this.bitPosition = 0;\n        }\n        return value;\n    }\n\n    public decodeExponentialGolombNumber(): number {\n        let length = 0;\n        while (this.next() === 0) {\n            length += 1;\n        }\n        if (length === 0) {\n            return 0;\n        }\n        return ((1 << length) | this.read(length)) - 1;\n    }\n}\n\nfunction* iterateNalu(buffer: Uint8Array): Generator<Uint8Array> {\n    // -1 means we haven't found the first start code\n    let start = -1;\n    let writeIndex = 0;\n\n    // How many `0x00`s in a row we have counted\n    let zeroCount = 0;\n\n    let inEmulation = false;\n\n    for (const byte of buffer) {\n        buffer[writeIndex] = byte;\n        writeIndex += 1;\n\n        if (inEmulation) {\n            if (byte > 0x03) {\n                // `0x00000304` or larger are invalid\n                throw new Error(\"Invalid data\");\n            }\n\n            inEmulation = false;\n            continue;\n        }\n\n        if (byte == 0x00) {\n            zeroCount += 1;\n            continue;\n        }\n\n        const lastZeroCount = zeroCount;\n        zeroCount = 0;\n\n        if (start === -1) {\n            // 0x000001 is the start code\n            // But it can be preceded by any number of zeros\n            // So 2 is the minimal\n            if (lastZeroCount >= 2 && byte === 0x01) {\n                // Found start of first NAL unit\n                writeIndex = 0;\n                start = 0;\n                continue;\n            }\n\n            // Not begin with start code\n            throw new Error(\"Invalid data\");\n        }\n\n        if (lastZeroCount < 2) {\n            // zero or one `0x00`s are acceptable\n            continue;\n        }\n\n        if (byte === 0x01) {\n            // Remove all leading `0x00`s and this `0x01`\n            writeIndex -= lastZeroCount + 1;\n\n            // Found another NAL unit\n            yield buffer.subarray(start, writeIndex);\n\n            start = writeIndex;\n            continue;\n        }\n\n        if (lastZeroCount > 2) {\n            // Too much `0x00`s\n            throw new Error(\"Invalid data\");\n        }\n\n        switch (byte) {\n            case 0x02:\n                // Didn't find why, but 7.4.1 NAL unit semantics forbids `0x000002` appearing in NAL units\n                throw new Error(\"Invalid data\");\n            case 0x03:\n                // `0x000003` is the \"emulation_prevention_three_byte\"\n                // `0x00000300`, `0x00000301`, `0x00000302` and `0x00000303` represent\n                // `0x000000`, `0x000001`, `0x000002` and `0x000003` respectively\n\n                // Remove current byte\n                writeIndex -= 1;\n\n                inEmulation = true;\n                break;\n            default:\n                // `0x000004` or larger are ok\n                break;\n        }\n    }\n\n    if (inEmulation || zeroCount !== 0) {\n        throw new Error(\"Invalid data\");\n    }\n\n    yield buffer.subarray(start, writeIndex);\n}\n\n// 7.3.2.1.1 Sequence parameter set data syntax\nexport function parse_sequence_parameter_set(buffer: ArrayBuffer) {\n    for (const nalu of iterateNalu(new Uint8Array(buffer))) {\n        const reader = new BitReader(nalu);\n        if (reader.next() !== 0) {\n            throw new Error(\"Invalid data\");\n        }\n\n        const nal_ref_idc = reader.read(2);\n        const nal_unit_type = reader.read(5);\n\n        if (nal_unit_type !== 7) {\n            continue;\n        }\n\n        if (nal_ref_idc === 0) {\n            throw new Error(\"Invalid data\");\n        }\n\n        const profile_idc = reader.read(8);\n        const constraint_set = reader.read(8);\n\n        const constraint_set_reader = new BitReader(\n            new Uint8Array([constraint_set])\n        );\n        const constraint_set0_flag = !!constraint_set_reader.next();\n        const constraint_set1_flag = !!constraint_set_reader.next();\n        const constraint_set2_flag = !!constraint_set_reader.next();\n        const constraint_set3_flag = !!constraint_set_reader.next();\n        const constraint_set4_flag = !!constraint_set_reader.next();\n        const constraint_set5_flag = !!constraint_set_reader.next();\n\n        // reserved_zero_2bits\n        if (constraint_set_reader.read(2) !== 0) {\n            throw new Error(\"Invalid data\");\n        }\n\n        const level_idc = reader.read(8);\n        const seq_parameter_set_id = reader.decodeExponentialGolombNumber();\n\n        if (\n            profile_idc === 100 ||\n            profile_idc === 110 ||\n            profile_idc === 122 ||\n            profile_idc === 244 ||\n            profile_idc === 44 ||\n            profile_idc === 83 ||\n            profile_idc === 86 ||\n            profile_idc === 118 ||\n            profile_idc === 128 ||\n            profile_idc === 138 ||\n            profile_idc === 139 ||\n            profile_idc === 134\n        ) {\n            const chroma_format_idc = reader.decodeExponentialGolombNumber();\n            if (chroma_format_idc === 3) {\n                // separate_colour_plane_flag\n                reader.next();\n            }\n\n            // bit_depth_luma_minus8\n            reader.decodeExponentialGolombNumber();\n            // bit_depth_chroma_minus8\n            reader.decodeExponentialGolombNumber();\n\n            // qpprime_y_zero_transform_bypass_flag\n            reader.next();\n\n            const seq_scaling_matrix_present_flag = !!reader.next();\n            if (seq_scaling_matrix_present_flag) {\n                const seq_scaling_list_present_flag: boolean[] = [];\n                for (\n                    let i = 0;\n                    i < (chroma_format_idc !== 3 ? 8 : 12);\n                    i += 1\n                ) {\n                    seq_scaling_list_present_flag[i] = !!reader.next();\n                    if (seq_scaling_list_present_flag[i])\n                        if (i < 6) {\n                            // TODO\n                            // scaling_list( ScalingList4x4[ i ], 16,\n                            //               UseDefaultScalingMatrix4x4Flag[ i ])\n                        } else {\n                            // TODO\n                            // scaling_list( ScalingList8x8[ i − 6 ], 64,\n                            //               UseDefaultScalingMatrix8x8Flag[ i − 6 ] )\n                        }\n                }\n            }\n        }\n\n        // log2_max_frame_num_minus4\n        reader.decodeExponentialGolombNumber();\n        const pic_order_cnt_type = reader.decodeExponentialGolombNumber();\n        if (pic_order_cnt_type === 0) {\n            // log2_max_pic_order_cnt_lsb_minus4\n            reader.decodeExponentialGolombNumber();\n        } else if (pic_order_cnt_type === 1) {\n            // delta_pic_order_always_zero_flag\n            reader.next();\n            // offset_for_non_ref_pic\n            reader.decodeExponentialGolombNumber();\n            // offset_for_top_to_bottom_field\n            reader.decodeExponentialGolombNumber();\n            const num_ref_frames_in_pic_order_cnt_cycle =\n                reader.decodeExponentialGolombNumber();\n            const offset_for_ref_frame: number[] = [];\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i += 1) {\n                offset_for_ref_frame[i] =\n                    reader.decodeExponentialGolombNumber();\n            }\n        }\n\n        // max_num_ref_frames\n        reader.decodeExponentialGolombNumber();\n        // gaps_in_frame_num_value_allowed_flag\n        reader.next();\n        const pic_width_in_mbs_minus1 = reader.decodeExponentialGolombNumber();\n        const pic_height_in_map_units_minus1 =\n            reader.decodeExponentialGolombNumber();\n\n        const frame_mbs_only_flag = reader.next();\n        if (!frame_mbs_only_flag) {\n            // mb_adaptive_frame_field_flag\n            reader.next();\n        }\n\n        // direct_8x8_inference_flag\n        reader.next();\n\n        const frame_cropping_flag = !!reader.next();\n        let frame_crop_left_offset: number;\n        let frame_crop_right_offset: number;\n        let frame_crop_top_offset: number;\n        let frame_crop_bottom_offset: number;\n        if (frame_cropping_flag) {\n            frame_crop_left_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_right_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_top_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_bottom_offset = reader.decodeExponentialGolombNumber();\n        } else {\n            frame_crop_left_offset = 0;\n            frame_crop_right_offset = 0;\n            frame_crop_top_offset = 0;\n            frame_crop_bottom_offset = 0;\n        }\n\n        const vui_parameters_present_flag = !!reader.next();\n        if (vui_parameters_present_flag) {\n            // TODO\n            // vui_parameters( )\n        }\n\n        return {\n            profile_idc,\n            constraint_set,\n            constraint_set0_flag,\n            constraint_set1_flag,\n            constraint_set2_flag,\n            constraint_set3_flag,\n            constraint_set4_flag,\n            constraint_set5_flag,\n            level_idc,\n            seq_parameter_set_id,\n            pic_width_in_mbs_minus1,\n            pic_height_in_map_units_minus1,\n            frame_mbs_only_flag,\n            frame_cropping_flag,\n            frame_crop_left_offset,\n            frame_crop_right_offset,\n            frame_crop_top_offset,\n            frame_crop_bottom_offset,\n        };\n    }\n\n    throw new Error(\"Invalid data\");\n}\n\nexport type SequenceParameterSet = ReturnType<\n    typeof parse_sequence_parameter_set\n>;\n","import {\n    StructDeserializeStream,\n    TransformStream,\n} from \"@yume-chan/stream-extra\";\nimport Struct from \"@yume-chan/struct\";\n\nimport {\n    AndroidKeyEventAction,\n    ScrcpyControlMessageType,\n    type ScrcpyBackOrScreenOnControlMessage,\n} from \"../../control/index.js\";\nimport {\n    toScrcpyOptionValue,\n    type ScrcpyOptions,\n    type ScrcpyVideoStreamPacket,\n} from \"../types.js\";\n\nimport { CodecOptions } from \"./codec-options.js\";\nimport {\n    ScrcpyScrollController1_16,\n    type ScrcpyScrollController,\n} from \"./scroll.js\";\nimport { parse_sequence_parameter_set } from \"./sps.js\";\n\nexport enum ScrcpyLogLevel {\n    Verbose = \"verbose\",\n    Debug = \"debug\",\n    Info = \"info\",\n    Warn = \"warn\",\n    Error = \"error\",\n}\n\nexport enum ScrcpyVideoOrientation {\n    Initial = -2,\n    Unlocked = -1,\n    Portrait = 0,\n    Landscape = 1,\n    PortraitFlipped = 2,\n    LandscapeFlipped = 3,\n}\n\nexport interface ScrcpyOptionsInit1_16 {\n    logLevel: ScrcpyLogLevel;\n\n    /**\n     * The maximum value of both width and height.\n     */\n    maxSize: number;\n\n    bitRate: number;\n\n    /**\n     * 0 for unlimited.\n     *\n     * @default 0\n     */\n    maxFps: number;\n\n    /**\n     * The orientation of the video stream.\n     *\n     * It will not keep the device screen in specific orientation,\n     * only the captured video will in this orientation.\n     */\n    lockVideoOrientation: ScrcpyVideoOrientation;\n\n    tunnelForward: boolean;\n\n    crop: string;\n\n    /**\n     * Send PTS so that the client may record properly\n     *\n     * Note: When `sendFrameMeta: false` is specified,\n     * `onChangeEncoding` event won't fire and `onVideoData` event doesn't\n     * merge sps/pps frame and first video frame. Which means you can't use\n     * the shipped decoders to render the video\n     * (You can still record the stream into a file).\n     *\n     * @default true\n     */\n    sendFrameMeta: boolean;\n\n    /**\n     * @default true\n     */\n    control: boolean;\n\n    displayId: number;\n\n    showTouches: boolean;\n\n    stayAwake: boolean;\n\n    codecOptions: CodecOptions;\n\n    encoderName: string;\n}\n\nexport const VideoPacket = new Struct()\n    .uint64(\"pts\")\n    .uint32(\"size\")\n    .uint8Array(\"data\", { lengthField: \"size\" });\n\nexport const NO_PTS = BigInt(1) << BigInt(63);\n\nexport const ScrcpyBackOrScreenOnControlMessage1_16 = new Struct().uint8(\n    \"type\",\n    ScrcpyControlMessageType.BackOrScreenOn as const\n);\n\nexport class ScrcpyOptions1_16<T extends ScrcpyOptionsInit1_16 = ScrcpyOptionsInit1_16>\n    implements ScrcpyOptions<T>\n{\n    public value: Partial<T>;\n\n    public constructor(value: Partial<ScrcpyOptionsInit1_16>) {\n        if (\n            new.target === ScrcpyOptions1_16 &&\n            value.logLevel === ScrcpyLogLevel.Verbose\n        ) {\n            value.logLevel = ScrcpyLogLevel.Debug;\n        }\n\n        if (\n            new.target === ScrcpyOptions1_16 &&\n            value.lockVideoOrientation === ScrcpyVideoOrientation.Initial\n        ) {\n            value.lockVideoOrientation = ScrcpyVideoOrientation.Unlocked;\n        }\n\n        this.value = value as Partial<T>;\n    }\n\n    protected getArgumentOrder(): (keyof T)[] {\n        return [\n            \"logLevel\",\n            \"maxSize\",\n            \"bitRate\",\n            \"maxFps\",\n            \"lockVideoOrientation\",\n            \"tunnelForward\",\n            \"crop\",\n            \"sendFrameMeta\",\n            \"control\",\n            \"displayId\",\n            \"showTouches\",\n            \"stayAwake\",\n            \"codecOptions\",\n            \"encoderName\",\n        ];\n    }\n\n    public getDefaultValue(): T {\n        return {\n            logLevel: ScrcpyLogLevel.Debug,\n            maxSize: 0,\n            bitRate: 8_000_000,\n            maxFps: 0,\n            lockVideoOrientation: ScrcpyVideoOrientation.Unlocked,\n            tunnelForward: false,\n            crop: \"-\",\n            sendFrameMeta: true,\n            control: true,\n            displayId: 0,\n            showTouches: false,\n            stayAwake: false,\n            codecOptions: new CodecOptions({}),\n            encoderName: \"-\",\n        } as T;\n    }\n\n    public formatServerArguments(): string[] {\n        const defaults = this.getDefaultValue();\n        return this.getArgumentOrder().map((key) =>\n            toScrcpyOptionValue(this.value[key] || defaults[key], \"-\")\n        );\n    }\n\n    public getOutputEncoderNameRegex(): RegExp {\n        return /\\s+scrcpy --encoder-name '(.*?)'/;\n    }\n\n    public createVideoStreamTransformer(): TransformStream<\n        Uint8Array,\n        ScrcpyVideoStreamPacket\n    > {\n        // Optimized path for video frames only\n        if (this.value.sendFrameMeta === false) {\n            return new TransformStream({\n                transform(chunk, controller) {\n                    controller.enqueue({\n                        type: \"frame\",\n                        data: chunk,\n                    });\n                },\n            });\n        }\n\n        let header: Uint8Array | undefined;\n\n        const deserializeStream = new StructDeserializeStream(VideoPacket);\n        return {\n            writable: deserializeStream.writable,\n            readable: deserializeStream.readable.pipeThrough(\n                new TransformStream({\n                    transform(packet, controller) {\n                        if (packet.pts === NO_PTS) {\n                            const sequenceParameterSet =\n                                parse_sequence_parameter_set(\n                                    packet.data.slice().buffer\n                                );\n\n                            const {\n                                profile_idc: profileIndex,\n                                constraint_set: constraintSet,\n                                level_idc: levelIndex,\n                                pic_width_in_mbs_minus1,\n                                pic_height_in_map_units_minus1,\n                                frame_mbs_only_flag,\n                                frame_crop_left_offset,\n                                frame_crop_right_offset,\n                                frame_crop_top_offset,\n                                frame_crop_bottom_offset,\n                            } = sequenceParameterSet;\n\n                            const encodedWidth =\n                                (pic_width_in_mbs_minus1 + 1) * 16;\n                            const encodedHeight =\n                                (pic_height_in_map_units_minus1 + 1) *\n                                (2 - frame_mbs_only_flag) *\n                                16;\n                            const cropLeft = frame_crop_left_offset * 2;\n                            const cropRight = frame_crop_right_offset * 2;\n                            const cropTop = frame_crop_top_offset * 2;\n                            const cropBottom = frame_crop_bottom_offset * 2;\n\n                            const croppedWidth =\n                                encodedWidth - cropLeft - cropRight;\n                            const croppedHeight =\n                                encodedHeight - cropTop - cropBottom;\n\n                            header = packet.data;\n                            controller.enqueue({\n                                type: \"configuration\",\n                                data: {\n                                    profileIndex,\n                                    constraintSet,\n                                    levelIndex,\n                                    encodedWidth,\n                                    encodedHeight,\n                                    cropLeft,\n                                    cropRight,\n                                    cropTop,\n                                    cropBottom,\n                                    croppedWidth,\n                                    croppedHeight,\n                                },\n                            });\n                            return;\n                        }\n\n                        let frameData: Uint8Array;\n                        if (header) {\n                            frameData = new Uint8Array(\n                                header.byteLength + packet.data.byteLength\n                            );\n                            frameData.set(header);\n                            frameData.set(packet.data, header.byteLength);\n                            header = undefined;\n                        } else {\n                            frameData = packet.data;\n                        }\n\n                        controller.enqueue({\n                            type: \"frame\",\n                            pts: packet.pts,\n                            data: frameData,\n                        });\n                    },\n                })\n            ),\n        };\n    }\n\n    public getControlMessageTypes(): ScrcpyControlMessageType[] {\n        return [\n            /*  0 */ ScrcpyControlMessageType.InjectKeyCode,\n            /*  1 */ ScrcpyControlMessageType.InjectText,\n            /*  2 */ ScrcpyControlMessageType.InjectTouch,\n            /*  3 */ ScrcpyControlMessageType.InjectScroll,\n            /*  4 */ ScrcpyControlMessageType.BackOrScreenOn,\n            /*  5 */ ScrcpyControlMessageType.ExpandNotificationPanel,\n            /*  6 */ ScrcpyControlMessageType.CollapseNotificationPanel,\n            /*  7 */ ScrcpyControlMessageType.GetClipboard,\n            /*  8 */ ScrcpyControlMessageType.SetClipboard,\n            /*  9 */ ScrcpyControlMessageType.SetScreenPowerMode,\n            /* 10 */ ScrcpyControlMessageType.RotateDevice,\n        ];\n    }\n\n    public serializeBackOrScreenOnControlMessage(\n        message: ScrcpyBackOrScreenOnControlMessage\n    ) {\n        if (message.action === AndroidKeyEventAction.Down) {\n            return ScrcpyBackOrScreenOnControlMessage1_16.serialize(message);\n        }\n\n        return undefined;\n    }\n\n    public getScrollController(): ScrcpyScrollController {\n        return new ScrcpyScrollController1_16();\n    }\n}\n","export * from './codec-options.js';\nexport * from './options.js';\nexport * from \"./scroll.js\";\nexport * from './sps.js';\n","import Struct, { placeholder } from \"@yume-chan/struct\";\n\nimport {\n    ScrcpyControlMessageType,\n    type AndroidKeyEventAction,\n    type ScrcpyBackOrScreenOnControlMessage,\n} from \"../control/index.js\";\n\nimport {\n    ScrcpyBackOrScreenOnControlMessage1_16,\n    ScrcpyOptions1_16,\n    type ScrcpyOptionsInit1_16,\n} from \"./1_16/options.js\";\n\nexport interface ScrcpyOptionsInit1_18 extends ScrcpyOptionsInit1_16 {\n    powerOffOnClose: boolean;\n}\n\nexport const ScrcpyBackOrScreenOnControlMessage1_18 = new Struct()\n    .fields(ScrcpyBackOrScreenOnControlMessage1_16)\n    .uint8(\"action\", placeholder<AndroidKeyEventAction>());\n\nexport type ScrcpyBackOrScreenOnControlMessage1_18 =\n    typeof ScrcpyBackOrScreenOnControlMessage1_18[\"TInit\"];\n\nexport class ScrcpyOptions1_18<\n    T extends ScrcpyOptionsInit1_18 = ScrcpyOptionsInit1_18\n> extends ScrcpyOptions1_16<T> {\n    constructor(value: Partial<ScrcpyOptionsInit1_18>) {\n        super(value);\n    }\n\n    protected override getArgumentOrder(): (keyof T)[] {\n        return super.getArgumentOrder().concat([\"powerOffOnClose\"]);\n    }\n\n    public override getDefaultValue(): T {\n        return {\n            ...super.getDefaultValue(),\n            powerOffOnClose: false,\n        };\n    }\n\n    public override getOutputEncoderNameRegex(): RegExp {\n        return /\\s+scrcpy --encoder '(.*?)'/;\n    }\n\n    public override getControlMessageTypes(): ScrcpyControlMessageType[] {\n        /**\n         *  0 InjectKeycode\n         *  1 InjectText\n         *  2 InjectTouch\n         *  3 InjectScroll\n         *  4 BackOrScreenOn\n         *  5 ExpandNotificationPanel\n         *  6 ExpandSettingsPanel\n         *  7 CollapseNotificationPanel\n         *  8 GetClipboard\n         *  9 SetClipboard\n         * 10 SetScreenPowerMode\n         * 11 RotateDevice\n         */\n        const types = super.getControlMessageTypes();\n        types.splice(6, 0, ScrcpyControlMessageType.ExpandSettingPanel);\n        return types;\n    }\n\n    public override serializeBackOrScreenOnControlMessage(\n        message: ScrcpyBackOrScreenOnControlMessage\n    ) {\n        return ScrcpyBackOrScreenOnControlMessage1_18.serialize(message);\n    }\n}\n","// cspell: ignore autosync\n\nimport { ScrcpyOptions1_18, type ScrcpyOptionsInit1_18 } from './1_18.js';\nimport { toScrcpyOptionValue } from './types.js';\n\nexport interface ScrcpyOptionsInit1_21 extends ScrcpyOptionsInit1_18 {\n    clipboardAutosync?: boolean;\n}\n\nfunction toSnakeCase(input: string): string {\n    return input.replace(/([A-Z])/g, '_$1').toLowerCase();\n}\n\nexport class ScrcpyOptions1_21<T extends ScrcpyOptionsInit1_21 = ScrcpyOptionsInit1_21>\n    extends ScrcpyOptions1_18<T> {\n    public constructor(init: Partial<ScrcpyOptionsInit1_21>) {\n        super(init);\n    }\n\n    public override getDefaultValue(): T {\n        return {\n            ...super.getDefaultValue(),\n            clipboardAutosync: true,\n        };\n    }\n\n    public override formatServerArguments(): string[] {\n        // 1.21 changed the format of arguments\n        // So `getArgumentOrder()` is no longer needed\n        return Object.entries(this.value)\n            .map(\n                ([key, value]) =>\n                    [key, toScrcpyOptionValue(value, undefined)] as const\n            )\n            .filter(\n                (pair): pair is [string, string] =>\n                    pair[1] !== undefined\n            )\n            .map(\n                ([key, value]) =>\n                    `${toSnakeCase(key)}=${value}`\n            );\n    }\n}\n","import Struct from \"@yume-chan/struct\";\n\nimport {\n    ScrcpyInjectScrollControlMessage1_16,\n    ScrcpyScrollController1_16,\n} from \"../1_16/index.js\";\n\nexport const ScrcpyInjectScrollControlMessage1_22 = new Struct()\n    .fields(ScrcpyInjectScrollControlMessage1_16)\n    .int32(\"buttons\");\n\nexport type ScrcpyInjectScrollControlMessage1_22 =\n    typeof ScrcpyInjectScrollControlMessage1_22[\"TInit\"];\n\nexport class ScrcpyScrollController1_22 extends ScrcpyScrollController1_16 {\n    public override serializeScrollMessage(\n        message: ScrcpyInjectScrollControlMessage1_22\n    ): Uint8Array | undefined {\n        const processed = this.processMessage(message);\n        if (!processed) {\n            return undefined;\n        }\n\n        return ScrcpyInjectScrollControlMessage1_22.serialize(processed);\n    }\n}\n","import { type ScrcpyScrollController } from \"../1_16/index.js\";\nimport { ScrcpyOptions1_21, type ScrcpyOptionsInit1_21 } from \"../1_21.js\";\n\nimport { ScrcpyScrollController1_22 } from \"./scroll.js\";\n\nexport interface ScrcpyOptionsInit1_22 extends ScrcpyOptionsInit1_21 {\n    downsizeOnError: boolean;\n\n    /**\n     * Send device name and size at start of video stream.\n     *\n     * @default true\n     */\n    sendDeviceMeta: boolean;\n\n    /**\n     * Send a `0` byte on start of video stream to detect connection issues\n     *\n     * @default true\n     */\n    sendDummyByte: boolean;\n\n    /**\n     * Implies `sendDeviceMeta: false`, `sendFrameMeta: false` and `sendDummyByte: false`\n     *\n     * @default false\n     */\n    rawVideoStream: boolean;\n}\n\nexport class ScrcpyOptions1_22<\n    T extends ScrcpyOptionsInit1_22 = ScrcpyOptionsInit1_22\n> extends ScrcpyOptions1_21<T> {\n    public constructor(init: Partial<ScrcpyOptionsInit1_22>) {\n        if (init.rawVideoStream) {\n            // Set implied options for client-side processing\n            init.sendDeviceMeta = false;\n            init.sendFrameMeta = false;\n            init.sendDummyByte = false;\n        }\n\n        super(init);\n    }\n\n    public override getDefaultValue(): T {\n        return {\n            ...super.getDefaultValue(),\n            downsizeOnError: true,\n            sendDeviceMeta: true,\n            sendDummyByte: true,\n            rawVideoStream: false,\n        };\n    }\n\n    public override getScrollController(): ScrcpyScrollController {\n        return new ScrcpyScrollController1_22();\n    }\n}\n","export * from \"./options.js\";\nexport * from \"./scroll.js\";\n","import { TransformStream } from \"@yume-chan/stream-extra\";\n\nimport {\n    ScrcpyOptions1_22,\n    type ScrcpyOptionsInit1_22,\n} from \"./1_22/options.js\";\nimport { type ScrcpyVideoStreamPacket } from \"./types.js\";\n\nexport interface ScrcpyOptionsInit1_23 extends ScrcpyOptionsInit1_22 {\n    cleanup: boolean;\n}\n\nconst KEYFRAME_PTS = BigInt(1) << BigInt(62);\n\nexport class ScrcpyOptions1_23<\n    T extends ScrcpyOptionsInit1_23 = ScrcpyOptionsInit1_23\n> extends ScrcpyOptions1_22<T> {\n    public constructor(init: Partial<ScrcpyOptionsInit1_23>) {\n        super(init);\n    }\n\n    public override getDefaultValue(): T {\n        return {\n            ...super.getDefaultValue(),\n            cleanup: true,\n        };\n    }\n\n    public override createVideoStreamTransformer(): TransformStream<\n        Uint8Array,\n        ScrcpyVideoStreamPacket\n    > {\n        const superStream = super.createVideoStreamTransformer();\n        return {\n            writable: superStream.writable,\n            readable: superStream.readable.pipeThrough(\n                new TransformStream({\n                    transform(packet, controller): void {\n                        if (packet.type !== \"frame\") {\n                            controller.enqueue(packet);\n                            return;\n                        }\n\n                        if (\n                            packet.pts !== undefined &&\n                            packet.pts & KEYFRAME_PTS\n                        ) {\n                            packet.keyframe = true;\n                            packet.pts &= ~KEYFRAME_PTS;\n                        }\n\n                        controller.enqueue(packet);\n                    },\n                })\n            ),\n        };\n    }\n}\n","import { ScrcpyOptions1_23, type ScrcpyOptionsInit1_23 } from './1_23.js';\n\nexport interface ScrcpyOptionsInit1_24 extends ScrcpyOptionsInit1_23 {\n    powerOn: boolean;\n}\n\nexport class ScrcpyOptions1_24<T extends ScrcpyOptionsInit1_24 = ScrcpyOptionsInit1_24>\n    extends ScrcpyOptions1_23<T> {\n    public constructor(init: Partial<ScrcpyOptionsInit1_24>) {\n        super(init);\n    }\n\n    public override getDefaultValue(): T {\n        return {\n            ...super.getDefaultValue(),\n            powerOn: true,\n        };\n    }\n}\n","import Struct, {\n    NumberFieldDefinition,\n    NumberFieldType,\n} from \"@yume-chan/struct\";\n\nimport {\n    ScrcpyControlMessageType,\n    type ScrcpyInjectScrollControlMessage,\n} from \"../../control/index.js\";\nimport { type ScrcpyScrollController } from \"../1_16/index.js\";\n\nconst Int16Max = (1 << 15) - 1;\n\nconst ScrcpyFloatToInt16NumberType: NumberFieldType = {\n    size: 2,\n    signed: true,\n    deserialize(array, littleEndian) {\n        const value = NumberFieldType.Int16.deserialize(array, littleEndian);\n        return value / Int16Max;\n    },\n    serialize(dataView, offset, value, littleEndian) {\n        value = value * Int16Max;\n        NumberFieldType.Int16.serialize(dataView, offset, value, littleEndian);\n    },\n};\n\nconst ScrcpyFloatToInt16FieldDefinition = new NumberFieldDefinition(\n    ScrcpyFloatToInt16NumberType\n);\n\nexport const ScrcpyInjectScrollControlMessage1_25 = new Struct()\n    .uint8(\"type\", ScrcpyControlMessageType.InjectScroll as const)\n    .uint32(\"pointerX\")\n    .uint32(\"pointerY\")\n    .uint16(\"screenWidth\")\n    .uint16(\"screenHeight\")\n    .field(\"scrollX\", ScrcpyFloatToInt16FieldDefinition)\n    .field(\"scrollY\", ScrcpyFloatToInt16FieldDefinition)\n    .int32(\"buttons\");\n\nexport type ScrcpyInjectScrollControlMessage1_25 =\n    typeof ScrcpyInjectScrollControlMessage1_25[\"TInit\"];\n\nexport class ScrcpyScrollController1_25 implements ScrcpyScrollController {\n    serializeScrollMessage(\n        message: ScrcpyInjectScrollControlMessage\n    ): Uint8Array | undefined {\n        return ScrcpyInjectScrollControlMessage1_25.serialize(message);\n    }\n}\n","import { type ScrcpyScrollController } from \"../1_16/index.js\";\nimport { ScrcpyOptions1_24, type ScrcpyOptionsInit1_24 } from \"../1_24.js\";\n\nimport { ScrcpyScrollController1_25 } from \"./scroll.js\";\n\nexport class ScrcpyOptions1_25<\n    T extends ScrcpyOptionsInit1_24 = ScrcpyOptionsInit1_24\n> extends ScrcpyOptions1_24<T> {\n    public override getScrollController(): ScrcpyScrollController {\n        return new ScrcpyScrollController1_25();\n    }\n}\n","export * from \"./options.js\";\nexport * from \"./scroll.js\";\n","export * from './1_16/index.js';\nexport * from './1_18.js';\nexport * from './1_21.js';\nexport * from \"./1_22/index.js\";\nexport * from \"./1_23.js\";\nexport * from \"./1_24.js\";\nexport * from \"./1_25/index.js\";\nexport * from \"./types.js\";\n","import {\n    AdbSubprocessNoneProtocol,\n    type Adb,\n    type AdbSubprocessProtocol,\n    type AdbSync,\n} from \"@yume-chan/adb\";\nimport {\n    AbortController,\n    DecodeUtf8Stream,\n    InspectStream,\n    ReadableStream,\n    SplitStringStream,\n    WrapWritableStream,\n    WritableStream,\n    type ReadableStreamDefaultController,\n    type ReadableStreamDefaultReader,\n    type ReadableWritablePair,\n} from \"@yume-chan/stream-extra\";\n\nimport { ScrcpyControlMessageSerializer } from \"../control/index.js\";\nimport {\n    ScrcpyDeviceMessageDeserializeStream,\n    type ScrcpyDeviceMessage,\n} from \"../device-message/index.js\";\nimport {\n    DEFAULT_SERVER_PATH,\n    type ScrcpyVideoStreamPacket,\n} from \"../options/index.js\";\n\nimport { type AdbScrcpyOptions } from \"./options/index.js\";\n\nclass ArrayToStream<T> extends ReadableStream<T> {\n    private array!: T[];\n    private index = 0;\n\n    constructor(array: T[]) {\n        super({\n            start: async () => {\n                await Promise.resolve();\n                this.array = array;\n            },\n            pull: (controller) => {\n                if (this.index < this.array.length) {\n                    controller.enqueue(this.array[this.index]!);\n                    this.index += 1;\n                } else {\n                    controller.close();\n                }\n            },\n        });\n    }\n}\n\nclass ConcatStream<T> extends ReadableStream<T> {\n    private streams!: ReadableStream<T>[];\n    private index = 0;\n    private reader!: ReadableStreamDefaultReader<T>;\n\n    constructor(...streams: ReadableStream<T>[]) {\n        super({\n            start: async (controller) => {\n                await Promise.resolve();\n\n                this.streams = streams;\n                this.advance(controller);\n            },\n            pull: async (controller) => {\n                const result = await this.reader.read();\n                if (!result.done) {\n                    controller.enqueue(result.value);\n                    return;\n                }\n                this.advance(controller);\n            },\n        });\n    }\n\n    private advance(controller: ReadableStreamDefaultController<T>) {\n        if (this.index < this.streams.length) {\n            this.reader = this.streams[this.index]!.getReader();\n            this.index += 1;\n        } else {\n            controller.close();\n        }\n    }\n}\n\nexport class ScrcpyExitedError extends Error {\n    public output: string[];\n\n    public constructor(output: string[]) {\n        super(\"scrcpy server exited prematurely\");\n        this.output = output;\n    }\n}\n\nexport class AdbScrcpyClient {\n    public static pushServer(adb: Adb, path = DEFAULT_SERVER_PATH) {\n        let sync!: AdbSync;\n        return new WrapWritableStream<Uint8Array>({\n            async start() {\n                sync = await adb.sync();\n                return sync.write(path);\n            },\n            async close() {\n                await sync.dispose();\n            },\n        });\n    }\n\n    public static async start(\n        adb: Adb,\n        path: string,\n        version: string,\n        options: AdbScrcpyOptions<object>\n    ) {\n        const connection = options.createConnection(adb);\n        let process: AdbSubprocessProtocol | undefined;\n\n        try {\n            await connection.initialize();\n\n            process = await adb.subprocess.spawn(\n                [\n                    // cspell: disable-next-line\n                    `CLASSPATH=${path}`,\n                    \"app_process\",\n                    /* unused */ \"/\",\n                    \"com.genymobile.scrcpy.Server\",\n                    version,\n                    ...options.formatServerArguments(),\n                ],\n                {\n                    // Scrcpy server doesn't use stderr,\n                    // so disable Shell Protocol to simplify processing\n                    protocols: [AdbSubprocessNoneProtocol],\n                }\n            );\n\n            const stdout = process.stdout\n                .pipeThrough(new DecodeUtf8Stream())\n                .pipeThrough(new SplitStringStream(\"\\n\"));\n\n            // Read stdout, otherwise `process.exit` won't resolve.\n            const output: string[] = [];\n            const abortController = new AbortController();\n            const pipe = stdout\n                .pipeTo(\n                    new WritableStream({\n                        write(chunk) {\n                            output.push(chunk);\n                        },\n                    }),\n                    {\n                        signal: abortController.signal,\n                        preventCancel: true,\n                    }\n                )\n                .catch((e) => {\n                    void e;\n                });\n\n            const result = await Promise.race([\n                process.exit,\n                connection.getStreams(),\n            ]);\n\n            if (typeof result === \"number\") {\n                throw new ScrcpyExitedError(output);\n            }\n\n            abortController.abort();\n            await pipe;\n\n            const [videoStream, controlStream] = result;\n            return new AdbScrcpyClient(\n                options,\n                process,\n                new ConcatStream(new ArrayToStream(output), stdout),\n                videoStream,\n                controlStream\n            );\n        } catch (e) {\n            await process?.kill();\n            throw e;\n        } finally {\n            connection.dispose();\n        }\n    }\n\n    /**\n     * This method will modify the given `options`,\n     * so don't reuse it elsewhere.\n     */\n    public static async getEncoders(\n        adb: Adb,\n        path: string,\n        version: string,\n        options: AdbScrcpyOptions<object>\n    ): Promise<string[]> {\n        Object.assign(options.value, {\n            // Provide an invalid encoder name\n            // So the server will return all available encoders\n            encoderName: \"_\",\n            // Disable control for faster connection in 1.22+\n            control: false,\n            sendDeviceMeta: false,\n            sendDummyByte: false,\n        });\n\n        // Scrcpy server will open connections, before initializing encoder\n        // Thus although an invalid encoder name is given, the start process will success\n        const client = await AdbScrcpyClient.start(adb, path, version, options);\n\n        const encoderNameRegex = options.getOutputEncoderNameRegex();\n        const encoders: string[] = [];\n        await client.stdout.pipeTo(\n            new WritableStream({\n                write(line) {\n                    const match = line.match(encoderNameRegex);\n                    if (match) {\n                        encoders.push(match[1]!);\n                    }\n                },\n            })\n        );\n\n        return encoders;\n    }\n\n    /**\n     * This method will modify the given `options`,\n     * so don't reuse it elsewhere.\n     */\n    public static async getDisplays(\n        adb: Adb,\n        path: string,\n        version: string,\n        options: AdbScrcpyOptions<object>\n    ): Promise<number[]> {\n        Object.assign(options.value, {\n            // Similar to `getEncoders`, pass an invalid option and parse the output\n            displayId: -1,\n            // Disable control for faster connection in 1.22+\n            control: false,\n            sendDeviceMeta: false,\n            sendDummyByte: false,\n        });\n\n        try {\n            // Server will exit before opening connections when an invalid display id was given.\n            await AdbScrcpyClient.start(adb, path, version, options);\n        } catch (e) {\n            if (e instanceof ScrcpyExitedError) {\n                const displayIdRegex = /\\s+scrcpy --display (\\d+)/;\n                const displays: number[] = [];\n                for (const line of e.output) {\n                    const match = line.match(displayIdRegex);\n                    if (match) {\n                        displays.push(Number.parseInt(match[1]!, 10));\n                    }\n                }\n                return displays;\n            }\n        }\n\n        throw new Error(\"failed to get displays\");\n    }\n\n    private process: AdbSubprocessProtocol;\n\n    private _stdout: ReadableStream<string>;\n    public get stdout() {\n        return this._stdout;\n    }\n\n    public get exit() {\n        return this.process.exit;\n    }\n\n    private _screenWidth: number | undefined;\n    public get screenWidth() {\n        return this._screenWidth;\n    }\n\n    private _screenHeight: number | undefined;\n    public get screenHeight() {\n        return this._screenHeight;\n    }\n\n    private _videoStream: ReadableStream<ScrcpyVideoStreamPacket>;\n    public get videoStream() {\n        return this._videoStream;\n    }\n\n    private _controlMessageSerializer:\n        | ScrcpyControlMessageSerializer\n        | undefined;\n    public get controlMessageSerializer() {\n        return this._controlMessageSerializer;\n    }\n\n    private _deviceMessageStream:\n        | ReadableStream<ScrcpyDeviceMessage>\n        | undefined;\n    public get deviceMessageStream() {\n        return this._deviceMessageStream;\n    }\n\n    public constructor(\n        options: AdbScrcpyOptions<object>,\n        process: AdbSubprocessProtocol,\n        stdout: ReadableStream<string>,\n        videoStream: ReadableStream<Uint8Array>,\n        controlStream: ReadableWritablePair<Uint8Array, Uint8Array> | undefined\n    ) {\n        this.process = process;\n        this._stdout = stdout;\n\n        this._videoStream = videoStream\n            .pipeThrough(options.createVideoStreamTransformer())\n            .pipeThrough(\n                new InspectStream((packet) => {\n                    if (packet.type === \"configuration\") {\n                        this._screenWidth = packet.data.croppedWidth;\n                        this._screenHeight = packet.data.croppedHeight;\n                    }\n                })\n            );\n\n        if (controlStream) {\n            this._controlMessageSerializer = new ScrcpyControlMessageSerializer(\n                controlStream.writable,\n                options\n            );\n            this._deviceMessageStream = controlStream.readable.pipeThrough(\n                new ScrcpyDeviceMessageDeserializeStream()\n            );\n        }\n    }\n\n    public async close() {\n        await this.process.kill();\n    }\n}\n","export * from './options/index.js';\nexport * from './client.js';\nexport * from './connection.js';\n","// From https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel\nexport enum AndroidCodecProfile {\n    Baseline = 0x01,\n    Main = 0x02,\n    Extended = 0x04,\n    High = 0x08,\n    High10 = 0x10,\n    High422 = 0x20,\n    High444 = 0x40,\n    ConstrainedBaseline = 0x10000,\n    ConstrainedHigh = 0x80000,\n}\n\nexport enum AndroidCodecLevel {\n    Level1 = 0x01,\n    Level1b = 0x02,\n    Level11 = 0x04,\n    Level12 = 0x08,\n    Level13 = 0x10,\n    Level2 = 0x20,\n    Level21 = 0x40,\n    Level22 = 0x80,\n    Level3 = 0x100,\n    Level31 = 0x200,\n    Level32 = 0x400,\n    Level4 = 0x800,\n    Level41 = 0x1000,\n    Level42 = 0x2000,\n    Level5 = 0x4000,\n    Level51 = 0x8000,\n    Level52 = 0x10000,\n    Level6 = 0x20000,\n    Level61 = 0x40000,\n    Level62 = 0x80000,\n}\n","export * from './adb/index.js';\nexport * from './codec.js';\nexport * from './control/index.js';\nexport * from './device-message/index.js';\nexport * from './options/index.js';\n","import { PromiseResolver } from \"@yume-chan/async\";\nimport {\n    AutoDisposable,\n    EventEmitter,\n    type Disposable,\n} from \"@yume-chan/event\";\n\nlet worker: Worker | undefined;\nlet workerReady = false;\nconst pendingResolvers: PromiseResolver<TinyH264Wrapper>[] = [];\nlet streamId = 0;\n\nexport interface PictureReadyEventArgs {\n    renderStateId: number;\n\n    width: number;\n\n    height: number;\n\n    data: ArrayBuffer;\n}\n\nconst PICTURE_READY_SUBSCRIPTIONS = new Map<\n    number,\n    (e: PictureReadyEventArgs) => void\n>();\n\nfunction subscribePictureReady(\n    streamId: number,\n    handler: (e: PictureReadyEventArgs) => void\n): Disposable {\n    PICTURE_READY_SUBSCRIPTIONS.set(streamId, handler);\n\n    return {\n        dispose() {\n            PICTURE_READY_SUBSCRIPTIONS.delete(streamId);\n        },\n    };\n}\n\nexport class TinyH264Wrapper extends AutoDisposable {\n    public readonly streamId: number;\n\n    private readonly pictureReadyEvent =\n        new EventEmitter<PictureReadyEventArgs>();\n    public get onPictureReady() {\n        return this.pictureReadyEvent.event;\n    }\n\n    public constructor(streamId: number) {\n        super();\n\n        this.streamId = streamId;\n        this.addDisposable(\n            subscribePictureReady(streamId, this.handlePictureReady)\n        );\n    }\n\n    private handlePictureReady = (e: PictureReadyEventArgs) => {\n        this.pictureReadyEvent.fire(e);\n    };\n\n    public feed(data: ArrayBuffer) {\n        worker!.postMessage(\n            {\n                type: \"decode\",\n                data: data,\n                offset: 0,\n                length: data.byteLength,\n                renderStateId: this.streamId,\n            },\n            [data]\n        );\n    }\n\n    public override dispose() {\n        super.dispose();\n        worker!.postMessage({\n            type: \"release\",\n            renderStateId: this.streamId,\n        });\n    }\n}\n\ninterface TinyH264MessageBase {\n    type: string;\n}\n\ninterface TinyH264DecoderReadyMessage extends TinyH264MessageBase {\n    type: \"decoderReady\";\n}\n\ninterface TinyH264PictureReadyMessage\n    extends TinyH264MessageBase,\n        PictureReadyEventArgs {\n    type: \"pictureReady\";\n}\n\ntype TinyH264Message =\n    | TinyH264DecoderReadyMessage\n    | TinyH264PictureReadyMessage;\n\nexport function createTinyH264Wrapper(): Promise<TinyH264Wrapper> {\n    if (!worker) {\n        worker = new Worker(new URL(\"./worker.js\", import.meta.url));\n        worker.addEventListener(\n            \"message\",\n            ({ data }: MessageEvent<TinyH264Message>) => {\n                switch (data.type) {\n                    case \"decoderReady\":\n                        workerReady = true;\n                        for (const resolver of pendingResolvers) {\n                            resolver.resolve(new TinyH264Wrapper(streamId));\n                            streamId += 1;\n                        }\n                        pendingResolvers.length = 0;\n                        break;\n                    case \"pictureReady\":\n                        PICTURE_READY_SUBSCRIPTIONS.get(data.renderStateId)?.(\n                            data\n                        );\n                        break;\n                }\n            }\n        );\n    }\n\n    if (!workerReady) {\n        const resolver = new PromiseResolver<TinyH264Wrapper>();\n        pendingResolvers.push(resolver);\n        return resolver.promise;\n    }\n\n    const decoder = new TinyH264Wrapper(streamId);\n    streamId += 1;\n    return Promise.resolve(decoder);\n}\n","import { PromiseResolver } from \"@yume-chan/async\";\nimport {\n    AndroidCodecLevel,\n    AndroidCodecProfile,\n    type H264Configuration,\n    type ScrcpyVideoStreamPacket,\n} from \"@yume-chan/scrcpy\";\nimport { WritableStream } from \"@yume-chan/stream-extra\";\nimport { type default as YuvBuffer } from \"yuv-buffer\";\nimport { type default as YuvCanvas } from \"yuv-canvas\";\n\nimport { createTinyH264Wrapper, type TinyH264Wrapper } from \"./wrapper.js\";\n\nlet cachedInitializePromise:\n    | Promise<{ YuvBuffer: typeof YuvBuffer; YuvCanvas: typeof YuvCanvas }>\n    | undefined;\nfunction initialize() {\n    if (!cachedInitializePromise) {\n        cachedInitializePromise = Promise.all([\n            import(\"yuv-buffer\"),\n            import(\"yuv-canvas\"),\n        ]).then(([YuvBuffer, { default: YuvCanvas }]) => ({\n            YuvBuffer,\n            YuvCanvas,\n        }));\n    }\n\n    return cachedInitializePromise;\n}\n\nexport class TinyH264Decoder {\n    public readonly maxProfile = AndroidCodecProfile.Baseline;\n\n    public readonly maxLevel = AndroidCodecLevel.Level4;\n\n    private _renderer: HTMLCanvasElement;\n    public get renderer() {\n        return this._renderer;\n    }\n\n    private _frameRendered = 0;\n    public get frameRendered() {\n        return this._frameRendered;\n    }\n\n    private _writable: WritableStream<ScrcpyVideoStreamPacket>;\n    public get writable() {\n        return this._writable;\n    }\n\n    private _yuvCanvas: YuvCanvas | undefined;\n    private _initializer: PromiseResolver<TinyH264Wrapper> | undefined;\n\n    public constructor() {\n        void initialize();\n\n        this._renderer = document.createElement(\"canvas\");\n\n        this._writable = new WritableStream<ScrcpyVideoStreamPacket>({\n            write: async (packet) => {\n                switch (packet.type) {\n                    case \"configuration\":\n                        void this.configure(packet.data);\n                        break;\n                    case \"frame\": {\n                        if (!this._initializer) {\n                            throw new Error(\"Decoder not configured\");\n                        }\n\n                        const wrapper = await this._initializer.promise;\n                        wrapper.feed(packet.data.slice().buffer);\n                        break;\n                    }\n                }\n            },\n        });\n    }\n\n    private async configure(config: H264Configuration) {\n        this.dispose();\n\n        this._initializer = new PromiseResolver<TinyH264Wrapper>();\n        const { YuvBuffer, YuvCanvas } = await initialize();\n\n        if (!this._yuvCanvas) {\n            this._yuvCanvas = YuvCanvas.attach(this._renderer);\n        }\n\n        const { encodedWidth, encodedHeight } = config;\n        const chromaWidth = encodedWidth / 2;\n        const chromaHeight = encodedHeight / 2;\n\n        this._renderer.width = config.croppedWidth;\n        this._renderer.height = config.croppedHeight;\n        const format = YuvBuffer.format({\n            width: encodedWidth,\n            height: encodedHeight,\n            chromaWidth,\n            chromaHeight,\n            cropLeft: config.cropLeft,\n            cropTop: config.cropTop,\n            cropWidth: config.croppedWidth,\n            cropHeight: config.croppedHeight,\n            displayWidth: config.croppedWidth,\n            displayHeight: config.croppedHeight,\n        });\n\n        const wrapper = await createTinyH264Wrapper();\n        this._initializer.resolve(wrapper);\n\n        const uPlaneOffset = encodedWidth * encodedHeight;\n        const vPlaneOffset = uPlaneOffset + chromaWidth * chromaHeight;\n        wrapper.onPictureReady(({ data }) => {\n            this._frameRendered += 1;\n            const array = new Uint8Array(data);\n            const frame = YuvBuffer.frame(\n                format,\n                YuvBuffer.lumaPlane(format, array, encodedWidth, 0),\n                YuvBuffer.chromaPlane(format, array, chromaWidth, uPlaneOffset),\n                YuvBuffer.chromaPlane(format, array, chromaWidth, vPlaneOffset)\n            );\n            this._yuvCanvas!.drawFrame(frame);\n        });\n    }\n\n    public dispose(): void {\n        this._initializer?.promise\n            .then((wrapper) => wrapper.dispose())\n            .catch((e) => {\n                void e;\n            });\n        this._initializer = undefined;\n    }\n}\n","import {\n    type H264Configuration,\n    type ScrcpyVideoStreamPacket,\n} from \"@yume-chan/scrcpy\";\nimport { WritableStream } from \"@yume-chan/stream-extra\";\n\nfunction toHex(value: number) {\n    return value.toString(16).padStart(2, \"0\").toUpperCase();\n}\n\nexport class WebCodecsDecoder {\n    // Usually, browsers can decode most configurations,\n    // So let device choose best profile and level for itself.\n    public readonly maxProfile = undefined;\n    public readonly maxLevel = undefined;\n\n    private _writable: WritableStream<ScrcpyVideoStreamPacket>;\n    public get writable() {\n        return this._writable;\n    }\n\n    private _renderer: HTMLCanvasElement;\n    public get renderer() {\n        return this._renderer;\n    }\n\n    private _frameRendered = 0;\n    public get frameRendered() {\n        return this._frameRendered;\n    }\n\n    private context: CanvasRenderingContext2D;\n    private decoder: VideoDecoder;\n\n    // Limit FPS to system refresh rate\n    private lastFrame: VideoFrame | undefined;\n    private animationFrame = 0;\n\n    public constructor() {\n        this._renderer = document.createElement(\"canvas\");\n\n        this.context = this._renderer.getContext(\"2d\")!;\n        this.decoder = new VideoDecoder({\n            output: (frame) => {\n                if (this.lastFrame) {\n                    this.lastFrame.close();\n                }\n                this.lastFrame = frame;\n\n                if (!this.animationFrame) {\n                    // Start render loop on first frame\n                    this.render();\n                }\n            },\n            error(e) {\n                void e;\n            },\n        });\n\n        this._writable = new WritableStream<ScrcpyVideoStreamPacket>({\n            write: (packet) => {\n                switch (packet.type) {\n                    case \"configuration\":\n                        this.configure(packet.data);\n                        break;\n                    case \"frame\":\n                        this.decoder.decode(\n                            new EncodedVideoChunk({\n                                // Treat `undefined` as `key`, otherwise won't decode.\n                                type:\n                                    packet.keyframe === false ? \"delta\" : \"key\",\n                                timestamp: 0,\n                                data: packet.data,\n                            })\n                        );\n                        break;\n                }\n            },\n        });\n    }\n\n    private render = () => {\n        if (this.lastFrame) {\n            this._frameRendered += 1;\n            this.context.drawImage(this.lastFrame, 0, 0);\n            this.lastFrame.close();\n            this.lastFrame = undefined;\n        }\n\n        this.animationFrame = requestAnimationFrame(this.render);\n    };\n\n    private configure(config: H264Configuration) {\n        const { profileIndex, constraintSet, levelIndex } = config;\n\n        this._renderer.width = config.croppedWidth;\n        this._renderer.height = config.croppedHeight;\n\n        // https://www.rfc-editor.org/rfc/rfc6381#section-3.3\n        // ISO Base Media File Format Name Space\n        const codec = `avc1.${[profileIndex, constraintSet, levelIndex]\n            .map(toHex)\n            .join(\"\")}`;\n        this.decoder.configure({\n            codec: codec,\n            optimizeForLatency: true,\n        });\n    }\n\n    public dispose() {\n        cancelAnimationFrame(this.animationFrame);\n        this.decoder.close();\n    }\n}\n","export default '1.25';","import {\n    CommandBar,\n    Dialog,\n    Dropdown,\n    ICommandBarItemProps,\n    Icon,\n    IconButton,\n    IDropdownOption,\n    LayerHost,\n    Position,\n    ProgressIndicator,\n    SpinButton,\n    Stack,\n    TextField,\n    Toggle,\n    TooltipHost,\n} from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { makeStyles } from \"@griffel/react\";\nimport {\n    action,\n    autorun,\n    makeAutoObservable,\n    observable,\n    runInAction,\n} from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { CSSProperties, ReactNode, useEffect, useState } from \"react\";\n\nimport { ADB_SYNC_MAX_PACKET_SIZE } from \"@yume-chan/adb\";\nimport { Disposable, EventEmitter } from \"@yume-chan/event\";\nimport {\n    AdbScrcpyClient,\n    AdbScrcpyOptions1_22,\n    AndroidCodecLevel,\n    AndroidCodecProfile,\n    AndroidKeyCode,\n    AndroidKeyEventAction,\n    AndroidMotionEventAction,\n    AndroidScreenPowerMode,\n    CodecOptions,\n    DEFAULT_SERVER_PATH,\n    ScrcpyDeviceMessageType,\n    ScrcpyLogLevel,\n    ScrcpyOptions1_25,\n    ScrcpyOptionsInit1_24,\n    ScrcpyPointerId,\n    ScrcpyVideoOrientation,\n    type ScrcpyVideoStreamPacket,\n} from \"@yume-chan/scrcpy\";\nimport { TinyH264Decoder } from \"@yume-chan/scrcpy-decoder-tinyh264\";\nimport { WebCodecsDecoder } from \"@yume-chan/scrcpy-decoder-webcodecs\";\nimport SCRCPY_SERVER_VERSION from \"@yume-chan/scrcpy/bin/version\";\nimport {\n    ChunkStream,\n    InspectStream,\n    ReadableStream,\n    WritableStream,\n} from \"@yume-chan/stream-extra\";\n\nimport {\n    DemoModePanel,\n    DeviceView,\n    DeviceViewRef,\n    ExternalLink,\n} from \"../components\";\nimport { GlobalState } from \"../state\";\nimport {\n    CommonStackTokens,\n    formatSpeed,\n    Icons,\n    ProgressStream,\n    RouteStackProps,\n} from \"../utils\";\n\nconst SERVER_URL = new URL(\n    \"@yume-chan/scrcpy/bin/scrcpy-server?url\",\n    import.meta.url\n);\n\nclass FetchWithProgress {\n    public readonly promise: Promise<Uint8Array>;\n\n    private _downloaded = 0;\n    public get downloaded() {\n        return this._downloaded;\n    }\n\n    private _total = 0;\n    public get total() {\n        return this._total;\n    }\n\n    private progressEvent = new EventEmitter<\n        [download: number, total: number]\n    >();\n    public get onProgress() {\n        return this.progressEvent.event;\n    }\n\n    public constructor(url: string | URL) {\n        this.promise = this.fetch(url);\n    }\n\n    private async fetch(url: string | URL) {\n        const response = await window.fetch(url);\n        this._total = Number.parseInt(\n            response.headers.get(\"Content-Length\") ?? \"0\",\n            10\n        );\n        this.progressEvent.fire([this._downloaded, this._total]);\n\n        const reader = response.body!.getReader();\n        const chunks: Uint8Array[] = [];\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                break;\n            }\n            chunks.push(result.value);\n            this._downloaded += result.value.byteLength;\n            this.progressEvent.fire([this._downloaded, this._total]);\n        }\n\n        this._total = chunks.reduce(\n            (result, item) => result + item.byteLength,\n            0\n        );\n        const result = new Uint8Array(this._total);\n        let position = 0;\n        for (const chunk of chunks) {\n            result.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return result;\n    }\n}\n\nlet cachedValue: FetchWithProgress | undefined;\nfunction fetchServer(\n    onProgress?: (e: [downloaded: number, total: number]) => void\n) {\n    if (!cachedValue) {\n        cachedValue = new FetchWithProgress(SERVER_URL);\n        cachedValue.promise.catch((e) => {\n            cachedValue = undefined;\n        });\n    }\n\n    if (onProgress) {\n        cachedValue.onProgress(onProgress);\n        onProgress([cachedValue.downloaded, cachedValue.total]);\n    }\n\n    return cachedValue.promise;\n}\n\nfunction clamp(value: number, min: number, max: number): number {\n    if (value < min) {\n        return min;\n    }\n\n    if (value > max) {\n        return max;\n    }\n\n    return value;\n}\n\nexport interface H264Decoder extends Disposable {\n    readonly maxProfile: AndroidCodecProfile | undefined;\n    readonly maxLevel: AndroidCodecLevel | undefined;\n\n    readonly renderer: HTMLElement;\n    readonly frameRendered: number;\n    readonly writable: WritableStream<ScrcpyVideoStreamPacket>;\n}\n\nexport interface H264DecoderConstructor {\n    new (): H264Decoder;\n}\n\ninterface DecoderDefinition {\n    key: string;\n    name: string;\n    Constructor: H264DecoderConstructor;\n}\n\ntype RequiredScrcpyOptions = Pick<\n    ScrcpyOptionsInit1_24,\n    \"crop\" | \"maxSize\" | \"bitRate\" | \"powerOn\"\n>;\ntype OptionalScrcpyOptions = Partial<\n    Pick<\n        ScrcpyOptionsInit1_24,\n        | \"displayId\"\n        | \"lockVideoOrientation\"\n        | \"encoderName\"\n        | \"tunnelForward\"\n        | \"stayAwake\"\n        | \"powerOffOnClose\"\n    >\n>;\n\ninterface Settings extends RequiredScrcpyOptions, OptionalScrcpyOptions {\n    turnScreenOff?: boolean;\n    decoder?: string;\n    ignoreDecoderCodecArgs?: boolean;\n}\n\ninterface SettingDefinitionBase {\n    key: keyof Settings;\n    type: string;\n    label: string;\n    labelExtra?: JSX.Element;\n    description?: string;\n}\n\ninterface TextSettingDefinition extends SettingDefinitionBase {\n    type: \"text\";\n    placeholder?: string;\n}\n\ninterface DropdownSettingDefinition extends SettingDefinitionBase {\n    type: \"dropdown\";\n    placeholder?: string;\n    options: IDropdownOption[];\n}\n\ninterface ToggleSettingDefinition extends SettingDefinitionBase {\n    type: \"toggle\";\n}\n\ninterface NumberSettingDefinition extends SettingDefinitionBase {\n    type: \"number\";\n    min?: number;\n    max?: number;\n    step?: number;\n}\n\ntype SettingDefinition =\n    | TextSettingDefinition\n    | DropdownSettingDefinition\n    | ToggleSettingDefinition\n    | NumberSettingDefinition;\n\ninterface SettingItemProps {\n    definition: SettingDefinition;\n    settings: any;\n    onChange: (key: keyof Settings, value: any) => void;\n}\n\nconst useClasses = makeStyles({\n    labelRight: {\n        marginLeft: \"4px\",\n    },\n    video: {\n        transformOrigin: \"center center\",\n    },\n});\n\nconst SettingItem = observer(function SettingItem({\n    definition,\n    settings,\n    onChange,\n}: SettingItemProps) {\n    const classes = useClasses();\n\n    let label: JSX.Element = (\n        <Stack horizontal verticalAlign=\"center\">\n            <span>{definition.label}</span>\n            {!!definition.description && (\n                <TooltipHost content={definition.description}>\n                    <Icon\n                        className={classes.labelRight}\n                        iconName={Icons.Info}\n                    />\n                </TooltipHost>\n            )}\n            {definition.labelExtra}\n        </Stack>\n    );\n\n    switch (definition.type) {\n        case \"text\":\n            return (\n                <TextField\n                    label={label as any}\n                    placeholder={definition.placeholder}\n                    value={settings[definition.key]}\n                    onChange={(e, value) => onChange(definition.key, value)}\n                />\n            );\n        case \"dropdown\":\n            return (\n                <Dropdown\n                    label={label as any}\n                    options={definition.options}\n                    placeholder={definition.placeholder}\n                    selectedKey={settings[definition.key]}\n                    onChange={(e, option) =>\n                        onChange(definition.key, option!.key)\n                    }\n                />\n            );\n        case \"toggle\":\n            return (\n                <Toggle\n                    label={label}\n                    checked={settings[definition.key]}\n                    onChange={(e, checked) => onChange(definition.key, checked)}\n                />\n            );\n        case \"number\":\n            return (\n                <SpinButton\n                    label={definition.label}\n                    labelPosition={Position.top}\n                    min={definition.min}\n                    max={definition.max}\n                    step={definition.step}\n                    value={settings[definition.key].toString()}\n                    onChange={(e, value) =>\n                        onChange(definition.key, Number.parseInt(value!, 10))\n                    }\n                />\n            );\n    }\n});\n\nconst KEY_MAP = {\n    Enter: AndroidKeyCode.Enter,\n    Escape: AndroidKeyCode.Escape,\n    Backspace: AndroidKeyCode.Delete,\n    Tab: AndroidKeyCode.Tab,\n    Delete: AndroidKeyCode.ForwardDelete,\n    Home: AndroidKeyCode.MoveHome,\n    End: AndroidKeyCode.MoveEnd,\n    Space: AndroidKeyCode.Space,\n    ArrowUp: AndroidKeyCode.DPadUp,\n    ArrowDown: AndroidKeyCode.DPadDown,\n    ArrowLeft: AndroidKeyCode.DPadLeft,\n    ArrowRight: AndroidKeyCode.DPadRight,\n} as Record<string, AndroidKeyCode | undefined>;\n\nclass ScrcpyPageState {\n    running = false;\n\n    deviceView: DeviceViewRef | null = null;\n    rendererContainer: HTMLDivElement | null = null;\n\n    logVisible = false;\n    log: string[] = [];\n    settingsVisible = false;\n    demoModeVisible = false;\n    navigationBarVisible = true;\n\n    width = 0;\n    height = 0;\n    rotate = 0;\n\n    get rotatedWidth() {\n        return state.rotate & 1 ? state.height : state.width;\n    }\n    get rotatedHeight() {\n        return state.rotate & 1 ? state.width : state.height;\n    }\n\n    client: AdbScrcpyClient | undefined = undefined;\n\n    async pushServer() {\n        const serverBuffer = await fetchServer();\n\n        await new ReadableStream<Uint8Array>({\n            start(controller) {\n                controller.enqueue(serverBuffer);\n                controller.close();\n            },\n        }).pipeTo(AdbScrcpyClient.pushServer(GlobalState.device!));\n    }\n\n    encoders: string[] = [];\n    updateEncoders = async () => {\n        try {\n            await this.pushServer();\n\n            const encoders = await AdbScrcpyClient.getEncoders(\n                GlobalState.device!,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                new AdbScrcpyOptions1_22(\n                    new ScrcpyOptions1_25({\n                        logLevel: ScrcpyLogLevel.Debug,\n                        tunnelForward: this.settings.tunnelForward,\n                    })\n                )\n            );\n\n            runInAction(() => {\n                this.encoders = encoders;\n                if (\n                    !this.settings.encoderName ||\n                    !this.encoders.includes(this.settings.encoderName)\n                ) {\n                    this.settings.encoderName = this.encoders[0];\n                }\n            });\n        } catch (e: any) {\n            GlobalState.showErrorDialog(e);\n        }\n    };\n\n    decoders: DecoderDefinition[] = [\n        {\n            key: \"tinyh264\",\n            name: \"TinyH264 (Software)\",\n            Constructor: TinyH264Decoder,\n        },\n    ];\n    decoder: H264Decoder | undefined = undefined;\n    fpsCounterIntervalId: any = undefined;\n    fps = 0;\n\n    displays: number[] = [];\n    updateDisplays = async () => {\n        try {\n            await this.pushServer();\n\n            const displays = await AdbScrcpyClient.getDisplays(\n                GlobalState.device!,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                new AdbScrcpyOptions1_22(\n                    new ScrcpyOptions1_25({\n                        logLevel: ScrcpyLogLevel.Debug,\n                        tunnelForward: this.settings.tunnelForward,\n                    })\n                )\n            );\n\n            runInAction(() => {\n                this.displays = displays;\n                if (\n                    !this.settings.displayId ||\n                    !this.displays.includes(this.settings.displayId)\n                ) {\n                    this.settings.displayId = this.displays[0];\n                }\n            });\n        } catch (e: any) {\n            GlobalState.showErrorDialog(e);\n        }\n    };\n\n    connecting = false;\n    serverTotalSize = 0;\n    serverDownloadedSize = 0;\n    debouncedServerDownloadedSize = 0;\n    serverDownloadSpeed = 0;\n    serverUploadedSize = 0;\n    debouncedServerUploadedSize = 0;\n    serverUploadSpeed = 0;\n\n    get commandBarItems() {\n        const result: ICommandBarItemProps[] = [];\n\n        if (!this.running) {\n            result.push({\n                key: \"start\",\n                disabled: !GlobalState.device,\n                iconProps: { iconName: Icons.Play },\n                text: \"Start\",\n                onClick: this.start as VoidFunction,\n            });\n        } else {\n            result.push({\n                key: \"stop\",\n                iconProps: { iconName: Icons.Stop },\n                text: \"Stop\",\n                onClick: this.stop as VoidFunction,\n            });\n        }\n\n        result.push({\n            key: \"fullscreen\",\n            disabled: !this.running,\n            iconProps: { iconName: Icons.FullScreenMaximize },\n            iconOnly: true,\n            text: \"Fullscreen\",\n            onClick: () => {\n                this.deviceView?.enterFullscreen();\n            },\n        });\n\n        result.push(\n            {\n                key: \"volumeUp\",\n                disabled: !this.running,\n                iconProps: { iconName: Icons.Speaker2 },\n                iconOnly: true,\n                text: \"Volume Up\",\n                onClick: (async () => {\n                    // TODO: Auto repeat when holding\n                    await this.client?.controlMessageSerializer!.injectKeyCode({\n                        action: AndroidKeyEventAction.Down,\n                        keyCode: AndroidKeyCode.VolumeUp,\n                        repeat: 0,\n                        metaState: 0,\n                    });\n                    await this.client?.controlMessageSerializer!.injectKeyCode({\n                        action: AndroidKeyEventAction.Up,\n                        keyCode: AndroidKeyCode.VolumeUp,\n                        repeat: 0,\n                        metaState: 0,\n                    });\n                }) as () => void,\n            },\n            {\n                key: \"volumeDown\",\n                disabled: !this.running,\n                iconProps: { iconName: Icons.Speaker1 },\n                iconOnly: true,\n                text: \"Volume Down\",\n                onClick: (async () => {\n                    await this.client?.controlMessageSerializer!.injectKeyCode({\n                        action: AndroidKeyEventAction.Down,\n                        keyCode: AndroidKeyCode.VolumeDown,\n                        repeat: 0,\n                        metaState: 0,\n                    });\n                    await this.client?.controlMessageSerializer!.injectKeyCode({\n                        action: AndroidKeyEventAction.Up,\n                        keyCode: AndroidKeyCode.VolumeDown,\n                        repeat: 0,\n                        metaState: 0,\n                    });\n                }) as () => void,\n            },\n            {\n                key: \"volumeMute\",\n                disabled: !this.running,\n                iconProps: { iconName: Icons.SpeakerOff },\n                iconOnly: true,\n                text: \"Toggle Mute\",\n                onClick: (async () => {\n                    await this.client?.controlMessageSerializer!.injectKeyCode({\n                        action: AndroidKeyEventAction.Down,\n                        keyCode: AndroidKeyCode.VolumeMute,\n                        repeat: 0,\n                        metaState: 0,\n                    });\n                    await this.client?.controlMessageSerializer!.injectKeyCode({\n                        action: AndroidKeyEventAction.Up,\n                        keyCode: AndroidKeyCode.VolumeMute,\n                        repeat: 0,\n                        metaState: 0,\n                    });\n                }) as () => void,\n            }\n        );\n\n        result.push(\n            {\n                key: \"rotateDevice\",\n                disabled: !this.running,\n                iconProps: { iconName: Icons.Orientation },\n                iconOnly: true,\n                text: \"Rotate Device\",\n                onClick: () => {\n                    this.client!.controlMessageSerializer!.rotateDevice();\n                },\n            },\n            {\n                key: \"rotateVideoLeft\",\n                disabled: !this.running,\n                iconProps: { iconName: Icons.RotateLeft },\n                iconOnly: true,\n                text: \"Rotate Video Left\",\n                onClick: action(() => {\n                    this.rotate -= 1;\n                    if (this.rotate < 0) {\n                        this.rotate = 3;\n                    }\n                }),\n            },\n            {\n                key: \"rotateVideoRight\",\n                disabled: !this.running,\n                iconProps: { iconName: Icons.RotateRight },\n                iconOnly: true,\n                text: \"Rotate Video Right\",\n                onClick: action(() => {\n                    this.rotate = (this.rotate + 1) & 3;\n                }),\n            }\n        );\n\n        result.push(\n            {\n                key: \"turnScreenOff\",\n                disabled: !this.running,\n                iconProps: { iconName: Icons.Lightbulb },\n                iconOnly: true,\n                text: \"Turn Screen Off\",\n                onClick: () => {\n                    this.client!.controlMessageSerializer!.setScreenPowerMode(\n                        AndroidScreenPowerMode.Off\n                    );\n                },\n            },\n            {\n                key: \"turnScreenOn\",\n                disabled: !this.running,\n                iconProps: { iconName: Icons.LightbulbFilament },\n                iconOnly: true,\n                text: \"Turn Screen On\",\n                onClick: () => {\n                    this.client!.controlMessageSerializer!.setScreenPowerMode(\n                        AndroidScreenPowerMode.Normal\n                    );\n                },\n            }\n        );\n\n        if (this.running) {\n            result.push({\n                key: \"fps\",\n                text: `FPS: ${this.fps}`,\n                disabled: true,\n            });\n        }\n\n        return result;\n    }\n\n    get commandBarFarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: \"NavigationBar\",\n                iconProps: { iconName: Icons.PanelBottom },\n                checked: this.navigationBarVisible,\n                text: \"Navigation Bar\",\n                iconOnly: true,\n                onClick: action(() => {\n                    this.navigationBarVisible = !this.navigationBarVisible;\n                }),\n            },\n            {\n                key: \"Log\",\n                iconProps: { iconName: Icons.TextGrammarError },\n                checked: this.logVisible,\n                text: \"Log\",\n                iconOnly: true,\n                onClick: action(() => {\n                    this.logVisible = !this.logVisible;\n                }),\n            },\n            {\n                key: \"Settings\",\n                iconProps: { iconName: Icons.Settings },\n                checked: this.settingsVisible,\n                text: \"Settings\",\n                iconOnly: true,\n                onClick: action(() => {\n                    this.settingsVisible = !this.settingsVisible;\n                }),\n            },\n            {\n                key: \"DemoMode\",\n                iconProps: { iconName: Icons.Wand },\n                checked: this.demoModeVisible,\n                text: \"Demo Mode\",\n                iconOnly: true,\n                onClick: action(() => {\n                    this.demoModeVisible = !this.demoModeVisible;\n                }),\n            },\n            {\n                key: \"info\",\n                iconProps: { iconName: Icons.Info },\n                iconOnly: true,\n                tooltipHostProps: {\n                    content: (\n                        <>\n                            <p>\n                                <ExternalLink\n                                    href=\"https://github.com/Genymobile/scrcpy\"\n                                    spaceAfter\n                                >\n                                    Scrcpy\n                                </ExternalLink>\n                                developed by Genymobile can display the screen\n                                with low latency (1~2 frames) and control the\n                                device, all without root access.\n                            </p>\n                            <p>\n                                This is a TypeScript implementation of the\n                                client part. Paired with official pre-built\n                                server binary.\n                            </p>\n                        </>\n                    ),\n                    calloutProps: {\n                        calloutMaxWidth: 300,\n                    },\n                },\n            },\n        ];\n    }\n\n    settings: Settings = {\n        maxSize: 1080,\n        bitRate: 4_000_000,\n        lockVideoOrientation: ScrcpyVideoOrientation.Unlocked,\n        displayId: 0,\n        crop: \"\",\n        powerOn: true,\n    };\n\n    get settingDefinitions() {\n        const result: SettingDefinition[] = [];\n\n        result.push(\n            {\n                key: \"powerOn\",\n                type: \"toggle\",\n                label: \"Turn device on when starting\",\n            },\n            {\n                key: \"turnScreenOff\",\n                type: \"toggle\",\n                label: \"Turn screen off when starting\",\n            },\n            {\n                key: \"stayAwake\",\n                type: \"toggle\",\n                label: \"Stay awake (if plugged in)\",\n            },\n            {\n                key: \"powerOffOnClose\",\n                type: \"toggle\",\n                label: \"Turn device off when exiting\",\n            }\n        );\n\n        result.push({\n            key: \"displayId\",\n            type: \"dropdown\",\n            label: \"Display\",\n            placeholder: \"Press refresh to update available displays\",\n            labelExtra: (\n                <IconButton\n                    iconProps={{ iconName: Icons.ArrowClockwise }}\n                    disabled={!GlobalState.device}\n                    text=\"Refresh\"\n                    onClick={this.updateDisplays}\n                />\n            ),\n            options: this.displays.map((item) => ({\n                key: item,\n                text: item.toString(),\n            })),\n        });\n\n        result.push({\n            key: \"crop\",\n            type: \"text\",\n            label: \"Crop\",\n            placeholder: \"W:H:X:Y\",\n        });\n\n        result.push({\n            key: \"maxSize\",\n            type: \"number\",\n            label: \"Max Resolution (longer side, 0 = unlimited)\",\n            min: 0,\n            max: 2560,\n            step: 50,\n        });\n\n        result.push({\n            key: \"bitRate\",\n            type: \"number\",\n            label: \"Max Bit Rate\",\n            min: 100,\n            max: 100_000_000,\n            step: 100,\n        });\n\n        result.push({\n            key: \"lockVideoOrientation\",\n            type: \"dropdown\",\n            label: \"Lock Video Orientation\",\n            options: [\n                {\n                    key: ScrcpyVideoOrientation.Unlocked,\n                    text: \"Unlocked\",\n                },\n                {\n                    key: ScrcpyVideoOrientation.Initial,\n                    text: \"Current\",\n                },\n                {\n                    key: ScrcpyVideoOrientation.Portrait,\n                    text: \"Portrait\",\n                },\n                {\n                    key: ScrcpyVideoOrientation.Landscape,\n                    text: \"Landscape\",\n                },\n                {\n                    key: ScrcpyVideoOrientation.PortraitFlipped,\n                    text: \"Portrait (Flipped)\",\n                },\n                {\n                    key: ScrcpyVideoOrientation.LandscapeFlipped,\n                    text: \"Landscape (Flipped)\",\n                },\n            ],\n        });\n\n        result.push({\n            key: \"encoderName\",\n            type: \"dropdown\",\n            label: \"Encoder\",\n            placeholder: \"Press refresh to update available encoders\",\n            labelExtra: (\n                <IconButton\n                    iconProps={{ iconName: Icons.ArrowClockwise }}\n                    disabled={!GlobalState.device}\n                    text=\"Refresh\"\n                    onClick={this.updateEncoders}\n                />\n            ),\n            options: this.encoders.map((item) => ({\n                key: item,\n                text: item,\n            })),\n        });\n\n        if (this.decoders.length > 1) {\n            result.push({\n                key: \"decoder\",\n                type: \"dropdown\",\n                label: \"Decoder\",\n                options: this.decoders.map((item) => ({\n                    key: item.key,\n                    text: item.name,\n                    data: item,\n                })),\n            });\n        }\n\n        result.push({\n            key: \"ignoreDecoderCodecArgs\",\n            type: \"toggle\",\n            label: `Ignore decoder's codec arguments`,\n            description: `Some decoders don't support all H.264 profile/levels, so they request the device to encode at their highest-supported codec. However, some super old devices may not support that codec so their encoders will fail to start. Use this option to let device choose the codec to be used.`,\n        });\n\n        result.push({\n            key: \"tunnelForward\",\n            type: \"toggle\",\n            label: \"Use forward connection\",\n            description:\n                \"Android before version 9 has a bug that prevents reverse tunneling when using ADB over WiFi.\",\n        });\n\n        return result;\n    }\n\n    constructor() {\n        makeAutoObservable(this, {\n            decoders: observable.shallow,\n            settings: observable.deep,\n            start: false,\n            stop: action.bound,\n            dispose: action.bound,\n            handleDeviceViewRef: action.bound,\n            handleRendererContainerRef: action.bound,\n            handleBackPointerDown: false,\n            handleBackPointerUp: false,\n            handleHomePointerDown: false,\n            handleHomePointerUp: false,\n            handleAppSwitchPointerDown: false,\n            handleAppSwitchPointerUp: false,\n            calculatePointerPosition: false,\n            injectTouch: false,\n            handlePointerDown: false,\n            handlePointerMove: false,\n            handlePointerUp: false,\n            handleWheel: false,\n            handleContextMenu: false,\n            handleKeyDown: false,\n        });\n\n        autorun(() => {\n            if (GlobalState.device) {\n                runInAction(() => {\n                    this.encoders = [];\n                    this.settings.encoderName = undefined;\n\n                    this.displays = [];\n                    this.settings.displayId = undefined;\n                });\n            } else {\n                this.dispose();\n            }\n        });\n\n        autorun(() => {\n            if (this.rendererContainer && this.decoder) {\n                while (this.rendererContainer.firstChild) {\n                    this.rendererContainer.firstChild.remove();\n                }\n                this.rendererContainer.appendChild(this.decoder.renderer);\n            }\n        });\n\n        autorun(() => {\n            this.settings.decoder = this.decoders[0].key;\n        });\n    }\n\n    start = async () => {\n        if (!GlobalState.device) {\n            return;\n        }\n\n        try {\n            if (!this.settings.decoder) {\n                throw new Error(\"No available decoder\");\n            }\n\n            runInAction(() => {\n                this.serverTotalSize = 0;\n                this.serverDownloadedSize = 0;\n                this.debouncedServerDownloadedSize = 0;\n                this.serverUploadedSize = 0;\n                this.debouncedServerUploadedSize = 0;\n                this.connecting = true;\n            });\n\n            let intervalId = setInterval(\n                action(() => {\n                    this.serverDownloadSpeed =\n                        this.serverDownloadedSize -\n                        this.debouncedServerDownloadedSize;\n                    this.debouncedServerDownloadedSize =\n                        this.serverDownloadedSize;\n                }),\n                1000\n            );\n\n            let serverBuffer: Uint8Array;\n\n            try {\n                serverBuffer = await fetchServer(\n                    action(([downloaded, total]) => {\n                        this.serverDownloadedSize = downloaded;\n                        this.serverTotalSize = total;\n                    })\n                );\n                runInAction(() => {\n                    this.serverDownloadSpeed =\n                        this.serverDownloadedSize -\n                        this.debouncedServerDownloadedSize;\n                    this.debouncedServerDownloadedSize =\n                        this.serverDownloadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            intervalId = setInterval(\n                action(() => {\n                    this.serverUploadSpeed =\n                        this.serverUploadedSize -\n                        this.debouncedServerUploadedSize;\n                    this.debouncedServerUploadedSize = this.serverUploadedSize;\n                }),\n                1000\n            );\n\n            try {\n                await new ReadableStream<Uint8Array>({\n                    start(controller) {\n                        controller.enqueue(serverBuffer);\n                        controller.close();\n                    },\n                })\n                    .pipeThrough(new ChunkStream(ADB_SYNC_MAX_PACKET_SIZE))\n                    .pipeThrough(\n                        new ProgressStream(\n                            action((progress) => {\n                                this.serverUploadedSize = progress;\n                            })\n                        )\n                    )\n                    .pipeTo(AdbScrcpyClient.pushServer(GlobalState.device!));\n\n                runInAction(() => {\n                    this.serverUploadSpeed =\n                        this.serverUploadedSize -\n                        this.debouncedServerUploadedSize;\n                    this.debouncedServerUploadedSize = this.serverUploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            const decoderDefinition =\n                this.decoders.find((x) => x.key === this.settings.decoder) ??\n                this.decoders[0];\n            const decoder = new decoderDefinition.Constructor();\n\n            runInAction(() => {\n                this.decoder = decoder;\n\n                let lastFrameCount = 0;\n                this.fpsCounterIntervalId = setInterval(\n                    action(() => {\n                        this.fps = decoder.frameRendered - lastFrameCount;\n                        lastFrameCount = decoder.frameRendered;\n                    }),\n                    1000\n                );\n            });\n\n            const options = new AdbScrcpyOptions1_22(\n                new ScrcpyOptions1_25({\n                    logLevel: ScrcpyLogLevel.Debug,\n                    ...this.settings,\n                    sendDeviceMeta: false,\n                    sendDummyByte: false,\n                    codecOptions: !this.settings.ignoreDecoderCodecArgs\n                        ? new CodecOptions({\n                              profile: decoder.maxProfile,\n                              level: decoder.maxLevel,\n                          })\n                        : undefined,\n                })\n            );\n\n            runInAction(() => {\n                this.log = [];\n                this.log.push(\n                    `[client] Server version: ${SCRCPY_SERVER_VERSION}`\n                );\n                this.log.push(\n                    `[client] Server arguments: ${options\n                        .formatServerArguments()\n                        .join(\" \")}`\n                );\n            });\n\n            const client = await AdbScrcpyClient.start(\n                GlobalState.device!,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                options\n            );\n\n            client.stdout.pipeTo(\n                new WritableStream<string>({\n                    write: action((line) => {\n                        this.log.push(line);\n                    }),\n                })\n            );\n\n            client.videoStream\n                .pipeThrough(\n                    new InspectStream(\n                        action((packet: ScrcpyVideoStreamPacket) => {\n                            if (packet.type === \"configuration\") {\n                                const { croppedWidth, croppedHeight } =\n                                    packet.data;\n                                this.log.push(\n                                    `[client] Video size changed: ${croppedWidth}x${croppedHeight}`\n                                );\n\n                                this.width = croppedWidth;\n                                this.height = croppedHeight;\n                            }\n                        })\n                    )\n                )\n                .pipeTo(decoder.writable)\n                .catch(() => {});\n\n            client.exit.then(this.dispose);\n\n            client\n                .deviceMessageStream!.pipeTo(\n                    new WritableStream({\n                        write(message) {\n                            switch (message.type) {\n                                case ScrcpyDeviceMessageType.Clipboard:\n                                    window.navigator.clipboard.writeText(\n                                        message.content\n                                    );\n                                    break;\n                            }\n                        },\n                    })\n                )\n                .catch(() => {});\n\n            if (this.settings.turnScreenOff) {\n                await client.controlMessageSerializer!.setScreenPowerMode(\n                    AndroidScreenPowerMode.Off\n                );\n            }\n\n            runInAction(() => {\n                this.client = client;\n                this.running = true;\n            });\n        } catch (e: any) {\n            GlobalState.showErrorDialog(e);\n        } finally {\n            runInAction(() => {\n                this.connecting = false;\n            });\n        }\n    };\n\n    async stop() {\n        // Request to close client first\n        await this.client?.close();\n        this.dispose();\n    }\n\n    dispose() {\n        // Otherwise some packets may still arrive at decoder\n        this.decoder?.dispose();\n        this.decoder = undefined;\n\n        this.fps = 0;\n        clearTimeout(this.fpsCounterIntervalId);\n\n        this.client = undefined;\n        this.running = false;\n    }\n\n    handleDeviceViewRef(element: DeviceViewRef | null) {\n        this.deviceView = element;\n    }\n\n    handleRendererContainerRef(element: HTMLDivElement | null) {\n        this.rendererContainer = element;\n        this.rendererContainer?.addEventListener(\"wheel\", this.handleWheel, {\n            passive: false,\n        });\n    }\n\n    handleBackPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n\n        this.client!.controlMessageSerializer!.backOrScreenOn(\n            AndroidKeyEventAction.Down\n        );\n    };\n\n    handleBackPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n\n        this.client!.controlMessageSerializer!.backOrScreenOn(\n            AndroidKeyEventAction.Up\n        );\n    };\n\n    handleHomePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n\n        this.client!.controlMessageSerializer!.injectKeyCode({\n            action: AndroidKeyEventAction.Down,\n            keyCode: AndroidKeyCode.Home,\n            repeat: 0,\n            metaState: 0,\n        });\n    };\n\n    handleHomePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n\n        this.client!.controlMessageSerializer!.injectKeyCode({\n            action: AndroidKeyEventAction.Up,\n            keyCode: AndroidKeyCode.Home,\n            repeat: 0,\n            metaState: 0,\n        });\n    };\n\n    handleAppSwitchPointerDown = async (\n        e: React.PointerEvent<HTMLDivElement>\n    ) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n\n        this.client!.controlMessageSerializer!.injectKeyCode({\n            action: AndroidKeyEventAction.Down,\n            keyCode: AndroidKeyCode.AppSwitch,\n            repeat: 0,\n            metaState: 0,\n        });\n    };\n\n    handleAppSwitchPointerUp = async (\n        e: React.PointerEvent<HTMLDivElement>\n    ) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n\n        this.client!.controlMessageSerializer!.injectKeyCode({\n            action: AndroidKeyEventAction.Up,\n            keyCode: AndroidKeyCode.AppSwitch,\n            repeat: 0,\n            metaState: 0,\n        });\n    };\n\n    calculatePointerPosition(clientX: number, clientY: number) {\n        const viewRect = this.rendererContainer!.getBoundingClientRect();\n        let pointerViewX = clamp((clientX - viewRect.x) / viewRect.width, 0, 1);\n        let pointerViewY = clamp(\n            (clientY - viewRect.y) / viewRect.height,\n            0,\n            1\n        );\n\n        if (this.rotate & 1) {\n            [pointerViewX, pointerViewY] = [pointerViewY, pointerViewX];\n        }\n        switch (this.rotate) {\n            case 1:\n                pointerViewY = 1 - pointerViewY;\n                break;\n            case 2:\n                pointerViewX = 1 - pointerViewX;\n                pointerViewY = 1 - pointerViewY;\n                break;\n            case 3:\n                pointerViewX = 1 - pointerViewX;\n                break;\n        }\n\n        return {\n            x: pointerViewX * this.width,\n            y: pointerViewY * this.height,\n        };\n    }\n\n    injectTouch = (\n        action: AndroidMotionEventAction,\n        e: React.PointerEvent<HTMLDivElement>\n    ) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { pointerType } = e;\n        let pointerId: bigint;\n        let { pressure } = e;\n        if (pointerType === \"mouse\") {\n            // ScrcpyPointerId.Mouse doesn't work with Chrome browser\n            // https://github.com/Genymobile/scrcpy/issues/3635\n            pointerId = ScrcpyPointerId.Finger;\n            pressure = pressure === 0 ? 0 : 1;\n        } else {\n            pointerId = BigInt(e.pointerId);\n        }\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client!.controlMessageSerializer!.injectTouch({\n            action,\n            pointerId,\n            screenWidth: this.client!.screenWidth!,\n            screenHeight: this.client!.screenHeight!,\n            pointerX: x,\n            pointerY: y,\n            pressure,\n            buttons: e.buttons,\n        });\n    };\n\n    handlePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.rendererContainer!.focus();\n        e.preventDefault();\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.injectTouch(AndroidMotionEventAction.Down, e);\n    };\n\n    handlePointerMove = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(\n            e.buttons === 0\n                ? AndroidMotionEventAction.HoverMove\n                : AndroidMotionEventAction.Move,\n            e\n        );\n    };\n\n    handlePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(AndroidMotionEventAction.Up, e);\n    };\n\n    handleWheel = (e: WheelEvent) => {\n        if (!this.client) {\n            return;\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client!.controlMessageSerializer!.injectScroll({\n            screenWidth: this.client!.screenWidth!,\n            screenHeight: this.client!.screenHeight!,\n            pointerX: x,\n            pointerY: y,\n            scrollX: e.deltaX / 100,\n            scrollY: e.deltaY / 100,\n            buttons: 0,\n        });\n    };\n\n    handleContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    handleKeyDown = async (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { key, code } = e;\n        if (key.match(/^[!-`{-~]$/i)) {\n            this.client!.controlMessageSerializer!.injectText(key);\n            return;\n        }\n\n        const keyCode = KEY_MAP[code];\n\n        if (keyCode) {\n            // Intercept keys like \"Tab\"\n            e.preventDefault();\n            e.stopPropagation();\n\n            this.client!.controlMessageSerializer!.injectKeyCode({\n                action: AndroidKeyEventAction.Down,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n            this.client!.controlMessageSerializer!.injectKeyCode({\n                action: AndroidKeyEventAction.Up,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n        }\n    };\n}\n\nconst state = new ScrcpyPageState();\n\nconst ConnectionDialog = observer(() => {\n    const layerHostId = useId(\"layerHost\");\n\n    const [isClient, setIsClient] = useState(false);\n\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    if (!isClient) {\n        return null;\n    }\n\n    return (\n        <>\n            <LayerHost\n                id={layerHostId}\n                style={{\n                    position: \"absolute\",\n                    top: 0,\n                    bottom: 0,\n                    left: 0,\n                    right: 0,\n                    margin: 0,\n                    pointerEvents: \"none\",\n                }}\n            />\n\n            <Dialog\n                hidden={!state.connecting}\n                modalProps={{ layerProps: { hostId: layerHostId } }}\n                dialogContentProps={{ title: \"Connecting...\" }}\n            >\n                <Stack tokens={CommonStackTokens}>\n                    <ProgressIndicator\n                        label=\"1. Downloading scrcpy server...\"\n                        percentComplete={\n                            state.serverTotalSize\n                                ? state.serverDownloadedSize /\n                                  state.serverTotalSize\n                                : undefined\n                        }\n                        description={formatSpeed(\n                            state.debouncedServerDownloadedSize,\n                            state.serverTotalSize,\n                            state.serverDownloadSpeed\n                        )}\n                    />\n\n                    <ProgressIndicator\n                        label=\"2. Pushing scrcpy server to device...\"\n                        progressHidden={\n                            state.serverTotalSize === 0 ||\n                            state.serverDownloadedSize !== state.serverTotalSize\n                        }\n                        percentComplete={\n                            state.serverUploadedSize / state.serverTotalSize\n                        }\n                        description={formatSpeed(\n                            state.debouncedServerUploadedSize,\n                            state.serverTotalSize,\n                            state.serverUploadSpeed\n                        )}\n                    />\n\n                    <ProgressIndicator\n                        label=\"3. Starting scrcpy server on device...\"\n                        progressHidden={\n                            state.serverTotalSize === 0 ||\n                            state.serverUploadedSize !== state.serverTotalSize\n                        }\n                    />\n                </Stack>\n            </Dialog>\n        </>\n    );\n});\n\nconst NavigationBar = observer(function NavigationBar({\n    className,\n    style,\n    children,\n}: {\n    className: string;\n    style: CSSProperties;\n    children: ReactNode;\n}) {\n    if (!state.navigationBarVisible) {\n        return (\n            <div className={className} style={style}>\n                {children}\n            </div>\n        );\n    }\n\n    return (\n        <Stack\n            className={className}\n            verticalFill\n            horizontalAlign=\"center\"\n            style={{ height: \"40px\", background: \"#999\", ...style }}\n        >\n            {children}\n            <Stack\n                verticalFill\n                horizontal\n                style={{ width: \"100%\", maxWidth: 300 }}\n                horizontalAlign=\"space-evenly\"\n                verticalAlign=\"center\"\n            >\n                <IconButton\n                    iconProps={{ iconName: Icons.Play }}\n                    style={{ transform: \"rotate(180deg)\", color: \"white\" }}\n                    onPointerDown={state.handleBackPointerDown}\n                    onPointerUp={state.handleBackPointerUp}\n                />\n                <IconButton\n                    iconProps={{ iconName: Icons.Circle }}\n                    style={{ color: \"white\" }}\n                    onPointerDown={state.handleHomePointerDown}\n                    onPointerUp={state.handleHomePointerUp}\n                />\n                <IconButton\n                    iconProps={{ iconName: Icons.Stop }}\n                    style={{ color: \"white\" }}\n                    onPointerDown={state.handleAppSwitchPointerDown}\n                    onPointerUp={state.handleAppSwitchPointerUp}\n                />\n            </Stack>\n        </Stack>\n    );\n});\n\nconst Scrcpy: NextPage = () => {\n    const classes = useClasses();\n\n    useEffect(() => {\n        // Detect WebCodecs support at client side\n        if (\n            state.decoders.length === 1 &&\n            typeof window.VideoDecoder === \"function\"\n        ) {\n            runInAction(() => {\n                state.decoders.unshift({\n                    key: \"webcodecs\",\n                    name: \"WebCodecs\",\n                    Constructor: WebCodecsDecoder,\n                });\n            });\n        }\n    }, []);\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Scrcpy - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar\n                items={state.commandBarItems}\n                farItems={state.commandBarFarItems}\n            />\n\n            <Stack horizontal grow styles={{ root: { height: 0 } }}>\n                <DeviceView\n                    ref={state.handleDeviceViewRef}\n                    width={state.rotatedWidth}\n                    height={state.rotatedHeight}\n                    BottomElement={NavigationBar}\n                >\n                    <div\n                        ref={state.handleRendererContainerRef}\n                        tabIndex={-1}\n                        className={classes.video}\n                        style={{\n                            width: state.width,\n                            height: state.height,\n                            transform: `translate(${\n                                (state.rotatedWidth - state.width) / 2\n                            }px, ${\n                                (state.rotatedHeight - state.height) / 2\n                            }px) rotate(${state.rotate * 90}deg)`,\n                        }}\n                        onPointerDown={state.handlePointerDown}\n                        onPointerMove={state.handlePointerMove}\n                        onPointerUp={state.handlePointerUp}\n                        onPointerCancel={state.handlePointerUp}\n                        onKeyDown={state.handleKeyDown}\n                        onContextMenu={state.handleContextMenu}\n                    />\n                </DeviceView>\n\n                <div\n                    style={{\n                        padding: 12,\n                        overflow: \"hidden auto\",\n                        display: state.logVisible ? \"block\" : \"none\",\n                        width: 500,\n                        fontFamily: \"monospace\",\n                        overflowY: \"auto\",\n                        whiteSpace: \"pre-wrap\",\n                        wordWrap: \"break-word\",\n                    }}\n                >\n                    {state.log.map((line, index) => (\n                        <div key={index}>{line}</div>\n                    ))}\n                </div>\n\n                <div\n                    style={{\n                        padding: 12,\n                        overflow: \"hidden auto\",\n                        display: state.settingsVisible ? \"block\" : \"none\",\n                        width: 300,\n                    }}\n                >\n                    <div>Changes will take effect on next connection</div>\n\n                    {state.settingDefinitions.map((definition) => (\n                        <SettingItem\n                            key={definition.key}\n                            definition={definition}\n                            settings={state.settings}\n                            onChange={action(\n                                (key, value) =>\n                                    ((state.settings as any)[key] = value)\n                            )}\n                        />\n                    ))}\n                </div>\n\n                <DemoModePanel\n                    style={{\n                        display: state.demoModeVisible ? \"block\" : \"none\",\n                    }}\n                />\n\n                <ConnectionDialog />\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default observer(Scrcpy);\n"],"names":["window","__NEXT_P","push","__webpack_require__","worker","cachedInitializePromise","cachedValue","ScrcpyControlMessageType","AndroidKeyEventAction","AndroidKeyCode","AndroidMotionEventAction","ScrcpyPointerId","AndroidScreenPowerMode","ScrcpyDeviceMessageType","ScrcpyLogLevel","ScrcpyVideoOrientation","AndroidCodecProfile","AndroidCodecLevel","LayerHost","props","className","layerHostId","react","useState","getId","z","_a","id","hostId","layerHostRef","useRef","rootRef","notifyLayersChanged","useImperativeHandle","componentRef","current","useEffect","Layer_notification","_Y","EQ","useUnmount","k","nw","createElement","tslib_es6","pi","css","i","ref","AdbScrcpyConnection","adb","options","initialize","dispose","AdbScrcpyForwardConnection","connect","createSocket","connectAndRetry","e","async_esm","gw","connectVideoStream","readable","videoStream","sendDummyByte","reader","getReader","done","value","read","byteLength","releaseLock","getStreams","controlStream","control","sendDeviceMeta","AdbScrcpyReverseConnection","streams","address","reverse","remove","catch","queue","stream_extra_esm","GJ","writer","writable","getWriter","add","write","socket","accept","AdbScrcpyOptionsBase","raw","constructor","getDefaultValue","formatServerArguments","getOutputEncoderNameRegex","createVideoStreamTransformer","getControlMessageTypes","serializeBackOrScreenOnControlMessage","message","getScrollController","AdbScrcpyOptions1_16","createConnection","tunnelForward","AdbScrcpyOptions1_22","ScrcpyInjectKeyCodeControlMessage","struct_esm","ZP","uint8","InjectKeyCode","W$","uint32","ScrcpyInjectTextControlMessage","InjectText","string","lengthField","Mouse","BigInt","Finger","VirtualMouse","VirtualFinger","ScrcpyFloatToUint16FieldDefinition","Pl","size","signed","deserialize","array","littleEndian","ek","Uint16","serialize","dataView","offset","ScrcpyInjectTouchControlMessage","InjectTouch","uint64","uint16","field","ScrcpyRotateDeviceControlMessage","RotateDevice","ScrcpySetScreenPowerModeControlMessage","SetScreenPowerMode","ScrcpyControlMessageSerializer","types","scrollController","stream","getTypeValue","type","indexOf","injectKeyCode","injectText","text","injectTouch","injectScroll","InjectScroll","data","serializeScrollMessage","backOrScreenOn","action","buffer","BackOrScreenOn","setScreenPowerMode","mode","rotateDevice","close","ScrcpyClipboardDeviceMessage","extra","Clipboard","ScrcpyDeviceMessageDeserializeStream","pC","CODEC_OPTION_TYPES","repeatPreviousFrameAfter","maxPtsGapToEncoder","CodecOptions","toOptionValue","entries","Object","filter","undefined","length","map","key","input","replace","toLowerCase","join","DEFAULT_SERVER_PATH","toScrcpyOptionValue","empty","String","ScrcpyInjectScrollControlMessage1_16","int32","ScrcpyScrollController1_16","accumulatedX","accumulatedY","processMessage","scrollX","scrollY","processed","BitReader","bytePosition","bitPosition","result","next","decodeExponentialGolombNumber","VideoPacket","uint8Array","NO_PTS","ScrcpyBackOrScreenOnControlMessage1_16","ScrcpyOptions1_16","logLevel","Verbose","Debug","lockVideoOrientation","Initial","Unlocked","getArgumentOrder","maxSize","bitRate","maxFps","crop","sendFrameMeta","displayId","showTouches","stayAwake","codecOptions","encoderName","defaults","header","transform","chunk","controller","enqueue","deserializeStream","gL","pipeThrough","packet","frameData","pts","sequenceParameterSet","parse_sequence_parameter_set","nalu","iterateNalu","start","writeIndex","zeroCount","inEmulation","byte","lastZeroCount","subarray","Uint8Array","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","nal_ref_idc","nal_unit_type","profile_idc","constraint_set","constraint_set_reader","constraint_set0_flag","constraint_set1_flag","constraint_set2_flag","constraint_set3_flag","constraint_set4_flag","constraint_set5_flag","level_idc","seq_parameter_set_id","chroma_format_idc","seq_scaling_matrix_present_flag","seq_scaling_list_present_flag","pic_order_cnt_type","num_ref_frames_in_pic_order_cnt_cycle","offset_for_ref_frame","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","frame_cropping_flag","slice","profileIndex","constraintSet","levelIndex","encodedWidth","encodedHeight","cropLeft","cropRight","cropTop","cropBottom","croppedWidth","croppedHeight","set","ExpandNotificationPanel","CollapseNotificationPanel","GetClipboard","SetClipboard","Down","ScrcpyBackOrScreenOnControlMessage1_18","fields","ScrcpyOptions1_18","concat","powerOffOnClose","splice","ExpandSettingPanel","ScrcpyOptions1_21","init","clipboardAutosync","pair","ScrcpyInjectScrollControlMessage1_22","ScrcpyScrollController1_22","ScrcpyOptions1_22","rawVideoStream","downsizeOnError","KEYFRAME_PTS","ScrcpyOptions1_23","cleanup","superStream","keyframe","ScrcpyOptions1_24","powerOn","ScrcpyFloatToInt16FieldDefinition","Int16","ScrcpyInjectScrollControlMessage1_25","ScrcpyScrollController1_25","ScrcpyOptions1_25","ArrayToStream","Pz","index","Promise","resolve","pull","ConcatStream","advance","ScrcpyExitedError","Error","output","AdbScrcpyClient","pushServer","path","sync","BF","version","process","connection","subprocess","spawn","protocols","esm","vf","stdout","xU","Jb","abortController","HS","pipe","pipeTo","Vj","signal","preventCancel","race","exit","abort","kill","getEncoders","assign","client","encoderNameRegex","encoders","line","match","getDisplays","displayIdRegex","displays","Number","parseInt","_stdout","_screenWidth","screenWidth","_screenHeight","screenHeight","_videoStream","_controlMessageSerializer","controlMessageSerializer","_deviceMessageStream","deviceMessageStream","N7","workerReady","pendingResolvers","streamId","PICTURE_READY_SUBSCRIPTIONS","Map","TinyH264Wrapper","event_esm","Xn","pictureReadyEvent","vp","onPictureReady","event","handler","addDisposable","handlePictureReady","delete","fire","feed","postMessage","renderStateId","all","then","t","bind","YuvBuffer","default","YuvCanvas","TinyH264Decoder","maxProfile","Baseline","maxLevel","Level4","_renderer","renderer","_frameRendered","frameRendered","_writable","_yuvCanvas","_initializer","document","configure","wrapper","promise","config","hP","attach","chromaWidth","chromaHeight","width","height","format","cropWidth","cropHeight","displayWidth","displayHeight","createTinyH264Wrapper","Worker","tu","URL","p","u","b","addEventListener","resolver","get","decoder","uPlaneOffset","vPlaneOffset","frame","lumaPlane","chromaPlane","drawFrame","toHex","toString","padStart","toUpperCase","WebCodecsDecoder","context","lastFrame","animationFrame","getContext","VideoDecoder","render","error","decode","EncodedVideoChunk","timestamp","drawImage","requestAnimationFrame","codec","optimizeForLatency","cancelAnimationFrame","SERVER_URL","U","FetchWithProgress","downloaded","_downloaded","total","_total","onProgress","progressEvent","fetch","url","response","headers","body","chunks","reduce","item","position","EventEmitter","fetchServer","useClasses","makeStyles","labelRight","marginLeft","video","transformOrigin","SettingItem","observer","param","definition","settings","onChange","classes","label","jsx_runtime","jsxs","Stack","horizontal","verticalAlign","jsx","span","description","TooltipHost","content","Icon","iconName","Icons","labelExtra","TextField","placeholder","Dropdown","selectedKey","option","Toggle","checked","SpinButton","labelPosition","Position","min","max","step","KEY_MAP","Enter","Escape","Backspace","Tab","Delete","Home","End","Space","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","state","rotatedWidth","rotate","rotatedHeight","serverBuffer","ReadableStream","GlobalState","commandBarItems","running","iconProps","onClick","stop","disabled","iconOnly","_this_deviceView","deviceView","enterFullscreen","_this_client","_this_client1","keyCode","repeat","metaState","fps","commandBarFarItems","navigationBarVisible","logVisible","settingsVisible","demoModeVisible","tooltipHostProps","Fragment","ExternalLink","href","spaceAfter","calloutProps","calloutMaxWidth","settingDefinitions","IconButton","updateDisplays","updateEncoders","decoders","name","_this_decoder","clearTimeout","fpsCounterIntervalId","handleDeviceViewRef","element","handleRendererContainerRef","_this_rendererContainer","rendererContainer","handleWheel","passive","calculatePointerPosition","clientX","clientY","viewRect","getBoundingClientRect","pointerViewX","x","pointerViewY","y","log","SCRCPY_SERVER_VERSION","runInAction","includes","Constructor","connecting","serverTotalSize","serverDownloadedSize","debouncedServerDownloadedSize","serverDownloadSpeed","serverUploadedSize","debouncedServerUploadedSize","serverUploadSpeed","_this_decoders_find","intervalId","setInterval","clearInterval","ChunkStream","ADB_SYNC_MAX_PACKET_SIZE","ProgressStream","progress","decoderDefinition","find","lastFrameCount","ignoreDecoderCodecArgs","profile","level","WritableStream","InspectStream","navigator","clipboard","writeText","turnScreenOff","handleBackPointerDown","button","currentTarget","setPointerCapture","pointerId","handleBackPointerUp","handleHomePointerDown","handleHomePointerUp","handleAppSwitchPointerDown","handleAppSwitchPointerUp","pointerType","pressure","pointerX","pointerY","buttons","handlePointerDown","focus","preventDefault","handlePointerMove","handlePointerUp","stopPropagation","deltaX","deltaY","handleContextMenu","handleKeyDown","code","makeAutoObservable","observable","autorun","firstChild","appendChild","ConnectionDialog","useId","isClient","setIsClient","style","top","bottom","left","right","margin","pointerEvents","Dialog","hidden","modalProps","layerProps","dialogContentProps","title","tokens","CommonStackTokens","ProgressIndicator","percentComplete","formatSpeed","progressHidden","NavigationBar","children","verticalFill","horizontalAlign","background","maxWidth","color","onPointerDown","onPointerUp","div","Scrcpy","unshift","RouteStackProps","Head","CommandBar","items","farItems","grow","styles","root","DeviceView","BottomElement","tabIndex","onPointerMove","onPointerCancel","onKeyDown","onContextMenu","padding","overflow","display","fontFamily","overflowY","whiteSpace","wordWrap","scrcpy_state","DemoModePanel","scrcpy"],"sourceRoot":""}