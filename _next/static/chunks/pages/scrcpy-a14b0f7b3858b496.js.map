{"version":3,"file":"static/chunks/pages/scrcpy-a14b0f7b3858b496.js","mappings":"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","sources":["webpack://_N_E/?5356","webpack://_N_E/./src/pages/scrcpy.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.67.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Layer/LayerHost.tsx","webpack://_N_E/../../libraries/scrcpy/bin/version.js","webpack://_N_E/../../libraries/scrcpy/src/message.ts","webpack://_N_E/../../libraries/scrcpy/src/client.ts","webpack://_N_E/../../libraries/scrcpy/src/codec.ts","webpack://_N_E/../../libraries/scrcpy/src/decoder/tinyh264/wrapper.ts","webpack://_N_E/../../libraries/scrcpy/src/decoder/tinyh264/index.ts","webpack://_N_E/../../libraries/scrcpy/src/decoder/web-codecs/index.ts","webpack://_N_E/../../libraries/scrcpy/src/utils.ts","webpack://_N_E/../../libraries/scrcpy/src/connection.ts","webpack://_N_E/../../libraries/scrcpy/src/options/common.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/sps.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_16/index.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_18.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_21.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_22.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_23.ts","webpack://_N_E/../../libraries/scrcpy/src/options/1_24.ts","webpack://_N_E/../../libraries/scrcpy/src/push-server.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/scrcpy\",\n      function () {\n        return require(\"private-next-pages/scrcpy.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/scrcpy\"])\n      });\n    }\n  ","import { CommandBar, Dialog, Dropdown, ICommandBarItemProps, Icon, IconButton, IDropdownOption, LayerHost, Position, ProgressIndicator, SpinButton, Stack, Toggle, TooltipHost } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { makeStyles } from \"@griffel/react\";\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { CSSProperties, ReactNode, useEffect, useState } from \"react\";\n\nimport { ADB_SYNC_MAX_PACKET_SIZE, ChunkStream, InspectStream, ReadableStream, WritableStream } from '@yume-chan/adb';\nimport { EventEmitter } from \"@yume-chan/event\";\nimport { AndroidKeyCode, AndroidKeyEventAction, AndroidMotionEventAction, CodecOptions, DEFAULT_SERVER_PATH, pushServer, ScrcpyClient, ScrcpyLogLevel, ScrcpyOptions1_24, ScrcpyVideoOrientation, TinyH264Decoder, WebCodecsDecoder, type H264Decoder, type H264DecoderConstructor, type VideoStreamPacket } from \"@yume-chan/scrcpy\";\nimport SCRCPY_SERVER_VERSION from '@yume-chan/scrcpy/bin/version';\n\nimport { DemoModePanel, DeviceView, DeviceViewRef, ExternalLink } from \"../components\";\nimport { globalState } from \"../state\";\nimport { CommonStackTokens, formatSpeed, Icons, ProgressStream, RouteStackProps } from \"../utils\";\n\nconst SERVER_URL = new URL('@yume-chan/scrcpy/bin/scrcpy-server?url', import.meta.url).toString();\n\nclass FetchWithProgress {\n    public readonly promise: Promise<Uint8Array>;\n\n    private _downloaded = 0;\n    public get downloaded() { return this._downloaded; }\n\n    private _total = 0;\n    public get total() { return this._total; }\n\n    private progressEvent = new EventEmitter<[download: number, total: number]>();\n    public get onProgress() { return this.progressEvent.event; }\n\n    public constructor(url: string) {\n        this.promise = this.fetch(url);\n    }\n\n    private async fetch(url: string) {\n        const response = await window.fetch(url);\n        this._total = Number.parseInt(response.headers.get('Content-Length') ?? '0', 10);\n        this.progressEvent.fire([this._downloaded, this._total]);\n\n        const reader = response.body!.getReader();\n        const chunks: Uint8Array[] = [];\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                break;\n            }\n            chunks.push(result.value);\n            this._downloaded += result.value.byteLength;\n            this.progressEvent.fire([this._downloaded, this._total]);\n        }\n\n        this._total = chunks.reduce((result, item) => result + item.byteLength, 0);\n        const result = new Uint8Array(this._total);\n        let position = 0;\n        for (const chunk of chunks) {\n            result.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return result;\n    }\n}\n\nlet cachedValue: FetchWithProgress | undefined;\nfunction fetchServer(onProgress?: (e: [downloaded: number, total: number]) => void) {\n    if (!cachedValue) {\n        cachedValue = new FetchWithProgress(SERVER_URL);\n        cachedValue.promise.catch((e) => {\n            cachedValue = undefined;\n        });\n    }\n\n    if (onProgress) {\n        cachedValue.onProgress(onProgress);\n        onProgress([cachedValue.downloaded, cachedValue.total]);\n    }\n\n    return cachedValue.promise;\n}\n\nfunction clamp(value: number, min: number, max: number): number {\n    if (value < min) {\n        return min;\n    }\n\n    if (value > max) {\n        return max;\n    }\n\n    return value;\n}\n\ninterface DecoderDefinition {\n    key: string;\n    name: string;\n    Constructor: H264DecoderConstructor;\n}\n\ninterface Settings {\n    maxSize: number;\n    bitRate: number;\n    tunnelForward?: boolean;\n    encoderName?: string;\n    decoder?: string;\n    ignoreDecoderCodecArgs?: boolean;\n    lockVideoOrientation?: ScrcpyVideoOrientation;\n    displayId?: number;\n    crop: string;\n}\n\ninterface SettingDefinitionBase {\n    key: keyof Settings;\n    type: string;\n    label: string;\n    labelExtra?: JSX.Element;\n    description?: string;\n}\n\ninterface DropdownSettingDefinition extends SettingDefinitionBase {\n    type: 'dropdown';\n    placeholder?: string;\n    options: IDropdownOption[];\n}\n\ninterface ToggleSettingDefinition extends SettingDefinitionBase {\n    type: 'toggle',\n}\n\ninterface NumberSettingDefinition extends SettingDefinitionBase {\n    type: 'number',\n    min?: number;\n    max?: number;\n    step?: number;\n}\n\ntype SettingDefinition =\n    DropdownSettingDefinition |\n    ToggleSettingDefinition |\n    NumberSettingDefinition;\n\ninterface SettingItemProps {\n    definition: SettingDefinition;\n    settings: any;\n    onChange: (key: keyof Settings, value: any) => void;\n}\n\nconst useClasses = makeStyles({\n    labelRight: {\n        marginLeft: '4px',\n    },\n    video: {\n        transformOrigin: 'center center',\n    },\n});\n\nconst SettingItem = observer(function SettingItem({\n    definition,\n    settings,\n    onChange,\n}: SettingItemProps) {\n    const classes = useClasses();\n\n    let label: JSX.Element = (\n        <Stack horizontal verticalAlign=\"center\">\n            <span>{definition.label}</span>\n            {!!definition.description && (\n                <TooltipHost content={definition.description}>\n                    <Icon className={classes.labelRight} iconName={Icons.Info} />\n                </TooltipHost>\n            )}\n            {definition.labelExtra}\n        </Stack>\n    );\n\n    switch (definition.type) {\n        case 'dropdown':\n            return (\n                <Dropdown\n                    label={label as any}\n                    options={definition.options}\n                    placeholder={definition.placeholder}\n                    selectedKey={settings[definition.key]}\n                    onChange={(e, option) => onChange(definition.key, option!.key)}\n                />\n            );\n        case 'toggle':\n            return (\n                <Toggle\n                    label={label}\n                    checked={settings[definition.key]}\n                    onChange={(e, checked) => onChange(definition.key, checked)}\n                />\n            );\n        case 'number':\n            return (\n                <SpinButton\n                    label={definition.label}\n                    labelPosition={Position.top}\n                    min={definition.min}\n                    max={definition.max}\n                    step={definition.step}\n                    value={settings[definition.key].toString()}\n                    onChange={(e, value) => onChange(definition.key, Number.parseInt(value!, 10))}\n                />\n            );\n    }\n});\n\nclass ScrcpyPageState {\n    running = false;\n\n    deviceView: DeviceViewRef | null = null;\n    rendererContainer: HTMLDivElement | null = null;\n\n    logVisible = false;\n    log: string[] = [];\n    settingsVisible = false;\n    demoModeVisible = false;\n    navigationBarVisible = true;\n\n    width = 0;\n    height = 0;\n    rotate = 0;\n\n    get rotatedWidth() { return state.rotate & 1 ? state.height : state.width; }\n    get rotatedHeight() { return state.rotate & 1 ? state.width : state.height; }\n\n    client: ScrcpyClient | undefined = undefined;\n\n    async pushServer() {\n        const serverBuffer = await fetchServer();\n\n        await new ReadableStream<Uint8Array>({\n            start(controller) {\n                controller.enqueue(serverBuffer);\n                controller.close();\n            },\n        })\n            .pipeTo(pushServer(globalState.device!));\n    }\n\n    encoders: string[] = [];\n    updateEncoders = async () => {\n        try {\n            await this.pushServer();\n\n            const encoders = await ScrcpyClient.getEncoders(\n                globalState.device!,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                new ScrcpyOptions1_24({\n                    logLevel: ScrcpyLogLevel.Debug,\n                    tunnelForward: this.settings.tunnelForward,\n                })\n            );\n\n            runInAction(() => {\n                this.encoders = encoders;\n                if (!this.settings.encoderName ||\n                    !this.encoders.includes(this.settings.encoderName)) {\n                    this.settings.encoderName = this.encoders[0];\n                }\n            });\n        } catch (e: any) {\n            globalState.showErrorDialog(e);\n        }\n    };\n\n    decoders: DecoderDefinition[] = [{\n        key: 'tinyh264',\n        name: 'TinyH264 (Software)',\n        Constructor: TinyH264Decoder,\n    }];\n    decoder: H264Decoder | undefined = undefined;\n\n    displays: number[] = [];\n    updateDisplays = async () => {\n        try {\n            await this.pushServer();\n\n            const displays = await ScrcpyClient.getDisplays(\n                globalState.device!,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                new ScrcpyOptions1_24({\n                    logLevel: ScrcpyLogLevel.Debug,\n                    tunnelForward: this.settings.tunnelForward,\n                })\n            );\n\n            runInAction(() => {\n                this.displays = displays;\n                if (!this.settings.displayId ||\n                    !this.displays.includes(this.settings.displayId)) {\n                    this.settings.displayId = this.displays[0];\n                }\n            });\n        } catch (e: any) {\n            globalState.showErrorDialog(e);\n        }\n    };\n\n    connecting = false;\n    serverTotalSize = 0;\n    serverDownloadedSize = 0;\n    debouncedServerDownloadedSize = 0;\n    serverDownloadSpeed = 0;\n    serverUploadedSize = 0;\n    debouncedServerUploadedSize = 0;\n    serverUploadSpeed = 0;\n\n    get commandBarItems() {\n        const result: ICommandBarItemProps[] = [];\n\n        if (!this.running) {\n            result.push({\n                key: 'start',\n                disabled: !globalState.device,\n                iconProps: { iconName: Icons.Play },\n                text: 'Start',\n                onClick: this.start as VoidFunction,\n            });\n        } else {\n            result.push({\n                key: 'stop',\n                iconProps: { iconName: Icons.Stop },\n                text: 'Stop',\n                onClick: this.stop as VoidFunction,\n            });\n        }\n\n        result.push({\n            key: 'fullscreen',\n            disabled: !this.running,\n            iconProps: { iconName: Icons.FullScreenMaximize },\n            iconOnly: true,\n            text: 'Fullscreen',\n            onClick: () => { this.deviceView?.enterFullscreen(); },\n        });\n\n        result.push({\n            key: 'rotateDevice',\n            disabled: !this.running,\n            iconProps: { iconName: Icons.Orientation },\n            iconOnly: true,\n            text: 'Rotate Device',\n            onClick: () => { this.client!.rotateDevice(); },\n        });\n\n        result.push({\n            key: 'rotateVideoLeft',\n            disabled: !this.running,\n            iconProps: { iconName: Icons.RotateLeft },\n            iconOnly: true,\n            text: 'Rotate Video Left',\n            onClick: () => {\n                this.rotate -= 1;\n                if (this.rotate < 0) {\n                    this.rotate = 3;\n                }\n            }\n        });\n\n        result.push({\n            key: 'rotateVideoRight',\n            disabled: !this.running,\n            iconProps: { iconName: Icons.RotateRight },\n            iconOnly: true,\n            text: 'Rotate Video Right',\n            onClick: () => {\n                this.rotate = (this.rotate + 1) & 3;\n            },\n        });\n\n        return result;\n    }\n\n    get commandBarFarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: 'NavigationBar',\n                iconProps: { iconName: Icons.PanelBottom },\n                checked: this.navigationBarVisible,\n                text: 'Navigation Bar',\n                iconOnly: true,\n                onClick: action(() => {\n                    this.navigationBarVisible = !this.navigationBarVisible;\n                }),\n            },\n            {\n                key: 'Log',\n                iconProps: { iconName: Icons.TextGrammarError },\n                checked: this.logVisible,\n                text: 'Log',\n                iconOnly: true,\n                onClick: action(() => {\n                    this.logVisible = !this.logVisible;\n                }),\n            },\n            {\n                key: 'Settings',\n                iconProps: { iconName: Icons.Settings },\n                checked: this.settingsVisible,\n                text: 'Settings',\n                iconOnly: true,\n                onClick: action(() => {\n                    this.settingsVisible = !this.settingsVisible;\n                }),\n            },\n            {\n                key: 'DemoMode',\n                iconProps: { iconName: Icons.Wand },\n                checked: this.demoModeVisible,\n                text: 'Demo Mode',\n                iconOnly: true,\n                onClick: action(() => {\n                    this.demoModeVisible = !this.demoModeVisible;\n                }),\n            },\n            {\n                key: 'info',\n                iconProps: { iconName: Icons.Info },\n                iconOnly: true,\n                tooltipHostProps: {\n                    content: (\n                        <>\n                            <p>\n                                <ExternalLink href=\"https://github.com/Genymobile/scrcpy\" spaceAfter>Scrcpy</ExternalLink>\n                                developed by Genymobile can display the screen with low latency (1~2 frames) and control the device, all without root access.\n                            </p>\n                            <p>\n                                This is a TypeScript implementation of the client part. Paired with official pre-built server binary.\n                            </p>\n                        </>\n                    ),\n                    calloutProps: {\n                        calloutMaxWidth: 300,\n                    }\n                },\n            }\n        ];\n    }\n\n    settings: Settings = {\n        maxSize: 1080,\n        bitRate: 4_000_000,\n        lockVideoOrientation: ScrcpyVideoOrientation.Unlocked,\n        displayId: 0,\n        crop: '',\n    };\n\n    get settingDefinitions() {\n        const result: SettingDefinition[] = [];\n\n        result.push({\n            key: 'encoderName',\n            type: 'dropdown',\n            label: 'Encoder',\n            placeholder: 'Press refresh to update available encoders',\n            labelExtra: (\n                <IconButton\n                    iconProps={{ iconName: Icons.ArrowClockwise }}\n                    disabled={!globalState.device}\n                    text=\"Refresh\"\n                    onClick={this.updateEncoders}\n                />\n            ),\n            options: this.encoders.map(item => ({\n                key: item,\n                text: item,\n            })),\n        });\n\n        if (this.decoders.length > 1) {\n            result.push({\n                key: 'decoder',\n                type: 'dropdown',\n                label: 'Decoder',\n                options: this.decoders.map(item => ({\n                    key: item.key,\n                    text: item.name,\n                    data: item,\n                })),\n            });\n        }\n\n        result.push({\n            key: 'ignoreDecoderCodecArgs',\n            type: 'toggle',\n            label: `Ignore decoder's codec arguments`,\n            description: `Some decoders don't support all H.264 profile/levels, so they request the device to encode at their highest-supported codec. However, some super old devices may not support that codec so their encoders will fail to start. Use this option to let device choose the codec to be used.`,\n        });\n\n        result.push({\n            key: 'maxSize',\n            type: 'number',\n            label: 'Max Resolution (longer side, 0 = unlimited)',\n            min: 0,\n            max: 2560,\n            step: 50,\n        });\n\n        result.push({\n            key: 'bitRate',\n            type: 'number',\n            label: 'Max Bit Rate',\n            min: 100,\n            max: 100_000_000,\n            step: 100,\n        });\n\n        result.push({\n            key: 'tunnelForward',\n            type: 'toggle',\n            label: 'Use forward connection',\n            description: 'Android before version 9 has a bug that prevents reverse tunneling when using ADB over WiFi.'\n        });\n\n        result.push({\n            key: 'lockVideoOrientation',\n            type: 'dropdown',\n            label: 'Lock Video Orientation',\n            options: [\n                {\n                    key: ScrcpyVideoOrientation.Unlocked,\n                    text: 'Unlocked',\n                },\n                {\n                    key: ScrcpyVideoOrientation.Initial,\n                    text: 'Current',\n                },\n                {\n                    key: ScrcpyVideoOrientation.Portrait,\n                    text: 'Portrait',\n                },\n                {\n                    key: ScrcpyVideoOrientation.Landscape,\n                    text: 'Landscape',\n                },\n                {\n                    key: ScrcpyVideoOrientation.PortraitFlipped,\n                    text: 'Portrait (Flipped)',\n                },\n                {\n                    key: ScrcpyVideoOrientation.LandscapeFlipped,\n                    text: 'Landscape (Flipped)',\n                },\n            ],\n        });\n\n        result.push({\n            key: 'displayId',\n            type: 'dropdown',\n            label: 'Display',\n            placeholder: 'Press refresh to update available displays',\n            labelExtra: (\n                <IconButton\n                    iconProps={{ iconName: Icons.ArrowClockwise }}\n                    disabled={!globalState.device}\n                    text=\"Refresh\"\n                    onClick={this.updateDisplays}\n                />\n            ),\n            options: this.displays.map(item => ({\n                key: item,\n                text: item.toString(),\n            })),\n        });\n\n        return result;\n    }\n\n    constructor() {\n        makeAutoObservable(this, {\n            decoders: observable.shallow,\n            settings: observable.deep,\n            start: false,\n            stop: action.bound,\n            dispose: action.bound,\n            handleDeviceViewRef: action.bound,\n            handleRendererContainerRef: action.bound,\n            handleBackPointerDown: false,\n            handleBackPointerUp: false,\n            handleHomePointerDown: false,\n            handleHomePointerUp: false,\n            handleAppSwitchPointerDown: false,\n            handleAppSwitchPointerUp: false,\n            calculatePointerPosition: false,\n            injectTouch: false,\n            handlePointerDown: false,\n            handlePointerMove: false,\n            handlePointerUp: false,\n            handleWheel: false,\n            handleContextMenu: false,\n            handleKeyDown: false,\n        });\n\n        autorun(() => {\n            if (globalState.device) {\n                runInAction(() => {\n                    this.encoders = [];\n                    this.settings.encoderName = undefined;\n\n                    this.displays = [];\n                    this.settings.displayId = undefined;\n                });\n            } else {\n                this.dispose();\n            }\n        });\n\n        autorun(() => {\n            if (this.rendererContainer && this.decoder) {\n                while (this.rendererContainer.firstChild) {\n                    this.rendererContainer.firstChild.remove();\n                }\n                this.rendererContainer.appendChild(this.decoder.renderer);\n            }\n        });\n\n        autorun(() => {\n            this.settings.decoder = this.decoders[0].key;\n        });\n\n        if (typeof window !== 'undefined' && typeof window.VideoDecoder === 'function') {\n            setTimeout(action(() => {\n                this.decoders.unshift({\n                    key: 'webcodecs',\n                    name: 'WebCodecs',\n                    Constructor: WebCodecsDecoder,\n                });\n            }), 0);\n        }\n    }\n\n    start = async () => {\n        if (!globalState.device) {\n            return;\n        }\n\n        try {\n            if (!this.settings.decoder) {\n                throw new Error('No available decoder');\n            }\n\n            runInAction(() => {\n                this.serverTotalSize = 0;\n                this.serverDownloadedSize = 0;\n                this.debouncedServerDownloadedSize = 0;\n                this.serverUploadedSize = 0;\n                this.debouncedServerUploadedSize = 0;\n                this.connecting = true;\n            });\n\n            let intervalId = setInterval(action(() => {\n                this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n            }), 1000);\n\n            let serverBuffer: Uint8Array;\n\n            try {\n                serverBuffer = await fetchServer(action(([downloaded, total]) => {\n                    this.serverDownloadedSize = downloaded;\n                    this.serverTotalSize = total;\n                }));\n                runInAction(() => {\n                    this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                    this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            intervalId = setInterval(action(() => {\n                this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                this.debouncedServerUploadedSize = this.serverUploadedSize;\n            }), 1000);\n\n            try {\n                await new ReadableStream<Uint8Array>({\n                    start(controller) {\n                        controller.enqueue(serverBuffer);\n                        controller.close();\n                    },\n                })\n                    .pipeThrough(new ChunkStream(ADB_SYNC_MAX_PACKET_SIZE))\n                    .pipeThrough(new ProgressStream(action((progress) => {\n                        this.serverUploadedSize = progress;\n                    })))\n                    .pipeTo(pushServer(globalState.device));\n\n                runInAction(() => {\n                    this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                    this.debouncedServerUploadedSize = this.serverUploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            const decoderDefinition = this.decoders.find(x => x.key === this.settings.decoder) ?? this.decoders[0];\n            const decoder = new decoderDefinition.Constructor();\n            runInAction(() => {\n                this.decoder = decoder;\n            });\n\n            const options = new ScrcpyOptions1_24({\n                logLevel: ScrcpyLogLevel.Debug,\n                ...this.settings,\n                sendDeviceMeta: false,\n                sendDummyByte: false,\n                codecOptions: !this.settings.ignoreDecoderCodecArgs\n                    ? new CodecOptions({\n                        profile: decoder.maxProfile,\n                        level: decoder.maxLevel,\n                    })\n                    : undefined,\n            });\n\n            runInAction(() => {\n                this.log = [];\n                this.log.push(`[client] Server version: ${SCRCPY_SERVER_VERSION}`);\n                this.log.push(`[client] Server arguments: ${options.formatServerArguments().join(' ')}`);\n            });\n\n            const client = await ScrcpyClient.start(\n                globalState.device,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                options\n            );\n\n            client.stdout.pipeTo(new WritableStream<string>({\n                write: action((line) => {\n                    this.log.push(line);\n                }),\n            }));\n\n            client.videoStream\n                .pipeThrough(new InspectStream(action((packet: VideoStreamPacket) => {\n                    if (packet.type === 'configuration') {\n                        const { croppedWidth, croppedHeight, } = packet.data;\n                        this.log.push(`[client] Video size changed: ${croppedWidth}x${croppedHeight}`);\n\n                        this.width = croppedWidth;\n                        this.height = croppedHeight;\n                    }\n                })))\n                .pipeTo(decoder.writable)\n                .catch(() => { });\n\n            client.exit.then(this.dispose);\n\n            client.onClipboardChange(content => {\n                window.navigator.clipboard.writeText(content);\n            });\n\n            runInAction(() => {\n                this.client = client;\n                this.running = true;\n            });\n        } catch (e: any) {\n            globalState.showErrorDialog(e);\n        } finally {\n            runInAction(() => {\n                this.connecting = false;\n            });\n        }\n    };\n\n    async stop() {\n        // Request to close client first\n        await this.client?.close();\n        this.dispose();\n    }\n\n    dispose() {\n        // Otherwise some packets may still arrive at decoder\n        this.decoder?.dispose();\n        this.decoder = undefined;\n\n        this.client = undefined;\n        this.running = false;\n    }\n\n    handleDeviceViewRef(element: DeviceViewRef | null) {\n        this.deviceView = element;\n    }\n\n    handleRendererContainerRef(element: HTMLDivElement | null) {\n        this.rendererContainer = element;\n        this.rendererContainer?.addEventListener('wheel', this.handleWheel, { passive: false });\n    };\n\n    handleBackPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n\n        this.client.pressBackOrTurnOnScreen(AndroidKeyEventAction.Down);\n    };\n\n    handleBackPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n\n        this.client.pressBackOrTurnOnScreen(AndroidKeyEventAction.Up);\n    };\n\n    handleHomePointerDown = async (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Down,\n            keyCode: AndroidKeyCode.Home,\n            repeat: 0,\n            metaState: 0,\n        });\n    };\n\n    handleHomePointerUp = async (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Up,\n            keyCode: AndroidKeyCode.Home,\n            repeat: 0,\n            metaState: 0,\n        });\n    };\n\n    handleAppSwitchPointerDown = async (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Down,\n            keyCode: AndroidKeyCode.AppSwitch,\n            repeat: 0,\n            metaState: 0,\n        });\n    };\n\n    handleAppSwitchPointerUp = async (e: React.PointerEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        if (e.button !== 0) {\n            return;\n        }\n\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Up,\n            keyCode: AndroidKeyCode.AppSwitch,\n            repeat: 0,\n            metaState: 0,\n        });\n    };\n\n    calculatePointerPosition(clientX: number, clientY: number) {\n        const viewRect = this.rendererContainer!.getBoundingClientRect();\n        let pointerViewX = clamp((clientX - viewRect.x) / viewRect.width, 0, 1);\n        let pointerViewY = clamp((clientY - viewRect.y) / viewRect.height, 0, 1);\n\n        if (this.rotate & 1) {\n            ([pointerViewX, pointerViewY] = [pointerViewY, pointerViewX]);\n        }\n        switch (this.rotate) {\n            case 1:\n                pointerViewY = 1 - pointerViewY;\n                break;\n            case 2:\n                pointerViewX = 1 - pointerViewX;\n                pointerViewY = 1 - pointerViewY;\n                break;\n            case 3:\n                pointerViewX = 1 - pointerViewX;\n                break;\n        }\n\n        return {\n            x: pointerViewX * this.width,\n            y: pointerViewY * this.height,\n        };\n    }\n\n    injectTouch = (\n        action: AndroidMotionEventAction,\n        e: React.PointerEvent<HTMLDivElement>\n    ) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectTouch({\n            action,\n            pointerId: e.pointerType === \"mouse\" ? BigInt(-1) : BigInt(e.pointerId),\n            pointerX: x,\n            pointerY: y,\n            pressure: e.pressure * 65535,\n            buttons: e.buttons,\n        });\n    };\n\n    handlePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.rendererContainer!.focus();\n        e.preventDefault();\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.injectTouch(AndroidMotionEventAction.Down, e);\n    };\n\n    handlePointerMove = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(\n            e.buttons === 0 ? AndroidMotionEventAction.HoverMove : AndroidMotionEventAction.Move,\n            e\n        );\n    };\n\n    handlePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(AndroidMotionEventAction.Up, e);\n    };\n\n    handleWheel = (e: WheelEvent) => {\n        if (!this.client) {\n            return;\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectScroll({\n            pointerX: x,\n            pointerY: y,\n            scrollX: -Math.sign(e.deltaX),\n            scrollY: -Math.sign(e.deltaY),\n            buttons: 0,\n        });\n    };\n\n    handleContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    handleKeyDown = async (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { key, code } = e;\n        if (key.match(/^[a-z0-9]$/i)) {\n            this.client!.injectText(key);\n            return;\n        }\n\n        const keyCode = ({\n            Backspace: AndroidKeyCode.Delete,\n            Space: AndroidKeyCode.Space,\n        } as Record<string, AndroidKeyCode | undefined>)[code];\n\n        if (keyCode) {\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Down,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Up,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n        }\n    };\n}\n\nconst state = new ScrcpyPageState();\nconsole.log(state);\n\nconst ConnectionDialog = observer(() => {\n    const layerHostId = useId('layerHost');\n\n    const [isClient, setIsClient] = useState(false);\n\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    if (!isClient) {\n        return null;\n    }\n\n    return (\n        <>\n            <LayerHost id={layerHostId} style={{ position: 'absolute', top: 0, bottom: 0, left: 0, right: 0, margin: 0, pointerEvents: 'none' }} />\n\n            <Dialog\n                hidden={!state.connecting}\n                modalProps={{ layerProps: { hostId: layerHostId } }}\n                dialogContentProps={{ title: 'Connecting...' }}\n            >\n                <Stack tokens={CommonStackTokens}>\n                    <ProgressIndicator\n                        label=\"1. Downloading scrcpy server...\"\n                        percentComplete={state.serverTotalSize ? state.serverDownloadedSize / state.serverTotalSize : undefined}\n                        description={formatSpeed(state.debouncedServerDownloadedSize, state.serverTotalSize, state.serverDownloadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"2. Pushing scrcpy server to device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverDownloadedSize !== state.serverTotalSize}\n                        percentComplete={state.serverUploadedSize / state.serverTotalSize}\n                        description={formatSpeed(state.debouncedServerUploadedSize, state.serverTotalSize, state.serverUploadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"3. Starting scrcpy server on device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverUploadedSize !== state.serverTotalSize}\n                    />\n                </Stack>\n            </Dialog>\n        </>\n    );\n});\n\nconst NavigationBar = observer(function NavigationBar({\n    className,\n    style,\n    children\n}: {\n    className: string;\n    style: CSSProperties;\n    children: ReactNode;\n    }) {\n    if (!state.navigationBarVisible) {\n        return (\n            <div className={className} style={style}>{children}</div>\n        );\n    }\n\n    return (\n        <Stack className={className} verticalFill horizontalAlign=\"center\" style={{ height: '40px', background: '#999', ...style }}>\n            {children}\n            <Stack verticalFill horizontal style={{ width: '100%', maxWidth: 300 }} horizontalAlign=\"space-evenly\" verticalAlign=\"center\">\n                <IconButton\n                    iconProps={{ iconName: Icons.Play }}\n                    style={{ transform: 'rotate(180deg)', color: 'white' }}\n                    onPointerDown={state.handleBackPointerDown}\n                    onPointerUp={state.handleBackPointerUp}\n                />\n                <IconButton\n                    iconProps={{ iconName: Icons.Circle }}\n                    style={{ color: 'white' }}\n                    onPointerDown={state.handleHomePointerDown}\n                    onPointerUp={state.handleHomePointerUp}\n                />\n                <IconButton\n                    iconProps={{ iconName: Icons.Stop }}\n                    style={{ color: 'white' }}\n                    onPointerDown={state.handleAppSwitchPointerDown}\n                    onPointerUp={state.handleAppSwitchPointerUp}\n                />\n            </Stack>\n        </Stack>\n    );\n});\n\nconst Scrcpy: NextPage = () => {\n    const classes = useClasses();\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Scrcpy - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} farItems={state.commandBarFarItems} />\n\n            <Stack horizontal grow styles={{ root: { height: 0 } }}>\n                <DeviceView\n                    ref={state.handleDeviceViewRef}\n                    width={state.rotatedWidth}\n                    height={state.rotatedHeight}\n                    BottomElement={NavigationBar}\n                >\n                    <div\n                        ref={state.handleRendererContainerRef}\n                        tabIndex={-1}\n                        className={classes.video}\n                        style={{\n                            width: state.width,\n                            height: state.height,\n                            transform: `translate(${(state.rotatedWidth - state.width) / 2}px, ${(state.rotatedHeight - state.height) / 2}px) rotate(${state.rotate * 90}deg)`\n                        }}\n                        onPointerDown={state.handlePointerDown}\n                        onPointerMove={state.handlePointerMove}\n                        onPointerUp={state.handlePointerUp}\n                        onPointerCancel={state.handlePointerUp}\n                        onKeyDown={state.handleKeyDown}\n                        onContextMenu={state.handleContextMenu}\n                    />\n                </DeviceView>\n\n                <div style={{\n                    padding: 12,\n                    overflow: 'hidden auto',\n                    display: state.logVisible ? 'block' : 'none',\n                    width: 500,\n                    fontFamily: 'monospace',\n                    overflowY: 'auto',\n                    whiteSpace: 'pre-wrap',\n                    wordWrap: 'break-word',\n                }}>\n                    {state.log.map((line, index) => (\n                        <div key={index}>\n                            {line}\n                        </div>\n                    ))}\n                </div>\n\n                <div style={{ padding: 12, overflow: 'hidden auto', display: state.settingsVisible ? 'block' : 'none', width: 300 }}>\n                    <div>Changes will take effect on next connection</div>\n\n                    {state.settingDefinitions.map(definition => (\n                        <SettingItem\n                            key={definition.key}\n                            definition={definition}\n                            settings={state.settings}\n                            onChange={action((key, value) => (state.settings as any)[key] = value)}\n                        />\n                    ))}\n                </div>\n\n                <DemoModePanel\n                    style={{ display: state.demoModeVisible ? 'block' : 'none' }}\n                />\n\n                <ConnectionDialog />\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default observer(Scrcpy);\n","import * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nimport type { ILayerHost, ILayerHostProps } from './LayerHost.types';\n\nexport const LayerHost: React.FunctionComponent<ILayerHostProps> = props => {\n  const { className } = props;\n\n  const [layerHostId] = React.useState(() => getId());\n\n  const { id: hostId = layerHostId } = props;\n\n  const layerHostRef = React.useRef<ILayerHost>({\n    hostId,\n    rootRef: React.useRef<HTMLDivElement | null>(null),\n    notifyLayersChanged: () => {\n      // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n    },\n  });\n\n  React.useImperativeHandle(props.componentRef, () => layerHostRef.current);\n\n  React.useEffect(() => {\n    registerLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useUnmount(() => {\n    unregisterLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n  });\n\n  return <div {...props} className={css('ms-LayerHost', className)} ref={layerHostRef.current.rootRef} />;\n};\n","export default '1.24';","import Struct, { placeholder } from '@yume-chan/struct';\n\n// https://github.com/Genymobile/scrcpy/blob/fa5b2a29e983a46b49531def9cf3d80c40c3de37/app/src/control_msg.h#L23\n// For their message bodies, see https://github.com/Genymobile/scrcpy/blob/5c62f3419d252d10cd8c9cbb7c918b358b81f2d0/app/src/control_msg.c#L92\nexport enum ScrcpyControlMessageType {\n    InjectKeycode,\n    InjectText,\n    InjectTouch,\n    InjectScroll,\n    BackOrScreenOn,\n    ExpandNotificationPanel,\n    ExpandSettingPanel,\n    CollapseNotificationPanel,\n    GetClipboard,\n    SetClipboard,\n    SetScreenPowerMode,\n    RotateDevice,\n}\n\n// https://developer.android.com/reference/android/view/MotionEvent#constants_1\nexport enum AndroidMotionEventAction {\n    Down,\n    Up,\n    Move,\n    Cancel,\n    Outside,\n    PointerDown,\n    PointerUp,\n    HoverMove,\n    Scroll,\n    HoverEnter,\n    HoverExit,\n    ButtonPress,\n    ButtonRelease,\n}\n\nexport const ScrcpySimpleControlMessage =\n    new Struct()\n        .uint8('type');\n\nexport const ScrcpyInjectTouchControlMessage =\n    new Struct()\n        .fields(ScrcpySimpleControlMessage)\n        .uint8('action', placeholder<AndroidMotionEventAction>())\n        .uint64('pointerId')\n        .uint32('pointerX')\n        .uint32('pointerY')\n        .uint16('screenWidth')\n        .uint16('screenHeight')\n        .uint16('pressure')\n        .uint32('buttons');\n\nexport type ScrcpyInjectTouchControlMessage = typeof ScrcpyInjectTouchControlMessage['TInit'];\n\nexport const ScrcpyInjectTextControlMessage =\n    new Struct()\n        .fields(ScrcpySimpleControlMessage)\n        .uint32('length')\n        .string('text', { lengthField: 'length' });\n\nexport type ScrcpyInjectTextControlMessage =\n    typeof ScrcpyInjectTextControlMessage['TInit'];\n\nexport enum AndroidKeyEventAction {\n    Down = 0,\n    Up = 1,\n}\n\nexport enum AndroidKeyCode {\n    Home = 3,\n    Back = 4,\n    A = 29,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X,\n    Y,\n    Z,\n    Space = 62,\n    Delete = 67,\n    AppSwitch = 187,\n}\n\nexport const ScrcpyInjectKeyCodeControlMessage =\n    new Struct()\n        .fields(ScrcpySimpleControlMessage)\n        .uint8('action', placeholder<AndroidKeyEventAction>())\n        .uint32('keyCode')\n        .uint32('repeat')\n        .uint32('metaState');\n\nexport type ScrcpyInjectKeyCodeControlMessage =\n    typeof ScrcpyInjectKeyCodeControlMessage['TInit'];\n","import { AbortController, AdbBufferedStream, AdbSubprocessNoneProtocol, DecodeUtf8Stream, InspectStream, ReadableStream, TransformStream, WritableStream, type Adb, type AdbSocket, type AdbSubprocessProtocol, type WritableStreamDefaultWriter } from '@yume-chan/adb';\nimport { EventEmitter } from '@yume-chan/event';\nimport Struct from '@yume-chan/struct';\nimport { AndroidMotionEventAction, ScrcpyControlMessageType, ScrcpyInjectKeyCodeControlMessage, ScrcpyInjectTextControlMessage, ScrcpyInjectTouchControlMessage, ScrcpySimpleControlMessage, type AndroidKeyEventAction } from './message.js';\nimport type { ScrcpyInjectScrollControlMessage1_22, ScrcpyOptions, VideoStreamPacket } from \"./options/index.js\";\n\nfunction* splitLines(text: string): Generator<string, void, void> {\n    let start = 0;\n\n    while (true) {\n        const index = text.indexOf('\\n', start);\n        if (index === -1) {\n            return;\n        }\n\n        const line = text.substring(start, index);\n        yield line;\n\n        start = index + 1;\n    }\n}\n\nclass SplitLinesStream extends TransformStream<string, string>{\n    constructor() {\n        super({\n            transform(chunk, controller) {\n                for (const line of splitLines(chunk)) {\n                    if (line === '') {\n                        continue;\n                    }\n                    controller.enqueue(line);\n                }\n            },\n        });\n    }\n}\n\nclass ArrayToStream<T> extends ReadableStream<T>{\n    private array!: T[];\n    private index = 0;\n\n    constructor(array: T[]) {\n        super({\n            start: async () => {\n                await Promise.resolve();\n                this.array = array;\n            },\n            pull: (controller) => {\n                if (this.index < this.array.length) {\n                    controller.enqueue(this.array[this.index]!);\n                    this.index += 1;\n                } else {\n                    controller.close();\n                }\n            },\n        });\n    }\n}\n\nclass ConcatStream<T> extends ReadableStream<T>{\n    private streams!: ReadableStream<T>[];\n    private index = 0;\n    private reader!: ReadableStreamDefaultReader<T>;\n\n    constructor(...streams: ReadableStream<T>[]) {\n        super({\n            start: async (controller) => {\n                await Promise.resolve();\n\n                this.streams = streams;\n                this.advance(controller);\n            },\n            pull: async (controller) => {\n                const result = await this.reader.read();\n                if (!result.done) {\n                    controller.enqueue(result.value);\n                    return;\n                }\n                this.advance(controller);\n            }\n        });\n    }\n\n    private advance(controller: ReadableStreamDefaultController<T>) {\n        if (this.index < this.streams.length) {\n            this.reader = this.streams[this.index]!.getReader();\n            this.index += 1;\n        } else {\n            controller.close();\n        }\n    }\n}\n\nconst ClipboardMessage =\n    new Struct()\n        .uint32('length')\n        .string('content', { lengthField: 'length' });\n\nexport class ScrcpyClient {\n    /**\n     * This method will modify the given `options`,\n     * so don't reuse it elsewhere.\n     */\n    public static async getEncoders(\n        adb: Adb,\n        path: string,\n        version: string,\n        options: ScrcpyOptions<any>\n    ): Promise<string[]> {\n        // Provide an invalid encoder name\n        // So the server will return all available encoders\n        options.value.encoderName = '_';\n        // Disable control for faster connection in 1.22+\n        options.value.control = false;\n        options.value.sendDeviceMeta = false;\n        options.value.sendDummyByte = false;\n\n        // Scrcpy server will open connections, before initializing encoder\n        // Thus although an invalid encoder name is given, the start process will success\n        const client = await ScrcpyClient.start(adb, path, version, options);\n\n        const encoderNameRegex = options.getOutputEncoderNameRegex();\n        const encoders: string[] = [];\n        await client.stdout.pipeTo(new WritableStream({\n            write(line) {\n                const match = line.match(encoderNameRegex);\n                if (match) {\n                    encoders.push(match[1]!);\n                }\n            },\n        }));\n\n        return encoders;\n    }\n\n    /**\n     * This method will modify the given `options`,\n     * so don't reuse it elsewhere.\n     */\n    public static async getDisplays(\n        adb: Adb,\n        path: string,\n        version: string,\n        options: ScrcpyOptions<any>\n    ): Promise<number[]> {\n        // Similar to `getEncoders`, pass an invalid option and parse the output\n        options.value.displayId = -1;\n\n        options.value.control = false;\n        options.value.sendDeviceMeta = false;\n        options.value.sendDummyByte = false;\n\n        try {\n            // Server will exit before opening connections when an invalid display id was given.\n            await ScrcpyClient.start(adb, path, version, options);\n        } catch (e) {\n            if (e instanceof Error) {\n                const output = (e as any).output as string[];\n\n                const displayIdRegex = /\\s+scrcpy --display (\\d+)/;\n                const displays: number[] = [];\n                for (const line of output) {\n                    const match = line.match(displayIdRegex);\n                    if (match) {\n                        displays.push(Number.parseInt(match[1]!, 10));\n                    }\n                }\n                return displays;\n            }\n        }\n\n        throw new Error('failed to get displays');\n    }\n\n    public static async start(\n        adb: Adb,\n        path: string,\n        version: string,\n        options: ScrcpyOptions<any>\n    ) {\n        const connection = options.createConnection(adb);\n        let process: AdbSubprocessProtocol | undefined;\n\n        try {\n            await connection.initialize();\n\n            process = await adb.subprocess.spawn(\n                [\n                    // cspell: disable-next-line\n                    `CLASSPATH=${path}`,\n                    'app_process',\n                    /* unused */ '/',\n                    'com.genymobile.scrcpy.Server',\n                    version,\n                    ...options.formatServerArguments(),\n                ],\n                {\n                    // Scrcpy server doesn't split stdout and stderr,\n                    // so disable Shell Protocol to simplify processing\n                    protocols: [AdbSubprocessNoneProtocol],\n                }\n            );\n\n            const stdout = process.stdout\n                .pipeThrough(new DecodeUtf8Stream())\n                .pipeThrough(new SplitLinesStream());\n\n            // Read stdout, otherwise `process.exit` won't resolve.\n            const output: string[] = [];\n            const abortController = new AbortController();\n            const pipe = stdout\n                .pipeTo(new WritableStream({\n                    write(chunk) {\n                        output.push(chunk);\n                    }\n                }), {\n                    signal: abortController.signal,\n                    preventCancel: true,\n                })\n                .catch(() => { });\n\n            const result = await Promise.race([\n                process.exit,\n                connection.getStreams(),\n            ]);\n\n            if (typeof result === 'number') {\n                const error = new Error('scrcpy server exited prematurely');\n                (error as any).output = output;\n                throw error;\n            }\n\n            abortController.abort();\n            await pipe;\n\n            const [videoStream, controlStream] = result;\n            return new ScrcpyClient(\n                adb,\n                options,\n                process,\n                new ConcatStream(\n                    new ArrayToStream(output),\n                    stdout,\n                ),\n                videoStream,\n                controlStream\n            );\n        } catch (e) {\n            await process?.kill();\n            throw e;\n        } finally {\n            connection.dispose();\n        }\n    }\n\n    private _adb: Adb;\n    public get adb() { return this._adb; }\n\n    private options: ScrcpyOptions<any>;\n    private process: AdbSubprocessProtocol;\n\n    private _stdout: ReadableStream<string>;\n    public get stdout() { return this._stdout; }\n\n    public get exit() { return this.process.exit; }\n\n    private _screenWidth: number | undefined;\n    public get screenWidth() { return this._screenWidth; }\n\n    private _screenHeight: number | undefined;\n    public get screenHeight() { return this._screenHeight; }\n\n    private _videoStream: ReadableStream<VideoStreamPacket>;\n    public get videoStream() { return this._videoStream; }\n\n    private _controlStreamWriter: WritableStreamDefaultWriter<Uint8Array> | undefined;\n\n    private readonly clipboardChangeEvent = new EventEmitter<string>();\n    public get onClipboardChange() { return this.clipboardChangeEvent.event; }\n\n    private lastTouchMessage = 0;\n\n    public constructor(\n        adb: Adb,\n        options: ScrcpyOptions<any>,\n        process: AdbSubprocessProtocol,\n        stdout: ReadableStream<string>,\n        videoStream: AdbSocket,\n        controlStream: AdbSocket | undefined,\n    ) {\n        this._adb = adb;\n        this.options = options;\n        this.process = process;\n\n        this._stdout = stdout;\n\n        this._videoStream = videoStream.readable\n            .pipeThrough(options.createVideoStreamTransformer())\n            .pipeThrough(new InspectStream(packet => {\n                if (packet.type === 'configuration') {\n                    this._screenWidth = packet.data.croppedWidth;\n                    this._screenHeight = packet.data.croppedHeight;\n                }\n            }));\n\n        if (controlStream) {\n            const buffered = new AdbBufferedStream(controlStream);\n            this._controlStreamWriter = controlStream.writable.getWriter();\n            (async () => {\n                try {\n                    while (true) {\n                        const type = await buffered.read(1);\n                        switch (type[0]) {\n                            case 0:\n                                const { content } = await ClipboardMessage.deserialize(buffered);\n                                this.clipboardChangeEvent.fire(content!);\n                                break;\n                            default:\n                                throw new Error('unknown control message type');\n                        }\n                    }\n                } catch {\n                    // TODO: Scrcpy: handle error\n                }\n            })();\n        }\n    }\n\n    private checkControlStream(caller: string) {\n        if (!this._controlStreamWriter) {\n            throw new Error(`${caller} called with control disabled`);\n        }\n\n        return this._controlStreamWriter;\n    }\n\n    private getControlMessageTypeValue(type: ScrcpyControlMessageType) {\n        const list = this.options.getControlMessageTypes();\n        const index = list.indexOf(type);\n        if (index === -1) {\n            throw new Error('Not supported');\n        }\n        return index;\n    }\n\n    public async injectKeyCode(message: Omit<ScrcpyInjectKeyCodeControlMessage, 'type'>) {\n        const controlStream = this.checkControlStream('injectKeyCode');\n\n        await controlStream.write(ScrcpyInjectKeyCodeControlMessage.serialize({\n            ...message,\n            type: this.getControlMessageTypeValue(ScrcpyControlMessageType.InjectKeycode),\n        }));\n    }\n\n    public async injectText(text: string) {\n        const controlStream = this.checkControlStream('injectText');\n\n        await controlStream.write(ScrcpyInjectTextControlMessage.serialize({\n            type: this.getControlMessageTypeValue(ScrcpyControlMessageType.InjectText),\n            text,\n        }));\n    }\n\n    public async injectTouch(message: Omit<ScrcpyInjectTouchControlMessage, 'type' | 'screenWidth' | 'screenHeight'>) {\n        const controlStream = this.checkControlStream('injectTouch');\n\n        if (!this.screenWidth || !this.screenHeight) {\n            return;\n        }\n\n        // ADB streams are actually pretty low-bandwidth and laggy\n        // Re-sample move events to avoid flooding the connection\n\n        // TODO: Scrcpy: investigate how to throttle touch events\n        // because 60FPS may still be too high\n        const now = Date.now();\n        if (now - this.lastTouchMessage < 16 &&\n            [AndroidMotionEventAction.Move, AndroidMotionEventAction.HoverMove].includes(message.action)) {\n            return;\n        }\n\n        this.lastTouchMessage = now;\n        await controlStream.write(ScrcpyInjectTouchControlMessage.serialize({\n            ...message,\n            type: this.getControlMessageTypeValue(ScrcpyControlMessageType.InjectTouch),\n            screenWidth: this.screenWidth,\n            screenHeight: this.screenHeight,\n        }));\n    }\n\n    public async injectScroll(message: Omit<ScrcpyInjectScrollControlMessage1_22, 'type' | 'screenWidth' | 'screenHeight'>) {\n        const controlStream = this.checkControlStream('injectScroll');\n\n        if (!this.screenWidth || !this.screenHeight) {\n            return;\n        }\n\n        const buffer = this.options!.serializeInjectScrollControlMessage({\n            ...message,\n            type: this.getControlMessageTypeValue(ScrcpyControlMessageType.InjectScroll),\n            screenWidth: this.screenWidth,\n            screenHeight: this.screenHeight,\n        });\n        await controlStream.write(buffer);\n    }\n\n    public async pressBackOrTurnOnScreen(action: AndroidKeyEventAction) {\n        const controlStream = this.checkControlStream('pressBackOrTurnOnScreen');\n\n        const buffer = this.options!.serializeBackOrScreenOnControlMessage({\n            type: this.getControlMessageTypeValue(ScrcpyControlMessageType.BackOrScreenOn),\n            action,\n        });\n        if (buffer) {\n            await controlStream.write(buffer);\n        }\n    }\n\n    private async sendSimpleControlMessage(type: ScrcpyControlMessageType, name: string) {\n        const controlStream = this.checkControlStream(name);\n        const buffer = ScrcpySimpleControlMessage.serialize({\n            type: this.getControlMessageTypeValue(type),\n        });\n        await controlStream.write(buffer);\n    }\n\n    public async rotateDevice() {\n        await this.sendSimpleControlMessage(ScrcpyControlMessageType.RotateDevice, 'rotateDevice');\n    }\n\n    public async close() {\n        // No need to close streams. Kill the process will destroy them from the other side.\n        await this.process?.kill();\n    }\n}\n","// From https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel\nexport enum AndroidCodecProfile {\n    Baseline = 0x01,\n    Main = 0x02,\n    Extended = 0x04,\n    High = 0x08,\n    High10 = 0x10,\n    High422 = 0x20,\n    High444 = 0x40,\n    ConstrainedBaseline = 0x10000,\n    ConstrainedHigh = 0x80000,\n}\n\nexport enum AndroidCodecLevel {\n    Level1 = 0x01,\n    Level1b = 0x02,\n    Level11 = 0x04,\n    Level12 = 0x08,\n    Level13 = 0x10,\n    Level2 = 0x20,\n    Level21 = 0x40,\n    Level22 = 0x80,\n    Level3 = 0x100,\n    Level31 = 0x200,\n    Level32 = 0x400,\n    Level4 = 0x800,\n    Level41 = 0x1000,\n    Level42 = 0x2000,\n    Level5 = 0x4000,\n    Level51 = 0x8000,\n    Level52 = 0x10000,\n    Level6 = 0x20000,\n    Level61 = 0x40000,\n    Level62 = 0x80000,\n}\n","import { PromiseResolver } from '@yume-chan/async';\nimport { AutoDisposable, EventEmitter } from '@yume-chan/event';\n\nlet worker: Worker | undefined;\nlet workerReady = false;\nconst pendingResolvers: PromiseResolver<TinyH264Wrapper>[] = [];\nlet streamId = 0;\n\nexport interface PictureReadyEventArgs {\n    renderStateId: number;\n\n    width: number;\n\n    height: number;\n\n    data: ArrayBuffer;\n}\n\nconst pictureReadyEvent = new EventEmitter<PictureReadyEventArgs>();\n\nexport class TinyH264Wrapper extends AutoDisposable {\n    public readonly streamId: number;\n\n    private readonly pictureReadyEvent = new EventEmitter<PictureReadyEventArgs>();\n    public get onPictureReady() { return this.pictureReadyEvent.event; }\n\n    public constructor(streamId: number) {\n        super();\n\n        this.streamId = streamId;\n        this.addDisposable(pictureReadyEvent.event(this.handlePictureReady, this));\n    }\n\n    private handlePictureReady(e: PictureReadyEventArgs) {\n        if (e.renderStateId === this.streamId) {\n            this.pictureReadyEvent.fire(e);\n        }\n    }\n\n    public feed(data: ArrayBuffer) {\n        worker!.postMessage({\n            type: 'decode',\n            data: data,\n            offset: 0,\n            length: data.byteLength,\n            renderStateId: this.streamId,\n        }, [data]);\n    }\n\n    public override dispose() {\n        super.dispose();\n        worker!.postMessage({\n            type: 'release',\n            renderStateId: this.streamId,\n        });\n    }\n}\n\nexport function createTinyH264Wrapper(): Promise<TinyH264Wrapper> {\n    if (!worker) {\n        worker = new Worker(new URL('./worker.js', import.meta.url));\n        worker.addEventListener('message', (e) => {\n            const { data } = e;\n            switch (data.type) {\n                case 'decoderReady':\n                    workerReady = true;\n                    for (const resolver of pendingResolvers) {\n                        resolver.resolve(new TinyH264Wrapper(streamId));\n                        streamId += 1;\n                    }\n                    pendingResolvers.length = 0;\n                    break;\n                case 'pictureReady':\n                    pictureReadyEvent.fire(data);\n                    break;\n            }\n        });\n    }\n\n    if (!workerReady) {\n        const resolver = new PromiseResolver<TinyH264Wrapper>();\n        pendingResolvers.push(resolver);\n        return resolver.promise;\n    }\n\n    const decoder = new TinyH264Wrapper(streamId);\n    streamId += 1;\n    return Promise.resolve(decoder);\n}\n","import { WritableStream } from \"@yume-chan/adb\";\nimport { PromiseResolver } from \"@yume-chan/async\";\nimport { AndroidCodecLevel, AndroidCodecProfile } from \"../../codec.js\";\nimport type { VideoStreamPacket } from \"../../options/index.js\";\nimport type { H264Configuration, H264Decoder } from \"../types.js\";\nimport { createTinyH264Wrapper, type TinyH264Wrapper } from \"./wrapper.js\";\n\nlet cachedInitializePromise: Promise<{ YuvBuffer: typeof import('yuv-buffer'), YuvCanvas: typeof import('yuv-canvas').default; }> | undefined;\nfunction initialize() {\n    if (!cachedInitializePromise) {\n        cachedInitializePromise = Promise.all(\n            [import('yuv-buffer'), import('yuv-canvas')]\n        ).then(([YuvBuffer, { default: YuvCanvas }]) => ({\n            YuvBuffer, YuvCanvas\n        }));\n    }\n\n    return cachedInitializePromise;\n}\n\nexport class TinyH264Decoder implements H264Decoder {\n    public readonly maxProfile = AndroidCodecProfile.Baseline;\n\n    public readonly maxLevel = AndroidCodecLevel.Level4;\n\n    private _renderer: HTMLCanvasElement;\n    public get renderer() { return this._renderer; }\n\n    private _frameRendered = 0;\n    public get frameRendered() { return this._frameRendered; }\n\n    private _writable: WritableStream<VideoStreamPacket>;\n    public get writable() { return this._writable; }\n\n    private _yuvCanvas: import('yuv-canvas').default | undefined;\n    private _initializer: PromiseResolver<TinyH264Wrapper> | undefined;\n\n    public constructor() {\n        initialize();\n\n        this._renderer = document.createElement('canvas');\n\n        this._writable = new WritableStream<VideoStreamPacket>({\n            write: async (packet) => {\n                switch (packet.type) {\n                    case 'configuration':\n                        this.configure(packet.data);\n                        break;\n                    case 'frame':\n                        if (!this._initializer) {\n                            throw new Error('Decoder not initialized');\n                        }\n\n                        const wrapper = await this._initializer.promise;\n                        wrapper.feed(packet.data.slice().buffer);\n                        break;\n                }\n            }\n        });\n    }\n\n    private async configure(config: H264Configuration) {\n        this.dispose();\n\n        this._initializer = new PromiseResolver<TinyH264Wrapper>();\n        const { YuvBuffer, YuvCanvas } = await initialize();\n\n        if (!this._yuvCanvas) {\n            this._yuvCanvas = YuvCanvas.attach(this._renderer);;\n        }\n\n        const { encodedWidth, encodedHeight } = config;\n        const chromaWidth = encodedWidth / 2;\n        const chromaHeight = encodedHeight / 2;\n\n        this._renderer.width = config.croppedWidth;\n        this._renderer.height = config.croppedHeight;\n        const format = YuvBuffer.format({\n            width: encodedWidth,\n            height: encodedHeight,\n            chromaWidth,\n            chromaHeight,\n            cropLeft: config.cropLeft,\n            cropTop: config.cropTop,\n            cropWidth: config.croppedWidth,\n            cropHeight: config.croppedHeight,\n            displayWidth: config.croppedWidth,\n            displayHeight: config.croppedHeight,\n        });\n\n        const wrapper = await createTinyH264Wrapper();\n        this._initializer.resolve(wrapper);\n\n        const uPlaneOffset = encodedWidth * encodedHeight;\n        const vPlaneOffset = uPlaneOffset + chromaWidth * chromaHeight;\n        wrapper.onPictureReady(({ data }) => {\n            this._frameRendered += 1;\n            const array = new Uint8Array(data);\n            const frame = YuvBuffer.frame(format,\n                YuvBuffer.lumaPlane(format, array, encodedWidth, 0),\n                YuvBuffer.chromaPlane(format, array, chromaWidth, uPlaneOffset),\n                YuvBuffer.chromaPlane(format, array, chromaWidth, vPlaneOffset)\n            );\n            this._yuvCanvas!.drawFrame(frame);\n        });\n    }\n\n    public dispose(): void {\n        this._initializer?.promise.then(wrapper => wrapper.dispose());\n        this._initializer = undefined;\n    }\n}\n","import { WritableStream } from '@yume-chan/adb';\nimport type { VideoStreamPacket } from \"../../options/index.js\";\nimport type { H264Configuration, H264Decoder } from \"../types.js\";\n\nfunction toHex(value: number) {\n    return value.toString(16).padStart(2, '0').toUpperCase();\n}\n\nexport class WebCodecsDecoder implements H264Decoder {\n    // Usually, browsers can decode most configurations,\n    // So let device choose best profile and level for itself.\n    public readonly maxProfile = undefined;\n    public readonly maxLevel = undefined;\n\n    private _writable: WritableStream<VideoStreamPacket>;\n    public get writable() { return this._writable; }\n\n    private _renderer: HTMLCanvasElement;\n    public get renderer() { return this._renderer; }\n\n    private _frameRendered = 0;\n    public get frameRendered() { return this._frameRendered; }\n\n    private context: CanvasRenderingContext2D;\n    private decoder: VideoDecoder;\n\n    // Limit FPS to system refresh rate\n    private lastFrame: VideoFrame | undefined;\n    private animationFrame: number = 0;\n\n    public constructor() {\n        this._renderer = document.createElement('canvas');\n\n        this.context = this._renderer.getContext('2d')!;\n        this.decoder = new VideoDecoder({\n            output: (frame) => {\n                if (this.lastFrame) {\n                    this.lastFrame.close();\n                }\n                this.lastFrame = frame;\n\n                if (!this.animationFrame) {\n                    // Start render loop on first frame\n                    this.render();\n                }\n            },\n            error() { },\n        });\n\n        this._writable = new WritableStream<VideoStreamPacket>({\n            write: async (packet) => {\n                switch (packet.type) {\n                    case 'configuration':\n                        this.configure(packet.data);\n                        break;\n                    case 'frame':\n                        this.decoder.decode(new EncodedVideoChunk({\n                            // Treat `undefined` as `key`, otherwise won't decode.\n                            type: packet.keyframe === false ? 'delta' : 'key',\n                            timestamp: 0,\n                            data: packet.data,\n                        }));\n                        break;\n                }\n            }\n        });\n    }\n\n    private render = () => {\n        if (this.lastFrame) {\n            this._frameRendered += 1;\n            this.context.drawImage(this.lastFrame, 0, 0);\n            this.lastFrame.close();\n            this.lastFrame = undefined;\n        }\n\n        this.animationFrame = requestAnimationFrame(this.render);\n    };\n\n    private configure(config: H264Configuration) {\n        const { profileIndex, constraintSet, levelIndex } = config;\n\n        this._renderer.width = config.croppedWidth;\n        this._renderer.height = config.croppedHeight;\n\n        // https://www.rfc-editor.org/rfc/rfc6381#section-3.3\n        // ISO Base Media File Format Name Space\n        const codec = `avc1.${[profileIndex, constraintSet, levelIndex].map(toHex).join('')}`;\n        this.decoder.configure({\n            codec: codec,\n            optimizeForLatency: true,\n        });\n    }\n\n    public dispose() {\n        cancelAnimationFrame(this.animationFrame);\n        this.decoder.close();\n    }\n}\n","export function delay(time: number): Promise<void> {\n    return new Promise(resolve => {\n        (globalThis as any).setTimeout(resolve, time);\n    });\n}\n","import type { Adb, AdbSocket } from \"@yume-chan/adb\";\nimport type { Disposable } from \"@yume-chan/event\";\nimport type { ValueOrPromise } from \"@yume-chan/struct\";\nimport { delay } from \"./utils.js\";\n\nexport interface ScrcpyClientConnectionOptions {\n    control: boolean;\n\n    /**\n     * Write a byte on start to detect connection issues\n     */\n    sendDummyByte: boolean;\n\n    /**\n     * Send device name and size\n     */\n    sendDeviceMeta: boolean;\n}\n\nexport abstract class ScrcpyClientConnection implements Disposable {\n    protected device: Adb;\n\n    protected options: ScrcpyClientConnectionOptions;\n\n    public constructor(device: Adb, options: ScrcpyClientConnectionOptions) {\n        this.device = device;\n        this.options = options;\n    }\n\n    public initialize(): ValueOrPromise<void> { }\n\n    public abstract getStreams(): ValueOrPromise<[videoSteam: AdbSocket, controlStream: AdbSocket | undefined]>;\n\n    public dispose(): void { }\n}\n\nexport class ScrcpyClientForwardConnection extends ScrcpyClientConnection {\n    private async connect(): Promise<AdbSocket> {\n        return await this.device.createSocket('localabstract:scrcpy');\n    }\n\n    private async connectAndRetry(): Promise<AdbSocket> {\n        for (let i = 0; i < 100; i++) {\n            try {\n                return await this.connect();\n            } catch (e) {\n                await delay(100);\n            }\n        }\n        throw new Error(`Can't connect to server after 100 retries`);\n    }\n\n    private async connectVideoStream(): Promise<AdbSocket> {\n        const stream = await this.connectAndRetry();\n        if (this.options.sendDummyByte) {\n            const reader = stream.readable.getReader();\n            const { done, value } = await reader.read();\n            // server will write a `0` to signal connection success\n            if (done || value.byteLength !== 1 || value[0] !== 0) {\n                throw new Error('Unexpected response from server');\n            }\n            reader.releaseLock();\n        }\n        return stream;\n    }\n\n    public async getStreams(): Promise<[videoSteam: AdbSocket, controlStream: AdbSocket | undefined]> {\n        const videoStream = await this.connectVideoStream();\n\n        let controlStream: AdbSocket | undefined;\n        if (this.options.control) {\n            controlStream = await this.connectAndRetry();\n        }\n\n        // Server only writes device meta after control socket is connected (if enabled)\n        if (this.options.sendDeviceMeta) {\n            const reader = videoStream.readable.getReader();\n            const { done, value } = await reader.read();\n            // 64 bytes device name + 2 bytes video width + 2 bytes video height\n            if (done || value.byteLength !== 64 + 2 + 2) {\n                throw new Error('Unexpected response from server');\n            }\n            reader.releaseLock();\n        }\n\n        return [videoStream, controlStream];\n    }\n}\n\nexport class ScrcpyClientReverseConnection extends ScrcpyClientConnection {\n    private streams!: ReadableStreamDefaultReader<AdbSocket>;\n\n    private address!: string;\n\n    public override async initialize(): Promise<void> {\n        try {\n            // try to unbind first\n            await this.device.reverse.remove('localabstract:scrcpy');\n        } catch {\n            // ignore error\n        }\n\n        const queue = new TransformStream<AdbSocket>();\n        this.streams = queue.readable.getReader();\n        const writer = queue.writable.getWriter();\n        this.address = await this.device.reverse.add(\n            'localabstract:scrcpy',\n            27183,\n            socket => {\n                writer.write(socket);\n                return true;\n            },\n        );\n    }\n\n    private async accept(): Promise<AdbSocket> {\n        return (await this.streams.read()).value!;\n    }\n\n    public async getStreams(): Promise<[videoSteam: AdbSocket, controlStream: AdbSocket | undefined]> {\n        const videoStream = await this.accept();\n\n        let controlStream: AdbSocket | undefined;\n        if (this.options.control) {\n            controlStream = await this.accept();\n        }\n\n        // Server only writes device meta after control socket is connected (if enabled)\n        if (this.options.sendDeviceMeta) {\n            const reader = videoStream.readable.getReader();\n            const { done, value } = await reader.read();\n            // 64 bytes device name + 2 bytes video width + 2 bytes video height\n            if (done || value.byteLength !== 64 + 2 + 2) {\n                throw new Error('Unexpected response from server');\n            }\n            reader.releaseLock();\n        }\n\n        return [videoStream, controlStream];\n    }\n\n    public override dispose() {\n        // Don't await this!\n        // `reverse.remove`'s response will never arrive\n        // before we read all pending data from `videoStream`\n        this.device.reverse.remove(this.address);\n    }\n}\n","import type { Adb, TransformStream } from \"@yume-chan/adb\";\nimport type { ScrcpyClientConnection } from \"../connection.js\";\nimport type { H264Configuration } from \"../decoder/index.js\";\nimport type { ScrcpyControlMessageType } from \"../message.js\";\nimport type { ScrcpyBackOrScreenOnEvent1_18 } from \"./1_18.js\";\nimport type { ScrcpyInjectScrollControlMessage1_22 } from \"./1_22.js\";\n\nexport const DEFAULT_SERVER_PATH = '/data/local/tmp/scrcpy-server.jar';\n\nexport interface ScrcpyOptionValue {\n    toOptionValue(): string | undefined;\n}\n\nexport function isScrcpyOptionValue(value: any): value is ScrcpyOptionValue {\n    return typeof value === 'object' &&\n        value !== null &&\n        typeof value.toOptionValue === 'function';\n}\n\nexport function toScrcpyOptionValue<T>(value: any, empty: T): string | T {\n    if (isScrcpyOptionValue(value)) {\n        value = value.toOptionValue();\n    }\n\n    if (value === undefined) {\n        return empty;\n    }\n\n    return `${value}`;\n}\n\nexport interface VideoStreamConfigurationPacket {\n    type: 'configuration';\n    data: H264Configuration;\n}\n\nexport interface VideoStreamFramePacket {\n    type: 'frame';\n    keyframe?: boolean | undefined;\n    pts?: bigint | undefined;\n    data: Uint8Array;\n}\n\nexport type VideoStreamPacket = VideoStreamConfigurationPacket | VideoStreamFramePacket;\n\nexport interface ScrcpyOptions<T> {\n    value: Partial<T>;\n\n    formatServerArguments(): string[];\n\n    getOutputEncoderNameRegex(): RegExp;\n\n    createConnection(adb: Adb): ScrcpyClientConnection;\n\n    createVideoStreamTransformer(): TransformStream<Uint8Array, VideoStreamPacket>;\n\n    getControlMessageTypes(): ScrcpyControlMessageType[];\n\n    serializeBackOrScreenOnControlMessage(\n        message: ScrcpyBackOrScreenOnEvent1_18,\n    ): Uint8Array | undefined;\n\n    serializeInjectScrollControlMessage(\n        message: ScrcpyInjectScrollControlMessage1_22,\n    ): Uint8Array;\n}\n","// cspell: ignore golomb\n// cspell: ignore qpprime\n\nclass BitReader {\n    private buffer: Uint8Array;\n\n    private bytePosition = 0;\n\n    private bitPosition = 0;\n\n    public constructor(buffer: Uint8Array) {\n        this.buffer = buffer;\n    }\n\n    public read(length: number): number {\n        let result = 0;\n        for (let i = 0; i < length; i += 1) {\n            result = (result << 1) | this.next();\n        }\n        return result;\n    }\n\n    public next(): number {\n        const value = (this.buffer[this.bytePosition]! >> (7 - this.bitPosition)) & 1;\n        this.bitPosition += 1;\n        if (this.bitPosition === 8) {\n            this.bytePosition += 1;\n            this.bitPosition = 0;\n        }\n        return value;\n    }\n\n    public decodeExponentialGolombNumber(): number {\n        let length = 0;\n        while (this.next() === 0) {\n            length += 1;\n        }\n        if (length === 0) {\n            return 0;\n        }\n        return (1 << length | this.read(length)) - 1;\n    }\n}\n\nfunction* iterateNalu(buffer: Uint8Array): Generator<Uint8Array> {\n    // -1 means we haven't found the first start code\n    let start = -1;\n    let writeIndex = 0;\n\n    // How many `0x00`s in a row we have counted\n    let zeroCount = 0;\n\n    let inEmulation = false;\n\n    for (const byte of buffer) {\n        buffer[writeIndex] = byte;\n        writeIndex += 1;\n\n        if (inEmulation) {\n            if (byte > 0x03) {\n                // `0x00000304` or larger are invalid\n                throw new Error('Invalid data');\n            }\n\n            inEmulation = false;\n            continue;\n        }\n\n        if (byte == 0x00) {\n            zeroCount += 1;\n            continue;\n        }\n\n        const lastZeroCount = zeroCount;\n        zeroCount = 0;\n\n        if (start === -1) {\n            // 0x000001 is the start code\n            // But it can be preceded by any number of zeros\n            // So 2 is the minimal\n            if (lastZeroCount >= 2 && byte === 0x01) {\n                // Found start of first NAL unit\n                writeIndex = 0;\n                start = 0;\n                continue;\n            }\n\n            // Not begin with start code\n            throw new Error('Invalid data');\n        }\n\n        if (lastZeroCount < 2) {\n            // zero or one `0x00`s are acceptable\n            continue;\n        }\n\n        if (byte === 0x01) {\n            // Remove all leading `0x00`s and this `0x01`\n            writeIndex -= lastZeroCount + 1;\n\n            // Found another NAL unit\n            yield buffer.subarray(start, writeIndex);\n\n            start = writeIndex;\n            continue;\n        }\n\n        if (lastZeroCount > 2) {\n            // Too much `0x00`s\n            throw new Error('Invalid data');\n        }\n\n        switch (byte) {\n            case 0x02:\n                // Didn't find why, but 7.4.1 NAL unit semantics forbids `0x000002` appearing in NAL units\n                throw new Error('Invalid data');\n            case 0x03:\n                // `0x000003` is the \"emulation_prevention_three_byte\"\n                // `0x00000300`, `0x00000301`, `0x00000302` and `0x00000303` represent\n                // `0x000000`, `0x000001`, `0x000002` and `0x000003` respectively\n\n                // Remove current byte\n                writeIndex -= 1;\n\n                inEmulation = true;\n                break;\n            default:\n                // `0x000004` or larger are ok\n                break;\n        }\n    }\n\n    if (inEmulation || zeroCount !== 0) {\n        throw new Error('Invalid data');\n    }\n\n    yield buffer.subarray(start, writeIndex);\n}\n\n// 7.3.2.1.1 Sequence parameter set data syntax\nexport function parse_sequence_parameter_set(buffer: ArrayBuffer) {\n    for (const nalu of iterateNalu(new Uint8Array(buffer))) {\n        const reader = new BitReader(nalu);\n        if (reader.next() !== 0) {\n            throw new Error('Invalid data');\n        }\n\n        const nal_ref_idc = reader.read(2);\n        const nal_unit_type = reader.read(5);\n\n        if (nal_unit_type !== 7) {\n            continue;\n        }\n\n        if (nal_ref_idc === 0) {\n            throw new Error('Invalid data');\n        }\n\n        const profile_idc = reader.read(8);\n        const constraint_set = reader.read(8);\n\n        const constraint_set_reader = new BitReader(new Uint8Array([constraint_set]));\n        const constraint_set0_flag = !!constraint_set_reader.next();\n        const constraint_set1_flag = !!constraint_set_reader.next();\n        const constraint_set2_flag = !!constraint_set_reader.next();\n        const constraint_set3_flag = !!constraint_set_reader.next();\n        const constraint_set4_flag = !!constraint_set_reader.next();\n        const constraint_set5_flag = !!constraint_set_reader.next();\n\n        // reserved_zero_2bits\n        if (constraint_set_reader.read(2) !== 0) {\n            throw new Error('Invalid data');\n        }\n\n        const level_idc = reader.read(8);\n        const seq_parameter_set_id = reader.decodeExponentialGolombNumber();\n\n        if (profile_idc === 100 || profile_idc === 110 ||\n            profile_idc === 122 || profile_idc === 244 || profile_idc === 44 ||\n            profile_idc === 83 || profile_idc === 86 || profile_idc === 118 ||\n            profile_idc === 128 || profile_idc === 138 || profile_idc === 139 ||\n            profile_idc === 134) {\n            const chroma_format_idc = reader.decodeExponentialGolombNumber();\n            if (chroma_format_idc === 3) {\n                // separate_colour_plane_flag\n                reader.next();\n            }\n\n            // bit_depth_luma_minus8\n            reader.decodeExponentialGolombNumber();\n            // bit_depth_chroma_minus8\n            reader.decodeExponentialGolombNumber();\n\n            // qpprime_y_zero_transform_bypass_flag\n            reader.next();\n\n            const seq_scaling_matrix_present_flag = !!reader.next();\n            if (seq_scaling_matrix_present_flag) {\n                const seq_scaling_list_present_flag: boolean[] = [];\n                for (let i = 0; i < ((chroma_format_idc !== 3) ? 8 : 12); i++) {\n                    seq_scaling_list_present_flag[i] = !!reader.next();\n                    if (seq_scaling_list_present_flag[i])\n                        if (i < 6) {\n                            // TODO\n                            // scaling_list( ScalingList4x4[ i ], 16,\n                            //               UseDefaultScalingMatrix4x4Flag[ i ])\n                        } else {\n                            // TODO\n                            // scaling_list( ScalingList8x8[ i − 6 ], 64,\n                            //               UseDefaultScalingMatrix8x8Flag[ i − 6 ] )\n                        }\n                }\n            }\n        }\n\n        // log2_max_frame_num_minus4\n        reader.decodeExponentialGolombNumber();\n        const pic_order_cnt_type = reader.decodeExponentialGolombNumber();\n        if (pic_order_cnt_type === 0) {\n            // log2_max_pic_order_cnt_lsb_minus4\n            reader.decodeExponentialGolombNumber();\n        } else if (pic_order_cnt_type === 1) {\n            // delta_pic_order_always_zero_flag\n            reader.next();\n            // offset_for_non_ref_pic\n            reader.decodeExponentialGolombNumber();\n            // offset_for_top_to_bottom_field\n            reader.decodeExponentialGolombNumber();\n            const num_ref_frames_in_pic_order_cnt_cycle = reader.decodeExponentialGolombNumber();\n            const offset_for_ref_frame: number[] = [];\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\n                offset_for_ref_frame[i] = reader.decodeExponentialGolombNumber();\n            }\n        }\n\n        // max_num_ref_frames\n        reader.decodeExponentialGolombNumber();\n        // gaps_in_frame_num_value_allowed_flag\n        reader.next();\n        const pic_width_in_mbs_minus1 = reader.decodeExponentialGolombNumber();\n        const pic_height_in_map_units_minus1 = reader.decodeExponentialGolombNumber();\n\n        const frame_mbs_only_flag = reader.next();\n        if (!frame_mbs_only_flag) {\n            // mb_adaptive_frame_field_flag\n            reader.next();\n        }\n\n        // direct_8x8_inference_flag\n        reader.next();\n\n        const frame_cropping_flag = !!reader.next();\n        let frame_crop_left_offset: number;\n        let frame_crop_right_offset: number;\n        let frame_crop_top_offset: number;\n        let frame_crop_bottom_offset: number;\n        if (frame_cropping_flag) {\n            frame_crop_left_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_right_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_top_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_bottom_offset = reader.decodeExponentialGolombNumber();\n        } else {\n            frame_crop_left_offset = 0;\n            frame_crop_right_offset = 0;\n            frame_crop_top_offset = 0;\n            frame_crop_bottom_offset = 0;\n        }\n\n        const vui_parameters_present_flag = !!reader.next();\n        if (vui_parameters_present_flag) {\n            // TODO\n            // vui_parameters( )\n        }\n\n        return {\n            profile_idc,\n            constraint_set,\n            constraint_set0_flag,\n            constraint_set1_flag,\n            constraint_set2_flag,\n            constraint_set3_flag,\n            constraint_set4_flag,\n            constraint_set5_flag,\n            level_idc,\n            seq_parameter_set_id,\n            pic_width_in_mbs_minus1,\n            pic_height_in_map_units_minus1,\n            frame_mbs_only_flag,\n            frame_cropping_flag,\n            frame_crop_left_offset,\n            frame_crop_right_offset,\n            frame_crop_top_offset,\n            frame_crop_bottom_offset,\n        };\n    }\n\n    throw new Error('Invalid data');\n}\n\nexport type SequenceParameterSet = ReturnType<typeof parse_sequence_parameter_set>;\n","import { StructDeserializeStream, TransformStream, type Adb } from \"@yume-chan/adb\";\nimport Struct from \"@yume-chan/struct\";\nimport type { AndroidCodecLevel, AndroidCodecProfile } from \"../../codec.js\";\nimport { ScrcpyClientConnection, ScrcpyClientForwardConnection, ScrcpyClientReverseConnection, type ScrcpyClientConnectionOptions } from \"../../connection.js\";\nimport { AndroidKeyEventAction, ScrcpyControlMessageType, ScrcpySimpleControlMessage } from \"../../message.js\";\nimport type { ScrcpyBackOrScreenOnEvent1_18 } from \"../1_18.js\";\nimport type { ScrcpyInjectScrollControlMessage1_22 } from \"../1_22.js\";\nimport { toScrcpyOptionValue, type ScrcpyOptions, type ScrcpyOptionValue, type VideoStreamPacket } from \"../common.js\";\nimport { parse_sequence_parameter_set } from \"./sps.js\";\n\nexport enum ScrcpyLogLevel {\n    Verbose = 'verbose',\n    Debug = 'debug',\n    Info = 'info',\n    Warn = 'warn',\n    Error = 'error',\n}\n\nexport enum ScrcpyVideoOrientation {\n    Initial = -2,\n    Unlocked = -1,\n    Portrait = 0,\n    Landscape = 1,\n    PortraitFlipped = 2,\n    LandscapeFlipped = 3,\n}\n\nexport interface CodecOptionsInit {\n    profile: AndroidCodecProfile;\n\n    level: AndroidCodecLevel;\n}\n\nexport class CodecOptions implements ScrcpyOptionValue {\n    public value: Partial<CodecOptionsInit>;\n\n    public constructor(value: Partial<CodecOptionsInit>) {\n        this.value = value;\n    }\n\n    public toOptionValue(): string | undefined {\n        const entries = Object.entries(this.value)\n            .filter(([key, value]) => value !== undefined);\n\n        if (entries.length === 0) {\n            return undefined;\n        }\n\n        return entries\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n    }\n}\n\nexport interface ScrcpyOptionsInit1_16 {\n    logLevel: ScrcpyLogLevel;\n\n    /**\n     * The maximum value of both width and height.\n     */\n    maxSize: number;\n\n    bitRate: number;\n\n    /**\n     * 0 for unlimited.\n     *\n     * @default 0\n     */\n    maxFps: number;\n\n    /**\n     * The orientation of the video stream.\n     *\n     * It will not keep the device screen in specific orientation,\n     * only the captured video will in this orientation.\n     */\n    lockVideoOrientation: ScrcpyVideoOrientation;\n\n    tunnelForward: boolean;\n\n    crop: string;\n\n    /**\n     * Send PTS so that the client may record properly\n     *\n     * Note: When `sendFrameMeta: false` is specified,\n     * `onChangeEncoding` event won't fire and `onVideoData` event doesn't\n     * merge sps/pps frame and first video frame. Which means you can't use\n     * the shipped decoders to render the video\n     * (You can still record the stream into a file).\n     *\n     * @default true\n     */\n    sendFrameMeta: boolean;\n\n    /**\n     * @default true\n     */\n    control: boolean;\n\n    displayId: number;\n\n    showTouches: boolean;\n\n    stayAwake: boolean;\n\n    codecOptions: CodecOptions;\n\n    encoderName: string;\n}\n\nexport const VideoPacket =\n    new Struct()\n        .uint64('pts')\n        .uint32('size')\n        .uint8Array('data', { lengthField: 'size' });\n\nexport const NO_PTS = BigInt(1) << BigInt(63);\n\nexport const ScrcpyBackOrScreenOnEvent1_16 =\n    ScrcpySimpleControlMessage;\n\nexport const ScrcpyInjectScrollControlMessage1_16 =\n    new Struct()\n        .fields(ScrcpySimpleControlMessage)\n        .uint32('pointerX')\n        .uint32('pointerY')\n        .uint16('screenWidth')\n        .uint16('screenHeight')\n        .int32('scrollX')\n        .int32('scrollY');\n\nexport class ScrcpyOptions1_16<T extends ScrcpyOptionsInit1_16 = ScrcpyOptionsInit1_16> implements ScrcpyOptions<T> {\n    public value: Partial<T>;\n\n    public constructor(value: Partial<ScrcpyOptionsInit1_16>) {\n        if (new.target === ScrcpyOptions1_16 &&\n            value.logLevel === ScrcpyLogLevel.Verbose) {\n            value.logLevel = ScrcpyLogLevel.Debug;\n        }\n\n        if (new.target === ScrcpyOptions1_16 &&\n            value.lockVideoOrientation === ScrcpyVideoOrientation.Initial) {\n            value.lockVideoOrientation = ScrcpyVideoOrientation.Unlocked;\n        }\n\n        this.value = value as Partial<T>;\n    }\n\n    protected getArgumentOrder(): (keyof T)[] {\n        return [\n            'logLevel',\n            'maxSize',\n            'bitRate',\n            'maxFps',\n            'lockVideoOrientation',\n            'tunnelForward',\n            'crop',\n            'sendFrameMeta',\n            'control',\n            'displayId',\n            'showTouches',\n            'stayAwake',\n            'codecOptions',\n            'encoderName',\n        ];\n    }\n\n    protected getDefaultValue(): T {\n        return {\n            logLevel: ScrcpyLogLevel.Debug,\n            maxSize: 0,\n            bitRate: 8_000_000,\n            maxFps: 0,\n            lockVideoOrientation: ScrcpyVideoOrientation.Unlocked,\n            tunnelForward: false,\n            crop: '-',\n            sendFrameMeta: true,\n            control: true,\n            displayId: 0,\n            showTouches: false,\n            stayAwake: false,\n            codecOptions: new CodecOptions({}),\n            encoderName: '-',\n        } as T;\n    }\n\n    public formatServerArguments(): string[] {\n        const defaults = this.getDefaultValue();\n        return this.getArgumentOrder()\n            .map(key => toScrcpyOptionValue(this.value[key] || defaults[key], '-'));\n    }\n\n    public createConnection(adb: Adb): ScrcpyClientConnection {\n        const options: ScrcpyClientConnectionOptions = {\n            // Old scrcpy connection always have control stream no matter what the option is\n            control: true,\n            sendDummyByte: true,\n            sendDeviceMeta: true,\n        };\n        if (this.value.tunnelForward) {\n            return new ScrcpyClientForwardConnection(adb, options);\n        } else {\n            return new ScrcpyClientReverseConnection(adb, options);\n        }\n    }\n\n    public getOutputEncoderNameRegex(): RegExp {\n        return /\\s+scrcpy --encoder-name '(.*?)'/;\n    }\n\n    public createVideoStreamTransformer(): TransformStream<Uint8Array, VideoStreamPacket> {\n        // Optimized path for video frames only\n        if (this.value.sendFrameMeta === false) {\n            return new TransformStream({\n                transform(chunk, controller) {\n                    controller.enqueue({\n                        type: 'frame',\n                        data: chunk,\n                    });\n                },\n            });\n        }\n\n        let header: Uint8Array | undefined;\n\n        let deserializeStream = new StructDeserializeStream(VideoPacket);\n        return {\n            writable: deserializeStream.writable,\n            readable: deserializeStream.readable.pipeThrough(new TransformStream({\n                transform(packet, controller) {\n                    if (packet.pts === NO_PTS) {\n                        const sequenceParameterSet = parse_sequence_parameter_set(packet.data.slice().buffer);\n\n                        const {\n                            profile_idc: profileIndex,\n                            constraint_set: constraintSet,\n                            level_idc: levelIndex,\n                            pic_width_in_mbs_minus1,\n                            pic_height_in_map_units_minus1,\n                            frame_mbs_only_flag,\n                            frame_crop_left_offset,\n                            frame_crop_right_offset,\n                            frame_crop_top_offset,\n                            frame_crop_bottom_offset,\n                        } = sequenceParameterSet;\n\n                        const encodedWidth = (pic_width_in_mbs_minus1 + 1) * 16;\n                        const encodedHeight = (pic_height_in_map_units_minus1 + 1) * (2 - frame_mbs_only_flag) * 16;\n                        const cropLeft = frame_crop_left_offset * 2;\n                        const cropRight = frame_crop_right_offset * 2;\n                        const cropTop = frame_crop_top_offset * 2;\n                        const cropBottom = frame_crop_bottom_offset * 2;\n\n                        const croppedWidth = encodedWidth - cropLeft - cropRight;\n                        const croppedHeight = encodedHeight - cropTop - cropBottom;\n\n                        header = packet.data;\n                        controller.enqueue({\n                            type: 'configuration',\n                            data: {\n                                profileIndex,\n                                constraintSet,\n                                levelIndex,\n                                encodedWidth,\n                                encodedHeight,\n                                cropLeft,\n                                cropRight,\n                                cropTop,\n                                cropBottom,\n                                croppedWidth,\n                                croppedHeight,\n                            }\n                        });\n                        return;\n                    }\n\n                    let frameData: Uint8Array;\n                    if (header) {\n                        frameData = new Uint8Array(header.byteLength + packet.data.byteLength);\n                        frameData.set(header);\n                        frameData.set(packet.data, header.byteLength);\n                        header = undefined;\n                    } else {\n                        frameData = packet.data;\n                    }\n\n                    controller.enqueue({\n                        type: 'frame',\n                        pts: packet.pts,\n                        data: frameData,\n                    });\n                }\n            }))\n        };\n    }\n\n    public getControlMessageTypes(): ScrcpyControlMessageType[] {\n        return [\n            /*  0 */ ScrcpyControlMessageType.InjectKeycode,\n            /*  1 */ ScrcpyControlMessageType.InjectText,\n            /*  2 */ ScrcpyControlMessageType.InjectTouch,\n            /*  3 */ ScrcpyControlMessageType.InjectScroll,\n            /*  4 */ ScrcpyControlMessageType.BackOrScreenOn,\n            /*  5 */ ScrcpyControlMessageType.ExpandNotificationPanel,\n            /*  6 */ ScrcpyControlMessageType.CollapseNotificationPanel,\n            /*  7 */ ScrcpyControlMessageType.GetClipboard,\n            /*  8 */ ScrcpyControlMessageType.SetClipboard,\n            /*  9 */ ScrcpyControlMessageType.SetScreenPowerMode,\n            /* 10 */ ScrcpyControlMessageType.RotateDevice,\n        ];\n    }\n\n    public serializeBackOrScreenOnControlMessage(\n        message: ScrcpyBackOrScreenOnEvent1_18,\n    ) {\n        if (message.action === AndroidKeyEventAction.Down) {\n            return ScrcpyBackOrScreenOnEvent1_16.serialize(message);\n        }\n\n        return undefined;\n    }\n\n    public serializeInjectScrollControlMessage(\n        message: ScrcpyInjectScrollControlMessage1_22,\n    ): Uint8Array {\n        return ScrcpyInjectScrollControlMessage1_16.serialize(message);\n    }\n}\n","import Struct, { placeholder } from \"@yume-chan/struct\";\nimport { AndroidKeyEventAction, ScrcpyControlMessageType } from \"../message.js\";\nimport { ScrcpyBackOrScreenOnEvent1_16, ScrcpyOptions1_16, type ScrcpyOptionsInit1_16 } from \"./1_16/index.js\";\n\nexport interface ScrcpyOptionsInit1_18 extends ScrcpyOptionsInit1_16 {\n    powerOffOnClose: boolean;\n}\n\nexport const ScrcpyBackOrScreenOnEvent1_18 =\n    new Struct()\n        .fields(ScrcpyBackOrScreenOnEvent1_16)\n        .uint8('action', placeholder<AndroidKeyEventAction>());\n\nexport type ScrcpyBackOrScreenOnEvent1_18 = typeof ScrcpyBackOrScreenOnEvent1_18[\"TInit\"];\n\nexport class ScrcpyOptions1_18<T extends ScrcpyOptionsInit1_18 = ScrcpyOptionsInit1_18> extends ScrcpyOptions1_16<T> {\n    constructor(value: Partial<ScrcpyOptionsInit1_18>) {\n        super(value);\n    }\n\n    protected override getArgumentOrder(): (keyof T)[] {\n        return super.getArgumentOrder().concat(['powerOffOnClose']);\n    }\n\n    protected override getDefaultValue(): T {\n        return {\n            ...super.getDefaultValue(),\n            powerOffOnClose: false,\n        };\n    }\n\n    public override getOutputEncoderNameRegex(): RegExp {\n        return /\\s+scrcpy --encoder '(.*?)'/;\n    }\n\n    public override getControlMessageTypes(): ScrcpyControlMessageType[] {\n        /**\n         *  0 InjectKeycode\n         *  1 InjectText\n         *  2 InjectTouch\n         *  3 InjectScroll\n         *  4 BackOrScreenOn\n         *  5 ExpandNotificationPanel\n         *  6 ExpandSettingsPanel\n         *  7 CollapseNotificationPanel\n         *  8 GetClipboard\n         *  9 SetClipboard\n         * 10 SetScreenPowerMode\n         * 11 RotateDevice\n         */\n        const types = super.getControlMessageTypes();\n        types.splice(6, 0, ScrcpyControlMessageType.ExpandSettingPanel);\n        return types;\n    }\n\n    public override serializeBackOrScreenOnControlMessage(\n        message: ScrcpyBackOrScreenOnEvent1_18,\n    ) {\n        return ScrcpyBackOrScreenOnEvent1_18.serialize(message);\n    }\n}\n","// cspell: ignore autosync\n\nimport { ScrcpyOptions1_18, type ScrcpyOptionsInit1_18 } from './1_18.js';\nimport { toScrcpyOptionValue } from \"./common.js\";\n\nexport interface ScrcpyOptionsInit1_21 extends ScrcpyOptionsInit1_18 {\n    clipboardAutosync?: boolean;\n}\n\nfunction toSnakeCase(input: string): string {\n    return input.replace(/([A-Z])/g, '_$1').toLowerCase();\n}\n\nexport class ScrcpyOptions1_21<T extends ScrcpyOptionsInit1_21 = ScrcpyOptionsInit1_21> extends ScrcpyOptions1_18<T> {\n    public constructor(init: Partial<ScrcpyOptionsInit1_21>) {\n        super(init);\n    }\n\n    protected override getDefaultValue(): T {\n        return {\n            ...super.getDefaultValue(),\n            clipboardAutosync: true,\n        };\n    }\n\n    public override formatServerArguments(): string[] {\n        // 1.21 changed the format of arguments\n        // So `getArgumentOrder()` is no longer needed\n        return Object.entries(this.value)\n            .map(([key, value]) => [key, toScrcpyOptionValue(value, undefined)] as const)\n            .filter((pair): pair is [string, string] => pair[1] !== undefined)\n            .map(([key, value]) => `${toSnakeCase(key)}=${value}`);\n    }\n}\n","import type { Adb } from \"@yume-chan/adb\";\nimport Struct from \"@yume-chan/struct\";\nimport { ScrcpyClientForwardConnection, ScrcpyClientReverseConnection, type ScrcpyClientConnection } from \"../connection.js\";\nimport { ScrcpyInjectScrollControlMessage1_16 } from \"./1_16/index.js\";\nimport { ScrcpyOptions1_21, type ScrcpyOptionsInit1_21 } from \"./1_21.js\";\n\nexport interface ScrcpyOptionsInit1_22 extends ScrcpyOptionsInit1_21 {\n    downsizeOnError: boolean;\n\n    /**\n     * Send device name and size at start of video stream.\n     *\n     * @default true\n     */\n    sendDeviceMeta: boolean;\n\n    /**\n     * Send a `0` byte on start of video stream to detect connection issues\n     *\n     * @default true\n     */\n    sendDummyByte: boolean;\n\n    /**\n     * Implies `sendDeviceMeta: false`, `sendFrameMeta: false` and `sendDummyByte: false`\n     *\n     * @default false\n     */\n    rawVideoStream: boolean;\n}\n\nexport const ScrcpyInjectScrollControlMessage1_22 =\n    new Struct()\n        .fields(ScrcpyInjectScrollControlMessage1_16)\n        .int32(\"buttons\");\n\nexport type ScrcpyInjectScrollControlMessage1_22 = typeof ScrcpyInjectScrollControlMessage1_22[\"TInit\"];\n\nexport class ScrcpyOptions1_22<T extends ScrcpyOptionsInit1_22 = ScrcpyOptionsInit1_22> extends ScrcpyOptions1_21<T> {\n    public constructor(init: Partial<ScrcpyOptionsInit1_22>) {\n        if (init.rawVideoStream) {\n            // Set implied options for client-side processing\n            init.sendDeviceMeta = false;\n            init.sendFrameMeta = false;\n            init.sendDummyByte = false;\n        }\n\n        super(init);\n    }\n\n    protected override getDefaultValue(): T {\n        return {\n            ...super.getDefaultValue(),\n            downsizeOnError: true,\n            sendDeviceMeta: true,\n            sendDummyByte: true,\n            rawVideoStream: false,\n        };\n    }\n\n    public override createConnection(device: Adb): ScrcpyClientConnection {\n        const options = {\n            ...this.getDefaultValue(),\n            ...this.value,\n        };\n        if (this.value.tunnelForward) {\n            return new ScrcpyClientForwardConnection(device, options);\n        } else {\n            return new ScrcpyClientReverseConnection(device, options);\n        }\n    }\n\n    public override serializeInjectScrollControlMessage(\n        message: ScrcpyInjectScrollControlMessage1_22,\n    ): Uint8Array {\n        return ScrcpyInjectScrollControlMessage1_22.serialize(message);\n    }\n}\n","import { TransformStream } from \"@yume-chan/adb\";\nimport { ScrcpyOptions1_22, type ScrcpyOptionsInit1_22 } from './1_22.js';\nimport type { VideoStreamPacket } from \"./common.js\";\n\nexport interface ScrcpyOptionsInit1_23 extends ScrcpyOptionsInit1_22 {\n    cleanup: boolean;\n}\n\nconst KEYFRAME_PTS = BigInt(1) << BigInt(62);\n\nexport class ScrcpyOptions1_23<T extends ScrcpyOptionsInit1_23 = ScrcpyOptionsInit1_23> extends ScrcpyOptions1_22<T> {\n    public constructor(init: Partial<ScrcpyOptionsInit1_23>) {\n        super(init);\n    }\n\n    protected override getDefaultValue(): T {\n        return {\n            ...super.getDefaultValue(),\n            cleanup: true,\n        };\n    }\n\n    public override createVideoStreamTransformer(): TransformStream<Uint8Array, VideoStreamPacket> {\n        const superStream = super.createVideoStreamTransformer();\n        return {\n            writable: superStream.writable,\n            readable: superStream.readable.pipeThrough(new TransformStream({\n                transform(packet, controller): void {\n                    if (packet.type !== 'frame') {\n                        controller.enqueue(packet);\n                        return;\n                    }\n\n                    if (packet.pts !== undefined && packet.pts & KEYFRAME_PTS) {\n                        packet.keyframe = true;\n                        packet.pts &= ~KEYFRAME_PTS;\n                    }\n\n                    controller.enqueue(packet);\n                }\n            }))\n        };\n    }\n}\n","import { ScrcpyOptions1_23, type ScrcpyOptionsInit1_23 } from './1_23.js';\n\nexport interface ScrcpyOptionsInit1_24 extends ScrcpyOptionsInit1_23 {\n    powerOn: boolean;\n}\n\nexport class ScrcpyOptions1_24<T extends ScrcpyOptionsInit1_24 = ScrcpyOptionsInit1_24> extends ScrcpyOptions1_23<T> {\n    public constructor(init: Partial<ScrcpyOptionsInit1_24>) {\n        super(init);\n    }\n\n    protected override getDefaultValue(): T {\n        return {\n            ...super.getDefaultValue(),\n            powerOn: true,\n        };\n    }\n}\n","import { WrapWritableStream, type Adb, type AdbSync } from \"@yume-chan/adb\";\nimport { DEFAULT_SERVER_PATH } from \"./options/index.js\";\n\nexport interface PushServerOptions {\n    path?: string;\n}\n\nexport function pushServer(\n    device: Adb,\n    options: PushServerOptions = {}\n) {\n    const { path = DEFAULT_SERVER_PATH } = options;\n\n    let sync!: AdbSync;\n    return new WrapWritableStream<Uint8Array>({\n        async start() {\n            sync = await device.sync();\n            return sync.write(path);\n        },\n        async close() {\n            await sync.dispose();\n        },\n    });\n}\n"],"names":["window","__NEXT_P","push","cachedValue","SERVER_URL","toString","FetchWithProgress","url","_downloaded","_total","progressEvent","EventEmitter","this","promise","fetch","response","reader","chunks","result","position","chunk","Number","parseInt","headers","get","fire","body","getReader","read","done","value","byteLength","reduce","item","Uint8Array","set","downloaded","total","onProgress","event","fetchServer","catch","e","undefined","clamp","min","max","useClasses","makeStyles","labelRight","marginLeft","video","transformOrigin","SettingItem","observer","definition","settings","onChange","classes","label","Stack","horizontal","verticalAlign","span","description","TooltipHost","content","Icon","className","iconName","Icons","labelExtra","type","Dropdown","options","placeholder","selectedKey","key","option","Toggle","checked","SpinButton","labelPosition","Position","step","ScrcpyPageState","running","deviceView","rendererContainer","logVisible","log","settingsVisible","demoModeVisible","navigationBarVisible","width","height","rotate","client","encoders","updateEncoders","pushServer","ScrcpyClient","globalState","DEFAULT_SERVER_PATH","SCRCPY_SERVER_VERSION","ScrcpyOptions1_24","logLevel","ScrcpyLogLevel","tunnelForward","runInAction","encoderName","includes","decoders","name","Constructor","TinyH264Decoder","decoder","displays","updateDisplays","displayId","connecting","serverTotalSize","serverDownloadedSize","debouncedServerDownloadedSize","serverDownloadSpeed","serverUploadedSize","debouncedServerUploadedSize","serverUploadSpeed","maxSize","bitRate","lockVideoOrientation","ScrcpyVideoOrientation","crop","start","intervalId","serverBuffer","decoderDefinition","Error","setInterval","action","clearInterval","ReadableStream","controller","enqueue","close","pipeThrough","ChunkStream","ADB_SYNC_MAX_PACKET_SIZE","ProgressStream","progress","pipeTo","find","x","sendDeviceMeta","sendDummyByte","codecOptions","ignoreDecoderCodecArgs","CodecOptions","profile","maxProfile","level","maxLevel","formatServerArguments","join","stdout","WritableStream","write","line","videoStream","InspectStream","packet","data","croppedWidth","croppedHeight","writable","exit","then","dispose","onClipboardChange","navigator","clipboard","writeText","handleBackPointerDown","button","currentTarget","setPointerCapture","pointerId","pressBackOrTurnOnScreen","AndroidKeyEventAction","handleBackPointerUp","handleHomePointerDown","injectKeyCode","keyCode","AndroidKeyCode","repeat","metaState","handleHomePointerUp","handleAppSwitchPointerDown","handleAppSwitchPointerUp","injectTouch","calculatePointerPosition","clientX","clientY","y","pointerType","BigInt","pointerX","pointerY","pressure","buttons","handlePointerDown","focus","preventDefault","AndroidMotionEventAction","handlePointerMove","handlePointerUp","handleWheel","stopPropagation","injectScroll","scrollX","Math","sign","deltaX","scrollY","deltaY","handleContextMenu","handleKeyDown","code","match","injectText","Backspace","Space","makeAutoObservable","observable","stop","handleDeviceViewRef","handleRendererContainerRef","autorun","firstChild","remove","appendChild","renderer","VideoDecoder","setTimeout","unshift","WebCodecsDecoder","element","addEventListener","passive","viewRect","getBoundingClientRect","pointerViewX","pointerViewY","rotatedWidth","state","rotatedHeight","commandBarItems","iconProps","text","onClick","disabled","iconOnly","enterFullscreen","rotateDevice","commandBarFarItems","tooltipHostProps","p","ExternalLink","href","spaceAfter","calloutProps","calloutMaxWidth","settingDefinitions","IconButton","map","length","console","ConnectionDialog","layerHostId","useId","useState","useEffect","setIsClient","isClient","LayerHost","id","style","top","bottom","left","right","margin","pointerEvents","Dialog","hidden","modalProps","layerProps","hostId","dialogContentProps","title","tokens","CommonStackTokens","ProgressIndicator","percentComplete","formatSpeed","progressHidden","NavigationBar","children","verticalFill","horizontalAlign","background","maxWidth","transform","color","onPointerDown","onPointerUp","div","RouteStackProps","Head","CommandBar","items","farItems","grow","styles","root","DeviceView","ref","BottomElement","tabIndex","onPointerMove","onPointerCancel","onKeyDown","onContextMenu","padding","overflow","display","fontFamily","overflowY","whiteSpace","wordWrap","index","DemoModePanel","props","layerHostRef","rootRef","notifyLayersChanged","componentRef","current","ScrcpyControlMessageType","ScrcpySimpleControlMessage","uint8","ScrcpyInjectTouchControlMessage","fields","uint64","uint32","uint16","ScrcpyInjectTextControlMessage","string","lengthField","ScrcpyInjectKeyCodeControlMessage","SplitLinesStream","constructor","super","indexOf","substring","splitLines","ArrayToStream","array","async","Promise","resolve","pull","ConcatStream","streams","advance","ClipboardMessage","static","adb","path","version","control","encoderNameRegex","getOutputEncoderNameRegex","output","displayIdRegex","connection","createConnection","process","initialize","subprocess","spawn","protocols","abortController","pipe","signal","preventCancel","race","getStreams","error","abort","controlStream","kill","_adb","_stdout","_screenWidth","screenWidth","_screenHeight","screenHeight","_videoStream","_controlStreamWriter","clipboardChangeEvent","lastTouchMessage","readable","createVideoStreamTransformer","buffered","getWriter","deserialize","checkControlStream","caller","getControlMessageTypeValue","getControlMessageTypes","message","serialize","InjectKeycode","InjectText","now","Date","Move","HoverMove","InjectTouch","buffer","serializeInjectScrollControlMessage","InjectScroll","serializeBackOrScreenOnControlMessage","BackOrScreenOn","sendSimpleControlMessage","RotateDevice","AndroidCodecProfile","AndroidCodecLevel","worker","workerReady","pendingResolvers","streamId","pictureReadyEvent","TinyH264Wrapper","onPictureReady","addDisposable","handlePictureReady","renderStateId","feed","postMessage","offset","cachedInitializePromise","all","YuvBuffer","default","YuvCanvas","Baseline","Level4","_renderer","_frameRendered","frameRendered","_writable","_yuvCanvas","_initializer","document","createElement","configure","slice","config","attach","encodedWidth","encodedHeight","chromaWidth","chromaHeight","format","cropLeft","cropTop","cropWidth","cropHeight","displayWidth","displayHeight","wrapper","Worker","URL","resolver","createTinyH264Wrapper","uPlaneOffset","vPlaneOffset","frame","lumaPlane","chromaPlane","drawFrame","toHex","padStart","toUpperCase","context","lastFrame","animationFrame","getContext","render","decode","EncodedVideoChunk","keyframe","timestamp","drawImage","requestAnimationFrame","profileIndex","constraintSet","levelIndex","codec","optimizeForLatency","cancelAnimationFrame","delay","time","globalThis","ScrcpyClientConnection","device","ScrcpyClientForwardConnection","createSocket","i","connect","stream","connectAndRetry","releaseLock","connectVideoStream","ScrcpyClientReverseConnection","address","reverse","queue","TransformStream","writer","add","socket","accept","toScrcpyOptionValue","empty","toOptionValue","isScrcpyOptionValue","BitReader","bytePosition","bitPosition","next","decodeExponentialGolombNumber","parse_sequence_parameter_set","nalu","writeIndex","zeroCount","inEmulation","byte","lastZeroCount","subarray","iterateNalu","nal_ref_idc","profile_idc","constraint_set","constraint_set_reader","constraint_set0_flag","constraint_set1_flag","constraint_set2_flag","constraint_set3_flag","constraint_set4_flag","constraint_set5_flag","level_idc","seq_parameter_set_id","chroma_format_idc","seq_scaling_list_present_flag","pic_order_cnt_type","num_ref_frames_in_pic_order_cnt_cycle","offset_for_ref_frame","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","frame_cropping_flag","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","entries","Object","filter","VideoPacket","uint8Array","NO_PTS","ScrcpyBackOrScreenOnEvent1_16","ScrcpyInjectScrollControlMessage1_16","int32","ScrcpyOptions1_16","Verbose","Debug","Initial","Unlocked","getArgumentOrder","getDefaultValue","maxFps","sendFrameMeta","showTouches","stayAwake","defaults","header","deserializeStream","pts","sequenceParameterSet","cropRight","cropBottom","frameData","ExpandNotificationPanel","CollapseNotificationPanel","GetClipboard","SetClipboard","SetScreenPowerMode","Down","ScrcpyBackOrScreenOnEvent1_18","ScrcpyOptions1_18","concat","powerOffOnClose","types","splice","ExpandSettingPanel","ScrcpyOptions1_21","init","clipboardAutosync","pair","input","replace","toLowerCase","ScrcpyInjectScrollControlMessage1_22","ScrcpyOptions1_22","rawVideoStream","downsizeOnError","KEYFRAME_PTS","ScrcpyOptions1_23","cleanup","superStream","powerOn","sync"],"sourceRoot":""}