{"version":3,"file":"static/chunks/pages/framebuffer-053fac8f9e6df46f.js","mappings":"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","sources":["webpack://_N_E/?a5ec","webpack://_N_E/./src/pages/framebuffer.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/framebuffer\",\n      function () {\n        return require(\"private-next-pages/framebuffer.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/framebuffer\"])\n      });\n    }\n  ","import { ICommandBarItemProps, Stack } from '@fluentui/react';\nimport { AdbFrameBuffer } from \"@yume-chan/adb\";\nimport { action, autorun, computed, makeAutoObservable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { useCallback, useEffect, useRef } from 'react';\nimport { CommandBar, DemoModePanel, DeviceView } from '../components';\nimport { GlobalState } from \"../state\";\nimport { Icons, RouteStackProps } from \"../utils\";\n\nclass FrameBufferState {\n    width = 0;\n    height = 0;\n    imageData: ImageData | undefined = undefined;\n    demoModeVisible = false;\n\n    constructor() {\n        makeAutoObservable(this, {\n            toggleDemoModeVisible: action.bound,\n        });\n    }\n\n    setImage(image: AdbFrameBuffer) {\n        this.width = image.width;\n        this.height = image.height;\n        this.imageData = new ImageData(new Uint8ClampedArray(image.data), image.width, image.height);\n    }\n\n    toggleDemoModeVisible() {\n        this.demoModeVisible = !this.demoModeVisible;\n    }\n}\n\nconst state = new FrameBufferState();\n\nconst FrameBuffer: NextPage = (): JSX.Element | null => {\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n    const capture = useCallback(async () => {\n        if (!GlobalState.device) {\n            return;\n        }\n\n        try {\n            const framebuffer = await GlobalState.device.framebuffer();\n            state.setImage(framebuffer);\n        } catch (e: any) {\n            GlobalState.showErrorDialog(e);\n        }\n    }, []);\n\n    useEffect(() => {\n        return autorun(() => {\n            const canvas = canvasRef.current;\n            if (canvas && state.imageData) {\n                canvas.width = state.width;\n                canvas.height = state.height;\n                const context = canvas.getContext(\"2d\")!;\n                context.putImageData(state.imageData, 0, 0);\n            }\n        });\n    }, []);\n\n    const commandBarItems = computed(() => [\n        {\n            key: 'start',\n            disabled: !GlobalState.device,\n            iconProps: { iconName: Icons.Camera, style: { height: 20, fontSize: 20, lineHeight: 1.5 } },\n            text: 'Capture',\n            onClick: capture,\n        },\n        {\n            key: 'Save',\n            disabled: !state.imageData,\n            iconProps: { iconName: Icons.Save, style: { height: 20, fontSize: 20, lineHeight: 1.5 } },\n            text: 'Save',\n            onClick: () => {\n                const canvas = canvasRef.current;\n                if (!canvas) {\n                    return;\n                }\n\n                const url = canvas.toDataURL();\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = `Screenshot of ${GlobalState.backend!.name}.png`;\n                a.click();\n            },\n        },\n    ]);\n\n    const commandBarFarItems = computed((): ICommandBarItemProps[] => [\n        {\n            key: 'DemoMode',\n            iconProps: { iconName: Icons.Wand, style: { height: 20, fontSize: 20, lineHeight: 1.5 } },\n            checked: state.demoModeVisible,\n            text: 'Demo Mode',\n            onClick: state.toggleDemoModeVisible,\n        },\n        {\n            key: 'info',\n            iconProps: { iconName: Icons.Info, style: { height: 20, fontSize: 20, lineHeight: 1.5 } },\n            iconOnly: true,\n            tooltipHostProps: {\n                content: 'Use ADB FrameBuffer command to capture a full-size, high-resolution screenshot.',\n                calloutProps: {\n                    calloutMaxWidth: 250,\n                }\n            },\n        }\n    ]);\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Screen Capture - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={commandBarItems.get()} farItems={commandBarFarItems.get()} />\n            <Stack horizontal grow styles={{ root: { height: 0 } }}>\n                <DeviceView width={state.width} height={state.height}>\n                    <canvas ref={canvasRef} style={{ display: 'block' }} />\n                </DeviceView>\n\n                <DemoModePanel style={{ display: state.demoModeVisible ? 'block' : 'none' }} />\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default observer(FrameBuffer);\n"],"names":["window","__NEXT_P","push","__webpack_require__","state","setImage","image","width","height","imageData","ImageData","Uint8ClampedArray","data","toggleDemoModeVisible","demoModeVisible","constructor","undefined","makeAutoObservable","action","FrameBuffer","canvasRef","useRef","capture","useCallback","GlobalState","framebuffer","e","useEffect","autorun","canvas","current","context","getContext","putImageData","commandBarItems","computed","key","disabled","iconProps","iconName","Icons","style","fontSize","lineHeight","text","onClick","url","toDataURL","a","document","createElement","href","download","concat","click","commandBarFarItems","checked","iconOnly","tooltipHostProps","content","calloutProps","calloutMaxWidth","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Stack","RouteStackProps","jsx","Head","title","CommandBar","items","get","farItems","horizontal","grow","styles","root","DeviceView","ref","display","DemoModePanel","__webpack_exports__","observer"],"sourceRoot":""}