{"version":3,"file":"static/chunks/pages/scrcpy-ac603c557b365f12.js","mappings":"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","sources":["webpack://_N_E/?30bf","webpack://_N_E/../../libraries/scrcpy/esm/message.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.63.0_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Layer/LayerHost.js","webpack://_N_E/../../libraries/scrcpy/esm/client.js","webpack://_N_E/../../libraries/scrcpy/esm/codec.js","webpack://_N_E/../../libraries/scrcpy/esm/utils.js","webpack://_N_E/../../libraries/scrcpy/esm/connection.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/tinyh264/wrapper.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/tinyh264/index.js","webpack://_N_E/../../libraries/scrcpy/esm/decoder/web-codecs/index.js","webpack://_N_E/../../libraries/scrcpy/esm/options/common.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_16/sps.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_16/index.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_18.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_21.js","webpack://_N_E/../../libraries/scrcpy/esm/options/1_22.js","webpack://_N_E/../../libraries/scrcpy/esm/push-server.js","webpack://_N_E/../../libraries/scrcpy/bin/version.js","webpack://_N_E/./pages/scrcpy.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/scrcpy\",\n      function () {\n        return require(\"private-next-pages/scrcpy.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/scrcpy\"])\n      });\n    }\n  ","import Struct, { placeholder } from '@yume-chan/struct';\nexport var ScrcpyControlMessageType;\n(function (ScrcpyControlMessageType) {\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectKeycode\"] = 0] = \"InjectKeycode\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectText\"] = 1] = \"InjectText\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectTouch\"] = 2] = \"InjectTouch\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"InjectScroll\"] = 3] = \"InjectScroll\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"BackOrScreenOn\"] = 4] = \"BackOrScreenOn\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"ExpandNotificationPanel\"] = 5] = \"ExpandNotificationPanel\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"CollapseNotificationPanel\"] = 6] = \"CollapseNotificationPanel\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"GetClipboard\"] = 7] = \"GetClipboard\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"SetClipboard\"] = 8] = \"SetClipboard\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"SetScreenPowerMode\"] = 9] = \"SetScreenPowerMode\";\n    ScrcpyControlMessageType[ScrcpyControlMessageType[\"RotateDevice\"] = 10] = \"RotateDevice\";\n})(ScrcpyControlMessageType || (ScrcpyControlMessageType = {}));\n// https://developer.android.com/reference/android/view/MotionEvent#constants_1\nexport var AndroidMotionEventAction;\n(function (AndroidMotionEventAction) {\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Down\"] = 0] = \"Down\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Up\"] = 1] = \"Up\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Move\"] = 2] = \"Move\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Cancel\"] = 3] = \"Cancel\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Outside\"] = 4] = \"Outside\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"PointerDown\"] = 5] = \"PointerDown\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"PointerUp\"] = 6] = \"PointerUp\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverMove\"] = 7] = \"HoverMove\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"Scroll\"] = 8] = \"Scroll\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverEnter\"] = 9] = \"HoverEnter\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"HoverExit\"] = 10] = \"HoverExit\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"ButtonPress\"] = 11] = \"ButtonPress\";\n    AndroidMotionEventAction[AndroidMotionEventAction[\"ButtonRelease\"] = 12] = \"ButtonRelease\";\n})(AndroidMotionEventAction || (AndroidMotionEventAction = {}));\nexport const ScrcpyInjectTouchControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectTouch)\n    .uint8('action', placeholder())\n    .uint64('pointerId')\n    .uint32('pointerX')\n    .uint32('pointerY')\n    .uint16('screenWidth')\n    .uint16('screenHeight')\n    .uint16('pressure')\n    .uint32('buttons');\nexport const ScrcpyInjectTextControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectText)\n    .uint32('length')\n    .string('text', { lengthField: 'length' });\nexport var AndroidKeyEventAction;\n(function (AndroidKeyEventAction) {\n    AndroidKeyEventAction[AndroidKeyEventAction[\"Down\"] = 0] = \"Down\";\n    AndroidKeyEventAction[AndroidKeyEventAction[\"Up\"] = 1] = \"Up\";\n})(AndroidKeyEventAction || (AndroidKeyEventAction = {}));\nexport var AndroidKeyCode;\n(function (AndroidKeyCode) {\n    AndroidKeyCode[AndroidKeyCode[\"Home\"] = 3] = \"Home\";\n    AndroidKeyCode[AndroidKeyCode[\"Back\"] = 4] = \"Back\";\n    AndroidKeyCode[AndroidKeyCode[\"A\"] = 29] = \"A\";\n    AndroidKeyCode[AndroidKeyCode[\"B\"] = 30] = \"B\";\n    AndroidKeyCode[AndroidKeyCode[\"C\"] = 31] = \"C\";\n    AndroidKeyCode[AndroidKeyCode[\"D\"] = 32] = \"D\";\n    AndroidKeyCode[AndroidKeyCode[\"E\"] = 33] = \"E\";\n    AndroidKeyCode[AndroidKeyCode[\"F\"] = 34] = \"F\";\n    AndroidKeyCode[AndroidKeyCode[\"G\"] = 35] = \"G\";\n    AndroidKeyCode[AndroidKeyCode[\"H\"] = 36] = \"H\";\n    AndroidKeyCode[AndroidKeyCode[\"I\"] = 37] = \"I\";\n    AndroidKeyCode[AndroidKeyCode[\"J\"] = 38] = \"J\";\n    AndroidKeyCode[AndroidKeyCode[\"K\"] = 39] = \"K\";\n    AndroidKeyCode[AndroidKeyCode[\"L\"] = 40] = \"L\";\n    AndroidKeyCode[AndroidKeyCode[\"M\"] = 41] = \"M\";\n    AndroidKeyCode[AndroidKeyCode[\"N\"] = 42] = \"N\";\n    AndroidKeyCode[AndroidKeyCode[\"O\"] = 43] = \"O\";\n    AndroidKeyCode[AndroidKeyCode[\"P\"] = 44] = \"P\";\n    AndroidKeyCode[AndroidKeyCode[\"Q\"] = 45] = \"Q\";\n    AndroidKeyCode[AndroidKeyCode[\"R\"] = 46] = \"R\";\n    AndroidKeyCode[AndroidKeyCode[\"S\"] = 47] = \"S\";\n    AndroidKeyCode[AndroidKeyCode[\"T\"] = 48] = \"T\";\n    AndroidKeyCode[AndroidKeyCode[\"U\"] = 49] = \"U\";\n    AndroidKeyCode[AndroidKeyCode[\"V\"] = 50] = \"V\";\n    AndroidKeyCode[AndroidKeyCode[\"W\"] = 51] = \"W\";\n    AndroidKeyCode[AndroidKeyCode[\"X\"] = 52] = \"X\";\n    AndroidKeyCode[AndroidKeyCode[\"Y\"] = 53] = \"Y\";\n    AndroidKeyCode[AndroidKeyCode[\"Z\"] = 54] = \"Z\";\n    AndroidKeyCode[AndroidKeyCode[\"Space\"] = 62] = \"Space\";\n    AndroidKeyCode[AndroidKeyCode[\"Delete\"] = 67] = \"Delete\";\n    AndroidKeyCode[AndroidKeyCode[\"AppSwitch\"] = 187] = \"AppSwitch\";\n})(AndroidKeyCode || (AndroidKeyCode = {}));\nexport const ScrcpyInjectKeyCodeControlMessage = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectKeycode)\n    .uint8('action', placeholder())\n    .uint32('keyCode')\n    .uint32('repeat')\n    .uint32('metaState');\n//# sourceMappingURL=message.js.map","import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nexport var LayerHost = function (props) {\n    var className = props.className;\n    var layerHostId = React.useState(function () { return getId(); })[0];\n    var _a = props.id, hostId = _a === void 0 ? layerHostId : _a;\n    var layerHostRef = React.useRef({\n        hostId: hostId,\n        rootRef: React.useRef(null),\n        notifyLayersChanged: function () {\n            // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n        },\n    });\n    React.useImperativeHandle(props.componentRef, function () { return layerHostRef.current; });\n    React.useEffect(function () {\n        registerLayerHost(hostId, layerHostRef.current);\n        notifyHostChanged(hostId);\n        // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n    }, []);\n    useUnmount(function () {\n        unregisterLayerHost(hostId, layerHostRef.current);\n        notifyHostChanged(hostId);\n    });\n    return React.createElement(\"div\", __assign({}, props, { className: css('ms-LayerHost', className), ref: layerHostRef.current.rootRef }));\n};\n//# sourceMappingURL=LayerHost.js.map","import { __awaiter } from \"tslib\";\nimport { AdbBufferedStream, AdbNoneSubprocessProtocol, DecodeUtf8Stream, InspectStream, TransformStream, WritableStream } from '@yume-chan/adb';\nimport { EventEmitter } from '@yume-chan/event';\nimport Struct from '@yume-chan/struct';\nimport { AndroidMotionEventAction, ScrcpyControlMessageType, ScrcpyInjectKeyCodeControlMessage, ScrcpyInjectTextControlMessage, ScrcpyInjectTouchControlMessage } from './message.js';\nfunction* splitLines(text) {\n    let start = 0;\n    while (true) {\n        const index = text.indexOf('\\n', start);\n        if (index === -1) {\n            return;\n        }\n        const line = text.substring(start, index);\n        yield line;\n        start = index + 1;\n    }\n}\nconst ClipboardMessage = new Struct()\n    .uint32('length')\n    .string('content', { lengthField: 'length' });\nexport class ScrcpyClient {\n    constructor(adb, options, process, videoStream, controlStream) {\n        this.clipboardChangeEvent = new EventEmitter();\n        this.lastTouchMessage = 0;\n        this._adb = adb;\n        this.options = options;\n        this.process = process;\n        this._stdout = process.stdout\n            .pipeThrough(new DecodeUtf8Stream())\n            .pipeThrough(new TransformStream({\n            transform(chunk, controller) {\n                for (const line of splitLines(chunk)) {\n                    if (line === '') {\n                        continue;\n                    }\n                    controller.enqueue(line);\n                }\n            },\n        }));\n        this._videoStream = options\n            .parseVideoStream(videoStream)\n            .pipeThrough(new InspectStream(packet => {\n            if (packet.type === 'configuration') {\n                this._screenWidth = packet.data.croppedWidth;\n                this._screenHeight = packet.data.croppedHeight;\n            }\n        }));\n        if (controlStream) {\n            const buffered = new AdbBufferedStream(controlStream);\n            this._controlStreamWriter = controlStream.writable.getWriter();\n            (() => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    while (true) {\n                        const type = yield buffered.read(1);\n                        switch (type[0]) {\n                            case 0:\n                                const { content } = yield ClipboardMessage.deserialize(buffered);\n                                this.clipboardChangeEvent.fire(content);\n                                break;\n                            default:\n                                throw new Error('unknown control message type');\n                        }\n                    }\n                }\n                catch (_a) {\n                    // TODO: Scrcpy: handle error\n                }\n            }))();\n        }\n    }\n    static getEncoders(adb, path, version, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Provide an invalid encoder name\n            // So the server will return all available encoders\n            options.value.encoderName = '_';\n            // Disable control for faster connection in 1.22+\n            options.value.control = false;\n            // Scrcpy server will open connections, before initializing encoder\n            // Thus although an invalid encoder name is given, the start process will success\n            const client = yield ScrcpyClient.start(adb, path, version, options);\n            const encoderNameRegex = options.getOutputEncoderNameRegex();\n            const encoders = [];\n            yield client.stdout.pipeTo(new WritableStream({\n                write(line) {\n                    const match = line.match(encoderNameRegex);\n                    if (match) {\n                        encoders.push(match[1]);\n                    }\n                },\n            }));\n            return encoders;\n        });\n    }\n    static start(adb, path, version, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const connection = options.createConnection(adb);\n            let process;\n            try {\n                yield connection.initialize();\n                process = yield adb.subprocess.spawn([\n                    // cspell: disable-next-line\n                    `CLASSPATH=${path}`,\n                    'app_process',\n                    /* unused */ '/',\n                    'com.genymobile.scrcpy.Server',\n                    version,\n                    ...options.formatServerArguments(),\n                ], {\n                    // Scrcpy server doesn't split stdout and stderr,\n                    // so disable Shell Protocol to simplify processing\n                    protocols: [AdbNoneSubprocessProtocol],\n                });\n                const result = yield Promise.race([\n                    process.exit,\n                    connection.getStreams(),\n                ]);\n                if (typeof result === 'number') {\n                    throw new Error('scrcpy server exited prematurely');\n                }\n                const [videoStream, controlStream] = result;\n                return new ScrcpyClient(adb, options, process, videoStream, controlStream);\n            }\n            catch (e) {\n                yield (process === null || process === void 0 ? void 0 : process.kill());\n                throw e;\n            }\n            finally {\n                connection.dispose();\n            }\n        });\n    }\n    get adb() { return this._adb; }\n    get stdout() { return this._stdout; }\n    get exit() { return this.process.exit; }\n    get screenWidth() { return this._screenWidth; }\n    get screenHeight() { return this._screenHeight; }\n    get videoStream() { return this._videoStream; }\n    get onClipboardChange() { return this.clipboardChangeEvent.event; }\n    checkControlStream(caller) {\n        if (!this._controlStreamWriter) {\n            throw new Error(`${caller} called with control disabled`);\n        }\n        return this._controlStreamWriter;\n    }\n    injectKeyCode(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectKeyCode');\n            yield controlStream.write(ScrcpyInjectKeyCodeControlMessage.serialize(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectKeycode })));\n        });\n    }\n    injectText(text) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectText');\n            yield controlStream.write(ScrcpyInjectTextControlMessage.serialize({\n                type: ScrcpyControlMessageType.InjectText,\n                text,\n            }));\n        });\n    }\n    injectTouch(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectTouch');\n            if (!this.screenWidth || !this.screenHeight) {\n                return;\n            }\n            // ADB streams are actually pretty low-bandwidth and laggy\n            // Re-sample move events to avoid flooding the connection\n            // TODO: Scrcpy: investigate how to throttle touch events\n            // because 60FPS may still be too high\n            const now = Date.now();\n            if (now - this.lastTouchMessage < 16 &&\n                [AndroidMotionEventAction.Move, AndroidMotionEventAction.HoverMove].includes(message.action)) {\n                return;\n            }\n            this.lastTouchMessage = now;\n            yield controlStream.write(ScrcpyInjectTouchControlMessage.serialize(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectTouch, screenWidth: this.screenWidth, screenHeight: this.screenHeight })));\n        });\n    }\n    injectScroll(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('injectScroll');\n            if (!this.screenWidth || !this.screenHeight) {\n                return;\n            }\n            const buffer = this.options.serializeInjectScrollControlMessage(Object.assign(Object.assign({}, message), { type: ScrcpyControlMessageType.InjectScroll, screenWidth: this.screenWidth, screenHeight: this.screenHeight }));\n            yield controlStream.write(buffer);\n        });\n    }\n    pressBackOrTurnOnScreen(action) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controlStream = this.checkControlStream('pressBackOrTurnOnScreen');\n            const buffer = this.options.serializeBackOrScreenOnControlMessage({\n                type: ScrcpyControlMessageType.BackOrScreenOn,\n                action,\n            });\n            if (buffer) {\n                yield controlStream.write(buffer);\n            }\n        });\n    }\n    close() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            // No need to close streams. Kill the process will destroy them from the other side.\n            yield ((_a = this.process) === null || _a === void 0 ? void 0 : _a.kill());\n        });\n    }\n}\n//# sourceMappingURL=client.js.map","// From https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel\nexport var AndroidCodecProfile;\n(function (AndroidCodecProfile) {\n    AndroidCodecProfile[AndroidCodecProfile[\"Baseline\"] = 1] = \"Baseline\";\n    AndroidCodecProfile[AndroidCodecProfile[\"Main\"] = 2] = \"Main\";\n    AndroidCodecProfile[AndroidCodecProfile[\"Extended\"] = 4] = \"Extended\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High\"] = 8] = \"High\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High10\"] = 16] = \"High10\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High422\"] = 32] = \"High422\";\n    AndroidCodecProfile[AndroidCodecProfile[\"High444\"] = 64] = \"High444\";\n    AndroidCodecProfile[AndroidCodecProfile[\"ConstrainedBaseline\"] = 65536] = \"ConstrainedBaseline\";\n    AndroidCodecProfile[AndroidCodecProfile[\"ConstrainedHigh\"] = 524288] = \"ConstrainedHigh\";\n})(AndroidCodecProfile || (AndroidCodecProfile = {}));\nexport var AndroidCodecLevel;\n(function (AndroidCodecLevel) {\n    AndroidCodecLevel[AndroidCodecLevel[\"Level1\"] = 1] = \"Level1\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level1b\"] = 2] = \"Level1b\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level11\"] = 4] = \"Level11\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level12\"] = 8] = \"Level12\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level13\"] = 16] = \"Level13\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level2\"] = 32] = \"Level2\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level21\"] = 64] = \"Level21\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level22\"] = 128] = \"Level22\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level3\"] = 256] = \"Level3\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level31\"] = 512] = \"Level31\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level32\"] = 1024] = \"Level32\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level4\"] = 2048] = \"Level4\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level41\"] = 4096] = \"Level41\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level42\"] = 8192] = \"Level42\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level5\"] = 16384] = \"Level5\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level51\"] = 32768] = \"Level51\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level52\"] = 65536] = \"Level52\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level6\"] = 131072] = \"Level6\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level61\"] = 262144] = \"Level61\";\n    AndroidCodecLevel[AndroidCodecLevel[\"Level62\"] = 524288] = \"Level62\";\n})(AndroidCodecLevel || (AndroidCodecLevel = {}));\n//# sourceMappingURL=codec.js.map","export function delay(time) {\n    return new Promise(resolve => {\n        globalThis.setTimeout(resolve, time);\n    });\n}\nconst Utf8Encoder = new TextEncoder();\nconst Utf8Decoder = new TextDecoder();\nexport function encodeUtf8(input) {\n    return Utf8Encoder.encode(input).buffer;\n}\nexport function decodeUtf8(buffer) {\n    return Utf8Decoder.decode(buffer);\n}\n//# sourceMappingURL=utils.js.map","import { __awaiter } from \"tslib\";\nimport { AdbBufferedStream } from \"@yume-chan/adb\";\nimport { delay } from \"./utils.js\";\nexport class ScrcpyClientConnection {\n    constructor(device, options) {\n        this.device = device;\n        this.options = options;\n    }\n    initialize() { }\n    dispose() { }\n}\nexport class ScrcpyClientForwardConnection extends ScrcpyClientConnection {\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.device.createSocket('localabstract:scrcpy');\n        });\n    }\n    connectAndRetry() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let i = 0; i < 100; i++) {\n                try {\n                    return yield this.connect();\n                }\n                catch (e) {\n                    yield delay(100);\n                }\n            }\n            throw new Error(`Can't connect to server after 100 retries`);\n        });\n    }\n    connectVideoStream() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const socket = yield this.connectAndRetry();\n            const stream = new AdbBufferedStream(socket);\n            if (this.options.sendDummyByte) {\n                // server will write a `0` to signal connection success\n                yield stream.read(1);\n            }\n            return stream;\n        });\n    }\n    getStreams() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const videoStream = yield this.connectVideoStream();\n            let controlStream;\n            if (this.options.control) {\n                controlStream = yield this.connectAndRetry();\n            }\n            if (this.options.sendDeviceMeta) {\n                // 64 bytes device name + 2 bytes video width + 2 bytes video height\n                yield videoStream.read(64 + 2 + 2);\n            }\n            return [videoStream, controlStream];\n        });\n    }\n}\nexport class ScrcpyClientReverseConnection extends ScrcpyClientConnection {\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // try to unbind first\n                yield this.device.reverse.remove('localabstract:scrcpy');\n            }\n            catch (_a) {\n                // ignore error\n            }\n            const queue = new TransformStream();\n            this.streams = queue.readable.getReader();\n            const writer = queue.writable.getWriter();\n            this.address = yield this.device.reverse.add('localabstract:scrcpy', 27183, {\n                onSocket: (packet, stream) => {\n                    writer.write(stream);\n                },\n            });\n        });\n    }\n    accept() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.streams.read()).value;\n        });\n    }\n    getStreams() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const videoStream = new AdbBufferedStream(yield this.accept());\n            let controlStream;\n            if (this.options.control) {\n                controlStream = yield this.accept();\n            }\n            if (this.options.sendDeviceMeta) {\n                // 64 bytes device name + 2 bytes video width + 2 bytes video height\n                yield videoStream.read(64 + 2 + 2);\n            }\n            return [videoStream, controlStream];\n        });\n    }\n    dispose() {\n        // Don't await this!\n        // `reverse.remove`'s response will never arrive\n        // before we read all pending data from `videoStream`\n        this.device.reverse.remove(this.address);\n    }\n}\n//# sourceMappingURL=connection.js.map","import { PromiseResolver } from '@yume-chan/async';\nimport { AutoDisposable, EventEmitter } from '@yume-chan/event';\nlet worker;\nlet workerReady = false;\nconst pendingResolvers = [];\nlet streamId = 0;\nconst pictureReadyEvent = new EventEmitter();\nexport class TinyH264Wrapper extends AutoDisposable {\n    constructor(streamId) {\n        super();\n        this.pictureReadyEvent = new EventEmitter();\n        this.streamId = streamId;\n        this.addDisposable(pictureReadyEvent.event(this.handlePictureReady, this));\n    }\n    get onPictureReady() { return this.pictureReadyEvent.event; }\n    handlePictureReady(e) {\n        if (e.renderStateId === this.streamId) {\n            this.pictureReadyEvent.fire(e);\n        }\n    }\n    feed(data) {\n        worker.postMessage({\n            type: 'decode',\n            data: data,\n            offset: 0,\n            length: data.byteLength,\n            renderStateId: this.streamId,\n        }, [data]);\n    }\n    dispose() {\n        super.dispose();\n        worker.postMessage({\n            type: 'release',\n            renderStateId: this.streamId,\n        });\n    }\n}\nexport function createTinyH264Wrapper() {\n    if (!worker) {\n        worker = new Worker(new URL('./worker.js', import.meta.url));\n        worker.addEventListener('message', (e) => {\n            const { data } = e;\n            switch (data.type) {\n                case 'decoderReady':\n                    workerReady = true;\n                    for (const resolver of pendingResolvers) {\n                        resolver.resolve(new TinyH264Wrapper(streamId));\n                        streamId += 1;\n                    }\n                    pendingResolvers.length = 0;\n                    break;\n                case 'pictureReady':\n                    pictureReadyEvent.fire(data);\n                    break;\n            }\n        });\n    }\n    if (!workerReady) {\n        const resolver = new PromiseResolver();\n        pendingResolvers.push(resolver);\n        return resolver.promise;\n    }\n    const decoder = new TinyH264Wrapper(streamId);\n    streamId += 1;\n    return Promise.resolve(decoder);\n}\n//# sourceMappingURL=wrapper.js.map","import { __awaiter } from \"tslib\";\nimport { WritableStream } from \"@yume-chan/adb\";\nimport { PromiseResolver } from \"@yume-chan/async\";\nimport { AndroidCodecLevel, AndroidCodecProfile } from \"../../codec.js\";\nimport { createTinyH264Wrapper } from \"./wrapper.js\";\nlet cachedInitializePromise;\nfunction initialize() {\n    if (!cachedInitializePromise) {\n        cachedInitializePromise = Promise.all([import('yuv-buffer'), import('yuv-canvas')]).then(([YuvBuffer, { default: YuvCanvas }]) => ({\n            YuvBuffer, YuvCanvas\n        }));\n    }\n    return cachedInitializePromise;\n}\nexport class TinyH264Decoder {\n    constructor() {\n        this.maxProfile = AndroidCodecProfile.Baseline;\n        this.maxLevel = AndroidCodecLevel.Level4;\n        this._frameRendered = 0;\n        initialize();\n        this._renderer = document.createElement('canvas');\n        this._writable = new WritableStream({\n            write: (packet) => __awaiter(this, void 0, void 0, function* () {\n                switch (packet.type) {\n                    case 'configuration':\n                        this.configure(packet.data);\n                        break;\n                    case 'frame':\n                        if (!this._initializer) {\n                            throw new Error('Decoder not initialized');\n                        }\n                        const wrapper = yield this._initializer.promise;\n                        wrapper.feed(packet.data.slice().buffer);\n                        break;\n                }\n            })\n        });\n    }\n    get renderer() { return this._renderer; }\n    get frameRendered() { return this._frameRendered; }\n    get writable() { return this._writable; }\n    configure(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.dispose();\n            this._initializer = new PromiseResolver();\n            const { YuvBuffer, YuvCanvas } = yield initialize();\n            if (!this._yuvCanvas) {\n                this._yuvCanvas = YuvCanvas.attach(this._renderer);\n                ;\n            }\n            const { encodedWidth, encodedHeight } = config;\n            const chromaWidth = encodedWidth / 2;\n            const chromaHeight = encodedHeight / 2;\n            this._renderer.width = config.croppedWidth;\n            this._renderer.height = config.croppedHeight;\n            const format = YuvBuffer.format({\n                width: encodedWidth,\n                height: encodedHeight,\n                chromaWidth,\n                chromaHeight,\n                cropLeft: config.cropLeft,\n                cropTop: config.cropTop,\n                cropWidth: config.croppedWidth,\n                cropHeight: config.croppedHeight,\n                displayWidth: config.croppedWidth,\n                displayHeight: config.croppedHeight,\n            });\n            const wrapper = yield createTinyH264Wrapper();\n            this._initializer.resolve(wrapper);\n            const uPlaneOffset = encodedWidth * encodedHeight;\n            const vPlaneOffset = uPlaneOffset + chromaWidth * chromaHeight;\n            wrapper.onPictureReady(({ data }) => {\n                this._frameRendered += 1;\n                const array = new Uint8Array(data);\n                const frame = YuvBuffer.frame(format, YuvBuffer.lumaPlane(format, array, encodedWidth, 0), YuvBuffer.chromaPlane(format, array, chromaWidth, uPlaneOffset), YuvBuffer.chromaPlane(format, array, chromaWidth, vPlaneOffset));\n                this._yuvCanvas.drawFrame(frame);\n            });\n        });\n    }\n    dispose() {\n        var _a;\n        (_a = this._initializer) === null || _a === void 0 ? void 0 : _a.promise.then(wrapper => wrapper.dispose());\n        this._initializer = undefined;\n    }\n}\n//# sourceMappingURL=index.js.map","import { __awaiter } from \"tslib\";\nimport { WritableStream } from '@yume-chan/adb';\nfunction toHex(value) {\n    return value.toString(16).padStart(2, '0').toUpperCase();\n}\nexport class WebCodecsDecoder {\n    constructor() {\n        // Usually, browsers can decode most configurations,\n        // So let device choose best profile and level for itself.\n        this.maxProfile = undefined;\n        this.maxLevel = undefined;\n        this._frameRendered = 0;\n        this.animationFrame = 0;\n        this.render = () => {\n            if (this.lastFrame) {\n                this._frameRendered += 1;\n                this.context.drawImage(this.lastFrame, 0, 0);\n                this.lastFrame.close();\n                this.lastFrame = undefined;\n            }\n            this.animationFrame = requestAnimationFrame(this.render);\n        };\n        this._renderer = document.createElement('canvas');\n        this.context = this._renderer.getContext('2d');\n        this.decoder = new VideoDecoder({\n            output: (frame) => {\n                if (this.lastFrame) {\n                    this.lastFrame.close();\n                }\n                this.lastFrame = frame;\n                if (!this.animationFrame) {\n                    // Start render loop on first frame\n                    this.render();\n                }\n            },\n            error() { },\n        });\n        this._writable = new WritableStream({\n            write: (packet) => __awaiter(this, void 0, void 0, function* () {\n                switch (packet.type) {\n                    case 'configuration':\n                        this.configure(packet.data);\n                        break;\n                    case 'frame':\n                        this.decoder.decode(new EncodedVideoChunk({\n                            type: 'key',\n                            timestamp: 0,\n                            data: packet.data,\n                        }));\n                        break;\n                }\n            })\n        });\n    }\n    get writable() { return this._writable; }\n    get renderer() { return this._renderer; }\n    get frameRendered() { return this._frameRendered; }\n    configure(config) {\n        const { profileIndex, constraintSet, levelIndex } = config;\n        this._renderer.width = config.croppedWidth;\n        this._renderer.height = config.croppedHeight;\n        // https://www.rfc-editor.org/rfc/rfc6381#section-3.3\n        // ISO Base Media File Format Name Space\n        const codec = `avc1.${[profileIndex, constraintSet, levelIndex].map(toHex).join('')}`;\n        this.decoder.configure({\n            codec: codec,\n            optimizeForLatency: true,\n        });\n    }\n    dispose() {\n        cancelAnimationFrame(this.animationFrame);\n        this.decoder.close();\n    }\n}\n//# sourceMappingURL=index.js.map","export const DEFAULT_SERVER_PATH = '/data/local/tmp/scrcpy-server.jar';\nexport function isScrcpyOptionValue(value) {\n    return typeof value === 'object' &&\n        value !== null &&\n        typeof value.toOptionValue === 'function';\n}\nexport function toScrcpyOptionValue(value, empty) {\n    if (isScrcpyOptionValue(value)) {\n        value = value.toOptionValue();\n    }\n    if (value === undefined) {\n        return empty;\n    }\n    return `${value}`;\n}\n//# sourceMappingURL=common.js.map","// cspell: ignore golomb\n// cspell: ignore qpprime\nclass BitReader {\n    constructor(buffer) {\n        this.bytePosition = 0;\n        this.bitPosition = 0;\n        this.buffer = buffer;\n    }\n    read(length) {\n        let result = 0;\n        for (let i = 0; i < length; i += 1) {\n            result = (result << 1) | this.next();\n        }\n        return result;\n    }\n    next() {\n        const value = (this.buffer[this.bytePosition] >> (7 - this.bitPosition)) & 1;\n        this.bitPosition += 1;\n        if (this.bitPosition === 8) {\n            this.bytePosition += 1;\n            this.bitPosition = 0;\n        }\n        return value;\n    }\n    decodeExponentialGolombNumber() {\n        let length = 0;\n        while (this.next() === 0) {\n            length += 1;\n        }\n        if (length === 0) {\n            return 0;\n        }\n        return (1 << length | this.read(length)) - 1;\n    }\n}\nfunction* iterateNalu(buffer) {\n    // -1 means we haven't found the first start code\n    let start = -1;\n    let writeIndex = 0;\n    // How many `0x00`s in a row we have counted\n    let zeroCount = 0;\n    let inEmulation = false;\n    for (const byte of buffer) {\n        buffer[writeIndex] = byte;\n        writeIndex += 1;\n        if (inEmulation) {\n            if (byte > 0x03) {\n                // `0x00000304` or larger are invalid\n                throw new Error('Invalid data');\n            }\n            inEmulation = false;\n            continue;\n        }\n        if (byte == 0x00) {\n            zeroCount += 1;\n            continue;\n        }\n        const lastZeroCount = zeroCount;\n        zeroCount = 0;\n        if (start === -1) {\n            // 0x000001 is the start code\n            // But it can be preceded by any number of zeros\n            // So 2 is the minimal\n            if (lastZeroCount >= 2 && byte === 0x01) {\n                // Found start of first NAL unit\n                writeIndex = 0;\n                start = 0;\n                continue;\n            }\n            // Not begin with start code\n            throw new Error('Invalid data');\n        }\n        if (lastZeroCount < 2) {\n            // zero or one `0x00`s are acceptable\n            continue;\n        }\n        if (byte === 0x01) {\n            // Remove all leading `0x00`s and this `0x01`\n            writeIndex -= lastZeroCount + 1;\n            // Found another NAL unit\n            yield buffer.subarray(start, writeIndex);\n            start = writeIndex;\n            continue;\n        }\n        if (lastZeroCount > 2) {\n            // Too much `0x00`s\n            throw new Error('Invalid data');\n        }\n        switch (byte) {\n            case 0x02:\n                // Didn't find why, but 7.4.1 NAL unit semantics forbids `0x000002` appearing in NAL units\n                throw new Error('Invalid data');\n            case 0x03:\n                // `0x000003` is the \"emulation_prevention_three_byte\"\n                // `0x00000300`, `0x00000301`, `0x00000302` and `0x00000303` represent\n                // `0x000000`, `0x000001`, `0x000002` and `0x000003` respectively\n                // Remove current byte\n                writeIndex -= 1;\n                inEmulation = true;\n                break;\n            default:\n                // `0x000004` or larger are ok\n                break;\n        }\n    }\n    if (inEmulation || zeroCount !== 0) {\n        throw new Error('Invalid data');\n    }\n    yield buffer.subarray(start, writeIndex);\n}\n// 7.3.2.1.1 Sequence parameter set data syntax\nexport function parse_sequence_parameter_set(buffer) {\n    for (const nalu of iterateNalu(new Uint8Array(buffer))) {\n        const reader = new BitReader(nalu);\n        if (reader.next() !== 0) {\n            throw new Error('Invalid data');\n        }\n        const nal_ref_idc = reader.read(2);\n        const nal_unit_type = reader.read(5);\n        if (nal_unit_type !== 7) {\n            continue;\n        }\n        if (nal_ref_idc === 0) {\n            throw new Error('Invalid data');\n        }\n        const profile_idc = reader.read(8);\n        const constraint_set = reader.read(8);\n        const constraint_set_reader = new BitReader(new Uint8Array([constraint_set]));\n        const constraint_set0_flag = !!constraint_set_reader.next();\n        const constraint_set1_flag = !!constraint_set_reader.next();\n        const constraint_set2_flag = !!constraint_set_reader.next();\n        const constraint_set3_flag = !!constraint_set_reader.next();\n        const constraint_set4_flag = !!constraint_set_reader.next();\n        const constraint_set5_flag = !!constraint_set_reader.next();\n        // reserved_zero_2bits\n        if (constraint_set_reader.read(2) !== 0) {\n            throw new Error('Invalid data');\n        }\n        const level_idc = reader.read(8);\n        const seq_parameter_set_id = reader.decodeExponentialGolombNumber();\n        if (profile_idc === 100 || profile_idc === 110 ||\n            profile_idc === 122 || profile_idc === 244 || profile_idc === 44 ||\n            profile_idc === 83 || profile_idc === 86 || profile_idc === 118 ||\n            profile_idc === 128 || profile_idc === 138 || profile_idc === 139 ||\n            profile_idc === 134) {\n            const chroma_format_idc = reader.decodeExponentialGolombNumber();\n            if (chroma_format_idc === 3) {\n                // separate_colour_plane_flag\n                reader.next();\n            }\n            // bit_depth_luma_minus8\n            reader.decodeExponentialGolombNumber();\n            // bit_depth_chroma_minus8\n            reader.decodeExponentialGolombNumber();\n            // qpprime_y_zero_transform_bypass_flag\n            reader.next();\n            const seq_scaling_matrix_present_flag = !!reader.next();\n            if (seq_scaling_matrix_present_flag) {\n                const seq_scaling_list_present_flag = [];\n                for (let i = 0; i < ((chroma_format_idc !== 3) ? 8 : 12); i++) {\n                    seq_scaling_list_present_flag[i] = !!reader.next();\n                    if (seq_scaling_list_present_flag[i])\n                        if (i < 6) {\n                            // TODO\n                            // scaling_list( ScalingList4x4[ i ], 16,\n                            //               UseDefaultScalingMatrix4x4Flag[ i ])\n                        }\n                        else {\n                            // TODO\n                            // scaling_list( ScalingList8x8[ i − 6 ], 64,\n                            //               UseDefaultScalingMatrix8x8Flag[ i − 6 ] )\n                        }\n                }\n            }\n        }\n        // log2_max_frame_num_minus4\n        reader.decodeExponentialGolombNumber();\n        const pic_order_cnt_type = reader.decodeExponentialGolombNumber();\n        if (pic_order_cnt_type === 0) {\n            // log2_max_pic_order_cnt_lsb_minus4\n            reader.decodeExponentialGolombNumber();\n        }\n        else if (pic_order_cnt_type === 1) {\n            // delta_pic_order_always_zero_flag\n            reader.next();\n            // offset_for_non_ref_pic\n            reader.decodeExponentialGolombNumber();\n            // offset_for_top_to_bottom_field\n            reader.decodeExponentialGolombNumber();\n            const num_ref_frames_in_pic_order_cnt_cycle = reader.decodeExponentialGolombNumber();\n            const offset_for_ref_frame = [];\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\n                offset_for_ref_frame[i] = reader.decodeExponentialGolombNumber();\n            }\n        }\n        // max_num_ref_frames\n        reader.decodeExponentialGolombNumber();\n        // gaps_in_frame_num_value_allowed_flag\n        reader.next();\n        const pic_width_in_mbs_minus1 = reader.decodeExponentialGolombNumber();\n        const pic_height_in_map_units_minus1 = reader.decodeExponentialGolombNumber();\n        const frame_mbs_only_flag = reader.next();\n        if (!frame_mbs_only_flag) {\n            // mb_adaptive_frame_field_flag\n            reader.next();\n        }\n        // direct_8x8_inference_flag\n        reader.next();\n        const frame_cropping_flag = !!reader.next();\n        let frame_crop_left_offset;\n        let frame_crop_right_offset;\n        let frame_crop_top_offset;\n        let frame_crop_bottom_offset;\n        if (frame_cropping_flag) {\n            frame_crop_left_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_right_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_top_offset = reader.decodeExponentialGolombNumber();\n            frame_crop_bottom_offset = reader.decodeExponentialGolombNumber();\n        }\n        else {\n            frame_crop_left_offset = 0;\n            frame_crop_right_offset = 0;\n            frame_crop_top_offset = 0;\n            frame_crop_bottom_offset = 0;\n        }\n        const vui_parameters_present_flag = !!reader.next();\n        if (vui_parameters_present_flag) {\n            // TODO\n            // vui_parameters( )\n        }\n        return {\n            profile_idc,\n            constraint_set,\n            constraint_set0_flag,\n            constraint_set1_flag,\n            constraint_set2_flag,\n            constraint_set3_flag,\n            constraint_set4_flag,\n            constraint_set5_flag,\n            level_idc,\n            seq_parameter_set_id,\n            pic_width_in_mbs_minus1,\n            pic_height_in_map_units_minus1,\n            frame_mbs_only_flag,\n            frame_cropping_flag,\n            frame_crop_left_offset,\n            frame_crop_right_offset,\n            frame_crop_top_offset,\n            frame_crop_bottom_offset,\n        };\n    }\n    throw new Error('Invalid data');\n}\n//# sourceMappingURL=sps.js.map","import { __awaiter } from \"tslib\";\nimport { BufferedStreamEndedError, ReadableStream, TransformStream } from \"@yume-chan/adb\";\nimport Struct, { placeholder } from \"@yume-chan/struct\";\nimport { ScrcpyClientForwardConnection, ScrcpyClientReverseConnection } from \"../../connection.js\";\nimport { AndroidKeyEventAction, ScrcpyControlMessageType } from \"../../message.js\";\nimport { toScrcpyOptionValue } from \"../common.js\";\nimport { parse_sequence_parameter_set } from \"./sps.js\";\nexport var ScrcpyLogLevel;\n(function (ScrcpyLogLevel) {\n    ScrcpyLogLevel[\"Verbose\"] = \"verbose\";\n    ScrcpyLogLevel[\"Debug\"] = \"debug\";\n    ScrcpyLogLevel[\"Info\"] = \"info\";\n    ScrcpyLogLevel[\"Warn\"] = \"warn\";\n    ScrcpyLogLevel[\"Error\"] = \"error\";\n})(ScrcpyLogLevel || (ScrcpyLogLevel = {}));\nexport var ScrcpyScreenOrientation;\n(function (ScrcpyScreenOrientation) {\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Initial\"] = -2] = \"Initial\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Unlocked\"] = -1] = \"Unlocked\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Portrait\"] = 0] = \"Portrait\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"Landscape\"] = 1] = \"Landscape\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"PortraitFlipped\"] = 2] = \"PortraitFlipped\";\n    ScrcpyScreenOrientation[ScrcpyScreenOrientation[\"LandscapeFlipped\"] = 3] = \"LandscapeFlipped\";\n})(ScrcpyScreenOrientation || (ScrcpyScreenOrientation = {}));\nexport class CodecOptions {\n    constructor(value) {\n        this.value = value;\n    }\n    toOptionValue() {\n        const entries = Object.entries(this.value)\n            .filter(([key, value]) => value !== undefined);\n        if (entries.length === 0) {\n            return undefined;\n        }\n        return entries\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n    }\n}\nexport const VideoPacket = new Struct()\n    .int64('pts')\n    .uint32('size')\n    .uint8Array('data', { lengthField: 'size' });\nexport const NoPts = BigInt(-1);\nexport const ScrcpyBackOrScreenOnEvent1_16 = new Struct()\n    .uint8('type', placeholder());\nexport const ScrcpyInjectScrollControlMessage1_16 = new Struct()\n    .uint8('type', ScrcpyControlMessageType.InjectScroll)\n    .uint32('pointerX')\n    .uint32('pointerY')\n    .uint16('screenWidth')\n    .uint16('screenHeight')\n    .int32('scrollX')\n    .int32('scrollY');\nexport class ScrcpyOptions1_16 {\n    constructor(value) {\n        if (new.target === ScrcpyOptions1_16 &&\n            value.logLevel === ScrcpyLogLevel.Verbose) {\n            value.logLevel = ScrcpyLogLevel.Debug;\n        }\n        if (new.target === ScrcpyOptions1_16 &&\n            value.lockVideoOrientation === ScrcpyScreenOrientation.Initial) {\n            value.lockVideoOrientation = ScrcpyScreenOrientation.Unlocked;\n        }\n        this.value = value;\n    }\n    getArgumentOrder() {\n        return [\n            'logLevel',\n            'maxSize',\n            'bitRate',\n            'maxFps',\n            'lockVideoOrientation',\n            'tunnelForward',\n            'crop',\n            'sendFrameMeta',\n            'control',\n            'displayId',\n            'showTouches',\n            'stayAwake',\n            'codecOptions',\n            'encoderName',\n        ];\n    }\n    getDefaultValue() {\n        return {\n            logLevel: ScrcpyLogLevel.Debug,\n            maxSize: 0,\n            bitRate: 8000000,\n            maxFps: 0,\n            lockVideoOrientation: ScrcpyScreenOrientation.Unlocked,\n            tunnelForward: false,\n            crop: '-',\n            sendFrameMeta: true,\n            control: true,\n            displayId: 0,\n            showTouches: false,\n            stayAwake: false,\n            codecOptions: new CodecOptions({}),\n            encoderName: '-',\n        };\n    }\n    formatServerArguments() {\n        const defaults = this.getDefaultValue();\n        return this.getArgumentOrder()\n            .map(key => toScrcpyOptionValue(this.value[key] || defaults[key], '-'));\n    }\n    createConnection(adb) {\n        const options = {\n            // Old scrcpy connection always have control stream no matter what the option is\n            control: true,\n            sendDummyByte: true,\n            sendDeviceMeta: true,\n        };\n        if (this.value.tunnelForward) {\n            return new ScrcpyClientForwardConnection(adb, options);\n        }\n        else {\n            return new ScrcpyClientReverseConnection(adb, options);\n        }\n    }\n    getOutputEncoderNameRegex() {\n        return /\\s+scrcpy --encoder-name '(.*?)'/;\n    }\n    parseVideoStream(stream) {\n        // Optimized path for video frames only\n        if (this.value.sendFrameMeta === false) {\n            return stream\n                .release()\n                .pipeThrough(new TransformStream({\n                transform(chunk, controller) {\n                    controller.enqueue({\n                        type: 'frame',\n                        data: chunk,\n                    });\n                },\n            }));\n        }\n        let header;\n        return new ReadableStream({\n            pull(controller) {\n                return __awaiter(this, void 0, void 0, function* () {\n                    try {\n                        const { pts, data } = yield VideoPacket.deserialize(stream);\n                        if (pts === NoPts) {\n                            const sequenceParameterSet = parse_sequence_parameter_set(data.slice().buffer);\n                            const { profile_idc: profileIndex, constraint_set: constraintSet, level_idc: levelIndex, pic_width_in_mbs_minus1, pic_height_in_map_units_minus1, frame_mbs_only_flag, frame_crop_left_offset, frame_crop_right_offset, frame_crop_top_offset, frame_crop_bottom_offset, } = sequenceParameterSet;\n                            const encodedWidth = (pic_width_in_mbs_minus1 + 1) * 16;\n                            const encodedHeight = (pic_height_in_map_units_minus1 + 1) * (2 - frame_mbs_only_flag) * 16;\n                            const cropLeft = frame_crop_left_offset * 2;\n                            const cropRight = frame_crop_right_offset * 2;\n                            const cropTop = frame_crop_top_offset * 2;\n                            const cropBottom = frame_crop_bottom_offset * 2;\n                            const croppedWidth = encodedWidth - cropLeft - cropRight;\n                            const croppedHeight = encodedHeight - cropTop - cropBottom;\n                            header = data;\n                            controller.enqueue({\n                                type: 'configuration',\n                                data: {\n                                    profileIndex,\n                                    constraintSet,\n                                    levelIndex,\n                                    encodedWidth,\n                                    encodedHeight,\n                                    cropLeft,\n                                    cropRight,\n                                    cropTop,\n                                    cropBottom,\n                                    croppedWidth,\n                                    croppedHeight,\n                                }\n                            });\n                            return;\n                        }\n                        let frameData;\n                        if (header) {\n                            frameData = new Uint8Array(header.byteLength + data.byteLength);\n                            frameData.set(header);\n                            frameData.set(data, header.byteLength);\n                            header = undefined;\n                        }\n                        else {\n                            frameData = data;\n                        }\n                        controller.enqueue({\n                            type: 'frame',\n                            data: frameData,\n                        });\n                    }\n                    catch (e) {\n                        if (e instanceof BufferedStreamEndedError) {\n                            controller.close();\n                            return;\n                        }\n                        throw e;\n                    }\n                });\n            }\n        });\n    }\n    serializeBackOrScreenOnControlMessage(message) {\n        if (message.action === AndroidKeyEventAction.Down) {\n            return ScrcpyBackOrScreenOnEvent1_16.serialize(message);\n        }\n        return undefined;\n    }\n    serializeInjectScrollControlMessage(message) {\n        return ScrcpyInjectScrollControlMessage1_16.serialize(message);\n    }\n}\n//# sourceMappingURL=index.js.map","import Struct, { placeholder } from \"@yume-chan/struct\";\nimport { ScrcpyBackOrScreenOnEvent1_16, ScrcpyOptions1_16 } from \"./1_16/index.js\";\nexport const ScrcpyBackOrScreenOnEvent1_18 = new Struct()\n    .fields(ScrcpyBackOrScreenOnEvent1_16)\n    .uint8('action', placeholder());\nexport class ScrcpyOptions1_18 extends ScrcpyOptions1_16 {\n    constructor(value) {\n        super(value);\n    }\n    getArgumentOrder() {\n        return super.getArgumentOrder().concat(['powerOffOnClose']);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { powerOffOnClose: false });\n    }\n    getOutputEncoderNameRegex() {\n        return /\\s+scrcpy --encoder '(.*?)'/;\n    }\n    serializeBackOrScreenOnControlMessage(message) {\n        return ScrcpyBackOrScreenOnEvent1_18.serialize(message);\n    }\n}\n//# sourceMappingURL=1_18.js.map","// cspell: ignore autosync\nimport { ScrcpyOptions1_18 } from './1_18.js';\nimport { toScrcpyOptionValue } from \"./common.js\";\nfunction toSnakeCase(input) {\n    return input.replace(/([A-Z])/g, '_$1').toLowerCase();\n}\nexport class ScrcpyOptions1_21 extends ScrcpyOptions1_18 {\n    constructor(init) {\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { clipboardAutosync: true });\n    }\n    formatServerArguments() {\n        // 1.21 changed the format of arguments\n        // So `getArgumentOrder()` is no longer needed\n        return Object.entries(this.value)\n            .map(([key, value]) => [key, toScrcpyOptionValue(value, undefined)])\n            .filter((pair) => pair[1] !== undefined)\n            .map(([key, value]) => `${toSnakeCase(key)}=${value}`);\n    }\n}\n//# sourceMappingURL=1_21.js.map","import Struct from \"@yume-chan/struct\";\nimport { ScrcpyClientForwardConnection, ScrcpyClientReverseConnection } from \"../connection.js\";\nimport { ScrcpyInjectScrollControlMessage1_16 } from \"./1_16/index.js\";\nimport { ScrcpyOptions1_21 } from \"./1_21.js\";\nexport const ScrcpyInjectScrollControlMessage1_22 = new Struct()\n    .fields(ScrcpyInjectScrollControlMessage1_16)\n    .int32(\"buttons\");\nexport class ScrcpyOptions1_22 extends ScrcpyOptions1_21 {\n    constructor(init) {\n        if (init.rawVideoStream) {\n            // Set implied options for client-side processing\n            init.sendDeviceMeta = false;\n            init.sendFrameMeta = false;\n            init.sendDummyByte = false;\n        }\n        super(init);\n    }\n    getDefaultValue() {\n        return Object.assign(Object.assign({}, super.getDefaultValue()), { downsizeOnError: true, sendDeviceMeta: true, sendDummyByte: true, rawVideoStream: false });\n    }\n    createConnection(device) {\n        var _a, _b, _c;\n        const defaultValue = this.getDefaultValue();\n        const options = {\n            control: (_a = this.value.control) !== null && _a !== void 0 ? _a : defaultValue.control,\n            sendDummyByte: (_b = this.value.sendDummyByte) !== null && _b !== void 0 ? _b : defaultValue.sendDummyByte,\n            sendDeviceMeta: (_c = this.value.sendDeviceMeta) !== null && _c !== void 0 ? _c : defaultValue.sendDeviceMeta,\n        };\n        if (this.value.tunnelForward) {\n            return new ScrcpyClientForwardConnection(device, options);\n        }\n        else {\n            return new ScrcpyClientReverseConnection(device, options);\n        }\n    }\n    serializeInjectScrollControlMessage(message) {\n        return ScrcpyInjectScrollControlMessage1_22.serialize(message);\n    }\n}\n//# sourceMappingURL=1_22.js.map","import { __awaiter } from \"tslib\";\nimport { WrapWritableStream } from \"@yume-chan/adb\";\nimport { DEFAULT_SERVER_PATH } from \"./options/index.js\";\nexport function pushServer(device, options = {}) {\n    const { path = DEFAULT_SERVER_PATH } = options;\n    return new WrapWritableStream({\n        start() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const sync = yield device.sync();\n                return {\n                    writable: sync.write(path),\n                    state: sync,\n                };\n            });\n        },\n        close(sync) {\n            return __awaiter(this, void 0, void 0, function* () {\n                yield sync.dispose();\n            });\n        },\n    });\n}\n//# sourceMappingURL=push-server.js.map","export default '1.22';","import { CommandBar, Dialog, Dropdown, ICommandBarItemProps, Icon, IconButton, IDropdownOption, LayerHost, Position, ProgressIndicator, SpinButton, Stack, Toggle, TooltipHost } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { ADB_SYNC_MAX_PACKET_SIZE, ChunkStream, InspectStream, ReadableStream, WritableStream } from '@yume-chan/adb';\nimport { EventEmitter } from \"@yume-chan/event\";\nimport { AndroidKeyCode, AndroidKeyEventAction, AndroidMotionEventAction, CodecOptions, DEFAULT_SERVER_PATH, H264Decoder, H264DecoderConstructor, pushServer, ScrcpyClient, ScrcpyLogLevel, ScrcpyOptions1_22, ScrcpyScreenOrientation, TinyH264Decoder, VideoStreamPacket, WebCodecsDecoder } from \"@yume-chan/scrcpy\";\nimport SCRCPY_SERVER_VERSION from '@yume-chan/scrcpy/bin/version';\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { DemoModePanel, DeviceView, DeviceViewRef, ExternalLink } from \"../components\";\nimport { globalState } from \"../state\";\nimport { CommonStackTokens, formatSpeed, Icons, ProgressStream, RouteStackProps } from \"../utils\";\n\nconst SERVER_URL = new URL('@yume-chan/scrcpy/bin/scrcpy-server?url', import.meta.url).toString();\n\nclass FetchWithProgress {\n    public readonly promise: Promise<Uint8Array>;\n\n    private _downloaded = 0;\n    public get downloaded() { return this._downloaded; }\n\n    private _total = 0;\n    public get total() { return this._total; }\n\n    private progressEvent = new EventEmitter<[download: number, total: number]>();\n    public get onProgress() { return this.progressEvent.event; }\n\n    public constructor(url: string) {\n        this.promise = this.fetch(url);\n    }\n\n    private async fetch(url: string) {\n        const response = await window.fetch(url);\n        this._total = Number.parseInt(response.headers.get('Content-Length') ?? '0', 10);\n        this.progressEvent.fire([this._downloaded, this._total]);\n\n        const reader = response.body!.getReader();\n        const chunks: Uint8Array[] = [];\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                break;\n            }\n            chunks.push(result.value);\n            this._downloaded += result.value.byteLength;\n            this.progressEvent.fire([this._downloaded, this._total]);\n        }\n\n        this._total = chunks.reduce((result, item) => result + item.byteLength, 0);\n        const result = new Uint8Array(this._total);\n        let position = 0;\n        for (const chunk of chunks) {\n            result.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return result;\n    }\n}\n\nlet cachedValue: FetchWithProgress | undefined;\nfunction fetchServer(onProgress?: (e: [downloaded: number, total: number]) => void) {\n    if (!cachedValue) {\n        cachedValue = new FetchWithProgress(SERVER_URL);\n        cachedValue.promise.catch((e) => {\n            cachedValue = undefined;\n        });\n    }\n\n    if (onProgress) {\n        cachedValue.onProgress(onProgress);\n        onProgress([cachedValue.downloaded, cachedValue.total]);\n    }\n\n    return cachedValue.promise;\n}\n\nfunction clamp(value: number, min: number, max: number): number {\n    if (value < min) {\n        return min;\n    }\n\n    if (value > max) {\n        return max;\n    }\n\n    return value;\n}\n\nclass KeyRepeater {\n    key: AndroidKeyCode;\n    client: ScrcpyClient;\n\n    delay: number;\n    interval: number;\n\n    onRelease: VoidFunction | undefined;\n\n    constructor(key: AndroidKeyCode, client: ScrcpyClient, delay = 0, interval = 0) {\n        this.key = key;\n        this.client = client;\n\n        this.delay = delay;\n        this.interval = interval;\n    }\n\n    async press() {\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Down,\n            keyCode: this.key,\n            repeat: 0,\n            metaState: 0,\n        });\n\n        if (this.delay === 0) {\n            return;\n        }\n\n        const timeoutId = setTimeout(async () => {\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Down,\n                keyCode: this.key,\n                repeat: 1,\n                metaState: 0,\n            });\n\n            if (this.interval === 0) {\n                return;\n            }\n\n            const intervalId = setInterval(async () => {\n                await this.client.injectKeyCode({\n                    action: AndroidKeyEventAction.Down,\n                    keyCode: this.key,\n                    repeat: 1,\n                    metaState: 0,\n                });\n            }, this.interval);\n            this.onRelease = () => clearInterval(intervalId);\n        }, this.delay);\n        this.onRelease = () => clearTimeout(timeoutId);\n    }\n\n    async release() {\n        this.onRelease?.();\n\n        await this.client.injectKeyCode({\n            action: AndroidKeyEventAction.Up,\n            keyCode: this.key,\n            repeat: 0,\n            metaState: 0,\n        });\n    }\n}\n\nclass ScrcpyPageState {\n    running = false;\n\n    deviceView: DeviceViewRef | null = null;\n    rendererContainer: HTMLDivElement | null = null;\n\n    logVisible = false;\n    log: string[] = [];\n    settingsVisible = false;\n    demoModeVisible = false;\n    navigationBarVisible = true;\n\n    width = 0;\n    height = 0;\n\n    client: ScrcpyClient | undefined = undefined;\n\n    encoders: string[] = [];\n    selectedEncoder: string | undefined = undefined;\n\n    decoders: { name: string; factory: H264DecoderConstructor; }[] = [{\n        name: 'TinyH264 (Software)',\n        factory: TinyH264Decoder,\n    }];\n    selectedDecoder: { name: string, factory: H264DecoderConstructor; } = this.decoders[0];\n    decoder: H264Decoder | undefined = undefined;\n\n    resolution = 1080;\n    bitRate = 4_000_000;\n    tunnelForward = false;\n\n    connecting = false;\n    serverTotalSize = 0;\n    serverDownloadedSize = 0;\n    debouncedServerDownloadedSize = 0;\n    serverDownloadSpeed = 0;\n    serverUploadedSize = 0;\n    debouncedServerUploadedSize = 0;\n    serverUploadSpeed = 0;\n\n    homeKeyRepeater: KeyRepeater | undefined = undefined;\n    appSwitchKeyRepeater: KeyRepeater | undefined = undefined;\n\n    get commandBarItems() {\n        const result: ICommandBarItemProps[] = [];\n\n        if (!this.running) {\n            result.push({\n                key: 'start',\n                disabled: !globalState.device,\n                iconProps: { iconName: Icons.Play },\n                text: 'Start',\n                onClick: this.start as VoidFunction,\n            });\n        } else {\n            result.push({\n                key: 'stop',\n                iconProps: { iconName: Icons.Stop },\n                text: 'Stop',\n                onClick: this.stop as VoidFunction,\n            });\n        }\n\n        result.push({\n            key: 'fullscreen',\n            disabled: !this.running,\n            iconProps: { iconName: Icons.FullScreenMaximize },\n            text: 'Fullscreen',\n            onClick: () => { this.deviceView?.enterFullscreen(); },\n        });\n\n        return result;\n    }\n\n    get commandBarFarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: 'NavigationBar',\n                iconProps: { iconName: Icons.PanelBottom },\n                checked: this.navigationBarVisible,\n                text: 'Navigation Bar',\n                onClick: action(() => {\n                    this.navigationBarVisible = !this.navigationBarVisible;\n                }),\n            },\n            {\n                key: 'Log',\n                iconProps: { iconName: Icons.TextGrammarError },\n                checked: this.logVisible,\n                text: 'Log',\n                onClick: action(() => {\n                    this.logVisible = !this.logVisible;\n                }),\n            },\n            {\n                key: 'Settings',\n                iconProps: { iconName: Icons.Settings },\n                checked: this.settingsVisible,\n                text: 'Settings',\n                onClick: action(() => {\n                    this.settingsVisible = !this.settingsVisible;\n                }),\n            },\n            {\n                key: 'DemoMode',\n                iconProps: { iconName: Icons.Wand },\n                checked: this.demoModeVisible,\n                text: 'Demo Mode',\n                onClick: action(() => {\n                    this.demoModeVisible = !this.demoModeVisible;\n                }),\n            },\n            {\n                key: 'info',\n                iconProps: { iconName: Icons.Info },\n                iconOnly: true,\n                tooltipHostProps: {\n                    content: (\n                        <>\n                            <p>\n                                <ExternalLink href=\"https://github.com/Genymobile/scrcpy\" spaceAfter>Scrcpy</ExternalLink>\n                                developed by Genymobile can display the screen with low latency (1~2 frames) and control the device, all without root access.\n                            </p>\n                            <p>\n                                This is a TypeScript implementation of the client part. Paired with official pre-built server binary.\n                            </p>\n                        </>\n                    ),\n                    calloutProps: {\n                        calloutMaxWidth: 300,\n                    }\n                },\n            }\n        ];\n    }\n\n    constructor() {\n        makeAutoObservable(this, {\n            decoders: observable.shallow,\n            selectedDecoder: observable.ref,\n            start: false,\n            stop: action.bound,\n            handleDeviceViewRef: action.bound,\n            handleRendererContainerRef: action.bound,\n            handleBackPointerDown: false,\n            handleBackPointerUp: false,\n            handleHomePointerDown: false,\n            handleHomePointerUp: false,\n            handleAppSwitchPointerDown: false,\n            handleAppSwitchPointerUp: false,\n            handleCurrentEncoderChange: action.bound,\n            handleSelectedDecoderChange: action.bound,\n            handleResolutionChange: action.bound,\n            handleTunnelForwardChange: action.bound,\n            handleBitRateChange: action.bound,\n            calculatePointerPosition: false,\n            injectTouch: false,\n            handlePointerDown: false,\n            handlePointerMove: false,\n            handlePointerUp: false,\n            handleWheel: false,\n            handleContextMenu: false,\n            handleKeyDown: false,\n            homeKeyRepeater: false,\n            appSwitchKeyRepeater: false,\n        });\n\n        autorun(() => {\n            if (globalState.device) {\n                runInAction(() => {\n                    this.encoders = [];\n                    this.selectedEncoder = undefined;\n                });\n            } else {\n                this.stop();\n            }\n        });\n\n        autorun(() => {\n            if (this.rendererContainer && this.decoder) {\n                while (this.rendererContainer.firstChild) {\n                    this.rendererContainer.firstChild.remove();\n                }\n                this.rendererContainer.appendChild(this.decoder.renderer);\n            }\n        });\n\n        autorun(() => {\n            if (this.client) {\n                this.homeKeyRepeater = new KeyRepeater(AndroidKeyCode.Home, this.client);\n                this.appSwitchKeyRepeater = new KeyRepeater(AndroidKeyCode.AppSwitch, this.client);\n            } else {\n                this.homeKeyRepeater = undefined;\n                this.appSwitchKeyRepeater = undefined;\n            }\n        });\n\n        if (typeof window !== 'undefined' && typeof window.VideoDecoder === 'function') {\n            setTimeout(action(() => {\n                this.decoders.unshift({\n                    name: 'WebCodecs',\n                    factory: WebCodecsDecoder,\n                });\n                this.selectedDecoder = this.decoders[0];\n            }), 0);\n        }\n    }\n\n    start = async () => {\n        if (!globalState.device) {\n            return;\n        }\n\n        try {\n            if (!state.selectedDecoder) {\n                throw new Error('No available decoder');\n            }\n\n            runInAction(() => {\n                this.serverTotalSize = 0;\n                this.serverDownloadedSize = 0;\n                this.debouncedServerDownloadedSize = 0;\n                this.serverUploadedSize = 0;\n                this.debouncedServerUploadedSize = 0;\n                this.connecting = true;\n            });\n\n            let intervalId = setInterval(action(() => {\n                this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n            }), 1000);\n\n            let serverBuffer: Uint8Array;\n\n            try {\n                serverBuffer = await fetchServer(action(([downloaded, total]) => {\n                    this.serverDownloadedSize = downloaded;\n                    this.serverTotalSize = total;\n                }));\n                runInAction(() => {\n                    this.serverDownloadSpeed = this.serverDownloadedSize - this.debouncedServerDownloadedSize;\n                    this.debouncedServerDownloadedSize = this.serverDownloadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            intervalId = setInterval(action(() => {\n                this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                this.debouncedServerUploadedSize = this.serverUploadedSize;\n            }), 1000);\n\n            try {\n                await new ReadableStream<Uint8Array>({\n                    start(controller) {\n                        controller.enqueue(serverBuffer);\n                        controller.close();\n                    },\n                })\n                    .pipeThrough(new ChunkStream(ADB_SYNC_MAX_PACKET_SIZE))\n                    .pipeThrough(new ProgressStream(action((progress) => {\n                        this.serverUploadedSize = progress;\n                    })))\n                    .pipeTo(pushServer(globalState.device));\n\n                runInAction(() => {\n                    this.serverUploadSpeed = this.serverUploadedSize - this.debouncedServerUploadedSize;\n                    this.debouncedServerUploadedSize = this.serverUploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            const encoders = await ScrcpyClient.getEncoders(\n                globalState.device,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                new ScrcpyOptions1_22({\n                    logLevel: ScrcpyLogLevel.Debug,\n                    bitRate: 4_000_000,\n                    tunnelForward: this.tunnelForward,\n                    sendDeviceMeta: false,\n                    sendDummyByte: false,\n                })\n            );\n            if (encoders.length === 0) {\n                throw new Error('No available encoder found');\n            }\n\n            runInAction(() => {\n                this.encoders = encoders;\n            });\n\n            // Run scrcpy once will delete the server file\n            // Re-push it\n            await new ReadableStream<Uint8Array>({\n                start(controller) {\n                    controller.enqueue(serverBuffer);\n                    controller.close();\n                },\n            })\n                .pipeTo(pushServer(globalState.device));\n\n            const factory = this.selectedDecoder.factory;\n            const decoder = new factory();\n            runInAction(() => {\n                this.decoder = decoder;\n            });\n\n            const options = new ScrcpyOptions1_22({\n                logLevel: ScrcpyLogLevel.Debug,\n                maxSize: this.resolution,\n                bitRate: this.bitRate,\n                lockVideoOrientation: ScrcpyScreenOrientation.Unlocked,\n                tunnelForward: this.tunnelForward,\n                encoderName: this.selectedEncoder ?? encoders[0],\n                sendDeviceMeta: false,\n                sendDummyByte: false,\n                codecOptions: new CodecOptions({\n                    profile: decoder.maxProfile,\n                    level: decoder.maxLevel,\n                }),\n            });\n\n            runInAction(() => {\n                this.log = [];\n                this.log.push(`[client] Server version: ${SCRCPY_SERVER_VERSION}`);\n                this.log.push(`[client] Server arguments: ${options.formatServerArguments().join(' ')}`);\n            });\n\n            const client = await ScrcpyClient.start(\n                globalState.device,\n                DEFAULT_SERVER_PATH,\n                SCRCPY_SERVER_VERSION,\n                options\n            );\n\n            client.stdout.pipeTo(new WritableStream<string>({\n                write: action((line) => {\n                    this.log.push(line);\n                }),\n            }));\n\n            client.videoStream\n                .pipeThrough(new InspectStream(action((packet: VideoStreamPacket) => {\n                    if (packet.type === 'configuration') {\n                        const { croppedWidth, croppedHeight, } = packet.data;\n                        this.log.push(`[client] Video size changed: ${croppedWidth}x${croppedHeight}`);\n\n                        this.width = croppedWidth;\n                        this.height = croppedHeight;\n                    }\n                })))\n                .pipeTo(decoder.writable)\n                .catch(() => { });\n\n            client.exit.then(() => this.stop());\n\n            client.onClipboardChange(content => {\n                window.navigator.clipboard.writeText(content);\n            });\n\n            runInAction(() => {\n                this.client = client;\n                this.running = true;\n            });\n        } catch (e: any) {\n            globalState.showErrorDialog(e.message);\n        } finally {\n            runInAction(() => {\n                this.connecting = false;\n            });\n        }\n    };\n\n    async stop() {\n        // Request to close client first\n        await this.client?.close();\n\n        // Otherwise some packets may still arrive at decoder\n        this.decoder?.dispose();\n\n        runInAction(() => {\n            this.client = undefined;\n            this.decoder = undefined;\n            this.running = false;\n        });\n    }\n\n    handleDeviceViewRef(element: DeviceViewRef | null) {\n        this.deviceView = element;\n    }\n\n    handleRendererContainerRef(element: HTMLDivElement | null) {\n        this.rendererContainer = element;\n        this.rendererContainer?.addEventListener('wheel', this.handleWheel, { passive: false });\n    };\n\n    handleBackPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.client!.pressBackOrTurnOnScreen(AndroidKeyEventAction.Down);\n    };\n\n    handleBackPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.client!.pressBackOrTurnOnScreen(AndroidKeyEventAction.Up);\n    };\n\n    handleHomePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.homeKeyRepeater?.press();\n    };\n\n    handleHomePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.homeKeyRepeater?.release();\n    };\n\n    handleAppSwitchPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.appSwitchKeyRepeater?.press();\n    };\n\n    handleAppSwitchPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        this.appSwitchKeyRepeater?.release();\n    };\n\n    handleCurrentEncoderChange(e?: any, option?: IDropdownOption) {\n        if (!option) {\n            return;\n        }\n\n        this.selectedEncoder = option.text;\n    }\n\n    handleSelectedDecoderChange(e?: any, option?: IDropdownOption) {\n        if (!option) {\n            return;\n        }\n\n        this.selectedDecoder = option.data;\n    }\n\n    handleResolutionChange(e: any, value?: string) {\n        if (value === undefined) {\n            return;\n        }\n        this.resolution = +value;\n    }\n\n    handleBitRateChange(e: any, value?: string) {\n        if (value === undefined) {\n            return;\n        }\n        this.bitRate = +value;\n    }\n\n    handleTunnelForwardChange(event: React.MouseEvent<HTMLElement>, checked?: boolean) {\n        if (checked === undefined) {\n            return;\n        }\n\n        this.tunnelForward = checked;\n    };\n\n    calculatePointerPosition(clientX: number, clientY: number) {\n        const view = this.rendererContainer!.getBoundingClientRect();\n        const pointerViewX = clientX - view.x;\n        const pointerViewY = clientY - view.y;\n        const pointerScreenX = clamp(pointerViewX / view.width, 0, 1) * this.width;\n        const pointerScreenY = clamp(pointerViewY / view.height, 0, 1) * this.height;\n\n        return {\n            x: pointerScreenX,\n            y: pointerScreenY,\n        };\n    }\n\n    injectTouch = (\n        action: AndroidMotionEventAction,\n        e: React.PointerEvent<HTMLDivElement>\n    ) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectTouch({\n            action,\n            pointerId: e.pointerType === \"mouse\" ? BigInt(-1) : BigInt(e.pointerId),\n            pointerX: x,\n            pointerY: y,\n            pressure: e.pressure * 65535,\n            buttons: e.buttons,\n        });\n    };\n\n    handlePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.rendererContainer!.focus();\n        e.preventDefault();\n        e.currentTarget.setPointerCapture(e.pointerId);\n        this.injectTouch(AndroidMotionEventAction.Down, e);\n    };\n\n    handlePointerMove = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(\n            e.buttons === 0 ? AndroidMotionEventAction.HoverMove : AndroidMotionEventAction.Move,\n            e\n        );\n    };\n\n    handlePointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\n        this.injectTouch(AndroidMotionEventAction.Up, e);\n    };\n\n    handleWheel = (e: WheelEvent) => {\n        if (!this.client) {\n            return;\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { x, y } = this.calculatePointerPosition(e.clientX, e.clientY);\n        this.client.injectScroll({\n            pointerX: x,\n            pointerY: y,\n            scrollX: -Math.sign(e.deltaX),\n            scrollY: -Math.sign(e.deltaY),\n            buttons: 0,\n        });\n    };\n\n    handleContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    handleKeyDown = async (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (!this.client) {\n            return;\n        }\n\n        const { key, code } = e;\n        if (key.match(/^[a-z0-9]$/i)) {\n            this.client!.injectText(key);\n            return;\n        }\n\n        const keyCode = ({\n            Backspace: AndroidKeyCode.Delete,\n            Space: AndroidKeyCode.Space,\n        } as Record<string, AndroidKeyCode | undefined>)[code];\n\n        if (keyCode) {\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Down,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n            await this.client.injectKeyCode({\n                action: AndroidKeyEventAction.Up,\n                keyCode,\n                metaState: 0,\n                repeat: 0,\n            });\n        }\n    };\n}\n\nconst state = new ScrcpyPageState();\n\nconst ConnectionDialog = observer(() => {\n    const layerHostId = useId('layerHost');\n\n    const [isClient, setIsClient] = useState(false);\n\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    if (!isClient) {\n        return null;\n    }\n\n    return (\n        <>\n            <LayerHost id={layerHostId} style={{ position: 'absolute', top: 0, bottom: 0, left: 0, right: 0, margin: 0, pointerEvents: 'none' }} />\n\n            <Dialog\n                hidden={!state.connecting}\n                modalProps={{ layerProps: { hostId: layerHostId } }}\n                dialogContentProps={{ title: 'Connecting...' }}\n            >\n                <Stack tokens={CommonStackTokens}>\n                    <ProgressIndicator\n                        label=\"1. Downloading scrcpy server...\"\n                        percentComplete={state.serverTotalSize ? state.serverDownloadedSize / state.serverTotalSize : undefined}\n                        description={formatSpeed(state.debouncedServerDownloadedSize, state.serverTotalSize, state.serverDownloadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"2. Pushing scrcpy server to device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverDownloadedSize !== state.serverTotalSize}\n                        percentComplete={state.serverUploadedSize / state.serverTotalSize}\n                        description={formatSpeed(state.debouncedServerUploadedSize, state.serverTotalSize, state.serverUploadSpeed)}\n                    />\n\n                    <ProgressIndicator\n                        label=\"3. Starting scrcpy server on device...\"\n                        progressHidden={state.serverTotalSize === 0 || state.serverUploadedSize !== state.serverTotalSize}\n                    />\n                </Stack>\n            </Dialog>\n        </>\n    );\n});\n\nconst Scrcpy: NextPage = () => {\n    const bottomElement = useMemo(() =>\n        state.navigationBarVisible && (\n            <Stack verticalFill horizontalAlign=\"center\" style={{ height: '40px', background: '#999' }}>\n                <Stack verticalFill horizontal style={{ width: '100%', maxWidth: 300 }} horizontalAlign=\"space-evenly\" verticalAlign=\"center\">\n                    <IconButton\n                        iconProps={{ iconName: Icons.Play }}\n                        style={{ transform: 'rotate(180deg)', color: 'white' }}\n                        onPointerDown={state.handleBackPointerDown}\n                        onPointerUp={state.handleBackPointerUp}\n                    />\n                    <IconButton\n                        iconProps={{ iconName: Icons.Circle }}\n                        style={{ color: 'white' }}\n                        onPointerDown={state.handleHomePointerDown}\n                        onPointerUp={state.handleHomePointerUp}\n                    />\n                    <IconButton\n                        iconProps={{ iconName: Icons.Stop }}\n                        style={{ color: 'white' }}\n                        onPointerDown={state.handleAppSwitchPointerDown}\n                        onPointerUp={state.handleAppSwitchPointerUp}\n                    />\n                </Stack>\n            </Stack>\n        ),\n        [state.navigationBarVisible]\n    );\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Scrcpy - WebADB</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} farItems={state.commandBarFarItems} />\n\n            <Stack horizontal grow styles={{ root: { height: 0 } }}>\n                <DeviceView\n                    ref={state.handleDeviceViewRef}\n                    width={state.width}\n                    height={state.height}\n                    bottomElement={bottomElement}\n                >\n                    <div\n                        ref={state.handleRendererContainerRef}\n                        tabIndex={-1}\n                        onPointerDown={state.handlePointerDown}\n                        onPointerMove={state.handlePointerMove}\n                        onPointerUp={state.handlePointerUp}\n                        onPointerCancel={state.handlePointerUp}\n                        onKeyDown={state.handleKeyDown}\n                        onContextMenu={state.handleContextMenu}\n                    />\n                </DeviceView>\n\n                <div style={{\n                    padding: 12,\n                    overflow: 'hidden auto',\n                    display: state.logVisible ? 'block' : 'none',\n                    width: 500,\n                    fontFamily: 'monospace',\n                    overflowY: 'auto',\n                    whiteSpace: 'pre-wrap',\n                    wordWrap: 'break-word',\n                }}>\n                    {state.log.map((line, index) => (\n                        <div key={index}>\n                            {line}\n                        </div>\n                    ))}\n                </div>\n\n                <div style={{ padding: 12, overflow: 'hidden auto', display: state.settingsVisible ? 'block' : 'none', width: 300 }}>\n                    <div>Changes will take effect on next connection</div>\n\n                    <Dropdown\n                        label=\"Encoder\"\n                        options={state.encoders.map(item => ({ key: item, text: item }))}\n                        selectedKey={state.selectedEncoder}\n                        placeholder=\"Connect once to retrieve encoder list\"\n                        onChange={state.handleCurrentEncoderChange}\n                    />\n\n                    {state.decoders.length > 1 && (\n                        <Dropdown\n                            label=\"Decoder\"\n                            options={state.decoders.map(item => ({ key: item.name, text: item.name, data: item }))}\n                            selectedKey={state.selectedDecoder.name}\n                            onChange={state.handleSelectedDecoderChange}\n                        />\n                    )}\n\n                    <SpinButton\n                        label=\"Max Resolution (longer side, 0 = unlimited)\"\n                        labelPosition={Position.top}\n                        value={state.resolution.toString()}\n                        min={0}\n                        max={2560}\n                        step={100}\n                        onChange={state.handleResolutionChange}\n                    />\n\n                    <SpinButton\n                        label=\"Max Bit Rate\"\n                        labelPosition={Position.top}\n                        value={state.bitRate.toString()}\n                        min={100}\n                        max={10_000_000}\n                        step={100}\n                        onChange={state.handleBitRateChange}\n                    />\n\n                    <Toggle\n                        label={\n                            <>\n                                <span>Use forward connection{' '}</span>\n                                <TooltipHost content=\"Old Android devices may not support reverse connection when using ADB over WiFi\">\n                                    <Icon iconName={Icons.Info} />\n                                </TooltipHost>\n                            </>\n                        }\n                        checked={state.tunnelForward}\n                        onChange={state.handleTunnelForwardChange}\n                    />\n                </div>\n\n                <DemoModePanel\n                    style={{ display: state.demoModeVisible ? 'block' : 'none' }}\n                />\n\n                <ConnectionDialog />\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default observer(Scrcpy);\n"],"names":["window","__NEXT_P","push","ScrcpyControlMessageType","AndroidMotionEventAction","LayerHost","props","className","layerHostId","getId","_a","id","hostId","layerHostRef","rootRef","notifyLayersChanged","componentRef","current","useUnmount","css","ref","ScrcpyInjectTouchControlMessage","uint8","InjectTouch","uint64","uint32","uint16","ScrcpyInjectTextControlMessage","InjectText","string","lengthField","AndroidKeyEventAction","AndroidKeyCode","ScrcpyInjectKeyCodeControlMessage","InjectKeycode","ClipboardMessage","ScrcpyClient","constructor","adb","options","process","videoStream","controlStream","this","clipboardChangeEvent","lastTouchMessage","_adb","_stdout","stdout","pipeThrough","DecodeUtf8Stream","TransformStream","transform","chunk","controller","line","text","start","index","indexOf","substring","splitLines","enqueue","_videoStream","parseVideoStream","InspectStream","packet","type","_screenWidth","data","croppedWidth","_screenHeight","croppedHeight","buffered","AdbBufferedStream","_controlStreamWriter","writable","getWriter","read","Error","content","deserialize","fire","static","path","version","value","encoderName","control","client","encoderNameRegex","getOutputEncoderNameRegex","encoders","pipeTo","WritableStream","write","match","connection","createConnection","initialize","subprocess","spawn","formatServerArguments","protocols","AdbNoneSubprocessProtocol","result","Promise","race","exit","getStreams","e","kill","dispose","screenWidth","screenHeight","onClipboardChange","event","checkControlStream","caller","injectKeyCode","message","serialize","Object","assign","injectText","injectTouch","now","Date","Move","HoverMove","includes","action","injectScroll","buffer","serializeInjectScrollControlMessage","InjectScroll","pressBackOrTurnOnScreen","serializeBackOrScreenOnControlMessage","BackOrScreenOn","close","AndroidCodecProfile","AndroidCodecLevel","delay","time","resolve","globalThis","setTimeout","TextEncoder","TextDecoder","ScrcpyClientConnection","device","ScrcpyClientForwardConnection","connect","createSocket","connectAndRetry","i","connectVideoStream","socket","stream","sendDummyByte","sendDeviceMeta","ScrcpyClientReverseConnection","reverse","remove","queue","streams","readable","getReader","writer","address","add","onSocket","accept","worker","workerReady","pendingResolvers","streamId","pictureReadyEvent","TinyH264Wrapper","super","addDisposable","handlePictureReady","onPictureReady","renderStateId","feed","postMessage","offset","length","byteLength","cachedInitializePromise","all","then","YuvBuffer","default","YuvCanvas","TinyH264Decoder","maxProfile","Baseline","maxLevel","Level4","_frameRendered","_renderer","document","createElement","_writable","configure","_initializer","promise","slice","renderer","frameRendered","config","_yuvCanvas","attach","encodedWidth","encodedHeight","chromaWidth","chromaHeight","width","height","format","cropLeft","cropTop","cropWidth","cropHeight","displayWidth","displayHeight","wrapper","Worker","URL","addEventListener","resolver","decoder","createTinyH264Wrapper","uPlaneOffset","vPlaneOffset","array","Uint8Array","frame","lumaPlane","chromaPlane","drawFrame","undefined","toHex","toString","padStart","toUpperCase","WebCodecsDecoder","animationFrame","render","lastFrame","context","drawImage","requestAnimationFrame","getContext","VideoDecoder","output","error","decode","EncodedVideoChunk","timestamp","profileIndex","constraintSet","levelIndex","codec","map","join","optimizeForLatency","cancelAnimationFrame","DEFAULT_SERVER_PATH","toScrcpyOptionValue","empty","toOptionValue","isScrcpyOptionValue","BitReader","bytePosition","bitPosition","next","decodeExponentialGolombNumber","parse_sequence_parameter_set","nalu","writeIndex","zeroCount","inEmulation","byte","lastZeroCount","subarray","iterateNalu","reader","nal_ref_idc","profile_idc","constraint_set","constraint_set_reader","constraint_set0_flag","constraint_set1_flag","constraint_set2_flag","constraint_set3_flag","constraint_set4_flag","constraint_set5_flag","level_idc","seq_parameter_set_id","chroma_format_idc","seq_scaling_list_present_flag","pic_order_cnt_type","num_ref_frames_in_pic_order_cnt_cycle","offset_for_ref_frame","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","frame_cropping_flag","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","ScrcpyLogLevel","ScrcpyScreenOrientation","CodecOptions","entries","filter","key","VideoPacket","int64","uint8Array","NoPts","BigInt","ScrcpyBackOrScreenOnEvent1_16","ScrcpyInjectScrollControlMessage1_16","int32","ScrcpyOptions1_16","logLevel","Verbose","Debug","lockVideoOrientation","Initial","Unlocked","getArgumentOrder","getDefaultValue","maxSize","bitRate","maxFps","tunnelForward","crop","sendFrameMeta","displayId","showTouches","stayAwake","codecOptions","defaults","release","header","ReadableStream","pull","pts","sequenceParameterSet","cropRight","cropBottom","frameData","set","BufferedStreamEndedError","Down","ScrcpyBackOrScreenOnEvent1_18","fields","ScrcpyOptions1_18","concat","powerOffOnClose","ScrcpyOptions1_21","init","clipboardAutosync","pair","input","replace","toLowerCase","ScrcpyInjectScrollControlMessage1_22","ScrcpyOptions1_22","rawVideoStream","downsizeOnError","_b","_c","defaultValue","pushServer","WrapWritableStream","sync","state","cachedValue","SERVER_URL","FetchWithProgress","url","_downloaded","_total","progressEvent","EventEmitter","fetch","response","chunks","position","Number","parseInt","headers","get","body","done","reduce","item","downloaded","total","onProgress","clamp","min","max","KeyRepeater","interval","press","timeoutId","keyCode","repeat","metaState","intervalId","setInterval","onRelease","clearInterval","clearTimeout","Up","ScrcpyPageState","running","deviceView","rendererContainer","logVisible","log","settingsVisible","demoModeVisible","navigationBarVisible","selectedEncoder","decoders","name","factory","selectedDecoder","resolution","connecting","serverTotalSize","serverDownloadedSize","debouncedServerDownloadedSize","serverDownloadSpeed","serverUploadedSize","debouncedServerUploadedSize","serverUploadSpeed","homeKeyRepeater","appSwitchKeyRepeater","serverBuffer","globalState","runInAction","catch","ChunkStream","ADB_SYNC_MAX_PACKET_SIZE","ProgressStream","progress","getEncoders","SCRCPY_SERVER_VERSION","profile","level","stop","navigator","clipboard","writeText","handleBackPointerDown","button","currentTarget","setPointerCapture","pointerId","handleBackPointerUp","handleHomePointerDown","handleHomePointerUp","handleAppSwitchPointerDown","handleAppSwitchPointerUp","calculatePointerPosition","clientX","clientY","x","y","pointerType","pointerX","pointerY","pressure","buttons","handlePointerDown","focus","preventDefault","handlePointerMove","handlePointerUp","handleWheel","stopPropagation","scrollX","Math","sign","deltaX","scrollY","deltaY","handleContextMenu","handleKeyDown","code","Backspace","Delete","Space","makeAutoObservable","observable","handleDeviceViewRef","handleRendererContainerRef","handleCurrentEncoderChange","handleSelectedDecoderChange","handleResolutionChange","handleTunnelForwardChange","handleBitRateChange","autorun","firstChild","appendChild","Home","AppSwitch","unshift","element","passive","option","checked","view","getBoundingClientRect","pointerViewX","pointerViewY","commandBarItems","iconProps","iconName","Icons","onClick","disabled","enterFullscreen","commandBarFarItems","iconOnly","tooltipHostProps","p","ExternalLink","href","spaceAfter","calloutProps","calloutMaxWidth","ConnectionDialog","observer","useId","useState","isClient","setIsClient","useEffect","style","top","bottom","left","right","margin","pointerEvents","Dialog","hidden","modalProps","layerProps","dialogContentProps","title","Stack","tokens","CommonStackTokens","ProgressIndicator","label","percentComplete","description","formatSpeed","progressHidden","bottomElement","useMemo","verticalFill","horizontalAlign","background","horizontal","maxWidth","verticalAlign","IconButton","color","onPointerDown","onPointerUp","RouteStackProps","Head","CommandBar","items","farItems","grow","styles","root","DeviceView","div","tabIndex","onPointerMove","onPointerCancel","onKeyDown","onContextMenu","padding","overflow","display","fontFamily","overflowY","whiteSpace","wordWrap","Dropdown","selectedKey","placeholder","onChange","SpinButton","labelPosition","Position","step","Toggle","span","TooltipHost","Icon","DemoModePanel"],"sourceRoot":""}