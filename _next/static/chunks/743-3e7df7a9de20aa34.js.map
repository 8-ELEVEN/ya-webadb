{"version":3,"file":"static/chunks/743-3e7df7a9de20aa34.js","mappings":"gMAMaA,EAAsD,SAAAC,CAAK,EAC9D,IAAAC,EAAcD,EAAKC,SAAV,CAEVC,EAAeC,EAAAC,QAAc,CAAC,WAAM,SAAAC,EAAAC,CAAA,KAAQ,GAAjC,CAEVC,EAA6BP,EAAKQ,EAAV,CAApBC,EAAMF,KAAA,IAAAA,EAAGL,EAAWK,CAAA,CAE1BG,EAAeP,EAAAQ,MAAY,CAAa,CAC5CF,OAAMA,EACNG,QAAST,EAAAQ,MAAY,CAAwB,IAAI,EACjDE,oBAAqB,WAErB,IAgBF,OAbAV,EAAAW,mBAAyB,CAACd,EAAMe,YAAY,CAAE,WAAM,OAAAL,EAAaM,OAAO,GAExEb,EAAAc,SAAe,CAAC,WACd,GAAAC,EAAAC,EAAA,EAAkBV,EAAQC,EAAaM,OAAO,EAC9C,GAAAE,EAAAE,EAAA,EAAkBX,EAEpB,EAAG,EAAE,EAEL,GAAAY,EAAAC,CAAA,EAAW,WACT,GAAAJ,EAAAK,EAAA,EAAoBd,EAAQC,EAAaM,OAAO,EAChD,GAAAE,EAAAE,EAAA,EAAkBX,EACpB,GAEON,EAAAqB,aAAA,UAAAC,EAAAC,EAAA,KAAS1B,EAAK,CAAEC,UAAW,GAAA0B,EAAAC,CAAA,EAAI,eAAgB3B,GAAY4B,IAAKnB,EAAaM,OAAO,CAACJ,OAAO,GACrG,mBClCA,IA2GAkB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAwJAC,EAAAC,EAiCAC,EAAAC,EA6FAC,EAAAC,EAAAC,EAAAC,EAwEAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAxcAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAwBAC,GAIAC,GAIAC,GAKAC,GAKAC,GAMAC,GAMAC,GAKAC,GAKAC,GAeAC,GAoBAC,GAwJAC,GA8BAC,GAGAC,GAuEAC,GAsBAC,GAiEAC,GACAC,GACAC,GAGAC,GAEAC,GA6gBAC,GACAC,GAYAC,GAp+BAH,IACA7B,GAAAiC,OAAAC,cAAA,CACAjC,GAAAgC,OAAAE,wBAAA,CACAjC,GAAA+B,OAAAG,mBAAA,CACAjC,GAAA8B,OAAAI,qBAAA,CACAjC,GAAA6B,OAAAK,SAAA,CAAAC,cAAA,CACAlC,GAAA4B,OAAAK,SAAA,CAAAE,oBAAA,CACAlC,GAAAmC,KAAAC,GAAA,CACAnC,GAAA,CAAAoC,EAAAC,EAAAC,IAAAD,KAAAD,EAAA3C,GAAA2C,EAAAC,EAAA,CAAgFE,WAAA,GAAAC,aAAA,GAAAC,SAAA,GAAAH,MAAAA,CAAA,GAA6DF,CAAA,CAAAC,EAAA,CAAAC,CAAA,CAC7IrC,GAAA,CAAAyC,EAAAC,IAAA,CACA,QAAAC,KAAAD,IAAA,GACA9C,GAAAgD,IAAA,CAAAF,EAAAC,IACA5C,GAAA0C,EAAAE,EAAAD,CAAA,CAAAC,EAAA,EACA,GAAAhD,GACA,QAAAgD,KAAAhD,GAAA+C,GACA7C,GAAA+C,IAAA,CAAAF,EAAAC,IACA5C,GAAA0C,EAAAE,EAAAD,CAAA,CAAAC,EAAA,CACA,CACA,OAAAF,CACA,EAcAxC,GAAA,CAAAkC,EAAAU,EAAAC,IAAA,CACA,IAAAD,EAAAE,GAAA,CAAAZ,GACA,MAAAa,UAAA,UAAAF,EAAA,EAEA5C,GAAA,CAAAiC,EAAAU,EAAAI,KACAhD,GAAAkC,EAAAU,EAAA,2BACAI,EAAAA,EAAAL,IAAA,CAAAT,GAAAU,EAAAK,GAAA,CAAAf,EAAA,EAEAhC,GAAA,CAAAgC,EAAAU,EAAAR,IAAA,CACA,GAAAQ,EAAAE,GAAA,CAAAZ,GACA,MAAAa,UAAA,qDACAH,aAAAM,QAAAN,EAAAO,GAAA,CAAAjB,GAAAU,EAAAQ,GAAA,CAAAlB,EAAAE,EAAA,EAEAjC,GAAA,CAAA+B,EAAAU,EAAAR,EAAAiB,KACArD,GAAAkC,EAAAU,EAAA,0BACAS,EAAAA,EAAAV,IAAA,CAAAT,EAAAE,GAAAQ,EAAAQ,GAAA,CAAAlB,EAAAE,EAAA,CACAA,GAEAhC,GAAA,CAAA8B,EAAAU,EAAAU,KACAtD,GAAAkC,EAAAU,EAAA,yBACAU,GAKAC,CAtCA,CAAAC,EAAAC,IAAA,CACA,QAAAC,KAAAD,EACAlE,GAAAiE,EAAAE,EAAA,CAAgCT,IAAAQ,CAAA,CAAAC,EAAA,CAAArB,WAAA,IAChC,GAkCAhC,GAAA,GACA,CACAsD,QAAA,IAAAtC,EACA,GAGAf,GAAA,MACAsD,YAAAxB,CAAA,EACA,KAAAA,KAAA,CAAAA,CACA,CACA,EACA7B,GAAA,MACAqD,YAAAxB,CAAA,EACA,KAAAA,KAAA,CAAAA,CACA,CACA,EACA5B,GAAA,GACA,MACA,EACM4B,EAAA,MACN,EACMA,EAAA,SACN,EACMA,EAAAvC,GAAA,MACN,EACMuC,EAAAvC,GAAA,MACN,EAEA,CACA,CAEAY,GAAA,IACA,GAAA2B,EAAA,IACA,QAaA,CAZM,GAAAA,EAAA,MACN,QAWA,CAVM,GAAAA,EAAA,QACN,QASA,CARM,GAAAA,EAAA,UACN,QAOA,CANM,GAAAA,EAAAvC,GAAA,QACN,QAKA,CAJM,GAAAuC,EAAAvC,GAAA,QACN,QAGA,OADA,sCAAAuC,EAAA,EAMA1B,GAAA,MACAkD,aAAA,CACA1D,GAAA,KAAA/F,GACA+F,GAAA,KAAA7F,GACA6F,GAAA,KAAA3F,GACA2F,GAAA,KAAAzF,GACAyF,GAAA,KAAAvF,GACA,KAAAkJ,GAAA,GACA,KAAAC,OAAA,KAAAC,QACA,KAAAC,WAAA,KAAAD,QACA7D,GAAA,KAAAjG,EAAA,IAAAgK,WAAA,IACA/D,GAAA,KAAAhG,EAAA,IAAAgK,SAAAjE,GAAA,KAAAhG,GAAAkK,MAAA,EACA,CACAC,KAAAC,CAAA,EACA,KAAAR,GAAA,CAAAQ,CACA,CACAC,gBAAAlC,CAAA,CAAAmC,EAAA9D,GAAA2B,EAAA,EACA,IAAAyB,EAAA,EACA,OAAAU,GACA,OACAtE,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAA,IAAAzB,GACA,WACA,EACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAA,GAAAzB,GAAA,GACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GACA,WACA,EACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAA,GAAAzB,GAAA,IACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GAAA,GACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GACA,WACA,EACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAA,GAAAzB,GAAA,IACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GAAA,IACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GAAA,GACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GACA,WACA,EACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAA,EAAAzB,EAAAvC,GAAA,SACAI,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GAAA,IACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GAAA,IACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GAAA,GACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GACA,WACA,EACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAA,EAAAzB,EAAAvC,GAAA,SACAI,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,EAAAvC,GAAA,SACAI,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GAAA,IACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GAAA,IACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GAAA,GACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GACA,cAEA,kCAAAmC,EAAA,CAEA,KAAAE,KAAA,CAAAxE,GAAA,KAAAhG,GAAAyK,QAAA,GAAAb,GACA,CACAc,UAAAC,CAAA,EACA,IAAAlM,EAAAmM,EACA,GAAAD,IAAA,GAAAA,GAEA,GAAAA,aAAAX,WACA,KAAAQ,KAAA,CAAAG,QACQ,GAAAE,MAAAC,OAAA,CAAAH,GACR,QAAAI,KAAAJ,EACA,KAAAD,SAAA,CAAAK,QAKA,GAFA,KAAAlB,OAAA,CAAAV,GAAA,CAAAwB,EAAA,KAAAf,GAAA,EACAzD,GAAA,KAAA3F,EAAAC,GAAAiI,IAAA,MAAAiC,EAAAjM,EAAA,EACAmM,MAAAC,OAAA,CAAAH,EAAAA,IAAA,GACA,IAAAK,EAAA,KAAApB,GAAA,CACAqB,EAAAN,KAAAA,EAAAO,IAAA,SAAAzM,CAAAA,EAAAkM,EAAAO,IAAA,EAAAzM,EAAA,EACA,KAAAkM,EAAAO,IAAA,CACA/E,GAAA,KAAAjG,EAAAC,GAAAuI,IAAA,WAEA,KAAAyB,IAAA,MAAAP,GAAA,CAAAqB,GAEA,IAAAE,EAAA,KAAAvB,GAAA,CAGA,GAFA,KAAAG,WAAA,CAAAZ,GAAA,CAAAwB,EAAAQ,GACA,KAAAT,SAAA,CAAAC,EAAAA,IAAA,EACAA,KAAAA,EAAAO,IAAA,EACA,IAAAA,EAAA,KAAAtB,GAAA,CAAAuB,EACAC,EAAA,KAAAxB,GAAA,CACA,KAAAO,IAAA,CAAAa,GACA,KAAAX,eAAA,CAAAa,EAAAD,GACA,KAAAd,IAAA,CAAAiB,EACA,OACU,oBAAAT,EAAAA,IAAA,EACV,IAAAO,EAAA,MAAAN,CAAAA,EAAAD,EAAAO,IAAA,EAAAN,EAAArE,GAAAoE,EAAAA,IAAA,EACA,KAAAN,eAAA,CAAAa,GACA/E,GAAA,KAAA3F,EAAAC,GAAAiI,IAAA,MAAAiC,EAAAA,IAAA,CAAAO,EACA,KAAU,iBAAAP,EAAAA,IAAA,EACV,KAAAN,eAAA,CAAAM,EAAAA,IAAA,CAAAU,MAAA,EACAlF,GAAA,KAAAzF,EAAAC,GAAA+H,IAAA,MAAAiC,EAAAA,IAAA,GACUA,EAAAA,IAAA,YAAAX,YACV,KAAAK,eAAA,CAAAM,EAAAA,IAAA,CAAAW,UAAA,CAAAX,EAAAO,IAAA,EACA,KAAAV,KAAA,CAAAG,EAAAA,IAAA,GACUA,EAAAA,IAAA,YAAAtE,IACV,KAAAgE,eAAA,IACAlE,GAAA,KAAA/F,EAAAC,GAAAqI,IAAA,MAAAiC,EAAAA,IAAA,CAAAxC,KAAA,GACUwC,EAAAA,IAAA,YAAArE,KACV,KAAA+D,eAAA,IACAlE,GAAA,KAAA7F,EAAAC,GAAAmI,IAAA,MAAAiC,EAAAA,IAAA,CAAAxC,KAAA,EACA,CA5CA,CA+CA,EACAnI,EAAA,IAAA8J,QACA7J,EAAA,IAAA6J,QACA5J,EAAA,IAAA+I,QACA9I,EAAA,SAAAgI,CAAA,EACAnC,GAAA,KAAA/F,GAAAsK,QAAA,GAAApC,GACA,KAAAqC,KAAA,CAAAxE,GAAA,KAAAhG,GAAAyK,QAAA,MACA,EACArK,EAAA,IAAA6I,QACA5I,EAAA,SAAA8H,CAAA,EACAnC,GAAA,KAAA/F,GAAAsL,UAAA,GAAApD,EAAA,IACA,KAAAqC,KAAA,CAAAxE,GAAA,KAAAhG,GAAAyK,QAAA,MACA,EACAnK,EAAA,IAAA2I,QACA1I,EAAA,SAAA4H,CAAA,EACAnC,GAAA,KAAA/F,GAAAuL,UAAA,GAAArD,EAAA,IACA,KAAAqC,KAAA,CAAAxE,GAAA,KAAAhG,GACA,EACAQ,EAAA,IAAAyI,QACAxI,EAAA,SAAA0H,CAAA,CAAAmC,EAAA/D,GAAA4B,EAAA,EACA,IAAAyB,EAAA,EACA,OAAAU,GACA,OACAtE,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,EAAAvC,GAAA,QACA,QACAI,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,EAAAvC,GAAA,QACA,QACAI,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GAAA,GACA,QACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GAAA,GACA,QACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GAAA,EACA,QACAnC,GAAA,KAAA/F,GAAAsK,QAAA,CAAAX,IAAAzB,GACA,cAEA,6BAAAmC,EAAA,CAEA,KAAAE,KAAA,CAAAxE,GAAA,KAAAhG,GAAAyK,QAAA,GAAAb,GACA,EACAlJ,EAAA,IAAAuI,QACAtI,EAAA,SAAA8K,CAAA,EACA,KAAAjB,KAAA,KAAAR,WAAAyB,EAAAC,KAAA,KAAAC,GAAA,IAAAC,EAAAC,UAAA,MACA,EAEAnF,GAAA,cAAAD,GACAkD,aAAA,CACA,QACA1D,GAAA,KAAArF,EAAA,IAAAkL,YAAAlG,GAAA,QACAK,GAAA,KAAApF,EAAA,IAAAmJ,WAAAhE,GAAA,KAAApF,IACA,CACAmL,WAAAb,CAAA,EACA,IAAAc,EAAAhG,GAAA,KAAApF,GAAA0K,UAAA,CACA,KAAAU,EAAAd,GACAc,GAAA,EACA,GAAAA,IAAAhG,GAAA,KAAApF,GAAA0K,UAAA,CACA,OACA,IAAAW,EAAA,IAAAH,YAAAE,GACAE,EAAA,IAAAlC,WAAAiC,GACAC,EAAA/C,GAAA,CAAAnD,GAAA,KAAAnF,GAAA,GACAqF,GAAA,KAAAtF,EAAAqL,GACA/F,GAAA,KAAArF,EAAAqL,EACA,CACA1B,MAAAG,CAAA,EACA,KAAAoB,UAAA,MAAAnC,GAAA,CAAAe,EAAAW,UAAA,EACAtF,GAAA,KAAAnF,GAAAsI,GAAA,CAAAwB,EAAA,KAAAf,GAAA,EACA,KAAAA,GAAA,EAAAe,EAAAW,UAAA,CAEAa,UAAA,CAEA,OADA,KAAAJ,UAAA,MAAAnC,GAAA,EACA5D,GAAA,KAAApF,GAAAwL,KAAA,QAAAxC,GAAA,CACA,CACA,EACAhJ,EAAA,IAAAkJ,QACAjJ,EAAA,IAAAiJ,QACAnD,GAAAf,GAAA,MAGAgB,GAAA,cAAAH,GACAkD,YAAA0C,CAAA,EACA,QACApG,GAAA,KAAAnF,EAAA,QACAmF,GAAA,KAAAlF,EAAA,IACAmF,GAAA,KAAApF,EAAAuL,EACA,CACA7B,MAAAG,CAAA,EACA,KAAA2B,mBAAA,CAAA3B,EAAA,KAAAf,GAAA,EACA,KAAA2C,WAAA,GACA,KAAA3C,GAAA,EAAAe,EAAAW,UAAA,CAEAgB,oBAAA3B,CAAA,CAAA6B,CAAA,EACA,IAAAC,EAAAzG,GAAA,KAAAjF,GAAA2L,SAAA,IAAAd,EAAAe,KAAA,EAAAH,GAAAA,EAAAZ,EAAAe,KAAA,CAAAhG,IACA,KAAA8F,GACAA,CAAAA,EAAA,KAAAG,WAAA,CAAAJ,EAAA,EACA,IAAAK,EAAA7G,GAAA,KAAAjF,EAAA,CAAA0L,EAAA,CACAK,EAAAN,EAAAK,EAAAF,KAAA,CACAI,EAAApC,EAAAF,QAAA,GAAA1C,KAAAiF,GAAA,CAAArG,GAAAmG,EAAAnC,EAAAW,UAAA,GAUA,GATAuB,EAAAlC,IAAA,CAAAxB,GAAA,CAAA4D,EAAAD,GAKAjG,GAAAgG,EAJA,CACAF,MAAAG,EACAG,IAAAH,EAAAC,EAAAzB,UAAA,GAGA,IAAAuB,EAAAK,OAAA,IAAAP,KAAA,EAAAE,EAAAK,OAAA,IAAAD,GAAA,GAAAtG,IACAkG,CAAAA,EAAAM,WAAA,KAEAnH,GAAA,KAAAjF,GAAAsK,MAAA,CA9BA,EA8BA,CACA,QAAAvL,EAAA,EAAwBA,EAAAkG,GAAA,KAAAjF,GAAAsK,MAAA,GAA4CvL,IACpEkG,GAAA,KAAAjF,EAAA,CAAAjB,EAAA,CAAAqN,WAAA,IAEA,KAAAZ,WAAA,EACA,GACAjB,UAAA,CAAAX,EAAAW,UAAA,EACA,KAAAgB,mBAAA,CAAA3B,EAAAF,QAAA,CAAAsC,EAAAzB,UAAA,EAAAkB,EAAAO,EAAAzB,UAAA,CAEA,CACAsB,YAAAQ,CAAA,EAEA,IAAAP,EAAA,CACAF,MAFA5E,KAAAsF,KAAA,CAAAD,EAAAzG,IAAAA,GAGAgE,KAAA,IAAAX,WAAArD,IACAuG,QAAA,GACAC,YAAA,EACA,EAGA,OAFAnH,GAAA,KAAAjF,GAAAuM,IAAA,CAAAT,GACA7G,GAAA,KAAAjF,GAAAwM,IAAA,EAAAhF,EAAAC,IAAAD,EAAAoE,KAAA,CAAAnE,EAAAmE,KAAA,EACA3G,GAAA,KAAAjF,GAAAyM,OAAA,CAAAX,EACA,CACAN,YAAAkB,EAAA,IACA,QAAA3N,EAAA,EAAsBA,EAAAkG,GAAA,KAAAjF,GAAAsK,MAAA,CAAwCvL,IAAA,CAC9D,IAAA+M,EAAA7G,GAAA,KAAAjF,EAAA,CAAAjB,EAAA,CACA,KAAAqN,WAAA,EAAAM,GAEA,QAAAC,KAAAb,EAAAK,OAAA,CACAlH,GAAA,KAAAlF,GAAA0J,KAAA,EACAmD,KAAA,QACAhD,KAAAkC,EAAAlC,IAAA,CAAAF,QAAA,CAAAiD,EAAAf,KAAA,CAAAe,EAAAT,GAAA,EACAT,SAAAK,EAAAF,KAAA,CAAAe,EAAAf,KAAA,GAGA3G,GAAA,KAAAjF,GAAA6M,MAAA,CAAA9N,IAAA,GARA,CAUA,CACAqM,UAAA,CACA,KAAAI,WAAA,IACA,CACA,EACAzL,EAAA,IAAAgJ,QACA/I,EAAA,IAAA+I,QACAjD,GAAA,CAAAgG,EAAAa,IAAA,CACA,IAAAG,EAAA,EACAC,EAAAjB,EAAAK,OAAA,CAAA7B,MAAA,GACA0C,EAAA,GACA,KAAAF,GAAAC,GAAA,CACA,IAAAE,EAAAjG,KAAAsF,KAAA,CAAAQ,EAAA,CAAAC,EAAAD,EAAA,KACAhB,CAAAA,EAAAK,OAAA,CAAAc,EAAA,CAAArB,KAAA,EAAAe,EAAAf,KAAA,EACAkB,EAAAG,EAAA,EACAD,EAAAC,GAEAF,EAAAE,EAAA,CAEA,CAIA,IAHAnB,EAAAK,OAAA,CAAAU,MAAA,CAAAG,EAAA,IAAAL,GACAK,CAAAA,KAAAA,GAAAlB,EAAAK,OAAA,CAAAa,EAAA,CAAAd,GAAA,CAAAS,EAAAf,KAAA,GACAoB,IACAA,EAAAlB,EAAAK,OAAA,CAAA7B,MAAA,IAAAwB,EAAAK,OAAA,CAAAa,EAAA,CAAAd,GAAA,EAAAJ,EAAAK,OAAA,CAAAa,EAAA,GAAApB,KAAA,EACAE,EAAAK,OAAA,CAAAa,EAAA,CAAAd,GAAA,CAAAlF,KAAAkG,GAAA,CAAApB,EAAAK,OAAA,CAAAa,EAAA,CAAAd,GAAA,CAAAJ,EAAAK,OAAA,CAAAa,EAAA,GAAAd,GAAA,EACAJ,EAAAK,OAAA,CAAAU,MAAA,CAAAG,EAAA,IAEA,EAEAjH,GAAA,cAAAL,GACAkD,YAAAuE,CAAA,CAAAC,CAAA,EACA,QACAlI,GAAA,KAAAjF,EAAA,IACAiF,GAAA,KAAAhF,EAAA,QACAgF,GAAA,KAAA/E,EAAA,GACA+E,GAAA,KAAA9E,EAAA,QACA+E,GAAA,KAAAjF,EAAAiN,GACAhI,GAAA,KAAA/E,EAAAgN,EACA,CACA3D,MAAAG,CAAA,EACA3E,GAAA,KAAAhF,GAAAsM,IAAA,EACA3C,KAAAA,EAAAyB,KAAA,GACAO,MAAA,KAAA/C,GAAA,GAEA,KAAAA,GAAA,EAAAe,EAAAW,UAAA,CAEA8C,MAAAC,CAAA,EACA,GAAArI,IAAAA,GAAA,KAAAhF,GAAAqK,MAAA,CACA,OACA,IAAAiD,EAAA,GACAC,EAAA,IAAAvI,GAAA,KAAAhF,GAAA,CAAAuM,IAAA,EAAAhF,EAAAC,IAAAD,EAAAoE,KAAA,CAAAnE,EAAAmE,KAAA,EACA2B,EAAAhB,IAAA,EACAX,MAAA4B,CAAA,IAAA5B,KAAA,CACAzB,KAAAqD,CAAA,IAAA5D,IAAA,CAAAW,UAAA,GAEA,QAAAxL,EAAA,EAAsBA,EAAAyO,EAAAlD,MAAA,CAAmBvL,IAAA,CACzC,IAAA0O,EAAAF,CAAA,CAAAA,EAAAjD,MAAA,IACAqC,EAAAa,CAAA,CAAAzO,EAAA,CACA4N,EAAAf,KAAA,EAAA6B,EAAA7B,KAAA,CAAA6B,EAAAtD,IAAA,CACAsD,EAAAtD,IAAA,CAAAnD,KAAAkG,GAAA,CAAAO,EAAAtD,IAAA,CAAAwC,EAAAf,KAAA,CAAAe,EAAA/C,IAAA,CAAAW,UAAA,CAAAkD,EAAA7B,KAAA,EAEA2B,EAAAhB,IAAA,EACAX,MAAAe,EAAAf,KAAA,CACAzB,KAAAwC,EAAA/C,IAAA,CAAAW,UAAA,EAGA,CACA,QAAAuB,KAAAyB,EAAA,CAEA,QAAAZ,KADAb,EAAAlC,IAAA,KAAAX,WAAA6C,EAAA3B,IAAA,EACAlF,GAAA,KAAAhF,IACA6L,EAAAF,KAAA,EAAAe,EAAAf,KAAA,EAAAe,EAAAf,KAAA,CAAAE,EAAAF,KAAA,CAAAE,EAAA3B,IAAA,EACA2B,EAAAlC,IAAA,CAAAxB,GAAA,CAAAuE,EAAA/C,IAAA,CAAA+C,EAAAf,KAAA,CAAAE,EAAAF,KAAA,EAGA,GAAA3G,GAAA,KAAA7E,IAAA0L,EAAAF,KAAA,CAAA3G,GAAA,KAAA9E,GACA,uDAEA,IAAAuN,EAAAJ,GAAAxB,IAAAyB,CAAA,CAAAA,EAAAjD,MAAA,IACArF,GAAA,KAAA/E,GAAAyH,IAAA,MAAAmE,EAAAlC,IAAA,CAAAkC,EAAAF,KAAA,CAAA8B,GACAvI,GAAA,KAAAhF,EAAA2L,EAAAF,KAAA,CAAAE,EAAAlC,IAAA,CAAAW,UAAA,CACA,CACAtF,GAAA,KAAAhF,GAAAqK,MAAA,EACA,CACA,EACArK,EAAA,IAAA8I,QACA7I,EAAA,IAAA6I,QACA5I,EAAA,IAAA4I,QACA3I,EAAA,IAAA2I,QAOA/C,GAAAnB,GAAA,MACAoB,GAAApB,GAAA,MACAqB,GAAA,yCAGAC,GAAA,iCAEAC,GAAA,MACAwC,YAAA+E,CAAA,EAkDA,GAjDAzI,GAAA,KAAAvD,GACAuD,GAAA,KAAArD,GACAqD,GAAA,KAAAnD,GACAmD,GAAA,KAAAjD,GACAiD,GAAA,KAAA/C,GACA+C,GAAA,KAAA7C,GACA6C,GAAA,KAAA3C,IACA2C,GAAA,KAAAzC,IACAyC,GAAA,KAAAvC,IACAuC,GAAA,KAAArC,IACAqC,GAAA,KAAAnC,IACAmC,GAAA,KAAAjC,IACAiC,GAAA,KAAA/B,IACA+B,GAAA,KAAA7B,IACA6B,GAAA,KAAA3B,IACA2B,GAAA,KAAAzB,IACAyB,GAAA,KAAAvB,IACAuB,GAAA,KAAArB,IACAqB,GAAA,KAAAnB,IACAmB,GAAA,KAAAjB,IACAiB,GAAA,KAAAf,IACAe,GAAA,KAAAb,IACAa,GAAA,KAAA7E,EAAA,QACA6E,GAAA,KAAA5E,EAAA,QACA4E,GAAA,KAAA3E,EAAA,QACA2E,GAAA,KAAA1E,EAAA,QACA0E,GAAA,KAAAzE,EAAA,QACAyE,GAAA,KAAAxE,EAAA,QACAwE,GAAA,KAAAvE,EAAA,QACAuE,GAAA,KAAAtE,EAAA,QACAsE,GAAA,KAAArE,EAAA,QACAqE,GAAA,KAAApE,EAAA,QACAoE,GAAA,KAAAnE,EAAA,QACAmE,GAAA,KAAAlE,EAAA,QACAkE,GAAA,KAAAjE,EAAA,QACAiE,GAAA,KAAAhE,EAAA,GACAgE,GAAA,KAAA/D,EAAA,IACA+D,GAAA,KAAA9D,EAAA,IACA8D,GAAA,KAAA7D,EAAA,QACA6D,GAAA,KAAA5D,EAAA,QACA4D,GAAA,KAAA3D,EAAA,IACA2D,GAAA,KAAA1D,EAAA,IACA0D,GAAA,KAAAzD,EAAA,QACAyD,GAAA,KAAAxD,EAAA,IACA0D,GAAA,KAAAzD,EAAAC,GAAA+F,IAAA,MAAAgG,GACAxI,GAAA,KAAA7E,EAAAyE,GAAA,CACA6H,KAAA,OACAgB,uBAAA,QACA,EAAOD,IACPA,WAAAA,EAAAnF,MAAA,CACArD,GAAA,KAAA9E,EAAA,IAAAsF,SACQ,GAAAgI,EAAAnF,MAAA,YAAAqF,6BACR1I,GAAA,KAAA9E,EAAA,IAAAwF,GAAA8H,EAAAnF,MAAA,QACQ,sBAAAmF,EAAAnF,MAAA,CACRrD,GAAA,KAAA9E,EAAA,IAAA0F,GAAA4H,EAAAnF,MAAA,GAAAmF,EAAAG,SAAA,QAEA,+BAA2CH,EAAAnF,MAAA,CAAe,GAE1DpD,GAAA,KAAAvD,EAAAC,GAAA6F,IAAA,MACA,CACAoG,cAAAjC,CAAA,CAAAkC,CAAA,CAAAC,CAAA,EACA,IAAArE,EAAA,IAAAX,WAAA6C,EAAAvB,UAAA,EACAuB,EAAAoC,MAAA,CAAAtE,GACA,KAAAuE,gBAAA,CAAAvE,EAAAkC,EAAAc,IAAA,CAAAqB,IAAA,EAAAA,EAAAA,EAAAnC,EAAAmC,SAAA,CAAAD,EACA,CACAG,iBAAAvE,CAAA,CAAAgD,CAAA,CAAAqB,CAAA,CAAAD,CAAA,EAEA,GADA5I,GAAA,KAAAf,GAAAC,IAAAqD,IAAA,OACA,CAAA1C,GAAA,KAAA3E,GAAA8N,KAAA,CACA,6CACA,IAAAnJ,GAAA,KAAA5D,IACA8D,GAAA,KAAA9D,EAAA4M,GACAD,GACA5I,GAAA,KAAAjC,GAAAC,IAAAuE,IAAA,MAAAqG,GACA,IAAAK,EAAAjJ,GAAA,KAAA7B,GAAAC,IAAAmE,IAAA,MAAAiC,EAAAgD,EAAAqB,EAtFA,GA0FA,IAHA,UAAAhJ,GAAA,KAAA3E,GAAA8N,KAAA,CAAAE,KAAA,EACAlJ,GAAA,KAAA/B,GAAAC,IAAAqE,IAAA,MAAA0G,GACAlJ,GAAA,KAAA5D,EAAA8M,EAAAJ,SAAA,EACAhJ,GAAA,KAAA7D,GAAAkJ,MAAA,IAAArF,GAAA,KAAA7D,EAAA,IAAA6M,SAAA,EAAAI,EAAAJ,SAAA,GACA,IAAAM,EAAAtJ,GAAA,KAAA7D,GAAAoN,KAAA,GACApJ,GAAA,KAAAzB,GAAAC,IAAA+D,IAAA,MAAA4G,EACA,CACA,CAAAtJ,GAAA,KAAA3E,GAAAmO,KAAA,EAAAJ,EAAAJ,SAAA,EAAAhJ,GAAA,KAAAzD,GACA4D,GAAA,KAAAzB,GAAAC,IAAA+D,IAAA,MAAA0G,GAEApJ,GAAA,KAAA9D,GAAAoL,IAAA,CAAA8B,GAEAjJ,GAAA,KAAArC,GAAAC,IAAA2E,IAAA,MACA,CACA+G,cAAA5C,CAAA,CAAAkC,CAAA,CAAAC,CAAA,EACA,IAAArE,EAAA,IAAAX,WAAA6C,EAAAvB,UAAA,EACAuB,EAAAoC,MAAA,CAAAtE,GACA,KAAA+E,gBAAA,CAAA/E,EAAAkC,EAAAc,IAAA,CAAAqB,IAAA,EAAAA,EAAAA,EAAAnC,EAAAmC,SAAA,CAAAD,EACA,CACAW,iBAAA/E,CAAA,CAAAgD,CAAA,CAAAqB,CAAA,CAAAD,CAAA,EAEA,GADA5I,GAAA,KAAAf,GAAAC,IAAAqD,IAAA,OACA,CAAA1C,GAAA,KAAA3E,GAAAmO,KAAA,CACA,6CACA,IAAAxJ,GAAA,KAAA3D,IACA6D,GAAA,KAAA7D,EAAA2M,GACAD,CAAAA,IAAA,EAAAA,EAAA,OAAAA,EAAAY,aAAA,IACA3J,GAAA,KAAA3E,GAAAwN,SAAA,CACA3I,GAAA,KAAArE,EAAAsE,GAAA,KAAAvB,GAAAC,IAAA6D,IAAA,MAAAqG,EAAAY,aAAA,CAAAC,WAAA,GAEAzJ,GAAA,KAAArB,GAAAC,IAAA2D,IAAA,MAAA1C,GAAA,KAAAnE,GAAAkN,EAAAY,aAAA,CAAAC,WAAA,GAGA,IAAAR,EAAAjJ,GAAA,KAAA7B,GAAAC,IAAAmE,IAAA,MAAAiC,EAAAgD,EAAAqB,EAtHA,GAwHA,IADA9I,GAAA,KAAA3D,EAAA6M,EAAAJ,SAAA,EACAhJ,GAAA,KAAA9D,GAAAmJ,MAAA,IAAArF,GAAA,KAAA9D,EAAA,IAAA8M,SAAA,EAAAI,EAAAJ,SAAA,GACA,IAAAa,EAAA7J,GAAA,KAAA9D,GAAAqN,KAAA,GACApJ,GAAA,KAAAzB,GAAAC,IAAA+D,IAAA,MAAAmH,EACA,CACA,CAAA7J,GAAA,KAAA3E,GAAA8N,KAAA,EAAAC,EAAAJ,SAAA,EAAAhJ,GAAA,KAAA1D,GACA6D,GAAA,KAAAzB,GAAAC,IAAA+D,IAAA,MAAA0G,GAEApJ,GAAA,KAAA7D,GAAAmL,IAAA,CAAA8B,GAEAjJ,GAAA,KAAArC,GAAAC,IAAA2E,IAAA,MACA,CACAyD,UAAA,CACA,KAAAnG,GAAA,KAAA9D,GAAAmJ,MAAA,IACAlF,GAAA,KAAAzB,GAAAC,IAAA+D,IAAA,MAAA1C,GAAA,KAAA9D,GAAAqN,KAAA,IACA,KAAAvJ,GAAA,KAAA7D,GAAAkJ,MAAA,IACAlF,GAAA,KAAAzB,GAAAC,IAAA+D,IAAA,MAAA1C,GAAA,KAAA7D,GAAAoN,KAAA,IAKA,GAJAvJ,GAAA,KAAA3E,GAAAwN,SAAA,EACA1I,GAAA,KAAAjB,GAAAC,IAAAuD,IAAA,OAEA1C,GAAA,KAAA5E,GAAAsJ,SAAA,CAAA1E,GAAA,KAAAlE,IACA,CAAAkE,GAAA,KAAA3E,GAAAwN,SAAA,EACA,IAAAzD,EAAApF,GAAA,KAAA5E,GAAAwI,GAAA,CACAkG,EAAA9J,GAAA,KAAA5E,GAAAwI,GAAA,CAAA5D,GAAA,KAAAhC,GAAAC,IACA+B,GAAA,KAAA5E,GAAA+I,IAAA,CAAAnE,GAAA,KAAA5E,GAAAyI,OAAA,CAAAb,GAAA,CAAAhD,GAAA,KAAA1E,IAAA,GACA0E,GAAA,KAAA5E,GAAAiJ,eAAA,CAAAyF,EA1IA,GA2IA9J,GAAA,KAAAtE,GAAAiJ,IAAA,KAAArE,GAAAN,GAAA,KAAA/D,IACA+D,GAAA,KAAA5E,GAAA+I,IAAA,CAAAnE,GAAA,KAAA5E,GAAAyI,OAAA,CAAAb,GAAA,CAAAhD,GAAA,KAAAtE,KACAsE,GAAA,KAAA5E,GAAAsJ,SAAA,CAAA1E,GAAA,KAAAtE,IACAsE,GAAA,KAAAxE,GAAAmJ,IAAA,IAAAA,IAAA,IAAAA,IAAA,CAAA3E,GAAA,KAAA5E,GAAAyI,OAAA,CAAAb,GAAA,CAAAhD,GAAA,KAAAlE,IAAAkE,GAAA,KAAAhC,GAAAC,IACA+B,GAAA,KAAAxE,GAAAmJ,IAAA,IAAAA,IAAA,IAAAA,IAAA,CAAA3E,GAAA,KAAA5E,GAAAyI,OAAA,CAAAb,GAAA,CAAAhD,GAAA,KAAAzE,IAAAyE,GAAA,KAAAhC,GAAAC,IACA+B,GAAA,KAAAxE,GAAAmJ,IAAA,IAAAA,IAAA,IAAAA,IAAA,CAAA3E,GAAA,KAAA5E,GAAAyI,OAAA,CAAAb,GAAA,CAAAhD,GAAA,KAAAvE,IAAAuE,GAAA,KAAAhC,GAAAC,IACA+B,GAAA,KAAA5E,GAAA+I,IAAA,CAAAnE,GAAA,KAAA5E,GAAAyI,OAAA,CAAAb,GAAA,CAAAhD,GAAA,KAAAxE,KACAwE,GAAA,KAAA5E,GAAAsJ,SAAA,CAAA1E,GAAA,KAAAxE,IACAwE,GAAA,KAAA5E,GAAA+I,IAAA,CAAAiB,EACA,OAEA,CADAlF,GAAA,KAAAzD,EAAA,IACAuD,GAAA,KAAA5E,cAAAsF,IACAV,GAAA,KAAA5E,GAAA+K,QAAA,IACQnG,GAAA,KAAA5E,cAAAwF,GACRZ,GAAA,KAAA5E,GAAA+K,QAAA,GACQnG,GAAA,KAAA5E,cAAA0F,IACRd,GAAA,KAAA5E,GAAAgN,KAAA,KAEA,KADA,CAGA,EACAhN,EAAA,IAAA0I,QACAzI,EAAA,IAAAyI,QACAxI,EAAA,IAAAwI,QACAvI,EAAA,IAAAuI,QACAtI,EAAA,IAAAsI,QACArI,EAAA,IAAAqI,QACApI,EAAA,IAAAoI,QACAnI,EAAA,IAAAmI,QACAlI,EAAA,IAAAkI,QACAjI,EAAA,IAAAiI,QACAhI,EAAA,IAAAgI,QACA/H,EAAA,IAAA+H,QACA9H,EAAA,IAAA8H,QACA7H,EAAA,IAAA6H,QACA5H,EAAA,IAAA4H,QACA3H,EAAA,IAAA2H,QACA1H,EAAA,IAAA0H,QACAzH,EAAA,IAAAyH,QACAxH,EAAA,IAAAwH,QACAvH,EAAA,IAAAuH,QACAtH,EAAA,IAAAsH,QACArH,EAAA,IAAAqH,QACApH,EAAA,IAAAuG,QACAtG,EAAA,SAAA+L,CAAA,EACA,GAAAA,EAAAf,IAAA,EAAAe,SAAAA,EAAAf,IAAA,EAAAe,aAAAA,EAAAf,IAAA,CACA,6BAAuCe,EAAAf,IAAA,CAAa,GAEpD,GAAAe,EAAAC,sBAAA,GAAAzH,GAAA6I,QAAA,CAAArB,EAAAC,sBAAA,EACA,iDAA2DD,EAAAC,sBAAA,CAA+B,IAG1F/L,EAAA,IAAAqG,QACApG,EAAA,WACAsD,GAAA,KAAArD,EAAAC,GAAA2F,IAAA,OACA1C,GAAA,KAAA3E,GAAAwN,SAAA,EACA1I,GAAA,KAAA/C,EAAAC,IAAAqF,IAAA,OAEAvC,GAAA,KAAA7C,GAAAC,IAAAmF,IAAA,OACAvC,GAAA,KAAAnD,EAAAC,GAAAyF,IAAA,OACAvC,GAAA,KAAAjD,EAAAC,GAAAuF,IAAA,OACA1C,GAAA,KAAA3E,GAAAwN,SAAA,GACA1I,GAAA,KAAA3C,GAAAC,IAAAiF,IAAA,OACAvC,GAAA,KAAAzC,GAAAC,IAAA+E,IAAA,QAGAvC,GAAA,KAAAvC,GAAAC,IAAA6E,IAAA,OACAvC,GAAA,KAAArC,GAAAC,IAAA2E,IAAA,MACA,EACA5F,EAAA,IAAAmG,QACAlG,EAAA,WACA,IAAAtE,EACA,IAAAuR,EAAA,CAAuBtR,GAAA,UAAAiM,KAAA,CACvB,CAAQjM,GAAA,MAAAiM,KAAA,GACR,CAAQjM,GAAA,MAAAiM,KAAA,GACR,CAAQjM,GAAA,MAAAiM,KAAA,GACR,CAAQjM,GAAA,MAAAiM,KAAA,GACR,CAAQjM,GAAA,MAAAiM,KAAA,MAAAlM,CAAAA,EAAAuH,GAAA,KAAA3E,GAAAsM,IAAA,EAAAlP,EAAA,QACR,CAAQC,GAAA,MAAAiM,KAAA,GACR,CAAQjM,GAAA,MAAAiM,KAAA,GACR,EACA3E,GAAA,KAAA5E,GAAAsJ,SAAA,CAAAsF,EACA,EACAhN,EAAA,IAAAiG,QACAhG,EAAA,WACAiD,GAAA,KAAAtE,EAAA,CAA6ClD,GAAA,IAAAwM,KAAA,EAAAP,KAAA,IAAAX,WAAAhD,GAAA,GAC7Cd,GAAA,KAAArE,EAAA,CAA6CnD,GAAA,IAAAwM,KAAA,EAAAP,KAAA,IAAAX,WAAAhD,GAAA,EAC7C,EACA9D,EAAA,IAAA+F,QACA9F,EAAA,WACA+C,GAAA,KAAAvE,EAAA,CAAyCjD,GAAA,MAAAiM,KAAA,CACzC,CAAQjM,GAAA,MAAAiM,KAAA,GACR,CAAQjM,GAAA,MAAAiM,KAAA,GACR,CAAQjM,GAAA,MAAAiM,KAAA,GACR,CAAQjM,GAAA,MAAAiM,KAAA,GACR,EACA,EACAvH,EAAA,IAAA6F,QACA5F,GAAA,WACA,IAAA4M,EAAA,IAAAjG,WAAA,iBACAkG,EAAA,IAAAlG,WAAA,iBACAmG,EAAA,IAAAnG,WAAA,iBAeA9D,GAAA,KAAA1E,EAdA,CAAqB9C,GAAA,UAAAiM,KAAA,CACrB,CAAQjM,GAAA,MAAAiM,KAAA,CACR,CAAUjM,GAAA,MAAAiM,KAAAsF,CAAA,EACV,CAAUvR,GAAA,MAAAwM,KAAA,EAAAP,KAAA,GACV,EACA,CAAQjM,GAAA,MAAAiM,KAAA,CACR,CAAUjM,GAAA,MAAAiM,KAAAuF,CAAA,EACV,CAAUxR,GAAA,MAAAwM,KAAA,EAAAP,KAAA,GACV,EACA,CAAQjM,GAAA,MAAAiM,KAAA,CACR,CAAUjM,GAAA,MAAAiM,KAAAwF,CAAA,EACV,CAAUzR,GAAA,MAAAwM,KAAA,EAAAP,KAAA,GACV,EACA,EAEA,EACArH,GAAA,IAAA2F,QACA1F,GAAA,WACA,IAAA6M,EAAA,CAA4B1R,GAAA,MAAAiM,KAAA,IAAArE,GAAA,IAC5BJ,GAAA,KAAAxE,EAAA0O,GAOAlK,GAAA,KAAA3E,EANA,CAAwB7C,GAAA,UAAAiM,KAAA,CACxB,CAAQjM,GAAA,QAAAiM,KAAA,KACR,CAAQjM,GAAA,MAAAiM,KAAA1D,EAAA,EACR,CAAQvI,GAAA,MAAAiM,KAAA1D,EAAA,EACR,QAAA5F,GAAAwN,SAAA,MAAAuB,CAAA,CACA,EAEA,EACA5M,GAAA,IAAAyF,QACAxF,GAAA,WACA,IAAA4M,EAAA,CAA0B3R,GAAA,UAAAiM,KAAA,IAC1BzE,GAAA,KAAAzE,EAAA4O,GACArK,GAAA,KAAA3E,GAAA8N,KAAA,EACAkB,EAAA1F,IAAA,CAAA2C,IAAA,EAAgC5O,GAAA,IAAAiM,KAAA,CAChC,CAAUjM,GAAA,IAAAiM,KA1RV,CA0RU,EACV,CAAUjM,GAAA,MAAAiM,KA3RV,CA2RU,EACV,CAAUjM,GAAA,IAAAiM,KA1RV,CA0RU,EACV,CAAUjM,GAAA,IAAAiM,KAAA3E,GAAA,KAAA3E,GAAA8N,KAAA,CAAAE,KAAA,EACVrJ,GAAA,KAAApE,GACAoE,GAAA,KAAA3E,GAAA8N,KAAA,CAAAmB,SAAA,EAAyD5R,GAAA,QAAAiM,KAAA,IAAA3E,GAAA,KAAA3E,GAAA8N,KAAA,CAAAmB,SAAA,EAA8F,KACvJ,CAAU5R,GAAA,IAAAiM,KAAA,CACV,CAAYjM,GAAA,IAAAiM,KAAA3E,GAAA,KAAA3E,GAAA8N,KAAA,CAAA7E,KAAA,EACZ,CAAY5L,GAAA,IAAAiM,KAAA3E,GAAA,KAAA3E,GAAA8N,KAAA,CAAAoB,MAAA,EACZvK,GAAA,KAAA3E,GAAA8N,KAAA,CAAAqB,KAAA,EAAuD9R,GAAA,MAAAiM,KAAA,GAAqC,KAC5F3E,GAAA,KAAArE,GACA,EACA,GAEAqE,GAAA,KAAA3E,GAAAmO,KAAA,GACAtJ,GAAA,KAAArE,EAAAmE,GAAA,KAAA3E,GAAAwN,SAAA,CAAA7I,GAAA,KAAAnE,IAAA,MAAyInD,GAAA,IAAAwM,KAAA,EAAAP,KAAA,IAAAX,WAAAhD,GAAA,CAA2E,EACpNqJ,EAAA1F,IAAA,CAAA2C,IAAA,EAAgC5O,GAAA,IAAAiM,KAAA,CAChC,CAAUjM,GAAA,IAAAiM,KA1SV,CA0SU,EACV,CAAUjM,GAAA,MAAAiM,KA3SV,CA2SU,EACV,CAAUjM,GAAA,IAAAiM,KA1SV,CA0SU,EACV,CAAUjM,GAAA,IAAAiM,KAAA3E,GAAA,KAAA3E,GAAAmO,KAAA,CAAAH,KAAA,EACVrJ,GAAA,KAAAnE,GACA,CAAUnD,GAAA,IAAAiM,KAAA,CACV,CAAYjM,GAAA,IAAAiM,KAAA,IAAAtE,GAAAL,GAAA,KAAA3E,GAAAmO,KAAA,CAAAiB,UAAA,GACZ,CAAY/R,GAAA,IAAAiM,KAAA3E,GAAA,KAAA3E,GAAAmO,KAAA,CAAAkB,gBAAA,EACZ1K,GAAA,KAAA3E,GAAAmO,KAAA,CAAAmB,QAAA,EAA0DjS,GAAA,MAAAiM,KAAA3E,GAAA,KAAA3E,GAAAmO,KAAA,CAAAmB,QAAA,EAA8E,KACxI,EACA,GAEA,EACAjN,GAAA,IAAAuF,QACAtF,GAAA,WACA,IAAAiN,EAAA,CACAlS,GAAA,UACAwM,KAAAlF,GAAA,KAAA3E,GAAAwN,SAAA,IArTA,CAqTA,CACAlE,KAAA,CACA,QAAAtJ,GAAAwN,SAAA,MAAA7I,GAAA,KAAAxE,EAAA,CACAwE,GAAA,KAAAzE,GACAyE,GAAA,KAAAvE,GACA,EAEAyE,GAAA,KAAA5E,EAAAsP,GACA5K,GAAA,KAAA5E,GAAAsJ,SAAA,CAAAkG,EACA,EACAhN,GAAA,IAAAqF,QACApF,GAAA,WACAqC,GAAA,KAAApE,EAAA,CAAgCpD,GAAA,UAAAiM,KAAA,IAChC,EACA7G,GAAA,IAAAmF,QACAlF,GAAA,WACAiC,GAAA,KAAA5E,cAAA0F,IACAd,GAAA,KAAA5E,GAAAgN,KAAA,IAEA,EACApK,GAAA,IAAAiF,QACAhF,GAAA,WACA,OAAA+B,GAAA,KAAA5E,GAAA2I,WAAA,CAAAf,GAAA,CAAAhD,GAAA,KAAA1E,GACA,EACA4C,GAAA,IAAA+E,QACA9E,GAAA,SAAA4K,CAAA,EACA,GAAAA,EAAAY,aAAA,EAEA,GAAAZ,EAAAY,aAAA,CAAAkB,UAAA,EACA,IAAAA,EAAA9B,EAAAY,aAAA,CAAAkB,UAAA,CAqBA,GApBA3K,GAAA,KAAA1D,EAAAqO,GACA7K,GAAA,KAAArE,GAAAgJ,IAAA,EACA,CAAUjM,GAAA,MAAAiM,KAAA,CACV,MACA,QACA,UACA,WACA,CAAS,CAAAkG,EAAAC,MAAA,GACT,CAAUpS,GAAA,MAAAiM,KAAA,CACV,QACA,YACA,iBACA,CAAS,CAAAkG,EAAAE,QAAA,GACT,CAAUrS,GAAA,MAAAiM,KAAA,CACV,QACA,UACA,WACA,CAAS,CAAAkG,EAAAG,SAAA,GACT,CAAUtS,GAAA,MAAAiM,KAAA,MAAAsG,OAAAJ,EAAAK,SAAA,IACV,CACA,CAAAlL,GAAA,KAAA3E,GAAAwN,SAAA,EACA,IAAAzD,EAAApF,GAAA,KAAA5E,GAAAwI,GAAA,CACA5D,GAAA,KAAA5E,GAAA+I,IAAA,CAAAnE,GAAA,KAAA5E,GAAAyI,OAAA,CAAAb,GAAA,CAAAhD,GAAA,KAAArE,KACAqE,GAAA,KAAA5E,GAAAsJ,SAAA,CAAA1E,GAAA,KAAArE,IACAqE,GAAA,KAAA5E,GAAA+I,IAAA,CAAAiB,EACA,EACA,EACAuE,aAAA,CAAAC,WAAA,GACA5J,GAAA,KAAA3E,GAAAwN,SAAA,CACA3I,GAAA,KAAAtE,EAAAuE,GAAA,KAAAvB,GAAAC,IAAA6D,IAAA,MAAAqG,EAAAY,aAAA,CAAAC,WAAA,GAEAzJ,GAAA,KAAArB,GAAAC,IAAA2D,IAAA,MAAA1C,GAAA,KAAApE,GAAAmN,EAAAY,aAAA,CAAAC,WAAA,GAlCA,EAsCAxL,GAAA,IAAA6E,QACA5E,GAAA,SAAAwI,CAAA,EACA,WAAAA,EAAAc,IAAA,EAEA,CAAA3H,GAAA,KAAAxD,GADA,OAGA,IAAA1C,EAAA,EACA,GAAAuH,IAAAA,GAAAwF,EAAAlC,IAAA,MACA,OACA7K,GAAA,EACA,IAAAqR,EAAA,CAAA9J,GAAAwF,EAAAlC,IAAA,CAAA7K,EAAA,EAAAA,EAAA,OAAAuH,GAAAwF,EAAAlC,IAAA,CAAA7K,EAAA,EAAAA,EAAA,GACAA,GAAA,EACA,IAAAqR,GACArR,IACA,IAAAsR,EAAA/J,GAAAwF,EAAAlC,IAAA,CAAA7K,EAAA,EAAAA,EAAA,GAEA,GADAA,IACAsR,EACA,OACA,IAAAC,EAAAhK,GAAAwF,EAAAlC,IAAA,CAAA7K,EAAA,EAAAA,EAAA,GAEA,GADAA,IACAuR,IAAAA,EACA,OACAvR,GAAA,EACA,IAAAwR,EAAAjK,GAAAwF,EAAAlC,IAAA,CAAA7K,EAAA,EAAAA,EAAA,IAEA,GADAA,GAAA,GACAwR,UAAAA,EACA,OACAH,GAAA,GACArR,IACA,IAAAyR,EAAA,CACA,MACA,QACA,UACA,WACA,CAAK,CAAAvL,GAAA,KAAAxD,GAAAsO,MAAA,EACLxJ,GAAAuF,EAAAlC,IAAA,CAAA7K,EAAA,EAAAA,EAAA,EAAAyR,EACA,EACAjN,GAAA,IAAA2E,QACA1E,GAAA,SAAAoG,CAAA,CAAAgD,CAAA,CAAAqB,CAAA,CAAAwC,CAAA,EAQA,MANA,CACA7G,KAAAA,EACAgD,KAAAA,EACAqB,UAJA7I,GAAA,KAAA3B,GAAAC,IAAAiE,IAAA,MAAAsG,EAAAwC,GAKAA,YAAAA,CACA,CAEA,EACAhN,GAAA,IAAAyE,QACAxE,GAAA,SAAAuK,CAAA,CAAAwC,CAAA,EACA,IAAAC,EAAAD,IAAAA,EAAAxL,GAAA,KAAA5D,GAAA4D,GAAA,KAAA3D,EAAA,CACAqP,EAAAF,IAAAA,EAAAxL,GAAA,KAAA1D,GAAA0D,GAAA,KAAAzD,EAAA,CACA,GAAAyD,WAAAA,GAAA,KAAA3E,GAAAsN,sBAAA,EAAA+C,KAAAA,GAAA1C,IAAAA,EACA,YACA,6EAAqFA,EAAU;;;;AAI/F,EACA,CAIA,GAHM,WAAAhJ,GAAA,KAAA3E,GAAAsN,sBAAA,EACNK,CAAAA,GAAAyC,CAAA,EAEAzC,EAAA0C,EACA,YACA,0DAAkEA,EAAA,IAAe,EAAK1C,EAAU,IAChG,CAEA,OAAAA,CACA,EACAtK,GAAA,IAAAuE,QACAtE,GAAA,SAAAkI,CAAA,EACA7G,GAAA,KAAA3E,GAAAwN,SAAA,GAAA7I,GAAA,KAAAvE,KACA0E,GAAA,KAAA3C,GAAAC,IAAAiF,IAAA,OACAvC,GAAA,KAAAzC,GAAAC,IAAA+E,IAAA,QAEA,IAAAiJ,EAAA5J,KAAAsF,KAAA,CAAAR,EAAAmC,SAAA,MAEA,GADAnC,QAAAA,EAAAc,IAAA,EAAAgE,EAAA3L,GAAA,KAAAhE,IAAA+E,GAEA,YACA,mEAA2EA,GAAA,0GAAqB,EAA2GA,GAAA,cAAqB,EAChO,CAEA,IAAA6K,EAAA,CAAA/E,IAAAA,EAAA2E,WAAA,GAAAxL,GAAA,KAAA3E,GAAA8N,KAAA,GAAAtC,QAAAA,EAAAc,IAAA,EAAAgE,EAAA3L,GAAA,KAAAhE,IAAA,IACA,EAAAgE,GAAA,KAAAjE,IAAA6P,CAAA,GACAzL,GAAA,KAAAnB,GAAAC,IAAAyD,IAAA,MAAAiJ,GAEA,IAAAE,EAAA,IAAA7H,WAAA,GACA8H,EAAA,IAAA7H,SAAA4H,EAAA3H,MAAA,EACA4H,EAAAvH,QAAA,OAAAsC,EAAA2E,WAAA,EACAM,EAAAC,SAAA,GAAAJ,EAAA3L,GAAA,KAAAhE,GAAA,IACA8P,EAAAvH,QAAA,GAAA0G,OAAApE,QAAAA,EAAAc,IAAA,MACA,IAAAqE,EAAA,CAAwBtT,GAAA,IAAAiM,KAAA,CACxBkH,EACAhF,EAAAlC,IAAA,CACA,EACA3E,GAAA,KAAA5E,GAAAsJ,SAAA,CAAAsH,GACA9L,GAAA,KAAAjE,EAAA8F,KAAAkG,GAAA,CAAAjI,GAAA,KAAA/D,GAAA0P,GACA,EACA/M,GAAA,IAAAqE,QACApE,GAAA,SAAA8F,CAAA,EACA,OAAajM,GAAA,MAAAwM,KAAA,EAAAP,KAAA,IAAAX,WAAAW,EAAA,CACb,EACA7F,GAAA,IAAAmE,QACAlE,GAAA,SAAAkN,CAAA,CAAAtH,CAAA,EACA,IAAAS,EAAApF,GAAA,KAAA5E,GAAAwI,GAAA,CACA5D,GAAA,KAAA5E,GAAA+I,IAAA,CAAAnE,GAAA,KAAA5E,GAAAyI,OAAA,CAAAb,GAAA,CAAAiJ,IACAA,EAAA,CACA9L,GAAA,KAAAvB,GAAAC,IAAA6D,IAAA,MAAAiC,GACA,CAAQjM,GAAA,IAAAwM,KAAA,EAAAP,KAAA,IAAAX,WAAAhD,GAAA,IAAA2D,EAAAW,UAAA,GACR,CACAtF,GAAA,KAAA5E,GAAAsJ,SAAA,CAAAuH,GACAjM,GAAA,KAAA5E,GAAA+I,IAAA,CAAAiB,EACA,EACApG,GAAA,IAAAiE,QACAhE,GAAA,SAAA+J,CAAA,EACAhJ,GAAA,KAAAjE,IAAA,CAAAiE,GAAA,KAAA3E,GAAAwN,SAAA,EACA1I,GAAA,KAAAjB,GAAAC,IAAAuD,IAAA,OAEAxC,GAAA,KAAAnE,EAAA,CACArD,GAAA,UACAwM,KAAAlF,GAAA,KAAA3E,GAAAwN,SAAA,IA9eA,CA8eA,CACAlE,KAAA,CACA,CAAUjM,GAAA,IAAAiM,KAAAqE,CAAA,EACV,GAEAhJ,GAAA,KAAA5E,GAAAsJ,SAAA,CAAA1E,GAAA,KAAAjE,IACAmE,GAAA,KAAAlE,EAAAgN,GACA,IAAAkD,EAAAlM,GAAA,KAAA5E,GAAAyI,OAAA,CAAAb,GAAA,CAAAhD,GAAA,KAAAjE,IAAAiE,GAAA,KAAAhC,GAAAC,IACA+B,GAAA,KAAAlE,GAAA6I,IAAA,CAAA2C,IAAA,EAA0C5O,GAAA,IAAAiM,KAAA,CAC1C,CAAQjM,GAAA,IAAAiM,KAAAqE,CAAA,EACRhJ,GAAA,KAAA3E,GAAA8N,KAAA,EAA6CzQ,GAAA,IAAAiM,KAAA,CAC7C,CAAUjM,GAAA,IAAAiM,KAjgBV,CAigBU,EACV,CAAUjM,GAAA,IAAAiM,KAAAuH,CAAA,EACV,EAAU,KACVlM,GAAA,KAAA3E,GAAAmO,KAAA,EAA6C9Q,GAAA,IAAAiM,KAAA,CAC7C,CAAUjM,GAAA,IAAAiM,KApgBV,CAogBU,EACV,CAAUjM,GAAA,IAAAiM,KAAAuH,CAAA,EACV,EAAU,KACV,EACA,EACAhN,GAAA,IAAA+D,QACA9D,GAAA,WACA,IAAAgN,EAAAnM,GAAA,KAAA5E,GAAAwI,GAAA,CAAA5D,GAAA,KAAA5E,GAAA2I,WAAA,CAAAf,GAAA,CAAAhD,GAAA,KAAAjE,IACAqJ,EAAApF,GAAA,KAAA5E,GAAAwI,GAAA,CACA5D,GAAA,KAAA5E,GAAA+I,IAAA,CAAAnE,GAAA,KAAA5E,GAAAyI,OAAA,CAAAb,GAAA,CAAAhD,GAAA,KAAAjE,IAAA,GACAiE,GAAA,KAAA5E,GAAAiJ,eAAA,CAAA8H,EAvgBA,GAwgBAnM,GAAA,KAAA5E,GAAA+I,IAAA,CAAAiB,EACA,EACAhG,GAAA,IAAA6D,QACA5D,GAAA,WACA,GAAAW,GAAA,KAAAvD,GACA,wFAGA2E,GAAAD,GACAE,GAAA,CAAA+K,EAAAzF,EAAAM,IAAA,CACA,IAAAoF,EAAA,EACA,QAAAvS,EAAA6M,EAAwB7M,EAAAmN,EAASnN,IAAA,CAEjC,IAAAwS,EAAAF,CAAA,CADArK,KAAAsF,KAAA,CAAAvN,EAAA,GACA,CACAyS,EAAA,EAAAzS,CAAAA,EAAAA,CAAA,EAEAuS,IAAA,EACAA,GAFA,CAAAC,EAAA,GAAAC,CAAA,GAAAA,CAGA,CACA,OAAAF,CACA,EACA/K,GAAA,CAAA8K,EAAAzF,EAAAM,EAAA9E,IAAA,CACA,QAAArI,EAAA6M,EAAwB7M,EAAAmN,EAASnN,IAAA,CACjC,IAAA0S,EAAAzK,KAAAsF,KAAA,CAAAvN,EAAA,GACAwS,EAAAF,CAAA,CAAAI,EAAA,CACAD,EAAA,EAAAzS,CAAAA,EAAAA,CAAA,EACAwS,GAAA,KAAAC,CAAA,EACAD,GAAA,CAAAnK,EAAA,GAAA8E,EAAAnN,EAAA,IAAAmN,EAAAnN,EAAA,GAAAyS,EACAH,CAAA,CAAAI,EAAA,CAAAF,CACA,CACA,EA78BAG,CARA,CAAAC,EAAAC,EAAAC,EAAAC,IAAA,CACA,GAAAF,GAAA,iBAAAA,GAAA,mBAAAA,EACA,QAAAzK,KAAA1C,GAAAmN,GACAjN,GAAAgD,IAAA,CAAAgK,EAAAxK,IAAAA,KAHA0K,IAGA1K,GACA5C,GAAAoN,EAAAxK,EAAA,CAA+Bc,IAAA,IAAA2J,CAAA,CAAAzK,EAAA,CAAAE,WAAA,CAAAyK,CAAAA,EAAAtN,GAAAoN,EAAAzK,EAAA,GAAA2K,EAAAzK,UAAA,EAC/B,CACA,OAAAsK,CACA,GACApN,GAAA,GAAsD,cAAkB6C,MAAA,KA88BxE/B,KAEAe,GAAAA,GAAAuC,OAAA,CAC8B,iBAAAoJ,EAAAC,OAAA,EAAAD,CAAAA,EAAAC,OAAA,CAAA5L,EAAA","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.107.5_7geocmx3442bocz6x6zwg5lxxi/node_modules/@fluentui/react/lib/components/src/components/Layer/LayerHost.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/webm-muxer@2.2.3/node_modules/webm-muxer/build/webm-muxer.js","webpack://_N_E/<anon>"],"sourcesContent":["import * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nimport type { ILayerHost, ILayerHostProps } from './LayerHost.types';\n\nexport const LayerHost: React.FunctionComponent<ILayerHostProps> = props => {\n  const { className } = props;\n\n  const [layerHostId] = React.useState(() => getId());\n\n  const { id: hostId = layerHostId } = props;\n\n  const layerHostRef = React.useRef<ILayerHost>({\n    hostId,\n    rootRef: React.useRef<HTMLDivElement | null>(null),\n    notifyLayersChanged: () => {\n      // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n    },\n  });\n\n  React.useImperativeHandle(props.componentRef, () => layerHostRef.current);\n\n  React.useEffect(() => {\n    registerLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useUnmount(() => {\n    unregisterLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n  });\n\n  return <div {...props} className={css('ms-LayerHost', className)} ref={layerHostRef.current.rootRef} />;\n};\n","\"use strict\";\nvar WebMMuxer = (() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getOwnPropSymbols = Object.getOwnPropertySymbols;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __propIsEnum = Object.prototype.propertyIsEnumerable;\n  var __pow = Math.pow;\n  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n  var __spreadValues = (a, b) => {\n    for (var prop in b ||= {})\n      if (__hasOwnProp.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols)\n      for (var prop of __getOwnPropSymbols(b)) {\n        if (__propIsEnum.call(b, prop))\n          __defNormalProp(a, prop, b[prop]);\n      }\n    return a;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n  var __accessCheck = (obj, member, msg) => {\n    if (!member.has(obj))\n      throw TypeError(\"Cannot \" + msg);\n  };\n  var __privateGet = (obj, member, getter) => {\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n  };\n  var __privateAdd = (obj, member, value) => {\n    if (member.has(obj))\n      throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n  };\n  var __privateSet = (obj, member, value, setter) => {\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n  };\n  var __privateMethod = (obj, member, method) => {\n    __accessCheck(obj, member, \"access private method\");\n    return method;\n  };\n\n  // src/main.ts\n  var main_exports = {};\n  __export(main_exports, {\n    default: () => main_default\n  });\n\n  // src/ebml.ts\n  var EBMLFloat32 = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n  var EBMLFloat64 = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n  var measureUnsignedInt = (value) => {\n    if (value < 1 << 8) {\n      return 1;\n    } else if (value < 1 << 16) {\n      return 2;\n    } else if (value < 1 << 24) {\n      return 3;\n    } else if (value < __pow(2, 32)) {\n      return 4;\n    } else if (value < __pow(2, 40)) {\n      return 5;\n    } else {\n      return 6;\n    }\n  };\n  var measureEBMLVarInt = (value) => {\n    if (value < (1 << 7) - 1) {\n      return 1;\n    } else if (value < (1 << 14) - 1) {\n      return 2;\n    } else if (value < (1 << 21) - 1) {\n      return 3;\n    } else if (value < (1 << 28) - 1) {\n      return 4;\n    } else if (value < __pow(2, 35) - 1) {\n      return 5;\n    } else if (value < __pow(2, 42) - 1) {\n      return 6;\n    } else {\n      throw new Error(\"EBML VINT size not supported \" + value);\n    }\n  };\n\n  // src/write_target.ts\n  var _helper, _helperView, _writeByte, writeByte_fn, _writeFloat32, writeFloat32_fn, _writeFloat64, writeFloat64_fn, _writeUnsignedInt, writeUnsignedInt_fn, _writeString, writeString_fn;\n  var WriteTarget = class {\n    constructor() {\n      __privateAdd(this, _writeByte);\n      __privateAdd(this, _writeFloat32);\n      __privateAdd(this, _writeFloat64);\n      __privateAdd(this, _writeUnsignedInt);\n      __privateAdd(this, _writeString);\n      this.pos = 0;\n      this.offsets = /* @__PURE__ */ new WeakMap();\n      this.dataOffsets = /* @__PURE__ */ new WeakMap();\n      __privateAdd(this, _helper, new Uint8Array(8));\n      __privateAdd(this, _helperView, new DataView(__privateGet(this, _helper).buffer));\n    }\n    seek(newPos) {\n      this.pos = newPos;\n    }\n    writeEBMLVarInt(value, width = measureEBMLVarInt(value)) {\n      let pos = 0;\n      switch (width) {\n        case 1:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 7 | value);\n          break;\n        case 2:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 6 | value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 3:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 5 | value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 4:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 4 | value >> 24);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 5:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 3 | value / __pow(2, 32) & 7);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 24);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 6:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 2 | value / __pow(2, 40) & 3);\n          __privateGet(this, _helperView).setUint8(pos++, value / __pow(2, 32) | 0);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 24);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        default:\n          throw new Error(\"Bad EBML VINT size \" + width);\n      }\n      this.write(__privateGet(this, _helper).subarray(0, pos));\n    }\n    writeEBML(data) {\n      var _a, _b;\n      if (data === null)\n        return;\n      if (data instanceof Uint8Array) {\n        this.write(data);\n      } else if (Array.isArray(data)) {\n        for (let elem of data) {\n          this.writeEBML(elem);\n        }\n      } else {\n        this.offsets.set(data, this.pos);\n        __privateMethod(this, _writeUnsignedInt, writeUnsignedInt_fn).call(this, data.id);\n        if (Array.isArray(data.data)) {\n          let sizePos = this.pos;\n          let sizeSize = data.size === -1 ? 1 : (_a = data.size) != null ? _a : 4;\n          if (data.size === -1) {\n            __privateMethod(this, _writeByte, writeByte_fn).call(this, 255);\n          } else {\n            this.seek(this.pos + sizeSize);\n          }\n          let startPos = this.pos;\n          this.dataOffsets.set(data, startPos);\n          this.writeEBML(data.data);\n          if (data.size !== -1) {\n            let size = this.pos - startPos;\n            let endPos = this.pos;\n            this.seek(sizePos);\n            this.writeEBMLVarInt(size, sizeSize);\n            this.seek(endPos);\n          }\n        } else if (typeof data.data === \"number\") {\n          let size = (_b = data.size) != null ? _b : measureUnsignedInt(data.data);\n          this.writeEBMLVarInt(size);\n          __privateMethod(this, _writeUnsignedInt, writeUnsignedInt_fn).call(this, data.data, size);\n        } else if (typeof data.data === \"string\") {\n          this.writeEBMLVarInt(data.data.length);\n          __privateMethod(this, _writeString, writeString_fn).call(this, data.data);\n        } else if (data.data instanceof Uint8Array) {\n          this.writeEBMLVarInt(data.data.byteLength, data.size);\n          this.write(data.data);\n        } else if (data.data instanceof EBMLFloat32) {\n          this.writeEBMLVarInt(4);\n          __privateMethod(this, _writeFloat32, writeFloat32_fn).call(this, data.data.value);\n        } else if (data.data instanceof EBMLFloat64) {\n          this.writeEBMLVarInt(8);\n          __privateMethod(this, _writeFloat64, writeFloat64_fn).call(this, data.data.value);\n        }\n      }\n    }\n  };\n  _helper = new WeakMap();\n  _helperView = new WeakMap();\n  _writeByte = new WeakSet();\n  writeByte_fn = function(value) {\n    __privateGet(this, _helperView).setUint8(0, value);\n    this.write(__privateGet(this, _helper).subarray(0, 1));\n  };\n  _writeFloat32 = new WeakSet();\n  writeFloat32_fn = function(value) {\n    __privateGet(this, _helperView).setFloat32(0, value, false);\n    this.write(__privateGet(this, _helper).subarray(0, 4));\n  };\n  _writeFloat64 = new WeakSet();\n  writeFloat64_fn = function(value) {\n    __privateGet(this, _helperView).setFloat64(0, value, false);\n    this.write(__privateGet(this, _helper));\n  };\n  _writeUnsignedInt = new WeakSet();\n  writeUnsignedInt_fn = function(value, width = measureUnsignedInt(value)) {\n    let pos = 0;\n    switch (width) {\n      case 6:\n        __privateGet(this, _helperView).setUint8(pos++, value / __pow(2, 40) | 0);\n      case 5:\n        __privateGet(this, _helperView).setUint8(pos++, value / __pow(2, 32) | 0);\n      case 4:\n        __privateGet(this, _helperView).setUint8(pos++, value >> 24);\n      case 3:\n        __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n      case 2:\n        __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n      case 1:\n        __privateGet(this, _helperView).setUint8(pos++, value);\n        break;\n      default:\n        throw new Error(\"Bad UINT size \" + width);\n    }\n    this.write(__privateGet(this, _helper).subarray(0, pos));\n  };\n  _writeString = new WeakSet();\n  writeString_fn = function(str) {\n    this.write(new Uint8Array(str.split(\"\").map((x) => x.charCodeAt(0))));\n  };\n  var _buffer, _bytes;\n  var ArrayBufferWriteTarget = class extends WriteTarget {\n    constructor() {\n      super();\n      __privateAdd(this, _buffer, new ArrayBuffer(__pow(2, 16)));\n      __privateAdd(this, _bytes, new Uint8Array(__privateGet(this, _buffer)));\n    }\n    ensureSize(size) {\n      let newLength = __privateGet(this, _buffer).byteLength;\n      while (newLength < size)\n        newLength *= 2;\n      if (newLength === __privateGet(this, _buffer).byteLength)\n        return;\n      let newBuffer = new ArrayBuffer(newLength);\n      let newBytes = new Uint8Array(newBuffer);\n      newBytes.set(__privateGet(this, _bytes), 0);\n      __privateSet(this, _buffer, newBuffer);\n      __privateSet(this, _bytes, newBytes);\n    }\n    write(data) {\n      this.ensureSize(this.pos + data.byteLength);\n      __privateGet(this, _bytes).set(data, this.pos);\n      this.pos += data.byteLength;\n    }\n    finalize() {\n      this.ensureSize(this.pos);\n      return __privateGet(this, _buffer).slice(0, this.pos);\n    }\n  };\n  _buffer = new WeakMap();\n  _bytes = new WeakMap();\n  var FILE_CHUNK_SIZE = __pow(2, 24);\n  var MAX_CHUNKS_AT_ONCE = 2;\n  var _stream, _chunks;\n  var FileSystemWritableFileStreamWriteTarget = class extends WriteTarget {\n    constructor(stream) {\n      super();\n      __privateAdd(this, _stream, void 0);\n      __privateAdd(this, _chunks, []);\n      __privateSet(this, _stream, stream);\n    }\n    write(data) {\n      this.writeDataIntoChunks(data, this.pos);\n      this.flushChunks();\n      this.pos += data.byteLength;\n    }\n    writeDataIntoChunks(data, position) {\n      let chunkIndex = __privateGet(this, _chunks).findIndex((x) => x.start <= position && position < x.start + FILE_CHUNK_SIZE);\n      if (chunkIndex === -1)\n        chunkIndex = this.createChunk(position);\n      let chunk = __privateGet(this, _chunks)[chunkIndex];\n      let relativePosition = position - chunk.start;\n      let toWrite = data.subarray(0, Math.min(FILE_CHUNK_SIZE - relativePosition, data.byteLength));\n      chunk.data.set(toWrite, relativePosition);\n      let section = {\n        start: relativePosition,\n        end: relativePosition + toWrite.byteLength\n      };\n      insertSectionIntoFileChunk(chunk, section);\n      if (chunk.written[0].start === 0 && chunk.written[0].end === FILE_CHUNK_SIZE) {\n        chunk.shouldFlush = true;\n      }\n      if (__privateGet(this, _chunks).length > MAX_CHUNKS_AT_ONCE) {\n        for (let i = 0; i < __privateGet(this, _chunks).length - 1; i++) {\n          __privateGet(this, _chunks)[i].shouldFlush = true;\n        }\n        this.flushChunks();\n      }\n      if (toWrite.byteLength < data.byteLength) {\n        this.writeDataIntoChunks(data.subarray(toWrite.byteLength), position + toWrite.byteLength);\n      }\n    }\n    createChunk(includesPosition) {\n      let start = Math.floor(includesPosition / FILE_CHUNK_SIZE) * FILE_CHUNK_SIZE;\n      let chunk = {\n        start,\n        data: new Uint8Array(FILE_CHUNK_SIZE),\n        written: [],\n        shouldFlush: false\n      };\n      __privateGet(this, _chunks).push(chunk);\n      __privateGet(this, _chunks).sort((a, b) => a.start - b.start);\n      return __privateGet(this, _chunks).indexOf(chunk);\n    }\n    flushChunks(force = false) {\n      for (let i = 0; i < __privateGet(this, _chunks).length; i++) {\n        let chunk = __privateGet(this, _chunks)[i];\n        if (!chunk.shouldFlush && !force)\n          continue;\n        for (let section of chunk.written) {\n          __privateGet(this, _stream).write({\n            type: \"write\",\n            data: chunk.data.subarray(section.start, section.end),\n            position: chunk.start + section.start\n          });\n        }\n        __privateGet(this, _chunks).splice(i--, 1);\n      }\n    }\n    finalize() {\n      this.flushChunks(true);\n    }\n  };\n  _stream = new WeakMap();\n  _chunks = new WeakMap();\n  var insertSectionIntoFileChunk = (chunk, section) => {\n    let low = 0;\n    let high = chunk.written.length - 1;\n    let index = -1;\n    while (low <= high) {\n      let mid = Math.floor(low + (high - low + 1) / 2);\n      if (chunk.written[mid].start <= section.start) {\n        low = mid + 1;\n        index = mid;\n      } else {\n        high = mid - 1;\n      }\n    }\n    chunk.written.splice(index + 1, 0, section);\n    if (index === -1 || chunk.written[index].end < section.start)\n      index++;\n    while (index < chunk.written.length - 1 && chunk.written[index].end >= chunk.written[index + 1].start) {\n      chunk.written[index].end = Math.max(chunk.written[index].end, chunk.written[index + 1].end);\n      chunk.written.splice(index + 1, 1);\n    }\n  };\n  var _sections, _onFlush, _lastFlushEnd, _ensureMonotonicity;\n  var StreamingWriteTarget = class extends WriteTarget {\n    constructor(onFlush, ensureMonotonicity) {\n      super();\n      __privateAdd(this, _sections, []);\n      __privateAdd(this, _onFlush, void 0);\n      __privateAdd(this, _lastFlushEnd, 0);\n      __privateAdd(this, _ensureMonotonicity, void 0);\n      __privateSet(this, _onFlush, onFlush);\n      __privateSet(this, _ensureMonotonicity, ensureMonotonicity);\n    }\n    write(data) {\n      __privateGet(this, _sections).push({\n        data: data.slice(),\n        start: this.pos\n      });\n      this.pos += data.byteLength;\n    }\n    flush(done) {\n      if (__privateGet(this, _sections).length === 0)\n        return;\n      let chunks = [];\n      let sorted = [...__privateGet(this, _sections)].sort((a, b) => a.start - b.start);\n      chunks.push({\n        start: sorted[0].start,\n        size: sorted[0].data.byteLength\n      });\n      for (let i = 1; i < sorted.length; i++) {\n        let lastChunk = chunks[chunks.length - 1];\n        let section = sorted[i];\n        if (section.start <= lastChunk.start + lastChunk.size) {\n          lastChunk.size = Math.max(lastChunk.size, section.start + section.data.byteLength - lastChunk.start);\n        } else {\n          chunks.push({\n            start: section.start,\n            size: section.data.byteLength\n          });\n        }\n      }\n      for (let chunk of chunks) {\n        chunk.data = new Uint8Array(chunk.size);\n        for (let section of __privateGet(this, _sections)) {\n          if (chunk.start <= section.start && section.start < chunk.start + chunk.size) {\n            chunk.data.set(section.data, section.start - chunk.start);\n          }\n        }\n        if (__privateGet(this, _ensureMonotonicity) && chunk.start < __privateGet(this, _lastFlushEnd)) {\n          throw new Error(\"Internal error: Monotonicity violation.\");\n        }\n        let isLastFlush = done && chunk === chunks[chunks.length - 1];\n        __privateGet(this, _onFlush).call(this, chunk.data, chunk.start, isLastFlush);\n        __privateSet(this, _lastFlushEnd, chunk.start + chunk.data.byteLength);\n      }\n      __privateGet(this, _sections).length = 0;\n    }\n  };\n  _sections = new WeakMap();\n  _onFlush = new WeakMap();\n  _lastFlushEnd = new WeakMap();\n  _ensureMonotonicity = new WeakMap();\n\n  // src/main.ts\n  var VIDEO_TRACK_NUMBER = 1;\n  var AUDIO_TRACK_NUMBER = 2;\n  var VIDEO_TRACK_TYPE = 1;\n  var AUDIO_TRACK_TYPE = 2;\n  var MAX_CHUNK_LENGTH_MS = __pow(2, 15);\n  var CODEC_PRIVATE_MAX_SIZE = __pow(2, 12);\n  var APP_NAME = \"https://github.com/Vanilagy/webm-muxer\";\n  var SEGMENT_SIZE_BYTES = 6;\n  var CLUSTER_SIZE_BYTES = 5;\n  var FIRST_TIMESTAMP_BEHAVIORS = [\"strict\", \"offset\", \"permissive\"];\n  var _target, _options, _segment, _segmentInfo, _seekHead, _tracksElement, _segmentDuration, _colourElement, _videoCodecPrivate, _audioCodecPrivate, _cues, _currentCluster, _currentClusterTimestamp, _duration, _videoChunkQueue, _audioChunkQueue, _firstVideoTimestamp, _firstAudioTimestamp, _lastVideoTimestamp, _lastAudioTimestamp, _colorSpace, _finalized, _validateOptions, validateOptions_fn, _createFileHeader, createFileHeader_fn, _writeEBMLHeader, writeEBMLHeader_fn, _createCodecPrivatePlaceholders, createCodecPrivatePlaceholders_fn, _createColourElement, createColourElement_fn, _createSeekHead, createSeekHead_fn, _createSegmentInfo, createSegmentInfo_fn, _createTracks, createTracks_fn, _createSegment, createSegment_fn, _createCues, createCues_fn, _maybeFlushStreamingTarget, maybeFlushStreamingTarget_fn, _segmentDataOffset, segmentDataOffset_get, _writeVideoDecoderConfig, writeVideoDecoderConfig_fn, _fixVP9ColorSpace, fixVP9ColorSpace_fn, _createInternalChunk, createInternalChunk_fn, _validateTimestamp, validateTimestamp_fn, _writeSimpleBlock, writeSimpleBlock_fn, _createCodecPrivateElement, createCodecPrivateElement_fn, _writeCodecPrivate, writeCodecPrivate_fn, _createNewCluster, createNewCluster_fn, _finalizeCurrentCluster, finalizeCurrentCluster_fn, _ensureNotFinalized, ensureNotFinalized_fn;\n  var WebMMuxer = class {\n    constructor(options) {\n      __privateAdd(this, _validateOptions);\n      __privateAdd(this, _createFileHeader);\n      __privateAdd(this, _writeEBMLHeader);\n      __privateAdd(this, _createCodecPrivatePlaceholders);\n      __privateAdd(this, _createColourElement);\n      __privateAdd(this, _createSeekHead);\n      __privateAdd(this, _createSegmentInfo);\n      __privateAdd(this, _createTracks);\n      __privateAdd(this, _createSegment);\n      __privateAdd(this, _createCues);\n      __privateAdd(this, _maybeFlushStreamingTarget);\n      __privateAdd(this, _segmentDataOffset);\n      __privateAdd(this, _writeVideoDecoderConfig);\n      __privateAdd(this, _fixVP9ColorSpace);\n      __privateAdd(this, _createInternalChunk);\n      __privateAdd(this, _validateTimestamp);\n      __privateAdd(this, _writeSimpleBlock);\n      __privateAdd(this, _createCodecPrivateElement);\n      __privateAdd(this, _writeCodecPrivate);\n      __privateAdd(this, _createNewCluster);\n      __privateAdd(this, _finalizeCurrentCluster);\n      __privateAdd(this, _ensureNotFinalized);\n      __privateAdd(this, _target, void 0);\n      __privateAdd(this, _options, void 0);\n      __privateAdd(this, _segment, void 0);\n      __privateAdd(this, _segmentInfo, void 0);\n      __privateAdd(this, _seekHead, void 0);\n      __privateAdd(this, _tracksElement, void 0);\n      __privateAdd(this, _segmentDuration, void 0);\n      __privateAdd(this, _colourElement, void 0);\n      __privateAdd(this, _videoCodecPrivate, void 0);\n      __privateAdd(this, _audioCodecPrivate, void 0);\n      __privateAdd(this, _cues, void 0);\n      __privateAdd(this, _currentCluster, void 0);\n      __privateAdd(this, _currentClusterTimestamp, void 0);\n      __privateAdd(this, _duration, 0);\n      __privateAdd(this, _videoChunkQueue, []);\n      __privateAdd(this, _audioChunkQueue, []);\n      __privateAdd(this, _firstVideoTimestamp, void 0);\n      __privateAdd(this, _firstAudioTimestamp, void 0);\n      __privateAdd(this, _lastVideoTimestamp, -1);\n      __privateAdd(this, _lastAudioTimestamp, -1);\n      __privateAdd(this, _colorSpace, void 0);\n      __privateAdd(this, _finalized, false);\n      __privateMethod(this, _validateOptions, validateOptions_fn).call(this, options);\n      __privateSet(this, _options, __spreadValues({\n        type: \"webm\",\n        firstTimestampBehavior: \"strict\"\n      }, options));\n      if (options.target === \"buffer\") {\n        __privateSet(this, _target, new ArrayBufferWriteTarget());\n      } else if (options.target instanceof FileSystemWritableFileStream) {\n        __privateSet(this, _target, new FileSystemWritableFileStreamWriteTarget(options.target));\n      } else if (typeof options.target === \"function\") {\n        __privateSet(this, _target, new StreamingWriteTarget(options.target, !!options.streaming));\n      } else {\n        throw new Error(`Invalid target: ${options.target}`);\n      }\n      __privateMethod(this, _createFileHeader, createFileHeader_fn).call(this);\n    }\n    addVideoChunk(chunk, meta, timestamp) {\n      let data = new Uint8Array(chunk.byteLength);\n      chunk.copyTo(data);\n      this.addVideoChunkRaw(data, chunk.type, timestamp != null ? timestamp : chunk.timestamp, meta);\n    }\n    addVideoChunkRaw(data, type, timestamp, meta) {\n      __privateMethod(this, _ensureNotFinalized, ensureNotFinalized_fn).call(this);\n      if (!__privateGet(this, _options).video)\n        throw new Error(\"No video track declared.\");\n      if (__privateGet(this, _firstVideoTimestamp) === void 0)\n        __privateSet(this, _firstVideoTimestamp, timestamp);\n      if (meta)\n        __privateMethod(this, _writeVideoDecoderConfig, writeVideoDecoderConfig_fn).call(this, meta);\n      let internalChunk = __privateMethod(this, _createInternalChunk, createInternalChunk_fn).call(this, data, type, timestamp, VIDEO_TRACK_NUMBER);\n      if (__privateGet(this, _options).video.codec === \"V_VP9\")\n        __privateMethod(this, _fixVP9ColorSpace, fixVP9ColorSpace_fn).call(this, internalChunk);\n      __privateSet(this, _lastVideoTimestamp, internalChunk.timestamp);\n      while (__privateGet(this, _audioChunkQueue).length > 0 && __privateGet(this, _audioChunkQueue)[0].timestamp <= internalChunk.timestamp) {\n        let audioChunk = __privateGet(this, _audioChunkQueue).shift();\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, audioChunk);\n      }\n      if (!__privateGet(this, _options).audio || internalChunk.timestamp <= __privateGet(this, _lastAudioTimestamp)) {\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, internalChunk);\n      } else {\n        __privateGet(this, _videoChunkQueue).push(internalChunk);\n      }\n      __privateMethod(this, _maybeFlushStreamingTarget, maybeFlushStreamingTarget_fn).call(this);\n    }\n    addAudioChunk(chunk, meta, timestamp) {\n      let data = new Uint8Array(chunk.byteLength);\n      chunk.copyTo(data);\n      this.addAudioChunkRaw(data, chunk.type, timestamp != null ? timestamp : chunk.timestamp, meta);\n    }\n    addAudioChunkRaw(data, type, timestamp, meta) {\n      __privateMethod(this, _ensureNotFinalized, ensureNotFinalized_fn).call(this);\n      if (!__privateGet(this, _options).audio)\n        throw new Error(\"No audio track declared.\");\n      if (__privateGet(this, _firstAudioTimestamp) === void 0)\n        __privateSet(this, _firstAudioTimestamp, timestamp);\n      if (meta == null ? void 0 : meta.decoderConfig) {\n        if (__privateGet(this, _options).streaming) {\n          __privateSet(this, _audioCodecPrivate, __privateMethod(this, _createCodecPrivateElement, createCodecPrivateElement_fn).call(this, meta.decoderConfig.description));\n        } else {\n          __privateMethod(this, _writeCodecPrivate, writeCodecPrivate_fn).call(this, __privateGet(this, _audioCodecPrivate), meta.decoderConfig.description);\n        }\n      }\n      let internalChunk = __privateMethod(this, _createInternalChunk, createInternalChunk_fn).call(this, data, type, timestamp, AUDIO_TRACK_NUMBER);\n      __privateSet(this, _lastAudioTimestamp, internalChunk.timestamp);\n      while (__privateGet(this, _videoChunkQueue).length > 0 && __privateGet(this, _videoChunkQueue)[0].timestamp <= internalChunk.timestamp) {\n        let videoChunk = __privateGet(this, _videoChunkQueue).shift();\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, videoChunk);\n      }\n      if (!__privateGet(this, _options).video || internalChunk.timestamp <= __privateGet(this, _lastVideoTimestamp)) {\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, internalChunk);\n      } else {\n        __privateGet(this, _audioChunkQueue).push(internalChunk);\n      }\n      __privateMethod(this, _maybeFlushStreamingTarget, maybeFlushStreamingTarget_fn).call(this);\n    }\n    finalize() {\n      while (__privateGet(this, _videoChunkQueue).length > 0)\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, __privateGet(this, _videoChunkQueue).shift());\n      while (__privateGet(this, _audioChunkQueue).length > 0)\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, __privateGet(this, _audioChunkQueue).shift());\n      if (!__privateGet(this, _options).streaming) {\n        __privateMethod(this, _finalizeCurrentCluster, finalizeCurrentCluster_fn).call(this);\n      }\n      __privateGet(this, _target).writeEBML(__privateGet(this, _cues));\n      if (!__privateGet(this, _options).streaming) {\n        let endPos = __privateGet(this, _target).pos;\n        let segmentSize = __privateGet(this, _target).pos - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n        __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _segment)) + 4);\n        __privateGet(this, _target).writeEBMLVarInt(segmentSize, SEGMENT_SIZE_BYTES);\n        __privateGet(this, _segmentDuration).data = new EBMLFloat64(__privateGet(this, _duration));\n        __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _segmentDuration)));\n        __privateGet(this, _target).writeEBML(__privateGet(this, _segmentDuration));\n        __privateGet(this, _seekHead).data[0].data[1].data = __privateGet(this, _target).offsets.get(__privateGet(this, _cues)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n        __privateGet(this, _seekHead).data[1].data[1].data = __privateGet(this, _target).offsets.get(__privateGet(this, _segmentInfo)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n        __privateGet(this, _seekHead).data[2].data[1].data = __privateGet(this, _target).offsets.get(__privateGet(this, _tracksElement)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n        __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _seekHead)));\n        __privateGet(this, _target).writeEBML(__privateGet(this, _seekHead));\n        __privateGet(this, _target).seek(endPos);\n      }\n      __privateSet(this, _finalized, true);\n      if (__privateGet(this, _target) instanceof ArrayBufferWriteTarget) {\n        return __privateGet(this, _target).finalize();\n      } else if (__privateGet(this, _target) instanceof FileSystemWritableFileStreamWriteTarget) {\n        __privateGet(this, _target).finalize();\n      } else if (__privateGet(this, _target) instanceof StreamingWriteTarget) {\n        __privateGet(this, _target).flush(true);\n      }\n      return null;\n    }\n  };\n  _target = new WeakMap();\n  _options = new WeakMap();\n  _segment = new WeakMap();\n  _segmentInfo = new WeakMap();\n  _seekHead = new WeakMap();\n  _tracksElement = new WeakMap();\n  _segmentDuration = new WeakMap();\n  _colourElement = new WeakMap();\n  _videoCodecPrivate = new WeakMap();\n  _audioCodecPrivate = new WeakMap();\n  _cues = new WeakMap();\n  _currentCluster = new WeakMap();\n  _currentClusterTimestamp = new WeakMap();\n  _duration = new WeakMap();\n  _videoChunkQueue = new WeakMap();\n  _audioChunkQueue = new WeakMap();\n  _firstVideoTimestamp = new WeakMap();\n  _firstAudioTimestamp = new WeakMap();\n  _lastVideoTimestamp = new WeakMap();\n  _lastAudioTimestamp = new WeakMap();\n  _colorSpace = new WeakMap();\n  _finalized = new WeakMap();\n  _validateOptions = new WeakSet();\n  validateOptions_fn = function(options) {\n    if (options.type && options.type !== \"webm\" && options.type !== \"matroska\") {\n      throw new Error(`Invalid type: ${options.type}`);\n    }\n    if (options.firstTimestampBehavior && !FIRST_TIMESTAMP_BEHAVIORS.includes(options.firstTimestampBehavior)) {\n      throw new Error(`Invalid first timestamp behavior: ${options.firstTimestampBehavior}`);\n    }\n  };\n  _createFileHeader = new WeakSet();\n  createFileHeader_fn = function() {\n    __privateMethod(this, _writeEBMLHeader, writeEBMLHeader_fn).call(this);\n    if (!__privateGet(this, _options).streaming) {\n      __privateMethod(this, _createSeekHead, createSeekHead_fn).call(this);\n    }\n    __privateMethod(this, _createSegmentInfo, createSegmentInfo_fn).call(this);\n    __privateMethod(this, _createCodecPrivatePlaceholders, createCodecPrivatePlaceholders_fn).call(this);\n    __privateMethod(this, _createColourElement, createColourElement_fn).call(this);\n    if (!__privateGet(this, _options).streaming) {\n      __privateMethod(this, _createTracks, createTracks_fn).call(this);\n      __privateMethod(this, _createSegment, createSegment_fn).call(this);\n    } else {\n    }\n    __privateMethod(this, _createCues, createCues_fn).call(this);\n    __privateMethod(this, _maybeFlushStreamingTarget, maybeFlushStreamingTarget_fn).call(this);\n  };\n  _writeEBMLHeader = new WeakSet();\n  writeEBMLHeader_fn = function() {\n    var _a;\n    let ebmlHeader = { id: 440786851 /* EBML */, data: [\n      { id: 17030 /* EBMLVersion */, data: 1 },\n      { id: 17143 /* EBMLReadVersion */, data: 1 },\n      { id: 17138 /* EBMLMaxIDLength */, data: 4 },\n      { id: 17139 /* EBMLMaxSizeLength */, data: 8 },\n      { id: 17026 /* DocType */, data: (_a = __privateGet(this, _options).type) != null ? _a : \"webm\" },\n      { id: 17031 /* DocTypeVersion */, data: 2 },\n      { id: 17029 /* DocTypeReadVersion */, data: 2 }\n    ] };\n    __privateGet(this, _target).writeEBML(ebmlHeader);\n  };\n  _createCodecPrivatePlaceholders = new WeakSet();\n  createCodecPrivatePlaceholders_fn = function() {\n    __privateSet(this, _videoCodecPrivate, { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) });\n    __privateSet(this, _audioCodecPrivate, { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) });\n  };\n  _createColourElement = new WeakSet();\n  createColourElement_fn = function() {\n    __privateSet(this, _colourElement, { id: 21936 /* Colour */, data: [\n      { id: 21937 /* MatrixCoefficients */, data: 2 },\n      { id: 21946 /* TransferCharacteristics */, data: 2 },\n      { id: 21947 /* Primaries */, data: 2 },\n      { id: 21945 /* Range */, data: 0 }\n    ] });\n  };\n  _createSeekHead = new WeakSet();\n  createSeekHead_fn = function() {\n    const kaxCues = new Uint8Array([28, 83, 187, 107]);\n    const kaxInfo = new Uint8Array([21, 73, 169, 102]);\n    const kaxTracks = new Uint8Array([22, 84, 174, 107]);\n    let seekHead = { id: 290298740 /* SeekHead */, data: [\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxCues },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] },\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxInfo },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] },\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxTracks },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] }\n    ] };\n    __privateSet(this, _seekHead, seekHead);\n  };\n  _createSegmentInfo = new WeakSet();\n  createSegmentInfo_fn = function() {\n    let segmentDuration = { id: 17545 /* Duration */, data: new EBMLFloat64(0) };\n    __privateSet(this, _segmentDuration, segmentDuration);\n    let segmentInfo = { id: 357149030 /* Info */, data: [\n      { id: 2807729 /* TimestampScale */, data: 1e6 },\n      { id: 19840 /* MuxingApp */, data: APP_NAME },\n      { id: 22337 /* WritingApp */, data: APP_NAME },\n      !__privateGet(this, _options).streaming ? segmentDuration : null\n    ] };\n    __privateSet(this, _segmentInfo, segmentInfo);\n  };\n  _createTracks = new WeakSet();\n  createTracks_fn = function() {\n    let tracksElement = { id: 374648427 /* Tracks */, data: [] };\n    __privateSet(this, _tracksElement, tracksElement);\n    if (__privateGet(this, _options).video) {\n      tracksElement.data.push({ id: 174 /* TrackEntry */, data: [\n        { id: 215 /* TrackNumber */, data: VIDEO_TRACK_NUMBER },\n        { id: 29637 /* TrackUID */, data: VIDEO_TRACK_NUMBER },\n        { id: 131 /* TrackType */, data: VIDEO_TRACK_TYPE },\n        { id: 134 /* CodecID */, data: __privateGet(this, _options).video.codec },\n        __privateGet(this, _videoCodecPrivate),\n        __privateGet(this, _options).video.frameRate ? { id: 2352003 /* DefaultDuration */, data: 1e9 / __privateGet(this, _options).video.frameRate } : null,\n        { id: 224 /* Video */, data: [\n          { id: 176 /* PixelWidth */, data: __privateGet(this, _options).video.width },\n          { id: 186 /* PixelHeight */, data: __privateGet(this, _options).video.height },\n          __privateGet(this, _options).video.alpha ? { id: 21440 /* AlphaMode */, data: 1 } : null,\n          __privateGet(this, _colourElement)\n        ] }\n      ] });\n    }\n    if (__privateGet(this, _options).audio) {\n      __privateSet(this, _audioCodecPrivate, __privateGet(this, _options).streaming ? __privateGet(this, _audioCodecPrivate) || null : { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) });\n      tracksElement.data.push({ id: 174 /* TrackEntry */, data: [\n        { id: 215 /* TrackNumber */, data: AUDIO_TRACK_NUMBER },\n        { id: 29637 /* TrackUID */, data: AUDIO_TRACK_NUMBER },\n        { id: 131 /* TrackType */, data: AUDIO_TRACK_TYPE },\n        { id: 134 /* CodecID */, data: __privateGet(this, _options).audio.codec },\n        __privateGet(this, _audioCodecPrivate),\n        { id: 225 /* Audio */, data: [\n          { id: 181 /* SamplingFrequency */, data: new EBMLFloat32(__privateGet(this, _options).audio.sampleRate) },\n          { id: 159 /* Channels */, data: __privateGet(this, _options).audio.numberOfChannels },\n          __privateGet(this, _options).audio.bitDepth ? { id: 25188 /* BitDepth */, data: __privateGet(this, _options).audio.bitDepth } : null\n        ] }\n      ] });\n    }\n  };\n  _createSegment = new WeakSet();\n  createSegment_fn = function() {\n    let segment = {\n      id: 408125543 /* Segment */,\n      size: __privateGet(this, _options).streaming ? -1 : SEGMENT_SIZE_BYTES,\n      data: [\n        !__privateGet(this, _options).streaming ? __privateGet(this, _seekHead) : null,\n        __privateGet(this, _segmentInfo),\n        __privateGet(this, _tracksElement)\n      ]\n    };\n    __privateSet(this, _segment, segment);\n    __privateGet(this, _target).writeEBML(segment);\n  };\n  _createCues = new WeakSet();\n  createCues_fn = function() {\n    __privateSet(this, _cues, { id: 475249515 /* Cues */, data: [] });\n  };\n  _maybeFlushStreamingTarget = new WeakSet();\n  maybeFlushStreamingTarget_fn = function() {\n    if (__privateGet(this, _target) instanceof StreamingWriteTarget) {\n      __privateGet(this, _target).flush(false);\n    }\n  };\n  _segmentDataOffset = new WeakSet();\n  segmentDataOffset_get = function() {\n    return __privateGet(this, _target).dataOffsets.get(__privateGet(this, _segment));\n  };\n  _writeVideoDecoderConfig = new WeakSet();\n  writeVideoDecoderConfig_fn = function(meta) {\n    if (!meta.decoderConfig)\n      return;\n    if (meta.decoderConfig.colorSpace) {\n      let colorSpace = meta.decoderConfig.colorSpace;\n      __privateSet(this, _colorSpace, colorSpace);\n      __privateGet(this, _colourElement).data = [\n        { id: 21937 /* MatrixCoefficients */, data: {\n          \"rgb\": 1,\n          \"bt709\": 1,\n          \"bt470bg\": 5,\n          \"smpte170m\": 6\n        }[colorSpace.matrix] },\n        { id: 21946 /* TransferCharacteristics */, data: {\n          \"bt709\": 1,\n          \"smpte170m\": 6,\n          \"iec61966-2-1\": 13\n        }[colorSpace.transfer] },\n        { id: 21947 /* Primaries */, data: {\n          \"bt709\": 1,\n          \"bt470bg\": 5,\n          \"smpte170m\": 6\n        }[colorSpace.primaries] },\n        { id: 21945 /* Range */, data: [1, 2][Number(colorSpace.fullRange)] }\n      ];\n      if (!__privateGet(this, _options).streaming) {\n        let endPos = __privateGet(this, _target).pos;\n        __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _colourElement)));\n        __privateGet(this, _target).writeEBML(__privateGet(this, _colourElement));\n        __privateGet(this, _target).seek(endPos);\n      }\n    }\n    if (meta.decoderConfig.description) {\n      if (__privateGet(this, _options).streaming) {\n        __privateSet(this, _videoCodecPrivate, __privateMethod(this, _createCodecPrivateElement, createCodecPrivateElement_fn).call(this, meta.decoderConfig.description));\n      } else {\n        __privateMethod(this, _writeCodecPrivate, writeCodecPrivate_fn).call(this, __privateGet(this, _videoCodecPrivate), meta.decoderConfig.description);\n      }\n    }\n  };\n  _fixVP9ColorSpace = new WeakSet();\n  fixVP9ColorSpace_fn = function(chunk) {\n    if (chunk.type !== \"key\")\n      return;\n    if (!__privateGet(this, _colorSpace))\n      return;\n    let i = 0;\n    if (readBits(chunk.data, 0, 2) !== 2)\n      return;\n    i += 2;\n    let profile = (readBits(chunk.data, i + 1, i + 2) << 1) + readBits(chunk.data, i + 0, i + 1);\n    i += 2;\n    if (profile === 3)\n      i++;\n    let showExistingFrame = readBits(chunk.data, i + 0, i + 1);\n    i++;\n    if (showExistingFrame)\n      return;\n    let frameType = readBits(chunk.data, i + 0, i + 1);\n    i++;\n    if (frameType !== 0)\n      return;\n    i += 2;\n    let syncCode = readBits(chunk.data, i + 0, i + 24);\n    i += 24;\n    if (syncCode !== 4817730)\n      return;\n    if (profile >= 2)\n      i++;\n    let colorSpaceID = {\n      \"rgb\": 7,\n      \"bt709\": 2,\n      \"bt470bg\": 1,\n      \"smpte170m\": 3\n    }[__privateGet(this, _colorSpace).matrix];\n    writeBits(chunk.data, i + 0, i + 3, colorSpaceID);\n  };\n  _createInternalChunk = new WeakSet();\n  createInternalChunk_fn = function(data, type, timestamp, trackNumber) {\n    let adjustedTimestamp = __privateMethod(this, _validateTimestamp, validateTimestamp_fn).call(this, timestamp, trackNumber);\n    let internalChunk = {\n      data,\n      type,\n      timestamp: adjustedTimestamp,\n      trackNumber\n    };\n    return internalChunk;\n  };\n  _validateTimestamp = new WeakSet();\n  validateTimestamp_fn = function(timestamp, trackNumber) {\n    let firstTimestamp = trackNumber === VIDEO_TRACK_NUMBER ? __privateGet(this, _firstVideoTimestamp) : __privateGet(this, _firstAudioTimestamp);\n    let lastTimestamp = trackNumber === VIDEO_TRACK_NUMBER ? __privateGet(this, _lastVideoTimestamp) : __privateGet(this, _lastAudioTimestamp);\n    if (__privateGet(this, _options).firstTimestampBehavior === \"strict\" && lastTimestamp === -1 && timestamp !== 0) {\n      throw new Error(\n        `The first chunk for your media track must have a timestamp of 0 (received ${timestamp}). Non-zero first timestamps are often caused by directly piping frames or audio data from a MediaStreamTrack into the encoder. Their timestamps are typically relative to the age of the document, which is probably what you want.\n\nIf you want to offset all timestamps of a track such that the first one is zero, set firstTimestampBehavior: 'offset' in the options.\nIf you want to allow non-zero first timestamps, set firstTimestampBehavior: 'permissive'.\n`\n      );\n    } else if (__privateGet(this, _options).firstTimestampBehavior === \"offset\") {\n      timestamp -= firstTimestamp;\n    }\n    if (timestamp < lastTimestamp) {\n      throw new Error(\n        `Timestamps must be monotonically increasing (went from ${lastTimestamp} to ${timestamp}).`\n      );\n    }\n    return timestamp;\n  };\n  _writeSimpleBlock = new WeakSet();\n  writeSimpleBlock_fn = function(chunk) {\n    if (__privateGet(this, _options).streaming && !__privateGet(this, _tracksElement)) {\n      __privateMethod(this, _createTracks, createTracks_fn).call(this);\n      __privateMethod(this, _createSegment, createSegment_fn).call(this);\n    }\n    let msTime = Math.floor(chunk.timestamp / 1e3);\n    let clusterIsTooLong = chunk.type !== \"key\" && msTime - __privateGet(this, _currentClusterTimestamp) >= MAX_CHUNK_LENGTH_MS;\n    if (clusterIsTooLong) {\n      throw new Error(\n        `Current Matroska cluster exceeded its maximum allowed length of ${MAX_CHUNK_LENGTH_MS} milliseconds. In order to produce a correct WebM file, you must pass in a video key frame at least every ${MAX_CHUNK_LENGTH_MS} milliseconds.`\n      );\n    }\n    let shouldCreateNewClusterFromKeyFrame = (chunk.trackNumber === VIDEO_TRACK_NUMBER || !__privateGet(this, _options).video) && chunk.type === \"key\" && msTime - __privateGet(this, _currentClusterTimestamp) >= 1e3;\n    if (!__privateGet(this, _currentCluster) || shouldCreateNewClusterFromKeyFrame) {\n      __privateMethod(this, _createNewCluster, createNewCluster_fn).call(this, msTime);\n    }\n    let prelude = new Uint8Array(4);\n    let view = new DataView(prelude.buffer);\n    view.setUint8(0, 128 | chunk.trackNumber);\n    view.setUint16(1, msTime - __privateGet(this, _currentClusterTimestamp), false);\n    view.setUint8(3, Number(chunk.type === \"key\") << 7);\n    let simpleBlock = { id: 163 /* SimpleBlock */, data: [\n      prelude,\n      chunk.data\n    ] };\n    __privateGet(this, _target).writeEBML(simpleBlock);\n    __privateSet(this, _duration, Math.max(__privateGet(this, _duration), msTime));\n  };\n  _createCodecPrivateElement = new WeakSet();\n  createCodecPrivateElement_fn = function(data) {\n    return { id: 25506 /* CodecPrivate */, size: 4, data: new Uint8Array(data) };\n  };\n  _writeCodecPrivate = new WeakSet();\n  writeCodecPrivate_fn = function(element, data) {\n    let endPos = __privateGet(this, _target).pos;\n    __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(element));\n    element = [\n      __privateMethod(this, _createCodecPrivateElement, createCodecPrivateElement_fn).call(this, data),\n      { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE - 2 - 4 - data.byteLength) }\n    ];\n    __privateGet(this, _target).writeEBML(element);\n    __privateGet(this, _target).seek(endPos);\n  };\n  _createNewCluster = new WeakSet();\n  createNewCluster_fn = function(timestamp) {\n    if (__privateGet(this, _currentCluster) && !__privateGet(this, _options).streaming) {\n      __privateMethod(this, _finalizeCurrentCluster, finalizeCurrentCluster_fn).call(this);\n    }\n    __privateSet(this, _currentCluster, {\n      id: 524531317 /* Cluster */,\n      size: __privateGet(this, _options).streaming ? -1 : CLUSTER_SIZE_BYTES,\n      data: [\n        { id: 231 /* Timestamp */, data: timestamp }\n      ]\n    });\n    __privateGet(this, _target).writeEBML(__privateGet(this, _currentCluster));\n    __privateSet(this, _currentClusterTimestamp, timestamp);\n    let clusterOffsetFromSegment = __privateGet(this, _target).offsets.get(__privateGet(this, _currentCluster)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n    __privateGet(this, _cues).data.push({ id: 187 /* CuePoint */, data: [\n      { id: 179 /* CueTime */, data: timestamp },\n      __privateGet(this, _options).video ? { id: 183 /* CueTrackPositions */, data: [\n        { id: 247 /* CueTrack */, data: VIDEO_TRACK_NUMBER },\n        { id: 241 /* CueClusterPosition */, data: clusterOffsetFromSegment }\n      ] } : null,\n      __privateGet(this, _options).audio ? { id: 183 /* CueTrackPositions */, data: [\n        { id: 247 /* CueTrack */, data: AUDIO_TRACK_NUMBER },\n        { id: 241 /* CueClusterPosition */, data: clusterOffsetFromSegment }\n      ] } : null\n    ] });\n  };\n  _finalizeCurrentCluster = new WeakSet();\n  finalizeCurrentCluster_fn = function() {\n    let clusterSize = __privateGet(this, _target).pos - __privateGet(this, _target).dataOffsets.get(__privateGet(this, _currentCluster));\n    let endPos = __privateGet(this, _target).pos;\n    __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _currentCluster)) + 4);\n    __privateGet(this, _target).writeEBMLVarInt(clusterSize, CLUSTER_SIZE_BYTES);\n    __privateGet(this, _target).seek(endPos);\n  };\n  _ensureNotFinalized = new WeakSet();\n  ensureNotFinalized_fn = function() {\n    if (__privateGet(this, _finalized)) {\n      throw new Error(\"Cannot add new video or audio chunks after the file has been finalized.\");\n    }\n  };\n  var main_default = WebMMuxer;\n  var readBits = (bytes, start, end) => {\n    let result = 0;\n    for (let i = start; i < end; i++) {\n      let byteIndex = Math.floor(i / 8);\n      let byte = bytes[byteIndex];\n      let bitIndex = 7 - (i & 7);\n      let bit = (byte & 1 << bitIndex) >> bitIndex;\n      result <<= 1;\n      result |= bit;\n    }\n    return result;\n  };\n  var writeBits = (bytes, start, end, value) => {\n    for (let i = start; i < end; i++) {\n      let byteIndex = Math.floor(i / 8);\n      let byte = bytes[byteIndex];\n      let bitIndex = 7 - (i & 7);\n      byte &= ~(1 << bitIndex);\n      byte |= (value & 1 << end - i - 1) >> end - i - 1 << bitIndex;\n      bytes[byteIndex] = byte;\n    }\n  };\n  return __toCommonJS(main_exports);\n})();\nWebMMuxer = WebMMuxer.default;\nif (typeof module === \"object\" && typeof module.exports === \"object\") module.exports = WebMMuxer;\n"],"names":["LayerHost","props","className","layerHostId","react__WEBPACK_IMPORTED_MODULE_0__","useState","_Utilities__WEBPACK_IMPORTED_MODULE_1__","z","_a","id","hostId","layerHostRef","useRef","rootRef","notifyLayersChanged","useImperativeHandle","componentRef","current","useEffect","_Layer_notification__WEBPACK_IMPORTED_MODULE_2__","_Y","EQ","_fluentui_react_hooks__WEBPACK_IMPORTED_MODULE_3__","k","nw","createElement","tslib__WEBPACK_IMPORTED_MODULE_4__","pi","_Utilities__WEBPACK_IMPORTED_MODULE_5__","i","ref","_helper","_helperView","_writeByte","writeByte_fn","_writeFloat32","writeFloat32_fn","_writeFloat64","writeFloat64_fn","_writeUnsignedInt","writeUnsignedInt_fn","_writeString","writeString_fn","_buffer","_bytes","_stream","_chunks","_sections","_onFlush","_lastFlushEnd","_ensureMonotonicity","_target","_options","_segment","_segmentInfo","_seekHead","_tracksElement","_segmentDuration","_colourElement","_videoCodecPrivate","_audioCodecPrivate","_cues","_currentCluster","_currentClusterTimestamp","_duration","_videoChunkQueue","_audioChunkQueue","_firstVideoTimestamp","_firstAudioTimestamp","_lastVideoTimestamp","_lastAudioTimestamp","_colorSpace","_finalized","_validateOptions","validateOptions_fn","_createFileHeader","createFileHeader_fn","_writeEBMLHeader","writeEBMLHeader_fn","_createCodecPrivatePlaceholders","createCodecPrivatePlaceholders_fn","_createColourElement","createColourElement_fn","_createSeekHead","createSeekHead_fn","_createSegmentInfo","createSegmentInfo_fn","_createTracks","createTracks_fn","_createSegment","createSegment_fn","_createCues","createCues_fn","_maybeFlushStreamingTarget","maybeFlushStreamingTarget_fn","_segmentDataOffset","segmentDataOffset_get","_writeVideoDecoderConfig","writeVideoDecoderConfig_fn","_fixVP9ColorSpace","fixVP9ColorSpace_fn","_createInternalChunk","createInternalChunk_fn","_validateTimestamp","validateTimestamp_fn","_writeSimpleBlock","writeSimpleBlock_fn","_createCodecPrivateElement","createCodecPrivateElement_fn","_writeCodecPrivate","writeCodecPrivate_fn","_createNewCluster","createNewCluster_fn","_finalizeCurrentCluster","finalizeCurrentCluster_fn","_ensureNotFinalized","ensureNotFinalized_fn","__defProp","__getOwnPropDesc","__getOwnPropNames","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__pow","__defNormalProp","__spreadValues","__accessCheck","__privateGet","__privateAdd","__privateSet","__privateMethod","main_exports","EBMLFloat32","EBMLFloat64","measureUnsignedInt","measureEBMLVarInt","WriteTarget","ArrayBufferWriteTarget","FILE_CHUNK_SIZE","FileSystemWritableFileStreamWriteTarget","insertSectionIntoFileChunk","StreamingWriteTarget","MAX_CHUNK_LENGTH_MS","CODEC_PRIVATE_MAX_SIZE","APP_NAME","FIRST_TIMESTAMP_BEHAVIORS","WebMMuxer","main_default","readBits","writeBits","Object","defineProperty","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","prototype","hasOwnProperty","propertyIsEnumerable","Math","pow","obj","key","value","enumerable","configurable","writable","a","b","prop","call","member","msg","has","TypeError","getter","get","WeakSet","add","set","setter","method","__export","target","all","name","default","constructor","pos","offsets","WeakMap","dataOffsets","Uint8Array","DataView","buffer","seek","newPos","writeEBMLVarInt","width","setUint8","write","subarray","writeEBML","data","_b","Array","isArray","elem","sizePos","sizeSize","size","startPos","endPos","length","byteLength","setFloat32","setFloat64","str","split","map","x","charCodeAt","ArrayBuffer","ensureSize","newLength","newBuffer","newBytes","finalize","slice","stream","writeDataIntoChunks","flushChunks","position","chunkIndex","findIndex","start","createChunk","chunk","relativePosition","toWrite","min","end","written","shouldFlush","includesPosition","floor","push","sort","indexOf","force","section","type","splice","low","high","index","mid","max","onFlush","ensureMonotonicity","flush","done","chunks","sorted","lastChunk","isLastFlush","options","firstTimestampBehavior","FileSystemWritableFileStream","streaming","addVideoChunk","meta","timestamp","copyTo","addVideoChunkRaw","video","internalChunk","codec","audioChunk","shift","audio","addAudioChunk","addAudioChunkRaw","decoderConfig","description","videoChunk","segmentSize","includes","ebmlHeader","kaxCues","kaxInfo","kaxTracks","segmentDuration","tracksElement","frameRate","height","alpha","sampleRate","numberOfChannels","bitDepth","segment","colorSpace","matrix","transfer","primaries","Number","fullRange","profile","showExistingFrame","frameType","syncCode","colorSpaceID","trackNumber","firstTimestamp","lastTimestamp","msTime","shouldCreateNewClusterFromKeyFrame","prelude","view","setUint16","simpleBlock","element","clusterOffsetFromSegment","clusterSize","bytes","result","byte","bitIndex","byteIndex","__copyProps","to","from","except","desc","module","exports"],"sourceRoot":""}