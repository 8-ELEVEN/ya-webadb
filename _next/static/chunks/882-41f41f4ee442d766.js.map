{"version":3,"file":"static/chunks/882-41f41f4ee442d766.js","mappings":"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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.104.5_ib3m5ricvtkl2cll7qpr2f6lvq/node_modules/@fluentui/react/lib/components/src/components/Layer/LayerHost.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/webm-muxer@1.1.0/node_modules/webm-muxer/build/webm-muxer.js","webpack://_N_E/<anon>"],"sourcesContent":["import * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nimport type { ILayerHost, ILayerHostProps } from './LayerHost.types';\n\nexport const LayerHost: React.FunctionComponent<ILayerHostProps> = props => {\n  const { className } = props;\n\n  const [layerHostId] = React.useState(() => getId());\n\n  const { id: hostId = layerHostId } = props;\n\n  const layerHostRef = React.useRef<ILayerHost>({\n    hostId,\n    rootRef: React.useRef<HTMLDivElement | null>(null),\n    notifyLayersChanged: () => {\n      // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n    },\n  });\n\n  React.useImperativeHandle(props.componentRef, () => layerHostRef.current);\n\n  React.useEffect(() => {\n    registerLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useUnmount(() => {\n    unregisterLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n  });\n\n  return <div {...props} className={css('ms-LayerHost', className)} ref={layerHostRef.current.rootRef} />;\n};\n","\"use strict\";\nvar WebMMuxer = (() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __pow = Math.pow;\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n  // src/main.ts\n  var main_exports = {};\n  __export(main_exports, {\n    default: () => main_default\n  });\n\n  // src/ebml.ts\n  var EBMLFloat32 = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n  var EBMLFloat64 = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n\n  // src/write_target.ts\n  var WriteTarget = class {\n    constructor() {\n      this.pos = 0;\n      this.helper = new Uint8Array(8);\n      this.helperView = new DataView(this.helper.buffer);\n      this.offsets = /* @__PURE__ */ new WeakMap();\n      this.dataOffsets = /* @__PURE__ */ new WeakMap();\n    }\n    writeFloat32(value) {\n      this.helperView.setFloat32(0, value, false);\n      this.write(this.helper.subarray(0, 4));\n    }\n    writeFloat64(value) {\n      this.helperView.setFloat64(0, value, false);\n      this.write(this.helper);\n    }\n    writeUnsignedInt(value, width = measureUnsignedInt(value)) {\n      let pos = 0;\n      switch (width) {\n        case 6:\n          this.helperView.setUint8(pos++, value / __pow(2, 40) | 0);\n        case 5:\n          this.helperView.setUint8(pos++, value / __pow(2, 32) | 0);\n        case 4:\n          this.helperView.setUint8(pos++, value >> 24);\n        case 3:\n          this.helperView.setUint8(pos++, value >> 16);\n        case 2:\n          this.helperView.setUint8(pos++, value >> 8);\n        case 1:\n          this.helperView.setUint8(pos++, value);\n          break;\n        default:\n          throw new Error(\"Bad UINT size \" + width);\n      }\n      this.write(this.helper.subarray(0, pos));\n    }\n    writeEBMLVarInt(value, width = measureEBMLVarInt(value)) {\n      let pos = 0;\n      switch (width) {\n        case 1:\n          this.helperView.setUint8(pos++, 1 << 7 | value);\n          break;\n        case 2:\n          this.helperView.setUint8(pos++, 1 << 6 | value >> 8);\n          this.helperView.setUint8(pos++, value);\n          break;\n        case 3:\n          this.helperView.setUint8(pos++, 1 << 5 | value >> 16);\n          this.helperView.setUint8(pos++, value >> 8);\n          this.helperView.setUint8(pos++, value);\n          break;\n        case 4:\n          this.helperView.setUint8(pos++, 1 << 4 | value >> 24);\n          this.helperView.setUint8(pos++, value >> 16);\n          this.helperView.setUint8(pos++, value >> 8);\n          this.helperView.setUint8(pos++, value);\n          break;\n        case 5:\n          this.helperView.setUint8(pos++, 1 << 3 | value / __pow(2, 32) & 7);\n          this.helperView.setUint8(pos++, value >> 24);\n          this.helperView.setUint8(pos++, value >> 16);\n          this.helperView.setUint8(pos++, value >> 8);\n          this.helperView.setUint8(pos++, value);\n          break;\n        case 6:\n          this.helperView.setUint8(pos++, 1 << 2 | value / __pow(2, 40) & 3);\n          this.helperView.setUint8(pos++, value / __pow(2, 32) | 0);\n          this.helperView.setUint8(pos++, value >> 24);\n          this.helperView.setUint8(pos++, value >> 16);\n          this.helperView.setUint8(pos++, value >> 8);\n          this.helperView.setUint8(pos++, value);\n          break;\n        default:\n          throw new Error(\"Bad EBML VINT size \" + width);\n      }\n      this.write(this.helper.subarray(0, pos));\n    }\n    writeString(str) {\n      this.write(new Uint8Array(str.split(\"\").map((x) => x.charCodeAt(0))));\n    }\n    writeEBML(data) {\n      var _a, _b;\n      if (data instanceof Uint8Array) {\n        this.write(data);\n      } else if (Array.isArray(data)) {\n        for (let elem of data) {\n          this.writeEBML(elem);\n        }\n      } else {\n        this.offsets.set(data, this.pos);\n        this.writeUnsignedInt(data.id);\n        if (Array.isArray(data.data)) {\n          let sizePos = this.pos;\n          let sizeSize = (_a = data.size) != null ? _a : 4;\n          this.seek(this.pos + sizeSize);\n          let startPos = this.pos;\n          this.dataOffsets.set(data, startPos);\n          this.writeEBML(data.data);\n          let size = this.pos - startPos;\n          let endPos = this.pos;\n          this.seek(sizePos);\n          this.writeEBMLVarInt(size, sizeSize);\n          this.seek(endPos);\n        } else if (typeof data.data === \"number\") {\n          let size = (_b = data.size) != null ? _b : measureUnsignedInt(data.data);\n          this.writeEBMLVarInt(size);\n          this.writeUnsignedInt(data.data, size);\n        } else if (typeof data.data === \"string\") {\n          this.writeEBMLVarInt(data.data.length);\n          this.writeString(data.data);\n        } else if (data.data instanceof Uint8Array) {\n          this.writeEBMLVarInt(data.data.byteLength, data.size);\n          this.write(data.data);\n        } else if (data.data instanceof EBMLFloat32) {\n          this.writeEBMLVarInt(4);\n          this.writeFloat32(data.data.value);\n        } else if (data.data instanceof EBMLFloat64) {\n          this.writeEBMLVarInt(8);\n          this.writeFloat64(data.data.value);\n        }\n      }\n    }\n  };\n  var measureUnsignedInt = (value) => {\n    if (value < 1 << 8) {\n      return 1;\n    } else if (value < 1 << 16) {\n      return 2;\n    } else if (value < 1 << 24) {\n      return 3;\n    } else if (value < __pow(2, 32)) {\n      return 4;\n    } else if (value < __pow(2, 40)) {\n      return 5;\n    } else {\n      return 6;\n    }\n  };\n  var measureEBMLVarInt = (value) => {\n    if (value < (1 << 7) - 1) {\n      return 1;\n    } else if (value < (1 << 14) - 1) {\n      return 2;\n    } else if (value < (1 << 21) - 1) {\n      return 3;\n    } else if (value < (1 << 28) - 1) {\n      return 4;\n    } else if (value < __pow(2, 35) - 1) {\n      return 5;\n    } else if (value < __pow(2, 42) - 1) {\n      return 6;\n    } else {\n      throw new Error(\"EBML VINT size not supported \" + value);\n    }\n  };\n  var ArrayBufferWriteTarget = class extends WriteTarget {\n    constructor() {\n      super();\n      this.buffer = new ArrayBuffer(__pow(2, 16));\n      this.bytes = new Uint8Array(this.buffer);\n    }\n    ensureSize(size) {\n      let newLength = this.buffer.byteLength;\n      while (newLength < size)\n        newLength *= 2;\n      if (newLength === this.buffer.byteLength)\n        return;\n      let newBuffer = new ArrayBuffer(newLength);\n      let newBytes = new Uint8Array(newBuffer);\n      newBytes.set(this.bytes, 0);\n      this.buffer = newBuffer;\n      this.bytes = newBytes;\n    }\n    write(data) {\n      this.ensureSize(this.pos + data.byteLength);\n      this.bytes.set(data, this.pos);\n      this.pos += data.byteLength;\n    }\n    seek(newPos) {\n      this.pos = newPos;\n    }\n    finalize() {\n      this.ensureSize(this.pos);\n      return this.buffer.slice(0, this.pos);\n    }\n  };\n  var FILE_CHUNK_SIZE = __pow(2, 24);\n  var MAX_CHUNKS_AT_ONCE = 2;\n  var FileSystemWritableFileStreamWriteTarget = class extends WriteTarget {\n    constructor(stream) {\n      super();\n      this.chunks = [];\n      this.stream = stream;\n    }\n    write(data) {\n      this.writeDataIntoChunks(data, this.pos);\n      this.flushChunks();\n      this.pos += data.byteLength;\n    }\n    writeDataIntoChunks(data, position) {\n      let chunkIndex = this.chunks.findIndex((x) => x.start <= position && position < x.start + FILE_CHUNK_SIZE);\n      if (chunkIndex === -1)\n        chunkIndex = this.createChunk(position);\n      let chunk = this.chunks[chunkIndex];\n      let relativePosition = position - chunk.start;\n      let toWrite = data.subarray(0, Math.min(FILE_CHUNK_SIZE - relativePosition, data.byteLength));\n      chunk.data.set(toWrite, relativePosition);\n      let section = {\n        start: relativePosition,\n        end: relativePosition + toWrite.byteLength\n      };\n      insertSectionIntoFileChunk(chunk, section);\n      if (chunk.written[0].start === 0 && chunk.written[0].end === FILE_CHUNK_SIZE) {\n        chunk.shouldFlush = true;\n      }\n      if (this.chunks.length > MAX_CHUNKS_AT_ONCE) {\n        for (let i = 0; i < this.chunks.length - 1; i++) {\n          this.chunks[i].shouldFlush = true;\n        }\n        this.flushChunks();\n      }\n      if (toWrite.byteLength < data.byteLength) {\n        this.writeDataIntoChunks(data.subarray(toWrite.byteLength), position + toWrite.byteLength);\n      }\n    }\n    createChunk(includesPosition) {\n      let start = Math.floor(includesPosition / FILE_CHUNK_SIZE) * FILE_CHUNK_SIZE;\n      let chunk = {\n        start,\n        data: new Uint8Array(FILE_CHUNK_SIZE),\n        written: [],\n        shouldFlush: false\n      };\n      this.chunks.push(chunk);\n      this.chunks.sort((a, b) => a.start - b.start);\n      return this.chunks.indexOf(chunk);\n    }\n    flushChunks(force = false) {\n      for (let i = 0; i < this.chunks.length; i++) {\n        let chunk = this.chunks[i];\n        if (!chunk.shouldFlush && !force)\n          continue;\n        for (let section of chunk.written) {\n          this.stream.write({\n            type: \"write\",\n            data: chunk.data.subarray(section.start, section.end),\n            position: chunk.start + section.start\n          });\n        }\n        this.chunks.splice(i--, 1);\n      }\n    }\n    seek(newPos) {\n      this.pos = newPos;\n    }\n    finalize() {\n      this.flushChunks(true);\n    }\n  };\n  var insertSectionIntoFileChunk = (chunk, section) => {\n    let low = 0;\n    let high = chunk.written.length - 1;\n    let index = -1;\n    while (low <= high) {\n      let mid = Math.floor(low + (high - low + 1) / 2);\n      if (chunk.written[mid].start <= section.start) {\n        low = mid + 1;\n        index = mid;\n      } else {\n        high = mid - 1;\n      }\n    }\n    chunk.written.splice(index + 1, 0, section);\n    if (index === -1 || chunk.written[index].end < section.start)\n      index++;\n    while (index < chunk.written.length - 1 && chunk.written[index].end >= chunk.written[index + 1].start) {\n      chunk.written[index].end = Math.max(chunk.written[index].end, chunk.written[index + 1].end);\n      chunk.written.splice(index + 1, 1);\n    }\n  };\n\n  // src/main.ts\n  var VIDEO_TRACK_NUMBER = 1;\n  var AUDIO_TRACK_NUMBER = 2;\n  var VIDEO_TRACK_TYPE = 1;\n  var AUDIO_TRACK_TYPE = 2;\n  var MAX_CHUNK_LENGTH_MS = __pow(2, 15);\n  var CODEC_PRIVATE_MAX_SIZE = __pow(2, 12);\n  var APP_NAME = \"https://github.com/Vanilagy/webm-muxer\";\n  var SEGMENT_SIZE_BYTES = 6;\n  var CLUSTER_SIZE_BYTES = 5;\n  var WebMMuxer = class {\n    constructor(options) {\n      this.duration = 0;\n      this.videoChunkQueue = [];\n      this.audioChunkQueue = [];\n      this.lastVideoTimestamp = 0;\n      this.lastAudioTimestamp = 0;\n      this.finalized = false;\n      this.options = options;\n      if (options.target === \"buffer\") {\n        this.target = new ArrayBufferWriteTarget();\n      } else {\n        this.target = new FileSystemWritableFileStreamWriteTarget(options.target);\n      }\n      this.createFileHeader();\n    }\n    createFileHeader() {\n      this.writeEBMLHeader();\n      this.createSeekHead();\n      this.createSegmentInfo();\n      this.createTracks();\n      this.createSegment();\n      this.createCues();\n    }\n    writeEBMLHeader() {\n      let ebmlHeader = { id: 440786851 /* EBML */, data: [\n        { id: 17030 /* EBMLVersion */, data: 1 },\n        { id: 17143 /* EBMLReadVersion */, data: 1 },\n        { id: 17138 /* EBMLMaxIDLength */, data: 4 },\n        { id: 17139 /* EBMLMaxSizeLength */, data: 8 },\n        { id: 17026 /* DocType */, data: \"webm\" },\n        { id: 17031 /* DocTypeVersion */, data: 2 },\n        { id: 17029 /* DocTypeReadVersion */, data: 2 }\n      ] };\n      this.target.writeEBML(ebmlHeader);\n    }\n    createSeekHead() {\n      const kaxCues = new Uint8Array([28, 83, 187, 107]);\n      const kaxInfo = new Uint8Array([21, 73, 169, 102]);\n      const kaxTracks = new Uint8Array([22, 84, 174, 107]);\n      let seekHead = { id: 290298740 /* SeekHead */, data: [\n        { id: 19899 /* Seek */, data: [\n          { id: 21419 /* SeekID */, data: kaxCues },\n          { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n        ] },\n        { id: 19899 /* Seek */, data: [\n          { id: 21419 /* SeekID */, data: kaxInfo },\n          { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n        ] },\n        { id: 19899 /* Seek */, data: [\n          { id: 21419 /* SeekID */, data: kaxTracks },\n          { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n        ] }\n      ] };\n      this.seekHead = seekHead;\n    }\n    createSegmentInfo() {\n      let segmentDuration = { id: 17545 /* Duration */, data: new EBMLFloat64(0) };\n      this.segmentDuration = segmentDuration;\n      let segmentInfo = { id: 357149030 /* Info */, data: [\n        { id: 2807729 /* TimestampScale */, data: 1e6 },\n        { id: 19840 /* MuxingApp */, data: APP_NAME },\n        { id: 22337 /* WritingApp */, data: APP_NAME },\n        segmentDuration\n      ] };\n      this.segmentInfo = segmentInfo;\n    }\n    createTracks() {\n      let tracksElement = { id: 374648427 /* Tracks */, data: [] };\n      this.tracksElement = tracksElement;\n      if (this.options.video) {\n        this.videoCodecPrivate = { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) };\n        let colourElement = { id: 21936 /* Colour */, data: [\n          { id: 21937 /* MatrixCoefficients */, data: 2 },\n          { id: 21946 /* TransferCharacteristics */, data: 2 },\n          { id: 21947 /* Primaries */, data: 2 },\n          { id: 21945 /* Range */, data: 0 }\n        ] };\n        this.colourElement = colourElement;\n        tracksElement.data.push({ id: 174 /* TrackEntry */, data: [\n          { id: 215 /* TrackNumber */, data: VIDEO_TRACK_NUMBER },\n          { id: 29637 /* TrackUID */, data: VIDEO_TRACK_NUMBER },\n          { id: 131 /* TrackType */, data: VIDEO_TRACK_TYPE },\n          { id: 134 /* CodecID */, data: this.options.video.codec },\n          this.videoCodecPrivate,\n          this.options.video.frameRate ? { id: 2352003 /* DefaultDuration */, data: 1e9 / this.options.video.frameRate } : null,\n          { id: 224 /* Video */, data: [\n            { id: 176 /* PixelWidth */, data: this.options.video.width },\n            { id: 186 /* PixelHeight */, data: this.options.video.height },\n            colourElement\n          ] }\n        ].filter(Boolean) });\n      }\n      if (this.options.audio) {\n        this.audioCodecPrivate = { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) };\n        tracksElement.data.push({ id: 174 /* TrackEntry */, data: [\n          { id: 215 /* TrackNumber */, data: AUDIO_TRACK_NUMBER },\n          { id: 29637 /* TrackUID */, data: AUDIO_TRACK_NUMBER },\n          { id: 131 /* TrackType */, data: AUDIO_TRACK_TYPE },\n          { id: 134 /* CodecID */, data: this.options.audio.codec },\n          this.audioCodecPrivate,\n          { id: 225 /* Audio */, data: [\n            { id: 181 /* SamplingFrequency */, data: new EBMLFloat32(this.options.audio.sampleRate) },\n            { id: 159 /* Channels */, data: this.options.audio.numberOfChannels },\n            this.options.audio.bitDepth ? { id: 25188 /* BitDepth */, data: this.options.audio.bitDepth } : null\n          ].filter(Boolean) }\n        ] });\n      }\n    }\n    createSegment() {\n      let segment = { id: 408125543 /* Segment */, size: SEGMENT_SIZE_BYTES, data: [\n        this.seekHead,\n        this.segmentInfo,\n        this.tracksElement\n      ] };\n      this.segment = segment;\n      this.target.writeEBML(segment);\n    }\n    createCues() {\n      this.cues = { id: 475249515 /* Cues */, data: [] };\n    }\n    get segmentDataOffset() {\n      return this.target.dataOffsets.get(this.segment);\n    }\n    addVideoChunk(chunk, meta, timestamp) {\n      let data = new Uint8Array(chunk.byteLength);\n      chunk.copyTo(data);\n      this.addVideoChunkRaw(data, chunk.type, timestamp != null ? timestamp : chunk.timestamp, meta);\n    }\n    addVideoChunkRaw(data, type, timestamp, meta) {\n      this.ensureNotFinalized();\n      if (!this.options.video)\n        throw new Error(\"No video track declared.\");\n      if (meta)\n        this.writeVideoDecoderConfig(meta);\n      let internalChunk = this.createInternalChunk(data, type, timestamp, VIDEO_TRACK_NUMBER);\n      if (this.options.video.codec === \"V_VP9\")\n        this.fixVP9ColorSpace(internalChunk);\n      this.lastVideoTimestamp = internalChunk.timestamp;\n      while (this.audioChunkQueue.length > 0 && this.audioChunkQueue[0].timestamp <= internalChunk.timestamp) {\n        let audioChunk = this.audioChunkQueue.shift();\n        this.writeSimpleBlock(audioChunk);\n      }\n      if (!this.options.audio || internalChunk.timestamp <= this.lastAudioTimestamp) {\n        this.writeSimpleBlock(internalChunk);\n      } else {\n        this.videoChunkQueue.push(internalChunk);\n      }\n    }\n    writeVideoDecoderConfig(meta) {\n      if (meta.decoderConfig) {\n        if (meta.decoderConfig.colorSpace) {\n          let colorSpace = meta.decoderConfig.colorSpace;\n          this.colorSpace = colorSpace;\n          this.colourElement.data = [\n            { id: 21937 /* MatrixCoefficients */, data: {\n              \"rgb\": 1,\n              \"bt709\": 1,\n              \"bt470bg\": 5,\n              \"smpte170m\": 6\n            }[colorSpace.matrix] },\n            { id: 21946 /* TransferCharacteristics */, data: {\n              \"bt709\": 1,\n              \"smpte170m\": 6,\n              \"iec61966-2-1\": 13\n            }[colorSpace.transfer] },\n            { id: 21947 /* Primaries */, data: {\n              \"bt709\": 1,\n              \"bt470bg\": 5,\n              \"smpte170m\": 6\n            }[colorSpace.primaries] },\n            { id: 21945 /* Range */, data: [1, 2][Number(colorSpace.fullRange)] }\n          ];\n          let endPos = this.target.pos;\n          this.target.seek(this.target.offsets.get(this.colourElement));\n          this.target.writeEBML(this.colourElement);\n          this.target.seek(endPos);\n        }\n        if (meta.decoderConfig.description) {\n          this.writeCodecPrivate(this.videoCodecPrivate, meta.decoderConfig.description);\n        }\n      }\n    }\n    fixVP9ColorSpace(chunk) {\n      if (chunk.type !== \"key\")\n        return;\n      if (!this.colorSpace)\n        return;\n      let i = 0;\n      if (readBits(chunk.data, 0, 2) !== 2)\n        return;\n      i += 2;\n      let profile = (readBits(chunk.data, i + 1, i + 2) << 1) + readBits(chunk.data, i + 0, i + 1);\n      i += 2;\n      if (profile === 3)\n        i++;\n      let showExistingFrame = readBits(chunk.data, i + 0, i + 1);\n      i++;\n      if (showExistingFrame)\n        return;\n      let frameType = readBits(chunk.data, i + 0, i + 1);\n      i++;\n      if (frameType !== 0)\n        return;\n      i += 2;\n      let syncCode = readBits(chunk.data, i + 0, i + 24);\n      i += 24;\n      if (syncCode !== 4817730)\n        return;\n      if (profile >= 2)\n        i++;\n      let colorSpaceID = {\n        \"rgb\": 7,\n        \"bt709\": 2,\n        \"bt470bg\": 1,\n        \"smpte170m\": 3\n      }[this.colorSpace.matrix];\n      writeBits(chunk.data, i + 0, i + 3, colorSpaceID);\n    }\n    addAudioChunk(chunk, meta, timestamp) {\n      let data = new Uint8Array(chunk.byteLength);\n      chunk.copyTo(data);\n      this.addAudioChunkRaw(data, chunk.type, timestamp != null ? timestamp : chunk.timestamp, meta);\n    }\n    addAudioChunkRaw(data, type, timestamp, meta) {\n      this.ensureNotFinalized();\n      if (!this.options.audio)\n        throw new Error(\"No audio track declared.\");\n      let internalChunk = this.createInternalChunk(data, type, timestamp, AUDIO_TRACK_NUMBER);\n      this.lastAudioTimestamp = internalChunk.timestamp;\n      while (this.videoChunkQueue.length > 0 && this.videoChunkQueue[0].timestamp <= internalChunk.timestamp) {\n        let videoChunk = this.videoChunkQueue.shift();\n        this.writeSimpleBlock(videoChunk);\n      }\n      if (!this.options.video || internalChunk.timestamp <= this.lastVideoTimestamp) {\n        this.writeSimpleBlock(internalChunk);\n      } else {\n        this.audioChunkQueue.push(internalChunk);\n      }\n      if (meta == null ? void 0 : meta.decoderConfig) {\n        this.writeCodecPrivate(this.audioCodecPrivate, meta.decoderConfig.description);\n      }\n    }\n    createInternalChunk(data, type, timestamp, trackNumber) {\n      let internalChunk = {\n        data,\n        type,\n        timestamp,\n        trackNumber\n      };\n      return internalChunk;\n    }\n    writeSimpleBlock(chunk) {\n      let msTime = Math.floor(chunk.timestamp / 1e3);\n      let clusterIsTooLong = chunk.type !== \"key\" && msTime - this.currentClusterTimestamp >= MAX_CHUNK_LENGTH_MS;\n      if (clusterIsTooLong) {\n        throw new Error(\n          `Current Matroska cluster exceeded its maximum allowed length of ${MAX_CHUNK_LENGTH_MS} milliseconds. In order to produce a correct WebM file, you must pass in a video key frame at least every ${MAX_CHUNK_LENGTH_MS} milliseconds.`\n        );\n      }\n      let shouldCreateNewClusterFromKeyFrame = (chunk.trackNumber === VIDEO_TRACK_NUMBER || !this.options.video) && chunk.type === \"key\" && msTime - this.currentClusterTimestamp >= 1e3;\n      if (!this.currentCluster || shouldCreateNewClusterFromKeyFrame) {\n        this.createNewCluster(msTime);\n      }\n      let prelude = new Uint8Array(4);\n      let view = new DataView(prelude.buffer);\n      view.setUint8(0, 128 | chunk.trackNumber);\n      view.setUint16(1, msTime - this.currentClusterTimestamp, false);\n      view.setUint8(3, Number(chunk.type === \"key\") << 7);\n      let simpleBlock = { id: 163 /* SimpleBlock */, data: [\n        prelude,\n        chunk.data\n      ] };\n      this.target.writeEBML(simpleBlock);\n      this.duration = Math.max(this.duration, msTime);\n    }\n    writeCodecPrivate(element, data) {\n      let endPos = this.target.pos;\n      this.target.seek(this.target.offsets.get(element));\n      element = [\n        { id: 25506 /* CodecPrivate */, size: 4, data: new Uint8Array(data) },\n        { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE - 2 - 4 - data.byteLength) }\n      ];\n      this.target.writeEBML(element);\n      this.target.seek(endPos);\n    }\n    createNewCluster(timestamp) {\n      if (this.currentCluster) {\n        this.finalizeCurrentCluster();\n      }\n      this.currentCluster = { id: 524531317 /* Cluster */, size: CLUSTER_SIZE_BYTES, data: [\n        { id: 231 /* Timestamp */, data: timestamp }\n      ] };\n      this.target.writeEBML(this.currentCluster);\n      this.currentClusterTimestamp = timestamp;\n      let clusterOffsetFromSegment = this.target.offsets.get(this.currentCluster) - this.segmentDataOffset;\n      this.cues.data.push({ id: 187 /* CuePoint */, data: [\n        { id: 179 /* CueTime */, data: timestamp },\n        { id: 183 /* CueTrackPositions */, data: [\n          { id: 247 /* CueTrack */, data: VIDEO_TRACK_NUMBER },\n          { id: 241 /* CueClusterPosition */, data: clusterOffsetFromSegment }\n        ] }\n      ] });\n    }\n    finalizeCurrentCluster() {\n      let clusterSize = this.target.pos - this.target.dataOffsets.get(this.currentCluster);\n      let endPos = this.target.pos;\n      this.target.seek(this.target.offsets.get(this.currentCluster) + 4);\n      this.target.writeEBMLVarInt(clusterSize, CLUSTER_SIZE_BYTES);\n      this.target.seek(endPos);\n    }\n    finalize() {\n      while (this.videoChunkQueue.length > 0)\n        this.writeSimpleBlock(this.videoChunkQueue.shift());\n      while (this.audioChunkQueue.length > 0)\n        this.writeSimpleBlock(this.audioChunkQueue.shift());\n      this.finalizeCurrentCluster();\n      this.target.writeEBML(this.cues);\n      let endPos = this.target.pos;\n      let segmentSize = this.target.pos - this.segmentDataOffset;\n      this.target.seek(this.target.offsets.get(this.segment) + 4);\n      this.target.writeEBMLVarInt(segmentSize, SEGMENT_SIZE_BYTES);\n      this.segmentDuration.data = new EBMLFloat64(this.duration);\n      this.target.seek(this.target.offsets.get(this.segmentDuration));\n      this.target.writeEBML(this.segmentDuration);\n      this.seekHead.data[0].data[1].data = this.target.offsets.get(this.cues) - this.segmentDataOffset;\n      this.seekHead.data[1].data[1].data = this.target.offsets.get(this.segmentInfo) - this.segmentDataOffset;\n      this.seekHead.data[2].data[1].data = this.target.offsets.get(this.tracksElement) - this.segmentDataOffset;\n      this.target.seek(this.target.offsets.get(this.seekHead));\n      this.target.writeEBML(this.seekHead);\n      this.target.seek(endPos);\n      this.finalized = true;\n      if (this.target instanceof ArrayBufferWriteTarget) {\n        return this.target.finalize();\n      } else if (this.target instanceof FileSystemWritableFileStreamWriteTarget) {\n        this.target.finalize();\n      }\n      return null;\n    }\n    ensureNotFinalized() {\n      if (this.finalized) {\n        throw new Error(\"Cannot add new video or audio chunks after the file has been finalized.\");\n      }\n    }\n  };\n  var main_default = WebMMuxer;\n  var readBits = (bytes, start, end) => {\n    let result = 0;\n    for (let i = start; i < end; i++) {\n      let byteIndex = Math.floor(i / 8);\n      let byte = bytes[byteIndex];\n      let bitIndex = 7 - (i & 7);\n      let bit = (byte & 1 << bitIndex) >> bitIndex;\n      result <<= 1;\n      result |= bit;\n    }\n    return result;\n  };\n  var writeBits = (bytes, start, end, value) => {\n    for (let i = start; i < end; i++) {\n      let byteIndex = Math.floor(i / 8);\n      let byte = bytes[byteIndex];\n      let bitIndex = 7 - (i & 7);\n      byte &= ~(1 << bitIndex);\n      byte |= (value & 1 << end - i - 1) >> end - i - 1 << bitIndex;\n      bytes[byteIndex] = byte;\n    }\n  };\n  return __toCommonJS(main_exports);\n})();\nWebMMuxer = WebMMuxer.default;\nif (typeof module === \"object\" && typeof module.exports === \"object\") module.exports = WebMMuxer;\n"],"names":["LayerHost","props","className","layerHostId","react__WEBPACK_IMPORTED_MODULE_0__","useState","_Utilities__WEBPACK_IMPORTED_MODULE_1__","z","_a","id","hostId","layerHostRef","useRef","rootRef","notifyLayersChanged","useImperativeHandle","componentRef","current","useEffect","_Layer_notification__WEBPACK_IMPORTED_MODULE_2__","_Y","EQ","_fluentui_react_hooks__WEBPACK_IMPORTED_MODULE_3__","k","nw","createElement","tslib__WEBPACK_IMPORTED_MODULE_4__","pi","_Utilities__WEBPACK_IMPORTED_MODULE_5__","i","ref","__defProp","__getOwnPropDesc","__getOwnPropNames","__hasOwnProp","__pow","main_exports","EBMLFloat32","EBMLFloat64","WriteTarget","measureUnsignedInt","measureEBMLVarInt","ArrayBufferWriteTarget","FILE_CHUNK_SIZE","FileSystemWritableFileStreamWriteTarget","insertSectionIntoFileChunk","MAX_CHUNK_LENGTH_MS","CODEC_PRIVATE_MAX_SIZE","APP_NAME","main_default","readBits","writeBits","WebMMuxer","Object","defineProperty","getOwnPropertyDescriptor","getOwnPropertyNames","prototype","hasOwnProperty","Math","pow","__export","target","all","name","get","enumerable","default","constructor","value","pos","helper","Uint8Array","helperView","DataView","buffer","offsets","WeakMap","dataOffsets","writeFloat32","setFloat32","write","subarray","writeFloat64","setFloat64","writeUnsignedInt","width","setUint8","writeEBMLVarInt","writeString","str","split","map","x","charCodeAt","writeEBML","data","_b","Array","isArray","elem","set","sizePos","sizeSize","size","seek","startPos","endPos","length","byteLength","ArrayBuffer","bytes","ensureSize","newLength","newBuffer","newBytes","newPos","finalize","slice","stream","chunks","writeDataIntoChunks","flushChunks","position","chunkIndex","findIndex","start","createChunk","chunk","relativePosition","toWrite","min","end","written","shouldFlush","includesPosition","floor","push","sort","a","b","indexOf","force","section","type","splice","low","high","index","mid","max","options","duration","videoChunkQueue","audioChunkQueue","lastVideoTimestamp","lastAudioTimestamp","finalized","createFileHeader","writeEBMLHeader","createSeekHead","createSegmentInfo","createTracks","createSegment","createCues","kaxCues","kaxInfo","kaxTracks","seekHead","segmentDuration","segmentInfo","tracksElement","video","videoCodecPrivate","colourElement","codec","frameRate","height","filter","Boolean","audio","audioCodecPrivate","sampleRate","numberOfChannels","bitDepth","segment","cues","segmentDataOffset","addVideoChunk","meta","timestamp","copyTo","addVideoChunkRaw","ensureNotFinalized","writeVideoDecoderConfig","internalChunk","createInternalChunk","fixVP9ColorSpace","audioChunk","shift","writeSimpleBlock","decoderConfig","colorSpace","matrix","transfer","primaries","Number","fullRange","description","writeCodecPrivate","profile","showExistingFrame","frameType","syncCode","colorSpaceID","addAudioChunk","addAudioChunkRaw","videoChunk","trackNumber","msTime","currentClusterTimestamp","shouldCreateNewClusterFromKeyFrame","currentCluster","createNewCluster","prelude","view","setUint16","simpleBlock","element","finalizeCurrentCluster","clusterOffsetFromSegment","clusterSize","segmentSize","result","byte","bitIndex","byteIndex","__copyProps","to","from","except","desc","key","call","module","exports"],"sourceRoot":""}