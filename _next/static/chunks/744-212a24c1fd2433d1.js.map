{"version":3,"file":"static/chunks/744-212a24c1fd2433d1.js","mappings":"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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.104.7_5ndqzdd6t4rivxsukjv3i3ak2q/node_modules/@fluentui/react/lib/components/src/components/Layer/LayerHost.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/webm-muxer@1.1.9/node_modules/webm-muxer/build/webm-muxer.js","webpack://_N_E/<anon>"],"sourcesContent":["import * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nimport type { ILayerHost, ILayerHostProps } from './LayerHost.types';\n\nexport const LayerHost: React.FunctionComponent<ILayerHostProps> = props => {\n  const { className } = props;\n\n  const [layerHostId] = React.useState(() => getId());\n\n  const { id: hostId = layerHostId } = props;\n\n  const layerHostRef = React.useRef<ILayerHost>({\n    hostId,\n    rootRef: React.useRef<HTMLDivElement | null>(null),\n    notifyLayersChanged: () => {\n      // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n    },\n  });\n\n  React.useImperativeHandle(props.componentRef, () => layerHostRef.current);\n\n  React.useEffect(() => {\n    registerLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useUnmount(() => {\n    unregisterLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n  });\n\n  return <div {...props} className={css('ms-LayerHost', className)} ref={layerHostRef.current.rootRef} />;\n};\n","\"use strict\";\nvar WebMMuxer = (() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __pow = Math.pow;\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n  var __accessCheck = (obj, member, msg) => {\n    if (!member.has(obj))\n      throw TypeError(\"Cannot \" + msg);\n  };\n  var __privateGet = (obj, member, getter) => {\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n  };\n  var __privateAdd = (obj, member, value) => {\n    if (member.has(obj))\n      throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n  };\n  var __privateSet = (obj, member, value, setter) => {\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n  };\n  var __privateMethod = (obj, member, method) => {\n    __accessCheck(obj, member, \"access private method\");\n    return method;\n  };\n\n  // src/main.ts\n  var main_exports = {};\n  __export(main_exports, {\n    default: () => main_default\n  });\n\n  // src/ebml.ts\n  var EBMLFloat32 = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n  var EBMLFloat64 = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n\n  // src/write_target.ts\n  var WriteTarget = class {\n    constructor() {\n      this.pos = 0;\n      this.helper = new Uint8Array(8);\n      this.helperView = new DataView(this.helper.buffer);\n      this.offsets = /* @__PURE__ */ new WeakMap();\n      this.dataOffsets = /* @__PURE__ */ new WeakMap();\n    }\n    writeFloat32(value) {\n      this.helperView.setFloat32(0, value, false);\n      this.write(this.helper.subarray(0, 4));\n    }\n    writeFloat64(value) {\n      this.helperView.setFloat64(0, value, false);\n      this.write(this.helper);\n    }\n    writeUnsignedInt(value, width = measureUnsignedInt(value)) {\n      let pos = 0;\n      switch (width) {\n        case 6:\n          this.helperView.setUint8(pos++, value / __pow(2, 40) | 0);\n        case 5:\n          this.helperView.setUint8(pos++, value / __pow(2, 32) | 0);\n        case 4:\n          this.helperView.setUint8(pos++, value >> 24);\n        case 3:\n          this.helperView.setUint8(pos++, value >> 16);\n        case 2:\n          this.helperView.setUint8(pos++, value >> 8);\n        case 1:\n          this.helperView.setUint8(pos++, value);\n          break;\n        default:\n          throw new Error(\"Bad UINT size \" + width);\n      }\n      this.write(this.helper.subarray(0, pos));\n    }\n    writeEBMLVarInt(value, width = measureEBMLVarInt(value)) {\n      let pos = 0;\n      switch (width) {\n        case 1:\n          this.helperView.setUint8(pos++, 1 << 7 | value);\n          break;\n        case 2:\n          this.helperView.setUint8(pos++, 1 << 6 | value >> 8);\n          this.helperView.setUint8(pos++, value);\n          break;\n        case 3:\n          this.helperView.setUint8(pos++, 1 << 5 | value >> 16);\n          this.helperView.setUint8(pos++, value >> 8);\n          this.helperView.setUint8(pos++, value);\n          break;\n        case 4:\n          this.helperView.setUint8(pos++, 1 << 4 | value >> 24);\n          this.helperView.setUint8(pos++, value >> 16);\n          this.helperView.setUint8(pos++, value >> 8);\n          this.helperView.setUint8(pos++, value);\n          break;\n        case 5:\n          this.helperView.setUint8(pos++, 1 << 3 | value / __pow(2, 32) & 7);\n          this.helperView.setUint8(pos++, value >> 24);\n          this.helperView.setUint8(pos++, value >> 16);\n          this.helperView.setUint8(pos++, value >> 8);\n          this.helperView.setUint8(pos++, value);\n          break;\n        case 6:\n          this.helperView.setUint8(pos++, 1 << 2 | value / __pow(2, 40) & 3);\n          this.helperView.setUint8(pos++, value / __pow(2, 32) | 0);\n          this.helperView.setUint8(pos++, value >> 24);\n          this.helperView.setUint8(pos++, value >> 16);\n          this.helperView.setUint8(pos++, value >> 8);\n          this.helperView.setUint8(pos++, value);\n          break;\n        default:\n          throw new Error(\"Bad EBML VINT size \" + width);\n      }\n      this.write(this.helper.subarray(0, pos));\n    }\n    writeString(str) {\n      this.write(new Uint8Array(str.split(\"\").map((x) => x.charCodeAt(0))));\n    }\n    writeEBML(data) {\n      var _a, _b;\n      if (data instanceof Uint8Array) {\n        this.write(data);\n      } else if (Array.isArray(data)) {\n        for (let elem of data) {\n          this.writeEBML(elem);\n        }\n      } else {\n        this.offsets.set(data, this.pos);\n        this.writeUnsignedInt(data.id);\n        if (Array.isArray(data.data)) {\n          let sizePos = this.pos;\n          let sizeSize = (_a = data.size) != null ? _a : 4;\n          this.seek(this.pos + sizeSize);\n          let startPos = this.pos;\n          this.dataOffsets.set(data, startPos);\n          this.writeEBML(data.data);\n          let size = this.pos - startPos;\n          let endPos = this.pos;\n          this.seek(sizePos);\n          this.writeEBMLVarInt(size, sizeSize);\n          this.seek(endPos);\n        } else if (typeof data.data === \"number\") {\n          let size = (_b = data.size) != null ? _b : measureUnsignedInt(data.data);\n          this.writeEBMLVarInt(size);\n          this.writeUnsignedInt(data.data, size);\n        } else if (typeof data.data === \"string\") {\n          this.writeEBMLVarInt(data.data.length);\n          this.writeString(data.data);\n        } else if (data.data instanceof Uint8Array) {\n          this.writeEBMLVarInt(data.data.byteLength, data.size);\n          this.write(data.data);\n        } else if (data.data instanceof EBMLFloat32) {\n          this.writeEBMLVarInt(4);\n          this.writeFloat32(data.data.value);\n        } else if (data.data instanceof EBMLFloat64) {\n          this.writeEBMLVarInt(8);\n          this.writeFloat64(data.data.value);\n        }\n      }\n    }\n  };\n  var measureUnsignedInt = (value) => {\n    if (value < 1 << 8) {\n      return 1;\n    } else if (value < 1 << 16) {\n      return 2;\n    } else if (value < 1 << 24) {\n      return 3;\n    } else if (value < __pow(2, 32)) {\n      return 4;\n    } else if (value < __pow(2, 40)) {\n      return 5;\n    } else {\n      return 6;\n    }\n  };\n  var measureEBMLVarInt = (value) => {\n    if (value < (1 << 7) - 1) {\n      return 1;\n    } else if (value < (1 << 14) - 1) {\n      return 2;\n    } else if (value < (1 << 21) - 1) {\n      return 3;\n    } else if (value < (1 << 28) - 1) {\n      return 4;\n    } else if (value < __pow(2, 35) - 1) {\n      return 5;\n    } else if (value < __pow(2, 42) - 1) {\n      return 6;\n    } else {\n      throw new Error(\"EBML VINT size not supported \" + value);\n    }\n  };\n  var ArrayBufferWriteTarget = class extends WriteTarget {\n    constructor() {\n      super();\n      this.buffer = new ArrayBuffer(__pow(2, 16));\n      this.bytes = new Uint8Array(this.buffer);\n    }\n    ensureSize(size) {\n      let newLength = this.buffer.byteLength;\n      while (newLength < size)\n        newLength *= 2;\n      if (newLength === this.buffer.byteLength)\n        return;\n      let newBuffer = new ArrayBuffer(newLength);\n      let newBytes = new Uint8Array(newBuffer);\n      newBytes.set(this.bytes, 0);\n      this.buffer = newBuffer;\n      this.bytes = newBytes;\n    }\n    write(data) {\n      this.ensureSize(this.pos + data.byteLength);\n      this.bytes.set(data, this.pos);\n      this.pos += data.byteLength;\n    }\n    seek(newPos) {\n      this.pos = newPos;\n    }\n    finalize() {\n      this.ensureSize(this.pos);\n      return this.buffer.slice(0, this.pos);\n    }\n  };\n  var FILE_CHUNK_SIZE = __pow(2, 24);\n  var MAX_CHUNKS_AT_ONCE = 2;\n  var FileSystemWritableFileStreamWriteTarget = class extends WriteTarget {\n    constructor(stream) {\n      super();\n      this.chunks = [];\n      this.stream = stream;\n    }\n    write(data) {\n      this.writeDataIntoChunks(data, this.pos);\n      this.flushChunks();\n      this.pos += data.byteLength;\n    }\n    writeDataIntoChunks(data, position) {\n      let chunkIndex = this.chunks.findIndex((x) => x.start <= position && position < x.start + FILE_CHUNK_SIZE);\n      if (chunkIndex === -1)\n        chunkIndex = this.createChunk(position);\n      let chunk = this.chunks[chunkIndex];\n      let relativePosition = position - chunk.start;\n      let toWrite = data.subarray(0, Math.min(FILE_CHUNK_SIZE - relativePosition, data.byteLength));\n      chunk.data.set(toWrite, relativePosition);\n      let section = {\n        start: relativePosition,\n        end: relativePosition + toWrite.byteLength\n      };\n      insertSectionIntoFileChunk(chunk, section);\n      if (chunk.written[0].start === 0 && chunk.written[0].end === FILE_CHUNK_SIZE) {\n        chunk.shouldFlush = true;\n      }\n      if (this.chunks.length > MAX_CHUNKS_AT_ONCE) {\n        for (let i = 0; i < this.chunks.length - 1; i++) {\n          this.chunks[i].shouldFlush = true;\n        }\n        this.flushChunks();\n      }\n      if (toWrite.byteLength < data.byteLength) {\n        this.writeDataIntoChunks(data.subarray(toWrite.byteLength), position + toWrite.byteLength);\n      }\n    }\n    createChunk(includesPosition) {\n      let start = Math.floor(includesPosition / FILE_CHUNK_SIZE) * FILE_CHUNK_SIZE;\n      let chunk = {\n        start,\n        data: new Uint8Array(FILE_CHUNK_SIZE),\n        written: [],\n        shouldFlush: false\n      };\n      this.chunks.push(chunk);\n      this.chunks.sort((a, b) => a.start - b.start);\n      return this.chunks.indexOf(chunk);\n    }\n    flushChunks(force = false) {\n      for (let i = 0; i < this.chunks.length; i++) {\n        let chunk = this.chunks[i];\n        if (!chunk.shouldFlush && !force)\n          continue;\n        for (let section of chunk.written) {\n          this.stream.write({\n            type: \"write\",\n            data: chunk.data.subarray(section.start, section.end),\n            position: chunk.start + section.start\n          });\n        }\n        this.chunks.splice(i--, 1);\n      }\n    }\n    seek(newPos) {\n      this.pos = newPos;\n    }\n    finalize() {\n      this.flushChunks(true);\n    }\n  };\n  var insertSectionIntoFileChunk = (chunk, section) => {\n    let low = 0;\n    let high = chunk.written.length - 1;\n    let index = -1;\n    while (low <= high) {\n      let mid = Math.floor(low + (high - low + 1) / 2);\n      if (chunk.written[mid].start <= section.start) {\n        low = mid + 1;\n        index = mid;\n      } else {\n        high = mid - 1;\n      }\n    }\n    chunk.written.splice(index + 1, 0, section);\n    if (index === -1 || chunk.written[index].end < section.start)\n      index++;\n    while (index < chunk.written.length - 1 && chunk.written[index].end >= chunk.written[index + 1].start) {\n      chunk.written[index].end = Math.max(chunk.written[index].end, chunk.written[index + 1].end);\n      chunk.written.splice(index + 1, 1);\n    }\n  };\n\n  // src/main.ts\n  var VIDEO_TRACK_NUMBER = 1;\n  var AUDIO_TRACK_NUMBER = 2;\n  var VIDEO_TRACK_TYPE = 1;\n  var AUDIO_TRACK_TYPE = 2;\n  var MAX_CHUNK_LENGTH_MS = __pow(2, 15);\n  var CODEC_PRIVATE_MAX_SIZE = __pow(2, 12);\n  var APP_NAME = \"https://github.com/Vanilagy/webm-muxer\";\n  var SEGMENT_SIZE_BYTES = 6;\n  var CLUSTER_SIZE_BYTES = 5;\n  var _target, _options, _segment, _segmentInfo, _seekHead, _tracksElement, _segmentDuration, _colourElement, _videoCodecPrivate, _audioCodecPrivate, _cues, _currentCluster, _currentClusterTimestamp, _duration, _videoChunkQueue, _audioChunkQueue, _lastVideoTimestamp, _lastAudioTimestamp, _colorSpace, _finalized, _createFileHeader, createFileHeader_fn, _writeEBMLHeader, writeEBMLHeader_fn, _createSeekHead, createSeekHead_fn, _createSegmentInfo, createSegmentInfo_fn, _createTracks, createTracks_fn, _createSegment, createSegment_fn, _createCues, createCues_fn, _segmentDataOffset, segmentDataOffset_get, _writeVideoDecoderConfig, writeVideoDecoderConfig_fn, _fixVP9ColorSpace, fixVP9ColorSpace_fn, _createInternalChunk, createInternalChunk_fn, _writeSimpleBlock, writeSimpleBlock_fn, _writeCodecPrivate, writeCodecPrivate_fn, _createNewCluster, createNewCluster_fn, _finalizeCurrentCluster, finalizeCurrentCluster_fn, _ensureNotFinalized, ensureNotFinalized_fn;\n  var WebMMuxer = class {\n    constructor(options) {\n      __privateAdd(this, _createFileHeader);\n      __privateAdd(this, _writeEBMLHeader);\n      __privateAdd(this, _createSeekHead);\n      __privateAdd(this, _createSegmentInfo);\n      __privateAdd(this, _createTracks);\n      __privateAdd(this, _createSegment);\n      __privateAdd(this, _createCues);\n      __privateAdd(this, _segmentDataOffset);\n      __privateAdd(this, _writeVideoDecoderConfig);\n      __privateAdd(this, _fixVP9ColorSpace);\n      __privateAdd(this, _createInternalChunk);\n      __privateAdd(this, _writeSimpleBlock);\n      __privateAdd(this, _writeCodecPrivate);\n      __privateAdd(this, _createNewCluster);\n      __privateAdd(this, _finalizeCurrentCluster);\n      __privateAdd(this, _ensureNotFinalized);\n      __privateAdd(this, _target, void 0);\n      __privateAdd(this, _options, void 0);\n      __privateAdd(this, _segment, void 0);\n      __privateAdd(this, _segmentInfo, void 0);\n      __privateAdd(this, _seekHead, void 0);\n      __privateAdd(this, _tracksElement, void 0);\n      __privateAdd(this, _segmentDuration, void 0);\n      __privateAdd(this, _colourElement, void 0);\n      __privateAdd(this, _videoCodecPrivate, void 0);\n      __privateAdd(this, _audioCodecPrivate, void 0);\n      __privateAdd(this, _cues, void 0);\n      __privateAdd(this, _currentCluster, void 0);\n      __privateAdd(this, _currentClusterTimestamp, void 0);\n      __privateAdd(this, _duration, 0);\n      __privateAdd(this, _videoChunkQueue, []);\n      __privateAdd(this, _audioChunkQueue, []);\n      __privateAdd(this, _lastVideoTimestamp, 0);\n      __privateAdd(this, _lastAudioTimestamp, 0);\n      __privateAdd(this, _colorSpace, void 0);\n      __privateAdd(this, _finalized, false);\n      __privateSet(this, _options, options);\n      if (options.target === \"buffer\") {\n        __privateSet(this, _target, new ArrayBufferWriteTarget());\n      } else {\n        __privateSet(this, _target, new FileSystemWritableFileStreamWriteTarget(options.target));\n      }\n      __privateMethod(this, _createFileHeader, createFileHeader_fn).call(this);\n    }\n    addVideoChunk(chunk, meta, timestamp) {\n      let data = new Uint8Array(chunk.byteLength);\n      chunk.copyTo(data);\n      this.addVideoChunkRaw(data, chunk.type, timestamp != null ? timestamp : chunk.timestamp, meta);\n    }\n    addVideoChunkRaw(data, type, timestamp, meta) {\n      __privateMethod(this, _ensureNotFinalized, ensureNotFinalized_fn).call(this);\n      if (!__privateGet(this, _options).video)\n        throw new Error(\"No video track declared.\");\n      if (meta)\n        __privateMethod(this, _writeVideoDecoderConfig, writeVideoDecoderConfig_fn).call(this, meta);\n      let internalChunk = __privateMethod(this, _createInternalChunk, createInternalChunk_fn).call(this, data, type, timestamp, VIDEO_TRACK_NUMBER);\n      if (__privateGet(this, _options).video.codec === \"V_VP9\")\n        __privateMethod(this, _fixVP9ColorSpace, fixVP9ColorSpace_fn).call(this, internalChunk);\n      __privateSet(this, _lastVideoTimestamp, internalChunk.timestamp);\n      while (__privateGet(this, _audioChunkQueue).length > 0 && __privateGet(this, _audioChunkQueue)[0].timestamp <= internalChunk.timestamp) {\n        let audioChunk = __privateGet(this, _audioChunkQueue).shift();\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, audioChunk);\n      }\n      if (!__privateGet(this, _options).audio || internalChunk.timestamp <= __privateGet(this, _lastAudioTimestamp)) {\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, internalChunk);\n      } else {\n        __privateGet(this, _videoChunkQueue).push(internalChunk);\n      }\n    }\n    addAudioChunk(chunk, meta, timestamp) {\n      let data = new Uint8Array(chunk.byteLength);\n      chunk.copyTo(data);\n      this.addAudioChunkRaw(data, chunk.type, timestamp != null ? timestamp : chunk.timestamp, meta);\n    }\n    addAudioChunkRaw(data, type, timestamp, meta) {\n      __privateMethod(this, _ensureNotFinalized, ensureNotFinalized_fn).call(this);\n      if (!__privateGet(this, _options).audio)\n        throw new Error(\"No audio track declared.\");\n      let internalChunk = __privateMethod(this, _createInternalChunk, createInternalChunk_fn).call(this, data, type, timestamp, AUDIO_TRACK_NUMBER);\n      __privateSet(this, _lastAudioTimestamp, internalChunk.timestamp);\n      while (__privateGet(this, _videoChunkQueue).length > 0 && __privateGet(this, _videoChunkQueue)[0].timestamp <= internalChunk.timestamp) {\n        let videoChunk = __privateGet(this, _videoChunkQueue).shift();\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, videoChunk);\n      }\n      if (!__privateGet(this, _options).video || internalChunk.timestamp <= __privateGet(this, _lastVideoTimestamp)) {\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, internalChunk);\n      } else {\n        __privateGet(this, _audioChunkQueue).push(internalChunk);\n      }\n      if (meta == null ? void 0 : meta.decoderConfig) {\n        __privateMethod(this, _writeCodecPrivate, writeCodecPrivate_fn).call(this, __privateGet(this, _audioCodecPrivate), meta.decoderConfig.description);\n      }\n    }\n    finalize() {\n      while (__privateGet(this, _videoChunkQueue).length > 0)\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, __privateGet(this, _videoChunkQueue).shift());\n      while (__privateGet(this, _audioChunkQueue).length > 0)\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, __privateGet(this, _audioChunkQueue).shift());\n      __privateMethod(this, _finalizeCurrentCluster, finalizeCurrentCluster_fn).call(this);\n      __privateGet(this, _target).writeEBML(__privateGet(this, _cues));\n      let endPos = __privateGet(this, _target).pos;\n      let segmentSize = __privateGet(this, _target).pos - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n      __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _segment)) + 4);\n      __privateGet(this, _target).writeEBMLVarInt(segmentSize, SEGMENT_SIZE_BYTES);\n      __privateGet(this, _segmentDuration).data = new EBMLFloat64(__privateGet(this, _duration));\n      __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _segmentDuration)));\n      __privateGet(this, _target).writeEBML(__privateGet(this, _segmentDuration));\n      __privateGet(this, _seekHead).data[0].data[1].data = __privateGet(this, _target).offsets.get(__privateGet(this, _cues)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n      __privateGet(this, _seekHead).data[1].data[1].data = __privateGet(this, _target).offsets.get(__privateGet(this, _segmentInfo)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n      __privateGet(this, _seekHead).data[2].data[1].data = __privateGet(this, _target).offsets.get(__privateGet(this, _tracksElement)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n      __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _seekHead)));\n      __privateGet(this, _target).writeEBML(__privateGet(this, _seekHead));\n      __privateGet(this, _target).seek(endPos);\n      __privateSet(this, _finalized, true);\n      if (__privateGet(this, _target) instanceof ArrayBufferWriteTarget) {\n        return __privateGet(this, _target).finalize();\n      } else if (__privateGet(this, _target) instanceof FileSystemWritableFileStreamWriteTarget) {\n        __privateGet(this, _target).finalize();\n      }\n      return null;\n    }\n  };\n  _target = new WeakMap();\n  _options = new WeakMap();\n  _segment = new WeakMap();\n  _segmentInfo = new WeakMap();\n  _seekHead = new WeakMap();\n  _tracksElement = new WeakMap();\n  _segmentDuration = new WeakMap();\n  _colourElement = new WeakMap();\n  _videoCodecPrivate = new WeakMap();\n  _audioCodecPrivate = new WeakMap();\n  _cues = new WeakMap();\n  _currentCluster = new WeakMap();\n  _currentClusterTimestamp = new WeakMap();\n  _duration = new WeakMap();\n  _videoChunkQueue = new WeakMap();\n  _audioChunkQueue = new WeakMap();\n  _lastVideoTimestamp = new WeakMap();\n  _lastAudioTimestamp = new WeakMap();\n  _colorSpace = new WeakMap();\n  _finalized = new WeakMap();\n  _createFileHeader = new WeakSet();\n  createFileHeader_fn = function() {\n    __privateMethod(this, _writeEBMLHeader, writeEBMLHeader_fn).call(this);\n    __privateMethod(this, _createSeekHead, createSeekHead_fn).call(this);\n    __privateMethod(this, _createSegmentInfo, createSegmentInfo_fn).call(this);\n    __privateMethod(this, _createTracks, createTracks_fn).call(this);\n    __privateMethod(this, _createSegment, createSegment_fn).call(this);\n    __privateMethod(this, _createCues, createCues_fn).call(this);\n  };\n  _writeEBMLHeader = new WeakSet();\n  writeEBMLHeader_fn = function() {\n    let ebmlHeader = { id: 440786851 /* EBML */, data: [\n      { id: 17030 /* EBMLVersion */, data: 1 },\n      { id: 17143 /* EBMLReadVersion */, data: 1 },\n      { id: 17138 /* EBMLMaxIDLength */, data: 4 },\n      { id: 17139 /* EBMLMaxSizeLength */, data: 8 },\n      { id: 17026 /* DocType */, data: \"webm\" },\n      { id: 17031 /* DocTypeVersion */, data: 2 },\n      { id: 17029 /* DocTypeReadVersion */, data: 2 }\n    ] };\n    __privateGet(this, _target).writeEBML(ebmlHeader);\n  };\n  _createSeekHead = new WeakSet();\n  createSeekHead_fn = function() {\n    const kaxCues = new Uint8Array([28, 83, 187, 107]);\n    const kaxInfo = new Uint8Array([21, 73, 169, 102]);\n    const kaxTracks = new Uint8Array([22, 84, 174, 107]);\n    let seekHead = { id: 290298740 /* SeekHead */, data: [\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxCues },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] },\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxInfo },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] },\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxTracks },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] }\n    ] };\n    __privateSet(this, _seekHead, seekHead);\n  };\n  _createSegmentInfo = new WeakSet();\n  createSegmentInfo_fn = function() {\n    let segmentDuration = { id: 17545 /* Duration */, data: new EBMLFloat64(0) };\n    __privateSet(this, _segmentDuration, segmentDuration);\n    let segmentInfo = { id: 357149030 /* Info */, data: [\n      { id: 2807729 /* TimestampScale */, data: 1e6 },\n      { id: 19840 /* MuxingApp */, data: APP_NAME },\n      { id: 22337 /* WritingApp */, data: APP_NAME },\n      segmentDuration\n    ] };\n    __privateSet(this, _segmentInfo, segmentInfo);\n  };\n  _createTracks = new WeakSet();\n  createTracks_fn = function() {\n    let tracksElement = { id: 374648427 /* Tracks */, data: [] };\n    __privateSet(this, _tracksElement, tracksElement);\n    if (__privateGet(this, _options).video) {\n      __privateSet(this, _videoCodecPrivate, { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) });\n      let colourElement = { id: 21936 /* Colour */, data: [\n        { id: 21937 /* MatrixCoefficients */, data: 2 },\n        { id: 21946 /* TransferCharacteristics */, data: 2 },\n        { id: 21947 /* Primaries */, data: 2 },\n        { id: 21945 /* Range */, data: 0 }\n      ] };\n      __privateSet(this, _colourElement, colourElement);\n      tracksElement.data.push({ id: 174 /* TrackEntry */, data: [\n        { id: 215 /* TrackNumber */, data: VIDEO_TRACK_NUMBER },\n        { id: 29637 /* TrackUID */, data: VIDEO_TRACK_NUMBER },\n        { id: 131 /* TrackType */, data: VIDEO_TRACK_TYPE },\n        { id: 134 /* CodecID */, data: __privateGet(this, _options).video.codec },\n        __privateGet(this, _videoCodecPrivate),\n        __privateGet(this, _options).video.frameRate ? { id: 2352003 /* DefaultDuration */, data: 1e9 / __privateGet(this, _options).video.frameRate } : null,\n        { id: 224 /* Video */, data: [\n          { id: 176 /* PixelWidth */, data: __privateGet(this, _options).video.width },\n          { id: 186 /* PixelHeight */, data: __privateGet(this, _options).video.height },\n          colourElement\n        ] }\n      ].filter(Boolean) });\n    }\n    if (__privateGet(this, _options).audio) {\n      __privateSet(this, _audioCodecPrivate, { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) });\n      tracksElement.data.push({ id: 174 /* TrackEntry */, data: [\n        { id: 215 /* TrackNumber */, data: AUDIO_TRACK_NUMBER },\n        { id: 29637 /* TrackUID */, data: AUDIO_TRACK_NUMBER },\n        { id: 131 /* TrackType */, data: AUDIO_TRACK_TYPE },\n        { id: 134 /* CodecID */, data: __privateGet(this, _options).audio.codec },\n        __privateGet(this, _audioCodecPrivate),\n        { id: 225 /* Audio */, data: [\n          { id: 181 /* SamplingFrequency */, data: new EBMLFloat32(__privateGet(this, _options).audio.sampleRate) },\n          { id: 159 /* Channels */, data: __privateGet(this, _options).audio.numberOfChannels },\n          __privateGet(this, _options).audio.bitDepth ? { id: 25188 /* BitDepth */, data: __privateGet(this, _options).audio.bitDepth } : null\n        ].filter(Boolean) }\n      ] });\n    }\n  };\n  _createSegment = new WeakSet();\n  createSegment_fn = function() {\n    let segment = { id: 408125543 /* Segment */, size: SEGMENT_SIZE_BYTES, data: [\n      __privateGet(this, _seekHead),\n      __privateGet(this, _segmentInfo),\n      __privateGet(this, _tracksElement)\n    ] };\n    __privateSet(this, _segment, segment);\n    __privateGet(this, _target).writeEBML(segment);\n  };\n  _createCues = new WeakSet();\n  createCues_fn = function() {\n    __privateSet(this, _cues, { id: 475249515 /* Cues */, data: [] });\n  };\n  _segmentDataOffset = new WeakSet();\n  segmentDataOffset_get = function() {\n    return __privateGet(this, _target).dataOffsets.get(__privateGet(this, _segment));\n  };\n  _writeVideoDecoderConfig = new WeakSet();\n  writeVideoDecoderConfig_fn = function(meta) {\n    if (meta.decoderConfig) {\n      if (meta.decoderConfig.colorSpace) {\n        let colorSpace = meta.decoderConfig.colorSpace;\n        __privateSet(this, _colorSpace, colorSpace);\n        __privateGet(this, _colourElement).data = [\n          { id: 21937 /* MatrixCoefficients */, data: {\n            \"rgb\": 1,\n            \"bt709\": 1,\n            \"bt470bg\": 5,\n            \"smpte170m\": 6\n          }[colorSpace.matrix] },\n          { id: 21946 /* TransferCharacteristics */, data: {\n            \"bt709\": 1,\n            \"smpte170m\": 6,\n            \"iec61966-2-1\": 13\n          }[colorSpace.transfer] },\n          { id: 21947 /* Primaries */, data: {\n            \"bt709\": 1,\n            \"bt470bg\": 5,\n            \"smpte170m\": 6\n          }[colorSpace.primaries] },\n          { id: 21945 /* Range */, data: [1, 2][Number(colorSpace.fullRange)] }\n        ];\n        let endPos = __privateGet(this, _target).pos;\n        __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _colourElement)));\n        __privateGet(this, _target).writeEBML(__privateGet(this, _colourElement));\n        __privateGet(this, _target).seek(endPos);\n      }\n      if (meta.decoderConfig.description) {\n        __privateMethod(this, _writeCodecPrivate, writeCodecPrivate_fn).call(this, __privateGet(this, _videoCodecPrivate), meta.decoderConfig.description);\n      }\n    }\n  };\n  _fixVP9ColorSpace = new WeakSet();\n  fixVP9ColorSpace_fn = function(chunk) {\n    if (chunk.type !== \"key\")\n      return;\n    if (!__privateGet(this, _colorSpace))\n      return;\n    let i = 0;\n    if (readBits(chunk.data, 0, 2) !== 2)\n      return;\n    i += 2;\n    let profile = (readBits(chunk.data, i + 1, i + 2) << 1) + readBits(chunk.data, i + 0, i + 1);\n    i += 2;\n    if (profile === 3)\n      i++;\n    let showExistingFrame = readBits(chunk.data, i + 0, i + 1);\n    i++;\n    if (showExistingFrame)\n      return;\n    let frameType = readBits(chunk.data, i + 0, i + 1);\n    i++;\n    if (frameType !== 0)\n      return;\n    i += 2;\n    let syncCode = readBits(chunk.data, i + 0, i + 24);\n    i += 24;\n    if (syncCode !== 4817730)\n      return;\n    if (profile >= 2)\n      i++;\n    let colorSpaceID = {\n      \"rgb\": 7,\n      \"bt709\": 2,\n      \"bt470bg\": 1,\n      \"smpte170m\": 3\n    }[__privateGet(this, _colorSpace).matrix];\n    writeBits(chunk.data, i + 0, i + 3, colorSpaceID);\n  };\n  _createInternalChunk = new WeakSet();\n  createInternalChunk_fn = function(data, type, timestamp, trackNumber) {\n    let internalChunk = {\n      data,\n      type,\n      timestamp,\n      trackNumber\n    };\n    return internalChunk;\n  };\n  _writeSimpleBlock = new WeakSet();\n  writeSimpleBlock_fn = function(chunk) {\n    let msTime = Math.floor(chunk.timestamp / 1e3);\n    let clusterIsTooLong = chunk.type !== \"key\" && msTime - __privateGet(this, _currentClusterTimestamp) >= MAX_CHUNK_LENGTH_MS;\n    if (clusterIsTooLong) {\n      throw new Error(\n        `Current Matroska cluster exceeded its maximum allowed length of ${MAX_CHUNK_LENGTH_MS} milliseconds. In order to produce a correct WebM file, you must pass in a video key frame at least every ${MAX_CHUNK_LENGTH_MS} milliseconds.`\n      );\n    }\n    let shouldCreateNewClusterFromKeyFrame = (chunk.trackNumber === VIDEO_TRACK_NUMBER || !__privateGet(this, _options).video) && chunk.type === \"key\" && msTime - __privateGet(this, _currentClusterTimestamp) >= 1e3;\n    if (!__privateGet(this, _currentCluster) || shouldCreateNewClusterFromKeyFrame) {\n      __privateMethod(this, _createNewCluster, createNewCluster_fn).call(this, msTime);\n    }\n    let prelude = new Uint8Array(4);\n    let view = new DataView(prelude.buffer);\n    view.setUint8(0, 128 | chunk.trackNumber);\n    view.setUint16(1, msTime - __privateGet(this, _currentClusterTimestamp), false);\n    view.setUint8(3, Number(chunk.type === \"key\") << 7);\n    let simpleBlock = { id: 163 /* SimpleBlock */, data: [\n      prelude,\n      chunk.data\n    ] };\n    __privateGet(this, _target).writeEBML(simpleBlock);\n    __privateSet(this, _duration, Math.max(__privateGet(this, _duration), msTime));\n  };\n  _writeCodecPrivate = new WeakSet();\n  writeCodecPrivate_fn = function(element, data) {\n    let endPos = __privateGet(this, _target).pos;\n    __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(element));\n    element = [\n      { id: 25506 /* CodecPrivate */, size: 4, data: new Uint8Array(data) },\n      { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE - 2 - 4 - data.byteLength) }\n    ];\n    __privateGet(this, _target).writeEBML(element);\n    __privateGet(this, _target).seek(endPos);\n  };\n  _createNewCluster = new WeakSet();\n  createNewCluster_fn = function(timestamp) {\n    if (__privateGet(this, _currentCluster)) {\n      __privateMethod(this, _finalizeCurrentCluster, finalizeCurrentCluster_fn).call(this);\n    }\n    __privateSet(this, _currentCluster, { id: 524531317 /* Cluster */, size: CLUSTER_SIZE_BYTES, data: [\n      { id: 231 /* Timestamp */, data: timestamp }\n    ] });\n    __privateGet(this, _target).writeEBML(__privateGet(this, _currentCluster));\n    __privateSet(this, _currentClusterTimestamp, timestamp);\n    let clusterOffsetFromSegment = __privateGet(this, _target).offsets.get(__privateGet(this, _currentCluster)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n    __privateGet(this, _cues).data.push({ id: 187 /* CuePoint */, data: [\n      { id: 179 /* CueTime */, data: timestamp },\n      { id: 183 /* CueTrackPositions */, data: [\n        { id: 247 /* CueTrack */, data: VIDEO_TRACK_NUMBER },\n        { id: 241 /* CueClusterPosition */, data: clusterOffsetFromSegment }\n      ] }\n    ] });\n  };\n  _finalizeCurrentCluster = new WeakSet();\n  finalizeCurrentCluster_fn = function() {\n    let clusterSize = __privateGet(this, _target).pos - __privateGet(this, _target).dataOffsets.get(__privateGet(this, _currentCluster));\n    let endPos = __privateGet(this, _target).pos;\n    __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _currentCluster)) + 4);\n    __privateGet(this, _target).writeEBMLVarInt(clusterSize, CLUSTER_SIZE_BYTES);\n    __privateGet(this, _target).seek(endPos);\n  };\n  _ensureNotFinalized = new WeakSet();\n  ensureNotFinalized_fn = function() {\n    if (__privateGet(this, _finalized)) {\n      throw new Error(\"Cannot add new video or audio chunks after the file has been finalized.\");\n    }\n  };\n  var main_default = WebMMuxer;\n  var readBits = (bytes, start, end) => {\n    let result = 0;\n    for (let i = start; i < end; i++) {\n      let byteIndex = Math.floor(i / 8);\n      let byte = bytes[byteIndex];\n      let bitIndex = 7 - (i & 7);\n      let bit = (byte & 1 << bitIndex) >> bitIndex;\n      result <<= 1;\n      result |= bit;\n    }\n    return result;\n  };\n  var writeBits = (bytes, start, end, value) => {\n    for (let i = start; i < end; i++) {\n      let byteIndex = Math.floor(i / 8);\n      let byte = bytes[byteIndex];\n      let bitIndex = 7 - (i & 7);\n      byte &= ~(1 << bitIndex);\n      byte |= (value & 1 << end - i - 1) >> end - i - 1 << bitIndex;\n      bytes[byteIndex] = byte;\n    }\n  };\n  return __toCommonJS(main_exports);\n})();\nWebMMuxer = WebMMuxer.default;\nif (typeof module === \"object\" && typeof module.exports === \"object\") module.exports = WebMMuxer;\n"],"names":["LayerHost","props","className","layerHostId","react__WEBPACK_IMPORTED_MODULE_0__","useState","_Utilities__WEBPACK_IMPORTED_MODULE_1__","z","_a","id","hostId","layerHostRef","useRef","rootRef","notifyLayersChanged","useImperativeHandle","componentRef","current","useEffect","_Layer_notification__WEBPACK_IMPORTED_MODULE_2__","_Y","EQ","_fluentui_react_hooks__WEBPACK_IMPORTED_MODULE_3__","k","nw","createElement","tslib__WEBPACK_IMPORTED_MODULE_4__","pi","_Utilities__WEBPACK_IMPORTED_MODULE_5__","i","ref","_target","_options","_segment","_segmentInfo","_seekHead","_tracksElement","_segmentDuration","_colourElement","_videoCodecPrivate","_audioCodecPrivate","_cues","_currentCluster","_currentClusterTimestamp","_duration","_videoChunkQueue","_audioChunkQueue","_lastVideoTimestamp","_lastAudioTimestamp","_colorSpace","_finalized","_createFileHeader","createFileHeader_fn","_writeEBMLHeader","writeEBMLHeader_fn","_createSeekHead","createSeekHead_fn","_createSegmentInfo","createSegmentInfo_fn","_createTracks","createTracks_fn","_createSegment","createSegment_fn","_createCues","createCues_fn","_segmentDataOffset","segmentDataOffset_get","_writeVideoDecoderConfig","writeVideoDecoderConfig_fn","_fixVP9ColorSpace","fixVP9ColorSpace_fn","_createInternalChunk","createInternalChunk_fn","_writeSimpleBlock","writeSimpleBlock_fn","_writeCodecPrivate","writeCodecPrivate_fn","_createNewCluster","createNewCluster_fn","_finalizeCurrentCluster","finalizeCurrentCluster_fn","_ensureNotFinalized","ensureNotFinalized_fn","__defProp","__getOwnPropDesc","__getOwnPropNames","__hasOwnProp","__pow","__accessCheck","__privateGet","__privateAdd","__privateSet","__privateMethod","main_exports","EBMLFloat32","EBMLFloat64","WriteTarget","measureUnsignedInt","measureEBMLVarInt","ArrayBufferWriteTarget","FILE_CHUNK_SIZE","FileSystemWritableFileStreamWriteTarget","insertSectionIntoFileChunk","MAX_CHUNK_LENGTH_MS","CODEC_PRIVATE_MAX_SIZE","APP_NAME","WebMMuxer","main_default","readBits","writeBits","Object","defineProperty","getOwnPropertyDescriptor","getOwnPropertyNames","prototype","hasOwnProperty","Math","pow","obj","member","msg","has","TypeError","getter","call","get","value","WeakSet","add","set","setter","method","__export","target","all","name","enumerable","default","constructor","pos","helper","Uint8Array","helperView","DataView","buffer","offsets","WeakMap","dataOffsets","writeFloat32","setFloat32","write","subarray","writeFloat64","setFloat64","writeUnsignedInt","width","setUint8","writeEBMLVarInt","writeString","str","split","map","x","charCodeAt","writeEBML","data","_b","Array","isArray","elem","sizePos","sizeSize","size","seek","startPos","endPos","length","byteLength","ArrayBuffer","bytes","ensureSize","newLength","newBuffer","newBytes","newPos","finalize","slice","stream","chunks","writeDataIntoChunks","flushChunks","position","chunkIndex","findIndex","start","createChunk","chunk","relativePosition","toWrite","min","end","written","shouldFlush","includesPosition","floor","push","sort","a","b","indexOf","force","section","type","splice","low","high","index","mid","max","options","addVideoChunk","meta","timestamp","copyTo","addVideoChunkRaw","video","internalChunk","codec","audioChunk","shift","audio","addAudioChunk","addAudioChunkRaw","videoChunk","decoderConfig","description","segmentSize","kaxCues","kaxInfo","kaxTracks","segmentDuration","tracksElement","colourElement","frameRate","height","filter","Boolean","sampleRate","numberOfChannels","bitDepth","segment","colorSpace","matrix","transfer","primaries","Number","fullRange","profile","showExistingFrame","frameType","syncCode","colorSpaceID","trackNumber","msTime","shouldCreateNewClusterFromKeyFrame","prelude","view","setUint16","simpleBlock","element","clusterOffsetFromSegment","clusterSize","result","byte","bitIndex","byteIndex","__copyProps","to","from","except","desc","key","module","exports"],"sourceRoot":""}