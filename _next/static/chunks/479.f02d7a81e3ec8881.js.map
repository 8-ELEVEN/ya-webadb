{"version":3,"file":"static/chunks/479.f02d7a81e3ec8881.js","mappings":"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","sources":["webpack://_N_E/FitAddon/webpack/universalModuleDefinition","webpack://_N_E/FitAddon/./src/FitAddon.ts","webpack://_N_E/FitAddon/webpack/bootstrap","webpack://_N_E/FitAddon/webpack/startup","webpack://_N_E/SearchAddon/webpack/universalModuleDefinition","webpack://_N_E/SearchAddon/./src/SearchAddon.ts","webpack://_N_E/WebglAddon/webpack/universalModuleDefinition","webpack://_N_E/WebglAddon/./src/GlyphRenderer.ts","webpack://_N_E/WebglAddon/./src/RectangleRenderer.ts","webpack://_N_E/WebglAddon/./src/RenderModel.ts","webpack://_N_E/WebglAddon/./src/TypedArray.ts","webpack://_N_E/WebglAddon/./src/WebglRenderer.ts","webpack://_N_E/WebglAddon/./src/WebglUtils.ts","webpack://_N_E/WebglAddon/./src/atlas/CharAtlasCache.ts","webpack://_N_E/WebglAddon/./src/atlas/CharAtlasUtils.ts","webpack://_N_E/WebglAddon/./src/atlas/WebglCharAtlas.ts","webpack://_N_E/WebglAddon/./src/renderLayer/BaseRenderLayer.ts","webpack://_N_E/WebglAddon/./src/renderLayer/CursorRenderLayer.ts","webpack://_N_E/WebglAddon/./src/renderLayer/LinkRenderLayer.ts","webpack://_N_E/WebglAddon/../../src/browser/Color.ts","webpack://_N_E/WebglAddon/../../src/browser/Lifecycle.ts","webpack://_N_E/WebglAddon/../../src/browser/renderer/CustomGlyphs.ts","webpack://_N_E/WebglAddon/../../src/browser/renderer/RendererUtils.ts","webpack://_N_E/WebglAddon/../../src/browser/renderer/atlas/Constants.ts","webpack://_N_E/WebglAddon/../../src/common/EventEmitter.ts","webpack://_N_E/WebglAddon/../../src/common/Lifecycle.ts","webpack://_N_E/WebglAddon/../../src/common/Platform.ts","webpack://_N_E/WebglAddon/../../src/common/TypedArrayUtils.ts","webpack://_N_E/WebglAddon/../../src/common/buffer/AttributeData.ts","webpack://_N_E/WebglAddon/../../src/common/buffer/CellData.ts","webpack://_N_E/WebglAddon/../../src/common/buffer/Constants.ts","webpack://_N_E/WebglAddon/../../src/common/input/TextDecoder.ts","webpack://_N_E/WebglAddon/webpack/bootstrap","webpack://_N_E/WebglAddon/./src/WebglAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FitAddon\"] = factory();\n\telse\n\t\troot[\"FitAddon\"] = factory();\n})(self, function() {\nreturn ","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon } from 'xterm';\n\ninterface ITerminalDimensions {\n  /**\n   * The number of rows in the terminal.\n   */\n  rows: number;\n\n  /**\n   * The number of columns in the terminal.\n   */\n  cols: number;\n}\n\nconst MINIMUM_COLS = 2;\nconst MINIMUM_ROWS = 1;\n\nexport class FitAddon implements ITerminalAddon {\n  private _terminal: Terminal | undefined;\n\n  constructor() {}\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n  }\n\n  public dispose(): void {}\n\n  public fit(): void {\n    const dims = this.proposeDimensions();\n    if (!dims || !this._terminal) {\n      return;\n    }\n\n    // TODO: Remove reliance on private API\n    const core = (this._terminal as any)._core;\n\n    // Force a full render\n    if (this._terminal.rows !== dims.rows || this._terminal.cols !== dims.cols) {\n      core._renderService.clear();\n      this._terminal.resize(dims.cols, dims.rows);\n    }\n  }\n\n  public proposeDimensions(): ITerminalDimensions | undefined {\n    if (!this._terminal) {\n      return undefined;\n    }\n\n    if (!this._terminal.element || !this._terminal.element.parentElement) {\n      return undefined;\n    }\n\n    // TODO: Remove reliance on private API\n    const core = (this._terminal as any)._core;\n\n    if (core._renderService.dimensions.actualCellWidth === 0 || core._renderService.dimensions.actualCellHeight === 0) {\n      return undefined;\n    }\n\n    const parentElementStyle = window.getComputedStyle(this._terminal.element.parentElement);\n    const parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height'));\n    const parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')));\n    const elementStyle = window.getComputedStyle(this._terminal.element);\n    const elementPadding = {\n      top: parseInt(elementStyle.getPropertyValue('padding-top')),\n      bottom: parseInt(elementStyle.getPropertyValue('padding-bottom')),\n      right: parseInt(elementStyle.getPropertyValue('padding-right')),\n      left: parseInt(elementStyle.getPropertyValue('padding-left'))\n    };\n    const elementPaddingVer = elementPadding.top + elementPadding.bottom;\n    const elementPaddingHor = elementPadding.right + elementPadding.left;\n    const availableHeight = parentElementHeight - elementPaddingVer;\n    const availableWidth = parentElementWidth - elementPaddingHor - core.viewport.scrollBarWidth;\n    const geometry = {\n      cols: Math.max(MINIMUM_COLS, Math.floor(availableWidth / core._renderService.dimensions.actualCellWidth)),\n      rows: Math.max(MINIMUM_ROWS, Math.floor(availableHeight / core._renderService.dimensions.actualCellHeight))\n    };\n    return geometry;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(775);\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SearchAddon\"] = factory();\n\telse\n\t\troot[\"SearchAddon\"] = factory();\n})(self, function() {\nreturn ","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, IBufferLine, IDisposable, ITerminalAddon, ISelectionPosition } from 'xterm';\n\nexport interface ISearchOptions {\n  regex?: boolean;\n  wholeWord?: boolean;\n  caseSensitive?: boolean;\n  incremental?: boolean;\n}\n\nexport interface ISearchPosition {\n  startCol: number;\n  startRow: number;\n}\n\nexport interface ISearchResult {\n  term: string;\n  col: number;\n  row: number;\n  size: number;\n}\n\ntype LineCacheEntry = [\n  /**\n   * The string representation of a line (as opposed to the buffer cell representation).\n   */\n  lineAsString: string,\n  /**\n   * The offsets where each line starts when the entry describes a wrapped line.\n   */\n  lineOffsets: number[]\n];\n\nconst NON_WORD_CHARACTERS = ' ~!@#$%^&*()+`-=[]{}|\\\\;:\"\\',./<>?';\nconst LINES_CACHE_TIME_TO_LIVE = 15 * 1000; // 15 secs\n\nexport class SearchAddon implements ITerminalAddon {\n  private _terminal: Terminal | undefined;\n\n  /**\n   * translateBufferLineToStringWithWrap is a fairly expensive call.\n   * We memoize the calls into an array that has a time based ttl.\n   * _linesCache is also invalidated when the terminal cursor moves.\n   */\n  private _linesCache: LineCacheEntry[] | undefined;\n  private _linesCacheTimeoutId = 0;\n  private _cursorMoveListener: IDisposable | undefined;\n  private _resizeListener: IDisposable | undefined;\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n  }\n\n  public dispose(): void { }\n\n  /**\n   * Find the next instance of the term, then scroll to and select it. If it\n   * doesn't exist, do nothing.\n   * @param term The search term.\n   * @param searchOptions Search options.\n   * @return Whether a result was found.\n   */\n  public findNext(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n\n    if (!term || term.length === 0) {\n      this._terminal.clearSelection();\n      return false;\n    }\n\n    let startCol = 0;\n    let startRow = 0;\n    let currentSelection: ISelectionPosition | undefined;\n    if (this._terminal.hasSelection()) {\n      const incremental = searchOptions ? searchOptions.incremental : false;\n      // Start from the selection end if there is a selection\n      // For incremental search, use existing row\n      currentSelection = this._terminal.getSelectionPosition()!;\n      startRow = incremental ? currentSelection.startRow : currentSelection.endRow;\n      startCol = incremental ? currentSelection.startColumn : currentSelection.endColumn;\n    }\n\n    this._initLinesCache();\n\n    const searchPosition: ISearchPosition = {\n      startRow,\n      startCol\n    };\n\n    // Search startRow\n    let result = this._findInLine(term, searchPosition, searchOptions);\n\n    // Search from startRow + 1 to end\n    if (!result) {\n\n      for (let y = startRow + 1; y < this._terminal.buffer.active.baseY + this._terminal.rows; y++) {\n        searchPosition.startRow = y;\n        searchPosition.startCol = 0;\n        // If the current line is wrapped line, increase index of column to ignore the previous scan\n        // Otherwise, reset beginning column index to zero with set new unwrapped line index\n        result = this._findInLine(term, searchPosition, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n    // If we hit the bottom and didn't search from the very top wrap back up\n    if (!result && startRow !== 0) {\n      for (let y = 0; y < startRow; y++) {\n        searchPosition.startRow = y;\n        searchPosition.startCol = 0;\n        result = this._findInLine(term, searchPosition, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n\n    // If there is only one result, wrap back and return selection if it exists.\n    if (!result && currentSelection) {\n      searchPosition.startRow = currentSelection.startRow;\n      searchPosition.startCol = 0;\n      result = this._findInLine(term, searchPosition, searchOptions);\n    }\n\n    // Set selection and scroll if a result was found\n    return this._selectResult(result);\n  }\n\n  /**\n   * Find the previous instance of the term, then scroll to and select it. If it\n   * doesn't exist, do nothing.\n   * @param term The search term.\n   * @param searchOptions Search options.\n   * @return Whether a result was found.\n   */\n  public findPrevious(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n\n    if (!term || term.length === 0) {\n      this._terminal.clearSelection();\n      return false;\n    }\n\n    const isReverseSearch = true;\n    let startRow = this._terminal.buffer.active.baseY + this._terminal.rows;\n    let startCol = this._terminal.cols;\n    let result: ISearchResult | undefined;\n    const incremental = searchOptions ? searchOptions.incremental : false;\n    let currentSelection: ISelectionPosition | undefined;\n    if (this._terminal.hasSelection()) {\n      currentSelection = this._terminal.getSelectionPosition()!;\n      // Start from selection start if there is a selection\n      startRow = currentSelection.startRow;\n      startCol = currentSelection.startColumn;\n    }\n\n    this._initLinesCache();\n    const searchPosition: ISearchPosition = {\n      startRow,\n      startCol\n    };\n\n    if (incremental) {\n      // Try to expand selection to right first.\n      result = this._findInLine(term, searchPosition, searchOptions, false);\n      const isOldResultHighlighted = result && result.row === startRow && result.col === startCol;\n      if (!isOldResultHighlighted) {\n        // If selection was not able to be expanded to the right, then try reverse search\n        if (currentSelection) {\n          searchPosition.startRow = currentSelection.endRow;\n          searchPosition.startCol = currentSelection.endColumn;\n        }\n        result = this._findInLine(term, searchPosition, searchOptions, true);\n      }\n    } else {\n      result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n    }\n\n    // Search from startRow - 1 to top\n    if (!result) {\n      searchPosition.startCol = Math.max(searchPosition.startCol, this._terminal.cols);\n      for (let y = startRow - 1; y >= 0; y--) {\n        searchPosition.startRow = y;\n        result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n        if (result) {\n          break;\n        }\n      }\n    }\n    // If we hit the top and didn't search from the very bottom wrap back down\n    if (!result && startRow !== (this._terminal.buffer.active.baseY + this._terminal.rows)) {\n      for (let y = (this._terminal.buffer.active.baseY + this._terminal.rows); y >= startRow; y--) {\n        searchPosition.startRow = y;\n        result = this._findInLine(term, searchPosition, searchOptions, isReverseSearch);\n        if (result) {\n          break;\n        }\n      }\n    }\n\n    // If there is only one result, return true.\n    if (!result && currentSelection) return true;\n\n    // Set selection and scroll if a result was found\n    return this._selectResult(result);\n  }\n\n  /**\n   * Sets up a line cache with a ttl\n   */\n  private _initLinesCache(): void {\n    const terminal = this._terminal!;\n    if (!this._linesCache) {\n      this._linesCache = new Array(terminal.buffer.active.length);\n      this._cursorMoveListener = terminal.onCursorMove(() => this._destroyLinesCache());\n      this._resizeListener = terminal.onResize(() => this._destroyLinesCache());\n    }\n\n    window.clearTimeout(this._linesCacheTimeoutId);\n    this._linesCacheTimeoutId = window.setTimeout(() => this._destroyLinesCache(), LINES_CACHE_TIME_TO_LIVE);\n  }\n\n  private _destroyLinesCache(): void {\n    this._linesCache = undefined;\n    if (this._cursorMoveListener) {\n      this._cursorMoveListener.dispose();\n      this._cursorMoveListener = undefined;\n    }\n    if (this._resizeListener) {\n      this._resizeListener.dispose();\n      this._resizeListener = undefined;\n    }\n    if (this._linesCacheTimeoutId) {\n      window.clearTimeout(this._linesCacheTimeoutId);\n      this._linesCacheTimeoutId = 0;\n    }\n  }\n\n  /**\n   * A found substring is a whole word if it doesn't have an alphanumeric character directly adjacent to it.\n   * @param searchIndex starting indext of the potential whole word substring\n   * @param line entire string in which the potential whole word was found\n   * @param term the substring that starts at searchIndex\n   */\n  private _isWholeWord(searchIndex: number, line: string, term: string): boolean {\n    return ((searchIndex === 0) || (NON_WORD_CHARACTERS.includes(line[searchIndex - 1]))) &&\n      (((searchIndex + term.length) === line.length) || (NON_WORD_CHARACTERS.includes(line[searchIndex + term.length])));\n  }\n\n  /**\n   * Searches a line for a search term. Takes the provided terminal line and searches the text line, which may contain\n   * subsequent terminal lines if the text is wrapped. If the provided line number is part of a wrapped text line that\n   * started on an earlier line then it is skipped since it will be properly searched when the terminal line that the\n   * text starts on is searched.\n   * @param term The search term.\n   * @param position The position to start the search.\n   * @param searchOptions Search options.\n   * @param isReverseSearch Whether the search should start from the right side of the terminal and search to the left.\n   * @return The search result if it was found.\n   */\n  protected _findInLine(term: string, searchPosition: ISearchPosition, searchOptions: ISearchOptions = {}, isReverseSearch: boolean = false): ISearchResult | undefined {\n    const terminal = this._terminal!;\n    const row = searchPosition.startRow;\n    const col = searchPosition.startCol;\n\n    // Ignore wrapped lines, only consider on unwrapped line (first row of command string).\n    const firstLine = terminal.buffer.active.getLine(row);\n    if (firstLine?.isWrapped) {\n      if (isReverseSearch) {\n        searchPosition.startCol += terminal.cols;\n        return;\n      }\n\n      // This will iterate until we find the line start.\n      // When we find it, we will search using the calculated start column.\n      searchPosition.startRow--;\n      searchPosition.startCol += terminal.cols;\n      return this._findInLine(term, searchPosition, searchOptions);\n    }\n    let cache = this._linesCache?.[row];\n    if (!cache) {\n      cache = this._translateBufferLineToStringWithWrap(row, true);\n      if (this._linesCache) {\n        this._linesCache[row] = cache;\n      }\n    }\n    const [stringLine, offsets] = cache;\n\n    const offset = this._bufferColsToStringOffset(row, col);\n    const searchTerm = searchOptions.caseSensitive ? term : term.toLowerCase();\n    const searchStringLine = searchOptions.caseSensitive ? stringLine : stringLine.toLowerCase();\n\n    let resultIndex = -1;\n    if (searchOptions.regex) {\n      const searchRegex = RegExp(searchTerm, 'g');\n      let foundTerm: RegExpExecArray | null;\n      if (isReverseSearch) {\n        // This loop will get the resultIndex of the _last_ regex match in the range 0..offset\n        while (foundTerm = searchRegex.exec(searchStringLine.slice(0, offset))) {\n          resultIndex = searchRegex.lastIndex - foundTerm[0].length;\n          term = foundTerm[0];\n          searchRegex.lastIndex -= (term.length - 1);\n        }\n      } else {\n        foundTerm = searchRegex.exec(searchStringLine.slice(offset));\n        if (foundTerm && foundTerm[0].length > 0) {\n          resultIndex = offset + (searchRegex.lastIndex - foundTerm[0].length);\n          term = foundTerm[0];\n        }\n      }\n    } else {\n      if (isReverseSearch) {\n        if (offset - searchTerm.length >= 0) {\n          resultIndex = searchStringLine.lastIndexOf(searchTerm, offset - searchTerm.length);\n        }\n      } else {\n        resultIndex = searchStringLine.indexOf(searchTerm, offset);\n      }\n    }\n\n    if (resultIndex >= 0) {\n      if (searchOptions.wholeWord && !this._isWholeWord(resultIndex, searchStringLine, term)) {\n        return;\n      }\n\n      // Adjust the row number and search index if needed since a \"line\" of text can span multiple rows\n      let startRowOffset = 0;\n      while (startRowOffset < offsets.length - 1 && resultIndex >= offsets[startRowOffset + 1]) {\n        startRowOffset++;\n      }\n      let endRowOffset = startRowOffset;\n      while (endRowOffset < offsets.length - 1 && resultIndex + term.length >= offsets[endRowOffset + 1]) {\n        endRowOffset++;\n      }\n      const startColOffset = resultIndex - offsets[startRowOffset];\n      const endColOffset = resultIndex + term.length - offsets[endRowOffset];\n      const startColIndex = this._stringLengthToBufferSize(row + startRowOffset, startColOffset);\n      const endColIndex = this._stringLengthToBufferSize(row + endRowOffset, endColOffset);\n      const size = endColIndex - startColIndex + terminal.cols * (endRowOffset - startRowOffset);\n\n      return {\n        term,\n        col: startColIndex,\n        row: row + startRowOffset,\n        size\n      };\n    }\n  }\n\n  private _stringLengthToBufferSize(row: number, offset: number): number {\n    const line = this._terminal!.buffer.active.getLine(row);\n    if (!line) {\n      return 0;\n    }\n    for (let i = 0; i < offset; i++) {\n      const cell = line.getCell(i);\n      if (!cell) {\n        break;\n      }\n      // Adjust the searchIndex to normalize emoji into single chars\n      const char = cell.getChars();\n      if (char.length > 1) {\n        offset -= char.length - 1;\n      }\n      // Adjust the searchIndex for empty characters following wide unicode\n      // chars (eg. CJK)\n      const nextCell = line.getCell(i + 1);\n      if (nextCell && nextCell.getWidth() === 0) {\n        offset++;\n      }\n    }\n    return offset;\n  }\n\n  private _bufferColsToStringOffset(startRow: number, cols: number): number {\n    const terminal = this._terminal!;\n    let lineIndex = startRow;\n    let offset = 0;\n    let line = terminal.buffer.active.getLine(lineIndex);\n    while (cols > 0 && line) {\n      for (let i = 0; i < cols && i < terminal.cols; i++) {\n        const cell = line.getCell(i);\n        if (!cell) {\n          break;\n        }\n        if (cell.getWidth()) {\n          offset += cell.getChars().length;\n        }\n      }\n      lineIndex++;\n      line = terminal.buffer.active.getLine(lineIndex);\n      if (line && !line.isWrapped) {\n        break;\n      }\n      cols -= terminal.cols;\n    }\n    return offset;\n  }\n\n  /**\n   * Translates a buffer line to a string, including subsequent lines if they are wraps.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param line The line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   */\n  private _translateBufferLineToStringWithWrap(lineIndex: number, trimRight: boolean): LineCacheEntry {\n    const terminal = this._terminal!;\n    const strings = [];\n    const lineOffsets = [0];\n    let line = terminal.buffer.active.getLine(lineIndex);\n    while (line) {\n      const nextLine = terminal.buffer.active.getLine(lineIndex + 1);\n      const lineWrapsToNext = nextLine ? nextLine.isWrapped : false;\n      let string = line.translateToString(!lineWrapsToNext && trimRight);\n      if (lineWrapsToNext && nextLine) {\n        const lastCell = line.getCell(line.length - 1);\n        const lastCellIsNull = lastCell && lastCell.getCode() === 0 && lastCell.getWidth() === 1;\n        // a wide character wrapped to the next line\n        if (lastCellIsNull && nextLine.getCell(0)?.getWidth() === 2) {\n          string = string.slice(0, -1);\n        }\n      }\n      strings.push(string);\n      if (lineWrapsToNext) {\n        lineOffsets.push(lineOffsets[lineOffsets.length - 1] + string.length);\n      } else {\n        break;\n      }\n      lineIndex++;\n      line = nextLine;\n    }\n    return [strings.join(''), lineOffsets];\n  }\n\n  /**\n   * Selects and scrolls to a result.\n   * @param result The result to select.\n   * @return Whethera result was selected.\n   */\n  private _selectResult(result: ISearchResult | undefined): boolean {\n    const terminal = this._terminal!;\n    if (!result) {\n      terminal.clearSelection();\n      return false;\n    }\n    terminal.select(result.col, result.row, result.size);\n    // If it is not in the viewport then we scroll else it just gets selected\n    if (result.row >= (terminal.buffer.active.viewportY + terminal.rows) || result.row < terminal.buffer.active.viewportY) {\n      let scroll = result.row - terminal.buffer.active.viewportY;\n      scroll -= Math.floor(terminal.rows / 2);\n      terminal.scrollLines(scroll);\n    }\n    return true;\n  }\n}\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebglAddon\"] = factory();\n\telse\n\t\troot[\"WebglAddon\"] = factory();\n})(self, function() {\nreturn ","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { IWebGL2RenderingContext, IWebGLVertexArrayObject, IRenderModel, IRasterizedGlyph } from './Types';\nimport { COMBINED_CHAR_BIT_MASK, RENDER_MODEL_INDICIES_PER_CELL, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_BG_OFFSET } from './RenderModel';\nimport { fill } from 'common/TypedArrayUtils';\nimport { slice } from './TypedArray';\nimport { NULL_CELL_CODE, WHITESPACE_CELL_CODE, Attributes, FgFlags } from 'common/buffer/Constants';\nimport { Terminal, IBufferLine } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\n\ninterface IVertices {\n  attributes: Float32Array;\n  /**\n   * These buffers are the ones used to bind to WebGL, the reason there are\n   * multiple is to allow double buffering to work as you cannot modify the\n   * buffer while it's being used by the GPU. Having multiple lets us start\n   * working on the next frame.\n   */\n  attributesBuffers: Float32Array[];\n  selectionAttributes: Float32Array;\n  count: number;\n}\n\nconst enum VertexAttribLocations {\n  UNIT_QUAD = 0,\n  CELL_POSITION = 1,\n  OFFSET = 2,\n  SIZE = 3,\n  TEXCOORD = 4,\n  TEXSIZE = 5\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\nlayout (location = ${VertexAttribLocations.CELL_POSITION}) in vec2 a_cellpos;\nlayout (location = ${VertexAttribLocations.OFFSET}) in vec2 a_offset;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.TEXCOORD}) in vec2 a_texcoord;\nlayout (location = ${VertexAttribLocations.TEXSIZE}) in vec2 a_texsize;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec2 v_texcoord;\n\nvoid main() {\n  vec2 zeroToOne = (a_offset / u_resolution) + a_cellpos + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_texcoord = a_texcoord + a_unitquad * a_texsize;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec2 v_texcoord;\n\nuniform sampler2D u_texture;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = texture(u_texture, v_texcoord);\n}`;\n\nconst INDICES_PER_CELL = 10;\nconst BYTES_PER_CELL = INDICES_PER_CELL * Float32Array.BYTES_PER_ELEMENT;\nconst CELL_POSITION_INDICES = 2;\n\nexport class GlyphRenderer {\n  private _atlas: WebglCharAtlas | undefined;\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _projectionLocation: WebGLUniformLocation;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _textureLocation: WebGLUniformLocation;\n  private _atlasTexture: WebGLTexture;\n  private _attributesBuffer: WebGLBuffer;\n  private _activeBuffer: number = 0;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(0),\n    attributesBuffers: [\n      new Float32Array(0),\n      new Float32Array(0)\n    ],\n    selectionAttributes: new Float32Array(0)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    const gl = this._gl;\n    const program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n    this._program = program;\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._textureLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_texture'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertuces to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.OFFSET);\n    gl.vertexAttribPointer(VertexAttribLocations.OFFSET, 2, gl.FLOAT, false, BYTES_PER_CELL, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.OFFSET, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXCOORD);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXCOORD, 2, gl.FLOAT, false, BYTES_PER_CELL, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXCOORD, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXSIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXSIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 6 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXSIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.CELL_POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.CELL_POSITION, 2, gl.FLOAT, false, BYTES_PER_CELL, 8 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.CELL_POSITION, 1);\n\n    // Setup empty texture atlas\n    this._atlasTexture = throwIfFalsy(gl.createTexture());\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    // Allow drawing of transparent texture\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // Set viewport\n    this.onResize();\n  }\n\n  public beginFrame(): boolean {\n    return this._atlas ? this._atlas.beginFrame() : true;\n  }\n\n  public updateCell(x: number, y: number, code: number, bg: number, fg: number, chars: string): void {\n    this._updateCell(this._vertices.attributes, x, y, code, bg, fg, chars);\n  }\n\n  private _updateCell(array: Float32Array, x: number, y: number, code: number | undefined, bg: number, fg: number, chars?: string): void {\n    const terminal = this._terminal;\n\n    const i = (y * terminal.cols + x) * INDICES_PER_CELL;\n\n    // Exit early if this is a null character, allow space character to continue as it may have\n    // underline/strikethrough styles\n    if (code === NULL_CELL_CODE || code === undefined/* This is used for the right side of wide chars */) {\n      fill(array, 0, i, i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    let rasterizedGlyph: IRasterizedGlyph;\n    if (!this._atlas) {\n      return;\n    }\n    if (chars && chars.length > 1) {\n      rasterizedGlyph = this._atlas.getRasterizedGlyphCombinedChar(chars, bg, fg);\n    } else {\n      rasterizedGlyph = this._atlas.getRasterizedGlyph(code, bg, fg);\n    }\n\n    // Fill empty if no glyph was found\n    if (!rasterizedGlyph) {\n      fill(array, 0, i, i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    // a_origin\n    array[i    ] = -rasterizedGlyph.offset.x + this._dimensions.scaledCharLeft;\n    array[i + 1] = -rasterizedGlyph.offset.y + this._dimensions.scaledCharTop;\n    // a_size\n    array[i + 2] = rasterizedGlyph.size.x / this._dimensions.scaledCanvasWidth;\n    array[i + 3] = rasterizedGlyph.size.y / this._dimensions.scaledCanvasHeight;\n    // a_texcoord\n    array[i + 4] = rasterizedGlyph.texturePositionClipSpace.x;\n    array[i + 5] = rasterizedGlyph.texturePositionClipSpace.y;\n    // a_texsize\n    array[i + 6] = rasterizedGlyph.sizeClipSpace.x;\n    array[i + 7] = rasterizedGlyph.sizeClipSpace.y;\n    // a_cellpos only changes on resize\n  }\n\n  public updateSelection(model: IRenderModel): void {\n    const terminal = this._terminal;\n\n    this._vertices.selectionAttributes = slice(this._vertices.attributes, 0);\n\n    const bg = (this._colors.selectionOpaque.rgba >>> 8) | Attributes.CM_RGB;\n\n    if (model.selection.columnSelectMode) {\n      const startCol = model.selection.startCol;\n      const width = model.selection.endCol - startCol;\n      const height = model.selection.viewportCappedEndRow - model.selection.viewportCappedStartRow + 1;\n      for (let y = model.selection.viewportCappedStartRow; y < model.selection.viewportCappedStartRow + height; y++) {\n        this._updateSelectionRange(startCol, startCol + width, y, model, bg);\n      }\n    } else {\n      // Draw first row\n      const startCol = model.selection.viewportStartRow === model.selection.viewportCappedStartRow ? model.selection.startCol : 0;\n      const startRowEndCol = model.selection.viewportCappedStartRow === model.selection.viewportCappedEndRow ? model.selection.endCol : terminal.cols;\n      this._updateSelectionRange(startCol, startRowEndCol, model.selection.viewportCappedStartRow, model, bg);\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(model.selection.viewportCappedEndRow - model.selection.viewportCappedStartRow - 1, 0);\n      for (let y = model.selection.viewportCappedStartRow + 1; y <= model.selection.viewportCappedStartRow + middleRowsCount; y++) {\n        this._updateSelectionRange(0, startRowEndCol, y, model, bg);\n      }\n\n      // Draw final row\n      if (model.selection.viewportCappedStartRow !== model.selection.viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = model.selection.viewportEndRow === model.selection.viewportCappedEndRow ? model.selection.endCol : terminal.cols;\n        this._updateSelectionRange(0, endCol, model.selection.viewportCappedEndRow, model, bg);\n      }\n    }\n  }\n\n  private _updateSelectionRange(startCol: number, endCol: number, y: number, model: IRenderModel, bg: number): void {\n    const terminal = this._terminal;\n    const row = y + terminal.buffer.active.viewportY;\n    let line: IBufferLine | undefined;\n    for (let x = startCol; x < endCol; x++) {\n      const offset = (y * this._terminal.cols + x) * RENDER_MODEL_INDICIES_PER_CELL;\n      const code = model.cells[offset];\n      let fg = model.cells[offset + RENDER_MODEL_FG_OFFSET];\n      if (fg & FgFlags.INVERSE) {\n        const workCell = new AttributeData();\n        workCell.fg = fg;\n        workCell.bg = model.cells[offset + RENDER_MODEL_BG_OFFSET];\n        // Get attributes from fg (excluding inverse) and resolve inverse by pullibng rgb colors\n        // from bg. This is needed since the inverse fg color should be based on the original bg\n        // color, not on the selection color\n        fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK | FgFlags.INVERSE);\n        switch (workCell.getBgColorMode()) {\n          case Attributes.CM_P16:\n          case Attributes.CM_P256:\n            const c = this._getColorFromAnsiIndex(workCell.getBgColor()).rgba;\n            fg |= (c >> 8) & Attributes.RED_MASK | (c >> 8) & Attributes.GREEN_MASK | (c >> 8) & Attributes.BLUE_MASK;\n          case Attributes.CM_RGB:\n            const arr = AttributeData.toColorRGB(workCell.getBgColor());\n            fg |= arr[0] << Attributes.RED_SHIFT | arr[1] << Attributes.GREEN_SHIFT | arr[2] << Attributes.BLUE_SHIFT;\n          case Attributes.CM_DEFAULT:\n          default:\n            const c2 = this._colors.background.rgba;\n            fg |= (c2 >> 8) & Attributes.RED_MASK | (c2 >> 8) & Attributes.GREEN_MASK | (c2 >> 8) & Attributes.BLUE_MASK;\n        }\n        fg |= Attributes.CM_RGB;\n      }\n      if (code & COMBINED_CHAR_BIT_MASK) {\n        if (!line) {\n          line = terminal.buffer.active.getLine(row);\n        }\n        const chars = line!.getCell(x)!.getChars();\n        this._updateCell(this._vertices.selectionAttributes, x, y, model.cells[offset], bg, fg, chars);\n      } else {\n        this._updateCell(this._vertices.selectionAttributes, x, y, model.cells[offset], bg, fg);\n      }\n    }\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._colors.ansi[idx];\n  }\n\n  public onResize(): void {\n    const terminal = this._terminal;\n    const gl = this._gl;\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // Update vertices\n    const newCount = terminal.cols * terminal.rows * INDICES_PER_CELL;\n    if (this._vertices.count !== newCount) {\n      this._vertices.count = newCount;\n      this._vertices.attributes = new Float32Array(newCount);\n      for (let i = 0; i < this._vertices.attributesBuffers.length; i++) {\n        this._vertices.attributesBuffers[i] = new Float32Array(newCount);\n      }\n\n      let i = 0;\n      for (let y = 0; y < terminal.rows; y++) {\n        for (let x = 0; x < terminal.cols; x++) {\n          this._vertices.attributes[i + 8] = x / terminal.cols;\n          this._vertices.attributes[i + 9] = y / terminal.rows;\n          i += INDICES_PER_CELL;\n        }\n      }\n    }\n  }\n\n  public setColors(): void {\n  }\n\n  public render(renderModel: IRenderModel, isSelectionVisible: boolean): void {\n    if (!this._atlas) {\n      return;\n    }\n\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Alternate buffers each frame as the active buffer gets locked while it's in use by the GPU\n    this._activeBuffer = (this._activeBuffer + 1) % 2;\n    const activeBuffer = this._vertices.attributesBuffers[this._activeBuffer];\n\n    // Copy data for each cell of each line up to its line length (the last non-whitespace cell)\n    // from the attributes buffer into activeBuffer, which is the one that gets bound to the GPU.\n    // The reasons for this are as follows:\n    // - So the active buffer can be alternated so we don't get blocked on rendering finishing\n    // - To copy either the normal attributes buffer or the selection attributes buffer when there\n    //   is a selection\n    // - So we don't send vertices for all the line-ending whitespace to the GPU\n    let bufferLength = 0;\n    for (let y = 0; y < renderModel.lineLengths.length; y++) {\n      const si = y * this._terminal.cols * INDICES_PER_CELL;\n      const sub = (isSelectionVisible ? this._vertices.selectionAttributes : this._vertices.attributes).subarray(si, si + renderModel.lineLengths[y] * INDICES_PER_CELL);\n      activeBuffer.set(sub, bufferLength);\n      bufferLength += sub.length;\n    }\n\n    // Bind the attributes buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, activeBuffer.subarray(0, bufferLength), gl.STREAM_DRAW);\n\n    // Bind the texture atlas if it's changed\n    if (this._atlas.hasCanvasChanged) {\n      this._atlas.hasCanvasChanged = false;\n      gl.uniform1i(this._textureLocation, 0);\n      gl.activeTexture(gl.TEXTURE0 + 0);\n      gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._atlas.cacheCanvas);\n      gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    // Set uniforms\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Draw the viewport\n    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, bufferLength / INDICES_PER_CELL);\n  }\n\n  public setAtlas(atlas: WebglCharAtlas): void {\n    const gl = this._gl;\n    this._atlas = atlas;\n\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, atlas.cacheCanvas);\n    gl.generateMipmap(gl.TEXTURE_2D);\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, expandFloat32Array, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { IRenderModel, IWebGLVertexArrayObject, IWebGL2RenderingContext, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\nimport { Attributes, FgFlags } from 'common/buffer/Constants';\nimport { Terminal } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\n\nconst enum VertexAttribLocations {\n  POSITION = 0,\n  SIZE = 1,\n  COLOR = 2,\n  UNIT_QUAD = 3\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.POSITION}) in vec2 a_position;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.COLOR}) in vec4 a_color;\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec4 v_color;\n\nvoid main() {\n  vec2 zeroToOne = (a_position + (a_unitquad * a_size)) / u_resolution;\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_color = a_color;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec4 v_color;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = v_color;\n}`;\n\ninterface IVertices {\n  attributes: Float32Array;\n  selection: Float32Array;\n  count: number;\n}\n\nconst INDICES_PER_RECTANGLE = 8;\nconst BYTES_PER_RECTANGLE = INDICES_PER_RECTANGLE * Float32Array.BYTES_PER_ELEMENT;\n\nconst INITIAL_BUFFER_RECTANGLE_CAPACITY = 20 * INDICES_PER_RECTANGLE;\n\nexport class RectangleRenderer {\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _attributesBuffer: WebGLBuffer;\n  private _projectionLocation: WebGLUniformLocation;\n  private _bgFloat!: Float32Array;\n  private _selectionFloat!: Float32Array;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(INITIAL_BUFFER_RECTANGLE_CAPACITY),\n    selection: new Float32Array(3 * INDICES_PER_RECTANGLE)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    const gl = this._gl;\n\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n\n    // Uniform locations\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertuces to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.POSITION, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.POSITION, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.COLOR);\n    gl.vertexAttribPointer(VertexAttribLocations.COLOR, 4, gl.FLOAT, false, BYTES_PER_RECTANGLE, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.COLOR, 1);\n\n    this._updateCachedColors();\n  }\n\n  public render(): void {\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Bind attributes buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.attributes, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, this._vertices.count);\n\n    // Bind selection buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.selection, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, 3);\n  }\n\n  public onResize(): void {\n    this._updateViewportRectangle();\n  }\n\n  public setColors(): void {\n    this._updateCachedColors();\n    this._updateViewportRectangle();\n  }\n\n  private _updateCachedColors(): void {\n    this._bgFloat = this._colorToFloat32Array(this._colors.background);\n    this._selectionFloat = this._colorToFloat32Array(this._colors.selectionOpaque);\n  }\n\n  private _updateViewportRectangle(): void {\n    // Set first rectangle that clears the screen\n    this._addRectangleFloat(\n      this._vertices.attributes,\n      0,\n      0,\n      0,\n      this._terminal.cols * this._dimensions.scaledCellWidth,\n      this._terminal.rows * this._dimensions.scaledCellHeight,\n      this._bgFloat\n    );\n  }\n\n  public updateSelection(model: ISelectionRenderModel): void {\n    const terminal = this._terminal;\n\n    if (!model.hasSelection) {\n      fill(this._vertices.selection, 0, 0);\n      return;\n    }\n\n    if (model.columnSelectMode) {\n      const startCol = model.startCol;\n      const width = model.endCol - startCol;\n      const height = model.viewportCappedEndRow - model.viewportCappedStartRow + 1;\n      this._addRectangleFloat(\n        this._vertices.selection,\n        0,\n        startCol * this._dimensions.scaledCellWidth,\n        model.viewportCappedStartRow * this._dimensions.scaledCellHeight,\n        width * this._dimensions.scaledCellWidth,\n        height * this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n      fill(this._vertices.selection, 0, INDICES_PER_RECTANGLE);\n    } else {\n      // Draw first row\n      const startCol = model.viewportStartRow === model.viewportCappedStartRow ? model.startCol : 0;\n      const startRowEndCol = model.viewportCappedStartRow === model.viewportEndRow ? model.endCol : terminal.cols;\n      this._addRectangleFloat(\n        this._vertices.selection,\n        0,\n        startCol * this._dimensions.scaledCellWidth,\n        model.viewportCappedStartRow * this._dimensions.scaledCellHeight,\n        (startRowEndCol - startCol) * this._dimensions.scaledCellWidth,\n        this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(model.viewportCappedEndRow - model.viewportCappedStartRow - 1, 0);\n      this._addRectangleFloat(\n        this._vertices.selection,\n        INDICES_PER_RECTANGLE,\n        0,\n        (model.viewportCappedStartRow + 1) * this._dimensions.scaledCellHeight,\n        terminal.cols * this._dimensions.scaledCellWidth,\n        middleRowsCount * this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n\n      // Draw final row\n      if (model.viewportCappedStartRow !== model.viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = model.viewportEndRow === model.viewportCappedEndRow ? model.endCol : terminal.cols;\n        this._addRectangleFloat(\n          this._vertices.selection,\n          INDICES_PER_RECTANGLE * 2,\n          0,\n          model.viewportCappedEndRow * this._dimensions.scaledCellHeight,\n          endCol * this._dimensions.scaledCellWidth,\n          this._dimensions.scaledCellHeight,\n          this._selectionFloat\n        );\n      } else {\n        fill(this._vertices.selection, 0, INDICES_PER_RECTANGLE * 2);\n      }\n    }\n  }\n\n  public updateBackgrounds(model: IRenderModel): void {\n    const terminal = this._terminal;\n    const vertices = this._vertices;\n\n    let rectangleCount = 1;\n\n    for (let y = 0; y < terminal.rows; y++) {\n      let currentStartX = -1;\n      let currentBg = 0;\n      let currentFg = 0;\n      let currentInverse = false;\n      for (let x = 0; x < terminal.cols; x++) {\n        const modelIndex = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n        const bg = model.cells[modelIndex + RENDER_MODEL_BG_OFFSET];\n        const fg = model.cells[modelIndex + RENDER_MODEL_FG_OFFSET];\n        const inverse = !!(fg & FgFlags.INVERSE);\n        if (bg !== currentBg || (fg !== currentFg && (currentInverse || inverse))) {\n          // A rectangle needs to be drawn if going from non-default to another color\n          if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n            const offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n            this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, x, y);\n          }\n          currentStartX = x;\n          currentBg = bg;\n          currentFg = fg;\n          currentInverse = inverse;\n        }\n      }\n      // Finish rectangle if it's still going\n      if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n        const offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n        this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, terminal.cols, y);\n      }\n    }\n    vertices.count = rectangleCount;\n  }\n\n  private _updateRectangle(vertices: IVertices, offset: number, fg: number, bg: number, startX: number, endX: number, y: number): void {\n    let rgba: number | undefined;\n    if (fg & FgFlags.INVERSE) {\n      switch (fg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          rgba = this._colors.ansi[fg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          rgba = (fg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          rgba = this._colors.foreground.rgba;\n      }\n    } else {\n      switch (bg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          rgba = this._colors.ansi[bg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          rgba = (bg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          rgba = this._colors.background.rgba;\n      }\n    }\n\n    if (vertices.attributes.length < offset + 4) {\n      vertices.attributes = expandFloat32Array(vertices.attributes, this._terminal.rows * this._terminal.cols * INDICES_PER_RECTANGLE);\n    }\n    const x1 = startX * this._dimensions.scaledCellWidth;\n    const y1 = y * this._dimensions.scaledCellHeight;\n    const r = ((rgba >> 24) & 0xFF) / 255;\n    const g = ((rgba >> 16) & 0xFF) / 255;\n    const b = ((rgba >> 8 ) & 0xFF) / 255;\n\n    this._addRectangle(vertices.attributes, offset, x1, y1, (endX - startX) * this._dimensions.scaledCellWidth, this._dimensions.scaledCellHeight, r, g, b, 1);\n  }\n\n  private _addRectangle(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, r: number, g: number, b: number, a: number): void {\n    array[offset    ] = x1;\n    array[offset + 1] = y1;\n    array[offset + 2] = width;\n    array[offset + 3] = height;\n    array[offset + 4] = r;\n    array[offset + 5] = g;\n    array[offset + 6] = b;\n    array[offset + 7] = a;\n  }\n\n  private _addRectangleFloat(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, color: Float32Array): void {\n    array[offset    ] = x1;\n    array[offset + 1] = y1;\n    array[offset + 2] = width;\n    array[offset + 3] = height;\n    array[offset + 4] = color[0];\n    array[offset + 5] = color[1];\n    array[offset + 6] = color[2];\n    array[offset + 7] = color[3];\n  }\n\n  private _colorToFloat32Array(color: IColor): Float32Array {\n    return new Float32Array([\n      ((color.rgba >> 24) & 0xFF) / 255,\n      ((color.rgba >> 16) & 0xFF) / 255,\n      ((color.rgba >> 8 ) & 0xFF) / 255,\n      ((color.rgba      ) & 0xFF) / 255\n    ]);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderModel, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\n\nexport const RENDER_MODEL_INDICIES_PER_CELL = 3;\nexport const RENDER_MODEL_BG_OFFSET = 1;\nexport const RENDER_MODEL_FG_OFFSET = 2;\n\nexport const COMBINED_CHAR_BIT_MASK = 0x80000000;\n\nexport class RenderModel implements IRenderModel {\n  public cells: Uint32Array;\n  public lineLengths: Uint32Array;\n  public selection: ISelectionRenderModel;\n\n  constructor() {\n    this.cells = new Uint32Array(0);\n    this.lineLengths = new Uint32Array(0);\n    this.selection = {\n      hasSelection: false,\n      columnSelectMode: false,\n      viewportStartRow: 0,\n      viewportEndRow: 0,\n      viewportCappedStartRow: 0,\n      viewportCappedEndRow: 0,\n      startCol: 0,\n      endCol: 0\n    };\n  }\n\n  public resize(cols: number, rows: number): void {\n    const indexCount = cols * rows * RENDER_MODEL_INDICIES_PER_CELL;\n    if (indexCount !== this.cells.length) {\n      this.cells = new Uint32Array(indexCount);\n      this.lineLengths = new Uint32Array(rows);\n    }\n  }\n\n  public clear(): void {\n    fill(this.cells, 0, 0);\n    fill(this.lineLengths, 0, 0);\n  }\n\n  public clearSelection(): void {\n    this.selection.hasSelection = false;\n    this.selection.viewportStartRow = 0;\n    this.selection.viewportEndRow = 0;\n    this.selection.viewportCappedStartRow = 0;\n    this.selection.viewportCappedEndRow = 0;\n    this.selection.startCol = 0;\n    this.selection.endCol = 0;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\nexport function slice<T extends TypedArray>(array: T, start?: number, end?: number): T {\n  // all modern engines that support .slice\n  if (array.slice) {\n    return array.slice(start, end) as T;\n  }\n  return sliceFallback(array, start, end);\n}\n\nexport function sliceFallback<T extends TypedArray>(array: T, start: number = 0, end: number = array.length): T {\n  if (start < 0) {\n    start = (array.length + start) % array.length;\n  }\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  start = Math.min(start, end);\n\n  const result: T = new (array.constructor as any)(end - start);\n  for (let i = 0; i < end - start; ++i) {\n    result[i] = array[i + start];\n  }\n  return result;\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { GlyphRenderer } from './GlyphRenderer';\nimport { LinkRenderLayer } from './renderLayer/LinkRenderLayer';\nimport { CursorRenderLayer } from './renderLayer/CursorRenderLayer';\nimport { acquireCharAtlas } from './atlas/CharAtlasCache';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { RectangleRenderer } from './RectangleRenderer';\nimport { IWebGL2RenderingContext } from './Types';\nimport { RenderModel, COMBINED_CHAR_BIT_MASK, RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\nimport { Disposable } from 'common/Lifecycle';\nimport { Content, NULL_CELL_CHAR, NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { Terminal, IEvent } from 'xterm';\nimport { IRenderLayer } from './renderLayer/Types';\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { ITerminal, IColorSet } from 'browser/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { CellData } from 'common/buffer/CellData';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { ICharacterJoinerService } from 'browser/services/Services';\nimport { CharData, ICellData } from 'common/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\n\nexport class WebglRenderer extends Disposable implements IRenderer {\n  private _renderLayers: IRenderLayer[];\n  private _charAtlas: WebglCharAtlas | undefined;\n  private _devicePixelRatio: number;\n\n  private _model: RenderModel = new RenderModel();\n  private _workCell: CellData = new CellData();\n\n  private _canvas: HTMLCanvasElement;\n  private _gl: IWebGL2RenderingContext;\n  private _rectangleRenderer: RectangleRenderer;\n  private _glyphRenderer: GlyphRenderer;\n\n  public dimensions: IRenderDimensions;\n\n  private _core: ITerminal;\n  private _isAttached: boolean;\n\n  private _onRequestRedraw = new EventEmitter<IRequestRedrawEvent>();\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return this._onRequestRedraw.event; }\n\n  private _onContextLoss = new EventEmitter<void>();\n  public get onContextLoss(): IEvent<void> { return this._onContextLoss.event; }\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private readonly _characterJoinerService: ICharacterJoinerService,\n    preserveDrawingBuffer?: boolean\n  ) {\n    super();\n\n    this._core = (this._terminal as any)._core;\n\n    this._renderLayers = [\n      new LinkRenderLayer(this._core.screenElement!, 2, this._colors, this._core),\n      new CursorRenderLayer(_terminal, this._core.screenElement!, 3, this._colors, this._core, this._onRequestRedraw)\n    ];\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._devicePixelRatio = window.devicePixelRatio;\n    this._updateDimensions();\n\n    this._canvas = document.createElement('canvas');\n\n    const contextAttributes = {\n      antialias: false,\n      depth: false,\n      preserveDrawingBuffer\n    };\n    this._gl = this._canvas.getContext('webgl2', contextAttributes) as IWebGL2RenderingContext;\n    if (!this._gl) {\n      throw new Error('WebGL2 not supported ' + this._gl);\n    }\n\n    this.register(addDisposableDomListener(this._canvas, 'webglcontextlost', (e) => { this._onContextLoss.fire(e); }));\n\n    this._core.screenElement!.appendChild(this._canvas);\n\n    this._rectangleRenderer = new RectangleRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n    this._glyphRenderer = new GlyphRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n\n    // Update dimensions and acquire char atlas\n    this.onCharSizeChanged();\n\n    this._isAttached = document.body.contains(this._core.screenElement!);\n  }\n\n  public dispose(): void {\n    for (const l of this._renderLayers) {\n      l.dispose();\n    }\n    this._canvas.parentElement?.removeChild(this._canvas);\n    super.dispose();\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._charAtlas?.cacheCanvas;\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    // Clear layers and force a full render\n    for (const l of this._renderLayers) {\n      l.setColors(this._terminal, this._colors);\n      l.reset(this._terminal);\n    }\n\n    this._rectangleRenderer.setColors();\n    this._glyphRenderer.setColors();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== window.devicePixelRatio) {\n      this._devicePixelRatio = window.devicePixelRatio;\n      this.onResize(this._terminal.cols, this._terminal.rows);\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    this._model.resize(this._terminal.cols, this._terminal.rows);\n\n    // Resize all render layers\n    for (const l of this._renderLayers) {\n      l.resize(this._terminal, this.dimensions);\n    }\n\n    // Resize the canvas\n    this._canvas.width = this.dimensions.scaledCanvasWidth;\n    this._canvas.height = this.dimensions.scaledCanvasHeight;\n    this._canvas.style.width = `${this.dimensions.canvasWidth}px`;\n    this._canvas.style.height = `${this.dimensions.canvasHeight}px`;\n\n    // Resize the screen\n    this._core.screenElement!.style.width = `${this.dimensions.canvasWidth}px`;\n    this._core.screenElement!.style.height = `${this.dimensions.canvasHeight}px`;\n\n    this._rectangleRenderer.onResize();\n    if (this._model.selection.hasSelection) {\n      // Update selection as dimensions have changed\n      this._rectangleRenderer.updateSelection(this._model.selection);\n    }\n\n    this._glyphRenderer.setDimensions(this.dimensions);\n    this._glyphRenderer.onResize();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onCharSizeChanged(): void {\n    this.onResize(this._terminal.cols, this._terminal.rows);\n  }\n\n  public onBlur(): void {\n    for (const l of this._renderLayers) {\n      l.onBlur(this._terminal);\n    }\n  }\n\n  public onFocus(): void {\n    for (const l of this._renderLayers) {\n      l.onFocus(this._terminal);\n    }\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    for (const l of this._renderLayers) {\n      l.onSelectionChanged(this._terminal, start, end, columnSelectMode);\n    }\n\n    this._updateSelectionModel(start, end, columnSelectMode);\n\n    this._onRequestRedraw.fire({ start: 0, end: this._terminal.rows - 1 });\n  }\n\n  public onCursorMove(): void {\n    for (const l of this._renderLayers) {\n      l.onCursorMove(this._terminal);\n    }\n  }\n\n  public onOptionsChanged(): void {\n    for (const l of this._renderLayers) {\n      l.onOptionsChanged(this._terminal);\n    }\n    this._updateDimensions();\n    this._refreshCharAtlas();\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(): void {\n    if (this.dimensions.scaledCharWidth <= 0 && this.dimensions.scaledCharHeight <= 0) {\n      // Mark as not attached so char atlas gets refreshed on next render\n      this._isAttached = false;\n      return;\n    }\n\n    const atlas = acquireCharAtlas(this._terminal, this._colors, this.dimensions.scaledCellWidth, this.dimensions.scaledCellHeight, this.dimensions.scaledCharWidth, this.dimensions.scaledCharHeight);\n    if (!('getRasterizedGlyph' in atlas)) {\n      throw new Error('The webgl renderer only works with the webgl char atlas');\n    }\n    this._charAtlas = atlas as WebglCharAtlas;\n    this._charAtlas.warmUp();\n    this._glyphRenderer.setAtlas(this._charAtlas);\n  }\n\n  public clearCharAtlas(): void {\n    this._charAtlas?.clearTexture();\n    this._model.clear();\n    this._updateModel(0, this._terminal.rows - 1);\n    this._onRequestRedraw.fire({ start: 0, end: this._terminal.rows - 1 });\n  }\n\n  public clear(): void {\n    for (const l of this._renderLayers) {\n      l.reset(this._terminal);\n    }\n  }\n\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    return -1;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): boolean {\n    return false;\n  }\n\n  public renderRows(start: number, end: number): void {\n    if (!this._isAttached) {\n      if (document.body.contains(this._core.screenElement!) && (this._core as any)._charSizeService.width && (this._core as any)._charSizeService.height) {\n        this._updateDimensions();\n        this._refreshCharAtlas();\n        this._isAttached = true;\n      } else {\n        return;\n      }\n    }\n\n    // Update render layers\n    for (const l of this._renderLayers) {\n      l.onGridChanged(this._terminal, start, end);\n    }\n\n    // Tell renderer the frame is beginning\n    if (this._glyphRenderer.beginFrame()) {\n      this._model.clear();\n      this._updateSelectionModel(undefined, undefined);\n    }\n\n    // Update model to reflect what's drawn\n    this._updateModel(start, end);\n\n    // Render\n    this._rectangleRenderer.render();\n    this._glyphRenderer.render(this._model, this._model.selection.hasSelection);\n  }\n\n  private _updateModel(start: number, end: number): void {\n    const terminal = this._core;\n    let cell: ICellData = this._workCell;\n\n    for (let y = start; y <= end; y++) {\n      const row = y + terminal.buffer.ydisp;\n      const line = terminal.buffer.lines.get(row)!;\n      this._model.lineLengths[y] = 0;\n      const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n      for (let x = 0; x < terminal.cols; x++) {\n        line.loadCell(x, cell);\n\n        // If true, indicates that the current character(s) to draw were joined.\n        let isJoined = false;\n        let lastCharX = x;\n\n        // Process any joined character ranges as needed. Because of how the\n        // ranges are produced, we know that they are valid for the characters\n        // and attributes of our input.\n        if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n          isJoined = true;\n          const range = joinedRanges.shift()!;\n\n          // We already know the exact start and end column of the joined range,\n          // so we get the string and width representing it directly\n          cell = new JoinedCellData(\n            cell,\n            line!.translateToString(true, range[0], range[1]),\n            range[1] - range[0]\n          );\n\n          // Skip over the cells occupied by this range in the loop\n          lastCharX = range[1] - 1;\n        }\n\n        const chars = cell.getChars();\n        let code = cell.getCode();\n        const i = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n\n        if (code !== NULL_CELL_CODE) {\n          this._model.lineLengths[y] = x + 1;\n        }\n\n        // Nothing has changed, no updates needed\n        if (this._model.cells[i] === code &&\n            this._model.cells[i + RENDER_MODEL_BG_OFFSET] === cell.bg &&\n            this._model.cells[i + RENDER_MODEL_FG_OFFSET] === cell.fg) {\n          continue;\n        }\n\n        // Flag combined chars with a bit mask so they're easily identifiable\n        if (chars.length > 1) {\n          code |= COMBINED_CHAR_BIT_MASK;\n        }\n\n        // Cache the results in the model\n        this._model.cells[i] = code;\n        this._model.cells[i + RENDER_MODEL_BG_OFFSET] = cell.bg;\n        this._model.cells[i + RENDER_MODEL_FG_OFFSET] = cell.fg;\n\n        this._glyphRenderer.updateCell(x, y, code, cell.bg, cell.fg, chars);\n\n        if (isJoined) {\n          // Restore work cell\n          cell = this._workCell;\n\n          // Null out non-first cells\n          for (x++; x < lastCharX; x++) {\n            const j = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n            this._glyphRenderer.updateCell(x, y, NULL_CELL_CODE, 0, 0, NULL_CELL_CHAR);\n            this._model.cells[j] = NULL_CELL_CODE;\n            this._model.cells[j + RENDER_MODEL_BG_OFFSET] = this._workCell.bg;\n            this._model.cells[j + RENDER_MODEL_FG_OFFSET] = this._workCell.fg;\n          }\n        }\n      }\n    }\n    this._rectangleRenderer.updateBackgrounds(this._model);\n    if (this._model.selection.hasSelection) {\n      // Model could be updated but the selection is unchanged\n      this._glyphRenderer.updateSelection(this._model);\n    }\n  }\n\n  private _updateSelectionModel(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    const terminal = this._terminal;\n\n    // Selection does not exist\n    if (!start || !end || (start[0] === end[0] && start[1] === end[1])) {\n      this._model.clearSelection();\n      this._rectangleRenderer.updateSelection(this._model.selection);\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - terminal.buffer.active.viewportY;\n    const viewportEndRow = end[1] - terminal.buffer.active.viewportY;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      this._model.clearSelection();\n      this._rectangleRenderer.updateSelection(this._model.selection);\n      return;\n    }\n\n    this._model.selection.hasSelection = true;\n    this._model.selection.columnSelectMode = columnSelectMode;\n    this._model.selection.viewportStartRow = viewportStartRow;\n    this._model.selection.viewportEndRow = viewportEndRow;\n    this._model.selection.viewportCappedStartRow = viewportCappedStartRow;\n    this._model.selection.viewportCappedEndRow = viewportCappedEndRow;\n    this._model.selection.startCol = start[0];\n    this._model.selection.endCol = end[0];\n\n    this._rectangleRenderer.updateSelection(this._model.selection);\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    // TODO: Acquire CharSizeService properly\n\n    // Perform a new measure if the CharMeasure dimensions are not yet available\n    if (!(this._core as any)._charSizeService.width || !(this._core as any)._charSizeService.height) {\n      return;\n    }\n\n    // Calculate the scaled character width. Width is floored as it must be\n    // drawn to an integer grid in order for the CharAtlas \"stamps\" to not be\n    // blurry. When text is drawn to the grid not using the CharAtlas, it is\n    // clipped to ensure there is no overlap with the next cell.\n\n    // NOTE: ceil fixes sometime, floor does others :s\n\n    this.dimensions.scaledCharWidth = Math.floor((this._core as any)._charSizeService.width * this._devicePixelRatio);\n\n    // Calculate the scaled character height. Height is ceiled in case\n    // devicePixelRatio is a floating point number in order to ensure there is\n    // enough space to draw the character to the cell.\n    this.dimensions.scaledCharHeight = Math.ceil((this._core as any)._charSizeService.height * this._devicePixelRatio);\n\n    // Calculate the scaled cell height, if lineHeight is not 1 then the value\n    // will be floored because since lineHeight can never be lower then 1, there\n    // is a guarentee that the scaled line height will always be larger than\n    // scaled char height.\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.getOption('lineHeight'));\n\n    // Calculate the y coordinate within a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharTop = this._terminal.getOption('lineHeight') === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n\n    // Calculate the scaled cell width, taking the letterSpacing into account.\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.getOption('letterSpacing'));\n\n    // Calculate the x coordinate with a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharLeft = Math.floor(this._terminal.getOption('letterSpacing') / 2);\n\n    // Recalculate the canvas dimensions; scaled* define the actual number of\n    // pixel in the canvas\n    this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\n    this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\n\n    // The the size of the canvas on the page. It's very important that this\n    // rounds to nearest integer and not ceils as browsers often set\n    // window.devicePixelRatio as something like 1.100000023841858, when it's\n    // actually 1.1. Ceiling causes blurriness as the backing canvas image is 1\n    // pixel too large for the canvas element size.\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / this._devicePixelRatio);\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / this._devicePixelRatio);\n\n    // this.dimensions.scaledCanvasHeight = this.dimensions.canvasHeight * devicePixelRatio;\n    // this.dimensions.scaledCanvasWidth = this.dimensions.canvasWidth * devicePixelRatio;\n\n    // Get the _actual_ dimensions of an individual cell. This needs to be\n    // derived from the canvasWidth/Height calculated above which takes into\n    // account window.devicePixelRatio. CharMeasure.width/height by itself is\n    // insufficient when the page is not at 100% zoom level as CharMeasure is\n    // measured in CSS pixels, but the actual char size on the canvas can\n    // differ.\n    // this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\n    // this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\n\n    // This fixes 110% and 125%, not 150% or 175% though\n    this.dimensions.actualCellHeight = this.dimensions.scaledCellHeight / this._devicePixelRatio;\n    this.dimensions.actualCellWidth = this.dimensions.scaledCellWidth / this._devicePixelRatio;\n  }\n}\n\n// TODO: Share impl with core\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * A matrix that when multiplies will translate 0-1 coordinates (left to right,\n * top to bottom) to clip space.\n */\nexport const PROJECTION_MATRIX = new Float32Array([\n  2, 0, 0, 0,\n  0, -2, 0, 0,\n  0, 0, 1, 0,\n  -1, 1, 0, 1\n]);\n\nexport function createProgram(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string): WebGLProgram | undefined {\n  const program = throwIfFalsy(gl.createProgram());\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.VERTEX_SHADER, vertexSource)));\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.FRAGMENT_SHADER, fragmentSource)));\n  gl.linkProgram(program);\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.error(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n}\n\nexport function createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader | undefined {\n  const shader = throwIfFalsy(gl.createShader(type));\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.error(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n}\n\nexport function expandFloat32Array(source: Float32Array, max: number): Float32Array {\n  const newLength = Math.min(source.length * 2, max);\n  const newArray = new Float32Array(newLength);\n  for (let i = 0; i < source.length; i++) {\n    newArray[i] = source[i];\n  }\n  return newArray;\n}\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { generateConfig, configEquals } from './CharAtlasUtils';\nimport { WebglCharAtlas } from './WebglCharAtlas';\nimport { ICharAtlasConfig } from './Types';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\n\ninterface ICharAtlasCacheEntry {\n  atlas: WebglCharAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: Terminal[];\n}\n\nconst charAtlasCache: ICharAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n * @param terminal The terminal.\n * @param colors The colors to use.\n */\nexport function acquireCharAtlas(\n  terminal: Terminal,\n  colors: IColorSet,\n  scaledCellWidth: number,\n  scaledCellHeight: number,\n  scaledCharWidth: number,\n  scaledCharHeight: number\n): WebglCharAtlas {\n  const newConfig = generateConfig(scaledCellWidth, scaledCellHeight, scaledCharWidth, scaledCharHeight, terminal, colors);\n\n  // Check to see if the terminal already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the terminal from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the terminal to the cache entry and return\n      entry.ownedBy.push(terminal);\n      return entry.atlas;\n    }\n  }\n\n  const newEntry: ICharAtlasCacheEntry = {\n    atlas: new WebglCharAtlas(document, newConfig),\n    config: newConfig,\n    ownedBy: [terminal]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n * @param terminal The terminal to remove.\n */\nexport function removeTerminalFromCache(terminal: Terminal): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(terminal);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only terminal\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { Attributes } from 'common/buffer/Constants';\nimport { Terminal, FontWeight } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\n\nconst NULL_COLOR: IColor = {\n  css: '',\n  rgba: 0\n};\n\nexport function generateConfig(scaledCellWidth: number, scaledCellHeight: number, scaledCharWidth: number, scaledCharHeight: number, terminal: Terminal, colors: IColorSet): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: NULL_COLOR,\n    cursorAccent: NULL_COLOR,\n    selectionTransparent: NULL_COLOR,\n    selectionOpaque: NULL_COLOR,\n    // For the static char atlas, we only use the first 16 colors, but we need all 256 for the\n    // dynamic character atlas.\n    ansi: colors.ansi.slice(),\n    contrastCache: colors.contrastCache\n  };\n  return {\n    customGlyphs: terminal.getOption('customGlyphs'),\n    devicePixelRatio: window.devicePixelRatio,\n    letterSpacing: terminal.getOption('letterSpacing'),\n    lineHeight: terminal.getOption('lineHeight'),\n    scaledCellWidth,\n    scaledCellHeight,\n    scaledCharWidth,\n    scaledCharHeight,\n    fontFamily: terminal.getOption('fontFamily'),\n    fontSize: terminal.getOption('fontSize'),\n    fontWeight: terminal.getOption('fontWeight') as FontWeight,\n    fontWeightBold: terminal.getOption('fontWeightBold') as FontWeight,\n    allowTransparency: terminal.getOption('allowTransparency'),\n    drawBoldTextInBrightColors: terminal.getOption('drawBoldTextInBrightColors'),\n    minimumContrastRatio: terminal.getOption('minimumContrastRatio'),\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.customGlyphs === b.customGlyphs &&\n      a.lineHeight === b.lineHeight &&\n      a.letterSpacing === b.letterSpacing &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.scaledCharWidth === b.scaledCharWidth &&\n      a.scaledCharHeight === b.scaledCharHeight &&\n      a.drawBoldTextInBrightColors === b.drawBoldTextInBrightColors &&\n      a.minimumContrastRatio === b.minimumContrastRatio &&\n      a.colors.foreground === b.colors.foreground &&\n      a.colors.background === b.colors.background;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return (colorCode & Attributes.CM_MASK) === Attributes.CM_P16 || (colorCode & Attributes.CM_MASK) === Attributes.CM_P256;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { DIM_OPACITY, TEXT_BASELINE } from 'browser/renderer/atlas/Constants';\nimport { IRasterizedGlyph, IBoundingBox, IRasterizedGlyphSet } from '../Types';\nimport { DEFAULT_COLOR, Attributes } from 'common/buffer/Constants';\nimport { throwIfFalsy } from '../WebglUtils';\nimport { IColor } from 'browser/Types';\nimport { IDisposable } from 'xterm';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { channels, rgba } from 'browser/Color';\nimport { tryDrawCustomChar } from 'browser/renderer/CustomGlyphs';\n\n// For debugging purposes, it can be useful to set this to a really tiny value,\n// to verify that LRU eviction works.\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 1024;\n\n/**\n * The amount of the texture to be filled before throwing it away and starting\n * again. Since the throw away and individual glyph draws don't cost too much,\n * this prevent juggling multiple textures in the GL context.\n */\nconst TEXTURE_CAPACITY = Math.floor(TEXTURE_HEIGHT * 0.8);\n\nconst TRANSPARENT_COLOR = {\n  css: 'rgba(0, 0, 0, 0)',\n  rgba: 0\n};\n\n/**\n * A shared object which is used to draw nothing for a particular cell.\n */\nconst NULL_RASTERIZED_GLYPH: IRasterizedGlyph = {\n  offset: { x: 0, y: 0 },\n  texturePosition: { x: 0, y: 0 },\n  texturePositionClipSpace: { x: 0, y: 0 },\n  size: { x: 0, y: 0 },\n  sizeClipSpace: { x: 0, y: 0 }\n};\n\nconst TMP_CANVAS_GLYPH_PADDING = 2;\n\nexport class WebglCharAtlas implements IDisposable {\n  private _didWarmUp: boolean = false;\n\n  private _cacheMap: { [code: number]: IRasterizedGlyphSet } = {};\n  private _cacheMapCombined: { [chars: string]: IRasterizedGlyphSet } = {};\n\n  // The texture that the atlas is drawn to\n  public cacheCanvas: HTMLCanvasElement;\n  private _cacheCtx: CanvasRenderingContext2D;\n\n  private _tmpCanvas: HTMLCanvasElement;\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  // Since glyphs are expected to be around the same height, the packing\n  // strategy used it to fill a row with glyphs while keeping track of the\n  // tallest glyph in the row. Once the row is full a new row is started at\n  // (0,lastRow+lastRowTallestGlyph).\n  private _currentRowY: number = 0;\n  private _currentRowX: number = 0;\n  private _currentRowHeight: number = 0;\n\n  public hasCanvasChanged = false;\n\n  private _workBoundingBox: IBoundingBox = { top: 0, left: 0, bottom: 0, right: 0 };\n  private _workAttributeData: AttributeData = new AttributeData();\n\n  constructor(\n    document: Document,\n    private _config: ICharAtlasConfig\n  ) {\n    this.cacheCanvas = document.createElement('canvas');\n    this.cacheCanvas.width = TEXTURE_WIDTH;\n    this.cacheCanvas.height = TEXTURE_HEIGHT;\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this._cacheCtx = throwIfFalsy(this.cacheCanvas.getContext('2d', { alpha: true }));\n\n    this._tmpCanvas = document.createElement('canvas');\n    this._tmpCanvas.width = this._config.scaledCellWidth * 4 + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCanvas.height = this._config.scaledCellHeight + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCtx = throwIfFalsy(this._tmpCanvas.getContext('2d', { alpha: this._config.allowTransparency }));\n  }\n\n  public dispose(): void {\n    if (this.cacheCanvas.parentElement) {\n      this.cacheCanvas.parentElement.removeChild(this.cacheCanvas);\n    }\n  }\n\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  private _doWarmUp(): void {\n    // Pre-fill with ASCII 33-126\n    for (let i = 33; i < 126; i++) {\n      const rasterizedGlyph = this._drawToCache(i, DEFAULT_COLOR, DEFAULT_COLOR);\n      this._cacheMap[i] = {\n        [DEFAULT_COLOR]: {\n          [DEFAULT_COLOR]: rasterizedGlyph\n        }\n      };\n    }\n  }\n\n  public beginFrame(): boolean {\n    if (this._currentRowY > TEXTURE_CAPACITY) {\n      this.clearTexture();\n      this.warmUp();\n      return true;\n    }\n    return false;\n  }\n\n  public clearTexture(): void {\n    if (this._currentRowX === 0 && this._currentRowY === 0) {\n      return;\n    }\n    this._cacheCtx.clearRect(0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT);\n    this._cacheMap = {};\n    this._cacheMapCombined = {};\n    this._currentRowHeight = 0;\n    this._currentRowX = 0;\n    this._currentRowY = 0;\n    this._didWarmUp = false;\n  }\n\n  public getRasterizedGlyphCombinedChar(chars: string, bg: number, fg: number): IRasterizedGlyph {\n    let rasterizedGlyphSet = this._cacheMapCombined[chars];\n    if (!rasterizedGlyphSet) {\n      rasterizedGlyphSet = {};\n      this._cacheMapCombined[chars] = rasterizedGlyphSet;\n    }\n    let rasterizedGlyph: IRasterizedGlyph | undefined;\n    const rasterizedGlyphSetBg = rasterizedGlyphSet[bg];\n    if (rasterizedGlyphSetBg) {\n      rasterizedGlyph = rasterizedGlyphSetBg[fg];\n    }\n    if (!rasterizedGlyph) {\n      rasterizedGlyph = this._drawToCache(chars, bg, fg);\n      if (!rasterizedGlyphSet[bg]) {\n        rasterizedGlyphSet[bg] = {};\n      }\n      rasterizedGlyphSet[bg]![fg] = rasterizedGlyph;\n    }\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Gets the glyphs texture coords, drawing the texture if it's not already\n   */\n  public getRasterizedGlyph(code: number, bg: number, fg: number): IRasterizedGlyph {\n    let rasterizedGlyphSet = this._cacheMap[code];\n    if (!rasterizedGlyphSet) {\n      rasterizedGlyphSet = {};\n      this._cacheMap[code] = rasterizedGlyphSet;\n    }\n    let rasterizedGlyph: IRasterizedGlyph | undefined;\n    const rasterizedGlyphSetBg = rasterizedGlyphSet[bg];\n    if (rasterizedGlyphSetBg) {\n      rasterizedGlyph = rasterizedGlyphSetBg[fg];\n    }\n    if (!rasterizedGlyph) {\n      rasterizedGlyph = this._drawToCache(code, bg, fg);\n      if (!rasterizedGlyphSet[bg]) {\n        rasterizedGlyphSet[bg] = {};\n      }\n      rasterizedGlyphSet[bg]![fg] = rasterizedGlyph;\n    }\n    return rasterizedGlyph;\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._config.colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._config.colors.ansi[idx];\n  }\n\n  private _getBackgroundColor(bgColorMode: number, bgColor: number, inverse: boolean): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return TRANSPARENT_COLOR;\n    }\n\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor);\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(bgColor);\n        // TODO: This object creation is slow\n        return {\n          rgba: bgColor << 8,\n          css: `#${toPaddedHex(arr[0])}${toPaddedHex(arr[1])}${toPaddedHex(arr[2])}`\n        };\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground;\n        }\n        return this._config.colors.background;\n    }\n  }\n\n  private _getForegroundCss(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): string {\n    const minimumContrastCss = this._getMinimumContrastCss(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold);\n    if (minimumContrastCss) {\n      return minimumContrastCss;\n    }\n\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).css;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(fgColor);\n        return channels.toCss(arr[0], arr[1], arr[2]);\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          const bg = this._config.colors.background.css;\n          if (bg.length === 9) {\n            // Remove bg alpha channel if present\n            return bg.substr(0, 7);\n          }\n          return bg;\n        }\n        return this._config.colors.foreground.css;\n    }\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor).rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground.rgba;\n        }\n        return this._config.colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.background.rgba;\n        }\n        return this._config.colors.foreground.rgba;\n    }\n  }\n\n  private _getMinimumContrastCss(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): string | undefined {\n    if (this._config.minimumContrastRatio === 1) {\n      return undefined;\n    }\n\n    // Try get from cache first\n    const adjustedColor = this._config.colors.contrastCache.getCss(bg, fg);\n    if (adjustedColor !== undefined) {\n      return adjustedColor || undefined;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgColorMode, bgColor, inverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, inverse, bold);\n    const result = rgba.ensureContrastRatio(bgRgba, fgRgba, this._config.minimumContrastRatio);\n\n    if (!result) {\n      this._config.colors.contrastCache.setCss(bg, fg, null);\n      return undefined;\n    }\n\n    const css = channels.toCss(\n      (result >> 24) & 0xFF,\n      (result >> 16) & 0xFF,\n      (result >> 8) & 0xFF\n    );\n    this._config.colors.contrastCache.setCss(bg, fg, css);\n\n    return css;\n  }\n\n  private _drawToCache(code: number, bg: number, fg: number): IRasterizedGlyph;\n  private _drawToCache(chars: string, bg: number, fg: number): IRasterizedGlyph;\n  private _drawToCache(codeOrChars: number | string, bg: number, fg: number): IRasterizedGlyph {\n    const chars = typeof codeOrChars === 'number' ? String.fromCharCode(codeOrChars) : codeOrChars;\n\n    this.hasCanvasChanged = true;\n\n    // Allow 1 cell width per character, with a minimum of 2 (CJK), plus some padding. This is used\n    // to draw the glyph to the canvas as well as to restrict the bounding box search to ensure\n    // giant ligatures (eg. =====>) don't impact overall performance.\n    const allowedWidth = this._config.scaledCharWidth * Math.max(chars.length, 2) + TMP_CANVAS_GLYPH_PADDING * 2;\n    if (this._tmpCanvas.width < allowedWidth) {\n      this._tmpCanvas.width = allowedWidth;\n    }\n    this._tmpCtx.save();\n\n    this._workAttributeData.fg = fg;\n    this._workAttributeData.bg = bg;\n\n    const invisible = !!this._workAttributeData.isInvisible();\n    if (invisible) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const bold = !!this._workAttributeData.isBold();\n    const inverse = !!this._workAttributeData.isInverse();\n    const dim = !!this._workAttributeData.isDim();\n    const italic = !!this._workAttributeData.isItalic();\n    const underline = !!this._workAttributeData.isUnderline();\n    const strikethrough = !!this._workAttributeData.isStrikethrough();\n    let fgColor = this._workAttributeData.getFgColor();\n    let fgColorMode = this._workAttributeData.getFgColorMode();\n    let bgColor = this._workAttributeData.getBgColor();\n    let bgColorMode = this._workAttributeData.getBgColorMode();\n    if (inverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(bgColorMode, bgColor, inverse);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\n    // transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = TEXT_BASELINE;\n\n    this._tmpCtx.fillStyle = this._getForegroundCss(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold);\n\n    // Apply alpha to dim the character\n    if (dim) {\n      this._tmpCtx.globalAlpha = DIM_OPACITY;\n    }\n\n    // Check if the char is a powerline glyph, these will be restricted to a single cell glyph, no\n    // padding on either side that are allowed for other glyphs since they are designed to be pixel\n    // perfect but may render with \"bad\" anti-aliasing\n    let isPowerlineGlyph = false;\n    if (chars.length === 1) {\n      const code = chars.charCodeAt(0);\n      if (code >= 0xE0A0 && code <= 0xE0D6) {\n        isPowerlineGlyph = true;\n      }\n    }\n\n    // For powerline glyphs left/top padding is excluded (https://github.com/microsoft/vscode/issues/120129)\n    const padding = isPowerlineGlyph ? 0 : TMP_CANVAS_GLYPH_PADDING;\n\n    // Draw custom characters if applicable\n    let drawSuccess = false;\n    if (this._config.customGlyphs !== false) {\n      drawSuccess = tryDrawCustomChar(this._tmpCtx, chars, padding, padding, this._config.scaledCellWidth, this._config.scaledCellHeight);\n    }\n\n    // Draw the character\n    if (!drawSuccess) {\n      this._tmpCtx.fillText(chars, padding, padding + this._config.scaledCharHeight);\n    }\n\n    // If this charcater is underscore and beyond the cell bounds, shift it up until it is visible,\n    // try for a maximum of 5 pixels.\n    if (chars === '_' && !this._config.allowTransparency) {\n      let isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.scaledCellWidth, this._config.scaledCellHeight), backgroundColor);\n      if (isBeyondCellBounds) {\n        for (let offset = 1; offset <= 5; offset++) {\n          this._tmpCtx.clearRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n          this._tmpCtx.fillText(chars, padding, padding + this._config.scaledCharHeight - offset);\n          isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.scaledCellWidth, this._config.scaledCellHeight), backgroundColor);\n          if (!isBeyondCellBounds) {\n            break;\n          }\n        }\n      }\n    }\n\n    // Draw underline and strikethrough\n    if (underline || strikethrough) {\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize / 10));\n      const yOffset = this._tmpCtx.lineWidth % 2 === 1 ? 0.5 : 0; // When the width is odd, draw at 0.5 position\n      this._tmpCtx.lineWidth = lineWidth;\n      this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      this._tmpCtx.beginPath();\n      if (underline) {\n        this._tmpCtx.moveTo(padding, padding + this._config.scaledCharHeight - yOffset);\n        this._tmpCtx.lineTo(padding + this._config.scaledCharWidth, padding + this._config.scaledCharHeight - yOffset);\n      }\n      if (strikethrough) {\n        this._tmpCtx.moveTo(padding, padding + Math.floor(this._config.scaledCharHeight / 2) - yOffset);\n        this._tmpCtx.lineTo(padding + this._config.scaledCharWidth, padding + Math.floor(this._config.scaledCharHeight / 2) - yOffset);\n      }\n      this._tmpCtx.stroke();\n      this._tmpCtx.closePath();\n    }\n\n    this._tmpCtx.restore();\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    const imageData = this._tmpCtx.getImageData(\n      0, 0, this._tmpCanvas.width, this._tmpCanvas.height\n    );\n\n    // TODO: Support transparency\n    // let isEmpty = false;\n    // if (!this._config.allowTransparency) {\n    //   isEmpty = clearColor(imageData, backgroundColor);\n    // }\n\n    // Clear out the background color and determine if the glyph is empty.\n    const isEmpty = clearColor(imageData, backgroundColor);\n\n    // Handle empty glyphs\n    if (isEmpty) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const rasterizedGlyph = this._findGlyphBoundingBox(imageData, this._workBoundingBox, allowedWidth, isPowerlineGlyph, drawSuccess);\n    const clippedImageData = this._clipImageData(imageData, this._workBoundingBox);\n\n    // Check if there is enough room in the current row and go to next if needed\n    if (this._currentRowX + rasterizedGlyph.size.x > TEXTURE_WIDTH) {\n      this._currentRowX = 0;\n      this._currentRowY += this._currentRowHeight;\n      this._currentRowHeight = 0;\n    }\n\n    // Record texture position\n    rasterizedGlyph.texturePosition.x = this._currentRowX;\n    rasterizedGlyph.texturePosition.y = this._currentRowY;\n    rasterizedGlyph.texturePositionClipSpace.x = this._currentRowX / TEXTURE_WIDTH;\n    rasterizedGlyph.texturePositionClipSpace.y = this._currentRowY / TEXTURE_HEIGHT;\n\n    // Update atlas current row\n    this._currentRowHeight = Math.max(this._currentRowHeight, rasterizedGlyph.size.y);\n    this._currentRowX += rasterizedGlyph.size.x;\n\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    this._cacheCtx.putImageData(clippedImageData, rasterizedGlyph.texturePosition.x, rasterizedGlyph.texturePosition.y);\n\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Given an ImageData object, find the bounding box of the non-transparent\n   * portion of the texture and return an IRasterizedGlyph with these\n   * dimensions.\n   * @param imageData The image data to read.\n   * @param boundingBox An IBoundingBox to put the clipped bounding box values.\n   */\n  private _findGlyphBoundingBox(imageData: ImageData, boundingBox: IBoundingBox, allowedWidth: number, restrictedGlyph: boolean, customGlyph: boolean): IRasterizedGlyph {\n    boundingBox.top = 0;\n    const height = restrictedGlyph ? this._config.scaledCharHeight : this._tmpCanvas.height;\n    const width = restrictedGlyph ? this._config.scaledCharWidth : allowedWidth;\n    let found = false;\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.top = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.left = 0;\n    found = false;\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.left = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.right = width;\n    found = false;\n    for (let x = width - 1; x >= 0; x--) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.right = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.bottom = height;\n    found = false;\n    for (let y = height - 1; y >= 0; y--) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.bottom = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    return {\n      texturePosition: { x: 0, y: 0 },\n      texturePositionClipSpace: { x: 0, y: 0 },\n      size: {\n        x: boundingBox.right - boundingBox.left + 1,\n        y: boundingBox.bottom - boundingBox.top + 1\n      },\n      sizeClipSpace: {\n        x: (boundingBox.right - boundingBox.left + 1) / TEXTURE_WIDTH,\n        y: (boundingBox.bottom - boundingBox.top + 1) / TEXTURE_HEIGHT\n      },\n      offset: {\n        x: -boundingBox.left + (restrictedGlyph ? 0 : TMP_CANVAS_GLYPH_PADDING) + (customGlyph ? Math.floor(this._config.letterSpacing / 2) : 0),\n        y: -boundingBox.top + (restrictedGlyph ? 0 : TMP_CANVAS_GLYPH_PADDING) + (customGlyph ? this._config.lineHeight === 1 ? 0 : Math.round((this._config.scaledCellHeight - this._config.scaledCharHeight) / 2) : 0)\n      }\n    };\n  }\n\n  private _clipImageData(imageData: ImageData, boundingBox: IBoundingBox): ImageData {\n    const width = boundingBox.right - boundingBox.left + 1;\n    const height = boundingBox.bottom - boundingBox.top + 1;\n    const clippedData = new Uint8ClampedArray(width * height * 4);\n    for (let y = boundingBox.top; y <= boundingBox.bottom; y++) {\n      for (let x = boundingBox.left; x <= boundingBox.right; x++) {\n        const oldOffset = y * this._tmpCanvas.width * 4 + x * 4;\n        const newOffset = (y - boundingBox.top) * width * 4 + (x - boundingBox.left) * 4;\n        clippedData[newOffset] = imageData.data[oldOffset];\n        clippedData[newOffset + 1] = imageData.data[oldOffset + 1];\n        clippedData[newOffset + 2] = imageData.data[oldOffset + 2];\n        clippedData[newOffset + 3] = imageData.data[oldOffset + 3];\n      }\n    }\n    return new ImageData(clippedData, width, height);\n  }\n}\n\n/**\n * Makes a partiicular rgb color in an ImageData completely transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, color: IColor): boolean {\n  let isEmpty = true;\n  const r = color.rgba >>> 24;\n  const g = color.rgba >>> 16 & 0xFF;\n  const b = color.rgba >>> 8 & 0xFF;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      isEmpty = false;\n    }\n  }\n  return isEmpty;\n}\n\nfunction toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderLayer } from './Types';\nimport { acquireCharAtlas } from '../atlas/CharAtlasCache';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\nimport { TEXT_BASELINE } from 'browser/renderer/atlas/Constants';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { WebglCharAtlas } from 'atlas/WebglCharAtlas';\nimport { throwIfFalsy } from '../WebglUtils';\n\nexport abstract class BaseRenderLayer implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _scaledCharWidth: number = 0;\n  private _scaledCharHeight: number = 0;\n  private _scaledCellWidth: number = 0;\n  private _scaledCellHeight: number = 0;\n  private _scaledCharLeft: number = 0;\n  private _scaledCharTop: number = 0;\n\n  protected _charAtlas: WebglCharAtlas | undefined;\n\n  constructor(\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected _colors: IColorSet\n  ) {\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n  }\n\n  public dispose(): void {\n    this._container.removeChild(this._canvas);\n    if (this._charAtlas) {\n      this._charAtlas.dispose();\n    }\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', { alpha: this._alpha }));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {}\n  public onBlur(terminal: Terminal): void {}\n  public onFocus(terminal: Terminal): void {}\n  public onCursorMove(terminal: Terminal): void {}\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {}\n  public onSelectionChanged(terminal: Terminal, start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {}\n\n  public setColors(terminal: Terminal, colorSet: IColorSet): void {\n    this._refreshCharAtlas(terminal, colorSet);\n  }\n\n  protected _setTransparency(terminal: Terminal, alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(terminal, this._colors);\n    this.onGridChanged(terminal, 0, terminal.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(terminal: Terminal, colorSet: IColorSet): void {\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireCharAtlas(terminal, colorSet, this._scaledCellWidth, this._scaledCellHeight, this._scaledCharWidth, this._scaledCharHeight);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = `${dim.canvasWidth}px`;\n    this._canvas.style.height = `${dim.canvasHeight}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(terminal, this._colors);\n  }\n\n  public abstract reset(terminal: Terminal): void;\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      width * this._scaledCellWidth,\n      height * this._scaledCellHeight);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1 /* Ensure it's drawn within the cell */,\n      width * this._scaledCellWidth,\n      window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillLeftLineAtCell(x: number, y: number, width: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      window.devicePixelRatio * width,\n      this._scaledCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    this._ctx.lineWidth = window.devicePixelRatio;\n    this._ctx.strokeRect(\n      x * this._scaledCellWidth + window.devicePixelRatio / 2,\n      y * this._scaledCellHeight + (window.devicePixelRatio / 2),\n      width * this._scaledCellWidth - window.devicePixelRatio,\n      (height * this._scaledCellHeight) - window.devicePixelRatio);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param terminal The terminal.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param color The color of the character.\n   */\n  protected _fillCharTrueColor(terminal: Terminal, cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(terminal, false, false);\n    this._ctx.textBaseline = TEXT_BASELINE;\n    this._clipRow(terminal, y);\n    this._ctx.fillText(\n      cell.getChars(),\n      x * this._scaledCellWidth + this._scaledCharLeft,\n      y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight);\n  }\n\n  /**\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\n   * @param terminal The terminal.\n   * @param y The row to clip.\n   */\n  private _clipRow(terminal: Terminal, y: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n      0,\n      y * this._scaledCellHeight,\n      terminal.cols * this._scaledCellWidth,\n      this._scaledCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param terminal The terminal.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(terminal: Terminal, isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? terminal.getOption('fontWeightBold') : terminal.getOption('fontWeight');\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${terminal.getOption('fontSize') * window.devicePixelRatio}px ${terminal.getOption('fontFamily')}`;\n  }\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IColorSet, ITerminal } from 'browser/Types';\nimport { IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { IEventEmitter } from 'common/EventEmitter';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (terminal: Terminal, x: number, y: number, cell: ICellData) => void};\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\n  private _cell: ICellData = new CellData();\n\n  constructor(\n    terminal: Terminal,\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    private readonly _terminal: ITerminal,\n    private _onRequestRefreshRowsEvent: IEventEmitter<IRequestRedrawEvent>\n  ) {\n    super(container, 'cursor', zIndex, true, colors);\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this)\n    };\n    this.onOptionsChanged(terminal);\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCursor();\n    this._cursorBlinkStateManager?.restartBlinkAnimation(terminal);\n    this.onOptionsChanged(terminal);\n  }\n\n  public onBlur(terminal: Terminal): void {\n    this._cursorBlinkStateManager?.pause();\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onFocus(terminal: Terminal): void {\n    this._cursorBlinkStateManager?.resume(terminal);\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {\n    if (terminal.getOption('cursorBlink')) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(terminal, () => {\n          this._render(terminal, true);\n        });\n      }\n    } else {\n      this._cursorBlinkStateManager?.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onCursorMove(terminal: Terminal): void {\n    this._cursorBlinkStateManager?.restartBlinkAnimation(terminal);\n  }\n\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(terminal, false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  private _render(terminal: Terminal, triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    // TODO: Need to expose API for this\n    if (!this._terminal.coreService.isCursorInitialized || this._terminal.coreService.isCursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = terminal.buffer.active.baseY + terminal.buffer.active.cursorY;\n    const viewportRelativeCursorY = cursorY - terminal.buffer.active.viewportY;\n\n    // in case cursor.x == cols adjust visual cursor to cols - 1\n    const cursorX = Math.min(terminal.buffer.active.cursorX, terminal.cols - 1);\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    // TODO: Need fast buffer API for loading cell\n    (terminal as any)._core.buffer.lines.get(cursorY).loadCell(cursorX, this._cell);\n    if (this._cell.content === undefined) {\n      return;\n    }\n\n    if (!isTerminalFocused(terminal)) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._colors.cursor.css;\n      const cursorStyle = terminal.getOption('cursorStyle');\n      if (cursorStyle && cursorStyle !== 'block') {\n        this._cursorRenderers[cursorStyle](terminal, cursorX, viewportRelativeCursorY, this._cell);\n      } else {\n        this._renderBlurCursor(terminal, cursorX, viewportRelativeCursorY, this._cell);\n      }\n      this._ctx.restore();\n      this._state.x = cursorX;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = cursorStyle;\n      this._state.width = this._cell.getWidth();\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === cursorX &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === isTerminalFocused(terminal) &&\n          this._state.style === terminal.getOption('cursorStyle') &&\n          this._state.width === this._cell.getWidth()) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[terminal.getOption('cursorStyle') || 'block'](terminal, cursorX, viewportRelativeCursorY, this._cell);\n    this._ctx.restore();\n\n    this._state.x = cursorX;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = terminal.getOption('cursorStyle');\n    this._state.width = this._cell.getWidth();\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      // Avoid potential rounding errors when device pixel ratio is less than 1\n      if (window.devicePixelRatio < 1) {\n        this._clearAll();\n      } else {\n        this._clearCells(this._state.x, this._state.y, this._state.width, 1);\n      }\n      this._state = {\n        x: 0,\n        y: 0,\n        isFocused: false,\n        style: '',\n        width: 0\n      };\n    }\n  }\n\n  private _renderBarCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillLeftLineAtCell(x, y, terminal.getOption('cursorWidth'));\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillCells(x, y, cell.getWidth(), 1);\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\n    this._fillCharTrueColor(terminal, cell, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlurCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._colors.cursor.css;\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\n    this._ctx.restore();\n  }\n}\n\nclass CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    terminal: Terminal,\n    private _renderCallback: () => void\n  ) {\n    this.isCursorVisible = true;\n    if (isTerminalFocused(terminal)) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(terminal: Terminal): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = window.setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = window.setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(terminal: Terminal): void {\n    // Clear out any existing timers just in case\n    this.pause();\n\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation(terminal);\n  }\n}\n\nfunction isTerminalFocused(terminal: Terminal): boolean {\n  return document.activeElement === terminal.textarea && document.hasFocus();\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { is256Color } from '../atlas/CharAtlasUtils';\nimport { ITerminal, IColorSet, ILinkifierEvent } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet, terminal: ITerminal) {\n    super(container, 'link', zIndex, true, colors);\n    terminal.linkifier.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    terminal.linkifier.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n\n    terminal.linkifier2.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    terminal.linkifier2.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _onShowLinkUnderline(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background.css;\n    } else if (e.fg !== undefined && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._colors.ansi[e.fg!].css;\n    } else {\n      this._ctx.fillStyle = this._colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _onHideLinkUnderline(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor } from 'browser/Types';\nimport { IColorRGB } from 'common/Types';\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    const a = (fg.rgba & 0xFF) / 255;\n    if (a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    const r = bgR + Math.round((fgR - bgR) * a);\n    const g = bgG + Math.round((fgG - bgG) * a);\n    const b = bgB + Math.round((fgB - bgB) * a);\n    const css = channels.toCss(r, g, b);\n    const rgba = channels.toRgba(r, g, b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    const [r, g, b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    const a = Math.round(opacity * 0xFF);\n    const [r, g, b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\n */\nexport namespace css {\n  export function toColor(css: string): IColor {\n    switch (css.length) {\n      case 7: // #rrggbb\n        return {\n          css,\n          rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n        };\n      case 9: // #rrggbbaa\n        return {\n          css,\n          rgba: parseInt(css.slice(1), 16) >>> 0\n        };\n    }\n    throw new Error('css.toColor: Unsupported css format');\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        return reduceLuminance(bgRgba, fgRgba, ratio);\n      }\n      return increaseLuminance(bgRgba, fgRgba, ratio);\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  // FIXME: Move this to channels NS?\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number): IColor {\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param type The event type.\n * @param handler The handler for the listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { throwIfFalsy } from 'browser/renderer/RendererUtils';\n\ninterface IBlockVector {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\nexport const blockElementDefinitions: { [index: string]: IBlockVector[] | undefined } = {\n  // Block elements (0x2580-0x2590)\n  '▀': [{ x: 0, y: 0, w: 8, h: 4 }], // UPPER HALF BLOCK\n  '▁': [{ x: 0, y: 7, w: 8, h: 1 }], // LOWER ONE EIGHTH BLOCK\n  '▂': [{ x: 0, y: 6, w: 8, h: 2 }], // LOWER ONE QUARTER BLOCK\n  '▃': [{ x: 0, y: 5, w: 8, h: 3 }], // LOWER THREE EIGHTHS BLOCK\n  '▄': [{ x: 0, y: 4, w: 8, h: 4 }], // LOWER HALF BLOCK\n  '▅': [{ x: 0, y: 3, w: 8, h: 5 }], // LOWER FIVE EIGHTHS BLOCK\n  '▆': [{ x: 0, y: 2, w: 8, h: 6 }], // LOWER THREE QUARTERS BLOCK\n  '▇': [{ x: 0, y: 1, w: 8, h: 7 }], // LOWER SEVEN EIGHTHS BLOCK\n  '█': [{ x: 0, y: 0, w: 8, h: 8 }], // FULL BLOCK\n  '▉': [{ x: 0, y: 0, w: 7, h: 8 }], // LEFT SEVEN EIGHTHS BLOCK\n  '▊': [{ x: 0, y: 0, w: 6, h: 8 }], // LEFT THREE QUARTERS BLOCK\n  '▋': [{ x: 0, y: 0, w: 5, h: 8 }], // LEFT FIVE EIGHTHS BLOCK\n  '▌': [{ x: 0, y: 0, w: 4, h: 8 }], // LEFT HALF BLOCK\n  '▍': [{ x: 0, y: 0, w: 3, h: 8 }], // LEFT THREE EIGHTHS BLOCK\n  '▎': [{ x: 0, y: 0, w: 2, h: 8 }], // LEFT ONE QUARTER BLOCK\n  '▏': [{ x: 0, y: 0, w: 1, h: 8 }], // LEFT ONE EIGHTH BLOCK\n  '▐': [{ x: 4, y: 0, w: 4, h: 8 }], // RIGHT HALF BLOCK\n\n  // Block elements (0x2594-0x2595)\n  '▔': [{ x: 0, y: 0, w: 9, h: 1 }], // UPPER ONE EIGHTH BLOCK\n  '▕': [{ x: 7, y: 0, w: 1, h: 8 }], // RIGHT ONE EIGHTH BLOCK\n\n  // Terminal graphic characters (0x2596-0x259F)\n  '▖': [{ x: 0, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER LEFT\n  '▗': [{ x: 4, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER RIGHT\n  '▘': [{ x: 0, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER LEFT\n  '▙': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT\n  '▚': [{ x: 0, y: 0, w: 4, h: 4 }, { x: 4, y: 4, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND LOWER RIGHT\n  '▛': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT\n  '▜': [{ x: 0, y: 0, w: 8, h: 4 }, { x: 4, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT\n  '▝': [{ x: 4, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER RIGHT\n  '▞': [{ x: 4, y: 0, w: 4, h: 4 }, { x: 0, y: 4, w: 4, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT\n  '▟': [{ x: 4, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT\n\n  // VERTICAL ONE EIGHTH BLOCK-2 through VERTICAL ONE EIGHTH BLOCK-7\n  '\\u{1FB70}': [{ x: 1, y: 0, w: 1, h: 8 }],\n  '\\u{1FB71}': [{ x: 2, y: 0, w: 1, h: 8 }],\n  '\\u{1FB72}': [{ x: 3, y: 0, w: 1, h: 8 }],\n  '\\u{1FB73}': [{ x: 4, y: 0, w: 1, h: 8 }],\n  '\\u{1FB74}': [{ x: 5, y: 0, w: 1, h: 8 }],\n  '\\u{1FB75}': [{ x: 6, y: 0, w: 1, h: 8 }],\n\n  // HORIZONTAL ONE EIGHTH BLOCK-2 through HORIZONTAL ONE EIGHTH BLOCK-7\n  '\\u{1FB76}': [{ x: 0, y: 1, w: 8, h: 1 }],\n  '\\u{1FB77}': [{ x: 0, y: 2, w: 8, h: 1 }],\n  '\\u{1FB78}': [{ x: 0, y: 3, w: 8, h: 1 }],\n  '\\u{1FB79}': [{ x: 0, y: 4, w: 8, h: 1 }],\n  '\\u{1FB7A}': [{ x: 0, y: 5, w: 8, h: 1 }],\n  '\\u{1FB7B}': [{ x: 0, y: 6, w: 8, h: 1 }],\n\n  // LEFT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7C}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // LEFT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7D}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7E}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7F}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // UPPER AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB80}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // HORIZONTAL ONE EIGHTH BLOCK-1358\n  '\\u{1FB81}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 2, w: 8, h: 1 }, { x: 0, y: 4, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n\n  // UPPER ONE QUARTER BLOCK\n  '\\u{1FB82}': [{ x: 0, y: 0, w: 8, h: 2 }],\n  // UPPER THREE EIGHTHS BLOCK\n  '\\u{1FB83}': [{ x: 0, y: 0, w: 8, h: 3 }],\n  // UPPER FIVE EIGHTHS BLOCK\n  '\\u{1FB84}': [{ x: 0, y: 0, w: 8, h: 5 }],\n  // UPPER THREE QUARTERS BLOCK\n  '\\u{1FB85}': [{ x: 0, y: 0, w: 8, h: 6 }],\n  // UPPER SEVEN EIGHTHS BLOCK\n  '\\u{1FB86}': [{ x: 0, y: 0, w: 8, h: 7 }],\n\n  // RIGHT ONE QUARTER BLOCK\n  '\\u{1FB87}': [{ x: 6, y: 0, w: 2, h: 8 }],\n  // RIGHT THREE EIGHTHS B0OCK\n  '\\u{1FB88}': [{ x: 5, y: 0, w: 3, h: 8 }],\n  // RIGHT FIVE EIGHTHS BL0CK\n  '\\u{1FB89}': [{ x: 3, y: 0, w: 5, h: 8 }],\n  // RIGHT THREE QUARTERS 0LOCK\n  '\\u{1FB8A}': [{ x: 2, y: 0, w: 6, h: 8 }],\n  // RIGHT SEVEN EIGHTHS B0OCK\n  '\\u{1FB8B}': [{ x: 1, y: 0, w: 7, h: 8 }],\n\n  // CHECKER BOARD FILL\n  '\\u{1FB95}': [\n    { x: 0, y: 0, w: 2, h: 2 }, { x: 4, y: 0, w: 2, h: 2 },\n    { x: 2, y: 2, w: 2, h: 2 }, { x: 6, y: 2, w: 2, h: 2 },\n    { x: 0, y: 4, w: 2, h: 2 }, { x: 4, y: 4, w: 2, h: 2 },\n    { x: 2, y: 6, w: 2, h: 2 }, { x: 6, y: 6, w: 2, h: 2 }\n  ],\n  // INVERSE CHECKER BOARD FILL\n  '\\u{1FB96}': [\n    { x: 2, y: 0, w: 2, h: 2 }, { x: 6, y: 0, w: 2, h: 2 },\n    { x: 0, y: 2, w: 2, h: 2 }, { x: 4, y: 2, w: 2, h: 2 },\n    { x: 2, y: 4, w: 2, h: 2 }, { x: 6, y: 4, w: 2, h: 2 },\n    { x: 0, y: 6, w: 2, h: 2 }, { x: 4, y: 6, w: 2, h: 2 }\n  ],\n  // HEAVY HORIZONTAL FILL (upper middle and lower one quarter block)\n  '\\u{1FB97}': [{ x: 0, y: 2, w: 8, h: 2 }, { x: 0, y: 6, w: 8, h: 2 }]\n};\n\ntype PatternDefinition = number[][];\n\n/**\n * Defines the repeating pattern used by special characters, the pattern is made up of a 2d array of\n * pixel values to be filled (1) or not filled (0).\n */\nconst patternCharacterDefinitions: { [key: string]: PatternDefinition | undefined } = {\n  // Shade characters (0x2591-0x2593)\n  '░': [ // LIGHT SHADE (25%)\n    [1, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 0]\n  ],\n  '▒': [ // MEDIUM SHADE (50%)\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [0, 0]\n  ],\n  '▓': [ // DARK SHADE (75%)\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, 1]\n  ]\n};\n\nconst enum Shapes {\n  /** │ */ TOP_TO_BOTTOM = 'M.5,0 L.5,1',\n  /** ─ */ LEFT_TO_RIGHT = 'M0,.5 L1,.5',\n\n  /** └ */ TOP_TO_RIGHT = 'M.5,0 L.5,.5 L1,.5',\n  /** ┘ */ TOP_TO_LEFT = 'M.5,0 L.5,.5 L0,.5',\n  /** ┐ */ LEFT_TO_BOTTOM = 'M0,.5 L.5,.5 L.5,1',\n  /** ┌ */ RIGHT_TO_BOTTOM = 'M0.5,1 L.5,.5 L1,.5',\n\n  /** ╵ */ MIDDLE_TO_TOP = 'M.5,.5 L.5,0',\n  /** ╴ */ MIDDLE_TO_LEFT = 'M.5,.5 L0,.5',\n  /** ╶ */ MIDDLE_TO_RIGHT = 'M.5,.5 L1,.5',\n  /** ╷ */ MIDDLE_TO_BOTTOM = 'M.5,.5 L.5,1',\n\n  /** ┴ */ T_TOP = 'M0,.5 L1,.5 M.5,.5 L.5,0',\n  /** ┤ */ T_LEFT = 'M.5,0 L.5,1 M.5,.5 L0,.5',\n  /** ├ */ T_RIGHT = 'M.5,0 L.5,1 M.5,.5 L1,.5',\n  /** ┬ */ T_BOTTOM = 'M0,.5 L1,.5 M.5,.5 L.5,1',\n\n  /** ┼ */ CROSS = 'M0,.5 L1,.5 M.5,0 L.5,1',\n\n  /** ╌ */ TWO_DASHES_HORIZONTAL = 'M.1,.5 L.4,.5 M.6,.5 L.9,.5', // .2 empty, .3 filled\n  /** ┄ */ THREE_DASHES_HORIZONTAL = 'M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5', // .1333 empty, .2 filled\n  /** ┉ */ FOUR_DASHES_HORIZONTAL = 'M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5', // .1 empty, .15 filled\n  /** ╎ */ TWO_DASHES_VERTICAL = 'M.5,.1 L.5,.4 M.5,.6 L.5,.9',\n  /** ┆ */ THREE_DASHES_VERTICAL = 'M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333',\n  /** ┊ */ FOUR_DASHES_VERTICAL = 'M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95',\n}\n\nconst enum Style {\n  NORMAL = 1,\n  BOLD = 3\n}\n\n/**\n * This contains the definitions of all box drawing characters in the format of SVG paths (ie. the\n * svg d attribute).\n */\nexport const boxDrawingDefinitions: { [character: string]: { [fontWeight: number]: string | ((xp: number, yp: number) => string) } | undefined } = {\n  // Uniform normal and bold\n  '─': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT },\n  '━': { [Style.BOLD]:   Shapes.LEFT_TO_RIGHT },\n  '│': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM },\n  '┃': { [Style.BOLD]:   Shapes.TOP_TO_BOTTOM },\n  '┌': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM },\n  '┏': { [Style.BOLD]:   Shapes.RIGHT_TO_BOTTOM },\n  '┐': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM },\n  '┓': { [Style.BOLD]:   Shapes.LEFT_TO_BOTTOM },\n  '└': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT },\n  '┗': { [Style.BOLD]:   Shapes.TOP_TO_RIGHT },\n  '┘': { [Style.NORMAL]: Shapes.TOP_TO_LEFT },\n  '┛': { [Style.BOLD]:   Shapes.TOP_TO_LEFT },\n  '├': { [Style.NORMAL]: Shapes.T_RIGHT },\n  '┣': { [Style.BOLD]:   Shapes.T_RIGHT },\n  '┤': { [Style.NORMAL]: Shapes.T_LEFT },\n  '┫': { [Style.BOLD]:   Shapes.T_LEFT },\n  '┬': { [Style.NORMAL]: Shapes.T_BOTTOM },\n  '┳': { [Style.BOLD]:   Shapes.T_BOTTOM },\n  '┴': { [Style.NORMAL]: Shapes.T_TOP },\n  '┻': { [Style.BOLD]:   Shapes.T_TOP },\n  '┼': { [Style.NORMAL]: Shapes.CROSS },\n  '╋': { [Style.BOLD]:   Shapes.CROSS },\n  '╴': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT },\n  '╸': { [Style.BOLD]:   Shapes.MIDDLE_TO_LEFT },\n  '╵': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP },\n  '╹': { [Style.BOLD]:   Shapes.MIDDLE_TO_TOP },\n  '╶': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT },\n  '╺': { [Style.BOLD]:   Shapes.MIDDLE_TO_RIGHT },\n  '╷': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM },\n  '╻': { [Style.BOLD]:   Shapes.MIDDLE_TO_BOTTOM },\n\n  // Double border\n  '═': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '║': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╒': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╓': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},1 L${.5 - xp},.5 L1,.5 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╔': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╕': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L.5,${.5 - yp} L.5,1 M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╖': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},1 L${.5 + xp},.5 L0,.5 M${.5 - xp},.5 L${.5 - xp},1` },\n  '╗': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},1` },\n  '╘': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 + yp} L1,${.5 + yp} M.5,${.5 - yp} L1,${.5 - yp}` },\n  '╙': { [Style.NORMAL]: (xp, yp) => `M1,.5 L${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╚': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0 M1,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},0` },\n  '╛': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L.5,${.5 + yp} L.5,0 M0,${.5 - yp} L.5,${.5 - yp}` },\n  '╜': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 + xp},.5 L${.5 + xp},0 M${.5 - xp},.5 L${.5 - xp},0` },\n  '╝': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M0,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},0` },\n  '╞': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╟': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1 M${.5 + xp},.5 L1,.5` },\n  '╠': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╡': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L.5,${.5 - yp} M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╢': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 - xp},.5 M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╣': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},0 L${.5 + xp},1 M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0` },\n  '╤': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp} M.5,${.5 + yp} L.5,1` },\n  '╥': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},1 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╦': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╧': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - yp} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╨': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╩': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L1,${.5 + yp} M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╪': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╫': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╬': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n\n  // Diagonal\n  '╱': { [Style.NORMAL]: 'M1,0 L0,1' },\n  '╲': { [Style.NORMAL]: 'M0,0 L1,1' },\n  '╳': { [Style.NORMAL]: 'M1,0 L0,1 M0,0 L1,1' },\n\n  // Mixed weight\n  '╼': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '╽': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╾': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '╿': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┍': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┎': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┑': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┒': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┕': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┖': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┙': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┚': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┝': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┞': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┟': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┠': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┡': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┢': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┥': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┦': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┧': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┨': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┩': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┪': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┭': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┮': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┯': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┰': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┱': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┲': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┵': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┶': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┷': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┸': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┹': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┺': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┽': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}`,  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┾': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}`,   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┿': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '╀': { [Style.NORMAL]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}`, [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '╁': { [Style.NORMAL]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}`,    [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╂': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '╃': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '╄': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '╅': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '╆': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '╇': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}` },\n  '╈': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}` },\n  '╉': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}` },\n  '╊': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}` },\n\n  // Dashed\n  '╌': { [Style.NORMAL]: Shapes.TWO_DASHES_HORIZONTAL },\n  '╍': { [Style.BOLD]:   Shapes.TWO_DASHES_HORIZONTAL },\n  '┄': { [Style.NORMAL]: Shapes.THREE_DASHES_HORIZONTAL },\n  '┅': { [Style.BOLD]:   Shapes.THREE_DASHES_HORIZONTAL },\n  '┈': { [Style.NORMAL]: Shapes.FOUR_DASHES_HORIZONTAL },\n  '┉': { [Style.BOLD]:   Shapes.FOUR_DASHES_HORIZONTAL },\n  '╎': { [Style.NORMAL]: Shapes.TWO_DASHES_VERTICAL },\n  '╏': { [Style.BOLD]:   Shapes.TWO_DASHES_VERTICAL },\n  '┆': { [Style.NORMAL]: Shapes.THREE_DASHES_VERTICAL  },\n  '┇': { [Style.BOLD]:   Shapes.THREE_DASHES_VERTICAL },\n  '┊': { [Style.NORMAL]: Shapes.FOUR_DASHES_VERTICAL },\n  '┋': { [Style.BOLD]:   Shapes.FOUR_DASHES_VERTICAL },\n\n  // Curved\n  '╭': { [Style.NORMAL]: 'C.5,1,.5,.5,1,.5' },\n  '╮': { [Style.NORMAL]: 'C.5,1,.5,.5,0,.5' },\n  '╯': { [Style.NORMAL]: 'C.5,0,.5,.5,0,.5' },\n  '╰': { [Style.NORMAL]: 'C.5,0,.5,.5,1,.5' }\n};\n\n/**\n * Try drawing a custom block element or box drawing character, returning whether it was\n * successfully drawn.\n */\nexport function tryDrawCustomChar(\n  ctx: CanvasRenderingContext2D,\n  c: string,\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): boolean {\n  const blockElementDefinition = blockElementDefinitions[c];\n  if (blockElementDefinition) {\n    drawBlockElementChar(ctx, blockElementDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const patternDefinition = patternCharacterDefinitions[c];\n  if (patternDefinition) {\n    drawPatternChar(ctx, patternDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const boxDrawingDefinition = boxDrawingDefinitions[c];\n  if (boxDrawingDefinition) {\n    drawBoxDrawingChar(ctx, boxDrawingDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  return false;\n}\n\nfunction drawBlockElementChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IBlockVector[],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  for (let i = 0; i < charDefinition.length; i++) {\n    const box = charDefinition[i];\n    const xEighth = scaledCellWidth / 8;\n    const yEighth = scaledCellHeight / 8;\n    ctx.fillRect(\n      xOffset + box.x * xEighth,\n      yOffset + box.y * yEighth,\n      box.w * xEighth,\n      box.h * yEighth\n    );\n  }\n}\n\nconst cachedPatterns: Map<PatternDefinition, Map</* fillStyle */string, CanvasPattern>> = new Map();\n\nfunction drawPatternChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: number[][],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  let patternSet = cachedPatterns.get(charDefinition);\n  if (!patternSet) {\n    patternSet = new Map();\n    cachedPatterns.set(charDefinition, patternSet);\n  }\n  const fillStyle = ctx.fillStyle;\n  if (typeof fillStyle !== 'string') {\n    throw new Error(`Unexpected fillStyle type \"${fillStyle}\"`);\n  }\n  let pattern = patternSet.get(fillStyle);\n  if (!pattern) {\n    const width = charDefinition[0].length;\n    const height = charDefinition.length;\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = width;\n    tmpCanvas.height = height;\n    const tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d'));\n    const imageData = new ImageData(width, height);\n\n    // Extract rgba from fillStyle\n    let r: number;\n    let g: number;\n    let b: number;\n    let a: number;\n    if (fillStyle.startsWith('#')) {\n      r = parseInt(fillStyle.substr(1, 2), 16);\n      g = parseInt(fillStyle.substr(3, 2), 16);\n      b = parseInt(fillStyle.substr(5, 2), 16);\n      a = fillStyle.length > 7 && parseInt(fillStyle.substr(7, 2), 16) || 1;\n    } else if (fillStyle.startsWith('rgba')) {\n      ([r, g, b, a] = fillStyle.substring(5, fillStyle.length - 1).split(',').map(e => parseFloat(e)));\n    } else {\n      throw new Error(`Unexpected fillStyle color format \"${fillStyle}\" when drawing pattern glyph`);\n    }\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        imageData.data[(y * width + x) * 4    ] = r;\n        imageData.data[(y * width + x) * 4 + 1] = g;\n        imageData.data[(y * width + x) * 4 + 2] = b;\n        imageData.data[(y * width + x) * 4 + 3] = charDefinition[y][x] * (a * 255);\n      }\n    }\n    tmpCtx.putImageData(imageData, 0, 0);\n    pattern = throwIfFalsy(ctx.createPattern(tmpCanvas, null));\n    patternSet.set(fillStyle, pattern);\n  }\n  ctx.fillStyle = pattern;\n  ctx.fillRect(xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n}\n\n/**\n * Draws the following box drawing characters by mapping a subset of SVG d attribute instructions to\n * canvas draw calls.\n *\n * Box styles:       ┎┰┒┍┯┑╓╥╖╒╤╕ ┏┳┓┌┲┓┌┬┐┏┱┐\n * ┌─┬─┐ ┏━┳━┓ ╔═╦═╗ ┠╂┨┝┿┥╟╫╢╞╪╡ ┡╇┩├╊┫┢╈┪┣╉┤\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┖┸┚┕┷┙╙╨╜╘╧╛ └┴┘└┺┛┗┻┛┗┹┘\n * ├─┼─┤ ┣━╋━┫ ╠═╬═╣ ┏┱┐┌┲┓┌┬┐┌┬┐ ┏┳┓┌┮┓┌┬┐┏┭┐\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┡╃┤├╄┩├╆┪┢╅┤ ┞╀┦├┾┫┟╁┧┣┽┤\n * └─┴─┘ ┗━┻━┛ ╚═╩═╝ └┴┘└┴┘└┺┛┗┹┘ └┴┘└┶┛┗┻┛┗┵┘\n *\n * Other:\n * ╭─╮ ╲ ╱ ╷╻╎╏┆┇┊┋ ╺╾╴ ╌╌╌ ┄┄┄ ┈┈┈\n * │ │  ╳  ╽╿╎╏┆┇┊┋ ╶╼╸ ╍╍╍ ┅┅┅ ┉┉┉\n * ╰─╯ ╱ ╲ ╹╵╎╏┆┇┊┋\n *\n * All box drawing characters:\n * ─ ━ │ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┌ ┍ ┎ ┏\n * ┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟\n * ┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯\n * ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿\n * ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏\n * ═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟\n * ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ ╭ ╮ ╯\n * ╰ ╱ ╲ ╳ ╴ ╵ ╶ ╷ ╸ ╹ ╺ ╻ ╼ ╽ ╾ ╿\n *\n * ---\n *\n * Box drawing alignment tests:                                          █\n *                                                                       ▉\n *   ╔══╦══╗  ┌──┬──┐  ╭──┬──╮  ╭──┬──╮  ┏━━┳━━┓  ┎┒┏┑   ╷  ╻ ┏┯┓ ┌┰┐    ▊ ╱╲╱╲╳╳╳\n *   ║┌─╨─┐║  │╔═╧═╗│  │╒═╪═╕│  │╓─╁─╖│  ┃┌─╂─┐┃  ┗╃╄┙  ╶┼╴╺╋╸┠┼┨ ┝╋┥    ▋ ╲╱╲╱╳╳╳\n *   ║│╲ ╱│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╿ │┃  ┍╅╆┓   ╵  ╹ ┗┷┛ └┸┘    ▌ ╱╲╱╲╳╳╳\n *   ╠╡ ╳ ╞╣  ├╢   ╟┤  ├┼─┼─┼┤  ├╫─╂─╫┤  ┣┿╾┼╼┿┫  ┕┛┖┚     ┌┄┄┐ ╎ ┏┅┅┓ ┋ ▍ ╲╱╲╱╳╳╳\n *   ║│╱ ╲│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╽ │┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▎\n *   ║└─╥─┘║  │╚═╤═╝│  │╘═╪═╛│  │╙─╀─╜│  ┃└─╂─┘┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▏\n *   ╚══╩══╝  └──┴──┘  ╰──┴──╯  ╰──┴──╯  ┗━━┻━━┛           └╌╌┘ ╎ ┗╍╍┛ ┋  ▁▂▃▄▅▆▇█\n *\n * Source: https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html\n */\nfunction drawBoxDrawingChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: { [fontWeight: number]: string | ((xp: number, yp: number) => string) },\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  ctx.strokeStyle = ctx.fillStyle;\n  for (const [fontWeight, instructions] of Object.entries(charDefinition)) {\n    ctx.beginPath();\n    ctx.lineWidth = window.devicePixelRatio * Number.parseInt(fontWeight);\n    let actualInstructions: string;\n    if (typeof instructions === 'function') {\n      const xp = .15;\n      const yp = .15 / scaledCellHeight * scaledCellWidth;\n      actualInstructions = instructions(xp, yp);\n    } else {\n      actualInstructions = instructions;\n    }\n    for (const instruction of actualInstructions.split(' ')) {\n      const type = instruction[0];\n      const f = svgToCanvasInstructionMap[type];\n      if (!f) {\n        console.error(`Could not find drawing instructions for \"${type}\"`);\n        continue;\n      }\n      const args: string[] = instruction.substring(1).split(',');\n      if (!args[0] || !args[1]) {\n        continue;\n      }\n      f(ctx, translateArgs(args, scaledCellWidth, scaledCellHeight, xOffset, yOffset));\n    }\n    ctx.stroke();\n    ctx.closePath();\n  }\n}\n\nfunction clamp(value: number, max: number, min: number = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst svgToCanvasInstructionMap: { [index: string]: any } = {\n  'C': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.bezierCurveTo(args[0], args[1], args[2], args[3], args[4], args[5]),\n  'L': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.lineTo(args[0], args[1]),\n  'M': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.moveTo(args[0], args[1])\n};\n\nfunction translateArgs(args: string[], cellWidth: number, cellHeight: number, xOffset: number, yOffset: number): number[] {\n  const result = args.map(e => parseFloat(e) || parseInt(e));\n\n  if (result.length < 2) {\n    throw new Error('Too few arguments for instruction');\n  }\n\n  for (let x = 0; x < result.length; x += 2) {\n    // Translate from 0-1 to 0-cellWidth\n    result[x] *= cellWidth;\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (result[x] !== 0) {\n      result[x] = clamp(Math.round(result[x] + 0.5) - 0.5, cellWidth, 0);\n    }\n    // Apply the cell's offset (ie. x*cellWidth)\n    result[x] += xOffset;\n  }\n\n  for (let y = 1; y < result.length; y += 2) {\n    // Translate from 0-1 to 0-cellHeight\n    result[y] *= cellHeight;\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (result[y] !== 0) {\n      result[y] = clamp(Math.round(result[y] + 0.5) - 0.5, cellHeight, 0);\n    }\n    // Apply the cell's offset (ie. x*cellHeight)\n    result[y] += yOffset;\n  }\n\n  return result;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox would\n// result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox ? 'bottom' : 'ideographic';\n\nexport const CHAR_ATLAS_CELL_SPACING = 1;\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nconst isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n\n/**\n * polyfill for TypedArray.fill\n * This is needed to support .fill in all safari versions and IE 11.\n */\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\n  // all modern engines that support .fill\n  if (array.fill) {\n    return array.fill(value, start, end) as T;\n  }\n  return fillFallback(array, value, start, end);\n}\n\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\n  // safari and IE 11\n  // since IE 11 does not support Array.prototype.fill either\n  // we cannot use the suggested polyfill from MDN\n  // instead we simply fall back to looping\n  if (start >= array.length) {\n    return array;\n  }\n  start = (array.length + start) % array.length;\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  for (let i = start; i < end; ++i) {\n    array[i] = value;\n  }\n  return array;\n}\n\n/**\n * Concat two typed arrays `a` and `b`.\n * Returns a new typed array.\n */\nexport function concat<T extends TypedArray>(a: T, b: T): T {\n  const result = new (a.constructor as any)(a.length + b.length);\n  result.set(a);\n  result.set(b, a.length);\n  return result;\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     { return this.fg & FgFlags.UNDERLINE; }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  constructor(\n    // underline style, NONE is empty\n    public underlineStyle: UnderlineStyle = UnderlineStyle.NONE,\n    // underline color, -1 is empty (same as FG)\n    public underlineColor: number = -1\n  ) {}\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this.underlineStyle, this.underlineColor);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon, IEvent } from 'xterm';\nimport { WebglRenderer } from './WebglRenderer';\nimport { ICharacterJoinerService, IRenderService } from 'browser/services/Services';\nimport { IColorSet } from 'browser/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { isSafari } from 'common/Platform';\n\nexport class WebglAddon implements ITerminalAddon {\n  private _terminal?: Terminal;\n  private _renderer?: WebglRenderer;\n  private _onContextLoss = new EventEmitter<void>();\n  public get onContextLoss(): IEvent<void> { return this._onContextLoss.event; }\n\n  constructor(\n    private _preserveDrawingBuffer?: boolean\n  ) {}\n\n  public activate(terminal: Terminal): void {\n    if (!terminal.element) {\n      throw new Error('Cannot activate WebglAddon before Terminal.open');\n    }\n    if (isSafari) {\n      throw new Error('Webgl is not currently supported on Safari');\n    }\n    this._terminal = terminal;\n    const renderService: IRenderService = (terminal as any)._core._renderService;\n    const characterJoinerService: ICharacterJoinerService = (terminal as any)._core._characterJoinerService;\n    const colors: IColorSet = (terminal as any)._core._colorManager.colors;\n    this._renderer = new WebglRenderer(terminal, colors, characterJoinerService, this._preserveDrawingBuffer);\n    this._renderer.onContextLoss(() => this._onContextLoss.fire());\n    renderService.setRenderer(this._renderer);\n  }\n\n  public dispose(): void {\n    if (!this._terminal) {\n      throw new Error('Cannot dispose WebglAddon because it is activated');\n    }\n    const renderService: IRenderService = (this._terminal as any)._core._renderService;\n    renderService.setRenderer((this._terminal as any)._core._createRenderer());\n    renderService.onResize(this._terminal.cols, this._terminal.rows);\n    this._renderer = undefined;\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._renderer?.textureAtlas;\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderer?.clearCharAtlas();\n  }\n}\n"],"names":["self","module","exports","activate","terminal","this","_terminal","dispose","fit","dims","proposeDimensions","core","_core","rows","cols","_renderService","clear","resize","element","parentElement","dimensions","actualCellWidth","actualCellHeight","parentElementStyle","window","getComputedStyle","parentElementHeight","parseInt","getPropertyValue","parentElementWidth","Math","max","elementStyle","availableHeight","availableWidth","viewport","scrollBarWidth","floor","FitAddon","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","NON_WORD_CHARACTERS","e","_linesCacheTimeoutId","findNext","term","searchOptions","Error","length","clearSelection","currentSelection","startCol","startRow","hasSelection","incremental","getSelectionPosition","endRow","startColumn","endColumn","_initLinesCache","searchPosition","result","_findInLine","y","buffer","active","baseY","_selectResult","findPrevious","isReverseSearch","row","col","_linesCache","Array","_cursorMoveListener","onCursorMove","_destroyLinesCache","_resizeListener","onResize","clearTimeout","setTimeout","_isWholeWord","searchIndex","line","includes","firstLine","getLine","isWrapped","cache","_translateBufferLineToStringWithWrap","stringLine","offsets","offset","_bufferColsToStringOffset","searchTerm","caseSensitive","toLowerCase","searchStringLine","resultIndex","regex","searchRegex","RegExp","foundTerm","exec","slice","lastIndex","lastIndexOf","indexOf","wholeWord","startRowOffset","endRowOffset","startColOffset","endColOffset","startColIndex","_stringLengthToBufferSize","size","i","cell","getCell","char","getChars","nextCell","getWidth","lineIndex","trimRight","strings","lineOffsets","nextLine","lineWrapsToNext","string","translateToString","lastCell","getCode","push","join","select","viewportY","scrollLines","SearchAddon","INDICES_PER_CELL","BYTES_PER_CELL","Float32Array","BYTES_PER_ELEMENT","_colors","_gl","_dimensions","_activeBuffer","_vertices","count","attributes","attributesBuffers","selectionAttributes","gl","program","throwIfFalsy","createProgram","_program","_projectionLocation","getUniformLocation","_resolutionLocation","_textureLocation","_vertexArrayObject","createVertexArray","bindVertexArray","unitQuadVertices","unitQuadVerticesBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","unitQuadElementIndices","Uint8Array","elementIndicesBuffer","ELEMENT_ARRAY_BUFFER","_attributesBuffer","vertexAttribDivisor","_atlasTexture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","beginFrame","_atlas","updateCell","x","code","bg","fg","chars","_updateCell","array","rasterizedGlyph","NULL_CELL_CODE","getRasterizedGlyphCombinedChar","getRasterizedGlyph","scaledCharLeft","scaledCharTop","scaledCanvasWidth","scaledCanvasHeight","texturePositionClipSpace","sizeClipSpace","fill","updateSelection","model","s","selectionOpaque","rgba","selection","columnSelectMode","width","endCol","height","viewportCappedEndRow","viewportCappedStartRow","_updateSelectionRange","viewportStartRow","startRowEndCol","middleRowsCount","viewportEndRow","RENDER_MODEL_INDICIES_PER_CELL","cells","RENDER_MODEL_FG_OFFSET","workCell","AttributeData","RENDER_MODEL_BG_OFFSET","getBgColorMode","c","_getColorFromAnsiIndex","getBgColor","arr","toColorRGB","c2","background","COMBINED_CHAR_BIT_MASK","idx","ansi","canvas","newCount","setColors","render","renderModel","isSelectionVisible","useProgram","activeBuffer","bufferLength","lineLengths","si","sub","subarray","set","STREAM_DRAW","hasCanvasChanged","uniform1i","activeTexture","TEXTURE0","cacheCanvas","generateMipmap","uniformMatrix4fv","PROJECTION_MATRIX","uniform2f","drawElementsInstanced","TRIANGLES","setAtlas","atlas","setDimensions","GlyphRenderer","BYTES_PER_RECTANGLE","_updateCachedColors","DYNAMIC_DRAW","_updateViewportRectangle","_bgFloat","_colorToFloat32Array","_selectionFloat","_addRectangleFloat","scaledCellWidth","scaledCellHeight","INDICES_PER_RECTANGLE","updateBackgrounds","vertices","rectangleCount","currentStartX","currentBg","currentFg","currentInverse","modelIndex","inverse","_updateRectangle","startX","endX","foreground","expandFloat32Array","x1","y1","r","g","b","_addRectangle","a","color","RectangleRenderer","Uint32Array","indexCount","RenderModel","sliceFallback","start","end","min","constructor","_characterJoinerService","preserveDrawingBuffer","_model","_workCell","CellData","_onRequestRedraw","EventEmitter","_onContextLoss","_renderLayers","LinkRenderLayer","screenElement","CursorRenderLayer","scaledCharWidth","scaledCharHeight","canvasWidth","canvasHeight","_devicePixelRatio","devicePixelRatio","_updateDimensions","_canvas","document","createElement","contextAttributes","antialias","depth","getContext","register","addDisposableDomListener","fire","appendChild","_rectangleRenderer","_glyphRenderer","onCharSizeChanged","_isAttached","body","contains","event","removeChild","t","_charAtlas","colors","l","reset","_refreshCharAtlas","onDevicePixelRatioChange","style","onBlur","onFocus","onSelectionChanged","_updateSelectionModel","onOptionsChanged","acquireCharAtlas","warmUp","clearCharAtlas","clearTexture","_updateModel","registerCharacterJoiner","handler","deregisterCharacterJoiner","joinerId","renderRows","_charSizeService","onGridChanged","undefined","ydisp","lines","get","joinedRanges","getJoinedCharacters","loadCell","isJoined","lastCharX","range","shift","JoinedCellData","j","NULL_CELL_CHAR","ceil","getOption","round","Disposable","WebglRenderer","firstCell","content","combinedData","_width","isCombined","setFromCharData","value","getAsCharData","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","vertexSource","fragmentSource","attachShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","newLength","newArray","charAtlasCache","newConfig","generateConfig","ownedByIndex","entry","ownedBy","configEquals","config","splice","newEntry","WebglCharAtlas","index","NULL_COLOR","css","clonedColors","cursor","cursorAccent","selectionTransparent","contrastCache","customGlyphs","letterSpacing","lineHeight","fontFamily","fontSize","fontWeight","fontWeightBold","allowTransparency","drawBoldTextInBrightColors","minimumContrastRatio","colorCode","TEXTURE_WIDTH","TEXTURE_HEIGHT","TEXTURE_CAPACITY","TRANSPARENT_COLOR","NULL_RASTERIZED_GLYPH","texturePosition","_config","_didWarmUp","_cacheMap","_cacheMapCombined","_currentRowY","_currentRowX","_currentRowHeight","_workBoundingBox","top","left","bottom","right","_workAttributeData","_cacheCtx","alpha","_tmpCanvas","TMP_CANVAS_GLYPH_PADDING","_tmpCtx","_doWarmUp","_drawToCache","DEFAULT_COLOR","clearRect","rasterizedGlyphSet","rasterizedGlyphSetBg","_getBackgroundColor","bgColorMode","bgColor","toPaddedHex","_getForegroundCss","fgColorMode","fgColor","bold","minimumContrastCss","_getMinimumContrastCss","channels","toCss","substr","_resolveBackgroundRgba","_resolveForegroundRgba","adjustedColor","getCss","bgRgba","fgRgba","ensureContrastRatio","setCss","codeOrChars","String","fromCharCode","allowedWidth","save","isInvisible","isBold","isInverse","dim","isDim","italic","isItalic","underline","isUnderline","strikethrough","isStrikethrough","getFgColor","getFgColorMode","temp","temp2","backgroundColor","globalCompositeOperation","fillStyle","fillRect","fontStyle","font","textBaseline","TEXT_BASELINE","globalAlpha","DIM_OPACITY","isPowerlineGlyph","charCodeAt","padding","drawSuccess","tryDrawCustomChar","fillText","isBeyondCellBounds","clearColor","getImageData","lineWidth","yOffset","strokeStyle","beginPath","moveTo","lineTo","stroke","closePath","restore","imageData","_findGlyphBoundingBox","clippedImageData","_clipImageData","putImageData","boundingBox","restrictedGlyph","customGlyph","found","alphaOffset","data","clippedData","Uint8ClampedArray","oldOffset","newOffset","ImageData","isEmpty","toString","_container","id","zIndex","_alpha","_scaledCharWidth","_scaledCharHeight","_scaledCellWidth","_scaledCellHeight","_scaledCharLeft","_scaledCharTop","classList","add","_initCanvas","_ctx","_clearAll","colorSet","_setTransparency","oldCanvas","cloneNode","replaceChild","_fillCells","_fillBottomLineAtCells","_fillLeftLineAtCell","_strokeRectAtCell","strokeRect","_clearCells","_fillCharTrueColor","_getFont","_clipRow","rect","clip","BaseRenderLayer","BLINK_INTERVAL","container","_onRequestRefreshRowsEvent","_cell","_state","isFocused","_cursorRenderers","_renderBarCursor","bind","_renderBlockCursor","_renderUnderlineCursor","_clearCursor","_cursorBlinkStateManager","restartBlinkAnimation","pause","cursorY","resume","CursorBlinkStateManager","_render","isPaused","triggeredByAnimationFrame","coreService","isCursorInitialized","isCursorHidden","viewportRelativeCursorY","cursorX","isTerminalFocused","cursorStyle","_renderBlurCursor","isCursorVisible","_renderCallback","_restartInterval","_blinkStartTimeout","_blinkInterval","clearInterval","_animationFrame","cancelAnimationFrame","_animationTimeRestarted","Date","now","requestAnimationFrame","timeToStart","time","setInterval","activeElement","textarea","hasFocus","linkifier","onShowLinkUnderline","_onShowLinkUnderline","onHideLinkUnderline","_onHideLinkUnderline","linkifier2","_clearCurrentLink","middleRowCount","y2","x2","INVERTED_DEFAULT_COLOR","is256Color","rgb","contrastRatio","l1","l2","toRgba","blend","fgR","fgG","fgB","bgR","bgG","bgB","isOpaque","ratio","toColor","opaque","rgbaColor","toChannels","opacity","relativeLuminance2","rs","gs","bs","pow","relativeLuminance","reduceLuminance","cr","increaseLuminance","bgL","fgL","node","options","addEventListener","disposed","removeEventListener","blockElementDefinitions","w","h","patternCharacterDefinitions","boxDrawingDefinitions","xp","yp","ctx","xOffset","blockElementDefinition","charDefinition","box","xEighth","yEighth","patternDefinition","patternSet","cachedPatterns","Map","pattern","tmpCanvas","tmpCtx","startsWith","substring","split","map","parseFloat","createPattern","boxDrawingDefinition","Object","entries","instructions","Number","instruction","f","svgToCanvasInstructionMap","args","translateArgs","clamp","bezierCurveTo","cellWidth","cellHeight","isFirefox","CHAR_ATLAS_CELL_SPACING","_listeners","_disposed","_event","listener","arg1","arg2","queue","call","from","to","_disposables","_isDisposed","d","unregister","disposeArray","disposables","isNode","navigator","userAgent","platform","isSafari","test","isMac","isIpad","isIphone","isWindows","isLinux","fillFallback","extended","ExtendedAttrs","fromColorRGB","clone","newObj","isBlink","isFgRGB","isBgRGB","isFgPalette","isBgPalette","isFgDefault","isBgDefault","isAttributeDefault","hasExtendedAttrs","updateExtended","getUnderlineColor","underlineColor","getUnderlineColorMode","isUnderlineColorRGB","isUnderlineColorPalette","isUnderlineColorDefault","getUnderlineStyle","underlineStyle","fromCharData","obj","stringFromCodePoint","CHAR_DATA_ATTR_INDEX","combined","CHAR_DATA_CHAR_INDEX","second","CHAR_DATA_WIDTH_INDEX","DEFAULT_ATTR","CHAR_DATA_CODE_INDEX","NULL_CELL_WIDTH","WHITESPACE_CELL_CHAR","WHITESPACE_CELL_WIDTH","WHITESPACE_CELL_CODE","codePoint","codepoint","_interim","decode","input","target","startPos","StringToUtf32","interim","byte1","byte2","byte3","byte4","discardInterim","cp","pos","tmp","missing","fourStop","Utf8ToUtf32","cachedModule","_preserveDrawingBuffer","renderService","characterJoinerService","_colorManager","_renderer","onContextLoss","setRenderer","_createRenderer","textureAtlas","clearTextureAtlas","WebglAddon"],"sourceRoot":""}