{"version":3,"file":"static/chunks/294-c169872310814d64.js","mappings":"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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.106.5_zula6vjvt3wdocc4mwcxqa6nzi/node_modules/@fluentui/react/lib/components/src/components/Layer/LayerHost.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/webm-muxer@2.1.2/node_modules/webm-muxer/build/webm-muxer.js","webpack://_N_E/<anon>"],"sourcesContent":["import * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nimport type { ILayerHost, ILayerHostProps } from './LayerHost.types';\n\nexport const LayerHost: React.FunctionComponent<ILayerHostProps> = props => {\n  const { className } = props;\n\n  const [layerHostId] = React.useState(() => getId());\n\n  const { id: hostId = layerHostId } = props;\n\n  const layerHostRef = React.useRef<ILayerHost>({\n    hostId,\n    rootRef: React.useRef<HTMLDivElement | null>(null),\n    notifyLayersChanged: () => {\n      // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n    },\n  });\n\n  React.useImperativeHandle(props.componentRef, () => layerHostRef.current);\n\n  React.useEffect(() => {\n    registerLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useUnmount(() => {\n    unregisterLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n  });\n\n  return <div {...props} className={css('ms-LayerHost', className)} ref={layerHostRef.current.rootRef} />;\n};\n","\"use strict\";\nvar WebMMuxer = (() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getOwnPropSymbols = Object.getOwnPropertySymbols;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __propIsEnum = Object.prototype.propertyIsEnumerable;\n  var __pow = Math.pow;\n  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n  var __spreadValues = (a, b) => {\n    for (var prop in b ||= {})\n      if (__hasOwnProp.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols)\n      for (var prop of __getOwnPropSymbols(b)) {\n        if (__propIsEnum.call(b, prop))\n          __defNormalProp(a, prop, b[prop]);\n      }\n    return a;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n  var __accessCheck = (obj, member, msg) => {\n    if (!member.has(obj))\n      throw TypeError(\"Cannot \" + msg);\n  };\n  var __privateGet = (obj, member, getter) => {\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n  };\n  var __privateAdd = (obj, member, value) => {\n    if (member.has(obj))\n      throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n  };\n  var __privateSet = (obj, member, value, setter) => {\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n  };\n  var __privateMethod = (obj, member, method) => {\n    __accessCheck(obj, member, \"access private method\");\n    return method;\n  };\n\n  // src/main.ts\n  var main_exports = {};\n  __export(main_exports, {\n    default: () => main_default\n  });\n\n  // src/ebml.ts\n  var EBMLFloat32 = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n  var EBMLFloat64 = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n  var measureUnsignedInt = (value) => {\n    if (value < 1 << 8) {\n      return 1;\n    } else if (value < 1 << 16) {\n      return 2;\n    } else if (value < 1 << 24) {\n      return 3;\n    } else if (value < __pow(2, 32)) {\n      return 4;\n    } else if (value < __pow(2, 40)) {\n      return 5;\n    } else {\n      return 6;\n    }\n  };\n  var measureEBMLVarInt = (value) => {\n    if (value < (1 << 7) - 1) {\n      return 1;\n    } else if (value < (1 << 14) - 1) {\n      return 2;\n    } else if (value < (1 << 21) - 1) {\n      return 3;\n    } else if (value < (1 << 28) - 1) {\n      return 4;\n    } else if (value < __pow(2, 35) - 1) {\n      return 5;\n    } else if (value < __pow(2, 42) - 1) {\n      return 6;\n    } else {\n      throw new Error(\"EBML VINT size not supported \" + value);\n    }\n  };\n\n  // src/write_target.ts\n  var _helper, _helperView, _writeFloat32, writeFloat32_fn, _writeFloat64, writeFloat64_fn, _writeUnsignedInt, writeUnsignedInt_fn, _writeString, writeString_fn;\n  var WriteTarget = class {\n    constructor() {\n      __privateAdd(this, _writeFloat32);\n      __privateAdd(this, _writeFloat64);\n      __privateAdd(this, _writeUnsignedInt);\n      __privateAdd(this, _writeString);\n      this.pos = 0;\n      __privateAdd(this, _helper, new Uint8Array(8));\n      __privateAdd(this, _helperView, new DataView(__privateGet(this, _helper).buffer));\n      this.offsets = /* @__PURE__ */ new WeakMap();\n      this.dataOffsets = /* @__PURE__ */ new WeakMap();\n    }\n    writeEBMLVarInt(value, width = measureEBMLVarInt(value)) {\n      let pos = 0;\n      switch (width) {\n        case 1:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 7 | value);\n          break;\n        case 2:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 6 | value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 3:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 5 | value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 4:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 4 | value >> 24);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 5:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 3 | value / __pow(2, 32) & 7);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 24);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 6:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 2 | value / __pow(2, 40) & 3);\n          __privateGet(this, _helperView).setUint8(pos++, value / __pow(2, 32) | 0);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 24);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        default:\n          throw new Error(\"Bad EBML VINT size \" + width);\n      }\n      this.write(__privateGet(this, _helper).subarray(0, pos));\n    }\n    writeEBML(data) {\n      var _a, _b;\n      if (data === null)\n        return;\n      if (data instanceof Uint8Array) {\n        this.write(data);\n      } else if (Array.isArray(data)) {\n        for (let elem of data) {\n          this.writeEBML(elem);\n        }\n      } else {\n        this.offsets.set(data, this.pos);\n        __privateMethod(this, _writeUnsignedInt, writeUnsignedInt_fn).call(this, data.id);\n        if (Array.isArray(data.data)) {\n          let sizePos = this.pos;\n          let sizeSize = (_a = data.size) != null ? _a : 4;\n          this.seek(this.pos + sizeSize);\n          let startPos = this.pos;\n          this.dataOffsets.set(data, startPos);\n          this.writeEBML(data.data);\n          let size = this.pos - startPos;\n          let endPos = this.pos;\n          this.seek(sizePos);\n          this.writeEBMLVarInt(size, sizeSize);\n          this.seek(endPos);\n        } else if (typeof data.data === \"number\") {\n          let size = (_b = data.size) != null ? _b : measureUnsignedInt(data.data);\n          this.writeEBMLVarInt(size);\n          __privateMethod(this, _writeUnsignedInt, writeUnsignedInt_fn).call(this, data.data, size);\n        } else if (typeof data.data === \"string\") {\n          this.writeEBMLVarInt(data.data.length);\n          __privateMethod(this, _writeString, writeString_fn).call(this, data.data);\n        } else if (data.data instanceof Uint8Array) {\n          this.writeEBMLVarInt(data.data.byteLength, data.size);\n          this.write(data.data);\n        } else if (data.data instanceof EBMLFloat32) {\n          this.writeEBMLVarInt(4);\n          __privateMethod(this, _writeFloat32, writeFloat32_fn).call(this, data.data.value);\n        } else if (data.data instanceof EBMLFloat64) {\n          this.writeEBMLVarInt(8);\n          __privateMethod(this, _writeFloat64, writeFloat64_fn).call(this, data.data.value);\n        }\n      }\n    }\n  };\n  _helper = new WeakMap();\n  _helperView = new WeakMap();\n  _writeFloat32 = new WeakSet();\n  writeFloat32_fn = function(value) {\n    __privateGet(this, _helperView).setFloat32(0, value, false);\n    this.write(__privateGet(this, _helper).subarray(0, 4));\n  };\n  _writeFloat64 = new WeakSet();\n  writeFloat64_fn = function(value) {\n    __privateGet(this, _helperView).setFloat64(0, value, false);\n    this.write(__privateGet(this, _helper));\n  };\n  _writeUnsignedInt = new WeakSet();\n  writeUnsignedInt_fn = function(value, width = measureUnsignedInt(value)) {\n    let pos = 0;\n    switch (width) {\n      case 6:\n        __privateGet(this, _helperView).setUint8(pos++, value / __pow(2, 40) | 0);\n      case 5:\n        __privateGet(this, _helperView).setUint8(pos++, value / __pow(2, 32) | 0);\n      case 4:\n        __privateGet(this, _helperView).setUint8(pos++, value >> 24);\n      case 3:\n        __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n      case 2:\n        __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n      case 1:\n        __privateGet(this, _helperView).setUint8(pos++, value);\n        break;\n      default:\n        throw new Error(\"Bad UINT size \" + width);\n    }\n    this.write(__privateGet(this, _helper).subarray(0, pos));\n  };\n  _writeString = new WeakSet();\n  writeString_fn = function(str) {\n    this.write(new Uint8Array(str.split(\"\").map((x) => x.charCodeAt(0))));\n  };\n  var _buffer, _bytes;\n  var ArrayBufferWriteTarget = class extends WriteTarget {\n    constructor() {\n      super();\n      __privateAdd(this, _buffer, new ArrayBuffer(__pow(2, 16)));\n      __privateAdd(this, _bytes, new Uint8Array(__privateGet(this, _buffer)));\n    }\n    ensureSize(size) {\n      let newLength = __privateGet(this, _buffer).byteLength;\n      while (newLength < size)\n        newLength *= 2;\n      if (newLength === __privateGet(this, _buffer).byteLength)\n        return;\n      let newBuffer = new ArrayBuffer(newLength);\n      let newBytes = new Uint8Array(newBuffer);\n      newBytes.set(__privateGet(this, _bytes), 0);\n      __privateSet(this, _buffer, newBuffer);\n      __privateSet(this, _bytes, newBytes);\n    }\n    write(data) {\n      this.ensureSize(this.pos + data.byteLength);\n      __privateGet(this, _bytes).set(data, this.pos);\n      this.pos += data.byteLength;\n    }\n    seek(newPos) {\n      this.pos = newPos;\n    }\n    finalize() {\n      this.ensureSize(this.pos);\n      return __privateGet(this, _buffer).slice(0, this.pos);\n    }\n  };\n  _buffer = new WeakMap();\n  _bytes = new WeakMap();\n  var FILE_CHUNK_SIZE = __pow(2, 24);\n  var MAX_CHUNKS_AT_ONCE = 2;\n  var _stream, _chunks;\n  var FileSystemWritableFileStreamWriteTarget = class extends WriteTarget {\n    constructor(stream) {\n      super();\n      __privateAdd(this, _stream, void 0);\n      __privateAdd(this, _chunks, []);\n      __privateSet(this, _stream, stream);\n    }\n    write(data) {\n      this.writeDataIntoChunks(data, this.pos);\n      this.flushChunks();\n      this.pos += data.byteLength;\n    }\n    writeDataIntoChunks(data, position) {\n      let chunkIndex = __privateGet(this, _chunks).findIndex((x) => x.start <= position && position < x.start + FILE_CHUNK_SIZE);\n      if (chunkIndex === -1)\n        chunkIndex = this.createChunk(position);\n      let chunk = __privateGet(this, _chunks)[chunkIndex];\n      let relativePosition = position - chunk.start;\n      let toWrite = data.subarray(0, Math.min(FILE_CHUNK_SIZE - relativePosition, data.byteLength));\n      chunk.data.set(toWrite, relativePosition);\n      let section = {\n        start: relativePosition,\n        end: relativePosition + toWrite.byteLength\n      };\n      insertSectionIntoFileChunk(chunk, section);\n      if (chunk.written[0].start === 0 && chunk.written[0].end === FILE_CHUNK_SIZE) {\n        chunk.shouldFlush = true;\n      }\n      if (__privateGet(this, _chunks).length > MAX_CHUNKS_AT_ONCE) {\n        for (let i = 0; i < __privateGet(this, _chunks).length - 1; i++) {\n          __privateGet(this, _chunks)[i].shouldFlush = true;\n        }\n        this.flushChunks();\n      }\n      if (toWrite.byteLength < data.byteLength) {\n        this.writeDataIntoChunks(data.subarray(toWrite.byteLength), position + toWrite.byteLength);\n      }\n    }\n    createChunk(includesPosition) {\n      let start = Math.floor(includesPosition / FILE_CHUNK_SIZE) * FILE_CHUNK_SIZE;\n      let chunk = {\n        start,\n        data: new Uint8Array(FILE_CHUNK_SIZE),\n        written: [],\n        shouldFlush: false\n      };\n      __privateGet(this, _chunks).push(chunk);\n      __privateGet(this, _chunks).sort((a, b) => a.start - b.start);\n      return __privateGet(this, _chunks).indexOf(chunk);\n    }\n    flushChunks(force = false) {\n      for (let i = 0; i < __privateGet(this, _chunks).length; i++) {\n        let chunk = __privateGet(this, _chunks)[i];\n        if (!chunk.shouldFlush && !force)\n          continue;\n        for (let section of chunk.written) {\n          __privateGet(this, _stream).write({\n            type: \"write\",\n            data: chunk.data.subarray(section.start, section.end),\n            position: chunk.start + section.start\n          });\n        }\n        __privateGet(this, _chunks).splice(i--, 1);\n      }\n    }\n    seek(newPos) {\n      this.pos = newPos;\n    }\n    finalize() {\n      this.flushChunks(true);\n    }\n  };\n  _stream = new WeakMap();\n  _chunks = new WeakMap();\n  var insertSectionIntoFileChunk = (chunk, section) => {\n    let low = 0;\n    let high = chunk.written.length - 1;\n    let index = -1;\n    while (low <= high) {\n      let mid = Math.floor(low + (high - low + 1) / 2);\n      if (chunk.written[mid].start <= section.start) {\n        low = mid + 1;\n        index = mid;\n      } else {\n        high = mid - 1;\n      }\n    }\n    chunk.written.splice(index + 1, 0, section);\n    if (index === -1 || chunk.written[index].end < section.start)\n      index++;\n    while (index < chunk.written.length - 1 && chunk.written[index].end >= chunk.written[index + 1].start) {\n      chunk.written[index].end = Math.max(chunk.written[index].end, chunk.written[index + 1].end);\n      chunk.written.splice(index + 1, 1);\n    }\n  };\n  var _sections, _onFlush;\n  var StreamingWriteTarget = class extends WriteTarget {\n    constructor(onFlush) {\n      super();\n      __privateAdd(this, _sections, []);\n      __privateAdd(this, _onFlush, void 0);\n      __privateSet(this, _onFlush, onFlush);\n    }\n    write(data) {\n      __privateGet(this, _sections).push({\n        data: data.slice(),\n        start: this.pos\n      });\n      this.pos += data.byteLength;\n    }\n    seek(newPos) {\n      this.pos = newPos;\n    }\n    flush(done) {\n      if (__privateGet(this, _sections).length === 0)\n        return;\n      let chunks = [];\n      let sorted = [...__privateGet(this, _sections)].sort((a, b) => a.start - b.start);\n      chunks.push({\n        start: sorted[0].start,\n        size: sorted[0].data.byteLength\n      });\n      for (let i = 1; i < sorted.length; i++) {\n        let lastChunk = chunks[chunks.length - 1];\n        let section = sorted[i];\n        if (section.start <= lastChunk.start + lastChunk.size) {\n          lastChunk.size = Math.max(lastChunk.size, section.start + section.data.byteLength - lastChunk.start);\n        } else {\n          chunks.push({\n            start: section.start,\n            size: section.data.byteLength\n          });\n        }\n      }\n      for (let chunk of chunks) {\n        chunk.data = new Uint8Array(chunk.size);\n        for (let section of __privateGet(this, _sections)) {\n          if (chunk.start <= section.start && section.start < chunk.start + chunk.size) {\n            chunk.data.set(section.data, section.start - chunk.start);\n          }\n        }\n        let isLastFlush = done && chunk === chunks[chunks.length - 1];\n        __privateGet(this, _onFlush).call(this, chunk.data, chunk.start, isLastFlush);\n      }\n      __privateGet(this, _sections).length = 0;\n    }\n  };\n  _sections = new WeakMap();\n  _onFlush = new WeakMap();\n\n  // src/main.ts\n  var VIDEO_TRACK_NUMBER = 1;\n  var AUDIO_TRACK_NUMBER = 2;\n  var VIDEO_TRACK_TYPE = 1;\n  var AUDIO_TRACK_TYPE = 2;\n  var MAX_CHUNK_LENGTH_MS = __pow(2, 15);\n  var CODEC_PRIVATE_MAX_SIZE = __pow(2, 12);\n  var APP_NAME = \"https://github.com/Vanilagy/webm-muxer\";\n  var SEGMENT_SIZE_BYTES = 6;\n  var CLUSTER_SIZE_BYTES = 5;\n  var FIRST_TIMESTAMP_BEHAVIORS = [\"strict\", \"offset\", \"permissive\"];\n  var _target, _options, _segment, _segmentInfo, _seekHead, _tracksElement, _segmentDuration, _colourElement, _videoCodecPrivate, _audioCodecPrivate, _cues, _currentCluster, _currentClusterTimestamp, _duration, _videoChunkQueue, _audioChunkQueue, _firstVideoTimestamp, _firstAudioTimestamp, _lastVideoTimestamp, _lastAudioTimestamp, _colorSpace, _finalized, _validateOptions, validateOptions_fn, _createFileHeader, createFileHeader_fn, _writeEBMLHeader, writeEBMLHeader_fn, _createSeekHead, createSeekHead_fn, _createSegmentInfo, createSegmentInfo_fn, _createTracks, createTracks_fn, _createSegment, createSegment_fn, _createCues, createCues_fn, _maybeFlushStreamingTarget, maybeFlushStreamingTarget_fn, _segmentDataOffset, segmentDataOffset_get, _writeVideoDecoderConfig, writeVideoDecoderConfig_fn, _fixVP9ColorSpace, fixVP9ColorSpace_fn, _createInternalChunk, createInternalChunk_fn, _validateTimestamp, validateTimestamp_fn, _writeSimpleBlock, writeSimpleBlock_fn, _writeCodecPrivate, writeCodecPrivate_fn, _createNewCluster, createNewCluster_fn, _finalizeCurrentCluster, finalizeCurrentCluster_fn, _ensureNotFinalized, ensureNotFinalized_fn;\n  var WebMMuxer = class {\n    constructor(options) {\n      __privateAdd(this, _validateOptions);\n      __privateAdd(this, _createFileHeader);\n      __privateAdd(this, _writeEBMLHeader);\n      __privateAdd(this, _createSeekHead);\n      __privateAdd(this, _createSegmentInfo);\n      __privateAdd(this, _createTracks);\n      __privateAdd(this, _createSegment);\n      __privateAdd(this, _createCues);\n      __privateAdd(this, _maybeFlushStreamingTarget);\n      __privateAdd(this, _segmentDataOffset);\n      __privateAdd(this, _writeVideoDecoderConfig);\n      __privateAdd(this, _fixVP9ColorSpace);\n      __privateAdd(this, _createInternalChunk);\n      __privateAdd(this, _validateTimestamp);\n      __privateAdd(this, _writeSimpleBlock);\n      __privateAdd(this, _writeCodecPrivate);\n      __privateAdd(this, _createNewCluster);\n      __privateAdd(this, _finalizeCurrentCluster);\n      __privateAdd(this, _ensureNotFinalized);\n      __privateAdd(this, _target, void 0);\n      __privateAdd(this, _options, void 0);\n      __privateAdd(this, _segment, void 0);\n      __privateAdd(this, _segmentInfo, void 0);\n      __privateAdd(this, _seekHead, void 0);\n      __privateAdd(this, _tracksElement, void 0);\n      __privateAdd(this, _segmentDuration, void 0);\n      __privateAdd(this, _colourElement, void 0);\n      __privateAdd(this, _videoCodecPrivate, void 0);\n      __privateAdd(this, _audioCodecPrivate, void 0);\n      __privateAdd(this, _cues, void 0);\n      __privateAdd(this, _currentCluster, void 0);\n      __privateAdd(this, _currentClusterTimestamp, void 0);\n      __privateAdd(this, _duration, 0);\n      __privateAdd(this, _videoChunkQueue, []);\n      __privateAdd(this, _audioChunkQueue, []);\n      __privateAdd(this, _firstVideoTimestamp, void 0);\n      __privateAdd(this, _firstAudioTimestamp, void 0);\n      __privateAdd(this, _lastVideoTimestamp, -1);\n      __privateAdd(this, _lastAudioTimestamp, -1);\n      __privateAdd(this, _colorSpace, void 0);\n      __privateAdd(this, _finalized, false);\n      __privateMethod(this, _validateOptions, validateOptions_fn).call(this, options);\n      __privateSet(this, _options, __spreadValues({\n        type: \"webm\",\n        firstTimestampBehavior: \"strict\"\n      }, options));\n      if (options.target === \"buffer\") {\n        __privateSet(this, _target, new ArrayBufferWriteTarget());\n      } else if (options.target instanceof FileSystemWritableFileStream) {\n        __privateSet(this, _target, new FileSystemWritableFileStreamWriteTarget(options.target));\n      } else if (typeof options.target === \"function\") {\n        __privateSet(this, _target, new StreamingWriteTarget(options.target));\n      } else {\n        throw new Error(`Invalid target: ${options.target}`);\n      }\n      __privateMethod(this, _createFileHeader, createFileHeader_fn).call(this);\n    }\n    addVideoChunk(chunk, meta, timestamp) {\n      let data = new Uint8Array(chunk.byteLength);\n      chunk.copyTo(data);\n      this.addVideoChunkRaw(data, chunk.type, timestamp != null ? timestamp : chunk.timestamp, meta);\n    }\n    addVideoChunkRaw(data, type, timestamp, meta) {\n      __privateMethod(this, _ensureNotFinalized, ensureNotFinalized_fn).call(this);\n      if (!__privateGet(this, _options).video)\n        throw new Error(\"No video track declared.\");\n      if (__privateGet(this, _firstVideoTimestamp) === void 0)\n        __privateSet(this, _firstVideoTimestamp, timestamp);\n      if (meta)\n        __privateMethod(this, _writeVideoDecoderConfig, writeVideoDecoderConfig_fn).call(this, meta);\n      let internalChunk = __privateMethod(this, _createInternalChunk, createInternalChunk_fn).call(this, data, type, timestamp, VIDEO_TRACK_NUMBER);\n      if (__privateGet(this, _options).video.codec === \"V_VP9\")\n        __privateMethod(this, _fixVP9ColorSpace, fixVP9ColorSpace_fn).call(this, internalChunk);\n      __privateSet(this, _lastVideoTimestamp, internalChunk.timestamp);\n      while (__privateGet(this, _audioChunkQueue).length > 0 && __privateGet(this, _audioChunkQueue)[0].timestamp <= internalChunk.timestamp) {\n        let audioChunk = __privateGet(this, _audioChunkQueue).shift();\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, audioChunk);\n      }\n      if (!__privateGet(this, _options).audio || internalChunk.timestamp <= __privateGet(this, _lastAudioTimestamp)) {\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, internalChunk);\n      } else {\n        __privateGet(this, _videoChunkQueue).push(internalChunk);\n      }\n      __privateMethod(this, _maybeFlushStreamingTarget, maybeFlushStreamingTarget_fn).call(this);\n    }\n    addAudioChunk(chunk, meta, timestamp) {\n      let data = new Uint8Array(chunk.byteLength);\n      chunk.copyTo(data);\n      this.addAudioChunkRaw(data, chunk.type, timestamp != null ? timestamp : chunk.timestamp, meta);\n    }\n    addAudioChunkRaw(data, type, timestamp, meta) {\n      __privateMethod(this, _ensureNotFinalized, ensureNotFinalized_fn).call(this);\n      if (!__privateGet(this, _options).audio)\n        throw new Error(\"No audio track declared.\");\n      if (__privateGet(this, _firstAudioTimestamp) === void 0)\n        __privateSet(this, _firstAudioTimestamp, timestamp);\n      let internalChunk = __privateMethod(this, _createInternalChunk, createInternalChunk_fn).call(this, data, type, timestamp, AUDIO_TRACK_NUMBER);\n      __privateSet(this, _lastAudioTimestamp, internalChunk.timestamp);\n      while (__privateGet(this, _videoChunkQueue).length > 0 && __privateGet(this, _videoChunkQueue)[0].timestamp <= internalChunk.timestamp) {\n        let videoChunk = __privateGet(this, _videoChunkQueue).shift();\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, videoChunk);\n      }\n      if (!__privateGet(this, _options).video || internalChunk.timestamp <= __privateGet(this, _lastVideoTimestamp)) {\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, internalChunk);\n      } else {\n        __privateGet(this, _audioChunkQueue).push(internalChunk);\n      }\n      if (meta == null ? void 0 : meta.decoderConfig) {\n        __privateMethod(this, _writeCodecPrivate, writeCodecPrivate_fn).call(this, __privateGet(this, _audioCodecPrivate), meta.decoderConfig.description);\n      }\n      __privateMethod(this, _maybeFlushStreamingTarget, maybeFlushStreamingTarget_fn).call(this);\n    }\n    finalize() {\n      while (__privateGet(this, _videoChunkQueue).length > 0)\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, __privateGet(this, _videoChunkQueue).shift());\n      while (__privateGet(this, _audioChunkQueue).length > 0)\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, __privateGet(this, _audioChunkQueue).shift());\n      __privateMethod(this, _finalizeCurrentCluster, finalizeCurrentCluster_fn).call(this);\n      __privateGet(this, _target).writeEBML(__privateGet(this, _cues));\n      let endPos = __privateGet(this, _target).pos;\n      let segmentSize = __privateGet(this, _target).pos - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n      __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _segment)) + 4);\n      __privateGet(this, _target).writeEBMLVarInt(segmentSize, SEGMENT_SIZE_BYTES);\n      __privateGet(this, _segmentDuration).data = new EBMLFloat64(__privateGet(this, _duration));\n      __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _segmentDuration)));\n      __privateGet(this, _target).writeEBML(__privateGet(this, _segmentDuration));\n      __privateGet(this, _seekHead).data[0].data[1].data = __privateGet(this, _target).offsets.get(__privateGet(this, _cues)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n      __privateGet(this, _seekHead).data[1].data[1].data = __privateGet(this, _target).offsets.get(__privateGet(this, _segmentInfo)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n      __privateGet(this, _seekHead).data[2].data[1].data = __privateGet(this, _target).offsets.get(__privateGet(this, _tracksElement)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n      __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _seekHead)));\n      __privateGet(this, _target).writeEBML(__privateGet(this, _seekHead));\n      __privateGet(this, _target).seek(endPos);\n      __privateSet(this, _finalized, true);\n      if (__privateGet(this, _target) instanceof ArrayBufferWriteTarget) {\n        return __privateGet(this, _target).finalize();\n      } else if (__privateGet(this, _target) instanceof FileSystemWritableFileStreamWriteTarget) {\n        __privateGet(this, _target).finalize();\n      } else if (__privateGet(this, _target) instanceof StreamingWriteTarget) {\n        __privateGet(this, _target).flush(true);\n      }\n      return null;\n    }\n  };\n  _target = new WeakMap();\n  _options = new WeakMap();\n  _segment = new WeakMap();\n  _segmentInfo = new WeakMap();\n  _seekHead = new WeakMap();\n  _tracksElement = new WeakMap();\n  _segmentDuration = new WeakMap();\n  _colourElement = new WeakMap();\n  _videoCodecPrivate = new WeakMap();\n  _audioCodecPrivate = new WeakMap();\n  _cues = new WeakMap();\n  _currentCluster = new WeakMap();\n  _currentClusterTimestamp = new WeakMap();\n  _duration = new WeakMap();\n  _videoChunkQueue = new WeakMap();\n  _audioChunkQueue = new WeakMap();\n  _firstVideoTimestamp = new WeakMap();\n  _firstAudioTimestamp = new WeakMap();\n  _lastVideoTimestamp = new WeakMap();\n  _lastAudioTimestamp = new WeakMap();\n  _colorSpace = new WeakMap();\n  _finalized = new WeakMap();\n  _validateOptions = new WeakSet();\n  validateOptions_fn = function(options) {\n    if (options.type && options.type !== \"webm\" && options.type !== \"matroska\") {\n      throw new Error(`Invalid type: ${options.type}`);\n    }\n    if (options.firstTimestampBehavior && !FIRST_TIMESTAMP_BEHAVIORS.includes(options.firstTimestampBehavior)) {\n      throw new Error(`Invalid first timestamp behavior: ${options.firstTimestampBehavior}`);\n    }\n  };\n  _createFileHeader = new WeakSet();\n  createFileHeader_fn = function() {\n    __privateMethod(this, _writeEBMLHeader, writeEBMLHeader_fn).call(this);\n    __privateMethod(this, _createSeekHead, createSeekHead_fn).call(this);\n    __privateMethod(this, _createSegmentInfo, createSegmentInfo_fn).call(this);\n    __privateMethod(this, _createTracks, createTracks_fn).call(this);\n    __privateMethod(this, _createSegment, createSegment_fn).call(this);\n    __privateMethod(this, _createCues, createCues_fn).call(this);\n    __privateMethod(this, _maybeFlushStreamingTarget, maybeFlushStreamingTarget_fn).call(this);\n  };\n  _writeEBMLHeader = new WeakSet();\n  writeEBMLHeader_fn = function() {\n    var _a;\n    let ebmlHeader = { id: 440786851 /* EBML */, data: [\n      { id: 17030 /* EBMLVersion */, data: 1 },\n      { id: 17143 /* EBMLReadVersion */, data: 1 },\n      { id: 17138 /* EBMLMaxIDLength */, data: 4 },\n      { id: 17139 /* EBMLMaxSizeLength */, data: 8 },\n      { id: 17026 /* DocType */, data: (_a = __privateGet(this, _options).type) != null ? _a : \"webm\" },\n      { id: 17031 /* DocTypeVersion */, data: 2 },\n      { id: 17029 /* DocTypeReadVersion */, data: 2 }\n    ] };\n    __privateGet(this, _target).writeEBML(ebmlHeader);\n  };\n  _createSeekHead = new WeakSet();\n  createSeekHead_fn = function() {\n    const kaxCues = new Uint8Array([28, 83, 187, 107]);\n    const kaxInfo = new Uint8Array([21, 73, 169, 102]);\n    const kaxTracks = new Uint8Array([22, 84, 174, 107]);\n    let seekHead = { id: 290298740 /* SeekHead */, data: [\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxCues },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] },\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxInfo },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] },\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxTracks },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] }\n    ] };\n    __privateSet(this, _seekHead, seekHead);\n  };\n  _createSegmentInfo = new WeakSet();\n  createSegmentInfo_fn = function() {\n    let segmentDuration = { id: 17545 /* Duration */, data: new EBMLFloat64(0) };\n    __privateSet(this, _segmentDuration, segmentDuration);\n    let segmentInfo = { id: 357149030 /* Info */, data: [\n      { id: 2807729 /* TimestampScale */, data: 1e6 },\n      { id: 19840 /* MuxingApp */, data: APP_NAME },\n      { id: 22337 /* WritingApp */, data: APP_NAME },\n      segmentDuration\n    ] };\n    __privateSet(this, _segmentInfo, segmentInfo);\n  };\n  _createTracks = new WeakSet();\n  createTracks_fn = function() {\n    let tracksElement = { id: 374648427 /* Tracks */, data: [] };\n    __privateSet(this, _tracksElement, tracksElement);\n    if (__privateGet(this, _options).video) {\n      __privateSet(this, _videoCodecPrivate, { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) });\n      let colourElement = { id: 21936 /* Colour */, data: [\n        { id: 21937 /* MatrixCoefficients */, data: 2 },\n        { id: 21946 /* TransferCharacteristics */, data: 2 },\n        { id: 21947 /* Primaries */, data: 2 },\n        { id: 21945 /* Range */, data: 0 }\n      ] };\n      __privateSet(this, _colourElement, colourElement);\n      tracksElement.data.push({ id: 174 /* TrackEntry */, data: [\n        { id: 215 /* TrackNumber */, data: VIDEO_TRACK_NUMBER },\n        { id: 29637 /* TrackUID */, data: VIDEO_TRACK_NUMBER },\n        { id: 131 /* TrackType */, data: VIDEO_TRACK_TYPE },\n        { id: 134 /* CodecID */, data: __privateGet(this, _options).video.codec },\n        __privateGet(this, _videoCodecPrivate),\n        __privateGet(this, _options).video.frameRate ? { id: 2352003 /* DefaultDuration */, data: 1e9 / __privateGet(this, _options).video.frameRate } : null,\n        { id: 224 /* Video */, data: [\n          { id: 176 /* PixelWidth */, data: __privateGet(this, _options).video.width },\n          { id: 186 /* PixelHeight */, data: __privateGet(this, _options).video.height },\n          __privateGet(this, _options).video.alpha ? { id: 21440 /* AlphaMode */, data: 1 } : null,\n          colourElement\n        ] }\n      ] });\n    }\n    if (__privateGet(this, _options).audio) {\n      __privateSet(this, _audioCodecPrivate, { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) });\n      tracksElement.data.push({ id: 174 /* TrackEntry */, data: [\n        { id: 215 /* TrackNumber */, data: AUDIO_TRACK_NUMBER },\n        { id: 29637 /* TrackUID */, data: AUDIO_TRACK_NUMBER },\n        { id: 131 /* TrackType */, data: AUDIO_TRACK_TYPE },\n        { id: 134 /* CodecID */, data: __privateGet(this, _options).audio.codec },\n        __privateGet(this, _audioCodecPrivate),\n        { id: 225 /* Audio */, data: [\n          { id: 181 /* SamplingFrequency */, data: new EBMLFloat32(__privateGet(this, _options).audio.sampleRate) },\n          { id: 159 /* Channels */, data: __privateGet(this, _options).audio.numberOfChannels },\n          __privateGet(this, _options).audio.bitDepth ? { id: 25188 /* BitDepth */, data: __privateGet(this, _options).audio.bitDepth } : null\n        ] }\n      ] });\n    }\n  };\n  _createSegment = new WeakSet();\n  createSegment_fn = function() {\n    let segment = { id: 408125543 /* Segment */, size: SEGMENT_SIZE_BYTES, data: [\n      __privateGet(this, _seekHead),\n      __privateGet(this, _segmentInfo),\n      __privateGet(this, _tracksElement)\n    ] };\n    __privateSet(this, _segment, segment);\n    __privateGet(this, _target).writeEBML(segment);\n  };\n  _createCues = new WeakSet();\n  createCues_fn = function() {\n    __privateSet(this, _cues, { id: 475249515 /* Cues */, data: [] });\n  };\n  _maybeFlushStreamingTarget = new WeakSet();\n  maybeFlushStreamingTarget_fn = function() {\n    if (__privateGet(this, _target) instanceof StreamingWriteTarget) {\n      __privateGet(this, _target).flush(false);\n    }\n  };\n  _segmentDataOffset = new WeakSet();\n  segmentDataOffset_get = function() {\n    return __privateGet(this, _target).dataOffsets.get(__privateGet(this, _segment));\n  };\n  _writeVideoDecoderConfig = new WeakSet();\n  writeVideoDecoderConfig_fn = function(meta) {\n    if (meta.decoderConfig) {\n      if (meta.decoderConfig.colorSpace) {\n        let colorSpace = meta.decoderConfig.colorSpace;\n        __privateSet(this, _colorSpace, colorSpace);\n        __privateGet(this, _colourElement).data = [\n          { id: 21937 /* MatrixCoefficients */, data: {\n            \"rgb\": 1,\n            \"bt709\": 1,\n            \"bt470bg\": 5,\n            \"smpte170m\": 6\n          }[colorSpace.matrix] },\n          { id: 21946 /* TransferCharacteristics */, data: {\n            \"bt709\": 1,\n            \"smpte170m\": 6,\n            \"iec61966-2-1\": 13\n          }[colorSpace.transfer] },\n          { id: 21947 /* Primaries */, data: {\n            \"bt709\": 1,\n            \"bt470bg\": 5,\n            \"smpte170m\": 6\n          }[colorSpace.primaries] },\n          { id: 21945 /* Range */, data: [1, 2][Number(colorSpace.fullRange)] }\n        ];\n        let endPos = __privateGet(this, _target).pos;\n        __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _colourElement)));\n        __privateGet(this, _target).writeEBML(__privateGet(this, _colourElement));\n        __privateGet(this, _target).seek(endPos);\n      }\n      if (meta.decoderConfig.description) {\n        __privateMethod(this, _writeCodecPrivate, writeCodecPrivate_fn).call(this, __privateGet(this, _videoCodecPrivate), meta.decoderConfig.description);\n      }\n    }\n  };\n  _fixVP9ColorSpace = new WeakSet();\n  fixVP9ColorSpace_fn = function(chunk) {\n    if (chunk.type !== \"key\")\n      return;\n    if (!__privateGet(this, _colorSpace))\n      return;\n    let i = 0;\n    if (readBits(chunk.data, 0, 2) !== 2)\n      return;\n    i += 2;\n    let profile = (readBits(chunk.data, i + 1, i + 2) << 1) + readBits(chunk.data, i + 0, i + 1);\n    i += 2;\n    if (profile === 3)\n      i++;\n    let showExistingFrame = readBits(chunk.data, i + 0, i + 1);\n    i++;\n    if (showExistingFrame)\n      return;\n    let frameType = readBits(chunk.data, i + 0, i + 1);\n    i++;\n    if (frameType !== 0)\n      return;\n    i += 2;\n    let syncCode = readBits(chunk.data, i + 0, i + 24);\n    i += 24;\n    if (syncCode !== 4817730)\n      return;\n    if (profile >= 2)\n      i++;\n    let colorSpaceID = {\n      \"rgb\": 7,\n      \"bt709\": 2,\n      \"bt470bg\": 1,\n      \"smpte170m\": 3\n    }[__privateGet(this, _colorSpace).matrix];\n    writeBits(chunk.data, i + 0, i + 3, colorSpaceID);\n  };\n  _createInternalChunk = new WeakSet();\n  createInternalChunk_fn = function(data, type, timestamp, trackNumber) {\n    let adjustedTimestamp = __privateMethod(this, _validateTimestamp, validateTimestamp_fn).call(this, timestamp, trackNumber);\n    let internalChunk = {\n      data,\n      type,\n      timestamp: adjustedTimestamp,\n      trackNumber\n    };\n    return internalChunk;\n  };\n  _validateTimestamp = new WeakSet();\n  validateTimestamp_fn = function(timestamp, trackNumber) {\n    let firstTimestamp = trackNumber === VIDEO_TRACK_NUMBER ? __privateGet(this, _firstVideoTimestamp) : __privateGet(this, _firstAudioTimestamp);\n    let lastTimestamp = trackNumber === VIDEO_TRACK_NUMBER ? __privateGet(this, _lastVideoTimestamp) : __privateGet(this, _lastAudioTimestamp);\n    if (__privateGet(this, _options).firstTimestampBehavior === \"strict\" && lastTimestamp === -1 && timestamp !== 0) {\n      throw new Error(\n        `The first chunk for your media track must have a timestamp of 0 (received ${timestamp}). Non-zero first timestamps are often caused by directly piping frames or audio data from a MediaStreamTrack into the encoder. Their timestamps are typically relative to the age of the document, which is probably what you want.\n\nIf you want to offset all timestamps of a track such that the first one is zero, set firstTimestampBehavior: 'offset' in the options.\nIf you want to allow non-zero first timestamps, set firstTimestampBehavior: 'permissive'.\n`\n      );\n    } else if (__privateGet(this, _options).firstTimestampBehavior === \"offset\") {\n      timestamp -= firstTimestamp;\n    }\n    if (timestamp < lastTimestamp) {\n      throw new Error(\n        `Timestamps must be monotonically increasing (went from ${lastTimestamp} to ${timestamp}).`\n      );\n    }\n    return timestamp;\n  };\n  _writeSimpleBlock = new WeakSet();\n  writeSimpleBlock_fn = function(chunk) {\n    let msTime = Math.floor(chunk.timestamp / 1e3);\n    let clusterIsTooLong = chunk.type !== \"key\" && msTime - __privateGet(this, _currentClusterTimestamp) >= MAX_CHUNK_LENGTH_MS;\n    if (clusterIsTooLong) {\n      throw new Error(\n        `Current Matroska cluster exceeded its maximum allowed length of ${MAX_CHUNK_LENGTH_MS} milliseconds. In order to produce a correct WebM file, you must pass in a video key frame at least every ${MAX_CHUNK_LENGTH_MS} milliseconds.`\n      );\n    }\n    let shouldCreateNewClusterFromKeyFrame = (chunk.trackNumber === VIDEO_TRACK_NUMBER || !__privateGet(this, _options).video) && chunk.type === \"key\" && msTime - __privateGet(this, _currentClusterTimestamp) >= 1e3;\n    if (!__privateGet(this, _currentCluster) || shouldCreateNewClusterFromKeyFrame) {\n      __privateMethod(this, _createNewCluster, createNewCluster_fn).call(this, msTime);\n    }\n    let prelude = new Uint8Array(4);\n    let view = new DataView(prelude.buffer);\n    view.setUint8(0, 128 | chunk.trackNumber);\n    view.setUint16(1, msTime - __privateGet(this, _currentClusterTimestamp), false);\n    view.setUint8(3, Number(chunk.type === \"key\") << 7);\n    let simpleBlock = { id: 163 /* SimpleBlock */, data: [\n      prelude,\n      chunk.data\n    ] };\n    __privateGet(this, _target).writeEBML(simpleBlock);\n    __privateSet(this, _duration, Math.max(__privateGet(this, _duration), msTime));\n  };\n  _writeCodecPrivate = new WeakSet();\n  writeCodecPrivate_fn = function(element, data) {\n    let endPos = __privateGet(this, _target).pos;\n    __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(element));\n    element = [\n      { id: 25506 /* CodecPrivate */, size: 4, data: new Uint8Array(data) },\n      { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE - 2 - 4 - data.byteLength) }\n    ];\n    __privateGet(this, _target).writeEBML(element);\n    __privateGet(this, _target).seek(endPos);\n  };\n  _createNewCluster = new WeakSet();\n  createNewCluster_fn = function(timestamp) {\n    if (__privateGet(this, _currentCluster)) {\n      __privateMethod(this, _finalizeCurrentCluster, finalizeCurrentCluster_fn).call(this);\n    }\n    __privateSet(this, _currentCluster, { id: 524531317 /* Cluster */, size: CLUSTER_SIZE_BYTES, data: [\n      { id: 231 /* Timestamp */, data: timestamp }\n    ] });\n    __privateGet(this, _target).writeEBML(__privateGet(this, _currentCluster));\n    __privateSet(this, _currentClusterTimestamp, timestamp);\n    let clusterOffsetFromSegment = __privateGet(this, _target).offsets.get(__privateGet(this, _currentCluster)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n    __privateGet(this, _cues).data.push({ id: 187 /* CuePoint */, data: [\n      { id: 179 /* CueTime */, data: timestamp },\n      __privateGet(this, _options).video ? { id: 183 /* CueTrackPositions */, data: [\n        { id: 247 /* CueTrack */, data: VIDEO_TRACK_NUMBER },\n        { id: 241 /* CueClusterPosition */, data: clusterOffsetFromSegment }\n      ] } : null,\n      __privateGet(this, _options).audio ? { id: 183 /* CueTrackPositions */, data: [\n        { id: 247 /* CueTrack */, data: AUDIO_TRACK_NUMBER },\n        { id: 241 /* CueClusterPosition */, data: clusterOffsetFromSegment }\n      ] } : null\n    ] });\n  };\n  _finalizeCurrentCluster = new WeakSet();\n  finalizeCurrentCluster_fn = function() {\n    let clusterSize = __privateGet(this, _target).pos - __privateGet(this, _target).dataOffsets.get(__privateGet(this, _currentCluster));\n    let endPos = __privateGet(this, _target).pos;\n    __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _currentCluster)) + 4);\n    __privateGet(this, _target).writeEBMLVarInt(clusterSize, CLUSTER_SIZE_BYTES);\n    __privateGet(this, _target).seek(endPos);\n  };\n  _ensureNotFinalized = new WeakSet();\n  ensureNotFinalized_fn = function() {\n    if (__privateGet(this, _finalized)) {\n      throw new Error(\"Cannot add new video or audio chunks after the file has been finalized.\");\n    }\n  };\n  var main_default = WebMMuxer;\n  var readBits = (bytes, start, end) => {\n    let result = 0;\n    for (let i = start; i < end; i++) {\n      let byteIndex = Math.floor(i / 8);\n      let byte = bytes[byteIndex];\n      let bitIndex = 7 - (i & 7);\n      let bit = (byte & 1 << bitIndex) >> bitIndex;\n      result <<= 1;\n      result |= bit;\n    }\n    return result;\n  };\n  var writeBits = (bytes, start, end, value) => {\n    for (let i = start; i < end; i++) {\n      let byteIndex = Math.floor(i / 8);\n      let byte = bytes[byteIndex];\n      let bitIndex = 7 - (i & 7);\n      byte &= ~(1 << bitIndex);\n      byte |= (value & 1 << end - i - 1) >> end - i - 1 << bitIndex;\n      bytes[byteIndex] = byte;\n    }\n  };\n  return __toCommonJS(main_exports);\n})();\nWebMMuxer = WebMMuxer.default;\nif (typeof module === \"object\" && typeof module.exports === \"object\") module.exports = WebMMuxer;\n"],"names":["LayerHost","props","className","layerHostId","react__WEBPACK_IMPORTED_MODULE_0__","useState","_Utilities__WEBPACK_IMPORTED_MODULE_1__","z","_a","id","hostId","layerHostRef","useRef","rootRef","notifyLayersChanged","useImperativeHandle","componentRef","current","useEffect","_Layer_notification__WEBPACK_IMPORTED_MODULE_2__","_Y","EQ","_fluentui_react_hooks__WEBPACK_IMPORTED_MODULE_3__","k","nw","createElement","tslib__WEBPACK_IMPORTED_MODULE_4__","pi","_Utilities__WEBPACK_IMPORTED_MODULE_5__","i","ref","_helper","_helperView","_writeFloat32","writeFloat32_fn","_writeFloat64","writeFloat64_fn","_writeUnsignedInt","writeUnsignedInt_fn","_writeString","writeString_fn","_buffer","_bytes","_stream","_chunks","_sections","_onFlush","_target","_options","_segment","_segmentInfo","_seekHead","_tracksElement","_segmentDuration","_colourElement","_videoCodecPrivate","_audioCodecPrivate","_cues","_currentCluster","_currentClusterTimestamp","_duration","_videoChunkQueue","_audioChunkQueue","_firstVideoTimestamp","_firstAudioTimestamp","_lastVideoTimestamp","_lastAudioTimestamp","_colorSpace","_finalized","_validateOptions","validateOptions_fn","_createFileHeader","createFileHeader_fn","_writeEBMLHeader","writeEBMLHeader_fn","_createSeekHead","createSeekHead_fn","_createSegmentInfo","createSegmentInfo_fn","_createTracks","createTracks_fn","_createSegment","createSegment_fn","_createCues","createCues_fn","_maybeFlushStreamingTarget","maybeFlushStreamingTarget_fn","_segmentDataOffset","segmentDataOffset_get","_writeVideoDecoderConfig","writeVideoDecoderConfig_fn","_fixVP9ColorSpace","fixVP9ColorSpace_fn","_createInternalChunk","createInternalChunk_fn","_validateTimestamp","validateTimestamp_fn","_writeSimpleBlock","writeSimpleBlock_fn","_writeCodecPrivate","writeCodecPrivate_fn","_createNewCluster","createNewCluster_fn","_finalizeCurrentCluster","finalizeCurrentCluster_fn","_ensureNotFinalized","ensureNotFinalized_fn","__defProp","__getOwnPropDesc","__getOwnPropNames","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__pow","__defNormalProp","__spreadValues","__accessCheck","__privateGet","__privateAdd","__privateSet","__privateMethod","main_exports","EBMLFloat32","EBMLFloat64","measureUnsignedInt","measureEBMLVarInt","WriteTarget","ArrayBufferWriteTarget","FILE_CHUNK_SIZE","FileSystemWritableFileStreamWriteTarget","insertSectionIntoFileChunk","StreamingWriteTarget","MAX_CHUNK_LENGTH_MS","CODEC_PRIVATE_MAX_SIZE","APP_NAME","FIRST_TIMESTAMP_BEHAVIORS","WebMMuxer","main_default","readBits","writeBits","Object","defineProperty","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","prototype","hasOwnProperty","propertyIsEnumerable","Math","pow","obj","key","value","enumerable","configurable","writable","a","b","prop","call","member","msg","has","TypeError","getter","get","WeakSet","add","set","setter","method","__export","target","all","name","default","constructor","pos","Uint8Array","DataView","buffer","offsets","WeakMap","dataOffsets","writeEBMLVarInt","width","setUint8","write","subarray","writeEBML","data","_b","Array","isArray","elem","sizePos","sizeSize","size","seek","startPos","endPos","length","byteLength","setFloat32","setFloat64","str","split","map","x","charCodeAt","ArrayBuffer","ensureSize","newLength","newBuffer","newBytes","newPos","finalize","slice","stream","writeDataIntoChunks","flushChunks","position","chunkIndex","findIndex","start","createChunk","chunk","relativePosition","toWrite","min","end","written","shouldFlush","includesPosition","floor","push","sort","indexOf","force","section","type","splice","low","high","index","mid","max","onFlush","flush","done","chunks","sorted","lastChunk","isLastFlush","options","firstTimestampBehavior","FileSystemWritableFileStream","addVideoChunk","meta","timestamp","copyTo","addVideoChunkRaw","video","internalChunk","codec","audioChunk","shift","audio","addAudioChunk","addAudioChunkRaw","videoChunk","decoderConfig","description","segmentSize","includes","ebmlHeader","kaxCues","kaxInfo","kaxTracks","segmentDuration","tracksElement","colourElement","frameRate","height","alpha","sampleRate","numberOfChannels","bitDepth","segment","colorSpace","matrix","transfer","primaries","Number","fullRange","profile","showExistingFrame","frameType","syncCode","colorSpaceID","trackNumber","firstTimestamp","lastTimestamp","msTime","shouldCreateNewClusterFromKeyFrame","prelude","view","setUint16","simpleBlock","element","clusterOffsetFromSegment","clusterSize","bytes","result","byte","bitIndex","byteIndex","__copyProps","to","from","except","desc","module","exports"],"sourceRoot":""}