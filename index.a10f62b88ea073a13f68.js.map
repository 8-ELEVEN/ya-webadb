{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../event/src/event-emitter.ts","webpack:///../event/src/async-event-emitter.ts","webpack:///../event/src/disposable.ts","webpack:///../adb/src/crypto.ts","webpack:///../adb/src/packet.ts","webpack:///../adb/src/utils/auto-reset-event.ts","webpack:///../adb/src/utils/base64.ts","webpack:///../adb/src/utils/event-iterator.ts","webpack:///../adb/src/auth.ts","webpack:///../adb/src/buffered-stream.ts","webpack:///../adb/src/stream.ts","webpack:///../struct/src/field/descriptor.ts","webpack:///../struct/src/field/array.ts","webpack:///../struct/src/field/definition.ts","webpack:///../struct/src/field/number.ts","webpack:///../struct/src/field/variable-length-array.ts","webpack:///../struct/src/field/fixed-length-array.ts","webpack:///../struct/src/struct.ts","webpack:///../adb/src/sync.ts","webpack:///../adb/src/adb.ts","webpack:///../adb-backend-web/src/index.ts","webpack:///./src/with-display-name.ts","webpack:///./src/error-dialog.tsx","webpack:///./src/connect.tsx","webpack:///./src/router.tsx","webpack:///./src/routes/file-manager.tsx","webpack:///./src/routes/intro.tsx","webpack:///./src/resize-observer.tsx","webpack:///./src/routes/shell.tsx","webpack:///./src/routes/tcp-ip.tsx","webpack:///./src/index.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","EventEmitter","listeners","this","event","listener","thisArg","args","info","remove","index","indexOf","dispose","e","AutoDisposable","disposables","disposable","DisposableList","addDisposable","BigInt0","BigInt","BigInt1","BigInt2","BigInt2To64","getBig","buffer","offset","byteLength","view","DataView","getBigUint64","setBigLE","setBigUint64","parsePrivateKey","calculatePublicKey","privateKey","publicKey","ArrayBuffer","publicKeyView","setUint32","n0inv","a","Number","isNaN","NaN","b","x","y","Math","floor","modInverse","asUintN","Sha1DigestInfo","sign","padded","Uint8Array","fillLength","set","signature","base","exponent","modulus","powMod","uint64Array","setBig","Assert","AdbCommand","command","Error","magic","expected","getUint32","actual","getInt32","AdbPacket","backend","arg0","arg1","payload","payloadString","read","decodeUtf8","payloadLength","send","_payloadLength","_payload","undefined","_payloadString","encodeUtf8","write","initialSet","list","blocking","Promise","resolve","resolver","promise","pop","item","reject","ranges","chars","addRange","start","end","startCharCode","charCodeAt","endCharCode","String","fromCharCode","toValue","char","charCode","range","encodeBase64","array","remainder","z","sort","IteratorReturnUndefinedResult","done","freeze","pullQueue","pushQueue","ended","waterMark","pendingLowWaterEvent","lowWaterEvent","EventIteratorController","state","maxConsumerCount","Infinity","highWaterMark","lowWaterMark","size","cleanup","map","initializer","asyncIterator","controller","fire","return","AdbAuthType","AdbDefaultAuthenticators","iteratorDone","iterator","iterateKeys","packet","Token","next","Auth","Signature","generateKey","PublicKey","authenticators","super","Constructor","tryAuth","stream","extraBuffers","localId","remoteId","readIterator","readBuffer","output","close","resetEvent","add","onData","wait","onClose","onLowWater","notify","buffers","dispatcher","writeLock","dataEvent","closeEvent","sendPacket","Write","Close","initializers","streams","Map","packetEvent","errorEvent","_running","receiveLoop","service","Open","AdbStream","packetOrCommand","arguments","values","clear","parse","OK","has","ack","delete","handled","BackingField","Array","getBackingField","setBackingField","initialize","field","subType","configurable","string","registry","getFieldTypeDefinition","type","registerFieldTypeDefinition","_field","methods","context","options","getSize","init","dataView","backingField","SizeMap","DataViewGetterMap","DataViewSetterMap","littleEndian","VariableLengthArray","getLengthBackingField","lengthField","setLengthBackingField","descriptor","getOwnPropertyDescriptor","emptyBehavior","getDynamicSize","StructDefaultOptions","_size","fields","_extra","clone","arrayBuffer","_afterParsed","_typescriptType","number","getOwnPropertyDescriptors","callback","defineProperties","deserialize","fieldSize","serialize","AdbSyncRequestId","AdbSyncResponseId","AdbSyncStringRequest","uint32","LinuxFileType","AdbSyncStatResponse","int32","extra","id","Stat","afterParsed","lastModifiedTime","AdbSyncEntryResponse","Entry","AdbSyncDataResponse","Data","AdbSyncDoneResponse","Done","instance","AdbSyncFailResponse","message","async","readResponse","structReader","Fail","sendLock","path","response","List","results","entry","iterate","Receive","AdbPropKey","_connected","packetDispatcher","onDisconnected","_product","_model","_device","_features","features","join","authHandler","disposableList","onPacket","Connect","parseBanner","authPacket","tryNextAuth","onError","banner","pieces","split","props","prop","keyValue","Product","Model","Device","Features","createStreamAndReadAll","createStream","propAddr","shell","trim","port","readAll","WebUsbDeviceFilter","classCode","subclassCode","protocolCode","Utf8Encoder","TextEncoder","Utf8Decoder","TextDecoder","input","encode","device","inEndPointNumber","outEndPointNumber","onDisconnectedEvent","_inEndpointNumber","_outEndpointNumber","open","configuration","configurations","interface_","interfaces","alternate","alternates","interfaceSubclass","interfaceClass","inEndpointNumber","outEndpointNumber","configurationValue","selectConfiguration","claimed","claimInterface","interfaceNumber","alternateSetting","selectAlternateInterface","endpoint","endpoints","direction","endpointNumber","navigator","usb","requestDevice","filters","fromDevice","productName","localStorage","getItem","padding","sIndex","dIndex","decodeBase64","cryptoKey","crypto","subtle","modulusLength","publicExponent","hash","exportKey","setItem","decode","transferOut","transferIn","status","clearHalt","withDisplayName","Component","displayName","ErrorDialogContext","createContext","errorDialogVisible","setTrue","showErrorDialog","setFalse","hideErrorDialog","useBoolean","errorMessage","setErrorMessage","Provider","children","Dialog","hidden","dialogContentProps","normal","title","subText","DialogFooter","PrimaryButton","text","onClick","onDeviceChange","show","connecting","setConnecting","connect","pickDevice","disconnect","Stack","horizontal","verticalAlign","tokens","childrenGap","StackItem","DefaultButton","ProgressIndicator","RouteStackProps","verticalFill","className","slideUpIn10","styles","root","overflow","CacheRoute","match","everMatched","current","stackProps","display","CacheSwitch","location","element","computedMatch","contextMatch","cached","Children","forEach","child","isValidElement","isCacheRoute","from","pathname","cloneElement","toListItem","initializeFileTypeIcons","mitm","classNames","cursor","textDecoration","units","extensionName","fileName","lastIndexOf","renderDetailsHeader","defaultRender","paddingTop","delay","time","setTimeout","createReadableStreamFromBufferIterator","ReadableStream","desiredSize","written","enqueue","currentPath","setCurrentPath","currentPathRef","breadcrumbItems","part","filter","Boolean","segment","unshift","isCurrentItem","items","setItems","loading","setLoading","listRef","load","sync","linkItems","intervalId","setInterval","lastBreak","Date","now","Link","followLinkPath","console","log","lstat","File","scrollToIndex","clearInterval","sortedList","setSortedList","sortKey","setSortKey","sortDescending","setSortDescendent","aIsFile","bIsFile","aSortKey","bSortKey","columns","iconName","isIconOnly","minWidth","maxWidth","isCollapsible","Icon","getFileTypeIconProps","FileIconType","linkedFolder","Directory","folder","extension","isRowHeader","onRender","toString","toLocaleString","maximumFractionDigits","formatSize","onColumnClick","column","isSorted","isSortedDescending","previewUrl","setPreviewUrl","previewImage","readableStream","receive","Response","blob","url","URL","createObjectURL","hidePreview","handleItemInvoked","selection","useConst","Selection","contextMenuItems","setContextMenuItems","contextMenuTarget","setContextMenuTarget","showContextMenu","selectedItems","getSelection","itemPath","writeableStream","createWriteStream","pipeTo","hideContextMenu","useCallback","MarqueeSelection","Breadcrumb","grow","minHeight","ShimmeredDetailsList","componentRef","setKey","layoutMode","justified","enableShimmer","onItemInvoked","onItemContextMenu","onRenderDetailsHeader","usePageCache","Layer","Overlay","style","width","height","alignItems","justifyContent","src","maxHeight","ContextualMenu","directionalHint","DirectionalHint","bottomLeftEdge","target","onDismiss","callout","CopyLink","href","calloutTarget","calloutVisible","showCallout","hideCallout","copyLink","clipboard","writeText","Callout","topCenter","Text","block","fontWeight","iframeStyle","position","top","left","visibility","onResize","rest","onResizeRef","handleResize","handleIframeRef","contentWindow","addEventListener","containerStyle","useMemo","ref","findKeyword","setFindKeyword","findAddonRef","handleFindKeywordChange","newValue","findNext","incremental","findPrevious","terminal","setTerminal","fitAddonRef","handleContainerRef","scrollback","findAddon","loadAddon","fitAddon","fit","reset","SearchBox","placeholder","onChange","onSearch","IconButton","disabled","iconProps","tcpPort","setTcpAddresses","queryTcpAddress","getDaemonTcpAddresses","tcpPortValue","setTcpPortValue","tcpPortInputId","useId","enableTcp","setDaemonTcpPort","parseInt","disableTcp","disableDaemonTcp","MessageBar","Label","htmlFor","TextField","render","setDevice","routes","exact","product","model","variant","Separator","Nav","groups","links","route","selectedKey","to","document","getElementById"],"mappings":"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","file":"index.a10f62b88ea073a13f68.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"2YZa\",1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Disposable } from './disposable';\nimport { EventListener, RemoveEventListener } from './event';\n\ninterface EventListenerInfo<TEvent, TResult = unknown> {\n    listener: EventListener<TEvent, any, any, TResult>;\n\n    thisArg: unknown;\n\n    args: unknown[];\n}\n\nexport class EventEmitter<TEvent, TResult = unknown> implements Disposable {\n    protected listeners: EventListenerInfo<TEvent, TResult>[] = [];\n\n    public constructor() {\n        this.event = this.event.bind(this);\n    }\n\n    public event(\n        listener: EventListener<TEvent, unknown, [], TResult>\n    ): RemoveEventListener;\n    public event<TThis, TArgs extends unknown[]>(\n        listener: EventListener<TEvent, TThis, TArgs, TResult>,\n        thisArg: TThis,\n        ...args: TArgs\n    ): RemoveEventListener;\n    public event<TThis, TArgs extends unknown[]>(\n        listener: EventListener<TEvent, TThis, TArgs, TResult>,\n        thisArg?: TThis,\n        ...args: TArgs\n    ): RemoveEventListener {\n        const info: EventListenerInfo<TEvent, TResult> = {\n            listener,\n            thisArg,\n            args,\n        };\n        this.listeners.push(info);\n\n        const remove: RemoveEventListener = () => {\n            const index = this.listeners.indexOf(info);\n            if (index > 0) {\n                this.listeners.splice(index, 1);\n            }\n        };\n        remove.dispose = remove;\n        return remove;\n    }\n\n    public fire(e: TEvent) {\n        for (const info of this.listeners.slice()) {\n            info.listener.apply(info.thisArg, [e, ...info.args]);\n        }\n    }\n\n    public dispose() {\n        this.listeners.length = 0;\n    }\n}\n","import { Event } from './event';\nimport { EventEmitter } from './event-emitter';\n\nexport type AsyncEventResult = void | Promise<void>;\n\nexport type AsyncEvent<TEvent> = Event<TEvent, AsyncEventResult>;\n\nexport class AsyncEventEmitter<TEvent> extends EventEmitter<TEvent, AsyncEventResult> {\n    public async fire(e: TEvent) {\n        for (const info of this.listeners) {\n            await info.listener.apply(info.thisArg, [e, ...info.args]);\n        }\n    }\n}\n","export interface Disposable {\n    dispose(): void;\n}\n\nexport class AutoDisposable implements Disposable {\n    private disposables: Disposable[] = [];\n\n    protected addDisposable<T extends Disposable>(disposable: T): T {\n        this.disposables.push(disposable);\n        return disposable;\n    }\n\n    public dispose() {\n        for (const disposable of this.disposables) {\n            disposable.dispose();\n        }\n\n        this.disposables = [];\n    }\n}\n\nexport class DisposableList extends AutoDisposable {\n    public add<T extends Disposable>(disposable: T): T {\n        return this.addDisposable(disposable);\n    }\n}\n","const BigInt0 = BigInt(0);\nconst BigInt1 = BigInt(1);\nconst BigInt2 = BigInt(2);\n\nconst BigInt2To64 = BigInt2 ** BigInt(64);\n\nexport function getBig(\n    buffer: ArrayBuffer,\n    offset = 0,\n    length = buffer.byteLength - offset\n): bigint {\n    const view = new DataView(buffer);\n\n    let result = BigInt0;\n\n    // Now `length` must be a multiplication of 8\n    // Support for arbitrary length can be easily added\n\n    for (let i = offset; i < offset + length; i += 8) {\n        result *= BigInt2To64;\n        const value = view.getBigUint64(i, false);\n        result += value;\n    }\n\n    return result;\n}\n\nexport function setBig(buffer: ArrayBuffer, value: bigint, offset: number = 0) {\n    const uint64Array: bigint[] = [];\n    while (value > BigInt0) {\n        uint64Array.push(BigInt.asUintN(64, value));\n        value /= BigInt2To64;\n    }\n\n    const view = new DataView(buffer);\n    for (let i = uint64Array.length - 1; i >= 0; i -= 1) {\n        view.setBigUint64(offset, uint64Array[i], false);\n        offset += 8;\n    }\n}\n\nexport function setBigLE(buffer: ArrayBuffer, value: bigint, offset = 0) {\n    const view = new DataView(buffer);\n    while (value > BigInt0) {\n        view.setBigUint64(offset, value, true);\n        offset += 8;\n        value /= BigInt2To64;\n    }\n}\n\n// These values are correct only if\n// modulus length is 2048 and\n// public exponent (e) is 65537\n// Anyway, that's how this library generates keys\n\n// To support other parameters,\n// a proper ASN.1 parser can be used\n\n// References:\n//\n//   https://tools.ietf.org/html/rfc8017#appendix-A.1.2\n//   PKCS #1: RSA Cryptography Specifications Version 2.2\n//     A.1.2.  RSA Private Key Syntax\n//\n//   https://lapo.it/asn1js/\n//   https://github.com/lapo-luchini/asn1js\n//   ASN.1 JavaScript decoder\n//\n//   https://www.itu.int/rec/T-REC-X.690-201508-I/en\n//   X.690: Specification of Distinguished Encoding Rules (DER)\n\nconst RsaPrivateKeyNOffset = 38;\nconst RsaPrivateKeyNLength = 2048 / 8;\nconst RsaPrivateKeyDOffset = 303;\nconst RsaPrivateKeyDLength = 2048 / 8;\n\nexport function parsePrivateKey(key: ArrayBuffer): [n: bigint, d: bigint] {\n    let n = getBig(key, RsaPrivateKeyNOffset, RsaPrivateKeyNLength);\n    let d = getBig(key, RsaPrivateKeyDOffset, RsaPrivateKeyDLength);\n\n    return [n, d];\n}\n\n// Taken from https://stackoverflow.com/a/51562038\n// I can't understand, but it does work\n// Only used with numbers less than 2^32 so doesn't need BigInt\nexport function modInverse(a: number, m: number) {\n    // validate inputs\n    [a, m] = [Number(a), Number(m)];\n    if (Number.isNaN(a) || Number.isNaN(m)) {\n        return NaN; // invalid input\n    }\n    a = (a % m + m) % m;\n    if (!a || m < 2) {\n        return NaN; // invalid input\n    }\n    // find the gcd\n    const s = [];\n    let b = m;\n    while (b) {\n        [a, b] = [b, a % b];\n        s.push({ a, b });\n    }\n    if (a !== 1) {\n        return NaN; // inverse does not exists\n    }\n    // find the inverse\n    let x = 1;\n    let y = 0;\n    for (let i = s.length - 2; i >= 0; --i) {\n        [x, y] = [y, x - y * Math.floor(s[i].a / s[i].b)];\n    }\n    return (y % m + m) % m;\n}\n\nexport function calculatePublicKey(privateKey: ArrayBuffer): ArrayBuffer {\n    // Android has its own public key generation algorithm\n    // See https://github.com/aosp-mirror/platform_system_core/blob/e5c9bbd45381d7bd72fef232d1c6668946253ac8/libcrypto_utils/android_pubkey.cpp#L111\n\n    // The public key is an array of\n    //\n    // [\n    //   modulusLengthInWords, // 32-bit integer, a \"word\" is 32-bit so it must be 2048 / 8 / 4\n    //                         // Actually the comment in Android source code was wrong\n    //   n0inv,                // 32-bit integer, the modular inverse of (lower 32 bits of) n\n    //   modulus,              // n\n    //   rr,                   // Montgomery parameter R^2\n    //   exponent,             // 32-bit integer, must be 65537\n    // ]\n    //\n    // (All in little endian)\n    // See https://github.com/aosp-mirror/platform_system_core/blob/e5c9bbd45381d7bd72fef232d1c6668946253ac8/libcrypto_utils/android_pubkey.cpp#L38\n\n    // extract `n` from private key\n    const [n] = parsePrivateKey(privateKey);\n\n    const publicKey = new ArrayBuffer(4 + 4 + 2048 / 8 + 2048 / 8 + 4);\n    const publicKeyView = new DataView(publicKey);\n\n    // modulusLengthInWords\n    publicKeyView.setUint32(0, 2048 / 8 / 4, true);\n\n    // Calculate `n0inv`\n    // Don't know why need to multiple -1\n    // Didn't exist in Android codebase\n    const n0inv = modInverse(Number(BigInt.asUintN(32, n) * BigInt(-1)), 2 ** 32);\n    publicKeyView.setUint32(4, n0inv, true);\n\n    // Write n\n    setBigLE(publicKey, n, 8);\n\n    // Calculate rr = (2^(rsa_size)) ^ 2 mod n\n    let rr = BigInt(2) ** BigInt(4096) % n;\n    setBigLE(publicKey, rr, 8 + 256);\n\n    // exponent\n    publicKeyView.setUint32(8 + 256 + 256, 65537, true);\n\n    return publicKey;\n}\n\n// Modular exponentiation\n// See https://en.wikipedia.org/wiki/Modular_exponentiation#Implementation_in_Lua\nexport function powMod(base: bigint, exponent: bigint, modulus: bigint): bigint {\n    if (modulus === BigInt1) {\n        return BigInt0;\n    }\n\n    let r = BigInt1;\n    base = base % modulus;\n\n    while (exponent > BigInt0) {\n        if (BigInt.asUintN(1, exponent) === BigInt1) {\n            r = r * base % modulus;\n        }\n\n        exponent >>= BigInt1;\n        base = base ** BigInt2 % modulus;\n    }\n\n    return r;\n}\n\nexport const Sha1DigestLength = 20;\n\nexport const Asn1Sequence = 0x30;\nexport const Asn1OctetString = 0x04;\nexport const Asn1Null = 0x05;\nexport const Asn1Oid = 0x06;\n\n// PKCS#1 SHA-1 hash digest info\nexport const Sha1DigestInfo = [\n    Asn1Sequence, 0x0d + Sha1DigestLength,\n    Asn1Sequence, 0x09,\n    // SHA-1 (1 3 14 3 2 26)\n    Asn1Oid, 0x05, 1 * 40 + 3, 14, 3, 2, 26,\n    Asn1Null, 0x00,\n    Asn1OctetString, Sha1DigestLength\n];\n\n// SubtleCrypto.sign() will hash the given data and sign the hash\n// But we don't need the hashing step\n// (In another word, ADB just requires the client to\n// encrypt the given data with its private key)\n// However SubtileCrypto.encrypt() doesn't accept 'RSASSA-PKCS1-v1_5' algorithm\n// So we need to implement the encryption by ourself\nexport function sign(privateKey: ArrayBuffer, data: ArrayBuffer): ArrayBuffer {\n    const [n, d] = parsePrivateKey(privateKey);\n\n    // PKCS#1 padding\n    const padded = new Uint8Array(256);\n    let index = 0;\n\n    padded[index] = 0;\n    index += 1;\n\n    padded[index] = 1;\n    index += 1;\n\n    const fillLength = padded.length - Sha1DigestInfo.length - data.byteLength - 1;\n    while (index < fillLength) {\n        padded[index] = 0xff;\n        index++;\n    }\n\n    padded[index] = 0;\n    index += 1;\n\n    padded.set(new Uint8Array(Sha1DigestInfo), index);\n    index += Sha1DigestInfo.length;\n\n    padded.set(new Uint8Array(data), index);\n\n    // Encryption\n    // signature = padded ** d % n\n    let signature = powMod(getBig(padded.buffer), d, n);\n\n    // Put into an ArrayBuffer\n    const result = new ArrayBuffer(256);\n    setBig(result, signature);\n\n    return result;\n}\n","import { AdbBackend } from './backend';\n\nnamespace Assert {\n    export function command(command: string): void {\n        const length = command.length;\n        if (length !== 4) {\n            throw new Error(`AdbPacket: command.length mismatch. Expected 4, but got ${length}`);\n        }\n    }\n\n    export function magic(view: DataView): void {\n        const expected = view.getUint32(0) ^ 0xFFFFFFFF;\n        const actual = view.getInt32(20);\n        if (expected !== actual) {\n            throw new Error(`AdbPacket: magic number mismatch. Expected ${expected}, but got ${actual}`);\n        }\n    }\n}\n\nexport enum AdbCommand {\n    Connect = 'CNXN',\n    Auth = 'AUTH',\n    OK = 'OKAY',\n    Close = 'CLSE',\n    Write = 'WRTE',\n    Open = 'OPEN',\n}\n\nexport class AdbPacket {\n    public static async parse(backend: AdbBackend): Promise<AdbPacket> {\n        let buffer = await backend.read(24);\n        if (buffer.byteLength !== 24) {\n            // Maybe it's a payload from last connection.\n            // Ignore and try again\n            buffer = await backend.read(24);\n        }\n        const view = new DataView(buffer);\n        Assert.magic(view);\n\n        const command = backend.decodeUtf8(buffer.slice(0, 4));\n        const arg0 = view.getUint32(4, true);\n        const arg1 = view.getUint32(8, true);\n        const payloadLength = view.getUint32(12, true);\n\n        let payload: ArrayBuffer | undefined;\n        if (payloadLength !== 0) {\n            payload = await backend.read(payloadLength);\n        }\n\n        return new AdbPacket(backend, command, arg0, arg1, payload);\n    }\n\n    public static send(\n        backend: AdbBackend,\n        command: AdbCommand,\n        arg0: number,\n        arg1: number,\n        payload?: string | ArrayBuffer\n    ): Promise<void> {\n        const packet = new AdbPacket(backend, command, arg0, arg1, payload);\n        return packet.send();\n    }\n\n    private backend: AdbBackend;\n\n    public command: string;\n\n    public arg0: number;\n\n    public arg1: number;\n\n    private _payloadLength!: number;\n    public get payloadLength(): number { return this._payloadLength; }\n\n    private _payload: ArrayBuffer | undefined;\n    public get payload(): ArrayBuffer | undefined { return this._payload; }\n    public set payload(value: ArrayBuffer | undefined) {\n        if (value !== undefined) {\n            this._payloadLength = value.byteLength;\n            this._payload = value;\n        } else {\n            this._payloadLength = 0;\n            this._payload = undefined;\n        }\n\n        this._payloadString = undefined;\n    }\n\n    private _payloadString: string | undefined;\n    public get payloadString(): string | undefined {\n        if (!this._payload) {\n            return undefined;\n        }\n\n        if (!this._payloadString) {\n            this._payloadString = this.backend.decodeUtf8(this._payload);\n        }\n        return this._payloadString;\n    }\n    public set payloadString(value: string | undefined) {\n        if (value !== undefined) {\n            this.payload = this.backend.encodeUtf8(value);\n            this._payloadString = value;\n        } else {\n            this.payload = undefined;\n        }\n    }\n\n    public constructor(\n        backend: AdbBackend,\n        command: string,\n        arg0: number,\n        arg1: number,\n        payload?: string | ArrayBuffer\n    ) {\n        this.backend = backend;\n\n        Assert.command(command);\n        this.command = command;\n\n        this.arg0 = arg0;\n        this.arg1 = arg1;\n\n        if (typeof payload === \"string\") {\n            this.payloadString = payload;\n        } else {\n            this.payload = payload;\n        }\n    }\n\n    public async send(): Promise<void> {\n        const buffer = new ArrayBuffer(24);\n        const array = new Uint8Array(buffer);\n        array.set(new Uint8Array(this.backend.encodeUtf8(this.command)));\n\n        const view = new DataView(buffer);\n        view.setUint32(4, this.arg0, true);\n        view.setUint32(8, this.arg1, true);\n        view.setUint32(12, this.payloadLength, true);\n        view.setUint32(16, /* checksum */ 0, true);\n        view.setUint32(20, /* magic */ view.getUint32(0, true) ^ 0xFFFFFFFF, true);\n\n        await this.backend.write(buffer);\n\n        if (this.payload) {\n            await this.backend.write(this.payload);\n        }\n    }\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { Disposable } from '@yume-chan/event';\n\nexport class AutoResetEvent implements Disposable {\n    private readonly list: PromiseResolver<void>[] = [];\n\n    private blocking: boolean;\n\n    public constructor(initialSet = false) {\n        this.blocking = initialSet;\n    }\n\n    public wait(): Promise<void> {\n        if (!this.blocking) {\n            this.blocking = true;\n\n            if (this.list.length === 0) {\n                return Promise.resolve();\n            }\n        }\n\n        const resolver = new PromiseResolver<void>();\n        this.list.push(resolver);\n        return resolver.promise;\n    }\n\n    public notify() {\n        if (this.list.length !== 0) {\n            this.list.pop()!.resolve();\n        } else {\n            this.blocking = false;\n        }\n    }\n\n    public dispose() {\n        for (const item of this.list) {\n            item.reject(new Error('The AutoResetEvent has been disposed'));\n        }\n        this.list.length = 0;\n    }\n}\n","interface Base64CharRange {\n    start: number;\n\n    length: number;\n\n    end: number;\n\n    offset: number;\n}\n\nlet ranges: Base64CharRange[] = [];\nlet chars: string[] = [];\n\nlet offset = 0;\nfunction addRange(start: string, end: string) {\n    const startCharCode = start.charCodeAt(0);\n    const endCharCode = end.charCodeAt(0);\n    const length = endCharCode - startCharCode + 1;\n\n    for (let i = startCharCode; i <= endCharCode; i++) {\n        chars.push(String.fromCharCode(i));\n    }\n\n    ranges.push({\n        start: startCharCode,\n        length: length,\n        end: endCharCode,\n        offset: startCharCode - offset,\n    });\n\n    offset += length;\n}\n\naddRange('A', 'Z');\naddRange('a', 'z');\naddRange('0', '9');\naddRange('+', '+');\naddRange('/', '/');\n\nranges = ranges.sort((a, b) => a.end - b.end);\n\nfunction toValue(char: string): number {\n    const charCode = char.charCodeAt(0);\n\n    let start = 0;\n    let end = ranges.length - 1;\n    let i = end >> 1;\n\n    while (true) {\n        const range = ranges[i];\n        if (charCode < range.start) {\n            end = i - 1;\n        } else if (charCode > range.end) {\n            start = i + 1;\n        } else {\n            return charCode - range.offset;\n        }\n        i = (start + end) >> 1;\n    }\n}\n\nexport function encodeBase64(buffer: ArrayBuffer): string {\n    const array = new Uint8Array(buffer);\n    const length = buffer.byteLength;\n    const remainder = length % 3;\n    let result = '';\n\n    let i = 0;\n    for (; i < length - remainder;) {\n        // aaaaaabb\n        const x = array[i];\n        i += 1;\n        // bbbbcccc\n        const y = array[i];\n        i += 1;\n        // ccdddddd\n        const z = array[i];\n        i += 1;\n\n        result += chars[x >> 2];\n        result += chars[((x & 0b11) << 4) | (y >> 4)];\n        result += chars[((y & 0b1111) << 2) | (z >> 6)];\n        result += chars[z & 0b111111];\n    }\n\n    if (remainder === 1) {\n        // aaaaaabb\n        const x = array[i];\n\n        result += chars[x >> 2];\n        result += chars[((x & 0b11) << 4)];\n        result += '==';\n    } else if (remainder === 2) {\n        // aaaaaabb\n        const x = array[i];\n        i += 1;\n        // bbbbcccc\n        const y = array[i];\n\n        result += chars[x >> 2];\n        result += chars[((x & 0b11) << 4) | (y >> 4)];\n        result += chars[((y & 0b1111) << 2)];\n        result += '=';\n    }\n\n    return result;\n}\n\nexport function decodeBase64(input: string): ArrayBuffer {\n    let padding: number;\n    if (input[input.length - 2] === '=') {\n        padding = 2;\n    } else if (input[input.length - 1] === '=') {\n        padding = 1;\n    } else {\n        padding = 0;\n    }\n\n    const result = new Uint8Array(input.length / 4 * 3 - padding);\n    let sIndex = 0;\n    let dIndex = 0;\n\n    while (sIndex < input.length - (padding !== 0 ? 4 : 0)) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const c = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const d = toValue(input[sIndex]);\n        sIndex += 1;\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n        dIndex += 1;\n\n        result[dIndex] = ((b & 0b1111) << 4) | ((c & 0b11_1100) >> 2);\n        dIndex += 1;\n\n        result[dIndex] = ((c & 0b11) << 6) | d;\n        dIndex += 1;\n    }\n\n    if (padding === 1) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const c = toValue(input[sIndex]);\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n        dIndex += 1;\n\n        result[dIndex] = ((b & 0b1111) << 4) | ((c & 0b11_1100) >> 2);\n    } else if (padding === 2) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n    }\n\n    return result.buffer;\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { EventEmitter } from '@yume-chan/event';\n\nconst IteratorReturnUndefinedResult: IteratorReturnResult<void> = {\n    done: true,\n    value: undefined,\n};\nObject.freeze(IteratorReturnUndefinedResult);\n\nexport type EventIteratorDestroyer<T> = (items: T[]) => void;\n\nexport class EventIteratorState<T> {\n    public pullQueue: PromiseResolver<IteratorResult<T>>[] = [];\n\n    public pushQueue: [value: T, size: number][] = [];\n\n    public ended = false;\n\n    public waterMark = 0;\n\n    public pendingLowWaterEvent = false;\n\n    public lowWaterEvent = new EventEmitter<void>();\n\n    public get onLowWater() { return this.lowWaterEvent.event; }\n\n    public cleanup!: EventIteratorDestroyer<T>;\n}\n\nexport class EventIteratorController<T> {\n    private state: EventIteratorState<T>;\n\n    public maxConsumerCount = Infinity;\n\n    public highWaterMark: number = 10;\n\n    public lowWaterMark: number = 0;\n\n    public get waterMark() { return this.state.waterMark; }\n\n    public get onLowWater() { return this.state.lowWaterEvent.event; }\n\n    public constructor(state: EventIteratorState<T>) {\n        this.state = state;\n    }\n\n    public push(value: T, size = 1): boolean {\n        if (this.state.pullQueue.length) {\n            this.state.pullQueue.shift()!.resolve({ done: false, value });\n            return true;\n        }\n\n        this.state.pushQueue.push([value, size]);\n        this.state.waterMark += size;\n        if (this.state.waterMark < this.highWaterMark) {\n            return true;\n        }\n\n        this.state.pendingLowWaterEvent = true;\n        return false;\n    }\n\n    public end(): void {\n        this.state.ended = true;\n        while (this.state.pullQueue.length) {\n            this.state.pullQueue.shift()!.resolve(IteratorReturnUndefinedResult);\n        }\n        this.state.cleanup(this.state.pushQueue.map(([value]) => value));\n    }\n}\n\nexport interface EventIteratorInitializer<T> {\n    (controller: EventIteratorController<T>): EventIteratorDestroyer<T>;\n}\n\nexport class EventIterable<T> implements AsyncIterable<T> {\n    private initializer: EventIteratorInitializer<T>;\n\n    public constructor(initializer: EventIteratorInitializer<T>) {\n        this.initializer = initializer;\n    }\n\n    public [Symbol.asyncIterator](): AsyncIterator<T> {\n        const state = new EventIteratorState<T>();\n        const controller = new EventIteratorController<T>(state);\n        state.cleanup = this.initializer(controller);\n        return {\n            next() {\n                if (state.pushQueue.length) {\n                    const [value, size] = state.pushQueue.shift()!;\n                    state.waterMark -= size;\n                    if (state.pendingLowWaterEvent &&\n                        state.waterMark <= controller.lowWaterMark) {\n                        state.lowWaterEvent.fire();\n                    }\n                    return Promise.resolve({ done: false, value });\n                }\n\n                if (state.ended) {\n                    return Promise.resolve(IteratorReturnUndefinedResult);\n                }\n\n                if (state.pullQueue.length < controller.maxConsumerCount) {\n                    const resolver = new PromiseResolver<IteratorResult<T>>();\n                    state.pullQueue.push(resolver);\n                    return resolver.promise;\n                }\n\n                return Promise.reject(new Error('Max consumer count exceeded'));\n            },\n            return() {\n                controller.end();\n                return Promise.resolve(IteratorReturnUndefinedResult);\n            },\n        };\n    }\n}\n","import { AutoDisposable, Disposable } from '@yume-chan/event';\nimport { AdbBackend, AdbKeyIterator } from './backend';\nimport { calculatePublicKey, sign } from './crypto';\nimport { AdbCommand, AdbPacket } from './packet';\nimport { encodeBase64 } from './utils';\n\nexport enum AdbAuthType {\n    Token = 1,\n    Signature = 2,\n    PublicKey = 3,\n}\n\nexport interface AdbAuthenticator extends Disposable {\n    tryAuth(packet: AdbPacket): Promise<AdbPacket | undefined>;\n}\n\nexport interface AdbAuthenticatorConstructor {\n    new(backend: AdbBackend): AdbAuthenticator;\n}\n\nexport class AdbSignatureAuthenticator implements AdbAuthenticator {\n    private readonly backend: AdbBackend;\n\n    private readonly iterator: AdbKeyIterator;\n\n    private iteratorDone = false;\n\n    public constructor(backend: AdbBackend) {\n        this.backend = backend;\n        this.iterator = backend.iterateKeys();\n    }\n\n    public async tryAuth(packet: AdbPacket): Promise<AdbPacket | undefined> {\n        if (packet.arg0 !== AdbAuthType.Token) {\n            return undefined;\n        }\n\n        const next = await this.iterator.next();\n        if (next.done) {\n            this.iteratorDone = true;\n            return undefined;\n        }\n\n        const signature = sign(next.value, packet.payload!);\n        return new AdbPacket(\n            this.backend,\n            AdbCommand.Auth,\n            AdbAuthType.Signature,\n            0,\n            signature\n        );\n    }\n\n    public dispose() {\n        if (!this.iteratorDone) {\n            this.iterator.return?.();\n        }\n    }\n}\n\nexport class AdbPublicKeyAuthenticator implements AdbAuthenticator {\n    private backend: AdbBackend;\n\n    public constructor(backend: AdbBackend) {\n        this.backend = backend;\n    }\n\n    public async tryAuth(): Promise<AdbPacket> {\n        let privateKey: ArrayBuffer;\n\n        const iterator = this.backend.iterateKeys();\n        const next = await iterator.next();\n        if (!next.done) {\n            privateKey = next.value;\n            await iterator.return?.();\n        } else {\n            privateKey = await this.backend.generateKey();\n        }\n\n        const publicKey = calculatePublicKey(privateKey);\n        return new AdbPacket(\n            this.backend,\n            AdbCommand.Auth,\n            AdbAuthType.PublicKey,\n            0,\n            // adbd needs the extra null character\n            encodeBase64(publicKey) + '\\0'\n        );\n    }\n\n    public dispose() {\n        // do nothing\n    }\n}\n\nexport const AdbDefaultAuthenticators: AdbAuthenticatorConstructor[] = [\n    AdbSignatureAuthenticator,\n    AdbPublicKeyAuthenticator\n];\n\nexport class AdbAuthenticationHandler extends AutoDisposable {\n    public readonly authenticators: readonly AdbAuthenticator[];\n\n    private index = 0;\n\n    public constructor(\n        authenticators: readonly AdbAuthenticatorConstructor[],\n        backend: AdbBackend\n    ) {\n        super();\n\n        this.authenticators = authenticators.map(\n            Constructor => this.addDisposable(new Constructor(backend))\n        );\n    }\n\n    public async tryNextAuth(packet: AdbPacket): Promise<AdbPacket> {\n        while (this.index < this.authenticators.length) {\n            const result = await this.authenticators[this.index].tryAuth(packet);\n            if (result) {\n                return result;\n            }\n\n            this.index += 1;\n        }\n\n        throw new Error('Cannot authenticate with device');\n    }\n}\n","import { DisposableList } from '@yume-chan/event';\nimport { AdbStream } from './stream';\nimport { AutoResetEvent, EventIterable } from './utils';\n\nexport class AdbBufferedStream implements AsyncIterable<ArrayBuffer>{\n    private stream: AdbStream;\n\n    public get backend() { return this.stream.backend; }\n\n    public get localId() { return this.stream.localId; }\n\n    public get remoteId() { return this.stream.remoteId; }\n\n    private mode: 'none' | 'read' | 'iterate' = 'read';\n\n    private readBuffer: ArrayBuffer | undefined;\n\n    private readIterator: AsyncIterator<ArrayBuffer> | undefined;\n\n    private extraBuffers: ArrayBuffer[] = [];\n\n    public constructor(stream: AdbStream) {\n        this.stream = stream;\n    }\n\n    public async read(length: number): Promise<ArrayBuffer> {\n        if (this.mode !== 'none' && this.mode !== 'read') {\n            throw new Error(`This BufferedStream is in ${this.mode} mode`);\n        }\n\n        if (!this.readIterator) {\n            this.readIterator = this[Symbol.asyncIterator]();\n        }\n\n        this.mode = 'read';\n\n        let array: Uint8Array;\n        let index: number;\n        if (this.readBuffer) {\n            const buffer = this.readBuffer;\n            if (buffer.byteLength > length) {\n                this.readBuffer = buffer.slice(length);\n                return buffer.slice(0, length);\n            }\n\n            array = new Uint8Array(length);\n            array.set(new Uint8Array(buffer));\n            index = buffer.byteLength;\n            this.readBuffer = undefined;\n        } else {\n            array = new Uint8Array(length);\n            index = 0;\n        }\n\n        while (index < length) {\n            const result = await this.readIterator.next();\n            if (result.done) {\n                throw new Error('This BufferedStream has been closed');\n            }\n\n            const buffer = result.value;\n            if (buffer.byteLength > length - index) {\n                array.set(new Uint8Array(buffer.slice(0, length)), index);\n                this.readBuffer = buffer.slice(length);\n                return array.buffer;\n            }\n\n            array.set(new Uint8Array(buffer), index);\n            index += buffer.byteLength;\n        }\n\n        return array.buffer;\n    }\n\n    public async readAll(): Promise<string> {\n        let output = '';\n        for await (const buffer of this) {\n            output += this.stream.backend.decodeUtf8(buffer);\n        }\n        return output;\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.stream.write(data);\n    }\n\n    public close() {\n        return this.stream.close();\n    }\n\n    public [Symbol.asyncIterator]() {\n        if (this.readIterator) {\n            this.readIterator.return?.();\n            this.readIterator = undefined;\n        }\n\n        return new EventIterable<ArrayBuffer>(controller => {\n            controller.maxConsumerCount = 1;\n            controller.highWaterMark = 16 * 1024;\n\n            for (const item of this.extraBuffers) {\n                controller.push(item);\n            }\n            this.extraBuffers.length = 0;\n\n            const disposable = new DisposableList();\n            const resetEvent = new AutoResetEvent(true);\n            disposable.add(this.stream.onData(buffer => {\n                if (!controller.push(buffer, buffer.byteLength)) {\n                    return resetEvent.wait();\n                }\n                return;\n            }));\n            disposable.add(this.stream.onClose(() => {\n                controller.end();\n            }));\n            disposable.add(controller.onLowWater(() => {\n                resetEvent.notify();\n            }));\n\n            this.mode = 'iterate';\n\n            return (buffers) => {\n                this.extraBuffers = buffers;\n                this.mode = 'none';\n                disposable.dispose();\n            };\n        })[Symbol.asyncIterator]();\n    }\n}\n","import AsyncOperationManager from '@yume-chan/async-operation-manager';\nimport { AsyncEventEmitter, AutoDisposable, EventEmitter } from '@yume-chan/event';\nimport { AdbBackend } from './backend';\nimport { AdbCommand, AdbPacket } from './packet';\nimport { AutoResetEvent } from './utils';\n\nexport class AdbStreamController extends AutoDisposable {\n    private readonly writeLock = this.addDisposable(new AutoResetEvent());\n\n    public readonly dispatcher: AdbPacketDispatcher;\n\n    public get backend() { return this.dispatcher.backend; }\n\n    public readonly localId: number;\n\n    public readonly remoteId: number;\n\n    public readonly dataEvent = this.addDisposable(new AsyncEventEmitter<ArrayBuffer>());\n\n    private readonly closeEvent = this.addDisposable(new EventEmitter<void>());\n\n    public get onClose() { return this.closeEvent.event; }\n\n    public constructor(localId: number, remoteId: number, dispatcher: AdbPacketDispatcher) {\n        super();\n\n        this.localId = localId;\n        this.remoteId = remoteId;\n        this.dispatcher = dispatcher;\n    }\n\n    public async write(data: ArrayBuffer): Promise<void> {\n        await this.writeLock.wait();\n        await this.dispatcher.sendPacket(AdbCommand.Write, this.localId, this.remoteId, data);\n    }\n\n    public ack() {\n        this.writeLock.notify();\n    }\n\n    public close() {\n        return this.dispatcher.sendPacket(AdbCommand.Close, this.localId, this.remoteId);\n    }\n\n    public dispose() {\n        this.closeEvent.fire();\n        super.dispose();\n    }\n}\n\nexport interface AdbPacketArrivedEventArgs {\n    handled: boolean;\n\n    packet: AdbPacket;\n}\n\nexport class AdbPacketDispatcher extends AutoDisposable {\n    public readonly backend: AdbBackend;\n\n    // ADB requires stream id to start from 1\n    // (0 means open failed)\n    private readonly initializers = new AsyncOperationManager(1);\n    private readonly streams = new Map<number, AdbStreamController>();\n\n    private readonly packetEvent = this.addDisposable(new EventEmitter<AdbPacketArrivedEventArgs>());\n    public get onPacket() { return this.packetEvent.event; }\n\n    private readonly errorEvent = this.addDisposable(new EventEmitter<Error>());\n    public get onError() { return this.errorEvent.event; }\n\n    private _running = true;\n    public get running() { return this._running; }\n\n    public constructor(backend: AdbBackend) {\n        super();\n\n        this.backend = backend;\n        this.receiveLoop();\n    }\n\n    public async createStream(service: string): Promise<AdbStream> {\n        const [localId, initializer] = this.initializers.add<number>();\n        await this.sendPacket(AdbCommand.Open, localId, 0, service);\n\n        const remoteId = await initializer;\n        const controller = new AdbStreamController(localId, remoteId, this);\n        this.streams.set(controller.localId, controller);\n\n        return new AdbStream(controller);\n    }\n\n    public sendPacket(packet: AdbPacket): Promise<void>;\n    public sendPacket(\n        command: AdbCommand,\n        arg0: number,\n        arg1: number,\n        payload?: string | ArrayBuffer\n    ): Promise<void>;\n    public sendPacket(\n        packetOrCommand: AdbPacket | AdbCommand,\n        arg0?: number,\n        arg1?: number,\n        payload?: string | ArrayBuffer\n    ): Promise<void> {\n        if (arguments.length === 1) {\n            return (packetOrCommand as AdbPacket).send();\n        } else {\n            return AdbPacket.send(\n                this.backend,\n                packetOrCommand as AdbCommand,\n                arg0 as number,\n                arg1 as number,\n                payload\n            );\n        }\n    }\n\n    public dispose() {\n        this._running = false;\n\n        for (const stream of this.streams.values()) {\n            stream.dispose();\n        }\n        this.streams.clear();\n\n        super.dispose();\n    }\n\n    private async receiveLoop() {\n        try {\n            while (this._running) {\n                const packet = await AdbPacket.parse(this.backend);\n                switch (packet.command) {\n                    case AdbCommand.OK:\n                        // OKAY has two meanings\n                        if (this.initializers.resolve(packet.arg1, packet.arg0)) {\n                            // 1. The device has created the Stream\n                            continue;\n                        }\n\n                        if (this.streams.has(packet.arg1)) {\n                            // 2. The device has received last WRTE to the Stream\n                            this.streams.get(packet.arg1)!.ack();\n                            continue;\n                        }\n\n                        // Maybe the device is responding to a packet of last connection\n                        // Tell the device to close the stream\n                        this.sendPacket(AdbCommand.Close, packet.arg1, packet.arg0);\n                        continue;\n                    case AdbCommand.Close:\n                        // CLSE also has two meanings\n                        if (packet.arg0 === 0) {\n                            // 1. The device don't want to create the Stream\n                            this.initializers.reject(packet.arg1, new Error('open failed'));\n                            continue;\n                        }\n\n                        if (this.streams.has(packet.arg1)) {\n                            // 2. The device has closed the Stream\n                            this.streams.get(packet.arg1)!.dispose();\n                            this.streams.delete(packet.arg1);\n                            continue;\n                        }\n\n                        // Maybe the device is responding to a packet of last connection\n                        // Just ignore it\n                        continue;\n                    case AdbCommand.Write:\n                        if (this.streams.has(packet.arg1)) {\n                            await this.streams.get(packet.arg1)!.dataEvent.fire(packet.payload!);\n                            await this.sendPacket(AdbCommand.OK, packet.arg1, packet.arg0);\n                        }\n\n                        // Maybe the device is responding to a packet of last connection\n                        // Just ignore it\n                        continue;\n                }\n\n                const args: AdbPacketArrivedEventArgs = {\n                    handled: false,\n                    packet,\n                };\n                this.packetEvent.fire(args);\n                if (!args.handled) {\n                    this.dispose();\n                    return;\n                }\n            }\n        } catch (e) {\n            if (!this._running) {\n                // ignore error\n                return;\n            }\n\n            this.errorEvent.fire(e);\n        }\n    }\n}\n\nexport class AdbStream {\n    private controller: AdbStreamController;\n\n    public get backend() { return this.controller.backend; }\n\n    public get localId() { return this.controller.localId; }\n\n    public get remoteId() { return this.controller.remoteId; }\n\n    public get onData() { return this.controller.dataEvent.event; }\n\n    public get onClose() { return this.controller.onClose; }\n\n    public constructor(controller: AdbStreamController) {\n        this.controller = controller;\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.controller.write(data);\n    }\n\n    public close(): Promise<void> {\n        return this.controller.close();\n    }\n}\n","export const BackingField = Symbol('BackingField');\n\nexport const enum FieldType {\n    Number,\n    FixedLengthArray,\n    VariableLengthArray,\n}\n\nexport interface FieldDescriptorBaseOptions {\n\n}\n\nexport interface FieldDescriptorBase<\n    TName extends string = string,\n    TResultObject = {},\n    TInitObject = {},\n    TOptions extends FieldDescriptorBaseOptions = FieldDescriptorBaseOptions\n    > {\n    type: FieldType | string;\n\n    name: TName;\n\n    options: TOptions;\n\n    resultObject?: TResultObject;\n\n    initObject?: TInitObject;\n}\n","import { BackingField, FieldDescriptorBase, FieldDescriptorBaseOptions } from './descriptor';\n\nexport namespace Array {\n    export const enum SubType {\n        ArrayBuffer,\n        String,\n    }\n\n    export type TypeScriptType<TType extends SubType = SubType> =\n        TType extends SubType.ArrayBuffer ? ArrayBuffer :\n        TType extends SubType.String ? string :\n        ArrayBuffer | string;\n\n    export interface BackingField {\n        buffer?: ArrayBuffer;\n\n        string?: string;\n    }\n\n    export function getBackingField(object: any, name: string): BackingField {\n        return object[BackingField][name];\n    }\n\n    export function setBackingField(object: any, name: string, value: BackingField): void {\n        object[BackingField][name] = value;\n    }\n\n    export function initialize(object: any, field: Array, value: BackingField): void {\n        switch (field.subType) {\n            case SubType.ArrayBuffer:\n                Object.defineProperty(object, field.name, {\n                    configurable: true,\n                    enumerable: true,\n                    get(): ArrayBuffer {\n                        return getBackingField(object, field.name).buffer!;\n                    },\n                    set(buffer: ArrayBuffer) {\n                        setBackingField(object, field.name, { buffer });\n                    },\n                });\n                break;\n            case SubType.String:\n                Object.defineProperty(object, field.name, {\n                    configurable: true,\n                    enumerable: true,\n                    get(): string {\n                        return getBackingField(object, field.name).string!;\n                    },\n                    set(string: string) {\n                        setBackingField(object, field.name, { string });\n                    },\n                });\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n        setBackingField(object, field.name, value);\n    }\n}\n\nexport interface Array<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TResultObject = {},\n    TInitObject = {},\n    TOptions extends FieldDescriptorBaseOptions = FieldDescriptorBaseOptions\n    > extends FieldDescriptorBase<\n    TName,\n    TResultObject,\n    TInitObject,\n    TOptions\n    > {\n    subType: TType;\n}\n","import { FieldDescriptorBase, FieldType } from './descriptor';\n\nexport interface StructSerializationContext {\n    encodeUtf8(input: string): ArrayBuffer;\n}\n\nexport interface StructDeserializationContext extends StructSerializationContext {\n    decodeUtf8(buffer: ArrayBuffer): string;\n\n    read(length: number): Promise<ArrayBuffer>;\n}\n\nexport interface StructOptions {\n    littleEndian: boolean;\n}\n\nexport interface FieldTypeDefinition<\n    TDescriptor extends FieldDescriptorBase = FieldDescriptorBase,\n    > {\n    type: FieldType | string;\n\n    deserialize(options: {\n        context: StructDeserializationContext;\n        field: TDescriptor;\n        object: any;\n        options: StructOptions;\n    }): Promise<void>;\n\n    getSize(options: {\n        field: TDescriptor;\n        options: StructOptions;\n    }): number;\n\n    getDynamicSize?(options: {\n        context: StructSerializationContext,\n        field: TDescriptor,\n        object: any,\n        options: StructOptions,\n    }): number;\n\n    initialize?(options: {\n        context: StructSerializationContext;\n        field: TDescriptor;\n        init: any;\n        object: any;\n        options: StructOptions;\n    }): void;\n\n    serialize(options: {\n        context: StructSerializationContext;\n        dataView: DataView;\n        field: TDescriptor;\n        object: any;\n        offset: number;\n        options: StructOptions;\n    }): void;\n}\n\nconst registry: Record<number | string, FieldTypeDefinition> = {};\n\nexport function getFieldTypeDefinition(type: FieldType | string): FieldTypeDefinition {\n    return registry[type];\n}\n\nexport function registerFieldTypeDefinition<\n    TDescriptor extends FieldDescriptorBase,\n    TDefinition extends FieldTypeDefinition<TDescriptor>\n>(\n    _field: TDescriptor,\n    methods: TDefinition\n): void {\n    registry[methods.type] = methods;\n}\n","import { registerFieldTypeDefinition } from './definition';\nimport { FieldDescriptorBase, FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace Number {\n    export type TypeScriptType = number;\n\n    export const enum SubType {\n        Int32,\n        Uint32,\n    }\n\n    export const SizeMap: Record<SubType, number> = {\n        [SubType.Int32]: 4,\n        [SubType.Uint32]: 4,\n    };\n\n    export const DataViewGetterMap = {\n        [SubType.Int32]: 'getInt32',\n        [SubType.Uint32]: 'getUint32',\n    } as const;\n\n    export const DataViewSetterMap = {\n        [SubType.Int32]: 'setInt32',\n        [SubType.Uint32]: 'setUint32',\n    } as const;\n}\n\nexport interface Number<\n    TName extends string = string,\n    TTypeScriptType = Number.TypeScriptType,\n    TOptions extends FieldDescriptorBaseOptions = FieldDescriptorBaseOptions\n    > extends FieldDescriptorBase<\n    TName,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType>,\n    TOptions\n    > {\n    type: FieldType.Number;\n\n    subType: Number.SubType;\n}\n\nregisterFieldTypeDefinition(undefined as unknown as Number, {\n    type: FieldType.Number,\n\n    getSize({ field }) {\n        return Number.SizeMap[field.subType];\n    },\n\n    async deserialize({ context, field, object, options }) {\n        const buffer = await context.read(Number.SizeMap[field.subType]);\n        const view = new DataView(buffer);\n        object[field.name] = view[Number.DataViewGetterMap[field.subType]](\n            0,\n            options.littleEndian\n        );\n    },\n\n    serialize({ dataView, field, object, offset, options }) {\n        dataView[Number.DataViewSetterMap[field.subType]](\n            offset,\n            object[field.name],\n            options.littleEndian\n        );\n    },\n});\n","import { Identity } from '../utils';\nimport { Array } from './array';\nimport { registerFieldTypeDefinition, StructSerializationContext } from './definition';\nimport { BackingField, FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace VariableLengthArray {\n    export type TypeScriptTypeCanBeUndefined<\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > =\n        TEmptyBehavior extends EmptyBehavior.Empty ? never :\n        undefined;\n\n    export type TypeScriptType<\n        TType extends Array.SubType = Array.SubType,\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > =\n        Identity<\n            Array.TypeScriptType<TType> |\n            TypeScriptTypeCanBeUndefined<TEmptyBehavior>\n        >;\n\n    export const enum EmptyBehavior {\n        Undefined,\n        Empty,\n    }\n\n    export type KeyOfType<TObject, TProperty> =\n        {\n            [TKey in keyof TObject]:\n            TObject[TKey] extends TProperty ? TKey : never\n        }[keyof TObject];\n\n    export interface Options<\n        TInit = object,\n        TLengthField extends KeyOfType<TInit, number> = any,\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > extends FieldDescriptorBaseOptions {\n        lengthField: TLengthField;\n\n        emptyBehavior?: TEmptyBehavior;\n    }\n\n    export function getLengthBackingField(object: any, field: VariableLengthArray): number | undefined {\n        return object[BackingField][field.options.lengthField];\n    }\n\n    export function setLengthBackingField(\n        object: any,\n        field: VariableLengthArray,\n        value: number | undefined\n    ) {\n        object[BackingField][field.options.lengthField] = value;\n    }\n\n    export function initialize(\n        object: any,\n        field: VariableLengthArray,\n        value: Array.BackingField,\n        context: StructSerializationContext,\n    ): void {\n        Array.initialize(object, field, value);\n        const descriptor = Object.getOwnPropertyDescriptor(object, field.name)!;\n        delete object[field.name];\n\n        switch (field.subType) {\n            case Array.SubType.ArrayBuffer:\n                Object.defineProperty(object, field.name, {\n                    ...descriptor,\n                    set(buffer: ArrayBuffer | undefined) {\n                        descriptor.set!.call(object, buffer);\n                        setLengthBackingField(object, field, buffer?.byteLength ?? 0);\n                    },\n                });\n\n                delete object[field.options.lengthField];\n                Object.defineProperty(object, field.options.lengthField, {\n                    configurable: true,\n                    enumerable: true,\n                    get() {\n                        return getLengthBackingField(object, field);\n                    }\n                });\n                break;\n            case Array.SubType.String:\n                Object.defineProperty(object, field.name, {\n                    ...descriptor,\n                    set(string: string | undefined) {\n                        descriptor.set!.call(object, string);\n                        if (string) {\n                            setLengthBackingField(object, field, undefined);\n                        } else {\n                            setLengthBackingField(object, field, 0);\n                        }\n                    },\n                });\n\n                delete object[field.options.lengthField];\n                Object.defineProperty(object, field.options.lengthField, {\n                    configurable: true,\n                    enumerable: true,\n                    get() {\n                        let value = getLengthBackingField(object, field);\n                        if (value === undefined) {\n                            const backingField = Array.getBackingField(object, field.name);\n                            const buffer = context.encodeUtf8(backingField.string!);\n                            backingField.buffer = buffer;\n\n                            value = buffer.byteLength;\n                            setLengthBackingField(object, field, value);\n                        }\n                        return value;\n                    }\n                });\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n        Array.setBackingField(object, field.name, value);\n        if (value.buffer) {\n            setLengthBackingField(object, field, value.buffer.byteLength);\n        }\n    }\n}\n\nexport interface VariableLengthArray<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TInit = object,\n    TLengthField extends VariableLengthArray.KeyOfType<TInit, number> = any,\n    TEmptyBehavior extends VariableLengthArray.EmptyBehavior = VariableLengthArray.EmptyBehavior,\n    TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>,\n    TOptions extends VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior> = VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>\n    > extends Array<\n    TName,\n    TType,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType> & Record<TLengthField, never>,\n    TOptions\n    > {\n    type: FieldType.VariableLengthArray;\n\n    options: TOptions;\n}\n\nregisterFieldTypeDefinition(undefined as unknown as VariableLengthArray, {\n    type: FieldType.VariableLengthArray,\n\n    async deserialize({ context, field, object }) {\n        const value: Array.BackingField = {};\n        const length = object[field.options.lengthField];\n        if (length === 0) {\n            if (field.options.emptyBehavior === VariableLengthArray.EmptyBehavior.Empty) {\n                value.buffer = new ArrayBuffer(0);\n                value.string = '';\n            }\n\n            VariableLengthArray.initialize(object, field, value, context);\n            return;\n        }\n\n        value.buffer = await context.read(length);\n        switch (field.subType) {\n            case Array.SubType.ArrayBuffer:\n                break;\n            case Array.SubType.String:\n                value.string = context.decodeUtf8(value.buffer);\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n        VariableLengthArray.initialize(object, field, value, context);\n    },\n\n    getSize() { return 0; },\n\n    getDynamicSize({ field, object }) {\n        return object[field.options.lengthField];\n    },\n\n    initialize({ context, field, init, object }) {\n        VariableLengthArray.initialize(object, field, {}, context);\n        object[field.name] = init[field.name];\n    },\n\n    serialize({ dataView, field, object, offset }) {\n        const backingField = Array.getBackingField(object, field.name);\n        new Uint8Array(dataView.buffer).set(\n            new Uint8Array(backingField.buffer!),\n            offset\n        );\n    },\n});\n","import { Array } from './array';\nimport { registerFieldTypeDefinition } from './definition';\nimport { FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace FixedLengthArray {\n    export interface Options extends FieldDescriptorBaseOptions {\n        length: number;\n    }\n}\n\nexport interface FixedLengthArray<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TTypeScriptType = Array.TypeScriptType<TType>,\n    TOptions extends FixedLengthArray.Options = FixedLengthArray.Options\n    > extends Array<\n    TName,\n    TType,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType>,\n    TOptions\n    > {\n    type: FieldType.FixedLengthArray;\n\n    options: TOptions;\n};\n\nregisterFieldTypeDefinition(undefined as unknown as FixedLengthArray, {\n    type: FieldType.FixedLengthArray,\n\n    async deserialize({ context, field, object, }) {\n        const value: Array.BackingField = {\n            buffer: await context.read(field.options.length),\n        };\n\n        switch (field.subType) {\n            case Array.SubType.ArrayBuffer:\n                break;\n            case Array.SubType.String:\n                value.string = context.decodeUtf8(value.buffer!);\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n\n        Array.initialize(object, field, value);\n    },\n\n    getSize({ field }) {\n        return field.options.length;\n    },\n\n    initialize({ field, init, object }) {\n        Array.initialize(object, field, {});\n        object[field.name] = init[field.name];\n    },\n\n    serialize({ context, dataView, field, object, offset }) {\n        const backingField = Array.getBackingField(object, field.name);\n        backingField.buffer ??=\n            context.encodeUtf8(backingField.string!);\n\n        new Uint8Array(dataView.buffer).set(\n            new Uint8Array(backingField.buffer),\n            offset\n        );\n    }\n});\n","import { Array, BackingField, FieldDescriptorBase, FieldDescriptorBaseOptions, FieldType, FixedLengthArray, getFieldTypeDefinition, Number, StructDeserializationContext, StructOptions, StructSerializationContext, VariableLengthArray } from './field';\nimport { Evaluate, Identity } from './utils';\n\nexport type StructValueType<T extends Struct<unknown, unknown, unknown>> =\n    T extends { deserialize(reader: StructDeserializationContext): Promise<infer R>; } ? R : never;\n\nexport type StructInitType<T extends Struct<unknown, unknown, unknown>> =\n    T extends { create(value: infer R, ...args: any): any; } ? R : never;\n\nexport const StructDefaultOptions: Readonly<StructOptions> = {\n    littleEndian: false,\n};\n\ninterface AddArrayFieldDescriptor<TObject, TAfterParsed, TInit> {\n    <\n        TName extends string,\n        TType extends Array.SubType,\n        TTypeScriptType = Array.TypeScriptType<TType>\n        >(\n        name: TName,\n        type: TType,\n        options: FixedLengthArray.Options,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TObject,\n        TAfterParsed,\n        TInit,\n        FixedLengthArray<\n            TName,\n            TType,\n            TTypeScriptType\n        >\n    >;\n\n    <\n        TName extends string,\n        TType extends Array.SubType,\n        TLengthField extends VariableLengthArray.KeyOfType<TInit, number>,\n        TEmptyBehavior extends VariableLengthArray.EmptyBehavior,\n        TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>\n        >(\n        name: TName,\n        type: TType,\n        options: VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TObject,\n        TAfterParsed,\n        TInit,\n        VariableLengthArray<\n            TName,\n            TType,\n            TInit,\n            TLengthField,\n            TEmptyBehavior,\n            TTypeScriptType\n        >\n    >;\n}\n\ninterface AddArraySubTypeFieldDescriptor<\n    TObject,\n    TAfterParsed,\n    TInit,\n    TType extends Array.SubType\n    > {\n    <\n        TName extends string,\n        TTypeScriptType = Array.TypeScriptType<TType>\n        >(\n        name: TName,\n        options: FixedLengthArray.Options,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TObject,\n        TAfterParsed,\n        TInit,\n        FixedLengthArray<\n            TName,\n            TType,\n            TTypeScriptType\n        >\n    >;\n\n    <\n        TName extends string,\n        TLengthField extends VariableLengthArray.KeyOfType<TInit, number>,\n        TEmptyBehavior extends VariableLengthArray.EmptyBehavior,\n        TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>\n        >(\n        name: TName,\n        options: VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>,\n        _typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TObject,\n        TAfterParsed,\n        TInit,\n        VariableLengthArray<\n            TName,\n            TType,\n            TInit,\n            TLengthField,\n            TEmptyBehavior,\n            TTypeScriptType\n        >\n    >;\n}\n\nexport type StructAfterParsed<TObject, TResult> =\n    (this: TObject, object: TObject) => TResult;\n\nexport type OmitNever<T> = Pick<T, { [K in keyof T]: [T[K]] extends [never] ? never : K }[keyof T]>;\n\ntype MergeStruct<TObject, TAfterParsed, TInit, TDescriptor extends FieldDescriptorBase> =\n    Identity<Struct<\n        Evaluate<TObject & Exclude<TDescriptor['resultObject'], undefined>>,\n        TAfterParsed,\n        Evaluate<OmitNever<TInit & Exclude<TDescriptor['initObject'], undefined>>>\n    >>;\n\nexport type StructExtraResult<TObject, TExtra> =\n    Evaluate<Omit<TObject, keyof TExtra> & TExtra>;\n\nexport default class Struct<TObject = {}, TAfterParsed = undefined, TInit = {}> {\n    public readonly options: Readonly<StructOptions>;\n\n    private _size = 0;\n    public get size() { return this._size; }\n\n    private fields: FieldDescriptorBase[] = [];\n\n    private _extra: PropertyDescriptorMap = {};\n\n    private _afterParsed?: StructAfterParsed<any, any>;\n\n    public constructor(options: Partial<StructOptions> = StructDefaultOptions) {\n        this.options = { ...StructDefaultOptions, ...options };\n    }\n\n    private clone(): Struct<any, any, any> {\n        const result = new Struct<any, any, any>(this.options);\n        result.fields = this.fields.slice();\n        result._size = this._size;\n        result._extra = this._extra;\n        result._afterParsed = this._afterParsed;\n        return result;\n    }\n\n    public field<TDescriptor extends FieldDescriptorBase>(\n        field: TDescriptor,\n    ): MergeStruct<TObject, TAfterParsed, TInit, TDescriptor> {\n        const result = this.clone();\n        result.fields.push(field);\n\n        const definition = getFieldTypeDefinition(field.type);\n        const size = definition.getSize({ field, options: this.options });\n        result._size += size;\n\n        return result;\n    }\n\n    private number<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType\n    >(\n        name: TName,\n        type: Number.SubType,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: () => TTypeScriptType,\n    ) {\n        return this.field<Number<TName, TTypeScriptType>>({\n            type: FieldType.Number,\n            name,\n            subType: type,\n            options,\n        });\n    }\n\n    public int32<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: () => TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Int32,\n            options,\n            _typescriptType\n        );\n    }\n\n    public uint32<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: () => TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Uint32,\n            options,\n            _typescriptType\n        );\n    }\n\n    private array: AddArrayFieldDescriptor<TObject, TAfterParsed, TInit> = (\n        name: string,\n        type: Array.SubType,\n        options: FixedLengthArray.Options | VariableLengthArray.Options\n    ): Struct<any, any, any> => {\n        const result = this.clone();\n        if ('length' in options) {\n            this.field<FixedLengthArray>({\n                type: FieldType.FixedLengthArray,\n                name,\n                subType: type,\n                options: options,\n            });\n        } else {\n            this.field<VariableLengthArray>({\n                type: FieldType.VariableLengthArray,\n                name,\n                subType: type,\n                options: options,\n            });\n        }\n        return result;\n    };\n\n    public arrayBuffer: AddArraySubTypeFieldDescriptor<\n        TObject,\n        TAfterParsed,\n        TInit,\n        Array.SubType.ArrayBuffer\n    > = <TName extends string>(\n        name: TName,\n        options: any\n    ) => {\n            return this.array(name, Array.SubType.ArrayBuffer, options);\n        };\n\n    public string: AddArraySubTypeFieldDescriptor<\n        TObject,\n        TAfterParsed,\n        TInit,\n        Array.SubType.String\n    > = <TName extends string>(\n        name: TName,\n        options: any\n    ) => {\n            return this.array(name, Array.SubType.String, options);\n        };\n\n    public extra<TExtra extends object>(\n        value: TExtra & ThisType<StructExtraResult<TObject, TExtra>>\n    ): Struct<\n        StructExtraResult<TObject, TExtra>,\n        TAfterParsed,\n        Evaluate<Omit<TInit, keyof TExtra>>\n    > {\n        const result = this.clone();\n        result._extra = { ...result._extra, ...Object.getOwnPropertyDescriptors(value) };\n        return result;\n    }\n\n    public afterParsed(\n        callback: StructAfterParsed<TObject, never>\n    ): Struct<TObject, never, TInit>;\n    public afterParsed(\n        callback?: StructAfterParsed<TObject, void>\n    ): Struct<TObject, undefined, TInit>;\n    public afterParsed<TResult>(\n        callback?: StructAfterParsed<TObject, TResult>\n    ): Struct<TObject, TResult, TInit>;\n    public afterParsed(\n        callback?: StructAfterParsed<TObject, any>\n    ): Struct<any, any, any> {\n        const result = this.clone();\n        result._afterParsed = callback;\n        return result;\n    }\n\n    public create(init: TInit, context: StructSerializationContext): TObject {\n        const object: any = {\n            [BackingField]: {},\n        };\n\n        for (const field of this.fields) {\n            const type = getFieldTypeDefinition(field.type);\n            if (type.initialize) {\n                type.initialize({\n                    context,\n                    field,\n                    init,\n                    object,\n                    options: this.options,\n                });\n            } else {\n                object[field.name] = (init as any)[field.name];\n            }\n        }\n\n        Object.defineProperties(object, this._extra);\n        return object;\n    }\n\n    public async deserialize(\n        context: StructDeserializationContext\n    ): Promise<TAfterParsed extends undefined ? TObject : TAfterParsed> {\n        const object: any = {\n            [BackingField]: {},\n        };\n\n        for (const field of this.fields) {\n            await getFieldTypeDefinition(field.type).deserialize({\n                context,\n                field,\n                object,\n                options: this.options,\n            });\n        }\n\n        Object.defineProperties(object, this._extra);\n\n        if (this._afterParsed) {\n            const result = this._afterParsed.call(object, object);\n            if (result) {\n                return result;\n            }\n        }\n\n        return object;\n    }\n\n    public serialize(init: TInit, context: StructSerializationContext): ArrayBuffer {\n        const object = this.create(init, context) as any;\n\n        let size = this._size;\n        let fieldSize: number[] = [];\n        for (let i = 0; i < this.fields.length; i++) {\n            const field = this.fields[i];\n            const type = getFieldTypeDefinition(field.type);\n            if (type.getDynamicSize) {\n                fieldSize[i] = type.getDynamicSize({\n                    context,\n                    field,\n                    object,\n                    options: this.options,\n                });\n                size += fieldSize[i];\n            } else {\n                fieldSize[i] = type.getSize({ field, options: this.options });\n            }\n        }\n\n        const buffer = new ArrayBuffer(size);\n        const dataView = new DataView(buffer);\n        let offset = 0;\n        for (let i = 0; i < this.fields.length; i++) {\n            const field = this.fields[i];\n            const type = getFieldTypeDefinition(field.type);\n            type.serialize({\n                context,\n                dataView,\n                field,\n                object,\n                offset,\n                options: this.options,\n            });\n            offset += fieldSize[i];\n        }\n        return buffer;\n    }\n}\n","import { AutoDisposable } from '@yume-chan/event';\nimport { Struct, StructInitType, StructValueType } from '@yume-chan/struct';\nimport { AdbBufferedStream } from './buffered-stream';\nimport { AdbStream } from './stream';\nimport { AutoResetEvent } from './utils';\n\nexport enum AdbSyncRequestId {\n    List = 'LIST',\n    Send = 'SEND',\n    Stat = 'STAT',\n    Data = 'DATA',\n    Done = 'DONE',\n    Receive = 'RECV',\n}\n\nexport enum AdbSyncResponseId {\n    Entry = 'DENT',\n    Stat = 'STAT',\n    Done = 'DONE',\n    Data = 'DATA',\n    Ok = 'OKAY',\n    Fail = 'FAIL',\n}\n\nexport type AdbSyncNumberRequestId =\n    AdbSyncRequestId.Done;\n\nexport type AdbSyncStringRequestId =\n    AdbSyncRequestId.List |\n    AdbSyncRequestId.Send |\n    AdbSyncRequestId.Stat |\n    AdbSyncRequestId.Receive;\n\nconst AdbSyncStringRequest =\n    new Struct({ littleEndian: true })\n        .string('id', { length: 4 })\n        .uint32('valueLength')\n        .string('value', { lengthField: 'valueLength' });\n\n// https://github.com/python/cpython/blob/4e581d64b8aff3e2eda99b12f080c877bb78dfca/Lib/stat.py#L36\nexport enum LinuxFileType {\n    Directory = 0o04,\n    File = 0o10,\n    Link = 0o12,\n}\n\nexport const AdbSyncStatResponse =\n    new Struct({ littleEndian: true })\n        .int32('mode')\n        .int32('size')\n        .int32('lastModifiedTime')\n        .extra({\n            id: AdbSyncResponseId.Stat as const,\n            get type() { return this.mode >> 12 as LinuxFileType; },\n            get permission() { return this.mode & 0b00001111_11111111; },\n        })\n        .afterParsed((object) => {\n            if (object.mode === 0 &&\n                object.size === 0 &&\n                object.lastModifiedTime === 0\n            ) {\n                throw new Error('lstat failed');\n            }\n        });\n\nexport const AdbSyncEntryResponse =\n    AdbSyncStatResponse\n        .afterParsed()\n        .uint32('nameLength')\n        .string('name', { lengthField: 'nameLength' })\n        .extra({ id: AdbSyncResponseId.Entry as const });\n\nexport type AdbSyncEntryResponse = StructValueType<typeof AdbSyncEntryResponse>;\n\nexport const AdbSyncDataResponse =\n    new Struct({ littleEndian: true })\n        .uint32('dataLength')\n        .arrayBuffer('data', { lengthField: 'dataLength' })\n        .extra({ id: AdbSyncResponseId.Data } as const);\n\nexport class AdbSyncDoneResponse {\n    public static readonly instance = new AdbSyncDoneResponse();\n\n    public readonly id = AdbSyncResponseId.Done;\n}\n\nexport const AdbSyncFailResponse =\n    new Struct({ littleEndian: true })\n        .uint32('messageLength')\n        .string('message', { lengthField: 'messageLength' })\n        .afterParsed(object => {\n            throw new Error(object.message);\n        });\n\nasync function readResponse(stream: AdbBufferedStream, size: number) {\n    // DONE responses' size are always same as the request's normal response.\n    // For example DONE responses for LIST requests are 16 bytes (same as DENT responses),\n    // but DONE responses for STAT requests are 12 bytes (same as STAT responses)\n    // So we need to know responses' size in advance.\n    const id = stream.backend.decodeUtf8(await stream.read(4)) as AdbSyncResponseId;\n    const structReader = {\n        read: stream.read.bind(stream),\n        decodeUtf8: stream.backend.decodeUtf8.bind(stream.backend),\n        encodeUtf8: stream.backend.encodeUtf8.bind(stream.backend),\n    };\n    switch (id) {\n        case AdbSyncResponseId.Entry:\n            return AdbSyncEntryResponse.deserialize(structReader);\n        case AdbSyncResponseId.Stat:\n            return AdbSyncStatResponse.deserialize(structReader);\n        case AdbSyncResponseId.Data:\n            return AdbSyncDataResponse.deserialize(structReader);\n        case AdbSyncResponseId.Done:\n            await stream.read(size);\n            return AdbSyncDoneResponse.instance;\n        case AdbSyncResponseId.Fail:\n            return AdbSyncFailResponse.deserialize(structReader);\n        default:\n            throw new Error('Unexpected response id');\n    }\n}\n\nexport class AdbSync extends AutoDisposable {\n    private stream: AdbBufferedStream;\n\n    private sendLock = this.addDisposable(new AutoResetEvent());\n\n    public constructor(stream: AdbStream) {\n        super();\n\n        this.stream = new AdbBufferedStream(stream);\n    }\n\n    public async lstat(path: string) {\n        await this.sendLock.wait();\n\n        try {\n            await this.write(AdbSyncStringRequest, { id: AdbSyncRequestId.Stat, value: path });\n            const response = await readResponse(this.stream, AdbSyncStatResponse.size);\n            if (response.id !== AdbSyncResponseId.Stat) {\n                throw new Error('Unexpected response id');\n            }\n            return response;\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async *iterate(path: string) {\n        await this.sendLock.wait();\n\n        try {\n            await this.write(AdbSyncStringRequest, { id: AdbSyncRequestId.List, value: path });\n\n            while (true) {\n                const response = await readResponse(this.stream, AdbSyncEntryResponse.size);\n                switch (response.id) {\n                    case AdbSyncResponseId.Entry:\n                        yield response;\n                        break;\n                    case AdbSyncResponseId.Done:\n                        return;\n                    default:\n                        throw new Error('Unexpected response id');\n                }\n            }\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async list(path: string) {\n        const results: AdbSyncEntryResponse[] = [];\n        for await (const entry of this.iterate(path)) {\n            results.push(entry);\n        }\n        return results;\n    }\n\n    public async *receive(path: string): AsyncGenerator<ArrayBuffer, void, void> {\n        await this.sendLock.wait();\n\n        try {\n            await this.write(AdbSyncStringRequest, { id: AdbSyncRequestId.Receive, value: path });\n            while (true) {\n                const response = await readResponse(this.stream, AdbSyncDataResponse.size);\n                switch (response.id) {\n                    case AdbSyncResponseId.Data:\n                        yield response.data!;\n                        break;\n                    case AdbSyncResponseId.Done:\n                        return;\n                    default:\n                        throw new Error('Unexpected response id');\n                }\n            }\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public dispose() {\n        super.dispose();\n        this.stream.close();\n    }\n\n    private write<T extends Struct<unknown, unknown>>(type: T, value: StructInitType<T>) {\n        return this.stream.write(type.serialize(value, this.stream.backend));\n    }\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { DisposableList } from '@yume-chan/event';\nimport { AdbAuthenticationHandler, AdbDefaultAuthenticators } from './auth';\nimport { AdbBackend } from './backend';\nimport { AdbBufferedStream } from './buffered-stream';\nimport { AdbCommand } from './packet';\nimport { AdbPacketDispatcher, AdbStream } from './stream';\nimport { AdbSync } from './sync';\n\nexport enum AdbPropKey {\n    Product = 'ro.product.name',\n    Model = 'ro.product.model',\n    Device = 'ro.product.device',\n    Features = 'features',\n}\n\nexport class Adb {\n    private backend: AdbBackend;\n    public get onDisconnected() { return this.backend.onDisconnected; }\n\n    private _connected = false;\n    public get connected() { return this._connected; }\n\n    public get name() { return this.backend.name; }\n\n    private _product: string | undefined;\n    public get product() { return this._product; }\n\n    private _model: string | undefined;\n    public get model() { return this._model; }\n\n    private _device: string | undefined;\n    public get device() { return this._device; }\n\n    private _features: string[] | undefined;\n    public get features() { return this._features; }\n\n    private packetDispatcher: AdbPacketDispatcher;\n\n    public constructor(backend: AdbBackend) {\n        this.backend = backend;\n        this.packetDispatcher = new AdbPacketDispatcher(backend);\n\n        backend.onDisconnected(this.dispose, this);\n    }\n\n    public async connect(authenticators = AdbDefaultAuthenticators) {\n        const version = 0x01000001;\n\n        const features = [\n            'shell_v2',\n            'cmd',\n            'stat_v2',\n            'ls_v2',\n            'fixed_push_mkdir',\n            'apex',\n            'abb',\n            'fixed_push_symlink_timestamp',\n            'abb_exec',\n            'remount_shell',\n            'track_app',\n            'sendrecv_v2',\n            'sendrecv_v2_brotli',\n            'sendrecv_v2_lz4',\n            'sendrecv_v2_zstd',\n            'sendrecv_v2_dry_run_send',\n        ].join(',');\n\n        const resolver = new PromiseResolver<void>();\n        const authHandler = new AdbAuthenticationHandler(authenticators, this.backend);\n        const disposableList = new DisposableList();\n        disposableList.add(this.packetDispatcher.onPacket(async (e) => {\n            e.handled = true;\n\n            const { packet } = e;\n            try {\n                switch (packet.command) {\n                    case AdbCommand.Connect:\n                        if (packet.arg0 !== version) {\n                            throw new Error('Version mismatch');\n                        }\n\n                        this.parseBanner(packet.payloadString!);\n                        resolver.resolve();\n                        break;\n                    case AdbCommand.Auth:\n                        const authPacket = await authHandler.tryNextAuth(e.packet);\n                        await this.packetDispatcher.sendPacket(authPacket);\n                        break;\n                    case AdbCommand.Close:\n                        // Last connection was interrupted\n                        // Ignore this packet, device will recover\n                        break;\n                    default:\n                        throw new Error('Device not in correct state. Reconnect your device and try again');\n                }\n            } catch (e) {\n                resolver.reject(e);\n            }\n        }));\n\n        disposableList.add(this.packetDispatcher.onError(e => {\n            resolver.reject(e);\n        }));\n\n        await this.packetDispatcher.sendPacket(\n            AdbCommand.Connect,\n            version,\n            0x100000,\n            `host::features=${features}`\n        );\n\n        try {\n            await resolver.promise;\n            this._connected = true;\n        } finally {\n            disposableList.dispose();\n        }\n    }\n\n    private parseBanner(banner: string) {\n        const pieces = banner.split('::');\n        if (pieces.length > 1) {\n            const props = pieces[1];\n            for (const prop of props.split(';')) {\n                if (!prop) {\n                    continue;\n                }\n\n                const keyValue = prop.split('=');\n                if (keyValue.length !== 2) {\n                    continue;\n                }\n\n                const [key, value] = keyValue;\n                switch (key) {\n                    case AdbPropKey.Product:\n                        this._product = value;\n                        break;\n                    case AdbPropKey.Model:\n                        this._model = value;\n                        break;\n                    case AdbPropKey.Device:\n                        this._device = value;\n                        break;\n                    case AdbPropKey.Features:\n                        this._features = value.split(',');\n                        break;\n                }\n            }\n        }\n    }\n\n    public shell(command: string, ...args: string[]): Promise<string>;\n    public shell(): Promise<AdbStream>;\n    public shell(command?: string, ...args: string[]): Promise<AdbStream | string> {\n        // TODO: use shell protocol\n        if (!command) {\n            return this.createStream('shell:');\n        } else {\n            return this.createStreamAndReadAll(`shell:${command} ${args.join(' ')}`);\n        }\n    }\n\n    public async getDaemonTcpAddresses(): Promise<string[]> {\n        const propAddr = (await this.shell('getprop', 'service.adb.listen_addrs')).trim();\n        if (propAddr) {\n            return propAddr.split(',');\n        }\n\n        let port = (await this.shell('getprop', 'service.adb.tcp.port')).trim();\n        if (port) {\n            return [`0.0.0.0:${port}`];\n        }\n\n        port = (await this.shell('getprop', 'persist.adb.tcp.port')).trim();\n        if (port) {\n            return [`0.0.0.0:${port}`];\n        }\n\n        return [];\n    }\n\n    public setDaemonTcpPort(port = 5555): Promise<string> {\n        return this.createStreamAndReadAll(`tcpip:${port}`);\n    }\n\n    public disableDaemonTcp(): Promise<string> {\n        return this.createStreamAndReadAll('usb:');\n    }\n\n    public async sync(): Promise<AdbSync> {\n        const stream = await this.createStream('sync:');\n        return new AdbSync(stream);\n    }\n\n    public async createStream(service: string): Promise<AdbStream> {\n        return this.packetDispatcher.createStream(service);\n    }\n\n    public async createStreamAndReadAll(service: string): Promise<string> {\n        const stream = await this.createStream(service);\n        const buffered = new AdbBufferedStream(stream);\n        return buffered.readAll();\n    }\n\n    public async dispose() {\n        this.packetDispatcher.dispose();\n        await this.backend.dispose();\n    }\n}\n","import { AdbBackend, decodeBase64, encodeBase64 } from '@yume-chan/adb';\nimport { EventEmitter } from '@yume-chan/event';\n\nexport const WebUsbDeviceFilter: USBDeviceFilter = {\n    classCode: 0xFF,\n    subclassCode: 0x42,\n    protocolCode: 1,\n};\n\nconst PrivateKeyStorageKey = 'private-key';\n\nconst Utf8Encoder = new TextEncoder();\nconst Utf8Decoder = new TextDecoder();\n\nexport function encodeUtf8(input: string): ArrayBuffer {\n    return Utf8Encoder.encode(input);\n}\n\nexport function decodeUtf8(buffer: ArrayBuffer): string {\n    return Utf8Decoder.decode(buffer);\n}\n\nexport default class AdbWebBackend implements AdbBackend {\n    public static async fromDevice(device: USBDevice): Promise<AdbWebBackend> {\n        await device.open();\n\n        for (const configuration of device.configurations) {\n            for (const interface_ of configuration.interfaces) {\n                for (const alternate of interface_.alternates) {\n                    if (alternate.interfaceSubclass === WebUsbDeviceFilter.subclassCode &&\n                        alternate.interfaceClass === WebUsbDeviceFilter.classCode &&\n                        alternate.interfaceSubclass === WebUsbDeviceFilter.subclassCode) {\n                        if (device.configuration?.configurationValue !== configuration.configurationValue) {\n                            await device.selectConfiguration(configuration.configurationValue);\n                        }\n\n                        if (!interface_.claimed) {\n                            await device.claimInterface(interface_.interfaceNumber);\n                        }\n\n                        if (interface_.alternate.alternateSetting !== alternate.alternateSetting) {\n                            await device.selectAlternateInterface(interface_.interfaceNumber, alternate.alternateSetting);\n                        }\n\n                        let inEndpointNumber: number | undefined;\n                        let outEndpointNumber: number | undefined;\n\n                        for (const endpoint of alternate.endpoints) {\n                            switch (endpoint.direction) {\n                                case 'in':\n                                    inEndpointNumber = endpoint.endpointNumber;\n                                    if (outEndpointNumber !== undefined) {\n                                        return new AdbWebBackend(device, inEndpointNumber, outEndpointNumber);\n                                    }\n                                    break;\n                                case 'out':\n                                    outEndpointNumber = endpoint.endpointNumber;\n                                    if (inEndpointNumber !== undefined) {\n                                        return new AdbWebBackend(device, inEndpointNumber, outEndpointNumber);\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        throw new Error('Unknown error');\n    }\n\n    public static async pickDevice(): Promise<AdbWebBackend | undefined> {\n        try {\n            const device = await navigator.usb.requestDevice({ filters: [WebUsbDeviceFilter] });\n            return AdbWebBackend.fromDevice(device);\n        } catch (e) {\n            switch (e.name) {\n                case 'NotFoundError':\n                    return undefined;\n                default:\n                    throw e;\n            }\n        }\n    }\n\n    private _device: USBDevice;\n\n    public get name() { return this._device.productName; }\n\n    private readonly onDisconnectedEvent = new EventEmitter<void>();\n    public readonly onDisconnected = this.onDisconnectedEvent.event;\n\n    private _inEndpointNumber!: number;\n    private _outEndpointNumber!: number;\n\n    private constructor(device: USBDevice, inEndPointNumber: number, outEndPointNumber: number) {\n        this._device = device;\n        this._inEndpointNumber = inEndPointNumber;\n        this._outEndpointNumber = outEndPointNumber;\n    }\n\n    public *iterateKeys(): Generator<ArrayBuffer, void, void> {\n        const privateKey = window.localStorage.getItem(PrivateKeyStorageKey);\n        if (privateKey) {\n            yield decodeBase64(privateKey);\n        }\n    }\n\n    public async generateKey(): Promise<ArrayBuffer> {\n        const { privateKey: cryptoKey } = await crypto.subtle.generateKey(\n            {\n                name: 'RSASSA-PKCS1-v1_5',\n                modulusLength: 2048,\n                // 65537\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                hash: 'SHA-1',\n            },\n            true,\n            ['sign', 'verify']\n        );\n\n        const privateKey = await crypto.subtle.exportKey('pkcs8', cryptoKey);\n        window.localStorage.setItem(PrivateKeyStorageKey, encodeBase64(privateKey));\n        return privateKey;\n    }\n\n    public encodeUtf8(input: string): ArrayBuffer {\n        return encodeUtf8(input);\n    }\n\n    public decodeUtf8(buffer: ArrayBuffer): string {\n        return decodeUtf8(buffer);\n    }\n\n    public async write(buffer: ArrayBuffer): Promise<void> {\n        await this._device.transferOut(this._outEndpointNumber, buffer);\n    }\n\n    public async read(length: number): Promise<ArrayBuffer> {\n        try {\n            const result = await this._device.transferIn(this._inEndpointNumber, length);\n\n            if (result.status === 'stall') {\n                await this._device.clearHalt('in', this._inEndpointNumber);\n            }\n\n            const { buffer } = result.data!;\n            return buffer;\n        } catch (e) {\n            if (e instanceof Error && e.name === 'NotFoundError') {\n                this.onDisconnectedEvent.fire();\n            }\n\n            throw e;\n        }\n    }\n\n    public async dispose() {\n        this.onDisconnectedEvent.dispose();\n        await this._device.close();\n    }\n}\n","import { memo, NamedExoticComponent } from 'react';\n\nexport default function withDisplayName<P extends object>(\n    name: string,\n    Component: React.FunctionComponent<P>\n): NamedExoticComponent<P> {\n    Component.displayName = name;\n    return memo(Component);\n}\n","import { Dialog, DialogFooter, DialogType, PrimaryButton } from '@fluentui/react';\nimport { useBoolean } from '@uifabric/react-hooks';\nimport React, { PropsWithChildren, useMemo, useState } from 'react';\nimport withDisplayName from './with-display-name';\n\nexport interface ErrorDialogContext {\n    show(message: string): void;\n}\n\nexport const ErrorDialogContext = React.createContext<ErrorDialogContext>({\n    show() { }\n});\n\nexport default withDisplayName('ErrorDialogProvider', (props: PropsWithChildren<{}>) => {\n    const [errorDialogVisible, { setTrue: showErrorDialog, setFalse: hideErrorDialog }] = useBoolean(false);\n    const [errorMessage, setErrorMessage] = useState<string | undefined>();\n\n    const context = useMemo((): ErrorDialogContext => ({\n        show(message) {\n            setErrorMessage(message);\n            showErrorDialog();\n        }\n    }), []);\n\n    return (\n        <ErrorDialogContext.Provider value={context}>\n            {props.children}\n\n            <Dialog\n                hidden={!errorDialogVisible}\n                dialogContentProps={{\n                    type: DialogType.normal,\n                    title: 'Error',\n                    subText: errorMessage,\n                }}\n            >\n                <DialogFooter>\n                    <PrimaryButton text=\"OK\" onClick={hideErrorDialog} />\n                </DialogFooter>\n            </Dialog>\n        </ErrorDialogContext.Provider>\n    );\n});\n","import { DefaultButton, Dialog, PrimaryButton, ProgressIndicator, Stack, StackItem } from '@fluentui/react';\nimport { Adb } from '@yume-chan/adb';\nimport AdbWebBackend from '@yume-chan/adb-backend-web';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { ErrorDialogContext } from './error-dialog';\nimport withDisplayName from './with-display-name';\n\ninterface ConnectProps {\n    device: Adb | undefined;\n\n    onDeviceChange: (device: Adb | undefined) => void;\n}\n\nexport default withDisplayName('Connect', ({\n    device,\n    onDeviceChange,\n}: ConnectProps): JSX.Element | null => {\n    const { show: showErrorDialog } = useContext(ErrorDialogContext);\n\n    const [connecting, setConnecting] = useState(false);\n    const connect = useCallback(async () => {\n        try {\n            const backend = await AdbWebBackend.pickDevice();\n            if (backend) {\n                const device = new Adb(backend);\n                try {\n                    setConnecting(true);\n                    await device.connect();\n                    onDeviceChange(device);\n                } catch (e) {\n                    device.dispose();\n                    throw e;\n                }\n            }\n        } catch (e) {\n            showErrorDialog(e.message);\n        } finally {\n            setConnecting(false);\n        }\n    }, [onDeviceChange]);\n    const disconnect = useCallback(async () => {\n        try {\n            await device!.dispose();\n            onDeviceChange(undefined);\n        } catch (e) {\n            showErrorDialog(e.message);\n        }\n    }, [device]);\n    useEffect(() => {\n        return device?.onDisconnected(() => {\n            onDeviceChange(undefined);\n        });\n    }, [device, onDeviceChange]);\n\n    return (\n        <>\n            <Stack horizontal verticalAlign=\"center\" tokens={{ childrenGap: 8, padding: 8 }}>\n                {!device && <StackItem>\n                    <PrimaryButton text=\"Connect\" onClick={connect} />\n                </StackItem>}\n                {device && <StackItem>\n                    <DefaultButton text=\"Disconnect\" onClick={disconnect} />\n                </StackItem>}\n                <StackItem>\n                    {device && `Connected to ${device.name}`}\n                </StackItem>\n            </Stack>\n\n            <Dialog\n                hidden={!connecting}\n                dialogContentProps={{\n                    title: 'Connecting',\n                    subText: 'Please authorize the connection on your device'\n                }}\n            >\n                <ProgressIndicator />\n            </Dialog>\n        </>\n    );\n});\n","import { AnimationClassNames, concatStyleSets, IStackProps, Stack } from '@fluentui/react';\nimport React, { useMemo, useRef } from 'react';\nimport { match, matchPath, RedirectProps, RouteProps, useLocation, useRouteMatch } from 'react-router-dom';\nimport withDisplayName from './with-display-name';\n\nexport const DefaultStackProps: IStackProps = {\n    tokens: { childrenGap: 8, padding: 8 },\n    verticalFill: true,\n};\n\nexport const RouteStackProps: IStackProps = {\n    ...DefaultStackProps,\n    className: AnimationClassNames.slideUpIn10,\n    styles: { root: { overflow: 'auto' } },\n};\n\nexport const CacheRoute = withDisplayName('CacheRoute', (props: RouteProps) => {\n    const match = useRouteMatch(props);\n\n    const everMatched = useRef(!!match);\n    if (!everMatched.current && match) {\n        everMatched.current = true;\n    }\n\n    const stackProps = useMemo((): IStackProps => ({\n        ...RouteStackProps,\n        styles: concatStyleSets(\n            RouteStackProps.styles,\n            { root: { display: match ? 'flex' : 'none' } }\n        ),\n    }), [!!match]);\n\n    if (!everMatched.current) {\n        return null;\n    }\n\n    return (\n        <Stack {...stackProps} >\n            {props.children}\n        </Stack>\n    );\n});\n\nexport interface CacheSwitchProps {\n    children: React.ReactNodeArray;\n}\n\nexport const CacheSwitch = withDisplayName('CacheSwitch', (props: CacheSwitchProps) => {\n    const location = useLocation();\n    let contextMatch = useRouteMatch();\n\n    let element: React.ReactElement | undefined;\n    let computedMatch: match | null | undefined;\n    let cached: React.ReactElement[] = [];\n    React.Children.forEach(props.children, child => {\n        if (React.isValidElement<RouteProps & RedirectProps>(child)) {\n            // Always render all cached routes\n            const isCacheRoute = child.type === CacheRoute;\n            if (isCacheRoute) {\n                cached.push(child);\n            }\n\n            // If we already found the matched route,\n            // Don't care about others\n            if (computedMatch) {\n                return;\n            }\n\n            const path = child.props.path ?? child.props.from;\n            const match = path\n                ? matchPath(location.pathname, { ...child.props, path })\n                : contextMatch;\n\n            if (match) {\n                computedMatch = match;\n\n                if (isCacheRoute) {\n                    // Don't render a CacheRoute twice\n                    element = undefined;\n                } else {\n                    element = child;\n                }\n            }\n        }\n    });\n\n    return (\n        <>\n            {cached}\n            {element ? React.cloneElement(element, { location, computedMatch }) : null}\n        </>\n    );\n});\n","import { Breadcrumb, concatStyleSets, ContextualMenu, DetailsListLayoutMode, DirectionalHint, IBreadcrumbItem, IColumn, Icon, IContextualMenuItem, IDetailsHeaderProps, IDetailsList, IRenderFunction, Layer, MarqueeSelection, mergeStyleSets, Overlay, Selection, ShimmeredDetailsList, StackItem } from '@fluentui/react';\nimport { FileIconType, getFileTypeIconProps, initializeFileTypeIcons } from '@uifabric/file-type-icons';\nimport { useConst } from '@uifabric/react-hooks';\nimport { AdbSyncEntryResponse, LinuxFileType } from '@yume-chan/adb';\nimport { encodeUtf8 } from '@yume-chan/adb-backend-web';\nimport path from 'path';\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport StreamSaver from 'streamsaver';\nimport { ErrorDialogContext } from '../error-dialog';\nimport withDisplayName from '../with-display-name';\nimport { RouteProps } from './type';\n\ninitializeFileTypeIcons();\nStreamSaver.mitm = 'streamsaver/mitm.html';\n\ninterface ListItem extends AdbSyncEntryResponse {\n    key: string;\n}\n\nfunction toListItem(item: AdbSyncEntryResponse): ListItem {\n    return { ...item, key: item.name! };\n}\n\nconst classNames = mergeStyleSets({\n    name: {\n        cursor: 'pointer',\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    },\n});\n\nconst units = [' B', ' KB', ' MB', ' GB'];\nfunction formatSize(value: number): string {\n    let index = 0;\n    while (index < units.length && value > 1024) {\n        index += 1;\n        value /= 1024;\n    }\n    return value.toLocaleString(undefined, { maximumFractionDigits: 2 }) + units[index];\n}\n\nfunction extensionName(fileName: string): string {\n    const index = fileName.lastIndexOf('.');\n    if (index === -1) {\n        return '';\n    } else {\n        return fileName.slice(index);\n    }\n}\n\nconst renderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (props?, defaultRender?) => {\n    if (!props || !defaultRender) {\n        return null;\n    }\n\n    return defaultRender({\n        ...props,\n        styles: concatStyleSets(props.styles, { root: { paddingTop: 0 } })\n    });\n};\n\nfunction delay(time: number): Promise<void> {\n    return new Promise(resolve => {\n        setTimeout(resolve, time);\n    });\n}\n\nfunction createReadableStreamFromBufferIterator(\n    iterator: AsyncIterator<ArrayBuffer>\n): ReadableStream<Uint8Array> {\n    return new ReadableStream<Uint8Array>({\n        async pull(controller) {\n            const { desiredSize } = controller;\n            if (!desiredSize || desiredSize < 0) {\n                return;\n            }\n\n            let written = 0;\n            while (written < desiredSize) {\n                const result = await iterator.next();\n                if (result.done) {\n                    controller.close();\n                    return;\n                }\n\n                controller.enqueue(new Uint8Array(result.value));\n                written += result.value.byteLength;\n            }\n        },\n    });\n}\n\nexport default withDisplayName('FileManager', ({\n    device,\n}: RouteProps): JSX.Element | null => {\n    const { show: showErrorDialog } = useContext(ErrorDialogContext);\n\n    const [currentPath, setCurrentPath] = useState('/');\n    const currentPathRef = useRef(currentPath);\n    currentPathRef.current = currentPath;\n\n    const breadcrumbItems = useMemo((): IBreadcrumbItem[] => {\n        let part = '';\n        const list: IBreadcrumbItem[] = currentPath.split('/').filter(Boolean).map(segment => {\n            part += '/' + segment;\n            return {\n                key: part,\n                text: segment,\n                onClick: (e, item) => {\n                    if (!item) {\n                        return;\n                    }\n                    setCurrentPath(item.key);\n                },\n            };\n        });\n        list.unshift({\n            key: '/',\n            text: '/',\n            onClick: () => setCurrentPath('/'),\n        });\n        list[list.length - 1].isCurrentItem = true;\n        list[list.length - 1].onClick = undefined;\n        return list;\n    }, [currentPath]);\n\n    const [items, setItems] = useState<ListItem[]>([]);\n    const [loading, setLoading] = useState(false);\n    const listRef = useRef<IDetailsList | null>(null);\n    const load = useCallback(async () => {\n        setItems([]);\n\n        if (!device) {\n            setCurrentPath('/');\n            return;\n        }\n\n        setLoading(true);\n        const sync = await device.sync();\n\n        const items: ListItem[] = [];\n        const linkItems: AdbSyncEntryResponse[] = [];\n        const intervalId = setInterval(() => {\n            setItems(items.slice());\n        }, 1000);\n\n        try {\n            let lastBreak = Date.now();\n\n            for await (const entry of sync.iterate(currentPath)) {\n                if (currentPath !== currentPathRef.current) {\n                    break;\n                }\n\n                if (entry.name === '.' || entry.name === '..') {\n                    continue;\n                }\n\n                if (entry.type === LinuxFileType.Link) {\n                    linkItems.push(entry);\n                } else {\n                    items.push(toListItem(entry));\n                }\n\n                const now = Date.now();\n                if (now - lastBreak > 16) {\n                    await delay(0);\n                    lastBreak = now;\n                }\n            }\n\n            for (const entry of linkItems) {\n                try {\n                    const followLinkPath = path.resolve(currentPath, entry.name!) + '/';\n                    console.log(followLinkPath);\n                    await sync.lstat(followLinkPath);\n                    items.push(toListItem(entry));\n                    console.log(entry);\n                } catch (e) {\n                    console.log(e);\n                    items.push(toListItem(AdbSyncEntryResponse.create({\n                        mode: (LinuxFileType.File << 12) | entry.mode,\n                        size: 0,\n                        lastModifiedTime: entry.lastModifiedTime,\n                        name: entry.name,\n                    }, { encodeUtf8 })));\n                }\n            }\n\n            setItems(items);\n            listRef.current?.scrollToIndex(0);\n        } finally {\n            if (currentPath === currentPathRef.current) {\n                setLoading(false);\n            }\n            clearInterval(intervalId);\n            sync.dispose();\n        }\n    }, [device, currentPath]);\n    useEffect(() => {\n        load();\n    }, [load]);\n\n    const [sortedList, setSortedList] = useState<ListItem[]>([]);\n    const [sortKey, setSortKey] = useState<keyof ListItem>('name');\n    const [sortDescending, setSortDescendent] = useState(false);\n    useEffect(() => {\n        const list = items.slice();\n        list.sort((a, b) => {\n            const aIsFile = a.type === LinuxFileType.File ? 1 : 0;\n            const bIsFile = b.type === LinuxFileType.File ? 1 : 0;\n\n            let result: number;\n            if (aIsFile !== bIsFile) {\n                result = aIsFile - bIsFile;\n            } else {\n                const aSortKey = a[sortKey]!;\n                const bSortKey = b[sortKey]!;\n\n                if (aSortKey === bSortKey) {\n                    result = a.name! < b.name! ? -1 : 1;\n                } else {\n                    result = aSortKey < bSortKey ? -1 : 1;\n                }\n            }\n\n            if (sortDescending) {\n                result *= -1;\n            }\n            return result;\n        });\n        setSortedList(list);\n    }, [items, sortKey, sortDescending]);\n\n    const columns: IColumn[] = useMemo(() => {\n        const list: IColumn[] = [\n            {\n                key: 'type',\n                name: 'File Type',\n                iconName: 'Page',\n                isIconOnly: true,\n                minWidth: 20,\n                maxWidth: 20,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    switch (item.type) {\n                        case LinuxFileType.Link:\n                            return <Icon {...getFileTypeIconProps({ size: 20, type: FileIconType.linkedFolder })} />;\n                        case LinuxFileType.Directory:\n                            return <Icon {...getFileTypeIconProps({ size: 20, type: FileIconType.folder })} />;\n                        case LinuxFileType.File:\n                            return <Icon {...getFileTypeIconProps({ size: 20, extension: extensionName(item.name!) })} />;\n                        default:\n                            return <Icon {...getFileTypeIconProps({ size: 20, extension: 'txt' })} />;\n                    }\n                }\n            },\n            {\n                key: 'name',\n                name: 'Name',\n                minWidth: 0,\n                isRowHeader: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    return (\n                        <span className={classNames.name} data-selection-invoke>\n                            {item.name}\n                        </span>\n                    );\n                }\n            },\n            {\n                key: 'mode',\n                name: 'Mode',\n                minWidth: 0,\n                onRender(item: AdbSyncEntryResponse) {\n                    return `0${(item.mode >> 6 & 0b100).toString(8)}${(item.mode >> 3 & 0b100).toString(8)}${(item.mode & 0b100).toString(8)}`;\n                }\n            },\n            {\n                key: 'logicalSize',\n                name: 'Size',\n                minWidth: 0,\n                onRender(item: AdbSyncEntryResponse) {\n                    if (item.type === LinuxFileType.File) {\n                        return formatSize(item.size);\n                    }\n                    return '';\n                }\n            },\n            {\n                key: 'lastModifiedTime',\n                name: 'Last Modified Time',\n                minWidth: 150,\n                onRender(item: AdbSyncEntryResponse) {\n                    return new Date(item.lastModifiedTime * 1000).toLocaleString();\n                },\n            }\n        ];\n\n        for (const item of list) {\n            item.onColumnClick = (e, column) => {\n                if (sortKey === column.key) {\n                    setSortDescendent(!sortDescending);\n                } else {\n                    setSortKey(column.key as keyof ListItem);\n                    setSortDescendent(false);\n                }\n            };\n\n            if (item.key === sortKey) {\n                item.isSorted = true;\n                item.isSortedDescending = sortDescending;\n            }\n        }\n\n        return list;\n    }, [sortKey, sortDescending]);\n\n    const [previewUrl, setPreviewUrl] = useState<string | undefined>();\n    const previewImage = useCallback(async (path: string) => {\n        const sync = await device!.sync();\n        try {\n            const readableStream = createReadableStreamFromBufferIterator(sync.receive(path));\n            const response = new Response(readableStream);\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            setPreviewUrl(url);\n        } finally {\n            sync.dispose();\n        }\n    }, [device]);\n    const hidePreview = useCallback(() => {\n        setPreviewUrl(undefined);\n    }, []);\n\n    const handleItemInvoked = useCallback((item: AdbSyncEntryResponse) => {\n        switch (item.type) {\n            case LinuxFileType.Link:\n            case LinuxFileType.Directory:\n                setCurrentPath(path.resolve(currentPath, item.name!));\n                break;\n            case LinuxFileType.File:\n                switch (extensionName(item.name!)) {\n                    case '.jpg':\n                    case '.png':\n                    case '.svg':\n                    case '.gif':\n                        previewImage(path.resolve(currentPath, item.name!));\n                        break;\n                }\n                break;\n        }\n    }, [currentPath, previewImage]);\n\n    const selection = useConst(() => new Selection());\n\n    const [contextMenuItems, setContextMenuItems] = useState<IContextualMenuItem[]>([]);\n    const [contextMenuTarget, setContextMenuTarget] = useState<MouseEvent>();\n    const showContextMenu = useCallback((\n        item?: AdbSyncEntryResponse,\n        index?: number,\n        e?: Event\n    ) => {\n        if (!e) {\n            return false;\n        }\n\n        const selectedItems = selection.getSelection() as ListItem[];\n\n        let contextMenuItems: IContextualMenuItem[] = [];\n\n        if (selectedItems.length === 1 &&\n            selectedItems[0].type === LinuxFileType.File) {\n            contextMenuItems.push({\n                key: 'download',\n                text: 'Download',\n                onClick() {\n                    (async () => {\n                        const sync = await device!.sync();\n                        try {\n                            const itemPath = path.resolve(currentPath, selectedItems[0].name!);\n                            const readableStream = createReadableStreamFromBufferIterator(sync.receive(itemPath));\n\n                            const writeableStream = StreamSaver.createWriteStream(selectedItems[0].name!, {\n                                size: selectedItems[0].size,\n                            });\n                            await readableStream.pipeTo(writeableStream);\n                        } catch (e) {\n                            showErrorDialog(e.message);\n                        } finally {\n                            sync.dispose();\n                        }\n                    })();\n                    return false;\n                },\n            });\n        }\n\n        contextMenuItems.push({\n            key: 'delete',\n            text: 'Delete',\n            onClick() {\n                (async () => {\n                    try {\n                        for (const item of selectedItems) {\n                            const output = await device!.shell('rm', '-rf', `\"${path.resolve(currentPath, item.name!)}\"`);\n                            if (output) {\n                                showErrorDialog(output);\n                                return;\n                            }\n                        }\n                    } catch (e) {\n                        showErrorDialog(e.message);\n                    } finally {\n                        load();\n                    }\n                })();\n                return false;\n            }\n        });\n\n        if (!contextMenuItems.length) {\n            return false;\n        }\n\n        setContextMenuItems(contextMenuItems);\n        setContextMenuTarget(e as MouseEvent);\n        return false;\n    }, [currentPath, device]);\n    const hideContextMenu = React.useCallback(() => {\n        setContextMenuTarget(undefined);\n    }, []);\n\n    return (\n        <MarqueeSelection selection={selection}>\n            {device && (\n                <StackItem>\n                    <Breadcrumb items={breadcrumbItems} />\n                </StackItem>\n            )}\n\n            <StackItem\n                grow\n                styles={{ root: { minHeight: 0 } }}\n            >\n                <ShimmeredDetailsList\n                    componentRef={listRef}\n                    items={sortedList}\n                    columns={columns}\n                    setKey={currentPath}\n                    selection={selection}\n                    layoutMode={DetailsListLayoutMode.justified}\n                    enableShimmer={loading && items.length === 0}\n                    onItemInvoked={handleItemInvoked}\n                    onItemContextMenu={showContextMenu}\n                    onRenderDetailsHeader={renderDetailsHeader}\n                    usePageCache\n                />\n            </StackItem>\n\n            {previewUrl && (\n                <Layer>\n                    <Overlay onClick={hidePreview}>\n                        <div style={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                            <img src={previewUrl} style={{ maxWidth: '100%', maxHeight: '100%' }} />\n                        </div>\n                    </Overlay>\n                </Layer>\n            )}\n\n            <ContextualMenu\n                items={contextMenuItems}\n                hidden={!contextMenuTarget}\n                directionalHint={DirectionalHint.bottomLeftEdge}\n                target={contextMenuTarget}\n                onDismiss={hideContextMenu}\n            />\n        </MarqueeSelection>\n    );\n});\n","import { Callout, DirectionalHint, Link, mergeStyleSets, Text } from '@fluentui/react';\nimport { useBoolean } from '@uifabric/react-hooks';\nimport React, { useCallback, useRef } from 'react';\nimport withDisplayName from '../with-display-name';\n\nconst classNames = mergeStyleSets({\n    callout: {\n        padding: '8px 12px',\n    },\n});\n\ninterface CopyLinkProps {\n    href: string;\n}\n\nconst CopyLink = withDisplayName('CopyLink', ({\n    href,\n}: CopyLinkProps) => {\n    const calloutTarget = useRef<HTMLButtonElement | null>(null);\n    const [calloutVisible, { setTrue: showCallout, setFalse: hideCallout }] = useBoolean(false);\n    const copyLink = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n        navigator.clipboard.writeText(href);\n        calloutTarget.current = e.target as HTMLButtonElement;\n        showCallout();\n        setTimeout(hideCallout, 3000);\n    }, [href]);\n\n    return (\n        <>\n            <Link onClick={copyLink}>{href}</Link>\n            <Callout\n                directionalHint={DirectionalHint.topCenter}\n                hidden={!calloutVisible}\n                target={calloutTarget}\n                onDismiss={hideCallout}\n            >\n                <div className={classNames.callout}>\n                    Link copied. Open a new tab and paste into address bar.\n                </div>\n            </Callout>\n        </>\n    );\n});\n\nexport default withDisplayName('Intro', () => {\n    return (\n        <>\n            <Text block>\n                This page is a demo of my {' '}\n                <Link href=\"https://github.com/yume-chan/ya-webadb/\" target=\"_blank\">WebADB</Link>{' '}\n                library, which can connect to your Android devices with the {' '}\n                <Link href=\"https://developer.mozilla.org/en-US/docs/Web/API/USB\" target=\"_blank\">WebUSB</Link>{' '}\n                API.\n            </Text>\n            <Text block>\n                The latest version of Google Chrome (or Microsoft Edge) is recommended for best compatibility.\n            </Text>\n\n            <Text block styles={{ root: { fontWeight: '600' } }}>\n                Windows user?\n            </Text>\n            <Text block>\n                The experimental new backend is required. Enable from  {' '}\n                <CopyLink href=\"chrome://flags/#new-usb-backend\" />\n                .\n            </Text>\n\n            <Text block styles={{ root: { fontWeight: '600' } }}>\n                Got \"Unable to claim interface\" error?\n            </Text>\n            <Text block>\n                Only one software can connect to your device at a time.<br />\n                1. Make sure ADB server is not running (run `adb kill-server` to stop it).<br />\n                2. Make sure no other Android management tools are running\n            </Text>\n            <Text block styles={{ root: { fontWeight: '600' } }}>\n                Got \"Access denied\" error?\n            </Text>\n            <Text block>\n                If you have a Samsung device, it's caused by the custom driver. See {' '}\n                <Link href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1127206\">\n                    https://bugs.chromium.org/p/chromium/issues/detail?id=1127206\n                </Link>\n            </Text>\n            <Text block styles={{ root: { fontWeight: '600' } }}>\n                Can I connect my device wirelessly (ADB over WiFi)?\n            </Text>\n            <Text block>\n                No. Web browsers doesn't support TCP connections.<br />\n                Or maybe, with {' '}\n                <Link href=\"https://github.com/novnc/websockify\">websockify</Link>{' '}\n                running on your device and a WebSocket backend for WebADB.\n            </Text>\n        </>\n    );\n});\n","import React, { CSSProperties, HTMLAttributes, PropsWithChildren, useCallback, useRef } from 'react';\nimport withDisplayName from './with-display-name';\n\nexport interface ResizeObserverProps extends HTMLAttributes<HTMLDivElement>, PropsWithChildren<{}> {\n    onResize: () => void;\n}\n\nconst iframeStyle: CSSProperties = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    visibility: 'hidden',\n};\n\nexport default withDisplayName('ResizeObserver', ({\n    onResize,\n    style,\n    children,\n    ...rest\n}: ResizeObserverProps): JSX.Element | null => {\n    const onResizeRef = useRef<() => void>(onResize);\n    onResizeRef.current = onResize;\n\n    const handleResize = useCallback(() => {\n        onResizeRef.current();\n    }, []);\n\n    const handleIframeRef = useCallback((element: HTMLIFrameElement | null) => {\n        if (element) {\n            element.contentWindow!.addEventListener('resize', handleResize);\n        }\n    }, []);\n\n    const containerStyle: CSSProperties = React.useMemo(() => {\n        if (!style) {\n            return { position: 'relative' };\n        }\n\n        if (!style.position) {\n            return { ...style, position: 'relative' };\n        }\n\n        return style;\n    }, [style]);\n\n    return (\n        <div style={containerStyle} {...rest}>\n            <iframe ref={handleIframeRef} style={iframeStyle} />\n            {children}\n        </div>\n    );\n});\n","import { IconButton, SearchBox, Stack, StackItem } from '@fluentui/react';\nimport { encodeUtf8 } from '@yume-chan/adb-backend-web';\nimport React, { CSSProperties, useCallback, useEffect, useRef, useState } from 'react';\nimport { Terminal } from 'xterm';\nimport { FitAddon } from 'xterm-addon-fit';\nimport { SearchAddon } from 'xterm-addon-search';\nimport 'xterm/css/xterm.css';\nimport ResizeObserver from '../resize-observer';\nimport withDisplayName from '../with-display-name';\nimport { RouteProps } from './type';\n\nconst containerStyle: CSSProperties = {\n    width: '100%',\n    height: '100%',\n};\n\nexport default withDisplayName('Shell', ({\n    device,\n}: RouteProps): JSX.Element | null => {\n    const [findKeyword, setFindKeyword] = useState('');\n    const findAddonRef = useRef<SearchAddon>();\n    const handleFindKeywordChange = useCallback((e, newValue?: string) => {\n        setFindKeyword(newValue ?? '');\n        if (newValue) {\n            findAddonRef.current!.findNext(newValue, { incremental: true });\n        }\n    }, []);\n    const findPrevious = useCallback(() => {\n        findAddonRef.current!.findPrevious(findKeyword);\n    }, [findKeyword]);\n    const findNext = useCallback(() => {\n        findAddonRef.current!.findNext(findKeyword);\n    }, [findKeyword]);\n\n    const [terminal, setTerminal] = useState<Terminal>();\n    const fitAddonRef = useRef<FitAddon>();\n    const handleContainerRef = useCallback((element: HTMLDivElement | null) => {\n        if (!element) {\n            return;\n        }\n\n        const terminal = new Terminal({\n            scrollback: 9001,\n        });\n\n        const findAddon = new SearchAddon();\n        findAddonRef.current = findAddon;\n        terminal.loadAddon(findAddon);\n\n        const fitAddon = new FitAddon();\n        fitAddonRef.current = fitAddon;\n        terminal.loadAddon(fitAddon);\n\n        setTerminal(terminal);\n        terminal.open(element);\n        fitAddon.fit();\n    }, []);\n    useEffect(() => {\n        return () => terminal?.dispose();\n    }, []);\n\n    useEffect(() => {\n        if (!device || !terminal) {\n            return;\n        }\n\n        (async () => {\n            const shell = await device.shell();\n            terminal.onData(data => {\n                const buffer = encodeUtf8(data);\n                shell.write(buffer);\n            });\n            shell.onData(data => {\n                terminal.write(new Uint8Array(data));\n            });\n        })();\n\n        return () => {\n            terminal.reset();\n            terminal.clear();\n        };\n    }, [device, terminal]);\n\n    const handleResize = useCallback(() => {\n        fitAddonRef.current?.fit();\n    }, []);\n\n    return (\n        <>\n            <StackItem>\n                <Stack horizontal>\n                    <StackItem grow>\n                        <SearchBox\n                            placeholder=\"Find\"\n                            value={findKeyword}\n                            onChange={handleFindKeywordChange}\n                            onSearch={findNext}\n                        />\n                    </StackItem>\n                    <StackItem>\n                        <IconButton\n                            disabled={!findKeyword}\n                            iconProps={{ iconName: 'ChevronUp' }}\n                            onClick={findPrevious}\n                        />\n                    </StackItem>\n                    <StackItem>\n                        <IconButton\n                            disabled={!findKeyword}\n                            iconProps={{ iconName: 'ChevronDown' }}\n                            onClick={findNext}\n                        />\n                    </StackItem>\n                </Stack>\n            </StackItem>\n            <StackItem grow styles={{ root: { minHeight: 0 } }}>\n                <ResizeObserver style={containerStyle} onResize={handleResize}>\n                    <div ref={handleContainerRef} style={{ height: '100%' }} />\n                </ResizeObserver>\n            </StackItem>\n        </>\n    );\n});\n","import { Label, MessageBar, PrimaryButton, Stack, StackItem, Text, TextField } from '@fluentui/react';\nimport { useId } from '@uifabric/react-hooks';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport withDisplayName from '../with-display-name';\nimport { RouteProps } from './type';\n\nexport default withDisplayName('TcpIp', ({\n    device\n}: RouteProps): JSX.Element | null => {\n    const [tcpPort, setTcpAddresses] = useState<string[] | undefined>();\n    useEffect(() => {\n        if (!device) {\n            setTcpAddresses(undefined);\n        }\n    }, [device]);\n\n    const queryTcpAddress = useCallback(async () => {\n        if (!device) {\n            return;\n        }\n\n        const result = await device.getDaemonTcpAddresses();\n        setTcpAddresses(result);\n    }, [device]);\n\n    const [tcpPortValue, setTcpPortValue] = useState('5555');\n    const tcpPortInputId = useId('tcpPort');\n    const enableTcp = useCallback(async () => {\n        if (!device) {\n            return;\n        }\n\n        const result = await device.setDaemonTcpPort(Number.parseInt(tcpPortValue, 10));\n        console.log(result);\n    }, [device, tcpPortValue]);\n\n    const disableTcp = useCallback(async () => {\n        if (!device) {\n            return;\n        }\n\n        const result = await device.disableDaemonTcp();\n        console.log(result);\n    }, [device]);\n\n    return (\n        <>\n            <StackItem>\n                <MessageBar>\n                    <Text>Although WebADB can enable ADB over WiFi for you, it can't connect to your device wirelessly.</Text>\n                </MessageBar>\n            </StackItem>\n            <StackItem>\n                <MessageBar >\n                    <Text>Your device will disconnect after changing ADB over WiFi config.</Text>\n                </MessageBar>\n            </StackItem>\n            <Stack horizontal verticalAlign=\"center\" tokens={{ childrenGap: 8 }}>\n                <StackItem>\n                    <PrimaryButton text=\"Update Status\" disabled={!device} onClick={queryTcpAddress} />\n                </StackItem>\n                <StackItem>\n                    {tcpPort !== undefined &&\n                        (tcpPort.length !== 0\n                            ? `Enabled at ${tcpPort.join(', ')}`\n                            : 'Disabled')}\n                </StackItem>\n            </Stack>\n            <Stack horizontal verticalAlign=\"center\" tokens={{ childrenGap: 8 }}>\n                <StackItem>\n                    <Label htmlFor={tcpPortInputId}>Port: </Label>\n                </StackItem>\n                <StackItem>\n                    <TextField\n                        id={tcpPortInputId}\n                        width={300}\n                        disabled={!device}\n                        value={tcpPortValue}\n                        onChange={(e, value) => setTcpPortValue(value!)}\n                    />\n                </StackItem>\n                <StackItem>\n                    <PrimaryButton\n                        text=\"Enable\"\n                        disabled={!device}\n                        onClick={enableTcp}\n                    />\n                </StackItem>\n            </Stack>\n            <StackItem>\n                <PrimaryButton\n                    text=\"Disable\"\n                    disabled={!device || tcpPort === undefined || tcpPort.length === 0}\n                    onClick={disableTcp}\n                />\n            </StackItem>\n        </>\n    );\n});\n","import { Nav, Separator, Stack, StackItem, Text } from '@fluentui/react';\nimport { initializeIcons } from '@uifabric/icons';\nimport { Adb } from '@yume-chan/adb';\nimport React, { useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Redirect, useLocation } from 'react-router-dom';\nimport Connect from './connect';\nimport ErrorDialogProvider from './error-dialog';\nimport './index.css';\nimport { CacheRoute, CacheSwitch } from './router';\nimport FileManager from './routes/file-manager';\nimport Intro from './routes/intro';\nimport Shell from './routes/shell';\nimport TcpIp from './routes/tcp-ip';\n\ninitializeIcons();\n\ninterface RouteInfo {\n    path: string;\n\n    exact?: boolean;\n\n    name: string;\n\n    children: JSX.Element | null;\n}\n\nfunction App(): JSX.Element | null {\n    const location = useLocation();\n\n    const [device, setDevice] = useState<Adb | undefined>();\n\n    const routes = useMemo((): RouteInfo[] => [\n        {\n            path: '/',\n            exact: true,\n            name: 'Introduction',\n            children: (\n                <Intro />\n            )\n        },\n        {\n            path: '/device-info',\n            name: 'Device Info',\n            children: (\n                <>\n                    <StackItem>\n                        Product: {device?.product}\n                    </StackItem>\n                    <StackItem>\n                        Model: {device?.model}\n                    </StackItem>\n                    <StackItem>\n                        Device: {device?.device}\n                    </StackItem>\n                    <StackItem>\n                        Features: {device?.features?.join(',')}\n                    </StackItem>\n                </>\n            )\n        },\n        {\n            path: '/adb-over-wifi',\n            name: 'ADB over WiFi',\n            children: (\n                <TcpIp device={device} />\n            )\n        },\n        {\n            path: '/shell',\n            name: 'Interactive Shell',\n            children: (\n                <Shell device={device} />\n            ),\n        },\n        {\n            path: '/file-manager',\n            name: 'File Manager',\n            children: (\n                <FileManager device={device} />\n            ),\n        },\n    ], [device]);\n\n    return (\n        <Stack verticalFill>\n            <StackItem tokens={{ padding: 8 }}>\n                <Text variant=\"xxLarge\">WebADB Demo</Text>\n            </StackItem>\n            <StackItem>\n                <Connect device={device} onDeviceChange={setDevice} />\n            </StackItem>\n            <StackItem>\n                <Separator />\n            </StackItem>\n            <StackItem grow styles={{ root: { minHeight: 0 } }}>\n                <Stack horizontal verticalFill tokens={{ childrenGap: 8 }}>\n                    <StackItem>\n                        <Nav\n                            styles={{ root: { width: 250 } }}\n                            groups={[{\n                                links: routes.map(route => ({\n                                    key: route.path,\n                                    name: route.name,\n                                    url: `#${route.path}`,\n                                })),\n                            }]}\n                            selectedKey={location.pathname}\n                        />\n                    </StackItem>\n                    <StackItem grow styles={{ root: { minHeight: 0, overflow: 'hidden' } }}>\n                        <CacheSwitch>\n                            {routes.map<React.ReactElement>(route => (\n                                <CacheRoute exact={route.exact} path={route.path}>\n                                    {route.children}\n                                </CacheRoute>\n                            ))}\n\n                            <Redirect to=\"/\" />\n                        </CacheSwitch>\n                    </StackItem>\n                </Stack>\n            </StackItem>\n        </Stack>\n    );\n}\n\nReactDOM.render(\n    <HashRouter>\n        <ErrorDialogProvider>\n            <App />\n        </ErrorDialogProvider>\n    </HashRouter>,\n    document.getElementById('container')\n);\n"],"sourceRoot":""}