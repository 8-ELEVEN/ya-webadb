{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../event/src/event-emitter.ts","webpack:///../event/src/async-event-emitter.ts","webpack:///../event/src/disposable.ts","webpack:///../adb/src/crypto.ts","webpack:///../struct/src/backing-field.ts","webpack:///../struct/src/field/array.ts","webpack:///../struct/src/field/definition.ts","webpack:///../struct/src/field/number.ts","webpack:///../struct/src/field/variable-length-array.ts","webpack:///../struct/src/field/fixed-length-array.ts","webpack:///../struct/src/types.ts","webpack:///../struct/src/struct.ts","webpack:///../adb/src/utils/auto-reset-event.ts","webpack:///../adb/src/utils/base64.ts","webpack:///../adb/src/utils/event-queue.ts","webpack:///../adb/src/stream/readable-stream.ts","webpack:///../adb/src/stream/buffered-stream.ts","webpack:///../adb/src/stream/chunk.ts","webpack:///../adb/src/stream/controller.ts","webpack:///../adb/src/stream/stream.ts","webpack:///../adb/src/stream/dispatcher.ts","webpack:///../adb/src/packet.ts","webpack:///../adb/src/auth.ts","webpack:///../adb/src/commands/base.ts","webpack:///../adb/src/commands/framebuffer.ts","webpack:///../adb/src/commands/reverse.ts","webpack:///../adb/src/commands/sync/request.ts","webpack:///../adb/src/commands/sync/response.ts","webpack:///../adb/src/commands/sync/stat.ts","webpack:///../adb/src/commands/sync/list.ts","webpack:///../adb/src/commands/sync/pull.ts","webpack:///../adb/src/commands/sync/push.ts","webpack:///../adb/src/features.ts","webpack:///../adb/src/adb.ts","webpack:///../adb/src/commands/sync/sync.ts","webpack:///../adb/src/commands/tcpip.ts","webpack:///../adb-backend-web/src/watcher.ts","webpack:///../adb-backend-web/src/index.ts","webpack:///./src/utils/with-display-name.ts","webpack:///./src/utils/command-bar.tsx","webpack:///./src/utils/resize-observer.tsx","webpack:///./src/utils/device-view.tsx","webpack:///./src/utils/external-link.tsx","webpack:///./src/utils/file-size.ts","webpack:///./src/error-dialog.tsx","webpack:///./src/connect.tsx","webpack:///./src/router.tsx","webpack:///./src/routes/file-manager.tsx","webpack:///./src/routes/framebuffer.tsx","webpack:///./src/routes/intro.tsx","webpack:///./src/styles.ts","webpack:///./src/routes/scrcpy/control.ts","webpack:///./src/routes/scrcpy/scrcpy-server","webpack:///./src/routes/scrcpy/fetch-server.ts","webpack:///./src/routes/scrcpy/index.tsx","webpack:///./src/routes/shell.tsx","webpack:///./src/routes/tcpip.tsx","webpack:///./src/index.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","EventEmitter","listeners","this","event","listener","thisArg","args","info","remove","index","indexOf","dispose","e","AutoDisposable","disposables","disposable","DisposableList","addDisposable","BigInt0","BigInt","BigInt1","BigInt2","BigInt2To64","getBig","buffer","offset","byteLength","view","DataView","getBigUint64","setBigLE","setBigUint64","parsePrivateKey","calculatePublicKey","privateKey","output","outputOffset","outputType","Error","ArrayBuffer","outputView","setUint32","n0inv","a","Number","isNaN","NaN","b","x","y","Math","floor","modInverse","asUintN","Sha1DigestInfo","sign","padded","Uint8Array","fillLength","set","signature","base","exponent","modulus","powMod","uint64Array","setBig","BackingField","getBackingField","field","setBackingField","initialize","subType","configurable","string","registry","getFieldTypeDefinition","type","registerFieldTypeDefinition","_field","_initExtra","methods","placeholder","context","read","options","decodeUtf8","extra","getSize","backingField","dataView","encodeUtf8","SizeMap","DataViewGetterMap","DataViewSetterMap","undefined","littleEndian","VariableLengthArray","getLengthBackingField","lengthField","setLengthBackingField","descriptor","getOwnPropertyDescriptor","parseInt","emptyBehavior","getDynamicSize","StructDefaultOptions","_size","fields","_extra","array","arrayBuffer","_afterParsed","clone","size","_typescriptType","number","getOwnPropertyDescriptors","callback","fieldTypeDefinition","defineSimpleAccessors","init","defineProperties","initializeField","deserialize","fieldSize","serialize","initialSet","list","blocking","Promise","resolve","resolver","promise","pop","item","reject","ranges","chars","padding","charCodeAt","addRange","start","end","startCharCode","endCharCode","toValue","char","charCode","range","encodeBase64","input","arg1","arg2","_arg3","_arg4","inputOffset","inputLength","outputArgumentIndex","extraBytes","outputLength","maybeOutput","arguments","bufferInputStart","byteOffset","bufferOutputStart","inputIndex","outputIndex","z","sort","EventQueueDefaultOptions","maxWaitCount","Infinity","highWaterMark","lowWaterMark","pullQueue","pushQueue","ended","waterMark","pendingLowWaterEvent","lowWaterEvent","fire","stream","readLock","queue","resetEvent","onData","wait","onClose","onLowWater","notify","backend","localId","remoteId","next","write","close","BufferedStream","subarray","left","super","chunkArrayLike","dispatcher","writeLock","dataEvent","_closed","closeEvent","sendPacket","AdbCommand","Write","chunk","maxPayloadSize","writeChunk","Close","AdbStream","controller","initializers","streams","Map","sendLock","calculateChecksum","appendNullToServiceString","packetEvent","streamEvent","errorEvent","_running","packet","command","OK","handleOk","arg0","has","delete","payload","Open","handleOpen","handled","ack","add","receiveLoop","service","initializer","packetOrCommand","values","clear","AdbPacketWithoutPayload","uint32","int32","AdbPacketStruct","afterParsed","magic","AdbPacket","AdbAuthType","checksum","reduce","async","bufferUsed","AdbDefaultAuthenticators","iterateKeys","Token","Auth","Signature","generateKey","publicKeyBase64Length","publicKeyBuffer","PublicKey","AdbAuthenticationHandler","authenticators","authenticator","iterator","done","return","nextCore","adb","Version","AdbFrameBufferV1","AdbFrameBufferV2","AdbReverseStringResponse","AdbReverseErrorResponse","content","localPortToHandler","deviceAddressToLocalPort","listening","onStream","handleStream","address","port","substring","deviceAddress","localPort","handler","createStream","buffered","startsWith","response","split","map","line","deviceSerial","localName","remoteName","AdbSyncRequestId","AdbSyncNumberRequest","AdbSyncDataRequest","adbSyncWriteRequest","id","arg","AdbSyncResponseId","AdbSyncDoneResponse","Done","AdbSyncFailResponse","message","adbSyncReadResponse","types","Fail","LinuxFileType","AdbSyncLstatResponse","Lstat","mtime","AdbSyncStatErrorCode","AdbSyncStatResponse","uint64","Stat","error","StatResponseType","LstatResponseType","Lstat2ResponseType","Lstat2","AdbSyncEntryResponse","Entry","ResponseTypes","AdbSyncDataResponse","Data","AdbSyncOkResponse","Ok","adbSyncPush","path","file","File","Date","now","packetSize","onProgress","pathAndMode","toString","chunkReader","Send","remainder","chunkAsyncIterable","uploaded","AdbFeatures","AdbPropKey","features","includes","StatV2","v2","requestId","responseType","adbSyncLstat","supportStat","adbSyncStat","lstat","List","adbSyncOpenDir","results","entry","opendir","Receive","adbSyncPull","createStreamAndReadAll","_connected","packetDispatcher","tcpip","reverse","onDisconnected","_product","_model","_device","_features","connect","join","authHandler","disposableList","onPacket","Connect","min","parseBanner","authPacket","onError","banner","pieces","props","prop","keyValue","Product","Model","Device","Features","exec","trim","version","framebuffer","AdbWebBackendWatcher","navigator","usb","addEventListener","removeEventListener","WebUsbDeviceFilter","classCode","subclassCode","protocolCode","Utf8Encoder","TextEncoder","Utf8Decoder","TextDecoder","encode","decode","device","disconnectEvent","handleDisconnect","getDevices","requestDevice","filters","serialNumber","productName","opened","open","configuration","configurations","interface_","interfaces","alternate","alternates","interfaceSubclass","interfaceClass","configurationValue","selectConfiguration","claimed","claimInterface","interfaceNumber","alternateSetting","selectAlternateInterface","endpoint","endpoints","direction","_inEndpointNumber","endpointNumber","_outEndpointNumber","localStorage","getItem","sIndex","dIndex","decodeBase64","cryptoKey","crypto","subtle","modulusLength","publicExponent","hash","exportKey","setItem","transferOut","transferIn","status","clearHalt","withDisplayName","Component","displayName","forwardRef","ContainerStyles","root","margin","borderBottom","StackItem","styles","iframeStyle","position","top","width","height","visibility","ResizeObserver","onResize","style","children","rest","ref","onResizeRef","current","containerRef","mergedRef","createMergedRef","handleResize","getBoundingClientRect","handleIframeRef","element","contentWindow","containerStyle","useMemo","DeviceView","containerWidth","setContainerWidth","containerHeight","setContainerHeight","scale","setScale","requestFullscreen","grow","backgroundColor","transform","transformOrigin","ExternalLink","href","spaceBefore","spaceAfter","Link","target","rel","units","formatSize","toLocaleString","maximumFractionDigits","formatSpeed","completed","total","speed","useSpeed","completedRef","debouncedCompleted","setDebouncedCompleted","setSpeed","setInterval","useSetInterval","delay","time","setTimeout","ErrorDialogContext","createContext","errorDialogVisible","setTrue","showErrorDialog","setFalse","hideErrorDialog","useBoolean","errorMessage","setErrorMessage","Provider","Dialog","hidden","dialogContentProps","normal","title","subText","DialogFooter","PrimaryButton","text","onClick","DropdownStyles","dropdown","onDeviceChange","show","backendOptions","setBackendOptions","selectedBackend","setSelectedBackend","refresh","backendList","serial","old","some","watcher","requestAccess","connecting","setConnecting","disconnect","Stack","tokens","childrenGap","Dropdown","disabled","label","dropdownWidth","selectedKey","onChange","_e","option","DefaultButton","horizontal","shrink","primary","TooltipHost","ProgressIndicator","RouteStackProps","verticalFill","className","slideUpIn10","overflow","CacheRoute","match","everMatched","stackProps","display","noCache","Children","isValidElement","cloneElement","visible","CacheSwitch","location","computedMatch","contextMatch","cached","forEach","child","isCacheRoute","from","pathname","toListItem","initializeFileTypeIcons","mitm","classNames","cursor","textDecoration","renderDetailsHeader","defaultRender","paddingTop","createReadableStreamFromBufferIterator","ReadableStream","desiredSize","written","enqueue","compareCaseInsensitively","toLocaleLowerCase","localeCompare","FileManager","currentPath","setCurrentPath","currentPathRef","breadcrumbItems","part","filter","Boolean","segment","unshift","isCurrentItem","items","setItems","loading","setLoading","listRef","load","sync","linkItems","intervalId","lastBreak","isDirectory","permission","scrollToIndex","clearInterval","sortedList","setSortedList","sortKey","setSortKey","sortDescending","setSortDescendent","aIsFile","bIsFile","aSortKey","bSortKey","columns","iconName","isIconOnly","minWidth","maxWidth","isCollapsible","Icon","getFileTypeIconProps","FileIconType","linkedFolder","Directory","folder","extension","extname","isRowHeader","onRender","onColumnClick","column","isSorted","isSortedDescending","previewUrl","setPreviewUrl","previewImage","readableStream","Response","blob","url","URL","createObjectURL","hidePreview","handleItemInvoked","selectedItems","setSelectedItems","selection","useConst","Selection","getSelection","uploading","setUploading","uploadPath","setUploadPath","uploadedSize","setUploadedSize","uploadTotalSize","setUploadTotalSize","debouncedUploadedSize","uploadSpeed","upload","itemPath","chunkFile","lastModified","menuItems","setMenuItems","iconProps","document","createElement","onchange","files","click","writeableStream","createWriteStream","pipeTo","contextMenuTarget","setContextMenuTarget","showContextMenu","_item","_index","hideContextMenu","useCallback","minHeight","MarqueeSelection","Breadcrumb","ShimmeredDetailsList","componentRef","setKey","layoutMode","justified","enableShimmer","onItemInvoked","onItemContextMenu","onRenderDetailsHeader","usePageCache","Layer","Overlay","alignItems","justifyContent","src","maxHeight","ContextualMenu","directionalHint","DirectionalHint","bottomLeftEdge","onDismiss","contextualMenuItemAs","ContextualMenuItem","hasIcons","description","percentComplete","FrameBuffer","canvasRef","setWidth","setHeight","capture","performance","console","log","canvas","getContext","image","ImageData","Uint8ClampedArray","putImageData","commandBarItems","commandBarFarItems","iconOnly","tooltipHostProps","calloutProps","calloutMaxWidth","farItems","callout","BoldTextStyles","fontWeight","CopyLink","calloutTarget","calloutVisible","showCallout","hideCallout","copyLink","clipboard","writeText","Callout","topCenter","Intro","Text","block","CommonStackTokens","ScrcpySimpleControlMessage","uint8","ScrcpyInjectTouchControlMessage","uint16","_downloaded","_total","progressEvent","fetch","headers","reader","body","getReader","chunks","cachedValue","Size","VideoPacket","int64","NoPts","receiveVideo","jmuxer","lastPts","pts","duration","feed","video","destroy","ClipboardMessage","receiveControl","sendControl","Scrcpy","running","setRunning","videoRef","handleVideoRef","onresize","videoWidth","videoHeight","preventDefault","play","serverTotalSize","setServerTotalSize","serverDownloadedSize","setServerDownloadedSize","debouncedServerDownloadedSize","serverDownloadSpeed","serverUploadedSize","setServerUploadedSize","debouncedServerUploadedSize","serverUploadSpeed","serverRef","eventQueueRef","controlStreamRef","serverBuffer","downloaded","reverseDeviceAddress","server","spawn","videoStream","controlStream","node","flushingTime","all","stop","deviceViewRef","enterFullscreen","injectTouch","action","stopPropagation","currentTarget","pointerViewX","clientX","pointerViewY","clientY","pointerScreenX","pointerScreenY","buttons","pointerId","pointerX","pointerY","pressure","screenWidth","screenHeight","handlePointerDown","button","handlePointerMove","handlePointerUp","handleKeyPress","autoPlay","onPointerDown","onPointerMove","onPointerUp","onKeyPress","progressHidden","ResizeObserverStyle","UpIconProps","DownIconProps","Shell","findKeyword","setFindKeyword","findAddonRef","handleFindKeywordChange","newValue","findNext","incremental","findPrevious","connectingRef","terminalRef","shellStreamRef","terminalDisposableRef","shell","connectRef","fitAddonRef","handleContainerRef","terminal","scrollback","findAddon","loadAddon","fitAddon","fit","reset","SearchBox","onSearch","IconButton","TcpIp","serviceListenAddrs","setServiceListenAddrs","servicePortEnabled","setServicePortEnabled","servicePort","setServicePort","persistPortEnabled","setPersistPortEnabled","persistPort","setPersistPort","queryTcpIpInfo","listenAddrs","getProp","applyServicePort","setPort","disable","handleServicePortEnabledChange","handleServicePortChange","MessageBar","Toggle","inlineLabel","checked","onText","offText","addr","TextField","render","setDevice","routes","exact","product","model","fontSize","textAlign","paddingRight","borderRight","Nav","groups","links","route","to","getElementById"],"mappings":"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","file":"index.82d6e93b7b4dbd16d78c.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"2YZa\",1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Disposable } from './disposable';\nimport { EventListener, RemoveEventListener } from './event';\n\ninterface EventListenerInfo<TEvent, TResult = unknown> {\n    listener: EventListener<TEvent, any, any, TResult>;\n\n    thisArg: unknown;\n\n    args: unknown[];\n}\n\nexport class EventEmitter<TEvent, TResult = unknown> implements Disposable {\n    protected listeners: EventListenerInfo<TEvent, TResult>[] = [];\n\n    public constructor() {\n        this.event = this.event.bind(this);\n    }\n\n    public event(\n        listener: EventListener<TEvent, unknown, [], TResult>\n    ): RemoveEventListener;\n    public event<TThis, TArgs extends unknown[]>(\n        listener: EventListener<TEvent, TThis, TArgs, TResult>,\n        thisArg: TThis,\n        ...args: TArgs\n    ): RemoveEventListener;\n    public event<TThis, TArgs extends unknown[]>(\n        listener: EventListener<TEvent, TThis, TArgs, TResult>,\n        thisArg?: TThis,\n        ...args: TArgs\n    ): RemoveEventListener {\n        const info: EventListenerInfo<TEvent, TResult> = {\n            listener,\n            thisArg,\n            args,\n        };\n        this.listeners.push(info);\n\n        const remove: RemoveEventListener = () => {\n            const index = this.listeners.indexOf(info);\n            if (index > 0) {\n                this.listeners.splice(index, 1);\n            }\n        };\n        remove.dispose = remove;\n        return remove;\n    }\n\n    public fire(e: TEvent) {\n        for (const info of this.listeners.slice()) {\n            info.listener.apply(info.thisArg, [e, ...info.args]);\n        }\n    }\n\n    public dispose() {\n        this.listeners.length = 0;\n    }\n}\n","import { Event } from './event';\nimport { EventEmitter } from './event-emitter';\n\nexport type AsyncEventResult = void | Promise<void>;\n\nexport type AsyncEvent<TEvent> = Event<TEvent, AsyncEventResult>;\n\nexport class AsyncEventEmitter<TEvent> extends EventEmitter<TEvent, AsyncEventResult> {\n    public async fire(e: TEvent) {\n        for (const info of this.listeners) {\n            await info.listener.apply(info.thisArg, [e, ...info.args]);\n        }\n    }\n}\n","export interface Disposable {\n    dispose(): void;\n}\n\nexport class AutoDisposable implements Disposable {\n    private disposables: Disposable[] = [];\n\n    protected addDisposable<T extends Disposable>(disposable: T): T {\n        this.disposables.push(disposable);\n        return disposable;\n    }\n\n    public dispose() {\n        for (const disposable of this.disposables) {\n            disposable.dispose();\n        }\n\n        this.disposables = [];\n    }\n}\n\nexport class DisposableList extends AutoDisposable {\n    public add<T extends Disposable>(disposable: T): T {\n        return this.addDisposable(disposable);\n    }\n}\n","const BigInt0 = BigInt(0);\nconst BigInt1 = BigInt(1);\nconst BigInt2 = BigInt(2);\n\nconst BigInt2To64 = BigInt2 ** BigInt(64);\n\nexport function getBig(\n    buffer: ArrayBuffer,\n    offset = 0,\n    length = buffer.byteLength - offset\n): bigint {\n    const view = new DataView(buffer);\n\n    let result = BigInt0;\n\n    // Now `length` must be a multiplication of 8\n    // Support for arbitrary length can be easily added\n\n    for (let i = offset; i < offset + length; i += 8) {\n        result *= BigInt2To64;\n        const value = view.getBigUint64(i, false);\n        result += value;\n    }\n\n    return result;\n}\n\nexport function setBig(buffer: ArrayBuffer, value: bigint, offset: number = 0) {\n    const uint64Array: bigint[] = [];\n    while (value > BigInt0) {\n        uint64Array.push(BigInt.asUintN(64, value));\n        value /= BigInt2To64;\n    }\n\n    const view = new DataView(buffer);\n    for (let i = uint64Array.length - 1; i >= 0; i -= 1) {\n        view.setBigUint64(offset, uint64Array[i], false);\n        offset += 8;\n    }\n}\n\nexport function setBigLE(buffer: ArrayBuffer, value: bigint, offset = 0) {\n    const view = new DataView(buffer);\n    while (value > BigInt0) {\n        view.setBigUint64(offset, value, true);\n        offset += 8;\n        value /= BigInt2To64;\n    }\n}\n\n// These values are correct only if\n// modulus length is 2048 and\n// public exponent (e) is 65537\n// Anyway, that's how this library generates keys\n\n// To support other parameters,\n// a proper ASN.1 parser can be used\n\n// References:\n//\n//   https://tools.ietf.org/html/rfc8017#appendix-A.1.2\n//   PKCS #1: RSA Cryptography Specifications Version 2.2\n//     A.1.2.  RSA Private Key Syntax\n//\n//   https://lapo.it/asn1js/\n//   https://github.com/lapo-luchini/asn1js\n//   ASN.1 JavaScript decoder\n//\n//   https://www.itu.int/rec/T-REC-X.690-201508-I/en\n//   X.690: Specification of Distinguished Encoding Rules (DER)\n\nconst RsaPrivateKeyNOffset = 38;\nconst RsaPrivateKeyNLength = 2048 / 8;\nconst RsaPrivateKeyDOffset = 303;\nconst RsaPrivateKeyDLength = 2048 / 8;\n\nexport function parsePrivateKey(key: ArrayBuffer): [n: bigint, d: bigint] {\n    let n = getBig(key, RsaPrivateKeyNOffset, RsaPrivateKeyNLength);\n    let d = getBig(key, RsaPrivateKeyDOffset, RsaPrivateKeyDLength);\n\n    return [n, d];\n}\n\n// Taken from https://stackoverflow.com/a/51562038\n// I can't understand, but it does work\n// Only used with numbers less than 2^32 so doesn't need BigInt\nexport function modInverse(a: number, m: number) {\n    // validate inputs\n    [a, m] = [Number(a), Number(m)];\n    if (Number.isNaN(a) || Number.isNaN(m)) {\n        return NaN; // invalid input\n    }\n    a = (a % m + m) % m;\n    if (!a || m < 2) {\n        return NaN; // invalid input\n    }\n    // find the gcd\n    const s = [];\n    let b = m;\n    while (b) {\n        [a, b] = [b, a % b];\n        s.push({ a, b });\n    }\n    if (a !== 1) {\n        return NaN; // inverse does not exists\n    }\n    // find the inverse\n    let x = 1;\n    let y = 0;\n    for (let i = s.length - 2; i >= 0; --i) {\n        [x, y] = [y, x - y * Math.floor(s[i].a / s[i].b)];\n    }\n    return (y % m + m) % m;\n}\n\nexport function calculatePublicKeyLength() {\n    return 4 + 4 + 2048 / 8 + 2048 / 8 + 4;\n}\n\nexport function calculatePublicKey(\n    privateKey: ArrayBuffer\n): ArrayBuffer;\nexport function calculatePublicKey(\n    privateKey: ArrayBuffer,\n    output: ArrayBuffer,\n    outputOffset?: number\n): number;\nexport function calculatePublicKey(\n    privateKey: ArrayBuffer,\n    output?: ArrayBuffer,\n    outputOffset: number = 0\n): ArrayBuffer | number {\n    // Android has its own public key generation algorithm\n    // See https://github.com/aosp-mirror/platform_system_core/blob/e5c9bbd45381d7bd72fef232d1c6668946253ac8/libcrypto_utils/android_pubkey.cpp#L111\n\n    // The public key is an array of\n    //\n    // [\n    //   modulusLengthInWords, // 32-bit integer, a \"word\" is 32-bit so it must be 2048 / 8 / 4\n    //                         // Actually the comment in Android source code was wrong\n    //   n0inv,                // 32-bit integer, the modular inverse of (lower 32 bits of) n\n    //   modulus,              // n\n    //   rr,                   // Montgomery parameter R^2\n    //   exponent,             // 32-bit integer, must be 65537\n    // ]\n    //\n    // (All in little endian)\n    // See https://github.com/aosp-mirror/platform_system_core/blob/e5c9bbd45381d7bd72fef232d1c6668946253ac8/libcrypto_utils/android_pubkey.cpp#L38\n\n    // extract `n` from private key\n    const [n] = parsePrivateKey(privateKey);\n\n    let outputType: 'ArrayBuffer' | 'number';\n    const outputLength = calculatePublicKeyLength();\n    if (!output) {\n        output = new ArrayBuffer(outputLength);\n        outputType = 'ArrayBuffer';\n    } else {\n        if (output.byteLength - outputOffset < outputLength) {\n            throw new Error('output buffer is too small');\n        }\n\n        outputType = 'number';\n    }\n\n    const outputView = new DataView(output);\n\n    // modulusLengthInWords\n    outputView.setUint32(outputOffset, 2048 / 8 / 4, true);\n    outputOffset += 4;\n\n    // Calculate `n0inv`\n    // Don't know why need to multiple -1\n    // Didn't exist in Android codebase\n    const n0inv = modInverse(Number(BigInt.asUintN(32, n) * BigInt(-1)), 2 ** 32);\n    outputView.setUint32(outputOffset, n0inv, true);\n    outputOffset += 4;\n\n    // Write n\n    setBigLE(output, n, outputOffset);\n    outputOffset += 256;\n\n    // Calculate rr = (2^(rsa_size)) ^ 2 mod n\n    let rr = BigInt(2) ** BigInt(4096) % n;\n    setBigLE(output, rr, outputOffset);\n    outputOffset += 256;\n\n    // exponent\n    outputView.setUint32(outputOffset, 65537, true);\n    outputOffset += 4;\n\n    if (outputType === 'ArrayBuffer') {\n        return output;\n    } else {\n        return outputLength;\n    }\n}\n\n// Modular exponentiation\n// See https://en.wikipedia.org/wiki/Modular_exponentiation#Implementation_in_Lua\nexport function powMod(base: bigint, exponent: bigint, modulus: bigint): bigint {\n    if (modulus === BigInt1) {\n        return BigInt0;\n    }\n\n    let r = BigInt1;\n    base = base % modulus;\n\n    while (exponent > BigInt0) {\n        if (BigInt.asUintN(1, exponent) === BigInt1) {\n            r = r * base % modulus;\n        }\n\n        exponent >>= BigInt1;\n        base = base ** BigInt2 % modulus;\n    }\n\n    return r;\n}\n\nexport const Sha1DigestLength = 20;\n\nexport const Asn1Sequence = 0x30;\nexport const Asn1OctetString = 0x04;\nexport const Asn1Null = 0x05;\nexport const Asn1Oid = 0x06;\n\n// PKCS#1 SHA-1 hash digest info\nexport const Sha1DigestInfo = [\n    Asn1Sequence, 0x0d + Sha1DigestLength,\n    Asn1Sequence, 0x09,\n    // SHA-1 (1 3 14 3 2 26)\n    Asn1Oid, 0x05, 1 * 40 + 3, 14, 3, 2, 26,\n    Asn1Null, 0x00,\n    Asn1OctetString, Sha1DigestLength\n];\n\n// SubtleCrypto.sign() will hash the given data and sign the hash\n// But we don't need the hashing step\n// (In another word, ADB just requires the client to\n// encrypt the given data with its private key)\n// However SubtileCrypto.encrypt() doesn't accept 'RSASSA-PKCS1-v1_5' algorithm\n// So we need to implement the encryption by ourself\nexport function sign(privateKey: ArrayBuffer, data: ArrayBuffer): ArrayBuffer {\n    const [n, d] = parsePrivateKey(privateKey);\n\n    // PKCS#1 padding\n    const padded = new Uint8Array(256);\n    let index = 0;\n\n    padded[index] = 0;\n    index += 1;\n\n    padded[index] = 1;\n    index += 1;\n\n    const fillLength = padded.length - Sha1DigestInfo.length - data.byteLength - 1;\n    while (index < fillLength) {\n        padded[index] = 0xff;\n        index += 1;\n    }\n\n    padded[index] = 0;\n    index += 1;\n\n    padded.set(new Uint8Array(Sha1DigestInfo), index);\n    index += Sha1DigestInfo.length;\n\n    padded.set(new Uint8Array(data), index);\n\n    // Encryption\n    // signature = padded ** d % n\n    let signature = powMod(getBig(padded.buffer), d, n);\n\n    // Put into an ArrayBuffer\n    const result = new ArrayBuffer(256);\n    setBig(result, signature);\n\n    return result;\n}\n","export const BackingField = Symbol('BackingField');\n\nexport function getBackingField<T = unknown>(object: unknown, field: string): T {\n    return (object as any)[BackingField][field] as T;\n}\n\nexport function setBackingField(object: unknown, field: string, value: any): void {\n    (object as any)[BackingField][field] = value;\n}\n\nexport function defineSimpleAccessors(object: unknown, field: string): void {\n    Object.defineProperty(object, field, {\n        configurable: true,\n        enumerable: true,\n        get() { return getBackingField(object, field); },\n        set(value) { setBackingField(object, field, value); },\n    });\n}\n\nexport type WithBackingField<T> = T & { [BackingField]: any; };\n","import { getBackingField, setBackingField } from '../backing-field';\nimport { FieldDescriptorBase, FieldDescriptorBaseOptions } from './descriptor';\n\nexport namespace Array {\n    export const enum SubType {\n        ArrayBuffer,\n        String,\n    }\n\n    export type TypeScriptType<TType extends SubType = SubType> =\n        TType extends SubType.ArrayBuffer ? ArrayBuffer :\n        TType extends SubType.String ? string :\n        ArrayBuffer | string;\n\n    export interface BackingField {\n        buffer?: ArrayBuffer;\n\n        string?: string;\n    }\n\n    export function initialize(object: any, field: Array, value: BackingField): void {\n        switch (field.subType) {\n            case SubType.ArrayBuffer:\n                Object.defineProperty(object, field.name, {\n                    configurable: true,\n                    enumerable: true,\n                    get(): ArrayBuffer {\n                        return getBackingField<BackingField>(object, field.name).buffer!;\n                    },\n                    set(buffer: ArrayBuffer) {\n                        setBackingField(object, field.name, { buffer });\n                    },\n                });\n                break;\n            case SubType.String:\n                Object.defineProperty(object, field.name, {\n                    configurable: true,\n                    enumerable: true,\n                    get(): string {\n                        return getBackingField<BackingField>(object, field.name).string!;\n                    },\n                    set(string: string) {\n                        setBackingField(object, field.name, { string });\n                    },\n                });\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n        setBackingField(object, field.name, value);\n    }\n}\n\nexport interface Array<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TResultObject = {},\n    TInitObject = {},\n    TOptions extends FieldDescriptorBaseOptions = FieldDescriptorBaseOptions\n    > extends FieldDescriptorBase<\n    TName,\n    TResultObject,\n    TInitObject,\n    TOptions\n    > {\n    subType: TType;\n}\n","import { StructDeserializationContext, StructOptions, StructSerializationContext } from '../types';\nimport { FieldDescriptorBase, FieldType } from './descriptor';\n\nexport interface FieldTypeDefinition<\n    TDescriptor extends FieldDescriptorBase = FieldDescriptorBase,\n    TInitExtra = undefined,\n    > {\n    type: FieldType | string;\n\n    deserialize(options: {\n        context: StructDeserializationContext;\n        field: TDescriptor;\n        object: any;\n        options: StructOptions;\n    }): Promise<{ value: any; extra?: TInitExtra; }>;\n\n    getSize(options: {\n        field: TDescriptor;\n        options: StructOptions;\n    }): number;\n\n    getDynamicSize?(options: {\n        context: StructSerializationContext;\n        field: TDescriptor;\n        object: any;\n        options: StructOptions;\n    }): number;\n\n    initialize?(options: {\n        context: StructSerializationContext;\n        field: TDescriptor;\n        value: any;\n        extra?: TInitExtra;\n        object: any;\n        options: StructOptions;\n    }): void;\n\n    serialize(options: {\n        context: StructSerializationContext;\n        dataView: DataView;\n        field: TDescriptor;\n        object: any;\n        offset: number;\n        options: StructOptions;\n    }): void;\n}\n\nconst registry: Record<number | string, FieldTypeDefinition<any, any>> = {};\n\nexport function getFieldTypeDefinition(type: FieldType | string): FieldTypeDefinition<any, any> {\n    return registry[type];\n}\n\nexport function registerFieldTypeDefinition<\n    TDescriptor extends FieldDescriptorBase,\n    TInitExtra,\n    TDefinition extends FieldTypeDefinition<TDescriptor, TInitExtra>\n>(\n    _field: TDescriptor,\n    _initExtra: TInitExtra,\n    methods: TDefinition\n): void {\n    registry[methods.type] = methods;\n}\n","import { placeholder } from '../utils';\nimport { registerFieldTypeDefinition } from './definition';\nimport { FieldDescriptorBase, FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace Number {\n    export type TypeScriptType<T extends SubType> =\n        T extends SubType.Uint64 ? bigint :\n        T extends SubType.Int64 ? bigint :\n        number;\n\n    export const enum SubType {\n        Uint8,\n        Uint16,\n        Int32,\n        Uint32,\n        Uint64,\n        Int64,\n    }\n\n    export const SizeMap: Record<SubType, number> = {\n        [SubType.Uint8]: 1,\n        [SubType.Uint16]: 2,\n        [SubType.Int32]: 4,\n        [SubType.Uint32]: 4,\n        [SubType.Uint64]: 8,\n        [SubType.Int64]: 8,\n    };\n\n    export const DataViewGetterMap = {\n        [SubType.Uint8]: 'getUint8',\n        [SubType.Uint16]: 'getUint16',\n        [SubType.Int32]: 'getInt32',\n        [SubType.Uint32]: 'getUint32',\n        [SubType.Uint64]: 'getBigUint64',\n        [SubType.Int64]: 'getBigInt64',\n    } as const;\n\n    export const DataViewSetterMap = {\n        [SubType.Uint8]: 'setUint8',\n        [SubType.Uint16]: 'setUint16',\n        [SubType.Int32]: 'setInt32',\n        [SubType.Uint32]: 'setUint32',\n        [SubType.Uint64]: 'setBigUint64',\n        [SubType.Int64]: 'setBigInt64',\n    } as const;\n}\n\nexport interface Number<\n    TName extends string = string,\n    TSubType extends Number.SubType = Number.SubType,\n    TTypeScriptType = Number.TypeScriptType<TSubType>,\n    TOptions extends FieldDescriptorBaseOptions = FieldDescriptorBaseOptions\n    > extends FieldDescriptorBase<\n    TName,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType>,\n    TOptions\n    > {\n    type: FieldType.Number;\n\n    subType: TSubType;\n}\n\nregisterFieldTypeDefinition(\n    placeholder<Number>(),\n    undefined,\n    {\n        type: FieldType.Number,\n\n        getSize({ field }) {\n            return Number.SizeMap[field.subType];\n        },\n\n        async deserialize({ context, field, options }) {\n            const buffer = await context.read(Number.SizeMap[field.subType]);\n            const view = new DataView(buffer);\n            const value = view[Number.DataViewGetterMap[field.subType]](\n                0,\n                options.littleEndian\n            );\n            return { value };\n        },\n\n        serialize({ dataView, field, object, offset, options }) {\n            (dataView[Number.DataViewSetterMap[field.subType]] as any)(\n                offset,\n                object[field.name],\n                options.littleEndian\n            );\n        },\n    }\n);\n","import { getBackingField, setBackingField } from '../backing-field';\nimport { StructSerializationContext } from '../types';\nimport { Identity, placeholder } from '../utils';\nimport { Array } from './array';\nimport { registerFieldTypeDefinition } from './definition';\nimport { FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace VariableLengthArray {\n    export type TypeScriptTypeCanBeUndefined<\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > =\n        TEmptyBehavior extends EmptyBehavior.Empty ? never :\n        undefined;\n\n    export type TypeScriptType<\n        TType extends Array.SubType = Array.SubType,\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > =\n        Identity<\n            Array.TypeScriptType<TType> |\n            TypeScriptTypeCanBeUndefined<TEmptyBehavior>\n        >;\n\n    export const enum EmptyBehavior {\n        Undefined,\n        Empty,\n    }\n\n    export type KeyOfType<TObject, TProperty> =\n        {\n            [TKey in keyof TObject]:\n            TObject[TKey] extends TProperty ? TKey : never\n        }[keyof TObject];\n\n    export interface Options<\n        TInit = object,\n        TLengthField extends KeyOfType<TInit, number | string> = any,\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > extends FieldDescriptorBaseOptions {\n        lengthField: TLengthField;\n\n        emptyBehavior?: TEmptyBehavior;\n    }\n\n    export function getLengthBackingField(\n        object: any,\n        field: VariableLengthArray\n    ): number | undefined {\n        return getBackingField<number>(object, field.options.lengthField);\n    }\n\n    export function setLengthBackingField(\n        object: any,\n        field: VariableLengthArray,\n        value: number | undefined\n    ) {\n        setBackingField(object, field.options.lengthField, value);\n    }\n\n    export function initialize(\n        object: any,\n        field: VariableLengthArray,\n        value: Array.BackingField,\n        context: StructSerializationContext,\n    ): void {\n        Array.initialize(object, field, value);\n        const descriptor = Object.getOwnPropertyDescriptor(object, field.name)!;\n        delete object[field.name];\n\n        switch (field.subType) {\n            case Array.SubType.ArrayBuffer:\n                Object.defineProperty(object, field.name, {\n                    ...descriptor,\n                    set(buffer: ArrayBuffer | undefined) {\n                        descriptor.set!.call(object, buffer);\n                        setLengthBackingField(object, field, buffer?.byteLength ?? 0);\n                    },\n                });\n\n                delete object[field.options.lengthField];\n                Object.defineProperty(object, field.options.lengthField, {\n                    configurable: true,\n                    enumerable: true,\n                    get() {\n                        return getLengthBackingField(object, field);\n                    }\n                });\n                break;\n            case Array.SubType.String:\n                Object.defineProperty(object, field.name, {\n                    ...descriptor,\n                    set(string: string | undefined) {\n                        descriptor.set!.call(object, string);\n                        if (string) {\n                            setLengthBackingField(object, field, undefined);\n                        } else {\n                            setLengthBackingField(object, field, 0);\n                        }\n                    },\n                });\n\n                delete object[field.options.lengthField];\n                Object.defineProperty(object, field.options.lengthField, {\n                    configurable: true,\n                    enumerable: true,\n                    get() {\n                        let value = getLengthBackingField(object, field);\n                        if (value === undefined) {\n                            const backingField = getBackingField<Array.BackingField>(object, field.name);\n                            const buffer = context.encodeUtf8(backingField.string!);\n                            backingField.buffer = buffer;\n\n                            value = buffer.byteLength;\n                            setLengthBackingField(object, field, value);\n                        }\n                        return value;\n                    }\n                });\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n        setBackingField(object, field.name, value);\n        if (value.buffer) {\n            setLengthBackingField(object, field, value.buffer.byteLength);\n        }\n    }\n}\n\nexport interface VariableLengthArray<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TInit = object,\n    TLengthField extends VariableLengthArray.KeyOfType<TInit, number | string> = any,\n    TEmptyBehavior extends VariableLengthArray.EmptyBehavior = VariableLengthArray.EmptyBehavior,\n    TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>,\n    TOptions extends VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior> = VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>\n    > extends Array<\n    TName,\n    TType,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType> & Record<TLengthField, never>,\n    TOptions\n    > {\n    type: FieldType.VariableLengthArray;\n\n    options: TOptions;\n}\n\nregisterFieldTypeDefinition(\n    placeholder<VariableLengthArray>(),\n    placeholder<ArrayBuffer>(),\n    {\n        type: FieldType.VariableLengthArray,\n\n        async deserialize(\n            { context, field, object }\n        ): Promise<{ value: string | ArrayBuffer | undefined, extra?: ArrayBuffer; }> {\n            let length = object[field.options.lengthField];\n            if (typeof length === 'string') {\n                length = Number.parseInt(length, 10);\n            }\n\n            if (length === 0) {\n                if (field.options.emptyBehavior === VariableLengthArray.EmptyBehavior.Empty) {\n                    switch (field.subType) {\n                        case Array.SubType.ArrayBuffer:\n                            return { value: new ArrayBuffer(0) };\n                        case Array.SubType.String:\n                            return { value: '', extra: new ArrayBuffer(0) };\n                        default:\n                            throw new Error('Unknown type');\n                    }\n                } else {\n                    return { value: undefined };\n                }\n            }\n\n            const buffer = await context.read(length);\n            switch (field.subType) {\n                case Array.SubType.ArrayBuffer:\n                    return { value: buffer };\n                case Array.SubType.String:\n                    return {\n                        value: context.decodeUtf8(buffer),\n                        extra: buffer\n                    };\n                default:\n                    throw new Error('Unknown type');\n            }\n        },\n\n        getSize() { return 0; },\n\n        getDynamicSize({ field, object }) {\n            return object[field.options.lengthField];\n        },\n\n        initialize({ context, extra, field, object, value }) {\n            const backingField: Array.BackingField = {};\n            if (typeof value === 'string') {\n                backingField.string = value;\n                if (extra) {\n                    backingField.buffer = extra;\n                }\n            } else {\n                backingField.buffer = value;\n            }\n            Array.initialize(object, field, backingField);\n            VariableLengthArray.initialize(object, field, backingField, context);\n        },\n\n        serialize({ dataView, field, object, offset }) {\n            const backingField = getBackingField<Array.BackingField>(object, field.name);\n            new Uint8Array(dataView.buffer).set(\n                new Uint8Array(backingField.buffer!),\n                offset\n            );\n        },\n    }\n);\n","import { getBackingField } from '../backing-field';\nimport { placeholder } from '../utils';\nimport { Array } from './array';\nimport { registerFieldTypeDefinition } from './definition';\nimport { FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace FixedLengthArray {\n    export interface Options extends FieldDescriptorBaseOptions {\n        length: number;\n    }\n}\n\nexport interface FixedLengthArray<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TTypeScriptType = Array.TypeScriptType<TType>,\n    TOptions extends FixedLengthArray.Options = FixedLengthArray.Options\n    > extends Array<\n    TName,\n    TType,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType>,\n    TOptions\n    > {\n    type: FieldType.FixedLengthArray;\n\n    options: TOptions;\n};\n\nregisterFieldTypeDefinition(\n    placeholder<FixedLengthArray>(),\n    placeholder<ArrayBuffer>(),\n    {\n        type: FieldType.FixedLengthArray,\n\n        async deserialize(\n            { context, field }\n        ): Promise<{ value: string | ArrayBuffer, extra?: ArrayBuffer; }> {\n            const buffer = await context.read(field.options.length);\n\n            switch (field.subType) {\n                case Array.SubType.ArrayBuffer:\n                    return { value: buffer };\n                case Array.SubType.String:\n                    return {\n                        value: context.decodeUtf8(buffer),\n                        extra: buffer\n                    };\n                default:\n                    throw new Error('Unknown type');\n            }\n        },\n\n        getSize({ field }) {\n            return field.options.length;\n        },\n\n        initialize({ extra, field, object, value }) {\n            const backingField: Array.BackingField = {};\n            if (typeof value === 'string') {\n                backingField.string = value;\n                if (extra) {\n                    backingField.buffer = extra;\n                }\n            } else {\n                backingField.buffer = value;\n            }\n            Array.initialize(object, field, backingField);\n        },\n\n        serialize({ context, dataView, field, object, offset }) {\n            const backingField = getBackingField<Array.BackingField>(object, field.name);\n            backingField.buffer ??=\n                context.encodeUtf8(backingField.string!);\n\n            new Uint8Array(dataView.buffer).set(\n                new Uint8Array(backingField.buffer),\n                offset\n            );\n        }\n    }\n);\n","export interface StructSerializationContext {\n    encodeUtf8(input: string): ArrayBuffer;\n}\n\nexport interface StructDeserializationContext extends StructSerializationContext {\n    decodeUtf8(buffer: ArrayBuffer): string;\n\n    read(length: number): ArrayBuffer | Promise<ArrayBuffer>;\n}\n\nexport interface StructOptions {\n    littleEndian: boolean;\n}\n\nexport const StructDefaultOptions: Readonly<StructOptions> = {\n    littleEndian: false,\n};\n","import { BackingField, defineSimpleAccessors, setBackingField, WithBackingField } from './backing-field';\nimport { Array, FieldDescriptorBase, FieldDescriptorBaseOptions, FieldType, FieldTypeDefinition, FixedLengthArray, getFieldTypeDefinition, Number, VariableLengthArray } from './field';\nimport { StructDefaultOptions, StructDeserializationContext, StructOptions, StructSerializationContext } from './types';\nimport { Evaluate, Identity, OmitNever, Overwrite } from './utils';\n\nexport type StructValueType<T> =\n    T extends { deserialize(context: StructDeserializationContext): Promise<infer R>; } ? R : never;\n\nexport type StructInitType<T extends Struct<object, object, object, unknown>> =\n    T extends { create(value: infer R, ...args: any): any; } ? Evaluate<R> : never;\n\ninterface AddArrayFieldDescriptor<\n    TResult extends object,\n    TInit extends object,\n    TExtra extends object,\n    TAfterParsed\n    > {\n    <\n        TName extends string,\n        TType extends Array.SubType,\n        TTypeScriptType = Array.TypeScriptType<TType>\n        >(\n        name: TName,\n        type: TType,\n        options: FixedLengthArray.Options,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        FixedLengthArray<\n            TName,\n            TType,\n            TTypeScriptType\n        >\n    >;\n\n    <\n        TName extends string,\n        TType extends Array.SubType,\n        TLengthField extends VariableLengthArray.KeyOfType<TInit, number | string>,\n        TEmptyBehavior extends VariableLengthArray.EmptyBehavior,\n        TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>\n        >(\n        name: TName,\n        type: TType,\n        options: VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        VariableLengthArray<\n            TName,\n            TType,\n            TInit,\n            TLengthField,\n            TEmptyBehavior,\n            TTypeScriptType\n        >\n    >;\n}\n\ninterface AddArraySubTypeFieldDescriptor<\n    TResult extends object,\n    TInit extends object,\n    TExtra extends object,\n    TAfterParsed,\n    TType extends Array.SubType\n    > {\n    <\n        TName extends string,\n        TTypeScriptType = Array.TypeScriptType<TType>\n        >(\n        name: TName,\n        options: FixedLengthArray.Options,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        FixedLengthArray<\n            TName,\n            TType,\n            TTypeScriptType\n        >\n    >;\n\n    <\n        TName extends string,\n        TLengthField extends VariableLengthArray.KeyOfType<TInit, number | string>,\n        TEmptyBehavior extends VariableLengthArray.EmptyBehavior,\n        TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>\n        >(\n        name: TName,\n        options: VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>,\n        _typescriptType?: TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        VariableLengthArray<\n            TName,\n            TType,\n            TInit,\n            TLengthField,\n            TEmptyBehavior,\n            TTypeScriptType\n        >\n    >;\n}\n\ntype MergeStruct<\n    TResult extends object,\n    TInit extends object,\n    TExtra extends object,\n    TAfterParsed,\n    TDescriptor extends FieldDescriptorBase\n    > =\n    Identity<Struct<\n        Evaluate<TResult & Exclude<TDescriptor['resultObject'], undefined>>,\n        OmitNever<TInit & Exclude<TDescriptor['initObject'], undefined>>,\n        TExtra,\n        TAfterParsed\n    >>;\n\nexport type StructAfterParsed<TResult, TAfterParsed> =\n    (this: WithBackingField<TResult>, object: WithBackingField<TResult>) => TAfterParsed;\n\nexport default class Struct<\n    TResult extends object = {},\n    TInit extends object = {},\n    TExtra extends object = {},\n    TAfterParsed = undefined,\n    > {\n    public readonly options: Readonly<StructOptions>;\n\n    private _size = 0;\n    public get size() { return this._size; }\n\n    private fields: FieldDescriptorBase[] = [];\n\n    private _extra: PropertyDescriptorMap = {};\n\n    private _afterParsed?: StructAfterParsed<any, any>;\n\n    public constructor(options: Partial<StructOptions> = StructDefaultOptions) {\n        this.options = { ...StructDefaultOptions, ...options };\n    }\n\n    private clone(): Struct<any, any, any, any> {\n        const result = new Struct<any, any, any, any>(this.options);\n        result.fields = this.fields.slice();\n        result._size = this._size;\n        result._extra = this._extra;\n        result._afterParsed = this._afterParsed;\n        return result;\n    }\n\n    public field<TDescriptor extends FieldDescriptorBase>(\n        field: TDescriptor,\n    ): MergeStruct<TResult, TInit, TExtra, TAfterParsed, TDescriptor> {\n        const result = this.clone();\n        result.fields.push(field);\n\n        const definition = getFieldTypeDefinition(field.type);\n        const size = definition.getSize({ field, options: this.options });\n        result._size += size;\n\n        return result;\n    }\n\n    private number<\n        TName extends string,\n        TSubType extends Number.SubType = Number.SubType,\n        TTypeScriptType = Number.TypeScriptType<TSubType>\n    >(\n        name: TName,\n        type: TSubType,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.field<Number<TName, TSubType, TTypeScriptType>>({\n            type: FieldType.Number,\n            name,\n            subType: type,\n            options,\n        });\n    }\n\n    public uint8<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType<Number.SubType.Uint8>\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Uint8,\n            options,\n            _typescriptType\n        );\n    }\n\n    public uint16<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType<Number.SubType.Uint16>\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Uint16,\n            options,\n            _typescriptType\n        );\n    }\n\n    public int32<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType<Number.SubType.Int32>\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Int32,\n            options,\n            _typescriptType\n        );\n    }\n\n    public uint32<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType<Number.SubType.Uint32>\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Uint32,\n            options,\n            _typescriptType\n        );\n    }\n\n    public uint64<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType<Number.SubType.Uint64>\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Uint64,\n            options,\n            _typescriptType\n        );\n    }\n\n    public int64<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType<Number.SubType.Int64>\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Int64,\n            options,\n            _typescriptType\n        );\n    }\n\n    private array: AddArrayFieldDescriptor<TResult, TInit, TExtra, TAfterParsed> = (\n        name: string,\n        type: Array.SubType,\n        options: FixedLengthArray.Options | VariableLengthArray.Options\n    ): Struct<any, any, any, any> => {\n        if ('length' in options) {\n            return this.field<FixedLengthArray>({\n                type: FieldType.FixedLengthArray,\n                name,\n                subType: type,\n                options: options,\n            });\n        } else {\n            return this.field<VariableLengthArray>({\n                type: FieldType.VariableLengthArray,\n                name,\n                subType: type,\n                options: options,\n            });\n        }\n    };\n\n    public arrayBuffer: AddArraySubTypeFieldDescriptor<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        Array.SubType.ArrayBuffer\n    > = <TName extends string>(\n        name: TName,\n        options: any\n    ) => {\n            return this.array(name, Array.SubType.ArrayBuffer, options);\n        };\n\n    public string: AddArraySubTypeFieldDescriptor<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        Array.SubType.String\n    > = <TName extends string>(\n        name: TName,\n        options: any\n    ) => {\n            return this.array(name, Array.SubType.String, options);\n        };\n\n    public extra<TValue extends Record<\n        Exclude<\n            keyof TValue,\n            Exclude<keyof TValue, keyof TResult>>,\n        never\n    >>(\n        value: TValue & ThisType<WithBackingField<Overwrite<Overwrite<TExtra, TValue>, TResult>>>\n    ): Struct<\n        TResult,\n        TInit,\n        Overwrite<TExtra, TValue>,\n        TAfterParsed\n    > {\n        const result = this.clone();\n        result._extra = { ...result._extra, ...Object.getOwnPropertyDescriptors(value) };\n        return result;\n    }\n\n    public afterParsed(\n        callback: StructAfterParsed<TResult, never>\n    ): Struct<TResult, TInit, TExtra, never>;\n    public afterParsed(\n        callback?: StructAfterParsed<TResult, void>\n    ): Struct<TResult, TInit, TExtra, undefined>;\n    public afterParsed<TAfterParsed>(\n        callback?: StructAfterParsed<TResult, TAfterParsed>\n    ): Struct<TResult, TInit, TExtra, TAfterParsed>;\n    public afterParsed(\n        callback?: StructAfterParsed<TResult, any>\n    ) {\n        const result = this.clone();\n        result._afterParsed = callback;\n        return result;\n    }\n\n    private initializeField(\n        context: StructSerializationContext,\n        field: FieldDescriptorBase,\n        fieldTypeDefinition: FieldTypeDefinition<any, any>,\n        object: any,\n        value: any,\n        extra?: any\n    ) {\n        if (fieldTypeDefinition.initialize) {\n            fieldTypeDefinition.initialize({\n                context,\n                extra,\n                field,\n                object,\n                options: this.options,\n                value,\n            });\n        } else {\n            setBackingField(object, field.name, value);\n            defineSimpleAccessors(object, field.name);\n        }\n    }\n\n    public create(init: TInit, context: StructSerializationContext): Overwrite<TExtra, TResult> {\n        const object: any = {\n            [BackingField]: {},\n        };\n        Object.defineProperties(object, this._extra);\n\n        for (const field of this.fields) {\n            const fieldTypeDefinition = getFieldTypeDefinition(field.type);\n            this.initializeField(\n                context,\n                field,\n                fieldTypeDefinition,\n                object,\n                (init as any)[field.name]\n            );\n        }\n\n        return object;\n    }\n\n    public async deserialize(\n        context: StructDeserializationContext\n    ): Promise<TAfterParsed extends undefined ? Overwrite<TExtra, TResult> : TAfterParsed> {\n        const object: any = {\n            [BackingField]: {},\n        };\n        Object.defineProperties(object, this._extra);\n\n        for (const field of this.fields) {\n            const fieldTypeDefinition = getFieldTypeDefinition(field.type);\n            const { value, extra } = await fieldTypeDefinition.deserialize({\n                context,\n                field,\n                object,\n                options: this.options,\n            });\n            this.initializeField(\n                context,\n                field,\n                fieldTypeDefinition,\n                object,\n                value,\n                extra\n            );\n        }\n\n        if (this._afterParsed) {\n            const result = this._afterParsed.call(object, object);\n            if (result) {\n                return result;\n            }\n        }\n\n        return object;\n    }\n\n    public serialize(init: TInit, context: StructSerializationContext): ArrayBuffer {\n        const object = this.create(init, context) as any;\n\n        let size = this._size;\n        let fieldSize: number[] = [];\n        for (let i = 0; i < this.fields.length; i += 1) {\n            const field = this.fields[i];\n            const type = getFieldTypeDefinition(field.type);\n            if (type.getDynamicSize) {\n                fieldSize[i] = type.getDynamicSize({\n                    context,\n                    field,\n                    object,\n                    options: this.options,\n                });\n                size += fieldSize[i];\n            } else {\n                fieldSize[i] = type.getSize({ field, options: this.options });\n            }\n        }\n\n        const buffer = new ArrayBuffer(size);\n        const dataView = new DataView(buffer);\n        let offset = 0;\n        for (let i = 0; i < this.fields.length; i += 1) {\n            const field = this.fields[i];\n            const type = getFieldTypeDefinition(field.type);\n            type.serialize({\n                context,\n                dataView,\n                field,\n                object,\n                offset,\n                options: this.options,\n            });\n            offset += fieldSize[i];\n        }\n        return buffer;\n    }\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { Disposable } from '@yume-chan/event';\n\nexport class AutoResetEvent implements Disposable {\n    private readonly list: PromiseResolver<void>[] = [];\n\n    private blocking: boolean;\n\n    public constructor(initialSet = false) {\n        this.blocking = initialSet;\n    }\n\n    public wait(): Promise<void> {\n        if (!this.blocking) {\n            this.blocking = true;\n\n            if (this.list.length === 0) {\n                return Promise.resolve();\n            }\n        }\n\n        const resolver = new PromiseResolver<void>();\n        this.list.push(resolver);\n        return resolver.promise;\n    }\n\n    public notify() {\n        if (this.list.length !== 0) {\n            this.list.pop()!.resolve();\n        } else {\n            this.blocking = false;\n        }\n    }\n\n    public dispose() {\n        for (const item of this.list) {\n            item.reject(new Error('The AutoResetEvent has been disposed'));\n        }\n        this.list.length = 0;\n    }\n}\n","interface Base64CharRange {\n    start: number;\n\n    length: number;\n\n    end: number;\n\n    offset: number;\n}\n\nlet ranges: Base64CharRange[] = [];\nconst chars: number[] = [];\nconst padding = '='.charCodeAt(0);\n\nlet offset = 0;\nfunction addRange(start: string, end: string) {\n    const startCharCode = start.charCodeAt(0);\n    const endCharCode = end.charCodeAt(0);\n    const length = endCharCode - startCharCode + 1;\n\n    for (let i = startCharCode; i <= endCharCode; i += 1) {\n        chars.push(i);\n    }\n\n    ranges.push({\n        start: startCharCode,\n        length: length,\n        end: endCharCode,\n        offset: startCharCode - offset,\n    });\n\n    offset += length;\n}\n\naddRange('A', 'Z');\naddRange('a', 'z');\naddRange('0', '9');\naddRange('+', '+');\naddRange('/', '/');\n\nranges = ranges.sort((a, b) => a.end - b.end);\n\nfunction toValue(char: string): number {\n    const charCode = char.charCodeAt(0);\n\n    let start = 0;\n    let end = ranges.length - 1;\n    let i = end >> 1;\n\n    while (true) {\n        const range = ranges[i];\n        if (charCode < range.start) {\n            end = i - 1;\n        } else if (charCode > range.end) {\n            start = i + 1;\n        } else {\n            return charCode - range.offset;\n        }\n        i = (start + end) >> 1;\n    }\n}\n\nexport function calculateBase64EncodedLength(inputLength: number): number {\n    const paddingLength = inputLength % 3;\n    return (inputLength + 3 - paddingLength) / 3 * 4;\n}\n\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    inputOffset?: number,\n    inputLength?: number,\n): ArrayBuffer;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    output: ArrayBuffer | Uint8Array,\n    outputOffset?: number\n): number;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    inputOffset: number,\n    output: ArrayBuffer | Uint8Array,\n    outputOffset?: number\n): number;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    inputOffset: number,\n    inputLength: number,\n    output: ArrayBuffer | Uint8Array,\n    outputOffset?: number\n): number;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    arg1?: number | ArrayBuffer | Uint8Array,\n    arg2?: number | ArrayBuffer | Uint8Array,\n    _arg3?: number | ArrayBuffer | Uint8Array,\n    _arg4?: number,\n): ArrayBuffer | Uint8Array | number {\n    if (input instanceof ArrayBuffer) {\n        input = new Uint8Array(input);\n    }\n\n    // Because `Uint8Array` is type compatible with `ArrayBuffer`,\n    // TypeScript doesn't correctly narrow `input` to `Uint8Array` when assigning.\n    // Manually eliminate `ArrayBuffer` from `input` with a type guard.\n    if (input instanceof ArrayBuffer) {\n        return input;\n    }\n\n    let inputOffset: number;\n    let inputLength: number;\n    let output: Uint8Array;\n    let outputOffset: number;\n\n    let outputArgumentIndex: number;\n    if (typeof arg1 !== 'number') {\n        inputOffset = 0;\n        inputLength = input.byteLength;\n        outputArgumentIndex = 1;\n    } else {\n        inputOffset = arg1;\n\n        if (typeof arg2 !== 'number') {\n            inputLength = input.byteLength - inputOffset;\n            outputArgumentIndex = 2;\n        } else {\n            inputLength = arg2;\n            outputArgumentIndex = 3;\n        }\n    }\n\n    const extraBytes = inputLength % 3;\n    const outputLength = (inputLength + 3 - extraBytes) / 3 * 4;\n\n    let maybeOutput: ArrayBuffer | Uint8Array | undefined = arguments[outputArgumentIndex];\n    let outputType: 'ArrayBuffer' | 'number';\n    if (maybeOutput) {\n        outputOffset = arguments[outputArgumentIndex + 1] ?? 0;\n\n        if (maybeOutput.byteLength - outputOffset < outputLength) {\n            throw new Error('output buffer is too small');\n        }\n\n        if (maybeOutput instanceof ArrayBuffer) {\n            output = new Uint8Array(maybeOutput);\n        } else {\n            output = maybeOutput;\n        }\n\n        outputType = 'number';\n    } else {\n        const buffer = new ArrayBuffer(outputLength);\n        output = new Uint8Array(buffer);\n        outputOffset = 0;\n        outputType = 'ArrayBuffer';\n    }\n\n    // Because `Uint8Array` is type compatible with `ArrayBuffer`,\n    // TypeScript doesn't correctly narrow `output` to `Uint8Array` when assigning.\n    // Manually eliminate `ArrayBuffer` from `output` with a type guard.\n    if (output instanceof ArrayBuffer) {\n        return output;\n    }\n\n    if (input.buffer === output.buffer) {\n        const bufferInputStart = input.byteOffset + inputOffset;\n        const bufferOutputStart = output.byteOffset + outputOffset;\n        if (bufferOutputStart < bufferInputStart - 1) {\n            const bufferOutputEnd = bufferOutputStart + outputLength;\n            if (bufferOutputEnd >= bufferInputStart) {\n                throw new Error('input and output buffer can not be overlapping');\n            }\n        }\n    }\n\n    let inputIndex = inputOffset + inputLength - 1;\n    let outputIndex = outputOffset + outputLength - 1;\n\n    if (extraBytes === 1) {\n        // aaaaaabb\n        const x = input[inputIndex];\n        inputIndex -= 1;\n\n        output[outputIndex] = padding;\n        outputIndex -= 1;\n\n        output[outputIndex] = padding;\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((x & 0b11) << 4)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[x >> 2];\n        outputIndex -= 1;\n    } else if (extraBytes === 2) {\n        // bbbbcccc\n        const y = input[inputIndex];\n        inputIndex -= 1;\n\n        // aaaaaabb\n        const x = input[inputIndex];\n        inputIndex -= 1;\n\n        output[outputIndex] = padding;\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((y & 0b1111) << 2)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((x & 0b11) << 4) | (y >> 4)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[x >> 2];\n        outputIndex -= 1;\n    }\n\n    while (inputIndex >= inputOffset) {\n        // ccdddddd\n        const z = input[inputIndex];\n        inputIndex -= 1;\n\n        // bbbbcccc\n        const y = input[inputIndex];\n        inputIndex -= 1;\n\n        // aaaaaabb\n        const x = input[inputIndex];\n        inputIndex -= 1;\n\n        output[outputIndex] = chars[z & 0b111111];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((y & 0b1111) << 2) | (z >> 6)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((x & 0b11) << 4) | (y >> 4)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[x >> 2];\n        outputIndex -= 1;\n    }\n\n    if (outputType === 'ArrayBuffer') {\n        return output.buffer;\n    } else {\n        return outputLength;\n    }\n}\n\nexport function decodeBase64(input: string): ArrayBuffer {\n    let padding: number;\n    if (input[input.length - 2] === '=') {\n        padding = 2;\n    } else if (input[input.length - 1] === '=') {\n        padding = 1;\n    } else {\n        padding = 0;\n    }\n\n    const result = new Uint8Array(input.length / 4 * 3 - padding);\n    let sIndex = 0;\n    let dIndex = 0;\n\n    while (sIndex < input.length - (padding !== 0 ? 4 : 0)) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const c = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const d = toValue(input[sIndex]);\n        sIndex += 1;\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n        dIndex += 1;\n\n        result[dIndex] = ((b & 0b1111) << 4) | ((c & 0b11_1100) >> 2);\n        dIndex += 1;\n\n        result[dIndex] = ((c & 0b11) << 6) | d;\n        dIndex += 1;\n    }\n\n    if (padding === 1) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const c = toValue(input[sIndex]);\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n        dIndex += 1;\n\n        result[dIndex] = ((b & 0b1111) << 4) | ((c & 0b11_1100) >> 2);\n    } else if (padding === 2) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n    }\n\n    return result.buffer;\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { EventEmitter } from '@yume-chan/event';\n\nexport interface EventQueueOptions {\n    maxWaitCount: number;\n\n    highWaterMark: number;\n\n    lowWaterMark: number;\n}\n\nexport const EventQueueDefaultOptions: EventQueueOptions = {\n    maxWaitCount: Infinity,\n    highWaterMark: 10,\n    lowWaterMark: 0,\n};\n\nexport class EventQueue<T> {\n    private options: EventQueueOptions;\n\n    private pullQueue: PromiseResolver<T>[] = [];\n\n    private pushQueue: [value: T, size: number][] = [];\n\n    private ended = false;\n\n    private waterMark = 0;\n\n    private pendingLowWaterEvent = false;\n\n    private lowWaterEvent = new EventEmitter<void>();\n\n    public get onLowWater() { return this.lowWaterEvent.event; }\n\n    public constructor(options: Partial<EventQueueOptions> = EventQueueDefaultOptions) {\n        this.options = { ...EventQueueDefaultOptions, ...options };\n    }\n\n    public push(value: T, size = 1): boolean {\n        if (this.ended) {\n            return true;\n        }\n\n        if (this.pullQueue.length) {\n            this.pullQueue.shift()!.resolve(value);\n            return true;\n        }\n\n        this.pushQueue.push([value, size]);\n        this.waterMark += size;\n        if (this.waterMark < this.options.highWaterMark) {\n            return true;\n        }\n\n        this.pendingLowWaterEvent = true;\n        return false;\n    }\n\n    public next(): Promise<T> {\n        if (this.pushQueue.length) {\n            const [value, size] = this.pushQueue.shift()!;\n            this.waterMark -= size;\n            if (this.pendingLowWaterEvent &&\n                this.waterMark <= this.options.lowWaterMark) {\n                this.lowWaterEvent.fire();\n            }\n            return Promise.resolve(value);\n        }\n\n        if (this.ended) {\n            return Promise.reject(new Error('The EventQueue has already ended'));\n        }\n\n        if (this.pullQueue.length === this.options.maxWaitCount - 1) {\n            throw new Error('Max wait count exceeded');\n        }\n\n        const resolver = new PromiseResolver<T>();\n        this.pullQueue.push(resolver);\n        return resolver.promise;\n    }\n\n    public end(): void {\n        this.ended = true;\n        let item: PromiseResolver<T | undefined> | undefined;\n        while (item = this.pullQueue.shift()) {\n            item.reject(new Error('The EventQueue has already ended'));\n        }\n    }\n}\n","import { AutoResetEvent, EventQueue } from '../utils';\nimport { AdbStreamBase } from './controller';\nimport { AdbStream } from './stream';\n\nexport class AdbReadableStream implements AdbStreamBase {\n    private stream: AdbStream;\n\n    private queue: EventQueue<ArrayBuffer>;\n\n    private readLock = new AutoResetEvent();\n\n    public get backend() { return this.stream.backend; }\n\n    public get localId() { return this.stream.localId; }\n\n    public get remoteId() { return this.stream.remoteId; }\n\n    public constructor(stream: AdbStream) {\n        this.stream = stream;\n        this.queue = new EventQueue<ArrayBuffer>({\n            highWaterMark: 16 * 1024,\n        });\n\n        const resetEvent = new AutoResetEvent(true);\n\n        this.stream.onData(buffer => {\n            if (!this.queue.push(buffer, buffer.byteLength)) {\n                return resetEvent.wait();\n            }\n            return;\n        });\n        this.stream.onClose(() => {\n            this.queue.end();\n        });\n\n        this.queue.onLowWater(() => {\n            resetEvent.notify();\n        });\n    }\n\n    public async read(): Promise<ArrayBuffer> {\n        await this.readLock.wait();\n\n        try {\n            return await this.queue.next();\n        } finally {\n            this.readLock.notify();\n        }\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.stream.write(data);\n    }\n\n    close(): void {\n        this.stream.close();\n    }\n}\n","import { StructDeserializationContext } from '@yume-chan/struct';\nimport { AdbStreamBase } from './controller';\nimport { AdbReadableStream } from './readable-stream';\nimport { AdbStream } from './stream';\n\nexport interface Stream {\n    /**\n     * @param length A hint of how much data should be read.\n     * @returns Data, which can be either more or less than `length`\n     */\n    read(length: number): ArrayBuffer | Promise<ArrayBuffer>;\n\n    close?(): void;\n}\n\nexport class BufferedStream<T extends Stream> {\n    private buffer: Uint8Array | undefined;\n\n    protected readonly stream: T;\n\n    public constructor(stream: T) {\n        this.stream = stream;\n    }\n\n    public async read(length: number): Promise<ArrayBuffer> {\n        let array: Uint8Array;\n        let index: number;\n        if (this.buffer) {\n            const buffer = this.buffer;\n            if (buffer.byteLength > length) {\n                this.buffer = buffer.subarray(length);\n                return buffer.slice(0, length).buffer;\n            }\n\n            array = new Uint8Array(length);\n            array.set(buffer);\n            index = buffer.byteLength;\n            this.buffer = undefined;\n        } else {\n            const buffer = await this.stream.read(length);\n            if (buffer.byteLength === length) {\n                return buffer;\n            }\n\n            if (buffer.byteLength > length) {\n                this.buffer = new Uint8Array(buffer, length);\n                return buffer.slice(0, length);\n            }\n\n            array = new Uint8Array(length);\n            array.set(new Uint8Array(buffer), 0);\n            index = buffer.byteLength;\n        }\n\n        while (index < length) {\n            const left = length - index;\n\n            const buffer = await this.stream.read(left);\n            if (buffer.byteLength > left) {\n                array.set(new Uint8Array(buffer, 0, left), index);\n                this.buffer = new Uint8Array(buffer, left);\n                return array.buffer;\n            }\n\n            array.set(new Uint8Array(buffer), index);\n            index += buffer.byteLength;\n        }\n\n        return array.buffer;\n    }\n\n    public close() {\n        this.stream.close?.();\n    }\n}\n\nexport class AdbBufferedStream\n    extends BufferedStream<AdbReadableStream>\n    implements AdbStreamBase, StructDeserializationContext {\n    public get backend() { return this.stream.backend; }\n\n    public get localId() { return this.stream.localId; }\n\n    public get remoteId() { return this.stream.remoteId; }\n\n    public constructor(stream: AdbStream) {\n        super(new AdbReadableStream(stream));\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.stream.write(data);\n    }\n\n    public decodeUtf8(buffer: ArrayBuffer): string {\n        return this.backend.decodeUtf8(buffer);\n    }\n\n    public encodeUtf8(input: string): ArrayBuffer {\n        return this.backend.encodeUtf8(input);\n    }\n}\n","export function* chunkArrayLike(\n    value: ArrayLike<number> | ArrayBufferLike,\n    size: number\n): Generator<ArrayBuffer, void, void> {\n    if ('length' in value) {\n        value = new Uint8Array(value).buffer;\n    }\n\n    if (value.byteLength <= size) {\n        return yield value;\n    }\n\n    for (let i = 0; i < value.byteLength; i += size) {\n        yield value.slice(i, i + size);\n    }\n}\n","import { AsyncEventEmitter, AutoDisposable, EventEmitter } from '@yume-chan/event';\nimport { AdbBackend } from '../backend';\nimport { AdbCommand } from '../packet';\nimport { AutoResetEvent } from '../utils';\nimport { chunkArrayLike } from './chunk';\nimport { AdbPacketDispatcher } from './dispatcher';\n\nexport interface AdbStreamBase {\n    backend: AdbBackend;\n\n    localId: number;\n\n    remoteId: number;\n}\n\nexport class AdbStreamController extends AutoDisposable implements AdbStreamBase {\n    private readonly writeLock = this.addDisposable(new AutoResetEvent());\n\n    public readonly dispatcher: AdbPacketDispatcher;\n\n    public get backend() { return this.dispatcher.backend; }\n\n    public readonly localId: number;\n\n    public readonly remoteId: number;\n\n    public readonly dataEvent = this.addDisposable(new AsyncEventEmitter<ArrayBuffer>());\n\n    private _closed = false;\n\n    public get closed() { return this._closed; }\n\n    private readonly closeEvent = this.addDisposable(new EventEmitter<void>());\n\n    public get onClose() { return this.closeEvent.event; }\n\n    public constructor(localId: number, remoteId: number, dispatcher: AdbPacketDispatcher) {\n        super();\n\n        this.localId = localId;\n        this.remoteId = remoteId;\n        this.dispatcher = dispatcher;\n    }\n\n    private async writeChunk(data: ArrayBuffer): Promise<void> {\n        if (this._closed) {\n            throw new Error('Can not write after closed');\n        }\n\n        await this.writeLock.wait();\n        await this.dispatcher.sendPacket(AdbCommand.Write, this.localId, this.remoteId, data);\n    }\n\n    public async write(data: ArrayBuffer): Promise<void> {\n        for await (const chunk of chunkArrayLike(data, this.dispatcher.maxPayloadSize)) {\n            await this.writeChunk(chunk);\n        }\n    }\n\n    public ack() {\n        this.writeLock.notify();\n    }\n\n    public async close(): Promise<void> {\n        if (!this._closed) {\n            await this.dispatcher.sendPacket(AdbCommand.Close, this.localId, this.remoteId);\n            this._closed = true;\n        }\n    }\n\n    public dispose() {\n        this._closed = true;\n        this.closeEvent.fire();\n        super.dispose();\n    }\n}\n","import { AdbStreamBase, AdbStreamController } from './controller';\n\nexport class AdbStream implements AdbStreamBase {\n    private controller: AdbStreamController;\n\n    public get backend() { return this.controller.backend; }\n\n    public get localId() { return this.controller.localId; }\n\n    public get remoteId() { return this.controller.remoteId; }\n\n    public get onData() { return this.controller.dataEvent.event; }\n\n    public get onClose() { return this.controller.onClose; }\n\n    public constructor(controller: AdbStreamController) {\n        this.controller = controller;\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.controller.write(data);\n    }\n\n    public close(): Promise<void> {\n        return this.controller.close();\n    }\n}\n","import AsyncOperationManager from '@yume-chan/async-operation-manager';\nimport { AutoDisposable, EventEmitter } from '@yume-chan/event';\nimport { AdbBackend } from '../backend';\nimport { AdbCommand, AdbPacket, AdbPacketInit } from '../packet';\nimport { AutoResetEvent } from '../utils';\nimport { AdbStreamController } from './controller';\nimport { AdbStream } from './stream';\n\nexport interface AdbPacketReceivedEventArgs {\n    handled: boolean;\n\n    packet: AdbPacket;\n}\n\nexport interface AdbIncomingStreamEventArgs {\n    handled: boolean;\n\n    packet: AdbPacket;\n\n    stream: AdbStream;\n}\n\nexport class AdbPacketDispatcher extends AutoDisposable {\n    // ADB requires stream id to start from 1\n    // (0 means open failed)\n    private readonly initializers = new AsyncOperationManager(1);\n    private readonly streams = new Map<number, AdbStreamController>();\n    private readonly sendLock = new AutoResetEvent();\n\n    public readonly backend: AdbBackend;\n\n    public maxPayloadSize = 0;\n    public calculateChecksum = true;\n    public appendNullToServiceString = true;\n\n    private readonly packetEvent = this.addDisposable(new EventEmitter<AdbPacketReceivedEventArgs>());\n    public get onPacket() { return this.packetEvent.event; }\n\n    private readonly streamEvent = this.addDisposable(new EventEmitter<AdbIncomingStreamEventArgs>());\n    public get onStream() { return this.streamEvent.event; }\n\n    private readonly errorEvent = this.addDisposable(new EventEmitter<Error>());\n    public get onError() { return this.errorEvent.event; }\n\n    private _running = false;\n    public get running() { return this._running; }\n\n    public constructor(backend: AdbBackend) {\n        super();\n\n        this.backend = backend;\n    }\n\n    private async receiveLoop() {\n        try {\n            while (this._running) {\n                const packet = await AdbPacket.read(this.backend);\n                switch (packet.command) {\n                    case AdbCommand.OK:\n                        this.handleOk(packet);\n                        continue;\n                    case AdbCommand.Close:\n                        // CLSE also has two meanings\n                        if (packet.arg0 === 0) {\n                            // 1. The device don't want to create the Stream\n                            this.initializers.reject(packet.arg1, new Error('Stream open failed'));\n                            continue;\n                        }\n\n                        if (this.streams.has(packet.arg1)) {\n                            // 2. The device has closed the Stream\n                            this.streams.get(packet.arg1)!.dispose();\n                            this.streams.delete(packet.arg1);\n                            continue;\n                        }\n\n                        // Maybe the device is responding to a packet of last connection\n                        // Just ignore it\n                        continue;\n                    case AdbCommand.Write:\n                        if (this.streams.has(packet.arg1)) {\n                            await this.streams.get(packet.arg1)!.dataEvent.fire(packet.payload!);\n                            await this.sendPacket(AdbCommand.OK, packet.arg1, packet.arg0);\n                        }\n\n                        // Maybe the device is responding to a packet of last connection\n                        // Just ignore it\n                        continue;\n                    case AdbCommand.Open:\n                        await this.handleOpen(packet);\n                        continue;\n                }\n\n                const args: AdbPacketReceivedEventArgs = {\n                    handled: false,\n                    packet,\n                };\n                this.packetEvent.fire(args);\n                if (!args.handled) {\n                    this.dispose();\n                    return;\n                }\n            }\n        } catch (e) {\n            if (!this._running) {\n                // ignore error\n                return;\n            }\n\n            this.errorEvent.fire(e);\n        }\n    }\n\n    private handleOk(packet: AdbPacket) {\n        if (this.initializers.resolve(packet.arg1, packet.arg0)) {\n            // Device has created the `Stream`\n            return;\n        }\n\n        if (this.streams.has(packet.arg1)) {\n            // Device has received last `WRTE` to the `Stream`\n            this.streams.get(packet.arg1)!.ack();\n            return;\n        }\n\n        // Maybe the device is responding to a packet of last connection\n        // Tell the device to close the stream\n        this.sendPacket(AdbCommand.Close, packet.arg1, packet.arg0);\n    }\n\n    private async handleOpen(packet: AdbPacket) {\n        // AsyncOperationManager doesn't support get and skip an ID\n        // Use `add` + `resolve` to simulate the behavior\n        const [localId] = this.initializers.add<number>();\n        this.initializers.resolve(localId, undefined);\n\n        const remoteId = packet.arg0;\n        const controller = new AdbStreamController(localId, remoteId, this);\n        const stream = new AdbStream(controller);\n\n        const args: AdbIncomingStreamEventArgs = {\n            handled: false,\n            packet,\n            stream,\n        };\n        this.streamEvent.fire(args);\n\n        if (args.handled) {\n            this.streams.set(localId, controller);\n            await this.sendPacket(AdbCommand.OK, localId, remoteId);\n        } else {\n            await this.sendPacket(AdbCommand.Close, 0, remoteId);\n        }\n    }\n\n    public start() {\n        this._running = true;\n        this.receiveLoop();\n    }\n\n    public async createStream(service: string): Promise<AdbStream> {\n        if (this.appendNullToServiceString) {\n            service += '\\0';\n        }\n\n        const [localId, initializer] = this.initializers.add<number>();\n        await this.sendPacket(AdbCommand.Open, localId, 0, service);\n\n        const remoteId = await initializer;\n        const controller = new AdbStreamController(localId, remoteId, this);\n        this.streams.set(controller.localId, controller);\n\n        return new AdbStream(controller);\n    }\n\n    public sendPacket(packet: AdbPacketInit): Promise<void>;\n    public sendPacket(\n        command: AdbCommand,\n        arg0: number,\n        arg1: number,\n        payload?: string | ArrayBuffer\n    ): Promise<void>;\n    public async sendPacket(\n        packetOrCommand: AdbPacketInit | AdbCommand,\n        arg0?: number,\n        arg1?: number,\n        payload?: string | ArrayBuffer\n    ): Promise<void> {\n        let init: AdbPacketInit;\n        if (arguments.length === 1) {\n            init = packetOrCommand as AdbPacketInit;\n        } else {\n            init = {\n                command: packetOrCommand as AdbCommand,\n                arg0: arg0 as number,\n                arg1: arg1 as number,\n                payload: typeof payload === 'string' ? this.backend.encodeUtf8(payload) : payload,\n            };\n        }\n\n        if (init.payload &&\n            init.payload.byteLength > this.maxPayloadSize) {\n            throw new Error('payload too large');\n        }\n\n        try {\n            await this.sendLock.wait();\n\n            const packet = AdbPacket.create(init, this.calculateChecksum, this.backend);\n            await AdbPacket.write(packet, this.backend);\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public dispose() {\n        this._running = false;\n\n        for (const stream of this.streams.values()) {\n            stream.dispose();\n        }\n        this.streams.clear();\n\n        super.dispose();\n    }\n}\n","import { BackingField, Struct, StructInitType, StructValueType } from '@yume-chan/struct';\nimport { AdbBackend } from './backend';\nimport { BufferedStream } from './stream';\n\nexport enum AdbCommand {\n    Auth = 0x48545541,    // 'AUTH'\n    Close = 0x45534c43,   // 'CLSE'\n    Connect = 0x4e584e43, // 'CNXN'\n    OK = 0x59414b4f,      // 'OKAY'\n    Open = 0x4e45504f,    // 'OPEN'\n    Write = 0x45545257,   // 'WRTE'\n}\n\nconst AdbPacketWithoutPayload =\n    new Struct({ littleEndian: true })\n        .uint32('command', undefined)\n        .uint32('arg0')\n        .uint32('arg1')\n        .uint32('payloadLength')\n        .uint32('checksum')\n        .int32('magic');\n\nconst AdbPacketStruct =\n    AdbPacketWithoutPayload\n        .arrayBuffer('payload', { lengthField: 'payloadLength' })\n        .afterParsed((value) => {\n            if (value[BackingField].magic !== value.magic) {\n                throw new Error('Invalid command');\n            }\n        });\n\nexport type AdbPacket = StructValueType<typeof AdbPacketStruct>;\n\nexport type AdbPacketInit = Omit<StructInitType<typeof AdbPacketStruct>, 'checksum' | 'magic'>;\n\nexport namespace AdbPacket {\n    export function create(\n        init: AdbPacketInit,\n        calculateChecksum: boolean,\n        backend: AdbBackend\n    ): AdbPacket {\n        let checksum: number;\n        if (calculateChecksum && init.payload) {\n            const array = new Uint8Array(init.payload);\n            checksum = array.reduce((result, item) => result + item, 0);\n        } else {\n            checksum = 0;\n        }\n\n        return AdbPacketStruct.create({\n            ...init,\n            checksum,\n            magic: init.command ^ 0xFFFFFFFF,\n        }, backend);\n    }\n\n    export async function read(backend: AdbBackend): Promise<AdbPacket> {\n        let buffer = await backend.read(24);\n        if (buffer.byteLength !== 24) {\n            // Maybe it's a payload from last connection.\n            // Ignore and try again\n            buffer = await backend.read(24);\n        }\n\n        let bufferUsed = false;\n        const stream = new BufferedStream({\n            read(length: number) {\n                if (!bufferUsed) {\n                    bufferUsed = true;\n                    return buffer;\n                }\n                return backend.read(length);\n            }\n        });\n\n        return AdbPacketStruct.deserialize({\n            read: stream.read.bind(stream),\n            decodeUtf8: backend.decodeUtf8.bind(backend),\n            encodeUtf8: backend.encodeUtf8.bind(backend),\n        });\n    }\n\n    export async function write(packet: AdbPacket, backend: AdbBackend): Promise<void> {\n        // Write payload separately to avoid an extra copy\n        await backend.write(AdbPacketWithoutPayload.serialize(packet, backend));\n        if (packet.payload) {\n            await backend.write(packet.payload);\n        }\n    }\n}\n","import { Disposable } from '@yume-chan/event';\nimport { AdbBackend } from './backend';\nimport { calculatePublicKey, calculatePublicKeyLength, sign } from './crypto';\nimport { AdbCommand, AdbPacket, AdbPacketInit } from './packet';\nimport { calculateBase64EncodedLength, encodeBase64 } from './utils';\n\nexport enum AdbAuthType {\n    Token = 1,\n    Signature = 2,\n    PublicKey = 3,\n}\n\nexport interface AdbAuthenticator {\n    (backend: AdbBackend, packet: AdbPacket): AsyncIterator<AdbPacketInit, void, AdbPacket>;\n}\n\nexport async function* AdbSignatureAuthenticator(\n    backend: AdbBackend,\n    packet: AdbPacket,\n): AsyncIterator<AdbPacketInit, void, AdbPacket> {\n    for await (const key of backend.iterateKeys()) {\n        if (packet.arg0 !== AdbAuthType.Token) {\n            return;\n        }\n\n        const signature = sign(key, packet.payload!);\n\n        packet = yield {\n            command: AdbCommand.Auth,\n            arg0: AdbAuthType.Signature,\n            arg1: 0,\n            payload: signature\n        };\n    }\n}\n\nexport async function* AdbPublicKeyAuthenticator(\n    backend: AdbBackend,\n    packet: AdbPacket,\n): AsyncIterator<AdbPacketInit, void, AdbPacket> {\n    if (packet.arg0 !== AdbAuthType.Token) {\n        return;\n    }\n\n    let privateKey: ArrayBuffer | undefined;\n    for await (const key of backend.iterateKeys()) {\n        privateKey = key;\n        break;\n    }\n\n    if (!privateKey) {\n        privateKey = await backend.generateKey();\n    }\n\n    const publicKeyLength = calculatePublicKeyLength();\n    const publicKeyBase64Length = calculateBase64EncodedLength(publicKeyLength);\n\n    // The public key is null terminated,\n    // So we allocate the buffer with one extra byte.\n    const publicKeyBuffer = new ArrayBuffer(publicKeyBase64Length + 1);\n\n    calculatePublicKey(privateKey, publicKeyBuffer);\n    encodeBase64(publicKeyBuffer, 0, publicKeyLength, publicKeyBuffer);\n\n    yield {\n        command: AdbCommand.Auth,\n        arg0: AdbAuthType.PublicKey,\n        arg1: 0,\n        payload: publicKeyBuffer\n    };\n}\n\nexport const AdbDefaultAuthenticators: AdbAuthenticator[] = [\n    AdbSignatureAuthenticator,\n    AdbPublicKeyAuthenticator\n];\n\nexport class AdbAuthenticationHandler implements Disposable {\n    public readonly authenticators: readonly AdbAuthenticator[];\n\n    private readonly backend: AdbBackend;\n\n    private iterator: AsyncIterator<AdbPacketInit, never, AdbPacket> | undefined;\n\n    public constructor(\n        authenticators: readonly AdbAuthenticator[],\n        backend: AdbBackend\n    ) {\n        this.authenticators = authenticators;\n        this.backend = backend;\n    }\n\n    private async* nextCore(packet: AdbPacket): AsyncGenerator<AdbPacketInit, never, AdbPacket> {\n        for (const authenticator of this.authenticators) {\n            const iterator = authenticator(this.backend, packet);\n            try {\n                let result = await iterator.next();\n                while (!result.done) {\n                    packet = yield result.value;\n                    result = await iterator.next(packet);\n                }\n            } finally {\n                iterator.return?.();\n            }\n        }\n\n        throw new Error('Cannot authenticate with device');\n    }\n\n    public async next(packet: AdbPacket): Promise<AdbPacketInit> {\n        if (!this.iterator) {\n            this.iterator = this.nextCore(packet);\n        }\n\n        const result = await this.iterator.next(packet);\n        return result.value;\n    }\n\n    public dispose() {\n        this.iterator?.return?.();\n    }\n}\n","import { AutoDisposable } from '@yume-chan/event';\nimport { Adb } from '../adb';\n\nexport class AdbCommandBase extends AutoDisposable {\n    protected adb: Adb;\n\n    public constructor(adb: Adb) {\n        super();\n        this.adb = adb;\n    }\n}\n","import { Struct, StructValueType } from \"@yume-chan/struct\";\nimport { Adb } from '../adb';\nimport { AdbBufferedStream } from '../stream';\n\nconst Version = new Struct({ littleEndian: true }).uint32('version');\n\nexport const AdbFrameBufferV1 =\n    new Struct({ littleEndian: true })\n        .uint32('bpp')\n        .uint32('size')\n        .uint32('width')\n        .uint32('height')\n        .uint32('red_offset')\n        .uint32('red_length')\n        .uint32('blue_offset')\n        .uint32('blue_length')\n        .uint32('green_offset')\n        .uint32('green_length')\n        .uint32('alpha_offset')\n        .uint32('alpha_length')\n        .arrayBuffer('data', { lengthField: 'size' });\n\nexport type AdbFrameBufferV1 = StructValueType<typeof AdbFrameBufferV1>;\n\nexport const AdbFrameBufferV2 =\n    new Struct({ littleEndian: true })\n        .uint32('bpp')\n        .uint32('colorSpace')\n        .uint32('size')\n        .uint32('width')\n        .uint32('height')\n        .uint32('red_offset')\n        .uint32('red_length')\n        .uint32('blue_offset')\n        .uint32('blue_length')\n        .uint32('green_offset')\n        .uint32('green_length')\n        .uint32('alpha_offset')\n        .uint32('alpha_length')\n        .arrayBuffer('data', { lengthField: 'size' });\n\nexport type AdbFrameBufferV2 = StructValueType<typeof AdbFrameBufferV2>;\n\nexport async function framebuffer(adb: Adb) {\n    const stream = await adb.createStream('framebuffer:');\n    const buffered = new AdbBufferedStream(stream);\n    const { version } = await Version.deserialize(buffered);\n    switch (version) {\n        case 1:\n            return AdbFrameBufferV1.deserialize(buffered);\n        case 2:\n            return AdbFrameBufferV2.deserialize(buffered);\n        default:\n            throw new Error('Unknown FrameBuffer version');\n    }\n}\n","import { AutoDisposable } from '@yume-chan/event';\nimport { Struct } from '@yume-chan/struct';\nimport { AdbPacket } from '../packet';\nimport { AdbBufferedStream, AdbIncomingStreamEventArgs, AdbPacketDispatcher, AdbStream } from '../stream';\n\nexport interface AdbReverseHandler {\n    onStream(packet: AdbPacket, stream: AdbStream): void;\n}\n\nexport interface AdbForwardListener {\n    deviceSerial: string;\n\n    localName: string;\n\n    remoteName: string;\n}\n\nconst AdbReverseStringResponse =\n    new Struct({ littleEndian: true })\n        .string('length', { length: 4 })\n        .string('content', { lengthField: 'length' });\n\nconst AdbReverseErrorResponse =\n    AdbReverseStringResponse\n        .afterParsed((value) => {\n            throw new Error(value.content);\n        });\n\nexport class AdbReverseCommand extends AutoDisposable {\n    protected localPortToHandler = new Map<number, AdbReverseHandler>();\n\n    protected deviceAddressToLocalPort = new Map<string, number>();\n\n    protected dispatcher: AdbPacketDispatcher;\n\n    protected listening = false;\n\n    public constructor(dispatcher: AdbPacketDispatcher) {\n        super();\n\n        this.dispatcher = dispatcher;\n        this.addDisposable(this.dispatcher.onStream(this.handleStream, this));\n    }\n\n    protected handleStream(e: AdbIncomingStreamEventArgs): void {\n        if (e.handled) {\n            return;\n        }\n\n        const address = this.dispatcher.backend.decodeUtf8(e.packet.payload!);\n        const port = Number.parseInt(address.substring(4));\n        if (this.localPortToHandler.has(port)) {\n            this.localPortToHandler.get(port)!.onStream(e.packet, e.stream);\n            e.handled = true;\n        }\n    }\n\n    public async add(\n        deviceAddress: string,\n        localPort: number,\n        handler: AdbReverseHandler,\n    ): Promise<string> {\n        const stream = await this.dispatcher.createStream(`reverse:forward:${deviceAddress};tcp:${localPort}`);\n        const buffered = new AdbBufferedStream(stream);\n\n        const success = this.dispatcher.backend.decodeUtf8(await buffered.read(4)) === 'OKAY';\n        if (success) {\n            if (deviceAddress.startsWith('tcp:')) {\n                const response = await AdbReverseStringResponse.deserialize(buffered);\n                deviceAddress = `tcp:${Number.parseInt(response.content!, 10)}`;\n            }\n\n            this.localPortToHandler.set(localPort, handler);\n            this.deviceAddressToLocalPort.set(deviceAddress, localPort);\n            return deviceAddress;\n        } else {\n            return await AdbReverseErrorResponse.deserialize(buffered);\n        }\n    }\n\n    public async list(): Promise<AdbForwardListener[]> {\n        const stream = await this.dispatcher.createStream('reverse:list-forward');\n        const buffered = new AdbBufferedStream(stream);\n\n        const response = await AdbReverseStringResponse.deserialize(buffered);\n\n        return response.content!.split('\\n').map(line => {\n            const [deviceSerial, localName, remoteName] = line.split(' ');\n            return { deviceSerial, localName, remoteName };\n        });\n    }\n\n    public async remove(deviceAddress: string): Promise<void> {\n        const stream = await this.dispatcher.createStream(`reverse:killforward:${deviceAddress}`);\n        const buffered = new AdbBufferedStream(stream);\n\n        const success = this.dispatcher.backend.decodeUtf8(await buffered.read(4)) === 'OKAY';\n        if (success) {\n            if (this.deviceAddressToLocalPort.has(deviceAddress)) {\n                this.localPortToHandler.delete(this.deviceAddressToLocalPort.get(deviceAddress)!);\n                this.deviceAddressToLocalPort.delete(deviceAddress);\n            }\n        } else {\n            await AdbReverseErrorResponse.deserialize(buffered);\n        }\n    }\n\n    public async removeAll(): Promise<void> {\n        const stream = await this.dispatcher.createStream(`reverse:killforward-all`);\n        const buffered = new AdbBufferedStream(stream);\n\n        const success = this.dispatcher.backend.decodeUtf8(await buffered.read(4)) === 'OKAY';\n        if (success) {\n            this.deviceAddressToLocalPort.clear();\n            this.localPortToHandler.clear();\n        } else {\n            await AdbReverseErrorResponse.deserialize(buffered);\n        }\n    }\n}\n","import { Struct } from '@yume-chan/struct';\nimport { AdbBufferedStream } from '../../stream';\n\nexport enum AdbSyncRequestId {\n    List = 'LIST',\n    Send = 'SEND',\n    Lstat = 'STAT',\n    Stat = 'STA2',\n    Lstat2 = 'LST2',\n    Data = 'DATA',\n    Done = 'DONE',\n    Receive = 'RECV',\n}\n\nexport const AdbSyncNumberRequest =\n    new Struct({ littleEndian: true })\n        .string('id', { length: 4 })\n        .uint32('arg');\n\nexport const AdbSyncDataRequest =\n    AdbSyncNumberRequest\n        .arrayBuffer('data', { lengthField: 'arg' });\n\nexport async function adbSyncWriteRequest(\n    stream: AdbBufferedStream,\n    id: AdbSyncRequestId | string,\n    value: number | string | ArrayBuffer\n): Promise<void> {\n    let buffer: ArrayBuffer;\n    if (typeof value === 'number') {\n        buffer = AdbSyncNumberRequest.serialize({\n            id,\n            arg: value,\n        }, stream);\n    } else if (typeof value === 'string') {\n        buffer = AdbSyncDataRequest.serialize({\n            id,\n            data: stream.encodeUtf8(value),\n        }, stream);\n    } else {\n        buffer = AdbSyncDataRequest.serialize({\n            id,\n            data: value,\n        }, stream);\n    }\n    await stream.write(buffer);\n}\n","import { Struct, StructDeserializationContext, StructValueType } from '@yume-chan/struct';\nimport { AdbBufferedStream } from '../../stream';\n\nexport enum AdbSyncResponseId {\n    Entry = 'DENT',\n    Lstat = 'STAT',\n    Stat = 'STA2',\n    Lstat2 = 'LST2',\n    Done = 'DONE',\n    Data = 'DATA',\n    Ok = 'OKAY',\n    Fail = 'FAIL',\n}\n\n// DONE responses' size are always same as the request's normal response.\n// For example DONE responses for LIST requests are 16 bytes (same as DENT responses),\n// but DONE responses for STAT requests are 12 bytes (same as STAT responses)\n// So we need to know responses' size in advance.\nexport class AdbSyncDoneResponse {\n    private length: number;\n\n    public readonly id = AdbSyncResponseId.Done;\n\n    public constructor(length: number) {\n        this.length = length;\n    }\n\n    public async deserialize(context: StructDeserializationContext): Promise<this> {\n        await context.read(this.length);\n        return this;\n    }\n}\n\nexport const AdbSyncFailResponse =\n    new Struct({ littleEndian: true })\n        .uint32('messageLength')\n        .string('message', { lengthField: 'messageLength' })\n        .afterParsed(object => {\n            throw new Error(object.message);\n        });\n\nexport async function adbSyncReadResponse<T extends Record<string, { deserialize(context: StructDeserializationContext): Promise<any>; }>>(\n    stream: AdbBufferedStream,\n    types: T,\n): Promise<StructValueType<T[keyof T]>> {\n    const id = stream.backend.decodeUtf8(await stream.read(4));\n\n    if (id === AdbSyncResponseId.Fail) {\n        await AdbSyncFailResponse.deserialize(stream);\n    }\n\n    if (types[id]) {\n        return types[id].deserialize(stream);\n    }\n\n    throw new Error('Unexpected response id');\n}\n","import { placeholder, Struct, StructValueType } from '@yume-chan/struct';\nimport { AdbBufferedStream } from '../../stream';\nimport { AdbSyncRequestId, adbSyncWriteRequest } from './request';\nimport { adbSyncReadResponse, AdbSyncResponseId } from './response';\n\n// https://github.com/python/cpython/blob/4e581d64b8aff3e2eda99b12f080c877bb78dfca/Lib/stat.py#L36\nexport enum LinuxFileType {\n    Directory = 0o04,\n    File = 0o10,\n    Link = 0o12,\n}\n\nexport const AdbSyncLstatResponse =\n    new Struct({ littleEndian: true })\n        .int32('mode')\n        .int32('size')\n        .int32('mtime')\n        .extra({\n            id: AdbSyncResponseId.Lstat as const,\n            get type() { return this.mode >> 12 as LinuxFileType; },\n            get permission() { return this.mode & 0b00001111_11111111; },\n        })\n        .afterParsed((object) => {\n            if (object.mode === 0 &&\n                object.size === 0 &&\n                object.mtime === 0\n            ) {\n                throw new Error('lstat failed');\n            }\n        });\n\nexport type AdbSyncLstatResponse = StructValueType<typeof AdbSyncLstatResponse>;\n\nexport enum AdbSyncStatErrorCode {\n    EACCES = 13,\n    EEXIST = 17,\n    EFAULT = 14,\n    EFBIG = 27,\n    EINTR = 4,\n    EINVAL = 22,\n    EIO = 5,\n    EISDIR = 21,\n    ELOOP = 40,\n    EMFILE = 24,\n    ENAMETOOLONG = 36,\n    ENFILE = 23,\n    ENOENT = 2,\n    ENOMEM = 12,\n    ENOSPC = 28,\n    ENOTDIR = 20,\n    EOVERFLOW = 75,\n    EPERM = 1,\n    EROFS = 30,\n    ETXTBSY = 26,\n}\n\nexport const AdbSyncStatResponse =\n    new Struct({ littleEndian: true })\n        .uint32('error', undefined, placeholder<AdbSyncStatErrorCode>())\n        .uint64('dev')\n        .uint64('ino')\n        .uint32('mode')\n        .uint32('nlink')\n        .uint32('uid')\n        .uint32('gid')\n        .uint64('size')\n        .uint64('atime')\n        .uint64('mtime')\n        .uint64('ctime')\n        .extra({\n            id: AdbSyncResponseId.Stat as const,\n            get type() { return this.mode >> 12 as LinuxFileType; },\n            get permission() { return this.mode & 0b00001111_11111111; },\n        })\n        .afterParsed((object) => {\n            if (object.error) {\n                throw new Error(AdbSyncStatErrorCode[object.error]);\n            }\n        });\n\nexport type AdbSyncStatResponse = StructValueType<typeof AdbSyncStatResponse>;\n\nconst StatResponseType = {\n    [AdbSyncResponseId.Stat]: AdbSyncStatResponse,\n};\n\nconst LstatResponseType = {\n    [AdbSyncResponseId.Lstat]: AdbSyncLstatResponse,\n};\n\nconst Lstat2ResponseType = {\n    [AdbSyncResponseId.Lstat2]: AdbSyncStatResponse,\n};\n\nexport async function adbSyncLstat(\n    stream: AdbBufferedStream,\n    path: string,\n    v2: boolean,\n): Promise<AdbSyncLstatResponse | AdbSyncStatResponse> {\n    let requestId: AdbSyncRequestId.Lstat | AdbSyncRequestId.Lstat2;\n    let responseType: typeof LstatResponseType | typeof Lstat2ResponseType;\n\n    if (v2) {\n        requestId = AdbSyncRequestId.Lstat2;\n        responseType = Lstat2ResponseType;\n    } else {\n        requestId = AdbSyncRequestId.Lstat;\n        responseType = LstatResponseType;\n    }\n\n    await adbSyncWriteRequest(stream, requestId, path);\n    return adbSyncReadResponse(stream, responseType);\n}\n\nexport async function adbSyncStat(\n    stream: AdbBufferedStream,\n    path: string,\n): Promise<AdbSyncStatResponse> {\n    await adbSyncWriteRequest(stream, AdbSyncRequestId.Stat, path);\n    return adbSyncReadResponse(stream, StatResponseType);\n}\n","import { StructValueType } from '@yume-chan/struct';\nimport { AdbBufferedStream } from '../../stream';\nimport { AdbSyncRequestId, adbSyncWriteRequest } from './request';\nimport { AdbSyncDoneResponse, adbSyncReadResponse, AdbSyncResponseId } from './response';\nimport { AdbSyncLstatResponse } from './stat';\n\nexport const AdbSyncEntryResponse =\n    AdbSyncLstatResponse\n        .afterParsed()\n        .uint32('nameLength')\n        .string('name', { lengthField: 'nameLength' })\n        .extra({ id: AdbSyncResponseId.Entry as const });\n\nexport type AdbSyncEntryResponse = StructValueType<typeof AdbSyncEntryResponse>;\n\nconst ResponseTypes = {\n    [AdbSyncResponseId.Entry]: AdbSyncEntryResponse,\n    [AdbSyncResponseId.Done]: new AdbSyncDoneResponse(AdbSyncEntryResponse.size),\n};\n\nexport async function* adbSyncOpenDir(\n    stream: AdbBufferedStream,\n    path: string\n): AsyncGenerator<AdbSyncEntryResponse, void, void> {\n    await adbSyncWriteRequest(stream, AdbSyncRequestId.List, path);\n\n    while (true) {\n        const response = await adbSyncReadResponse(stream, ResponseTypes);\n        switch (response.id) {\n            case AdbSyncResponseId.Entry:\n                yield response;\n                break;\n            case AdbSyncResponseId.Done:\n                return;\n            default:\n                throw new Error('Unexpected response id');\n        }\n    }\n}\n","import { Struct } from '@yume-chan/struct';\nimport { AdbBufferedStream } from '../../stream';\nimport { AdbSyncRequestId, adbSyncWriteRequest } from './request';\nimport { AdbSyncDoneResponse, adbSyncReadResponse, AdbSyncResponseId } from './response';\n\nexport const AdbSyncDataResponse =\n    new Struct({ littleEndian: true })\n        .uint32('dataLength')\n        .arrayBuffer('data', { lengthField: 'dataLength' })\n        .extra({ id: AdbSyncResponseId.Data as const });\n\nconst ResponseTypes = {\n    [AdbSyncResponseId.Data]: AdbSyncDataResponse,\n    [AdbSyncResponseId.Done]: new AdbSyncDoneResponse(AdbSyncDataResponse.size),\n};\n\nexport async function* adbSyncPull(\n    stream: AdbBufferedStream,\n    path: string,\n): AsyncGenerator<ArrayBuffer, void, void> {\n    await adbSyncWriteRequest(stream, AdbSyncRequestId.Receive, path);\n    while (true) {\n        const response = await adbSyncReadResponse(stream, ResponseTypes);\n        switch (response.id) {\n            case AdbSyncResponseId.Data:\n                yield response.data!;\n                break;\n            case AdbSyncResponseId.Done:\n                return;\n            default:\n                throw new Error('Unexpected response id');\n        }\n    }\n}\n","import { Struct } from '@yume-chan/struct';\nimport { AdbBufferedStream, chunkArrayLike } from '../../stream';\nimport { AdbSyncRequestId, adbSyncWriteRequest } from './request';\nimport { adbSyncReadResponse, AdbSyncResponseId } from './response';\nimport { LinuxFileType } from './stat';\n\nexport const AdbSyncOkResponse =\n    new Struct({ littleEndian: true })\n        .uint32('unused');\n\nconst ResponseTypes = {\n    [AdbSyncResponseId.Ok]: AdbSyncOkResponse,\n};\n\nexport async function* chunkAsyncIterable(\n    value: AsyncIterable<ArrayBuffer>,\n    size: number\n): AsyncGenerator<ArrayBuffer, void, void> {\n    let result = new Uint8Array(size);\n    let index = 0;\n    for await (let buffer of value) {\n        // `result` has some data, `result + buffer` is enough\n        if (index !== 0 && index + buffer.byteLength >= size) {\n            const remainder = size - index;\n            result.set(new Uint8Array(buffer, 0, remainder), index);\n            yield result.buffer;\n\n            result = new Uint8Array(size);\n            index = 0;\n\n            if (buffer.byteLength > remainder) {\n                // `buffer` still has some data\n                buffer = buffer.slice(remainder);\n            } else {\n                continue;\n            }\n        }\n\n        // `result` is empty, `buffer` alone is enough\n        if (buffer.byteLength >= size) {\n            let remainder = false;\n            for (const chunk of chunkArrayLike(buffer, size)) {\n                if (chunk.byteLength === size) {\n                    yield chunk;\n                    continue;\n                }\n\n                // `buffer` still has some data\n                remainder = true;\n                buffer = chunk;\n            }\n\n            if (!remainder) {\n                continue;\n            }\n        }\n\n        // `result` has some data but `result + buffer` is still not enough\n        // or after previous steps `buffer` still has some data\n        result.set(new Uint8Array(buffer), index);\n        index += buffer.byteLength;\n    }\n\n    if (index !== 0) {\n        yield result.buffer.slice(0, index);\n    }\n}\n\nexport const AdbSyncMaxPacketSize = 64 * 1024;\n\nexport async function adbSyncPush(\n    stream: AdbBufferedStream,\n    path: string,\n    file: ArrayLike<number> | ArrayBufferLike | AsyncIterable<ArrayBuffer>,\n    mode: number = (LinuxFileType.File << 12) | 0o666,\n    mtime: number = (Date.now() / 1000) | 0,\n    packetSize: number = AdbSyncMaxPacketSize,\n    onProgress?: (uploaded: number) => void,\n): Promise<void> {\n    const pathAndMode = `${path},${mode.toString()}`;\n    await adbSyncWriteRequest(stream, AdbSyncRequestId.Send, pathAndMode);\n\n    let chunkReader: Iterable<ArrayBuffer> | AsyncIterable<ArrayBuffer>;\n    if ('length' in file || 'byteLength' in file) {\n        chunkReader = chunkArrayLike(file, packetSize);\n    } else {\n        chunkReader = chunkAsyncIterable(file, packetSize);\n    }\n\n    let uploaded = 0;\n    for await (const buffer of chunkReader) {\n        await adbSyncWriteRequest(stream, AdbSyncRequestId.Data, buffer);\n        uploaded += buffer.byteLength;\n        onProgress?.(uploaded);\n    }\n\n    await adbSyncWriteRequest(stream, AdbSyncRequestId.Done, mtime);\n    await adbSyncReadResponse(stream, ResponseTypes);\n}\n","export enum AdbFeatures {\n    StatV2 = 'stat_v2',\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { DisposableList } from '@yume-chan/event';\nimport { AdbAuthenticationHandler, AdbDefaultAuthenticators } from './auth';\nimport { AdbBackend } from './backend';\nimport { AdbFrameBufferV2, AdbReverseCommand, AdbSync, AdbTcpIpCommand, framebuffer } from './commands';\nimport { AdbFeatures } from './features';\nimport { AdbCommand } from './packet';\nimport { AdbBufferedStream, AdbPacketDispatcher, AdbStream } from './stream';\n\nexport enum AdbPropKey {\n    Product = 'ro.product.name',\n    Model = 'ro.product.model',\n    Device = 'ro.product.device',\n    Features = 'features',\n}\n\nexport class Adb {\n    private packetDispatcher: AdbPacketDispatcher;\n\n    public readonly backend: AdbBackend;\n\n    public get onDisconnected() { return this.backend.onDisconnected; }\n\n    private _connected = false;\n    public get connected() { return this._connected; }\n\n    public get name() { return this.backend.name; }\n\n    private _product: string | undefined;\n    public get product() { return this._product; }\n\n    private _model: string | undefined;\n    public get model() { return this._model; }\n\n    private _device: string | undefined;\n    public get device() { return this._device; }\n\n    private _features: AdbFeatures[] | undefined;\n    public get features() { return this._features; }\n\n    public readonly tcpip: AdbTcpIpCommand;\n\n    public readonly reverse: AdbReverseCommand;\n\n    public constructor(backend: AdbBackend) {\n        this.backend = backend;\n\n        this.packetDispatcher = new AdbPacketDispatcher(backend);\n\n        this.tcpip = new AdbTcpIpCommand(this);\n        this.reverse = new AdbReverseCommand(this.packetDispatcher);\n\n        backend.onDisconnected(this.dispose, this);\n    }\n\n    public async connect(authenticators = AdbDefaultAuthenticators) {\n        await this.backend.connect?.();\n        this.packetDispatcher.maxPayloadSize = 0x1000;\n        this.packetDispatcher.calculateChecksum = true;\n        this.packetDispatcher.appendNullToServiceString = true;\n        this.packetDispatcher.start();\n\n        const version = 0x01000001;\n        const versionNoChecksum = 0x01000001;\n        const maxPayloadSize = 0x100000;\n\n        const features = [\n            'shell_v2', // 9\n            'cmd', // 7\n            AdbFeatures.StatV2, // 5\n            'ls_v2',\n            'fixed_push_mkdir', // 4\n            'apex', // 2\n            'abb', // 8\n            'fixed_push_symlink_timestamp', // 1\n            'abb_exec', // 6\n            'remount_shell', // 3\n            'track_app',\n            'sendrecv_v2',\n            'sendrecv_v2_brotli',\n            'sendrecv_v2_lz4',\n            'sendrecv_v2_zstd',\n            'sendrecv_v2_dry_run_send',\n        ].join(',');\n\n        const resolver = new PromiseResolver<void>();\n        const authHandler = new AdbAuthenticationHandler(authenticators, this.backend);\n        const disposableList = new DisposableList();\n        disposableList.add(this.packetDispatcher.onPacket(async (e) => {\n            e.handled = true;\n\n            const { packet } = e;\n            try {\n                switch (packet.command) {\n                    case AdbCommand.Connect:\n                        this.packetDispatcher.maxPayloadSize = Math.min(maxPayloadSize, packet.arg1);\n                        if (Math.min(version, packet.arg0) >= versionNoChecksum) {\n                            this.packetDispatcher.calculateChecksum = false;\n                            // Android prior to 9.0.0 uses char* to parse service string\n                            // thus requires an extra null character\n                            this.packetDispatcher.appendNullToServiceString = false;\n                        }\n\n                        this.parseBanner(this.backend.decodeUtf8(packet.payload!));\n                        resolver.resolve();\n                        break;\n                    case AdbCommand.Auth:\n                        const authPacket = await authHandler.next(e.packet);\n                        await this.packetDispatcher.sendPacket(authPacket);\n                        break;\n                    case AdbCommand.Close:\n                        // Last connection was interrupted\n                        // Ignore this packet, device will recover\n                        break;\n                    default:\n                        throw new Error('Device not in correct state. Reconnect your device and try again');\n                }\n            } catch (e) {\n                resolver.reject(e);\n            }\n        }));\n\n        disposableList.add(this.packetDispatcher.onError(e => {\n            resolver.reject(e);\n        }));\n\n        // Android prior 9.0.0 requires the null character\n        // Newer versions can also handle the null character\n        // The terminating `;` is required in formal definition\n        // But ADB daemon can also work without it\n        await this.packetDispatcher.sendPacket(\n            AdbCommand.Connect,\n            version,\n            maxPayloadSize,\n            `host::features=${features};\\0`\n        );\n\n        try {\n            await resolver.promise;\n            this._connected = true;\n        } finally {\n            disposableList.dispose();\n        }\n    }\n\n    private parseBanner(banner: string) {\n        this._features = [];\n\n        const pieces = banner.split('::');\n        if (pieces.length > 1) {\n            const props = pieces[1];\n            for (const prop of props.split(';')) {\n                if (!prop) {\n                    continue;\n                }\n\n                const keyValue = prop.split('=');\n                if (keyValue.length !== 2) {\n                    continue;\n                }\n\n                const [key, value] = keyValue;\n                switch (key) {\n                    case AdbPropKey.Product:\n                        this._product = value;\n                        break;\n                    case AdbPropKey.Model:\n                        this._model = value;\n                        break;\n                    case AdbPropKey.Device:\n                        this._device = value;\n                        break;\n                    case AdbPropKey.Features:\n                        this._features = value.split(',') as AdbFeatures[];\n                        break;\n                }\n            }\n        }\n    }\n\n    public shell(): Promise<AdbStream> {\n        return this.createStream('shell:');\n    }\n\n    public spawn(command: string, ...args: string[]): Promise<AdbStream> {\n        // TODO: use shell protocol\n        return this.createStream(`shell:${command} ${args.join(' ')}`);\n    }\n\n    public exec(command: string, ...args: string[]): Promise<string> {\n        // TODO: use shell protocol\n        return this.createStreamAndReadAll(`shell:${command} ${args.join(' ')}`);\n    }\n\n    public async getProp(key: string): Promise<string> {\n        const output = await this.exec('getprop', key);\n        return output.trim();\n    }\n\n    public async sync(): Promise<AdbSync> {\n        const stream = await this.createStream('sync:');\n        return new AdbSync(this, stream);\n    }\n\n    public async framebuffer() {\n        return framebuffer(this);\n    }\n\n    public async createStream(service: string): Promise<AdbStream> {\n        return this.packetDispatcher.createStream(service);\n    }\n\n    public async createStreamAndReadAll(service: string): Promise<string> {\n        const stream = await this.createStream(service);\n        const resolver = new PromiseResolver<string>();\n        let result = '';\n        stream.onData(buffer => {\n            result += this.backend.decodeUtf8(buffer);\n        });\n        stream.onClose(() => resolver.resolve(result));\n        return resolver.promise;\n    }\n\n    public async dispose() {\n        this.packetDispatcher.dispose();\n        await this.backend.dispose();\n    }\n}\n","import { AutoDisposable } from '@yume-chan/event';\nimport { Adb } from '../../adb';\nimport { AdbFeatures } from '../../features';\nimport { AdbBufferedStream, AdbStream } from '../../stream';\nimport { AutoResetEvent } from '../../utils';\nimport { AdbSyncEntryResponse, adbSyncOpenDir } from './list';\nimport { adbSyncPull } from './pull';\nimport { adbSyncPush } from './push';\nimport { adbSyncLstat, adbSyncStat } from './stat';\n\nexport class AdbSync extends AutoDisposable {\n    protected adb: Adb;\n\n    protected stream: AdbBufferedStream;\n\n    protected sendLock = this.addDisposable(new AutoResetEvent());\n\n    public get supportStat(): boolean {\n        return this.adb.features!.includes(AdbFeatures.StatV2);\n    }\n\n    public constructor(adb: Adb, stream: AdbStream) {\n        super();\n\n        this.adb = adb;\n        this.stream = new AdbBufferedStream(stream);\n    }\n\n    public async lstat(path: string) {\n        await this.sendLock.wait();\n\n        try {\n            return adbSyncLstat(this.stream, path, this.supportStat);\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async stat(path: string) {\n        if (!this.supportStat) {\n            throw new Error('Not supported');\n        }\n\n        await this.sendLock.wait();\n\n        try {\n            return adbSyncStat(this.stream, path);\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async isDirectory(path: string): Promise<boolean> {\n        try {\n            await this.lstat(path + '/');\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    public async *opendir(\n        path: string\n    ): AsyncGenerator<AdbSyncEntryResponse, void, void> {\n        await this.sendLock.wait();\n\n        try {\n            yield* adbSyncOpenDir(this.stream, path);\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async readdir(path: string) {\n        const results: AdbSyncEntryResponse[] = [];\n        for await (const entry of this.opendir(path)) {\n            results.push(entry);\n        }\n        return results;\n    }\n\n    public async *read(path: string): AsyncGenerator<ArrayBuffer, void, void> {\n        await this.sendLock.wait();\n\n        try {\n            yield* adbSyncPull(this.stream, path);\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async write(\n        path: string,\n        file: ArrayLike<number> | ArrayBufferLike | AsyncIterable<ArrayBuffer>,\n        mode?: number,\n        mtime?: number,\n        onProgress?: (uploaded: number) => void,\n    ): Promise<void> {\n        await this.sendLock.wait();\n\n        try {\n            await adbSyncPush(this.stream, path, file, mode, mtime, undefined, onProgress);\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public dispose() {\n        super.dispose();\n        this.stream.close();\n    }\n}\n","import { AdbCommandBase } from './base';\n\nexport class AdbTcpIpCommand extends AdbCommandBase {\n    public async setPort(port: number): Promise<void> {\n        if (port <= 0) {\n            throw new Error(`Invalid port ${port}`);\n        }\n\n        const output = await this.adb.createStreamAndReadAll(`tcpip:${port}`);\n        if (output !== `restarting in TCP mode port: ${port}\\n`) {\n            throw new Error('Invalid response');\n        }\n    }\n\n    public async disable(): Promise<void> {\n        const output = await this.adb.createStreamAndReadAll('usb:');\n        if (output !== 'restarting in USB mode\\n') {\n            throw new Error('Invalid response');\n        }\n    }\n}\n","export class AdbWebBackendWatcher {\n    private callback: () => void;\n\n    public constructor(callback: () => void) {\n        this.callback = callback;\n\n        window.navigator.usb.addEventListener('connect', callback);\n        window.navigator.usb.addEventListener('disconnect', callback);\n    }\n\n    public dispose(): void {\n        window.navigator.usb.removeEventListener('connect', this.callback);\n        window.navigator.usb.removeEventListener('disconnect', this.callback);\n    }\n}\n","import { AdbBackend, decodeBase64, encodeBase64 } from '@yume-chan/adb';\nimport { EventEmitter } from '@yume-chan/event';\n\nexport * from './watcher';\n\nexport const WebUsbDeviceFilter: USBDeviceFilter = {\n    classCode: 0xFF,\n    subclassCode: 0x42,\n    protocolCode: 1,\n};\n\nconst PrivateKeyStorageKey = 'private-key';\n\nconst Utf8Encoder = new TextEncoder();\nconst Utf8Decoder = new TextDecoder();\n\nexport function encodeUtf8(input: string): ArrayBuffer {\n    return Utf8Encoder.encode(input);\n}\n\nexport function decodeUtf8(buffer: ArrayBuffer): string {\n    return Utf8Decoder.decode(buffer);\n}\n\nexport default class AdbWebBackend implements AdbBackend {\n    public static async getDevices(): Promise<AdbWebBackend[]> {\n        const devices = await window.navigator.usb.getDevices();\n        return devices.map(device => new AdbWebBackend(device));\n    }\n\n    public static async requestDevice(): Promise<AdbWebBackend | undefined> {\n        try {\n            const device = await navigator.usb.requestDevice({ filters: [WebUsbDeviceFilter] });\n            return new AdbWebBackend(device);\n        } catch (e) {\n            switch (e.name) {\n                case 'NotFoundError':\n                    return undefined;\n                default:\n                    throw e;\n            }\n        }\n    }\n\n    private _device: USBDevice;\n\n    public get serial(): string { return this._device.serialNumber!; }\n\n    public get name(): string { return this._device.productName!; }\n\n    private readonly disconnectEvent = new EventEmitter<void>();\n    public readonly onDisconnected = this.disconnectEvent.event;\n\n    private _inEndpointNumber!: number;\n    private _outEndpointNumber!: number;\n\n    public constructor(device: USBDevice) {\n        this._device = device;\n        window.navigator.usb.addEventListener('disconnect', this.handleDisconnect);\n    }\n\n    private handleDisconnect = (e: USBConnectionEvent) => {\n        if (e.device === this._device) {\n            this.disconnectEvent.fire();\n        }\n    };\n\n    public async connect(): Promise<void> {\n        if (!this._device.opened) {\n            await this._device.open();\n        }\n\n        for (const configuration of this._device.configurations) {\n            for (const interface_ of configuration.interfaces) {\n                for (const alternate of interface_.alternates) {\n                    if (alternate.interfaceSubclass === WebUsbDeviceFilter.subclassCode &&\n                        alternate.interfaceClass === WebUsbDeviceFilter.classCode &&\n                        alternate.interfaceSubclass === WebUsbDeviceFilter.subclassCode) {\n                        if (this._device.configuration?.configurationValue !== configuration.configurationValue) {\n                            await this._device.selectConfiguration(configuration.configurationValue);\n                        }\n\n                        if (!interface_.claimed) {\n                            await this._device.claimInterface(interface_.interfaceNumber);\n                        }\n\n                        if (interface_.alternate.alternateSetting !== alternate.alternateSetting) {\n                            await this._device.selectAlternateInterface(interface_.interfaceNumber, alternate.alternateSetting);\n                        }\n\n                        for (const endpoint of alternate.endpoints) {\n                            switch (endpoint.direction) {\n                                case 'in':\n                                    this._inEndpointNumber = endpoint.endpointNumber;\n                                    if (this._outEndpointNumber !== undefined) {\n                                        return;\n                                    }\n                                    break;\n                                case 'out':\n                                    this._outEndpointNumber = endpoint.endpointNumber;\n                                    if (this._inEndpointNumber !== undefined) {\n                                        return;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        throw new Error('Unknown error');\n    }\n\n    public *iterateKeys(): Generator<ArrayBuffer, void, void> {\n        const privateKey = window.localStorage.getItem(PrivateKeyStorageKey);\n        if (privateKey) {\n            yield decodeBase64(privateKey);\n        }\n    }\n\n    public async generateKey(): Promise<ArrayBuffer> {\n        const { privateKey: cryptoKey } = await crypto.subtle.generateKey(\n            {\n                name: 'RSASSA-PKCS1-v1_5',\n                modulusLength: 2048,\n                // 65537\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                hash: 'SHA-1',\n            },\n            true,\n            ['sign', 'verify']\n        );\n\n        const privateKey = await crypto.subtle.exportKey('pkcs8', cryptoKey);\n        window.localStorage.setItem(PrivateKeyStorageKey, decodeUtf8(encodeBase64(privateKey)));\n        return privateKey;\n    }\n\n    public encodeUtf8(input: string): ArrayBuffer {\n        return encodeUtf8(input);\n    }\n\n    public decodeUtf8(buffer: ArrayBuffer): string {\n        return decodeUtf8(buffer);\n    }\n\n    public async write(buffer: ArrayBuffer): Promise<void> {\n        await this._device.transferOut(this._outEndpointNumber, buffer);\n    }\n\n    public async read(length: number): Promise<ArrayBuffer> {\n        const result = await this._device.transferIn(this._inEndpointNumber, length);\n\n        if (result.status === 'stall') {\n            await this._device.clearHalt('in', this._inEndpointNumber);\n        }\n\n        const { buffer } = result.data!;\n        return buffer;\n    }\n\n    public async dispose() {\n        window.navigator.usb.removeEventListener('disconnect', this.handleDisconnect);\n        this.disconnectEvent.dispose();\n        await this._device.close();\n    }\n}\n","import React, { memo } from 'react';\n\nexport function withDisplayName(name: string) {\n    return <P extends object>(Component: React.FunctionComponent<P>) => {\n        Component.displayName = name;\n        return memo(Component);\n    };\n}\n\nexport function forwardRef<T>(name: string) {\n    return <P extends object>(Component: React.ForwardRefRenderFunction<T, P>) => {\n        return withDisplayName(name)(React.forwardRef(Component));\n    };\n}\n","import { CommandBar as FluentCommandBar, ICommandBarProps, StackItem } from '@fluentui/react';\nimport React from 'react';\nimport { withDisplayName } from './with-display-name';\n\nconst ContainerStyles = {\n    root: {\n        margin: '-20px -20px 0 -20px',\n        borderBottom: '1px solid rgb(243, 242, 241)',\n    }\n} as const;\n\nexport const CommandBar = withDisplayName('CommandBar')((props: ICommandBarProps) => {\n    return (\n        <StackItem styles={ContainerStyles}>\n            <FluentCommandBar {...props} />\n        </StackItem>\n    );\n});\n","import { createMergedRef } from '@fluentui/react';\nimport React, { CSSProperties, HTMLAttributes, PropsWithChildren, useCallback, useRef } from 'react';\nimport { forwardRef } from './with-display-name';\n\nexport interface ResizeObserverProps extends HTMLAttributes<HTMLDivElement>, PropsWithChildren<{}> {\n    onResize: (width: number, height: number) => void;\n}\n\nconst iframeStyle: CSSProperties = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    visibility: 'hidden',\n};\n\nexport const ResizeObserver = forwardRef<HTMLDivElement>('ResizeObserver')(({\n    onResize,\n    style,\n    children,\n    ...rest\n}: ResizeObserverProps, ref): JSX.Element | null => {\n    const onResizeRef = useRef<(width: number, height: number) => void>(onResize);\n    onResizeRef.current = onResize;\n\n    const containerRef = useRef<HTMLDivElement | null>(null);\n    const mergedRef = createMergedRef<HTMLDivElement | null>()(ref, containerRef);\n\n    const handleResize = useCallback(() => {\n        const { width, height } = containerRef.current!.getBoundingClientRect();\n        onResizeRef.current(width, height);\n    }, []);\n\n    const handleIframeRef = useCallback((element: HTMLIFrameElement | null) => {\n        if (element) {\n            element.contentWindow!.addEventListener('resize', handleResize);\n        }\n    }, []);\n\n    const containerStyle: CSSProperties = React.useMemo(() => {\n        if (!style) {\n            return { position: 'relative' };\n        }\n\n        if (!style.position) {\n            return { ...style, position: 'relative' };\n        }\n\n        return style;\n    }, [style]);\n\n    return (\n        <div ref={mergedRef} style={containerStyle} {...rest}>\n            <iframe ref={handleIframeRef} style={iframeStyle} />\n            {children}\n        </div>\n    );\n});\n","import { StackItem } from '@fluentui/react';\nimport React, { ReactNode, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { ResizeObserver } from './resize-observer';\nimport { forwardRef } from './with-display-name';\n\nexport interface DeviceViewProps {\n    width: number;\n\n    height: number;\n\n    children: ReactNode;\n}\n\nexport interface DeviceViewRef {\n    enterFullscreen(): void;\n}\n\nexport const DeviceView = forwardRef<DeviceViewRef>('DeviceView')(({\n    width,\n    height,\n    children,\n}: DeviceViewProps, ref) => {\n    const [containerWidth, setContainerWidth] = useState(0);\n    const [containerHeight, setContainerHeight] = useState(0);\n    const [scale, setScale] = useState(1);\n\n    const handleResize = useCallback((containerWidth: number, containerHeight: number) => {\n        setContainerWidth(containerWidth);\n        setContainerHeight(containerHeight);\n    }, []);\n\n    useEffect(() => {\n        if (width === 0 || containerWidth === 0) {\n            setScale(1);\n            return;\n        }\n\n        const videoRatio = width / height;\n        const containerRatio = containerWidth / containerHeight;\n        if (videoRatio > containerRatio) {\n            setScale(containerWidth / width);\n        } else {\n            setScale(containerHeight / height);\n        }\n    }, [width, height, containerWidth, containerHeight]);\n\n    const containerRef = useRef<HTMLDivElement | null>(null);\n    useImperativeHandle(ref, () => ({\n        enterFullscreen() { containerRef.current!.requestFullscreen(); },\n    }), []);\n\n    return (\n        <StackItem grow>\n            <ResizeObserver\n                ref={containerRef}\n                style={{\n                    position: 'relative',\n                    width: '100%',\n                    height: '100%',\n                    backgroundColor: 'black',\n                }}\n                onResize={handleResize}\n            >\n                <div\n                    style={{\n                        position: 'absolute',\n                        left: '50%',\n                        top: '50%',\n                        transform: `scale(${scale}) translate(-50%, -50%)`,\n                        transformOrigin: 'top left',\n                    }}\n                >\n                    {children}\n                </div>\n            </ResizeObserver>\n        </StackItem>\n    );\n});\n","import { Link } from '@fluentui/react';\nimport React, { ReactNode } from 'react';\nimport { withDisplayName } from './with-display-name';\n\nexport interface ExternalLinkProps {\n    href: string;\n\n    spaceBefore?: boolean;\n\n    spaceAfter?: boolean;\n\n    children?: ReactNode;\n}\n\nexport const ExternalLink = withDisplayName('ExternalLink')(({\n    href,\n    spaceBefore,\n    spaceAfter,\n    children,\n}: ExternalLinkProps) => {\n    return (\n        <>\n            {spaceBefore && ' '}\n            <Link href={href} target=\"_blank\" rel=\"noopener\">{children ?? href}</Link>\n            {spaceAfter && ' '}\n        </>\n    );\n});\n","import { useSetInterval } from '@uifabric/react-hooks';\nimport { useEffect, useRef, useState } from 'react';\n\nconst units = [' B', ' KB', ' MB', ' GB'];\n\nexport function formatSize(value: number): string {\n    let index = 0;\n    while (index < units.length && value > 1024) {\n        index += 1;\n        value /= 1024;\n    }\n    return value.toLocaleString(undefined, { maximumFractionDigits: 2 }) + units[index];\n}\n\nexport function formatSpeed(completed: number, total: number, speed: number): string | undefined {\n    if (total === 0) {\n        return undefined;\n    }\n    return `${formatSize(completed)} of ${formatSize(total)} (${formatSize(speed)}/s)`;\n}\n\nexport function useSpeed(completed: number): [completed: number, speed: number] {\n    const completedRef = useRef(completed);\n    completedRef.current = completed;\n\n    const [debouncedCompleted, setDebouncedCompleted] = useState(completed);\n    const [speed, setSpeed] = useState(0);\n\n    const { setInterval } = useSetInterval();\n    useEffect(() => {\n        setInterval(() => {\n            setDebouncedCompleted(debouncedCompleted => {\n                setSpeed(completedRef.current - debouncedCompleted);\n                return completedRef.current;\n            });\n        }, 1000);\n    }, []);\n\n    return [debouncedCompleted, speed];\n}\n\nexport function delay(time: number): Promise<void> {\n    return new Promise(resolve => {\n        window.setTimeout(resolve, time);\n    });\n}\n","import { Dialog, DialogFooter, DialogType, PrimaryButton } from '@fluentui/react';\nimport { useBoolean } from '@uifabric/react-hooks';\nimport React, { PropsWithChildren, useMemo, useState } from 'react';\nimport { withDisplayName } from './utils';\n\nexport interface ErrorDialogContext {\n    show(message: string): void;\n}\n\nexport const ErrorDialogContext = React.createContext<ErrorDialogContext>({\n    show() { }\n});\n\nexport default withDisplayName('ErrorDialogProvider')((props: PropsWithChildren<{}>) => {\n    const [errorDialogVisible, { setTrue: showErrorDialog, setFalse: hideErrorDialog }] = useBoolean(false);\n    const [errorMessage, setErrorMessage] = useState<string | undefined>();\n\n    const context = useMemo((): ErrorDialogContext => ({\n        show(message) {\n            setErrorMessage(message);\n            showErrorDialog();\n        }\n    }), []);\n\n    return (\n        <ErrorDialogContext.Provider value={context}>\n            {props.children}\n\n            <Dialog\n                hidden={!errorDialogVisible}\n                dialogContentProps={{\n                    type: DialogType.normal,\n                    title: 'Error',\n                    subText: errorMessage,\n                }}\n            >\n                <DialogFooter>\n                    <PrimaryButton text=\"OK\" onClick={hideErrorDialog} />\n                </DialogFooter>\n            </Dialog>\n        </ErrorDialogContext.Provider>\n    );\n});\n","import { DefaultButton, Dialog, Dropdown, IDropdownOption, PrimaryButton, ProgressIndicator, Stack, StackItem, TooltipHost } from '@fluentui/react';\nimport { Adb, AdbBackend } from '@yume-chan/adb';\nimport AdbWebBackend, { AdbWebBackendWatcher } from '@yume-chan/adb-backend-web';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { ErrorDialogContext } from './error-dialog';\nimport { withDisplayName } from './utils';\n\nconst DropdownStyles = { dropdown: { width: 250 - 8 } };\n\ninterface ConnectProps {\n    device: Adb | undefined;\n\n    onDeviceChange: (device: Adb | undefined) => void;\n}\n\nexport default withDisplayName('Connect')(({\n    device,\n    onDeviceChange,\n}: ConnectProps): JSX.Element | null => {\n    const { show: showErrorDialog } = useContext(ErrorDialogContext);\n\n    const [backendOptions, setBackendOptions] = useState<IDropdownOption[]>([]);\n    const [selectedBackend, setSelectedBackend] = useState<AdbBackend | undefined>();\n    useEffect(() => {\n        async function refresh() {\n            const backendList = await AdbWebBackend.getDevices();\n\n            const options = backendList.map(item => ({\n                key: item.serial,\n                text: `${item.serial} ${item.name ? `(${item.name})` : ''}`,\n                data: item,\n            }));\n            setBackendOptions(options);\n\n            setSelectedBackend(old => {\n                if (old && backendList.some(item => item.serial === old.serial)) {\n                    return old;\n                }\n                return backendList[0];\n            });\n        };\n\n        refresh();\n\n        const watcher = new AdbWebBackendWatcher(refresh);\n        return () => watcher.dispose();\n    }, []);\n\n    const handleSelectedBackendChange = (\n        _e: React.FormEvent<HTMLDivElement>,\n        option?: IDropdownOption,\n    ) => {\n        setSelectedBackend(option?.data as AdbBackend);\n    };\n\n    const requestAccess = useCallback(async () => {\n        const backend = await AdbWebBackend.requestDevice();\n        if (backend) {\n            setBackendOptions(list => {\n                for (const item of list) {\n                    if (item.key === backend.serial) {\n                        setSelectedBackend(item.data);\n                        return list;\n                    }\n                }\n\n                setSelectedBackend(backend);\n                return [...list, {\n                    key: backend.serial,\n                    text: `${backend.serial} ${backend.name ? `(${backend.name})` : ''}`,\n                    data: backend,\n                }];\n            });\n        }\n    }, []);\n\n    const [connecting, setConnecting] = useState(false);\n    const connect = useCallback(async () => {\n        try {\n            if (selectedBackend) {\n                const device = new Adb(selectedBackend);\n                try {\n                    setConnecting(true);\n                    await device.connect();\n                    onDeviceChange(device);\n                } catch (e) {\n                    device.dispose();\n                    throw e;\n                }\n            }\n        } catch (e) {\n            showErrorDialog(e.message);\n        } finally {\n            setConnecting(false);\n        }\n    }, [selectedBackend, onDeviceChange]);\n    const disconnect = useCallback(async () => {\n        try {\n            await device!.dispose();\n            onDeviceChange(undefined);\n        } catch (e) {\n            showErrorDialog(e.message);\n        }\n    }, [device]);\n    useEffect(() => {\n        return device?.onDisconnected(() => {\n            onDeviceChange(undefined);\n        });\n    }, [device, onDeviceChange]);\n\n    return (\n        <Stack\n            tokens={{ childrenGap: 8, padding: '0 0 8px 8px' }}\n        >\n            <Dropdown\n                disabled={!!device || backendOptions.length === 0}\n                label=\"Available devices\"\n                placeholder=\"No available devices\"\n                options={backendOptions}\n                styles={DropdownStyles}\n                dropdownWidth={300}\n                selectedKey={selectedBackend?.serial}\n                onChange={handleSelectedBackendChange}\n            />\n\n            {!device ? (\n                <Stack horizontal tokens={{ childrenGap: 8 }}>\n                    <StackItem grow shrink>\n                        <PrimaryButton\n                            text=\"Connect\"\n                            disabled={!selectedBackend}\n                            primary={!!selectedBackend}\n                            styles={{ root: { width: '100%' } }}\n                            onClick={connect}\n                        />\n                    </StackItem>\n                    <StackItem grow shrink>\n                        <TooltipHost\n                            content=\"WebADB can't connect to anything without your explicit permission.\"\n                        >\n                            <DefaultButton\n                                text=\"Add device\"\n                                primary={!selectedBackend}\n                                styles={{ root: { width: '100%' } }}\n                                onClick={requestAccess}\n                            />\n                        </TooltipHost>\n                    </StackItem>\n                </Stack>\n            ) : (\n                    <DefaultButton text=\"Disconnect\" onClick={disconnect} />\n                )}\n\n            <Dialog\n                hidden={!connecting}\n                dialogContentProps={{\n                    title: 'Connecting...',\n                    subText: 'Please authorize the connection on your device'\n                }}\n            >\n                <ProgressIndicator />\n            </Dialog>\n        </Stack>\n    );\n});\n","import { AnimationClassNames, concatStyleSets, IStackProps, Stack } from '@fluentui/react';\nimport React, { useMemo, useRef } from 'react';\nimport { match, matchPath, RedirectProps, RouteProps, useLocation, useRouteMatch } from 'react-router-dom';\nimport { withDisplayName } from './utils';\n\nexport const DefaultStackProps: IStackProps = {\n    tokens: { childrenGap: 8, padding: 20 },\n    verticalFill: true,\n};\n\nexport const RouteStackProps: IStackProps = {\n    ...DefaultStackProps,\n    className: AnimationClassNames.slideUpIn10,\n    styles: { root: { overflow: 'auto' } },\n};\n\nexport interface CacheRouteProps extends RouteProps {\n    noCache?: boolean;\n}\n\nexport const CacheRoute = withDisplayName('CacheRoute')((props: CacheRouteProps) => {\n    const match = useRouteMatch(props);\n\n    const everMatched = useRef(false);\n    if (!everMatched.current && match) {\n        everMatched.current = true;\n    }\n\n    const stackProps = useMemo((): IStackProps => ({\n        ...RouteStackProps,\n        styles: concatStyleSets(\n            RouteStackProps.styles,\n            { root: { display: match ? 'flex' : 'none' } }\n        ),\n    }), [!!match]);\n\n    if (props.noCache && !match) {\n        return null;\n    }\n\n    if (!everMatched.current) {\n        return null;\n    }\n\n    return (\n        <Stack {...stackProps}>\n            {React.Children.map(\n                props.children,\n                element =>\n                    React.isValidElement(element)\n                        ? React.cloneElement(element, { ...element.props, visible: !!match })\n                        : element\n            )}\n        </Stack>\n    );\n});\n\nexport interface CacheSwitchProps {\n    children: React.ReactNodeArray;\n}\n\nexport const CacheSwitch = withDisplayName('CacheSwitch')((props: CacheSwitchProps) => {\n    const location = useLocation();\n    let contextMatch = useRouteMatch();\n\n    let element: React.ReactElement | undefined;\n    let computedMatch: match | null | undefined;\n    let cached: React.ReactElement[] = [];\n    React.Children.forEach(props.children, child => {\n        if (React.isValidElement<RouteProps & RedirectProps>(child)) {\n            // Always render all cached routes\n            const isCacheRoute = child.type === CacheRoute;\n            if (isCacheRoute) {\n                cached.push(child);\n            }\n\n            // If we already found the matched route,\n            // Don't care about others\n            if (computedMatch) {\n                return;\n            }\n\n            const path = child.props.path ?? child.props.from;\n            const match = path\n                ? matchPath(location.pathname, { ...child.props, path })\n                : contextMatch;\n\n            if (match) {\n                computedMatch = match;\n\n                if (isCacheRoute) {\n                    // Don't render a CacheRoute twice\n                    element = undefined;\n                } else {\n                    element = child;\n                }\n            }\n        }\n    });\n\n    return (\n        <>\n            {cached}\n            {element ? React.cloneElement(element, { location, computedMatch }) : null}\n        </>\n    );\n});\n","import { Breadcrumb, concatStyleSets, ContextualMenu, ContextualMenuItem, DetailsListLayoutMode, Dialog, DirectionalHint, IBreadcrumbItem, IColumn, Icon, IContextualMenuItem, IDetailsHeaderProps, IDetailsList, IRenderFunction, Layer, MarqueeSelection, mergeStyleSets, Overlay, ProgressIndicator, Selection, ShimmeredDetailsList, StackItem } from '@fluentui/react';\nimport { FileIconType, getFileTypeIconProps, initializeFileTypeIcons } from '@uifabric/file-type-icons';\nimport { useConst } from '@uifabric/react-hooks';\nimport { AdbSyncEntryResponse, AdbSyncMaxPacketSize, LinuxFileType } from '@yume-chan/adb';\nimport path from 'path';\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport StreamSaver from 'streamsaver';\nimport { ErrorDialogContext } from '../error-dialog';\nimport { CommandBar, delay, formatSize, formatSpeed, useSpeed, withDisplayName } from '../utils';\nimport { RouteProps } from './type';\n\ninitializeFileTypeIcons();\nStreamSaver.mitm = 'streamsaver/mitm.html';\n\ninterface ListItem extends AdbSyncEntryResponse {\n    key: string;\n}\n\nfunction toListItem(item: AdbSyncEntryResponse): ListItem {\n    return { ...item, key: item.name! };\n}\n\nconst classNames = mergeStyleSets({\n    name: {\n        cursor: 'pointer',\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    },\n});\n\nconst renderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (props?, defaultRender?) => {\n    if (!props || !defaultRender) {\n        return null;\n    }\n\n    return defaultRender({\n        ...props,\n        styles: concatStyleSets(props.styles, { root: { paddingTop: 0 } })\n    });\n};\n\nfunction createReadableStreamFromBufferIterator(\n    iterator: AsyncIterator<ArrayBuffer>\n): ReadableStream<Uint8Array> {\n    return new ReadableStream<Uint8Array>({\n        async pull(controller) {\n            const { desiredSize } = controller;\n            if (!desiredSize || desiredSize < 0) {\n                return;\n            }\n\n            let written = 0;\n            while (written < desiredSize) {\n                const result = await iterator.next();\n                if (result.done) {\n                    controller.close();\n                    return;\n                }\n\n                controller.enqueue(new Uint8Array(result.value));\n                written += result.value.byteLength;\n            }\n        },\n    });\n}\n\nasync function* chunkFile(file: File): AsyncGenerator<ArrayBuffer, void, void> {\n    for (let i = 0; i < file.size; i += AdbSyncMaxPacketSize) {\n        yield file.slice(i, i + AdbSyncMaxPacketSize, file.type).arrayBuffer();\n    }\n}\n\nfunction compareCaseInsensitively(a: string, b: string) {\n    let result = a.toLocaleLowerCase().localeCompare(b.toLocaleLowerCase());\n    if (result !== 0) {\n        return result;\n    } else {\n        return a.localeCompare(b);\n    }\n}\n\nexport const FileManager = withDisplayName('FileManager')(({\n    device,\n}: RouteProps): JSX.Element | null => {\n    const { show: showErrorDialog } = useContext(ErrorDialogContext);\n\n    const [currentPath, setCurrentPath] = useState('/');\n    const currentPathRef = useRef(currentPath);\n    currentPathRef.current = currentPath;\n\n    const breadcrumbItems = useMemo((): IBreadcrumbItem[] => {\n        let part = '';\n        const list: IBreadcrumbItem[] = currentPath.split('/').filter(Boolean).map(segment => {\n            part += '/' + segment;\n            return {\n                key: part,\n                text: segment,\n                onClick: (_e, item) => {\n                    if (!item) {\n                        return;\n                    }\n                    setCurrentPath(item.key);\n                },\n            };\n        });\n        list.unshift({\n            key: '/',\n            text: 'Device',\n            onClick: () => setCurrentPath('/'),\n        });\n        list[list.length - 1].isCurrentItem = true;\n        list[list.length - 1].onClick = undefined;\n        return list;\n    }, [currentPath]);\n\n    const [items, setItems] = useState<ListItem[]>([]);\n    const [loading, setLoading] = useState(false);\n    const listRef = useRef<IDetailsList | null>(null);\n    const load = useCallback(async () => {\n        setItems([]);\n\n        if (!device) {\n            setCurrentPath('/');\n            return;\n        }\n\n        setLoading(true);\n        const sync = await device.sync();\n\n        const items: ListItem[] = [];\n        const linkItems: AdbSyncEntryResponse[] = [];\n        const intervalId = setInterval(() => {\n            setItems(items.slice());\n        }, 1000);\n\n        try {\n            let lastBreak = Date.now();\n\n            for await (const entry of sync.opendir(currentPath)) {\n                if (currentPath !== currentPathRef.current) {\n                    break;\n                }\n\n                if (entry.name === '.' || entry.name === '..') {\n                    continue;\n                }\n\n                if (entry.type === LinuxFileType.Link) {\n                    linkItems.push(entry);\n                } else {\n                    items.push(toListItem(entry));\n                }\n\n                const now = Date.now();\n                if (now - lastBreak > 16) {\n                    await delay(0);\n                    lastBreak = now;\n                }\n            }\n\n            for (const entry of linkItems) {\n                if (!await sync.isDirectory(path.resolve(currentPath, entry.name!))) {\n                    entry.mode = (LinuxFileType.File << 12) | entry.permission;\n                    entry.size = 0;\n                    toListItem(entry);\n                }\n                items.push(toListItem(entry));\n            }\n\n            setItems(items);\n            listRef.current?.scrollToIndex(0);\n        } finally {\n            if (currentPath === currentPathRef.current) {\n                setLoading(false);\n            }\n            clearInterval(intervalId);\n            sync.dispose();\n        }\n    }, [device, currentPath]);\n    useEffect(() => {\n        load();\n    }, [load]);\n\n    const [sortedList, setSortedList] = useState<ListItem[]>([]);\n    const [sortKey, setSortKey] = useState<keyof ListItem>('name');\n    const [sortDescending, setSortDescendent] = useState(false);\n    useEffect(() => {\n        const list = items.slice();\n        list.sort((a, b) => {\n            const aIsFile = a.type === LinuxFileType.File ? 1 : 0;\n            const bIsFile = b.type === LinuxFileType.File ? 1 : 0;\n\n            let result: number;\n            if (aIsFile !== bIsFile) {\n                result = aIsFile - bIsFile;\n            } else {\n                const aSortKey = a[sortKey]!;\n                const bSortKey = b[sortKey]!;\n\n                if (aSortKey === bSortKey) {\n                    result = compareCaseInsensitively(a.name!, b.name!);\n                } else if (typeof aSortKey === 'string') {\n                    result = compareCaseInsensitively(aSortKey, bSortKey as string);\n                } else {\n                    result = aSortKey < bSortKey ? -1 : 1;\n                }\n            }\n\n            if (sortDescending) {\n                result *= -1;\n            }\n            return result;\n        });\n        setSortedList(list);\n    }, [items, sortKey, sortDescending]);\n\n    const columns: IColumn[] = useMemo(() => {\n        const list: IColumn[] = [\n            {\n                key: 'type',\n                name: 'File Type',\n                iconName: 'Page',\n                isIconOnly: true,\n                minWidth: 20,\n                maxWidth: 20,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    switch (item.type) {\n                        case LinuxFileType.Link:\n                            return <Icon {...getFileTypeIconProps({ size: 20, type: FileIconType.linkedFolder })} />;\n                        case LinuxFileType.Directory:\n                            return <Icon {...getFileTypeIconProps({ size: 20, type: FileIconType.folder })} />;\n                        case LinuxFileType.File:\n                            return <Icon {...getFileTypeIconProps({ size: 20, extension: path.extname(item.name!) })} />;\n                        default:\n                            return <Icon {...getFileTypeIconProps({ size: 20, extension: 'txt' })} />;\n                    }\n                }\n            },\n            {\n                key: 'name',\n                name: 'Name',\n                minWidth: 0,\n                isRowHeader: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    return (\n                        <span className={classNames.name} data-selection-invoke>\n                            {item.name}\n                        </span>\n                    );\n                }\n            },\n            {\n                key: 'permission',\n                name: 'Permission',\n                minWidth: 0,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    return `${(item.mode >> 6 & 0b100).toString(8)}${(item.mode >> 3 & 0b100).toString(8)}${(item.mode & 0b100).toString(8)}`;\n                }\n            },\n            {\n                key: 'size',\n                name: 'Size',\n                minWidth: 0,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    if (item.type === LinuxFileType.File) {\n                        return formatSize(item.size);\n                    }\n                    return '';\n                }\n            },\n            {\n                key: 'mtime',\n                name: 'Last Modified Time',\n                minWidth: 150,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    return new Date(item.mtime * 1000).toLocaleString();\n                },\n            }\n        ];\n\n        for (const item of list) {\n            item.onColumnClick = (_e, column) => {\n                if (sortKey === column.key) {\n                    setSortDescendent(!sortDescending);\n                } else {\n                    setSortKey(column.key as keyof ListItem);\n                    setSortDescendent(false);\n                }\n            };\n\n            if (item.key === sortKey) {\n                item.isSorted = true;\n                item.isSortedDescending = sortDescending;\n            }\n        }\n\n        return list;\n    }, [sortKey, sortDescending]);\n\n    const [previewUrl, setPreviewUrl] = useState<string | undefined>();\n    const previewImage = useCallback(async (path: string) => {\n        const sync = await device!.sync();\n        try {\n            const readableStream = createReadableStreamFromBufferIterator(sync.read(path));\n            const response = new Response(readableStream);\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            setPreviewUrl(url);\n        } finally {\n            sync.dispose();\n        }\n    }, [device]);\n    const hidePreview = useCallback(() => {\n        setPreviewUrl(undefined);\n    }, []);\n\n    const handleItemInvoked = useCallback((item: AdbSyncEntryResponse) => {\n        switch (item.type) {\n            case LinuxFileType.Link:\n            case LinuxFileType.Directory:\n                setCurrentPath(path.resolve(currentPath, item.name!));\n                break;\n            case LinuxFileType.File:\n                switch (path.extname(item.name!)) {\n                    case '.jpg':\n                    case '.png':\n                    case '.svg':\n                    case '.gif':\n                        previewImage(path.resolve(currentPath, item.name!));\n                        break;\n                }\n                break;\n        }\n    }, [currentPath, previewImage]);\n\n    const [selectedItems, setSelectedItems] = useState<ListItem[]>([]);\n    const selection = useConst(() => new Selection({\n        onSelectionChanged() {\n            const selectedItems = selection.getSelection() as ListItem[];\n            setSelectedItems(selectedItems);\n        },\n    }));\n\n    const [uploading, setUploading] = useState(false);\n    const [uploadPath, setUploadPath] = useState('');\n    const [uploadedSize, setUploadedSize] = useState(0);\n    const [uploadTotalSize, setUploadTotalSize] = useState(0);\n    const [debouncedUploadedSize, uploadSpeed] = useSpeed(uploadedSize);\n    const upload = useCallback(async (file: File) => {\n        const sync = await device!.sync();\n        try {\n            const itemPath = path.resolve(currentPath, file.name);\n            setUploading(true);\n            setUploadPath(file.name);\n            setUploadTotalSize(file.size);\n            await sync.write(\n                itemPath,\n                chunkFile(file),\n                (LinuxFileType.File << 12) | 0o666,\n                file.lastModified / 1000,\n                setUploadedSize,\n            );\n        } catch (e) {\n            showErrorDialog(e.message);\n        } finally {\n            sync.dispose();\n            load();\n            setUploading(false);\n        }\n    }, [currentPath, device]);\n\n    const [menuItems, setMenuItems] = useState<IContextualMenuItem[]>([]);\n    useEffect(() => {\n        let result: IContextualMenuItem[] = [];\n\n        switch (selectedItems.length) {\n            case 0:\n                result.push({\n                    key: 'upload',\n                    text: 'Upload',\n                    iconProps: { iconName: 'Upload' },\n                    disabled: !device,\n                    onClick() {\n                        const input = document.createElement('input');\n                        input.type = \"file\";\n                        input.onchange = async () => {\n                            if (input.files?.length) {\n                                for (let i = 0; i < input.files!.length; i++) {\n                                    const file = input.files!.item(i)!;\n                                    await upload(file);\n                                }\n                            }\n                        };\n                        input.click();\n\n                        return false;\n                    }\n                });\n                break;\n            // @ts-expect-error\n            case 1:\n                if (selectedItems[0].type === LinuxFileType.File) {\n                    result.push({\n                        key: 'download',\n                        text: 'Download',\n                        iconProps: { iconName: 'Download' },\n                        onClick() {\n                            (async () => {\n                                const sync = await device!.sync();\n                                try {\n                                    const itemPath = path.resolve(currentPath, selectedItems[0].name!);\n                                    const readableStream = createReadableStreamFromBufferIterator(sync.read(itemPath));\n\n                                    const writeableStream = StreamSaver.createWriteStream(selectedItems[0].name!, {\n                                        size: selectedItems[0].size,\n                                    });\n                                    await readableStream.pipeTo(writeableStream);\n                                } catch (e) {\n                                    showErrorDialog(e.message);\n                                } finally {\n                                    sync.dispose();\n                                }\n                            })();\n                            return false;\n                        },\n                    });\n                }\n            default:\n                result.push({\n                    key: 'delete',\n                    text: 'Delete',\n                    iconProps: { iconName: 'Delete' },\n                    onClick() {\n                        (async () => {\n                            try {\n                                for (const item of selectedItems) {\n                                    const output = await device!.exec(\n                                        'rm',\n                                        '-rf',\n                                        `\"${path.resolve(currentPath, item.name!)}\"`\n                                    );\n                                    if (output) {\n                                        showErrorDialog(output);\n                                        return;\n                                    }\n                                }\n                            } catch (e) {\n                                showErrorDialog(e.message);\n                            } finally {\n                                load();\n                            }\n                        })();\n                        return false;\n                    }\n                });\n                break;\n        }\n\n        setMenuItems(result);\n    }, [selectedItems, device, currentPath]);\n\n    const [contextMenuTarget, setContextMenuTarget] = useState<MouseEvent>();\n    const showContextMenu = useCallback((\n        _item?: AdbSyncEntryResponse,\n        _index?: number,\n        e?: Event\n    ) => {\n        if (!e) {\n            return false;\n        }\n\n        if (menuItems.length) {\n            setContextMenuTarget(e as MouseEvent);\n        }\n\n        return false;\n    }, [device, menuItems]);\n    const hideContextMenu = React.useCallback(() => {\n        setContextMenuTarget(undefined);\n    }, []);\n\n    return (\n        <>\n            <CommandBar items={menuItems} />\n\n            <StackItem grow styles={{\n                root: {\n                    margin: '-8px -20px -20px -20px',\n                    padding: '8px 20px 20px 20px',\n                    minHeight: 0,\n                }\n            }}>\n                <MarqueeSelection selection={selection}>\n                    <Breadcrumb items={breadcrumbItems} />\n\n                    <ShimmeredDetailsList\n                        componentRef={listRef}\n                        items={sortedList}\n                        columns={columns}\n                        setKey={currentPath}\n                        selection={selection}\n                        layoutMode={DetailsListLayoutMode.justified}\n                        enableShimmer={loading && items.length === 0}\n                        onItemInvoked={handleItemInvoked}\n                        onItemContextMenu={showContextMenu}\n                        onRenderDetailsHeader={renderDetailsHeader}\n                        usePageCache\n                    />\n                </MarqueeSelection>\n\n                {previewUrl && (\n                    <Layer>\n                        <Overlay onClick={hidePreview}>\n                            <div style={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                                <img src={previewUrl} style={{ maxWidth: '100%', maxHeight: '100%' }} />\n                            </div>\n                        </Overlay>\n                    </Layer>\n                )}\n\n                <ContextualMenu\n                    items={menuItems}\n                    hidden={!contextMenuTarget}\n                    directionalHint={DirectionalHint.bottomLeftEdge}\n                    target={contextMenuTarget}\n                    onDismiss={hideContextMenu}\n                    contextualMenuItemAs={props => <ContextualMenuItem {...props} hasIcons={false} />}\n                />\n\n                <Dialog\n                    hidden={!uploading}\n                    dialogContentProps={{\n                        title: 'Uploading...',\n                        subText: uploadPath\n                    }}\n                >\n                    <ProgressIndicator\n                        description={formatSpeed(debouncedUploadedSize, uploadTotalSize, uploadSpeed)}\n                        percentComplete={uploadedSize / uploadTotalSize}\n                    />\n                </Dialog>\n            </StackItem>\n        </>\n    );\n});\n","import { ICommandBarItemProps } from '@fluentui/react';\nimport React, { useCallback, useContext, useMemo, useRef, useState } from 'react';\nimport { ErrorDialogContext } from '../error-dialog';\nimport { CommandBar, DeviceView, withDisplayName } from '../utils';\nimport { RouteProps } from './type';\n\nexport const FrameBuffer = withDisplayName('FrameBuffer')(({\n    device\n}: RouteProps): JSX.Element | null => {\n    const { show: showErrorDialog } = useContext(ErrorDialogContext);\n\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n    const [width, setWidth] = useState(0);\n    const [height, setHeight] = useState(0);\n\n    const capture = useCallback(() => {\n        if (!device) {\n            return;\n        }\n\n        (async function () {\n            try {\n                const start = window.performance.now();\n                const framebuffer = await device!.framebuffer();\n                const end = window.performance.now();\n                console.log('time', end - start);\n\n                const { width, height } = framebuffer;\n\n                const canvas = canvasRef.current;\n                if (!canvas) {\n                    return;\n                }\n\n                setWidth(width);\n                setHeight(height);\n                canvas.width = width;\n                canvas.height = height;\n\n                const context = canvas.getContext(\"2d\")!;\n                const image = new ImageData(new Uint8ClampedArray(framebuffer.data!), width, height);\n                context.putImageData(image, 0, 0);\n            } catch (e) {\n                showErrorDialog(e.message);\n            }\n        })();\n    }, [device]);\n\n    const commandBarItems = useMemo((): ICommandBarItemProps[] => [\n        {\n            key: 'start',\n            disabled: !device,\n            iconProps: { iconName: 'Camera' },\n            text: 'Capture',\n            onClick: capture,\n        }\n    ], [device]);\n\n    const commandBarFarItems = useMemo((): ICommandBarItemProps[] => [\n        {\n            key: 'info',\n            iconProps: { iconName: 'Info' },\n            iconOnly: true,\n            tooltipHostProps: {\n                content: 'Use ADB FrameBuffer command to capture a full-size, high-resolution screenshot.',\n                calloutProps: {\n                    calloutMaxWidth: 250,\n                }\n            },\n        }\n    ], []);\n\n    return (\n        <>\n            <CommandBar items={commandBarItems} farItems={commandBarFarItems} />\n            <DeviceView width={width} height={height}>\n                <canvas ref={canvasRef} />\n            </DeviceView>\n        </>\n    );\n});\n","import { Callout, DirectionalHint, Link, mergeStyleSets, Text } from '@fluentui/react';\nimport { useBoolean } from '@uifabric/react-hooks';\nimport React, { useCallback, useRef } from 'react';\nimport { ExternalLink, withDisplayName } from '../utils';\n\nconst classNames = mergeStyleSets({\n    callout: {\n        padding: '8px 12px',\n    },\n});\n\nconst BoldTextStyles = { root: { fontWeight: '600' } };\n\ninterface CopyLinkProps {\n    href: string;\n}\n\nconst CopyLink = withDisplayName('CopyLink')(({\n    href,\n}: CopyLinkProps) => {\n    const calloutTarget = useRef<HTMLButtonElement | null>(null);\n    const [calloutVisible, { setTrue: showCallout, setFalse: hideCallout }] = useBoolean(false);\n    const copyLink = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n        navigator.clipboard.writeText(href);\n        calloutTarget.current = e.target as HTMLButtonElement;\n        showCallout();\n        setTimeout(hideCallout, 3000);\n    }, [href]);\n\n    return (\n        <>\n            <Link onClick={copyLink}>{href}</Link>\n            <Callout\n                directionalHint={DirectionalHint.topCenter}\n                hidden={!calloutVisible}\n                target={calloutTarget}\n                onDismiss={hideCallout}\n            >\n                <div className={classNames.callout}>\n                    Link copied. Open a new tab and paste into address bar.\n                </div>\n            </Callout>\n        </>\n    );\n});\n\nexport const Intro = withDisplayName('Intro')(() => {\n    return (\n        <>\n            <Text block>\n                This page is a demo of my\n                <ExternalLink href=\"https://github.com/yume-chan/ya-webadb/\" spaceBefore spaceAfter>WebADB</ExternalLink>\n                library, which can connect to your Android devices with the\n                <ExternalLink href=\"https://developer.mozilla.org/en-US/docs/Web/API/USB\" spaceBefore spaceAfter>WebUSB</ExternalLink>\n                API.\n            </Text>\n            <Text block>\n                The latest version of Google Chrome (or Microsoft Edge) is recommended for best compatibility.\n            </Text>\n\n            <Text block styles={BoldTextStyles}>\n                Windows user?\n            </Text>\n            <Text block>\n                The experimental new backend is required. Enable from  {' '}\n                <CopyLink href=\"chrome://flags/#new-usb-backend\" />\n                .\n            </Text>\n\n            <Text block styles={BoldTextStyles}>\n                Got \"Unable to claim interface\" error?\n            </Text>\n            <Text block>\n                Only one software can connect to your device at a time.<br />\n                1. Make sure ADB server is not running (run `adb kill-server` to stop it).<br />\n                2. Make sure no other Android management tools are running\n            </Text>\n            <Text block styles={BoldTextStyles}>\n                Got \"Access denied\" error?\n            </Text>\n            <Text block>\n                If you have a Samsung device, it's caused by the custom driver. See\n                <ExternalLink href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1127206\" spaceBefore />\n            </Text>\n            <Text block styles={BoldTextStyles}>\n                Can I connect my device wirelessly (ADB over WiFi)?\n            </Text>\n            <Text block>\n                No. Web browsers doesn't support TCP connections.<br />\n                Or maybe, with\n                <ExternalLink href=\"https://github.com/novnc/websockify\" spaceBefore spaceAfter>websockify</ExternalLink>\n                running on your device and a WebSocket backend for WebADB.\n            </Text>\n        </>\n    );\n});\n","export const CommonStackTokens = { childrenGap: 8 };\n","import { Struct, placeholder, StructInitType } from '@yume-chan/struct';\n\nexport const enum ScrcpyControlMessageType {\n    InjectKeycode,\n    InjectText,\n    InjectTouch,\n    InjectScroll,\n    BackOrScreenOn,\n    ExpandNotificationPanel,\n    CollapseNotificationPanel,\n    GetClipboard,\n    SetClipboard,\n    SetScreenPowerMode,\n    RotateDevice,\n}\n\nexport const ScrcpySimpleControlMessage =\n    new Struct()\n        .uint8('type', undefined, placeholder<ScrcpyControlMessageType.BackOrScreenOn>());\n\nexport type ScrcpySimpleControlMessage = StructInitType<typeof ScrcpySimpleControlMessage>;\n\nexport const enum AndroidMotionEventAction {\n    Down,\n    Up,\n    Move,\n    Cancel,\n    Outside,\n    PointerDown,\n    PointerUp,\n    HoverMove,\n    Scroll,\n    HoverEnter,\n    HoverExit,\n    ButtonPress,\n    ButtonRelease,\n}\n\nexport const ScrcpyInjectTouchControlMessage =\n    new Struct()\n        .uint8('type', undefined, ScrcpyControlMessageType.InjectTouch as const)\n        .uint8('action', undefined, placeholder<AndroidMotionEventAction>())\n        .uint64('pointerId')\n        .uint32('pointerX')\n        .uint32('pointerY')\n        .uint16('screenWidth')\n        .uint16('screenHeight')\n        .uint16('pressure')\n        .uint32('buttons');\n\nexport type ScrcpyInjectTouchControlMessage = StructInitType<typeof ScrcpyInjectTouchControlMessage>;\n\nexport type ScrcpyControlMessage =\n    ScrcpySimpleControlMessage |\n    ScrcpyInjectTouchControlMessage;\n","export default __webpack_public_path__ + \"ea3766d03fb8fef9c84c5480121c91e1.bin\";","import { EventEmitter } from \"@yume-chan/event\";\nimport serverUrl from 'file-loader!./scrcpy-server';\n\nclass FetchWithProgress {\n    public readonly promise: Promise<ArrayBuffer>;\n\n    private _downloaded = 0;\n    public get downloaded() { return this._downloaded; }\n\n    private _total = 0;\n    public get total() { return this._total; }\n\n    private progressEvent = new EventEmitter<[download: number, total: number]>();\n    public get onProgress() { return this.progressEvent.event; }\n\n    public constructor(url: string) {\n        this.promise = this.fetch(url);\n    }\n\n    private async fetch(url: string) {\n        const response = await window.fetch(url);\n        this._total = Number.parseInt(response.headers.get('Content-Length') ?? '0', 10);\n        this.progressEvent.fire([this._downloaded, this._total]);\n\n        const reader = response.body!.getReader();\n        const chunks: Uint8Array[] = [];\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                break;\n            }\n            chunks.push(result.value);\n            this._downloaded += result.value.byteLength;\n            this.progressEvent.fire([this._downloaded, this._total]);\n        }\n\n        this._total = chunks.reduce((result, item) => result + item.byteLength, 0);\n        const result = new Uint8Array(this._total);\n        let position = 0;\n        for (const chunk of chunks) {\n            result.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return result.buffer;\n    }\n}\n\nlet cachedValue: FetchWithProgress | undefined;\nexport function fetchServer(onProgress?: (e: [downloaded: number, total: number]) => void) {\n    if (!cachedValue) {\n        cachedValue = new FetchWithProgress(serverUrl);\n    }\n\n    if (onProgress) {\n        cachedValue.onProgress(onProgress);\n        onProgress([cachedValue.downloaded, cachedValue.total]);\n    }\n\n    return cachedValue.promise;\n}\n","import { Dialog, ICommandBarItemProps, ProgressIndicator, Stack, StackItem } from '@fluentui/react';\nimport { AdbBufferedStream, AdbStream, EventQueue } from '@yume-chan/adb';\nimport { Struct } from '@yume-chan/struct';\nimport JMuxer from 'jmuxer';\nimport React, { useCallback, useContext, useMemo, useRef, useState } from 'react';\nimport { ErrorDialogContext } from '../../error-dialog';\nimport { CommonStackTokens } from '../../styles';\nimport { CommandBar, DeviceView, DeviceViewRef, ExternalLink, formatSpeed, useSpeed, withDisplayName } from '../../utils';\nimport { RouteProps } from '../type';\nimport { AndroidMotionEventAction, ScrcpyControlMessage, ScrcpyControlMessageType, ScrcpyInjectTouchControlMessage, ScrcpySimpleControlMessage } from './control';\nimport { fetchServer } from './fetch-server';\n\nconst DeviceServerPath = '/data/local/tmp/scrcpy-server.jar';\n\nconst Size =\n    new Struct()\n        .uint16('width')\n        .uint16('height');\n\nconst VideoPacket =\n    new Struct()\n        .int64('pts')\n        .uint32('size')\n        .arrayBuffer('data', { lengthField: 'size' });\n\nconst NoPts = BigInt(-1);\n\nasync function receiveVideo(stream: AdbBufferedStream, jmuxer: JMuxer) {\n    let lastPts = BigInt(0);\n    let buffer: ArrayBuffer | undefined;\n    try {\n        while (true) {\n            const { pts, data } = await VideoPacket.deserialize(stream);\n            if (pts === NoPts) {\n                buffer = data;\n                continue;\n            }\n\n            let array: Uint8Array;\n            if (buffer) {\n                array = new Uint8Array(buffer.byteLength + data!.byteLength);\n                array.set(new Uint8Array(buffer));\n                array.set(new Uint8Array(data!), buffer.byteLength);\n                buffer = undefined;\n            } else {\n                array = new Uint8Array(data!);\n            }\n\n            const duration = Number(pts - lastPts) / 1000;\n            lastPts = pts;\n            jmuxer.feed({\n                video: array,\n                duration,\n            });\n        }\n    } catch (e) {\n        jmuxer.destroy();\n        return;\n    }\n}\n\nconst ClipboardMessage =\n    new Struct()\n        .uint32('length')\n        .string('content', { lengthField: 'length' });\n\nasync function receiveControl(stream: AdbBufferedStream) {\n    try {\n        while (true) {\n            const type = await stream.read(1);\n            switch (new Uint8Array(type)[0]) {\n                case 0:\n                    const { content } = await ClipboardMessage.deserialize(stream);\n                    window.navigator.clipboard.writeText(content!);\n                    break;\n                default:\n                    throw new Error('unknown control message type');\n            }\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nasync function sendControl(stream: AdbBufferedStream, queue: EventQueue<ScrcpyControlMessage>) {\n    try {\n        while (true) {\n            const message = await queue.next();\n            let buffer: ArrayBuffer;\n            switch (message.type) {\n                case ScrcpyControlMessageType.InjectTouch:\n                    buffer = ScrcpyInjectTouchControlMessage.serialize(message, stream);\n                    break;\n                default:\n                    buffer = ScrcpySimpleControlMessage.serialize(message, stream);\n                    break;\n            }\n            await stream.write(buffer);\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nexport const enum ScrcpyLogLevel {\n    Debug = 'debug',\n    Info = 'info',\n    Warn = 'warn',\n    Error = 'error',\n}\n\nexport const enum ScrcpyScreenOrientation {\n    Unlocked = -1,\n    Portrait = 0,\n    Landscape = 1,\n    PortraitFlipped = 2,\n    LandscapeFlipped = 3,\n}\n\nexport const Scrcpy = withDisplayName('Scrcpy')(({\n    device\n}: RouteProps): JSX.Element | null => {\n    const { show: showErrorDialog } = useContext(ErrorDialogContext);\n\n    const [running, setRunning] = useState(false);\n\n    const videoRef = useRef<HTMLVideoElement | null>(null);\n    const [width, setWidth] = useState(0);\n    const [height, setHeight] = useState(0);\n    const handleVideoRef = useCallback((video: HTMLVideoElement | null) => {\n        videoRef.current = video;\n        if (video) {\n            video.onresize = () => {\n                setWidth(video.videoWidth);\n                setHeight(video.videoHeight);\n            };\n\n            video.addEventListener('touchstart', e => {\n                e.preventDefault();\n            });\n            video.addEventListener('contextmenu', e => {\n                e.preventDefault();\n            });\n\n            video.addEventListener('pause', () => {\n                console.log('???');\n                video.play();\n            });\n        }\n    }, []);\n\n    const [connecting, setConnecting] = useState(false);\n\n    const [serverTotalSize, setServerTotalSize] = useState(0);\n\n    const [serverDownloadedSize, setServerDownloadedSize] = useState(0);\n    const [debouncedServerDownloadedSize, serverDownloadSpeed] = useSpeed(serverDownloadedSize);\n\n    const [serverUploadedSize, setServerUploadedSize] = useState(0);\n    const [debouncedServerUploadedSize, serverUploadSpeed] = useSpeed(serverUploadedSize);\n\n    const serverRef = useRef<AdbStream>();\n    const eventQueueRef = useRef<EventQueue<ScrcpyControlMessage>>();\n    const controlStreamRef = useRef<AdbBufferedStream>();\n\n    const start = useCallback(() => {\n        if (!device) {\n            return;\n        }\n\n        (async () => {\n            try {\n                setServerTotalSize(0);\n                setServerDownloadedSize(0);\n                setServerUploadedSize(0);\n                setConnecting(true);\n\n                const serverBuffer = await fetchServer(([downloaded, total]) => {\n                    setServerDownloadedSize(downloaded);\n                    setServerTotalSize(total);\n                });\n\n                const sync = await device.sync();\n                await sync.write(\n                    DeviceServerPath,\n                    serverBuffer,\n                    undefined,\n                    undefined,\n                    setServerUploadedSize\n                );\n\n                const listener = new EventQueue<AdbStream>();\n                const reverseDeviceAddress = await device.reverse.add('localabstract:scrcpy', 27183, {\n                    onStream(packet, stream) {\n                        listener.push(stream);\n                    },\n                });\n\n                const server = await device.spawn(\n                    `CLASSPATH=${DeviceServerPath}`,\n                    'app_process',\n                    '/', // unused\n                    'com.genymobile.scrcpy.Server',\n                    '1.16', // SCRCPY_VERSION\n                    ScrcpyLogLevel.Debug,\n                    '0', // max_size (0: unlimited)\n                    '8000000', // bit_rate\n                    '0', // max_fps\n                    ScrcpyScreenOrientation.Unlocked.toString(), // lock_video_orientation (-1: unlocked)\n                    'false', // tunnel_forward\n                    '-', // crop\n                    'true', // always send frame meta (packet boundaries + timestamp)\n                    'true', // control\n                    '0', // display_id\n                    'true', // show_touches\n                    'true', // stay_awake\n                    '-', // codec_options\n                );\n                server.onData(data => {\n                    console.log(device.backend.decodeUtf8(data));\n                });\n                server.onClose(() => {\n                    console.log('server stopped');\n                });\n\n                const videoStream = new AdbBufferedStream(await listener.next());\n                const controlStream = new AdbBufferedStream(await listener.next());\n                controlStreamRef.current = controlStream;\n\n                // Don't await this\n                // The connection might be stuck because we have not read some packets from videoStream.\n                device.reverse.remove(reverseDeviceAddress);\n\n                // Device name, we don't need it\n                await videoStream.read(64);\n                // Initial video size, we don't need it\n                await Size.deserialize(videoStream);\n\n                const jmuxer = new JMuxer({\n                    node: videoRef.current!,\n                    mode: 'video',\n                    flushingTime: 0,\n                });\n\n                serverRef.current = server;\n\n                setConnecting(false);\n                setRunning(true);\n\n                eventQueueRef.current = new EventQueue<ScrcpyControlMessage>();\n\n                await Promise.all([\n                    receiveVideo(videoStream, jmuxer),\n                    receiveControl(controlStream),\n                    sendControl(controlStream, eventQueueRef.current),\n                ]);\n\n                stop();\n            } catch (e) {\n                showErrorDialog(e.message);\n            } finally {\n                setConnecting(false);\n            }\n        })();\n    }, [device]);\n\n    const stop = useCallback(() => {\n        if (!serverRef.current) {\n            return;\n        }\n\n        eventQueueRef.current!.end();\n\n        serverRef.current.close();\n        serverRef.current = undefined;\n\n        setRunning(false);\n    }, []);\n\n    const deviceViewRef = useRef<DeviceViewRef | null>(null);\n    const commandBarItems = useMemo((): ICommandBarItemProps[] => {\n        const result: ICommandBarItemProps[] = [];\n\n        if (running) {\n            result.push({\n                key: 'stop',\n                iconProps: { iconName: 'Stop' },\n                text: 'Stop',\n                onClick: stop,\n            });\n        } else {\n            result.push({\n                key: 'start',\n                disabled: !device,\n                iconProps: { iconName: 'Play' },\n                text: 'Start',\n                onClick: start,\n            });\n        }\n\n        result.push({\n            key: 'fullscreen',\n            disabled: !running,\n            iconProps: { iconName: 'Fullscreen' },\n            text: 'Fullscreen',\n            onClick: () => { deviceViewRef.current?.enterFullscreen(); },\n        });\n\n        return result;\n    }, [device, running, start]);\n\n    const commandBarFarItems = useMemo((): ICommandBarItemProps[] => [\n        {\n            key: 'info',\n            iconProps: { iconName: 'Info' },\n            iconOnly: true,\n            tooltipHostProps: {\n                content: (\n                    <>\n                        <div>\n                            <ExternalLink href=\"https://github.com/Genymobile/scrcpy\" spaceAfter>Scrcpy</ExternalLink>\n                        developed by genymobile can display the screen with low latency (1~2 frames) and control the device, all without root access.\n                        </div>\n                        <div>\n                            I reimplemented the protocol in JavaScript, it's used with a pre-built server binary from Genymobile's GitHub.\n                        </div>\n                    </>\n                ),\n                calloutProps: {\n                    calloutMaxWidth: 300,\n                }\n            },\n        }\n    ], []);\n\n    const injectTouch = useCallback((\n        action: AndroidMotionEventAction,\n        e: React.PointerEvent<HTMLVideoElement>\n    ) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const view = e.currentTarget.getBoundingClientRect();\n        const pointerViewX = e.clientX - view.x;\n        const pointerViewY = e.clientY - view.y;\n        const pointerScreenX = pointerViewX / view.width * width;\n        const pointerScreenY = pointerViewY / view.height * height;\n\n        eventQueueRef.current!.push({\n            type: ScrcpyControlMessageType.InjectTouch,\n            action,\n            buttons: 0,\n            pointerId: BigInt(e.pointerId),\n            pointerX: pointerScreenX,\n            pointerY: pointerScreenY,\n            pressure: e.pressure * 65535,\n            screenWidth: width,\n            screenHeight: height,\n        });\n    }, [width, height]);\n\n    const handlePointerDown = useCallback((e: React.PointerEvent<HTMLVideoElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        injectTouch(AndroidMotionEventAction.Down, e);\n    }, [injectTouch]);\n\n    const handlePointerMove = useCallback((e: React.PointerEvent<HTMLVideoElement>) => {\n        if (e.buttons !== 1) {\n            return;\n        }\n        injectTouch(AndroidMotionEventAction.Move, e);\n    }, [injectTouch]);\n\n    const handlePointerUp = useCallback((e: React.PointerEvent<HTMLVideoElement>) => {\n        if (e.button !== 0) {\n            return;\n        }\n        injectTouch(AndroidMotionEventAction.Up, e);\n    }, [injectTouch]);\n\n    const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLVideoElement>) => {\n\n    }, []);\n\n    return (\n        <>\n            <CommandBar items={commandBarItems} farItems={commandBarFarItems} />\n\n            <DeviceView ref={deviceViewRef} width={width} height={height}>\n                <video\n                    ref={handleVideoRef}\n                    autoPlay\n                    width={width}\n                    height={height}\n                    onPointerDown={handlePointerDown}\n                    onPointerMove={handlePointerMove}\n                    onPointerUp={handlePointerUp}\n                    onKeyPress={handleKeyPress}\n                />\n            </DeviceView>\n\n            <Dialog\n                hidden={!connecting}\n                dialogContentProps={{\n                    title: 'Connecting...'\n                }}\n            >\n                <Stack tokens={CommonStackTokens}>\n                    <StackItem>\n                        <ProgressIndicator\n                            label=\"1. Downloading scrcpy server...\"\n                            percentComplete={serverTotalSize ? serverDownloadedSize / serverTotalSize : undefined}\n                            description={formatSpeed(debouncedServerDownloadedSize, serverTotalSize, serverDownloadSpeed)}\n                        />\n                    </StackItem>\n\n                    <StackItem>\n                        <ProgressIndicator\n                            label=\"2. Pushing scrcpy server to device...\"\n                            progressHidden={serverTotalSize === 0 || serverDownloadedSize !== serverTotalSize}\n                            percentComplete={serverUploadedSize / serverTotalSize}\n                            description={formatSpeed(debouncedServerUploadedSize, serverTotalSize, serverUploadSpeed)}\n                        />\n                    </StackItem>\n\n                    <StackItem>\n                        <ProgressIndicator\n                            label=\"3. Starting scrcpy server on device...\"\n                            progressHidden={serverTotalSize === 0 || serverUploadedSize !== serverTotalSize}\n                        />\n                    </StackItem>\n                </Stack>\n            </Dialog>\n        </>\n    );\n});\n","import { IconButton, SearchBox, Stack, StackItem } from '@fluentui/react';\nimport { AdbStream } from '@yume-chan/adb';\nimport { encodeUtf8 } from '@yume-chan/adb-backend-web';\nimport { Disposable } from '@yume-chan/event';\nimport React, { CSSProperties, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { Terminal } from 'xterm';\nimport { FitAddon } from 'xterm-addon-fit';\nimport { SearchAddon } from 'xterm-addon-search';\nimport 'xterm/css/xterm.css';\nimport { ErrorDialogContext } from '../error-dialog';\nimport { ResizeObserver, withDisplayName } from '../utils';\nimport { RouteProps } from './type';\n\nconst ResizeObserverStyle: CSSProperties = {\n    width: '100%',\n    height: '100%',\n};\n\nconst UpIconProps = { iconName: 'ChevronUp' };\nconst DownIconProps = { iconName: 'ChevronDown' };\n\nexport const Shell = withDisplayName('Shell')(({\n    visible,\n    device,\n}: RouteProps): JSX.Element | null => {\n    const { show: showErrorDialog } = useContext(ErrorDialogContext);\n\n    const [findKeyword, setFindKeyword] = useState('');\n    const findAddonRef = useRef<SearchAddon>();\n    const handleFindKeywordChange = useCallback((e, newValue?: string) => {\n        setFindKeyword(newValue ?? '');\n        if (newValue) {\n            findAddonRef.current!.findNext(newValue, { incremental: true });\n        }\n    }, []);\n    const findPrevious = useCallback(() => {\n        findAddonRef.current!.findPrevious(findKeyword);\n    }, [findKeyword]);\n    const findNext = useCallback(() => {\n        findAddonRef.current!.findNext(findKeyword);\n    }, [findKeyword]);\n\n    const connectingRef = useRef(false);\n    const terminalRef = useRef<Terminal>();\n    const shellStreamRef = useRef<AdbStream>();\n    const terminalDisposableRef = useRef<Disposable>();\n    const connect = useCallback(async () => {\n        if (!visible || !device || !terminalRef.current || connectingRef.current) {\n            return;\n        }\n\n        try {\n            connectingRef.current = true;\n\n            const shell = await device.shell();\n            shellStreamRef.current = shell;\n            terminalDisposableRef.current = terminalRef.current.onData(data => {\n                const buffer = encodeUtf8(data);\n                shell.write(buffer);\n            });\n            shell.onData(data => {\n                terminalRef.current!.write(new Uint8Array(data));\n            });\n        } catch (e) {\n            showErrorDialog(e.message);\n        }\n    }, [visible, device]);\n    const connectRef = useRef(connect);\n    connectRef.current = connect;\n\n    const fitAddonRef = useRef<FitAddon>();\n    const handleContainerRef = useCallback((element: HTMLDivElement | null) => {\n        if (!element) {\n            return;\n        }\n\n        const terminal = new Terminal({\n            scrollback: 9001,\n        });\n        terminalRef.current = terminal;\n\n        const findAddon = new SearchAddon();\n        findAddonRef.current = findAddon;\n        terminal.loadAddon(findAddon);\n\n        const fitAddon = new FitAddon();\n        fitAddonRef.current = fitAddon;\n        terminal.loadAddon(fitAddon);\n\n        terminal.open(element);\n        fitAddon.fit();\n\n        connectRef.current();\n    }, []);\n\n    useEffect(() => {\n        if (!device) {\n            if (shellStreamRef.current) {\n                terminalDisposableRef.current!.dispose();\n                terminalDisposableRef.current = undefined;\n\n                shellStreamRef.current!.close();\n                shellStreamRef.current = undefined;\n\n                terminalRef.current!.clear();\n                terminalRef.current!.reset();\n\n                connectingRef.current = false;\n            }\n            return;\n        }\n\n        if (!visible || shellStreamRef.current) {\n            return;\n        }\n\n        connectRef.current();\n    }, [device, visible]);\n\n    const handleResize = useCallback(() => {\n        fitAddonRef.current?.fit();\n    }, []);\n\n    return (\n        <>\n            <StackItem>\n                <Stack horizontal>\n                    <StackItem grow>\n                        <SearchBox\n                            placeholder=\"Find\"\n                            value={findKeyword}\n                            onChange={handleFindKeywordChange}\n                            onSearch={findNext}\n                        />\n                    </StackItem>\n                    <StackItem>\n                        <IconButton\n                            disabled={!findKeyword}\n                            iconProps={UpIconProps}\n                            onClick={findPrevious}\n                        />\n                    </StackItem>\n                    <StackItem>\n                        <IconButton\n                            disabled={!findKeyword}\n                            iconProps={DownIconProps}\n                            onClick={findNext}\n                        />\n                    </StackItem>\n                </Stack>\n            </StackItem>\n            <StackItem grow styles={{ root: { minHeight: 0 } }}>\n                <ResizeObserver style={ResizeObserverStyle} onResize={handleResize}>\n                    <div ref={handleContainerRef} style={{ height: '100%' }} />\n                </ResizeObserver>\n            </StackItem>\n        </>\n    );\n});\n","import { MessageBar, StackItem, Text, TextField, Toggle } from '@fluentui/react';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { CommandBar, withDisplayName } from '../utils';\nimport { RouteProps } from './type';\n\nexport const TcpIp = withDisplayName('TcpIp')(({\n    device\n}: RouteProps): JSX.Element | null => {\n    const [serviceListenAddrs, setServiceListenAddrs] = useState<string[] | undefined>();\n\n    const [servicePortEnabled, setServicePortEnabled] = useState<boolean>(false);\n    const [servicePort, setServicePort] = useState<string>('');\n\n    const [persistPortEnabled, setPersistPortEnabled] = useState<boolean>(false);\n    const [persistPort, setPersistPort] = useState<string>();\n\n    const queryTcpIpInfo = useCallback(() => {\n        if (!device) {\n            setServiceListenAddrs(undefined);\n\n            setServicePortEnabled(false);\n            setServicePort('');\n\n            setPersistPortEnabled(false);\n            setPersistPort(undefined);\n            return;\n        }\n\n        (async () => {\n            const listenAddrs = await device.getProp('service.adb.listen_addrs');\n            if (listenAddrs) {\n                setServiceListenAddrs(listenAddrs.split(','));\n            } else {\n                setServiceListenAddrs(undefined);\n            }\n\n            const servicePort = await device.getProp('service.adb.tcp.port');\n            if (servicePort) {\n                setServicePortEnabled(!listenAddrs && servicePort !== '0');\n                setServicePort(servicePort);\n            } else {\n                setServicePortEnabled(false);\n                setServicePort('5555');\n            }\n\n            const persistPort = await device.getProp('persist.adb.tcp.port');\n            if (persistPort) {\n                setPersistPortEnabled(!listenAddrs && !servicePort);\n                setPersistPort(persistPort);\n            } else {\n                setPersistPortEnabled(false);\n                setPersistPort(undefined);\n            }\n        })();\n    }, [device]);\n\n    useEffect(() => {\n        queryTcpIpInfo();\n    }, [queryTcpIpInfo]);\n\n    const applyServicePort = useCallback(() => {\n        if (!device) {\n            return;\n        }\n\n        (async () => {\n            if (servicePortEnabled) {\n                await device.tcpip.setPort(Number.parseInt(servicePort, 10));\n            } else {\n                await device.tcpip.disable();\n            }\n        })();\n    }, [device, servicePortEnabled, servicePort]);\n\n    const commandBarItems = useMemo(() => [\n        {\n            key: 'refresh',\n            disabled: !device,\n            iconProps: { iconName: 'Refresh' },\n            text: 'Refresh',\n            onClick: queryTcpIpInfo,\n        },\n        {\n            key: 'apply',\n            disabled: !device,\n            iconProps: { iconName: 'Save' },\n            text: 'Apply',\n            onClick: applyServicePort,\n        }\n    ], [device, queryTcpIpInfo, applyServicePort]);\n\n    const handleServicePortEnabledChange = useCallback((e, value?: boolean) => {\n        setServicePortEnabled(!!value);\n    }, []);\n\n    const handleServicePortChange = useCallback((e, value?: string) => {\n        if (value === undefined) {\n            return;\n        }\n        setServicePort(value);\n    }, []);\n\n    return (\n        <>\n            <CommandBar items={commandBarItems} />\n\n            <StackItem>\n                <MessageBar>\n                    <Text>Although WebADB can enable ADB over WiFi for you, it can't connect to your device wirelessly.</Text>\n                </MessageBar>\n            </StackItem>\n            <StackItem>\n                <MessageBar >\n                    <Text>Your device will disconnect after changing ADB over WiFi config.</Text>\n                </MessageBar>\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"service.adb.listen_addrs\"\n                    disabled\n                    checked={!!serviceListenAddrs}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                />\n                {serviceListenAddrs?.map((addr) => (\n                    <TextField\n                        disabled\n                        value={addr}\n                        styles={{ root: { width: 300 } }}\n                    />\n                ))}\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"service.adb.tcp.port\"\n                    checked={servicePortEnabled}\n                    disabled={!device || !!serviceListenAddrs}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                    onChange={handleServicePortEnabledChange}\n                />\n                {device && (\n                    <TextField\n                        disabled={!!serviceListenAddrs}\n                        value={servicePort}\n                        styles={{ root: { width: 300 } }}\n                        onChange={handleServicePortChange}\n                    />\n                )}\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"persist.adb.tcp.port\"\n                    disabled\n                    checked={persistPortEnabled}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                />\n                {persistPort && (\n                    <TextField\n                        disabled\n                        value={persistPort}\n                        styles={{ root: { width: 300 } }}\n                    />\n                )}\n            </StackItem>\n        </>\n    );\n});\n","import { Nav, Stack, StackItem } from '@fluentui/react';\nimport { initializeIcons } from '@uifabric/icons';\nimport { Adb } from '@yume-chan/adb';\nimport React, { useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Redirect, useLocation } from 'react-router-dom';\nimport Connect from './connect';\nimport ErrorDialogProvider from './error-dialog';\nimport './index.css';\nimport { CacheRoute, CacheSwitch } from './router';\nimport { FileManager, FrameBuffer, Intro, Scrcpy, Shell, TcpIp } from './routes';\n\ninitializeIcons();\n\ninterface RouteInfo {\n    path: string;\n\n    exact?: boolean;\n\n    name: string;\n\n    children: JSX.Element | null;\n\n    noCache?: boolean;\n}\n\nfunction App(): JSX.Element | null {\n    const location = useLocation();\n\n    const [device, setDevice] = useState<Adb | undefined>();\n\n    const routes = useMemo((): RouteInfo[] => [\n        {\n            path: '/',\n            exact: true,\n            name: 'Introduction',\n            children: (\n                <Intro />\n            )\n        },\n        {\n            path: '/device-info',\n            name: 'Device Info',\n            children: (\n                <>\n                    <StackItem>\n                        Product: {device?.product}\n                    </StackItem>\n                    <StackItem>\n                        Model: {device?.model}\n                    </StackItem>\n                    <StackItem>\n                        Device: {device?.device}\n                    </StackItem>\n                    <StackItem>\n                        Features: {device?.features?.join(',')}\n                    </StackItem>\n                </>\n            )\n        },\n        {\n            path: '/adb-over-wifi',\n            name: 'ADB over WiFi',\n            children: (\n                <TcpIp device={device} />\n            )\n        },\n        {\n            path: '/shell',\n            name: 'Interactive Shell',\n            children: (\n                <Shell device={device} />\n            ),\n        },\n        {\n            path: '/file-manager',\n            name: 'File Manager',\n            children: (\n                <FileManager device={device} />\n            ),\n        },\n        {\n            path: '/framebuffer',\n            name: 'Screen Capture',\n            children: (\n                <FrameBuffer device={device} />\n            ),\n        },\n        {\n            path: '/scrcpy',\n            name: 'Scrcpy',\n            noCache: true,\n            children: (\n                <Scrcpy device={device} />\n            ),\n        },\n    ], [device]);\n\n    return (\n        <Stack verticalFill>\n            <StackItem>\n                <div\n                    style={{\n                        padding: '4px 0',\n                        fontSize: 20,\n                        textAlign: 'center',\n                        borderBottom: '1px solid rgb(243, 242, 241)',\n                    }}\n                >\n                    WebADB Demo\n                </div>\n            </StackItem>\n            <StackItem grow styles={{ root: { minHeight: 0, overflow: 'hidden' } }}>\n                <Stack horizontal verticalFill>\n                    <StackItem styles={{\n                        root: {\n                            paddingRight: 8,\n                            borderRight: '1px solid rgb(243, 242, 241)',\n                        }\n                    }}>\n                        <Connect device={device} onDeviceChange={setDevice} />\n\n                        <Nav\n                            styles={{ root: { width: 250 } }}\n                            groups={[{\n                                links: routes.map(route => ({\n                                    key: route.path,\n                                    name: route.name,\n                                    url: `#${route.path}`,\n                                })),\n                            }]}\n                            selectedKey={location.pathname}\n                        />\n                    </StackItem>\n                    <StackItem grow>\n                        <CacheSwitch>\n                            {routes.map<React.ReactElement>(route => (\n                                <CacheRoute\n                                    exact={route.exact}\n                                    path={route.path}\n                                    noCache={route.noCache}>\n                                    {route.children}\n                                </CacheRoute>\n                            ))}\n\n                            <Redirect to=\"/\" />\n                        </CacheSwitch>\n                    </StackItem>\n                </Stack>\n            </StackItem>\n        </Stack>\n    );\n}\n\nReactDOM.render(\n    <HashRouter>\n        <ErrorDialogProvider>\n            <App />\n        </ErrorDialogProvider>\n    </HashRouter>,\n    document.getElementById('container')\n);\n"],"sourceRoot":""}