{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../event/src/event-emitter.ts","webpack:///../event/src/async-event-emitter.ts","webpack:///../event/src/disposable.ts","webpack:///../adb/src/crypto.ts","webpack:///../struct/src/backing-field.ts","webpack:///../struct/src/field/array.ts","webpack:///../struct/src/field/definition.ts","webpack:///../struct/src/field/number.ts","webpack:///../struct/src/field/variable-length-array.ts","webpack:///../struct/src/field/fixed-length-array.ts","webpack:///../struct/src/types.ts","webpack:///../struct/src/struct.ts","webpack:///../adb/src/utils/auto-reset-event.ts","webpack:///../adb/src/utils/base64.ts","webpack:///../adb/src/utils/event-queue.ts","webpack:///../adb/src/stream/readable-stream.ts","webpack:///../adb/src/stream/buffered-stream.ts","webpack:///../adb/src/stream/controller.ts","webpack:///../adb/src/stream/stream.ts","webpack:///../adb/src/stream/dispatcher.ts","webpack:///../adb/src/packet.ts","webpack:///../adb/src/auth.ts","webpack:///../adb/src/commands/base.ts","webpack:///../adb/src/commands/framebuffer.ts","webpack:///../adb/src/commands/reverse.ts","webpack:///../adb/src/commands/sync/request.ts","webpack:///../adb/src/commands/sync/response.ts","webpack:///../adb/src/commands/sync/stat.ts","webpack:///../adb/src/commands/sync/list.ts","webpack:///../adb/src/commands/sync/pull.ts","webpack:///../adb/src/commands/sync/push.ts","webpack:///../adb/src/features.ts","webpack:///../adb/src/adb.ts","webpack:///../adb/src/commands/sync/sync.ts","webpack:///../adb/src/commands/tcpip.ts","webpack:///../adb-backend-web/src/watcher.ts","webpack:///../adb-backend-web/src/index.ts","webpack:///./src/utils/with-display-name.ts","webpack:///./src/utils/resize-observer.tsx","webpack:///./src/error-dialog.tsx","webpack:///./src/connect.tsx","webpack:///./src/router.tsx","webpack:///./src/routes/file-manager.tsx","webpack:///./src/routes/framebuffer.tsx","webpack:///./src/routes/intro.tsx","webpack:///./src/routes/shell.tsx","webpack:///./src/styles.ts","webpack:///./src/routes/tcpip.tsx","webpack:///./src/index.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","EventEmitter","listeners","this","event","listener","thisArg","args","info","remove","index","indexOf","dispose","e","AutoDisposable","disposables","disposable","DisposableList","addDisposable","BigInt0","BigInt","BigInt1","BigInt2","BigInt2To64","getBig","buffer","offset","byteLength","view","DataView","getBigUint64","setBigLE","setBigUint64","parsePrivateKey","calculatePublicKey","privateKey","output","outputOffset","outputType","Error","ArrayBuffer","outputView","setUint32","n0inv","a","Number","isNaN","NaN","b","x","y","Math","floor","modInverse","asUintN","Sha1DigestInfo","sign","padded","Uint8Array","fillLength","set","signature","base","exponent","modulus","powMod","uint64Array","setBig","BackingField","getBackingField","field","setBackingField","initialize","subType","configurable","string","registry","getFieldTypeDefinition","type","registerFieldTypeDefinition","_field","_initExtra","methods","placeholder","context","read","options","decodeUtf8","extra","getSize","backingField","dataView","encodeUtf8","SizeMap","DataViewGetterMap","DataViewSetterMap","undefined","littleEndian","VariableLengthArray","getLengthBackingField","lengthField","setLengthBackingField","descriptor","getOwnPropertyDescriptor","parseInt","emptyBehavior","getDynamicSize","StructDefaultOptions","_size","fields","_extra","array","arrayBuffer","_afterParsed","clone","size","_typescriptType","number","getOwnPropertyDescriptors","callback","fieldTypeDefinition","defineSimpleAccessors","init","defineProperties","initializeField","deserialize","fieldSize","serialize","initialSet","list","blocking","Promise","resolve","resolver","promise","pop","item","reject","ranges","chars","padding","charCodeAt","addRange","start","end","startCharCode","endCharCode","toValue","char","charCode","range","encodeBase64","input","arg1","arg2","_arg3","_arg4","inputOffset","inputLength","outputArgumentIndex","extraBytes","outputLength","maybeOutput","arguments","bufferInputStart","byteOffset","bufferOutputStart","inputIndex","outputIndex","z","sort","EventQueueDefaultOptions","maxWaitCount","Infinity","highWaterMark","lowWaterMark","pullQueue","pushQueue","ended","waterMark","pendingLowWaterEvent","lowWaterEvent","fire","stream","readLock","queue","resetEvent","onData","wait","onClose","onLowWater","notify","backend","localId","remoteId","next","write","close","BufferedStream","subarray","super","dispatcher","writeLock","dataEvent","_closed","closeEvent","sendPacket","AdbCommand","Write","Close","AdbStream","controller","initializers","streams","Map","packetEvent","streamEvent","errorEvent","_running","packet","command","OK","handleOk","arg0","has","delete","payload","Open","handleOpen","handled","ack","add","receiveLoop","service","initializer","packetOrCommand","values","clear","AdbPacketWithoutPayload","uint32","int32","AdbPacketStruct","afterParsed","magic","AdbPacket","AdbAuthType","checksum","async","bufferUsed","AdbDefaultAuthenticators","iterateKeys","Token","Auth","Signature","generateKey","publicKeyBase64Length","publicKeyBuffer","PublicKey","authenticators","authenticator","iterator","done","return","nextCore","adb","AdbFrameBuffer","AdbReverseStringResponse","AdbReverseErrorResponse","content","localPortToHandler","deviceAddressToLocalPort","listening","onStream","handleStream","address","port","substring","deviceAddress","localPort","handler","createStream","buffered","response","split","map","line","deviceSerial","localName","remoteName","AdbSyncRequestId","AdbSyncNumberRequest","AdbSyncDataRequest","adbSyncWriteRequest","id","arg","AdbSyncResponseId","AdbSyncDoneResponse","Done","AdbSyncFailResponse","message","adbSyncReadResponse","types","Fail","LinuxFileType","AdbSyncLstatResponse","Lstat","mtime","AdbSyncStatErrorCode","AdbSyncStatResponse","uint64","Stat","error","StatResponseType","LstatResponseType","Lstat2ResponseType","Lstat2","AdbSyncEntryResponse","Entry","ResponseTypes","AdbSyncDataResponse","Data","AdbSyncOkResponse","Ok","chunkArrayLike","adbSyncPush","path","file","File","Date","now","packetSize","onProgress","pathAndMode","toString","chunkReader","Send","remainder","chunk","chunkAsyncIterable","uploaded","AdbFeatures","AdbPropKey","sendLock","features","includes","StatV2","v2","requestId","responseType","adbSyncLstat","supportStat","adbSyncStat","stat","List","adbSyncOpenDir","results","entry","opendir","Receive","adbSyncPull","propAddr","getProp","createStreamAndReadAll","_connected","packetDispatcher","tcpip","reverse","onDisconnected","_product","_model","_device","_features","connect","join","authHandler","disposableList","onPacket","Connect","parseBanner","authPacket","onError","banner","pieces","props","prop","keyValue","Product","Model","Device","Features","exec","trim","AdbWebBackendWatcher","navigator","usb","addEventListener","removeEventListener","WebUsbDeviceFilter","classCode","subclassCode","protocolCode","Utf8Encoder","TextEncoder","Utf8Decoder","TextDecoder","encode","decode","device","disconnectEvent","handleDisconnect","getDevices","requestDevice","filters","serialNumber","productName","opened","open","configuration","configurations","interface_","interfaces","alternate","alternates","interfaceSubclass","interfaceClass","configurationValue","selectConfiguration","claimed","claimInterface","interfaceNumber","alternateSetting","selectAlternateInterface","endpoint","endpoints","direction","_inEndpointNumber","endpointNumber","_outEndpointNumber","localStorage","getItem","sIndex","dIndex","decodeBase64","cryptoKey","crypto","subtle","modulusLength","publicExponent","hash","exportKey","setItem","transferOut","transferIn","status","clearHalt","withDisplayName","Component","displayName","iframeStyle","position","top","left","width","height","visibility","ResizeObserver","onResize","style","children","rest","onResizeRef","current","handleResize","handleIframeRef","element","contentWindow","containerStyle","useMemo","ref","ErrorDialogContext","createContext","errorDialogVisible","setTrue","showErrorDialog","setFalse","hideErrorDialog","useBoolean","errorMessage","setErrorMessage","Provider","Dialog","hidden","dialogContentProps","normal","title","subText","DialogFooter","PrimaryButton","text","onClick","DropdownStyles","dropdown","onDeviceChange","show","backendOptions","setBackendOptions","selectedBackend","setSelectedBackend","refresh","backendList","serial","old","some","watcher","requestAccess","connecting","setConnecting","disconnect","Stack","tokens","childrenGap","Dropdown","disabled","label","styles","dropdownWidth","selectedKey","onChange","_e","option","DefaultButton","horizontal","StackItem","grow","shrink","primary","root","TooltipHost","ProgressIndicator","RouteStackProps","verticalFill","className","slideUpIn10","overflow","CacheRoute","match","everMatched","stackProps","display","noCache","CacheSwitch","location","computedMatch","contextMatch","cached","Children","forEach","child","isValidElement","isCacheRoute","from","pathname","cloneElement","toListItem","initializeFileTypeIcons","mitm","classNames","cursor","textDecoration","units","formatSize","toLocaleString","maximumFractionDigits","extensionName","fileName","lastIndexOf","renderDetailsHeader","defaultRender","paddingTop","delay","time","setTimeout","createReadableStreamFromBufferIterator","ReadableStream","desiredSize","written","enqueue","FileManager","currentPath","setCurrentPath","currentPathRef","breadcrumbItems","part","filter","Boolean","segment","unshift","isCurrentItem","items","setItems","loading","setLoading","listRef","load","sync","linkItems","intervalId","setInterval","lastBreak","Link","isDirectory","permission","scrollToIndex","clearInterval","sortedList","setSortedList","sortKey","setSortKey","sortDescending","setSortDescendent","aIsFile","bIsFile","aSortKey","bSortKey","columns","iconName","isIconOnly","minWidth","maxWidth","isCollapsible","Icon","getFileTypeIconProps","FileIconType","linkedFolder","Directory","folder","extension","isRowHeader","onRender","onColumnClick","column","isSorted","isSortedDescending","previewUrl","setPreviewUrl","previewImage","readableStream","Response","blob","url","URL","createObjectURL","hidePreview","handleItemInvoked","selectedItems","setSelectedItems","selection","useConst","Selection","getSelection","uploading","setUploading","uploadPath","setUploadPath","uploadProgress","setUploadProgress","uploadedSize","setUploadedSize","uploadTotalSize","setUploadTotalSize","uploadSpeed","setUploadSpeed","upload","lastSecondUploadedSize","currentUploadedSize","itemPath","chunkFile","lastModified","menuItems","setMenuItems","iconProps","document","createElement","onchange","files","click","writeableStream","createWriteStream","pipeTo","contextMenuTarget","setContextMenuTarget","showContextMenu","_item","_index","hideContextMenu","useCallback","margin","borderBottom","CommandBar","minHeight","MarqueeSelection","Breadcrumb","ShimmeredDetailsList","componentRef","setKey","layoutMode","justified","enableShimmer","onItemInvoked","onItemContextMenu","onRenderDetailsHeader","usePageCache","Layer","Overlay","alignItems","justifyContent","src","maxHeight","ContextualMenu","directionalHint","DirectionalHint","bottomLeftEdge","target","onDismiss","contextualMenuItemAs","ContextualMenuItem","hasIcons","description","percentComplete","FrameBuffer","canvasRef","timeoutId","running","capture","performance","framebuffer","console","log","canvas","getContext","image","ImageData","Uint8ClampedArray","putImageData","clearTimeout","callout","BoldTextStyles","fontWeight","CopyLink","href","calloutTarget","calloutVisible","showCallout","hideCallout","copyLink","clipboard","writeText","Callout","topCenter","Intro","Text","block","ResizeObserverStyle","UpIconProps","DownIconProps","Shell","findKeyword","setFindKeyword","findAddonRef","handleFindKeywordChange","newValue","findNext","incremental","findPrevious","terminal","setTerminal","fitAddonRef","handleContainerRef","scrollback","findAddon","loadAddon","fitAddon","fit","shell","reset","SearchBox","onSearch","IconButton","CommonStackTokens","TcpIp","tcpPort","setTcpAddresses","queryTcpAddress","getAddresses","tcpPortValue","setTcpPortValue","tcpPortInputId","useId","enableTcp","setPort","disableTcp","disable","MessageBar","verticalAlign","Label","htmlFor","TextField","render","setDevice","routes","exact","product","model","fontSize","textAlign","paddingRight","borderRight","Nav","groups","links","route","to","getElementById"],"mappings":"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","file":"index.25fe46c662f82b8fed45.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"2YZa\",1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Disposable } from './disposable';\nimport { EventListener, RemoveEventListener } from './event';\n\ninterface EventListenerInfo<TEvent, TResult = unknown> {\n    listener: EventListener<TEvent, any, any, TResult>;\n\n    thisArg: unknown;\n\n    args: unknown[];\n}\n\nexport class EventEmitter<TEvent, TResult = unknown> implements Disposable {\n    protected listeners: EventListenerInfo<TEvent, TResult>[] = [];\n\n    public constructor() {\n        this.event = this.event.bind(this);\n    }\n\n    public event(\n        listener: EventListener<TEvent, unknown, [], TResult>\n    ): RemoveEventListener;\n    public event<TThis, TArgs extends unknown[]>(\n        listener: EventListener<TEvent, TThis, TArgs, TResult>,\n        thisArg: TThis,\n        ...args: TArgs\n    ): RemoveEventListener;\n    public event<TThis, TArgs extends unknown[]>(\n        listener: EventListener<TEvent, TThis, TArgs, TResult>,\n        thisArg?: TThis,\n        ...args: TArgs\n    ): RemoveEventListener {\n        const info: EventListenerInfo<TEvent, TResult> = {\n            listener,\n            thisArg,\n            args,\n        };\n        this.listeners.push(info);\n\n        const remove: RemoveEventListener = () => {\n            const index = this.listeners.indexOf(info);\n            if (index > 0) {\n                this.listeners.splice(index, 1);\n            }\n        };\n        remove.dispose = remove;\n        return remove;\n    }\n\n    public fire(e: TEvent) {\n        for (const info of this.listeners.slice()) {\n            info.listener.apply(info.thisArg, [e, ...info.args]);\n        }\n    }\n\n    public dispose() {\n        this.listeners.length = 0;\n    }\n}\n","import { Event } from './event';\nimport { EventEmitter } from './event-emitter';\n\nexport type AsyncEventResult = void | Promise<void>;\n\nexport type AsyncEvent<TEvent> = Event<TEvent, AsyncEventResult>;\n\nexport class AsyncEventEmitter<TEvent> extends EventEmitter<TEvent, AsyncEventResult> {\n    public async fire(e: TEvent) {\n        for (const info of this.listeners) {\n            await info.listener.apply(info.thisArg, [e, ...info.args]);\n        }\n    }\n}\n","export interface Disposable {\n    dispose(): void;\n}\n\nexport class AutoDisposable implements Disposable {\n    private disposables: Disposable[] = [];\n\n    protected addDisposable<T extends Disposable>(disposable: T): T {\n        this.disposables.push(disposable);\n        return disposable;\n    }\n\n    public dispose() {\n        for (const disposable of this.disposables) {\n            disposable.dispose();\n        }\n\n        this.disposables = [];\n    }\n}\n\nexport class DisposableList extends AutoDisposable {\n    public add<T extends Disposable>(disposable: T): T {\n        return this.addDisposable(disposable);\n    }\n}\n","const BigInt0 = BigInt(0);\nconst BigInt1 = BigInt(1);\nconst BigInt2 = BigInt(2);\n\nconst BigInt2To64 = BigInt2 ** BigInt(64);\n\nexport function getBig(\n    buffer: ArrayBuffer,\n    offset = 0,\n    length = buffer.byteLength - offset\n): bigint {\n    const view = new DataView(buffer);\n\n    let result = BigInt0;\n\n    // Now `length` must be a multiplication of 8\n    // Support for arbitrary length can be easily added\n\n    for (let i = offset; i < offset + length; i += 8) {\n        result *= BigInt2To64;\n        const value = view.getBigUint64(i, false);\n        result += value;\n    }\n\n    return result;\n}\n\nexport function setBig(buffer: ArrayBuffer, value: bigint, offset: number = 0) {\n    const uint64Array: bigint[] = [];\n    while (value > BigInt0) {\n        uint64Array.push(BigInt.asUintN(64, value));\n        value /= BigInt2To64;\n    }\n\n    const view = new DataView(buffer);\n    for (let i = uint64Array.length - 1; i >= 0; i -= 1) {\n        view.setBigUint64(offset, uint64Array[i], false);\n        offset += 8;\n    }\n}\n\nexport function setBigLE(buffer: ArrayBuffer, value: bigint, offset = 0) {\n    const view = new DataView(buffer);\n    while (value > BigInt0) {\n        view.setBigUint64(offset, value, true);\n        offset += 8;\n        value /= BigInt2To64;\n    }\n}\n\n// These values are correct only if\n// modulus length is 2048 and\n// public exponent (e) is 65537\n// Anyway, that's how this library generates keys\n\n// To support other parameters,\n// a proper ASN.1 parser can be used\n\n// References:\n//\n//   https://tools.ietf.org/html/rfc8017#appendix-A.1.2\n//   PKCS #1: RSA Cryptography Specifications Version 2.2\n//     A.1.2.  RSA Private Key Syntax\n//\n//   https://lapo.it/asn1js/\n//   https://github.com/lapo-luchini/asn1js\n//   ASN.1 JavaScript decoder\n//\n//   https://www.itu.int/rec/T-REC-X.690-201508-I/en\n//   X.690: Specification of Distinguished Encoding Rules (DER)\n\nconst RsaPrivateKeyNOffset = 38;\nconst RsaPrivateKeyNLength = 2048 / 8;\nconst RsaPrivateKeyDOffset = 303;\nconst RsaPrivateKeyDLength = 2048 / 8;\n\nexport function parsePrivateKey(key: ArrayBuffer): [n: bigint, d: bigint] {\n    let n = getBig(key, RsaPrivateKeyNOffset, RsaPrivateKeyNLength);\n    let d = getBig(key, RsaPrivateKeyDOffset, RsaPrivateKeyDLength);\n\n    return [n, d];\n}\n\n// Taken from https://stackoverflow.com/a/51562038\n// I can't understand, but it does work\n// Only used with numbers less than 2^32 so doesn't need BigInt\nexport function modInverse(a: number, m: number) {\n    // validate inputs\n    [a, m] = [Number(a), Number(m)];\n    if (Number.isNaN(a) || Number.isNaN(m)) {\n        return NaN; // invalid input\n    }\n    a = (a % m + m) % m;\n    if (!a || m < 2) {\n        return NaN; // invalid input\n    }\n    // find the gcd\n    const s = [];\n    let b = m;\n    while (b) {\n        [a, b] = [b, a % b];\n        s.push({ a, b });\n    }\n    if (a !== 1) {\n        return NaN; // inverse does not exists\n    }\n    // find the inverse\n    let x = 1;\n    let y = 0;\n    for (let i = s.length - 2; i >= 0; --i) {\n        [x, y] = [y, x - y * Math.floor(s[i].a / s[i].b)];\n    }\n    return (y % m + m) % m;\n}\n\nexport function calculatePublicKeyLength() {\n    return 4 + 4 + 2048 / 8 + 2048 / 8 + 4;\n}\n\nexport function calculatePublicKey(\n    privateKey: ArrayBuffer\n): ArrayBuffer;\nexport function calculatePublicKey(\n    privateKey: ArrayBuffer,\n    output: ArrayBuffer,\n    outputOffset?: number\n): number;\nexport function calculatePublicKey(\n    privateKey: ArrayBuffer,\n    output?: ArrayBuffer,\n    outputOffset: number = 0\n): ArrayBuffer | number {\n    // Android has its own public key generation algorithm\n    // See https://github.com/aosp-mirror/platform_system_core/blob/e5c9bbd45381d7bd72fef232d1c6668946253ac8/libcrypto_utils/android_pubkey.cpp#L111\n\n    // The public key is an array of\n    //\n    // [\n    //   modulusLengthInWords, // 32-bit integer, a \"word\" is 32-bit so it must be 2048 / 8 / 4\n    //                         // Actually the comment in Android source code was wrong\n    //   n0inv,                // 32-bit integer, the modular inverse of (lower 32 bits of) n\n    //   modulus,              // n\n    //   rr,                   // Montgomery parameter R^2\n    //   exponent,             // 32-bit integer, must be 65537\n    // ]\n    //\n    // (All in little endian)\n    // See https://github.com/aosp-mirror/platform_system_core/blob/e5c9bbd45381d7bd72fef232d1c6668946253ac8/libcrypto_utils/android_pubkey.cpp#L38\n\n    // extract `n` from private key\n    const [n] = parsePrivateKey(privateKey);\n\n    let outputType: 'ArrayBuffer' | 'number';\n    const outputLength = calculatePublicKeyLength();\n    if (!output) {\n        output = new ArrayBuffer(outputLength);\n        outputType = 'ArrayBuffer';\n    } else {\n        if (output.byteLength - outputOffset < outputLength) {\n            throw new Error('output buffer is too small');\n        }\n\n        outputType = 'number';\n    }\n\n    const outputView = new DataView(output);\n\n    // modulusLengthInWords\n    outputView.setUint32(outputOffset, 2048 / 8 / 4, true);\n    outputOffset += 4;\n\n    // Calculate `n0inv`\n    // Don't know why need to multiple -1\n    // Didn't exist in Android codebase\n    const n0inv = modInverse(Number(BigInt.asUintN(32, n) * BigInt(-1)), 2 ** 32);\n    outputView.setUint32(outputOffset, n0inv, true);\n    outputOffset += 4;\n\n    // Write n\n    setBigLE(output, n, outputOffset);\n    outputOffset += 256;\n\n    // Calculate rr = (2^(rsa_size)) ^ 2 mod n\n    let rr = BigInt(2) ** BigInt(4096) % n;\n    setBigLE(output, rr, outputOffset);\n    outputOffset += 256;\n\n    // exponent\n    outputView.setUint32(outputOffset, 65537, true);\n    outputOffset += 4;\n\n    if (outputType === 'ArrayBuffer') {\n        return output;\n    } else {\n        return outputLength;\n    }\n}\n\n// Modular exponentiation\n// See https://en.wikipedia.org/wiki/Modular_exponentiation#Implementation_in_Lua\nexport function powMod(base: bigint, exponent: bigint, modulus: bigint): bigint {\n    if (modulus === BigInt1) {\n        return BigInt0;\n    }\n\n    let r = BigInt1;\n    base = base % modulus;\n\n    while (exponent > BigInt0) {\n        if (BigInt.asUintN(1, exponent) === BigInt1) {\n            r = r * base % modulus;\n        }\n\n        exponent >>= BigInt1;\n        base = base ** BigInt2 % modulus;\n    }\n\n    return r;\n}\n\nexport const Sha1DigestLength = 20;\n\nexport const Asn1Sequence = 0x30;\nexport const Asn1OctetString = 0x04;\nexport const Asn1Null = 0x05;\nexport const Asn1Oid = 0x06;\n\n// PKCS#1 SHA-1 hash digest info\nexport const Sha1DigestInfo = [\n    Asn1Sequence, 0x0d + Sha1DigestLength,\n    Asn1Sequence, 0x09,\n    // SHA-1 (1 3 14 3 2 26)\n    Asn1Oid, 0x05, 1 * 40 + 3, 14, 3, 2, 26,\n    Asn1Null, 0x00,\n    Asn1OctetString, Sha1DigestLength\n];\n\n// SubtleCrypto.sign() will hash the given data and sign the hash\n// But we don't need the hashing step\n// (In another word, ADB just requires the client to\n// encrypt the given data with its private key)\n// However SubtileCrypto.encrypt() doesn't accept 'RSASSA-PKCS1-v1_5' algorithm\n// So we need to implement the encryption by ourself\nexport function sign(privateKey: ArrayBuffer, data: ArrayBuffer): ArrayBuffer {\n    const [n, d] = parsePrivateKey(privateKey);\n\n    // PKCS#1 padding\n    const padded = new Uint8Array(256);\n    let index = 0;\n\n    padded[index] = 0;\n    index += 1;\n\n    padded[index] = 1;\n    index += 1;\n\n    const fillLength = padded.length - Sha1DigestInfo.length - data.byteLength - 1;\n    while (index < fillLength) {\n        padded[index] = 0xff;\n        index += 1;\n    }\n\n    padded[index] = 0;\n    index += 1;\n\n    padded.set(new Uint8Array(Sha1DigestInfo), index);\n    index += Sha1DigestInfo.length;\n\n    padded.set(new Uint8Array(data), index);\n\n    // Encryption\n    // signature = padded ** d % n\n    let signature = powMod(getBig(padded.buffer), d, n);\n\n    // Put into an ArrayBuffer\n    const result = new ArrayBuffer(256);\n    setBig(result, signature);\n\n    return result;\n}\n","export const BackingField = Symbol('BackingField');\n\nexport function getBackingField<T = unknown>(object: unknown, field: string): T {\n    return (object as any)[BackingField][field] as T;\n}\n\nexport function setBackingField(object: unknown, field: string, value: any): void {\n    (object as any)[BackingField][field] = value;\n}\n\nexport function defineSimpleAccessors(object: unknown, field: string): void {\n    Object.defineProperty(object, field, {\n        configurable: true,\n        enumerable: true,\n        get() { return getBackingField(object, field); },\n        set(value) { setBackingField(object, field, value); },\n    });\n}\n\nexport type WithBackingField<T> = T & { [BackingField]: any; };\n","import { getBackingField, setBackingField } from '../backing-field';\nimport { FieldDescriptorBase, FieldDescriptorBaseOptions } from './descriptor';\n\nexport namespace Array {\n    export const enum SubType {\n        ArrayBuffer,\n        String,\n    }\n\n    export type TypeScriptType<TType extends SubType = SubType> =\n        TType extends SubType.ArrayBuffer ? ArrayBuffer :\n        TType extends SubType.String ? string :\n        ArrayBuffer | string;\n\n    export interface BackingField {\n        buffer?: ArrayBuffer;\n\n        string?: string;\n    }\n\n    export function initialize(object: any, field: Array, value: BackingField): void {\n        switch (field.subType) {\n            case SubType.ArrayBuffer:\n                Object.defineProperty(object, field.name, {\n                    configurable: true,\n                    enumerable: true,\n                    get(): ArrayBuffer {\n                        return getBackingField<BackingField>(object, field.name).buffer!;\n                    },\n                    set(buffer: ArrayBuffer) {\n                        setBackingField(object, field.name, { buffer });\n                    },\n                });\n                break;\n            case SubType.String:\n                Object.defineProperty(object, field.name, {\n                    configurable: true,\n                    enumerable: true,\n                    get(): string {\n                        return getBackingField<BackingField>(object, field.name).string!;\n                    },\n                    set(string: string) {\n                        setBackingField(object, field.name, { string });\n                    },\n                });\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n        setBackingField(object, field.name, value);\n    }\n}\n\nexport interface Array<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TResultObject = {},\n    TInitObject = {},\n    TOptions extends FieldDescriptorBaseOptions = FieldDescriptorBaseOptions\n    > extends FieldDescriptorBase<\n    TName,\n    TResultObject,\n    TInitObject,\n    TOptions\n    > {\n    subType: TType;\n}\n","import { StructDeserializationContext, StructOptions, StructSerializationContext } from '../types';\nimport { FieldDescriptorBase, FieldType } from './descriptor';\n\nexport interface FieldTypeDefinition<\n    TDescriptor extends FieldDescriptorBase = FieldDescriptorBase,\n    TInitExtra = undefined,\n    > {\n    type: FieldType | string;\n\n    deserialize(options: {\n        context: StructDeserializationContext;\n        field: TDescriptor;\n        object: any;\n        options: StructOptions;\n    }): Promise<{ value: any; extra?: TInitExtra; }>;\n\n    getSize(options: {\n        field: TDescriptor;\n        options: StructOptions;\n    }): number;\n\n    getDynamicSize?(options: {\n        context: StructSerializationContext;\n        field: TDescriptor;\n        object: any;\n        options: StructOptions;\n    }): number;\n\n    initialize?(options: {\n        context: StructSerializationContext;\n        field: TDescriptor;\n        value: any;\n        extra?: TInitExtra;\n        object: any;\n        options: StructOptions;\n    }): void;\n\n    serialize(options: {\n        context: StructSerializationContext;\n        dataView: DataView;\n        field: TDescriptor;\n        object: any;\n        offset: number;\n        options: StructOptions;\n    }): void;\n}\n\nconst registry: Record<number | string, FieldTypeDefinition<any, any>> = {};\n\nexport function getFieldTypeDefinition(type: FieldType | string): FieldTypeDefinition<any, any> {\n    return registry[type];\n}\n\nexport function registerFieldTypeDefinition<\n    TDescriptor extends FieldDescriptorBase,\n    TInitExtra,\n    TDefinition extends FieldTypeDefinition<TDescriptor, TInitExtra>\n>(\n    _field: TDescriptor,\n    _initExtra: TInitExtra,\n    methods: TDefinition\n): void {\n    registry[methods.type] = methods;\n}\n","import { placeholder } from '../utils';\nimport { registerFieldTypeDefinition } from './definition';\nimport { FieldDescriptorBase, FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace Number {\n    export type TypeScriptType<T extends SubType> =\n        T extends SubType.Uint64 ? bigint : number;\n\n    export const enum SubType {\n        Uint16,\n        Int32,\n        Uint32,\n        Uint64,\n    }\n\n    export const SizeMap: Record<SubType, number> = {\n        [SubType.Uint16]: 2,\n        [SubType.Int32]: 4,\n        [SubType.Uint32]: 4,\n        [SubType.Uint64]: 8,\n    };\n\n    export const DataViewGetterMap = {\n        [SubType.Uint16]: 'getUint16',\n        [SubType.Int32]: 'getInt32',\n        [SubType.Uint32]: 'getUint32',\n        [SubType.Uint64]: 'getBigUint64',\n    } as const;\n\n    export const DataViewSetterMap = {\n        [SubType.Uint16]: 'setUint16',\n        [SubType.Int32]: 'setInt32',\n        [SubType.Uint32]: 'setUint32',\n        [SubType.Uint64]: 'setBigUint64',\n    } as const;\n}\n\nexport interface Number<\n    TName extends string = string,\n    TSubType extends Number.SubType = Number.SubType,\n    TTypeScriptType = Number.TypeScriptType<TSubType>,\n    TOptions extends FieldDescriptorBaseOptions = FieldDescriptorBaseOptions\n    > extends FieldDescriptorBase<\n    TName,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType>,\n    TOptions\n    > {\n    type: FieldType.Number;\n\n    subType: TSubType;\n}\n\nregisterFieldTypeDefinition(\n    placeholder<Number>(),\n    undefined,\n    {\n        type: FieldType.Number,\n\n        getSize({ field }) {\n            return Number.SizeMap[field.subType];\n        },\n\n        async deserialize({ context, field, options }) {\n            const buffer = await context.read(Number.SizeMap[field.subType]);\n            const view = new DataView(buffer);\n            const value = view[Number.DataViewGetterMap[field.subType]](\n                0,\n                options.littleEndian\n            );\n            return { value };\n        },\n\n        serialize({ dataView, field, object, offset, options }) {\n            (dataView[Number.DataViewSetterMap[field.subType]] as any)(\n                offset,\n                object[field.name],\n                options.littleEndian\n            );\n        },\n    }\n);\n","import { getBackingField, setBackingField } from '../backing-field';\nimport { StructSerializationContext } from '../types';\nimport { Identity, placeholder } from '../utils';\nimport { Array } from './array';\nimport { registerFieldTypeDefinition } from './definition';\nimport { FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace VariableLengthArray {\n    export type TypeScriptTypeCanBeUndefined<\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > =\n        TEmptyBehavior extends EmptyBehavior.Empty ? never :\n        undefined;\n\n    export type TypeScriptType<\n        TType extends Array.SubType = Array.SubType,\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > =\n        Identity<\n            Array.TypeScriptType<TType> |\n            TypeScriptTypeCanBeUndefined<TEmptyBehavior>\n        >;\n\n    export const enum EmptyBehavior {\n        Undefined,\n        Empty,\n    }\n\n    export type KeyOfType<TObject, TProperty> =\n        {\n            [TKey in keyof TObject]:\n            TObject[TKey] extends TProperty ? TKey : never\n        }[keyof TObject];\n\n    export interface Options<\n        TInit = object,\n        TLengthField extends KeyOfType<TInit, number | string> = any,\n        TEmptyBehavior extends EmptyBehavior = EmptyBehavior\n        > extends FieldDescriptorBaseOptions {\n        lengthField: TLengthField;\n\n        emptyBehavior?: TEmptyBehavior;\n    }\n\n    export function getLengthBackingField(\n        object: any,\n        field: VariableLengthArray\n    ): number | undefined {\n        return getBackingField<number>(object, field.options.lengthField);\n    }\n\n    export function setLengthBackingField(\n        object: any,\n        field: VariableLengthArray,\n        value: number | undefined\n    ) {\n        setBackingField(object, field.options.lengthField, value);\n    }\n\n    export function initialize(\n        object: any,\n        field: VariableLengthArray,\n        value: Array.BackingField,\n        context: StructSerializationContext,\n    ): void {\n        Array.initialize(object, field, value);\n        const descriptor = Object.getOwnPropertyDescriptor(object, field.name)!;\n        delete object[field.name];\n\n        switch (field.subType) {\n            case Array.SubType.ArrayBuffer:\n                Object.defineProperty(object, field.name, {\n                    ...descriptor,\n                    set(buffer: ArrayBuffer | undefined) {\n                        descriptor.set!.call(object, buffer);\n                        setLengthBackingField(object, field, buffer?.byteLength ?? 0);\n                    },\n                });\n\n                delete object[field.options.lengthField];\n                Object.defineProperty(object, field.options.lengthField, {\n                    configurable: true,\n                    enumerable: true,\n                    get() {\n                        return getLengthBackingField(object, field);\n                    }\n                });\n                break;\n            case Array.SubType.String:\n                Object.defineProperty(object, field.name, {\n                    ...descriptor,\n                    set(string: string | undefined) {\n                        descriptor.set!.call(object, string);\n                        if (string) {\n                            setLengthBackingField(object, field, undefined);\n                        } else {\n                            setLengthBackingField(object, field, 0);\n                        }\n                    },\n                });\n\n                delete object[field.options.lengthField];\n                Object.defineProperty(object, field.options.lengthField, {\n                    configurable: true,\n                    enumerable: true,\n                    get() {\n                        let value = getLengthBackingField(object, field);\n                        if (value === undefined) {\n                            const backingField = getBackingField<Array.BackingField>(object, field.name);\n                            const buffer = context.encodeUtf8(backingField.string!);\n                            backingField.buffer = buffer;\n\n                            value = buffer.byteLength;\n                            setLengthBackingField(object, field, value);\n                        }\n                        return value;\n                    }\n                });\n                break;\n            default:\n                throw new Error('Unknown type');\n        }\n        setBackingField(object, field.name, value);\n        if (value.buffer) {\n            setLengthBackingField(object, field, value.buffer.byteLength);\n        }\n    }\n}\n\nexport interface VariableLengthArray<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TInit = object,\n    TLengthField extends VariableLengthArray.KeyOfType<TInit, number | string> = any,\n    TEmptyBehavior extends VariableLengthArray.EmptyBehavior = VariableLengthArray.EmptyBehavior,\n    TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>,\n    TOptions extends VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior> = VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>\n    > extends Array<\n    TName,\n    TType,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType> & Record<TLengthField, never>,\n    TOptions\n    > {\n    type: FieldType.VariableLengthArray;\n\n    options: TOptions;\n}\n\nregisterFieldTypeDefinition(\n    placeholder<VariableLengthArray>(),\n    placeholder<ArrayBuffer>(),\n    {\n        type: FieldType.VariableLengthArray,\n\n        async deserialize(\n            { context, field, object }\n        ): Promise<{ value: string | ArrayBuffer | undefined, extra?: ArrayBuffer; }> {\n            let length = object[field.options.lengthField];\n            if (typeof length === 'string') {\n                length = Number.parseInt(length, 10);\n            }\n\n            if (length === 0) {\n                if (field.options.emptyBehavior === VariableLengthArray.EmptyBehavior.Empty) {\n                    switch (field.subType) {\n                        case Array.SubType.ArrayBuffer:\n                            return { value: new ArrayBuffer(0) };\n                        case Array.SubType.String:\n                            return { value: '', extra: new ArrayBuffer(0) };\n                        default:\n                            throw new Error('Unknown type');\n                    }\n                } else {\n                    return { value: undefined };\n                }\n            }\n\n            const buffer = await context.read(length);\n            switch (field.subType) {\n                case Array.SubType.ArrayBuffer:\n                    return { value: buffer };\n                case Array.SubType.String:\n                    return {\n                        value: context.decodeUtf8(buffer),\n                        extra: buffer\n                    };\n                default:\n                    throw new Error('Unknown type');\n            }\n        },\n\n        getSize() { return 0; },\n\n        getDynamicSize({ field, object }) {\n            return object[field.options.lengthField];\n        },\n\n        initialize({ context, extra, field, object, value }) {\n            const backingField: Array.BackingField = {};\n            if (typeof value === 'string') {\n                backingField.string = value;\n                if (extra) {\n                    backingField.buffer = extra;\n                }\n            } else {\n                backingField.buffer = value;\n            }\n            Array.initialize(object, field, backingField);\n            VariableLengthArray.initialize(object, field, backingField, context);\n        },\n\n        serialize({ dataView, field, object, offset }) {\n            const backingField = getBackingField<Array.BackingField>(object, field.name);\n            new Uint8Array(dataView.buffer).set(\n                new Uint8Array(backingField.buffer!),\n                offset\n            );\n        },\n    }\n);\n","import { getBackingField } from '../backing-field';\nimport { placeholder } from '../utils';\nimport { Array } from './array';\nimport { registerFieldTypeDefinition } from './definition';\nimport { FieldDescriptorBaseOptions, FieldType } from './descriptor';\n\nexport namespace FixedLengthArray {\n    export interface Options extends FieldDescriptorBaseOptions {\n        length: number;\n    }\n}\n\nexport interface FixedLengthArray<\n    TName extends string = string,\n    TType extends Array.SubType = Array.SubType,\n    TTypeScriptType = Array.TypeScriptType<TType>,\n    TOptions extends FixedLengthArray.Options = FixedLengthArray.Options\n    > extends Array<\n    TName,\n    TType,\n    Record<TName, TTypeScriptType>,\n    Record<TName, TTypeScriptType>,\n    TOptions\n    > {\n    type: FieldType.FixedLengthArray;\n\n    options: TOptions;\n};\n\nregisterFieldTypeDefinition(\n    placeholder<FixedLengthArray>(),\n    placeholder<ArrayBuffer>(),\n    {\n        type: FieldType.FixedLengthArray,\n\n        async deserialize(\n            { context, field }\n        ): Promise<{ value: string | ArrayBuffer, extra?: ArrayBuffer; }> {\n            const buffer = await context.read(field.options.length);\n\n            switch (field.subType) {\n                case Array.SubType.ArrayBuffer:\n                    return { value: buffer };\n                case Array.SubType.String:\n                    return {\n                        value: context.decodeUtf8(buffer),\n                        extra: buffer\n                    };\n                default:\n                    throw new Error('Unknown type');\n            }\n        },\n\n        getSize({ field }) {\n            return field.options.length;\n        },\n\n        initialize({ extra, field, object, value }) {\n            const backingField: Array.BackingField = {};\n            if (typeof value === 'string') {\n                backingField.string = value;\n                if (extra) {\n                    backingField.buffer = extra;\n                }\n            } else {\n                backingField.buffer = value;\n            }\n            Array.initialize(object, field, backingField);\n        },\n\n        serialize({ context, dataView, field, object, offset }) {\n            const backingField = getBackingField<Array.BackingField>(object, field.name);\n            backingField.buffer ??=\n                context.encodeUtf8(backingField.string!);\n\n            new Uint8Array(dataView.buffer).set(\n                new Uint8Array(backingField.buffer),\n                offset\n            );\n        }\n    }\n);\n","export interface StructSerializationContext {\n    encodeUtf8(input: string): ArrayBuffer;\n}\n\nexport interface StructDeserializationContext extends StructSerializationContext {\n    decodeUtf8(buffer: ArrayBuffer): string;\n\n    read(length: number): ArrayBuffer | Promise<ArrayBuffer>;\n}\n\nexport interface StructOptions {\n    littleEndian: boolean;\n}\n\nexport const StructDefaultOptions: Readonly<StructOptions> = {\n    littleEndian: false,\n};\n","import { BackingField, defineSimpleAccessors, setBackingField, WithBackingField } from './backing-field';\nimport { Array, FieldDescriptorBase, FieldDescriptorBaseOptions, FieldType, FieldTypeDefinition, FixedLengthArray, getFieldTypeDefinition, Number, VariableLengthArray } from './field';\nimport { StructDefaultOptions, StructDeserializationContext, StructOptions, StructSerializationContext } from './types';\nimport { Evaluate, Identity, OmitNever, Overwrite } from './utils';\n\nexport type StructValueType<T> =\n    T extends { deserialize(context: StructDeserializationContext): Promise<infer R>; } ? R : never;\n\nexport type StructInitType<T extends Struct<object, object, object, unknown>> =\n    T extends { create(value: infer R, ...args: any): any; } ? Evaluate<R> : never;\n\ninterface AddArrayFieldDescriptor<\n    TResult extends object,\n    TInit extends object,\n    TExtra extends object,\n    TAfterParsed\n    > {\n    <\n        TName extends string,\n        TType extends Array.SubType,\n        TTypeScriptType = Array.TypeScriptType<TType>\n        >(\n        name: TName,\n        type: TType,\n        options: FixedLengthArray.Options,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        FixedLengthArray<\n            TName,\n            TType,\n            TTypeScriptType\n        >\n    >;\n\n    <\n        TName extends string,\n        TType extends Array.SubType,\n        TLengthField extends VariableLengthArray.KeyOfType<TInit, number | string>,\n        TEmptyBehavior extends VariableLengthArray.EmptyBehavior,\n        TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>\n        >(\n        name: TName,\n        type: TType,\n        options: VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        VariableLengthArray<\n            TName,\n            TType,\n            TInit,\n            TLengthField,\n            TEmptyBehavior,\n            TTypeScriptType\n        >\n    >;\n}\n\ninterface AddArraySubTypeFieldDescriptor<\n    TResult extends object,\n    TInit extends object,\n    TExtra extends object,\n    TAfterParsed,\n    TType extends Array.SubType\n    > {\n    <\n        TName extends string,\n        TTypeScriptType = Array.TypeScriptType<TType>\n        >(\n        name: TName,\n        options: FixedLengthArray.Options,\n        typescriptType?: () => TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        FixedLengthArray<\n            TName,\n            TType,\n            TTypeScriptType\n        >\n    >;\n\n    <\n        TName extends string,\n        TLengthField extends VariableLengthArray.KeyOfType<TInit, number | string>,\n        TEmptyBehavior extends VariableLengthArray.EmptyBehavior,\n        TTypeScriptType = VariableLengthArray.TypeScriptType<TType, TEmptyBehavior>\n        >(\n        name: TName,\n        options: VariableLengthArray.Options<TInit, TLengthField, TEmptyBehavior>,\n        _typescriptType?: TTypeScriptType,\n    ): MergeStruct<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        VariableLengthArray<\n            TName,\n            TType,\n            TInit,\n            TLengthField,\n            TEmptyBehavior,\n            TTypeScriptType\n        >\n    >;\n}\n\ntype MergeStruct<\n    TResult extends object,\n    TInit extends object,\n    TExtra extends object,\n    TAfterParsed,\n    TDescriptor extends FieldDescriptorBase\n    > =\n    Identity<Struct<\n        Evaluate<TResult & Exclude<TDescriptor['resultObject'], undefined>>,\n        OmitNever<TInit & Exclude<TDescriptor['initObject'], undefined>>,\n        TExtra,\n        TAfterParsed\n    >>;\n\nexport type StructAfterParsed<TResult, TAfterParsed> =\n    (this: WithBackingField<TResult>, object: WithBackingField<TResult>) => TAfterParsed;\n\nexport default class Struct<\n    TResult extends object = {},\n    TInit extends object = {},\n    TExtra extends object = {},\n    TAfterParsed = undefined,\n    > {\n    public readonly options: Readonly<StructOptions>;\n\n    private _size = 0;\n    public get size() { return this._size; }\n\n    private fields: FieldDescriptorBase[] = [];\n\n    private _extra: PropertyDescriptorMap = {};\n\n    private _afterParsed?: StructAfterParsed<any, any>;\n\n    public constructor(options: Partial<StructOptions> = StructDefaultOptions) {\n        this.options = { ...StructDefaultOptions, ...options };\n    }\n\n    private clone(): Struct<any, any, any, any> {\n        const result = new Struct<any, any, any, any>(this.options);\n        result.fields = this.fields.slice();\n        result._size = this._size;\n        result._extra = this._extra;\n        result._afterParsed = this._afterParsed;\n        return result;\n    }\n\n    public field<TDescriptor extends FieldDescriptorBase>(\n        field: TDescriptor,\n    ): MergeStruct<TResult, TInit, TExtra, TAfterParsed, TDescriptor> {\n        const result = this.clone();\n        result.fields.push(field);\n\n        const definition = getFieldTypeDefinition(field.type);\n        const size = definition.getSize({ field, options: this.options });\n        result._size += size;\n\n        return result;\n    }\n\n    private number<\n        TName extends string,\n        TSubType extends Number.SubType = Number.SubType,\n        TTypeScriptType = Number.TypeScriptType<TSubType>\n    >(\n        name: TName,\n        type: TSubType,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.field<Number<TName, TSubType, TTypeScriptType>>({\n            type: FieldType.Number,\n            name,\n            subType: type,\n            options,\n        });\n    }\n\n    public uint16<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType<Number.SubType.Uint16>\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Uint16,\n            options,\n            _typescriptType\n        );\n    }\n\n    public int32<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType<Number.SubType.Int32>\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Int32,\n            options,\n            _typescriptType\n        );\n    }\n\n    public uint32<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType<Number.SubType.Uint32>\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Uint32,\n            options,\n            _typescriptType\n        );\n    }\n\n    public uint64<\n        TName extends string,\n        TTypeScriptType = Number.TypeScriptType<Number.SubType.Uint64>\n    >(\n        name: TName,\n        options: FieldDescriptorBaseOptions = {},\n        _typescriptType?: TTypeScriptType,\n    ) {\n        return this.number(\n            name,\n            Number.SubType.Uint64,\n            options,\n            _typescriptType\n        );\n    }\n\n    private array: AddArrayFieldDescriptor<TResult, TInit, TExtra, TAfterParsed> = (\n        name: string,\n        type: Array.SubType,\n        options: FixedLengthArray.Options | VariableLengthArray.Options\n    ): Struct<any, any, any, any> => {\n        if ('length' in options) {\n            return this.field<FixedLengthArray>({\n                type: FieldType.FixedLengthArray,\n                name,\n                subType: type,\n                options: options,\n            });\n        } else {\n            return this.field<VariableLengthArray>({\n                type: FieldType.VariableLengthArray,\n                name,\n                subType: type,\n                options: options,\n            });\n        }\n    };\n\n    public arrayBuffer: AddArraySubTypeFieldDescriptor<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        Array.SubType.ArrayBuffer\n    > = <TName extends string>(\n        name: TName,\n        options: any\n    ) => {\n            return this.array(name, Array.SubType.ArrayBuffer, options);\n        };\n\n    public string: AddArraySubTypeFieldDescriptor<\n        TResult,\n        TInit,\n        TExtra,\n        TAfterParsed,\n        Array.SubType.String\n    > = <TName extends string>(\n        name: TName,\n        options: any\n    ) => {\n            return this.array(name, Array.SubType.String, options);\n        };\n\n    public extra<TValue extends Record<\n        Exclude<\n            keyof TValue,\n            Exclude<keyof TValue, keyof TResult>>,\n        never\n    >>(\n        value: TValue & ThisType<WithBackingField<Overwrite<Overwrite<TExtra, TValue>, TResult>>>\n    ): Struct<\n        TResult,\n        TInit,\n        Overwrite<TExtra, TValue>,\n        TAfterParsed\n    > {\n        const result = this.clone();\n        result._extra = { ...result._extra, ...Object.getOwnPropertyDescriptors(value) };\n        return result;\n    }\n\n    public afterParsed(\n        callback: StructAfterParsed<TResult, never>\n    ): Struct<TResult, TInit, TExtra, never>;\n    public afterParsed(\n        callback?: StructAfterParsed<TResult, void>\n    ): Struct<TResult, TInit, TExtra, undefined>;\n    public afterParsed<TAfterParsed>(\n        callback?: StructAfterParsed<TResult, TAfterParsed>\n    ): Struct<TResult, TInit, TExtra, TAfterParsed>;\n    public afterParsed(\n        callback?: StructAfterParsed<TResult, any>\n    ) {\n        const result = this.clone();\n        result._afterParsed = callback;\n        return result;\n    }\n\n    private initializeField(\n        context: StructSerializationContext,\n        field: FieldDescriptorBase,\n        fieldTypeDefinition: FieldTypeDefinition<any, any>,\n        object: any,\n        value: any,\n        extra?: any\n    ) {\n        if (fieldTypeDefinition.initialize) {\n            fieldTypeDefinition.initialize({\n                context,\n                extra,\n                field,\n                object,\n                options: this.options,\n                value,\n            });\n        } else {\n            setBackingField(object, field.name, value);\n            defineSimpleAccessors(object, field.name);\n        }\n    }\n\n    public create(init: TInit, context: StructSerializationContext): Overwrite<TExtra, TResult> {\n        const object: any = {\n            [BackingField]: {},\n        };\n        Object.defineProperties(object, this._extra);\n\n        for (const field of this.fields) {\n            const fieldTypeDefinition = getFieldTypeDefinition(field.type);\n            this.initializeField(\n                context,\n                field,\n                fieldTypeDefinition,\n                object,\n                (init as any)[field.name]\n            );\n        }\n\n        return object;\n    }\n\n    public async deserialize(\n        context: StructDeserializationContext\n    ): Promise<TAfterParsed extends undefined ? Overwrite<TExtra, TResult> : TAfterParsed> {\n        const object: any = {\n            [BackingField]: {},\n        };\n        Object.defineProperties(object, this._extra);\n\n        for (const field of this.fields) {\n            const fieldTypeDefinition = getFieldTypeDefinition(field.type);\n            const { value, extra } = await fieldTypeDefinition.deserialize({\n                context,\n                field,\n                object,\n                options: this.options,\n            });\n            this.initializeField(\n                context,\n                field,\n                fieldTypeDefinition,\n                object,\n                value,\n                extra\n            );\n        }\n\n        if (this._afterParsed) {\n            const result = this._afterParsed.call(object, object);\n            if (result) {\n                return result;\n            }\n        }\n\n        return object;\n    }\n\n    public serialize(init: TInit, context: StructSerializationContext): ArrayBuffer {\n        const object = this.create(init, context) as any;\n\n        let size = this._size;\n        let fieldSize: number[] = [];\n        for (let i = 0; i < this.fields.length; i += 1) {\n            const field = this.fields[i];\n            const type = getFieldTypeDefinition(field.type);\n            if (type.getDynamicSize) {\n                fieldSize[i] = type.getDynamicSize({\n                    context,\n                    field,\n                    object,\n                    options: this.options,\n                });\n                size += fieldSize[i];\n            } else {\n                fieldSize[i] = type.getSize({ field, options: this.options });\n            }\n        }\n\n        const buffer = new ArrayBuffer(size);\n        const dataView = new DataView(buffer);\n        let offset = 0;\n        for (let i = 0; i < this.fields.length; i += 1) {\n            const field = this.fields[i];\n            const type = getFieldTypeDefinition(field.type);\n            type.serialize({\n                context,\n                dataView,\n                field,\n                object,\n                offset,\n                options: this.options,\n            });\n            offset += fieldSize[i];\n        }\n        return buffer;\n    }\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { Disposable } from '@yume-chan/event';\n\nexport class AutoResetEvent implements Disposable {\n    private readonly list: PromiseResolver<void>[] = [];\n\n    private blocking: boolean;\n\n    public constructor(initialSet = false) {\n        this.blocking = initialSet;\n    }\n\n    public wait(): Promise<void> {\n        if (!this.blocking) {\n            this.blocking = true;\n\n            if (this.list.length === 0) {\n                return Promise.resolve();\n            }\n        }\n\n        const resolver = new PromiseResolver<void>();\n        this.list.push(resolver);\n        return resolver.promise;\n    }\n\n    public notify() {\n        if (this.list.length !== 0) {\n            this.list.pop()!.resolve();\n        } else {\n            this.blocking = false;\n        }\n    }\n\n    public dispose() {\n        for (const item of this.list) {\n            item.reject(new Error('The AutoResetEvent has been disposed'));\n        }\n        this.list.length = 0;\n    }\n}\n","interface Base64CharRange {\n    start: number;\n\n    length: number;\n\n    end: number;\n\n    offset: number;\n}\n\nlet ranges: Base64CharRange[] = [];\nconst chars: number[] = [];\nconst padding = '='.charCodeAt(0);\n\nlet offset = 0;\nfunction addRange(start: string, end: string) {\n    const startCharCode = start.charCodeAt(0);\n    const endCharCode = end.charCodeAt(0);\n    const length = endCharCode - startCharCode + 1;\n\n    for (let i = startCharCode; i <= endCharCode; i += 1) {\n        chars.push(i);\n    }\n\n    ranges.push({\n        start: startCharCode,\n        length: length,\n        end: endCharCode,\n        offset: startCharCode - offset,\n    });\n\n    offset += length;\n}\n\naddRange('A', 'Z');\naddRange('a', 'z');\naddRange('0', '9');\naddRange('+', '+');\naddRange('/', '/');\n\nranges = ranges.sort((a, b) => a.end - b.end);\n\nfunction toValue(char: string): number {\n    const charCode = char.charCodeAt(0);\n\n    let start = 0;\n    let end = ranges.length - 1;\n    let i = end >> 1;\n\n    while (true) {\n        const range = ranges[i];\n        if (charCode < range.start) {\n            end = i - 1;\n        } else if (charCode > range.end) {\n            start = i + 1;\n        } else {\n            return charCode - range.offset;\n        }\n        i = (start + end) >> 1;\n    }\n}\n\nexport function calculateBase64EncodedLength(inputLength: number): number {\n    const paddingLength = inputLength % 3;\n    return (inputLength + 3 - paddingLength) / 3 * 4;\n}\n\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    inputOffset?: number,\n    inputLength?: number,\n): ArrayBuffer;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    output: ArrayBuffer | Uint8Array,\n    outputOffset?: number\n): number;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    inputOffset: number,\n    output: ArrayBuffer | Uint8Array,\n    outputOffset?: number\n): number;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    inputOffset: number,\n    inputLength: number,\n    output: ArrayBuffer | Uint8Array,\n    outputOffset?: number\n): number;\nexport function encodeBase64(\n    input: ArrayBuffer | Uint8Array,\n    arg1?: number | ArrayBuffer | Uint8Array,\n    arg2?: number | ArrayBuffer | Uint8Array,\n    _arg3?: number | ArrayBuffer | Uint8Array,\n    _arg4?: number,\n): ArrayBuffer | Uint8Array | number {\n    if (input instanceof ArrayBuffer) {\n        input = new Uint8Array(input);\n    }\n\n    // Because `Uint8Array` is type compatible with `ArrayBuffer`,\n    // TypeScript doesn't correctly narrow `input` to `Uint8Array` when assigning.\n    // Manually eliminate `ArrayBuffer` from `input` with a type guard.\n    if (input instanceof ArrayBuffer) {\n        return input;\n    }\n\n    let inputOffset: number;\n    let inputLength: number;\n    let output: Uint8Array;\n    let outputOffset: number;\n\n    let outputArgumentIndex: number;\n    if (typeof arg1 !== 'number') {\n        inputOffset = 0;\n        inputLength = input.byteLength;\n        outputArgumentIndex = 1;\n    } else {\n        inputOffset = arg1;\n\n        if (typeof arg2 !== 'number') {\n            inputLength = input.byteLength - inputOffset;\n            outputArgumentIndex = 2;\n        } else {\n            inputLength = arg2;\n            outputArgumentIndex = 3;\n        }\n    }\n\n    const extraBytes = inputLength % 3;\n    const outputLength = (inputLength + 3 - extraBytes) / 3 * 4;\n\n    let maybeOutput: ArrayBuffer | Uint8Array | undefined = arguments[outputArgumentIndex];\n    let outputType: 'ArrayBuffer' | 'number';\n    if (maybeOutput) {\n        outputOffset = arguments[outputArgumentIndex + 1] ?? 0;\n\n        if (maybeOutput.byteLength - outputOffset < outputLength) {\n            throw new Error('output buffer is too small');\n        }\n\n        if (maybeOutput instanceof ArrayBuffer) {\n            output = new Uint8Array(maybeOutput);\n        } else {\n            output = maybeOutput;\n        }\n\n        outputType = 'number';\n    } else {\n        const buffer = new ArrayBuffer(outputLength);\n        output = new Uint8Array(buffer);\n        outputOffset = 0;\n        outputType = 'ArrayBuffer';\n    }\n\n    // Because `Uint8Array` is type compatible with `ArrayBuffer`,\n    // TypeScript doesn't correctly narrow `output` to `Uint8Array` when assigning.\n    // Manually eliminate `ArrayBuffer` from `output` with a type guard.\n    if (output instanceof ArrayBuffer) {\n        return output;\n    }\n\n    if (input.buffer === output.buffer) {\n        const bufferInputStart = input.byteOffset + inputOffset;\n        const bufferOutputStart = output.byteOffset + outputOffset;\n        if (bufferOutputStart < bufferInputStart - 1) {\n            const bufferOutputEnd = bufferOutputStart + outputLength;\n            if (bufferOutputEnd >= bufferInputStart) {\n                throw new Error('input and output buffer can not be overlapping');\n            }\n        }\n    }\n\n    let inputIndex = inputOffset + inputLength - 1;\n    let outputIndex = outputOffset + outputLength - 1;\n\n    if (extraBytes === 1) {\n        // aaaaaabb\n        const x = input[inputIndex];\n        inputIndex -= 1;\n\n        output[outputIndex] = padding;\n        outputIndex -= 1;\n\n        output[outputIndex] = padding;\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((x & 0b11) << 4)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[x >> 2];\n        outputIndex -= 1;\n    } else if (extraBytes === 2) {\n        // bbbbcccc\n        const y = input[inputIndex];\n        inputIndex -= 1;\n\n        // aaaaaabb\n        const x = input[inputIndex];\n        inputIndex -= 1;\n\n        output[outputIndex] = padding;\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((y & 0b1111) << 2)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((x & 0b11) << 4) | (y >> 4)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[x >> 2];\n        outputIndex -= 1;\n    }\n\n    while (inputIndex >= inputOffset) {\n        // ccdddddd\n        const z = input[inputIndex];\n        inputIndex -= 1;\n\n        // bbbbcccc\n        const y = input[inputIndex];\n        inputIndex -= 1;\n\n        // aaaaaabb\n        const x = input[inputIndex];\n        inputIndex -= 1;\n\n        output[outputIndex] = chars[z & 0b111111];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((y & 0b1111) << 2) | (z >> 6)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[((x & 0b11) << 4) | (y >> 4)];\n        outputIndex -= 1;\n\n        output[outputIndex] = chars[x >> 2];\n        outputIndex -= 1;\n    }\n\n    if (outputType === 'ArrayBuffer') {\n        return output.buffer;\n    } else {\n        return outputLength;\n    }\n}\n\nexport function decodeBase64(input: string): ArrayBuffer {\n    let padding: number;\n    if (input[input.length - 2] === '=') {\n        padding = 2;\n    } else if (input[input.length - 1] === '=') {\n        padding = 1;\n    } else {\n        padding = 0;\n    }\n\n    const result = new Uint8Array(input.length / 4 * 3 - padding);\n    let sIndex = 0;\n    let dIndex = 0;\n\n    while (sIndex < input.length - (padding !== 0 ? 4 : 0)) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const c = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const d = toValue(input[sIndex]);\n        sIndex += 1;\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n        dIndex += 1;\n\n        result[dIndex] = ((b & 0b1111) << 4) | ((c & 0b11_1100) >> 2);\n        dIndex += 1;\n\n        result[dIndex] = ((c & 0b11) << 6) | d;\n        dIndex += 1;\n    }\n\n    if (padding === 1) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const c = toValue(input[sIndex]);\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n        dIndex += 1;\n\n        result[dIndex] = ((b & 0b1111) << 4) | ((c & 0b11_1100) >> 2);\n    } else if (padding === 2) {\n        const a = toValue(input[sIndex]);\n        sIndex += 1;\n\n        const b = toValue(input[sIndex]);\n\n        result[dIndex] = (a << 2) | ((b & 0b11_0000) >> 4);\n    }\n\n    return result.buffer;\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { EventEmitter } from '@yume-chan/event';\n\nexport interface EventQueueOptions {\n    maxWaitCount: number;\n\n    highWaterMark: number;\n\n    lowWaterMark: number;\n}\n\nexport const EventQueueDefaultOptions: EventQueueOptions = {\n    maxWaitCount: Infinity,\n    highWaterMark: 10,\n    lowWaterMark: 0,\n};\n\nexport class EventQueue<T> {\n    private options: EventQueueOptions;\n\n    private pullQueue: PromiseResolver<T>[] = [];\n\n    private pushQueue: [value: T, size: number][] = [];\n\n    private ended = false;\n\n    private waterMark = 0;\n\n    private pendingLowWaterEvent = false;\n\n    private lowWaterEvent = new EventEmitter<void>();\n\n    public get onLowWater() { return this.lowWaterEvent.event; }\n\n    public constructor(options: Partial<EventQueueOptions> = EventQueueDefaultOptions) {\n        this.options = { ...EventQueueDefaultOptions, ...options };\n    }\n\n    public push(value: T, size = 1): boolean {\n        if (this.ended) {\n            return true;\n        }\n\n        if (this.pullQueue.length) {\n            this.pullQueue.shift()!.resolve(value);\n            return true;\n        }\n\n        this.pushQueue.push([value, size]);\n        this.waterMark += size;\n        if (this.waterMark < this.options.highWaterMark) {\n            return true;\n        }\n\n        this.pendingLowWaterEvent = true;\n        return false;\n    }\n\n    public next(): Promise<T> {\n        if (this.pushQueue.length) {\n            const [value, size] = this.pushQueue.shift()!;\n            this.waterMark -= size;\n            if (this.pendingLowWaterEvent &&\n                this.waterMark <= this.options.lowWaterMark) {\n                this.lowWaterEvent.fire();\n            }\n            return Promise.resolve(value);\n        }\n\n        if (this.ended) {\n            return Promise.reject(new Error('The EventQueue has already ended'));\n        }\n\n        if (this.pullQueue.length === this.options.maxWaitCount - 1) {\n            throw new Error('Max wait count exceeded');\n        }\n\n        const resolver = new PromiseResolver<T>();\n        this.pullQueue.push(resolver);\n        return resolver.promise;\n    }\n\n    public end(): void {\n        this.ended = true;\n        let item: PromiseResolver<T | undefined> | undefined;\n        while (item = this.pullQueue.shift()) {\n            item.reject(new Error('The EventQueue has already ended'));\n        }\n    }\n}\n","import { AutoResetEvent, EventQueue } from '../utils';\nimport { AdbStreamBase } from './controller';\nimport { AdbStream } from './stream';\n\nexport class AdbReadableStream implements AdbStreamBase {\n    private stream: AdbStream;\n\n    private queue: EventQueue<ArrayBuffer>;\n\n    private readLock = new AutoResetEvent();\n\n    public get backend() { return this.stream.backend; }\n\n    public get localId() { return this.stream.localId; }\n\n    public get remoteId() { return this.stream.remoteId; }\n\n    public constructor(stream: AdbStream) {\n        this.stream = stream;\n        this.queue = new EventQueue<ArrayBuffer>({\n            highWaterMark: 16 * 1024,\n        });\n\n        const resetEvent = new AutoResetEvent(true);\n\n        this.stream.onData(buffer => {\n            if (!this.queue.push(buffer, buffer.byteLength)) {\n                return resetEvent.wait();\n            }\n            return;\n        });\n        this.stream.onClose(() => {\n            this.queue.end();\n        });\n\n        this.queue.onLowWater(() => {\n            resetEvent.notify();\n        });\n    }\n\n    public async read(): Promise<ArrayBuffer> {\n        await this.readLock.wait();\n\n        try {\n            return await this.queue.next();\n        } finally {\n            this.readLock.notify();\n        }\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.stream.write(data);\n    }\n\n    close(): void {\n        this.stream.close();\n    }\n}\n","import { StructDeserializationContext } from '@yume-chan/struct';\nimport { AdbStreamBase } from './controller';\nimport { AdbReadableStream } from './readable-stream';\nimport { AdbStream } from './stream';\n\nexport interface Stream {\n    /**\n     * @param length A hint of how much data should be read.\n     * @returns Data, which can be either more or less than `length`\n     */\n    read(length: number): ArrayBuffer | Promise<ArrayBuffer>;\n\n    close?(): void;\n}\n\nexport class BufferedStream<T extends Stream> {\n    private buffer: Uint8Array | undefined;\n\n    protected readonly stream: T;\n\n    public constructor(stream: T) {\n        this.stream = stream;\n    }\n\n    public async read(length: number): Promise<ArrayBuffer> {\n        let array: Uint8Array;\n        let index: number;\n        if (this.buffer) {\n            const buffer = this.buffer;\n            if (buffer.byteLength > length) {\n                this.buffer = buffer.subarray(length);\n                return buffer.slice(0, length).buffer;\n            }\n\n            array = new Uint8Array(length);\n            array.set(buffer);\n            index = buffer.byteLength;\n            this.buffer = undefined;\n        } else {\n            array = new Uint8Array(length);\n            index = 0;\n        }\n\n        while (index < length) {\n            const buffer = await this.stream.read(length - index);\n            if (buffer.byteLength > length - index) {\n                array.set(new Uint8Array(buffer, 0, length), index);\n                this.buffer = new Uint8Array(buffer, length);\n                return array.buffer;\n            }\n\n            array.set(new Uint8Array(buffer), index);\n            index += buffer.byteLength;\n        }\n\n        return array.buffer;\n    }\n\n    public close() {\n        this.stream.close?.();\n    }\n}\n\nexport class AdbBufferedStream\n    extends BufferedStream<AdbReadableStream>\n    implements AdbStreamBase, StructDeserializationContext {\n    public get backend() { return this.stream.backend; }\n\n    public get localId() { return this.stream.localId; }\n\n    public get remoteId() { return this.stream.remoteId; }\n\n    public constructor(stream: AdbStream) {\n        super(new AdbReadableStream(stream));\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.stream.write(data);\n    }\n\n    public decodeUtf8(buffer: ArrayBuffer): string {\n        return this.backend.decodeUtf8(buffer);\n    }\n\n    public encodeUtf8(input: string): ArrayBuffer {\n        return this.backend.encodeUtf8(input);\n    }\n}\n","import { AsyncEventEmitter, AutoDisposable, EventEmitter } from '@yume-chan/event';\nimport { AdbBackend } from '../backend';\nimport { AdbCommand } from '../packet';\nimport { AutoResetEvent } from '../utils';\nimport { AdbPacketDispatcher } from './dispatcher';\n\nexport interface AdbStreamBase {\n    backend: AdbBackend;\n\n    localId: number;\n\n    remoteId: number;\n}\n\nexport class AdbStreamController extends AutoDisposable implements AdbStreamBase {\n    private readonly writeLock = this.addDisposable(new AutoResetEvent());\n\n    public readonly dispatcher: AdbPacketDispatcher;\n\n    public get backend() { return this.dispatcher.backend; }\n\n    public readonly localId: number;\n\n    public readonly remoteId: number;\n\n    public readonly dataEvent = this.addDisposable(new AsyncEventEmitter<ArrayBuffer>());\n\n    private _closed = false;\n\n    public get closed() { return this._closed; }\n\n    private readonly closeEvent = this.addDisposable(new EventEmitter<void>());\n\n    public get onClose() { return this.closeEvent.event; }\n\n    public constructor(localId: number, remoteId: number, dispatcher: AdbPacketDispatcher) {\n        super();\n\n        this.localId = localId;\n        this.remoteId = remoteId;\n        this.dispatcher = dispatcher;\n    }\n\n    public async write(data: ArrayBuffer): Promise<void> {\n        if (this._closed) {\n            throw new Error('Can not write after closed');\n        }\n\n        await this.writeLock.wait();\n        await this.dispatcher.sendPacket(AdbCommand.Write, this.localId, this.remoteId, data);\n    }\n\n    public ack() {\n        this.writeLock.notify();\n    }\n\n    public async close(): Promise<void> {\n        if (!this._closed) {\n            await this.dispatcher.sendPacket(AdbCommand.Close, this.localId, this.remoteId);\n            this._closed = true;\n        }\n    }\n\n    public dispose() {\n        this._closed = true;\n        this.closeEvent.fire();\n        super.dispose();\n    }\n}\n","import { AdbStreamBase, AdbStreamController } from './controller';\n\nexport class AdbStream implements AdbStreamBase {\n    private controller: AdbStreamController;\n\n    public get backend() { return this.controller.backend; }\n\n    public get localId() { return this.controller.localId; }\n\n    public get remoteId() { return this.controller.remoteId; }\n\n    public get onData() { return this.controller.dataEvent.event; }\n\n    public get onClose() { return this.controller.onClose; }\n\n    public constructor(controller: AdbStreamController) {\n        this.controller = controller;\n    }\n\n    public write(data: ArrayBuffer): Promise<void> {\n        return this.controller.write(data);\n    }\n\n    public close(): Promise<void> {\n        return this.controller.close();\n    }\n}\n","import AsyncOperationManager from '@yume-chan/async-operation-manager';\nimport { AutoDisposable, EventEmitter } from '@yume-chan/event';\nimport { AdbBackend } from '../backend';\nimport { AdbCommand, AdbPacket } from '../packet';\nimport { AdbStreamController } from './controller';\nimport { AdbStream } from './stream';\n\nexport interface AdbPacketReceivedEventArgs {\n    handled: boolean;\n\n    packet: AdbPacket;\n}\n\nexport interface AdbIncomingStreamEventArgs {\n    handled: boolean;\n\n    packet: AdbPacket;\n\n    stream: AdbStream;\n}\n\nexport class AdbPacketDispatcher extends AutoDisposable {\n    // ADB requires stream id to start from 1\n    // (0 means open failed)\n    private readonly initializers = new AsyncOperationManager(1);\n    private readonly streams = new Map<number, AdbStreamController>();\n\n    public readonly backend: AdbBackend;\n\n    private readonly packetEvent = this.addDisposable(new EventEmitter<AdbPacketReceivedEventArgs>());\n    public get onPacket() { return this.packetEvent.event; }\n\n    private readonly streamEvent = this.addDisposable(new EventEmitter<AdbIncomingStreamEventArgs>());\n    public get onStream() { return this.streamEvent.event; }\n\n    private readonly errorEvent = this.addDisposable(new EventEmitter<Error>());\n    public get onError() { return this.errorEvent.event; }\n\n    private _running = false;\n    public get running() { return this._running; }\n\n    public constructor(backend: AdbBackend) {\n        super();\n\n        this.backend = backend;\n    }\n\n    private async receiveLoop() {\n        try {\n            while (this._running) {\n                const packet = await AdbPacket.read(this.backend);\n                switch (packet.command) {\n                    case AdbCommand.OK:\n                        this.handleOk(packet);\n                        continue;\n                    case AdbCommand.Close:\n                        // CLSE also has two meanings\n                        if (packet.arg0 === 0) {\n                            // 1. The device don't want to create the Stream\n                            this.initializers.reject(packet.arg1, new Error('open failed'));\n                            continue;\n                        }\n\n                        if (this.streams.has(packet.arg1)) {\n                            // 2. The device has closed the Stream\n                            this.streams.get(packet.arg1)!.dispose();\n                            this.streams.delete(packet.arg1);\n                            continue;\n                        }\n\n                        // Maybe the device is responding to a packet of last connection\n                        // Just ignore it\n                        continue;\n                    case AdbCommand.Write:\n                        if (this.streams.has(packet.arg1)) {\n                            await this.streams.get(packet.arg1)!.dataEvent.fire(packet.payload!);\n                            await this.sendPacket(AdbCommand.OK, packet.arg1, packet.arg0);\n                        }\n\n                        // Maybe the device is responding to a packet of last connection\n                        // Just ignore it\n                        continue;\n                    case AdbCommand.Open:\n                        await this.handleOpen(packet);\n                        continue;\n                }\n\n                const args: AdbPacketReceivedEventArgs = {\n                    handled: false,\n                    packet,\n                };\n                this.packetEvent.fire(args);\n                if (!args.handled) {\n                    this.dispose();\n                    return;\n                }\n            }\n        } catch (e) {\n            if (!this._running) {\n                // ignore error\n                return;\n            }\n\n            this.errorEvent.fire(e);\n        }\n    }\n\n    private handleOk(packet: AdbPacket) {\n        if (this.initializers.resolve(packet.arg1, packet.arg0)) {\n            // Device has created the `Stream`\n            return;\n        }\n\n        if (this.streams.has(packet.arg1)) {\n            // Device has received last `WRTE` to the `Stream`\n            this.streams.get(packet.arg1)!.ack();\n            return;\n        }\n\n        // Maybe the device is responding to a packet of last connection\n        // Tell the device to close the stream\n        this.sendPacket(AdbCommand.Close, packet.arg1, packet.arg0);\n    }\n\n    private async handleOpen(packet: AdbPacket) {\n        // AsyncOperationManager doesn't support get and skip an ID\n        // Use `add` + `resolve` to simulate the behavior\n        const [localId] = this.initializers.add<number>();\n        this.initializers.resolve(localId, undefined);\n\n        const remoteId = packet.arg0;\n        const controller = new AdbStreamController(localId, remoteId, this);\n        const stream = new AdbStream(controller);\n\n        const args: AdbIncomingStreamEventArgs = {\n            handled: false,\n            packet,\n            stream,\n        };\n        this.streamEvent.fire(args);\n\n        if (args.handled) {\n            this.streams.set(localId, controller);\n            await this.sendPacket(AdbCommand.OK, localId, remoteId);\n        } else {\n            await this.sendPacket(AdbCommand.Close, 0, remoteId);\n        }\n    }\n\n    public start() {\n        this._running = true;\n        this.receiveLoop();\n    }\n\n    public async createStream(service: string): Promise<AdbStream> {\n        const [localId, initializer] = this.initializers.add<number>();\n        await this.sendPacket(AdbCommand.Open, localId, 0, service);\n\n        const remoteId = await initializer;\n        const controller = new AdbStreamController(localId, remoteId, this);\n        this.streams.set(controller.localId, controller);\n\n        return new AdbStream(controller);\n    }\n\n    public sendPacket(packet: AdbPacket): Promise<void>;\n    public sendPacket(\n        command: AdbCommand,\n        arg0: number,\n        arg1: number,\n        payload?: string | ArrayBuffer\n    ): Promise<void>;\n    public sendPacket(\n        packetOrCommand: AdbPacket | AdbCommand,\n        arg0?: number,\n        arg1?: number,\n        payload?: string | ArrayBuffer\n    ): Promise<void> {\n        let packet: AdbPacket;\n        if (arguments.length === 1) {\n            packet = packetOrCommand as AdbPacket;\n        } else {\n            if (typeof payload === 'string') {\n                payload = this.backend.encodeUtf8(payload);\n            }\n\n            packet = AdbPacket.create({\n                command: packetOrCommand as AdbCommand,\n                arg0: arg0 as number,\n                arg1: arg1 as number,\n                payload,\n            }, this.backend);\n        }\n\n        return AdbPacket.write(packet, this.backend);\n    }\n\n    public dispose() {\n        this._running = false;\n\n        for (const stream of this.streams.values()) {\n            stream.dispose();\n        }\n        this.streams.clear();\n\n        super.dispose();\n    }\n}\n","import { BackingField, Struct, StructInitType, StructValueType } from '@yume-chan/struct';\nimport { AdbBackend } from './backend';\nimport { BufferedStream } from './stream';\n\nexport enum AdbCommand {\n    Auth = 0x48545541,    // 'AUTH'\n    Close = 0x45534c43,   // 'CLSE'\n    Connect = 0x4e584e43, // 'CNXN'\n    OK = 0x59414b4f,      // 'OKAY'\n    Open = 0x4e45504f,    // 'OPEN'\n    Write = 0x45545257,   // 'WRTE'\n}\n\nconst AdbPacketWithoutPayload =\n    new Struct({ littleEndian: true })\n        .uint32('command', undefined)\n        .uint32('arg0')\n        .uint32('arg1')\n        .uint32('payloadLength')\n        .uint32('checksum')\n        .int32('magic');\n\nconst AdbPacketStruct =\n    AdbPacketWithoutPayload\n        .arrayBuffer('payload', { lengthField: 'payloadLength' })\n        .afterParsed((value) => {\n            if (value[BackingField].magic !== value.magic) {\n                throw new Error('Invalid command');\n            }\n        });\n\nexport type AdbPacket = StructValueType<typeof AdbPacketStruct>;\n\nexport type AdbPacketInit = Omit<StructInitType<typeof AdbPacketStruct>, 'checksum' | 'magic'>;\n\nexport namespace AdbPacket {\n    export function create(init: AdbPacketInit, backend: AdbBackend): AdbPacket {\n        return AdbPacketStruct.create({\n            ...init,\n            checksum: 0,\n            magic: init.command ^ 0xFFFFFFFF,\n        }, backend);\n    }\n\n    export async function read(backend: AdbBackend): Promise<AdbPacket> {\n        let buffer = await backend.read(24);\n        if (buffer.byteLength !== 24) {\n            // Maybe it's a payload from last connection.\n            // Ignore and try again\n            buffer = await backend.read(24);\n        }\n\n        let bufferUsed = false;\n        const stream = new BufferedStream({\n            read(length: number) {\n                if (!bufferUsed) {\n                    bufferUsed = true;\n                    return buffer;\n                }\n                return backend.read(length);\n            }\n        });\n\n        return AdbPacketStruct.deserialize({\n            read: stream.read.bind(stream),\n            decodeUtf8: backend.decodeUtf8.bind(backend),\n            encodeUtf8: backend.encodeUtf8.bind(backend),\n        });\n    }\n\n    export async function write(packet: AdbPacket, backend: AdbBackend): Promise<void> {\n        // Write payload separately to avoid an extra copy\n        await backend.write(AdbPacketWithoutPayload.serialize(packet, backend));\n        if (packet.payload) {\n            await backend.write(packet.payload);\n        }\n    }\n}\n","import { Disposable } from '@yume-chan/event';\nimport { AdbBackend } from './backend';\nimport { calculatePublicKey, calculatePublicKeyLength, sign } from './crypto';\nimport { AdbCommand, AdbPacket, AdbPacketInit } from './packet';\nimport { calculateBase64EncodedLength, encodeBase64 } from './utils';\n\nexport enum AdbAuthType {\n    Token = 1,\n    Signature = 2,\n    PublicKey = 3,\n}\n\nexport interface AdbAuthenticator {\n    (backend: AdbBackend, packet: AdbPacket): AsyncIterator<AdbPacketInit, void, AdbPacket>;\n}\n\nexport async function* AdbSignatureAuthenticator(\n    backend: AdbBackend,\n    packet: AdbPacket,\n): AsyncIterator<AdbPacketInit, void, AdbPacket> {\n    for await (const key of backend.iterateKeys()) {\n        if (packet.arg0 !== AdbAuthType.Token) {\n            return;\n        }\n\n        const signature = sign(key, packet.payload!);\n\n        packet = yield {\n            command: AdbCommand.Auth,\n            arg0: AdbAuthType.Signature,\n            arg1: 0,\n            payload: signature\n        };\n    }\n}\n\nexport async function* AdbPublicKeyAuthenticator(\n    backend: AdbBackend,\n    packet: AdbPacket,\n): AsyncIterator<AdbPacketInit, void, AdbPacket> {\n    if (packet.arg0 !== AdbAuthType.Token) {\n        return;\n    }\n\n    let privateKey: ArrayBuffer | undefined;\n    for await (const key of backend.iterateKeys()) {\n        privateKey = key;\n        break;\n    }\n\n    if (!privateKey) {\n        privateKey = await backend.generateKey();\n    }\n\n    const publicKeyLength = calculatePublicKeyLength();\n    const publicKeyBase64Length = calculateBase64EncodedLength(publicKeyLength);\n\n    // ADBd needs an extra null terminator,\n    // So we allocate the buffer with one extra byte.\n    const publicKeyBuffer = new ArrayBuffer(publicKeyBase64Length + 1);\n\n    calculatePublicKey(privateKey, publicKeyBuffer);\n    encodeBase64(publicKeyBuffer, 0, publicKeyLength, publicKeyBuffer);\n\n    yield {\n        command: AdbCommand.Auth,\n        arg0: AdbAuthType.PublicKey,\n        arg1: 0,\n        payload: publicKeyBuffer\n    };\n}\n\nexport const AdbDefaultAuthenticators: AdbAuthenticator[] = [\n    AdbSignatureAuthenticator,\n    AdbPublicKeyAuthenticator\n];\n\nexport class AdbAuthenticationHandler implements Disposable {\n    public readonly authenticators: readonly AdbAuthenticator[];\n\n    private readonly backend: AdbBackend;\n\n    private iterator: AsyncIterator<AdbPacketInit, never, AdbPacket> | undefined;\n\n    public constructor(\n        authenticators: readonly AdbAuthenticator[],\n        backend: AdbBackend\n    ) {\n        this.authenticators = authenticators;\n        this.backend = backend;\n    }\n\n    private async* nextCore(packet: AdbPacket): AsyncGenerator<AdbPacketInit, never, AdbPacket> {\n        for (const authenticator of this.authenticators) {\n            const iterator = authenticator(this.backend, packet);\n            try {\n                let result = await iterator.next();\n                while (!result.done) {\n                    packet = yield result.value;\n                    result = await iterator.next(packet);\n                }\n            } finally {\n                iterator.return?.();\n            }\n        }\n\n        throw new Error('Cannot authenticate with device');\n    }\n\n    public async next(packet: AdbPacket): Promise<AdbPacket> {\n        if (!this.iterator) {\n            this.iterator = this.nextCore(packet);\n        }\n\n        const result = await this.iterator.next(packet);\n        return AdbPacket.create(result.value, this.backend);\n    }\n\n    public dispose() {\n        this.iterator?.return?.();\n    }\n}\n","import { AutoDisposable } from '@yume-chan/event';\nimport { Adb } from '../adb';\n\nexport class AdbCommandBase extends AutoDisposable {\n    protected adb: Adb;\n\n    public constructor(adb: Adb) {\n        super();\n        this.adb = adb;\n    }\n}\n","import { Struct, StructValueType } from \"@yume-chan/struct\";\n\nexport const AdbFrameBuffer =\n    new Struct({ littleEndian: true })\n        .uint32('version', undefined, 2 as const)\n        .uint32('bpp')\n        .uint32('colorSpace')\n        .uint32('size')\n        .uint32('width')\n        .uint32('height')\n        .uint32('red_offset')\n        .uint32('red_length')\n        .uint32('blue_offset')\n        .uint32('blue_length')\n        .uint32('green_offset')\n        .uint32('green_length')\n        .uint32('alpha_offset')\n        .uint32('alpha_length')\n        .arrayBuffer('data', { lengthField: 'size' });\n\nexport type AdbFrameBuffer = StructValueType<typeof AdbFrameBuffer>;\n","import { AutoDisposable } from '@yume-chan/event';\nimport { Struct } from '@yume-chan/struct';\nimport { AdbPacket } from '../packet';\nimport { AdbBufferedStream, AdbIncomingStreamEventArgs, AdbPacketDispatcher, AdbStream } from '../stream';\n\nexport interface AdbReverseHandler {\n    onStream(packet: AdbPacket, stream: AdbStream): void;\n}\n\nexport interface AdbForwardListener {\n    deviceSerial: string;\n\n    localName: string;\n\n    remoteName: string;\n}\n\nconst AdbReverseStringResponse =\n    new Struct({ littleEndian: true })\n        .string('length', { length: 4 })\n        .string('content', { lengthField: 'length' });\n\nconst AdbReverseErrorResponse =\n    AdbReverseStringResponse\n        .afterParsed((value) => {\n            throw new Error(value.content);\n        });\n\nexport class AdbReverseCommand extends AutoDisposable {\n    protected localPortToHandler = new Map<number, AdbReverseHandler>();\n\n    protected deviceAddressToLocalPort = new Map<string, number>();\n\n    protected dispatcher: AdbPacketDispatcher;\n\n    protected listening = false;\n\n    public constructor(dispatcher: AdbPacketDispatcher) {\n        super();\n\n        this.dispatcher = dispatcher;\n        this.addDisposable(this.dispatcher.onStream(this.handleStream, this));\n    }\n\n    protected handleStream(e: AdbIncomingStreamEventArgs): void {\n        if (e.handled) {\n            return;\n        }\n\n        const address = this.dispatcher.backend.decodeUtf8(e.packet.payload!);\n        const port = Number.parseInt(address.substring(4));\n        if (this.localPortToHandler.has(port)) {\n            this.localPortToHandler.get(port)!.onStream(e.packet, e.stream);\n            e.handled = true;\n        }\n    }\n\n    public async add(\n        deviceAddress: string,\n        localPort: number,\n        handler: AdbReverseHandler,\n    ): Promise<string> {\n        const stream = await this.dispatcher.createStream(`reverse:forward:${deviceAddress};tcp:${localPort}`);\n        const buffered = new AdbBufferedStream(stream);\n\n        const success = this.dispatcher.backend.decodeUtf8(await buffered.read(4)) === 'OKAY';\n        if (success) {\n            const response = await AdbReverseStringResponse.deserialize(buffered);\n\n            if (deviceAddress === 'tcp:0') {\n                deviceAddress = `tcp:${Number.parseInt(response.content!, 10)}`;\n            }\n\n            this.localPortToHandler.set(localPort, handler);\n            this.deviceAddressToLocalPort.set(deviceAddress, localPort);\n\n            return deviceAddress;\n        } else {\n            return await AdbReverseErrorResponse.deserialize(buffered);\n        }\n    }\n\n    public async list(): Promise<AdbForwardListener[]> {\n        const stream = await this.dispatcher.createStream('reverse:list-forward');\n        const buffered = new AdbBufferedStream(stream);\n\n        const response = await AdbReverseStringResponse.deserialize(buffered);\n\n        return response.content!.split('\\n').map(line => {\n            const [deviceSerial, localName, remoteName] = line.split(' ');\n            return { deviceSerial, localName, remoteName };\n        });\n    }\n\n    public async remove(deviceAddress: string): Promise<void> {\n        const stream = await this.dispatcher.createStream(`reverse:killforward:${deviceAddress}`);\n        const buffered = new AdbBufferedStream(stream);\n\n        const success = this.dispatcher.backend.decodeUtf8(await buffered.read(4)) === 'OKAY';\n        if (success) {\n            if (this.deviceAddressToLocalPort.has(deviceAddress)) {\n                this.localPortToHandler.delete(this.deviceAddressToLocalPort.get(deviceAddress)!);\n                this.deviceAddressToLocalPort.delete(deviceAddress);\n            }\n        } else {\n            await AdbReverseErrorResponse.deserialize(buffered);\n        }\n    }\n\n    public async removeAll(): Promise<void> {\n        const stream = await this.dispatcher.createStream(`reverse:killforward-all`);\n        const buffered = new AdbBufferedStream(stream);\n\n        const success = this.dispatcher.backend.decodeUtf8(await buffered.read(4)) === 'OKAY';\n        if (success) {\n            this.deviceAddressToLocalPort.clear();\n            this.localPortToHandler.clear();\n        } else {\n            await AdbReverseErrorResponse.deserialize(buffered);\n        }\n    }\n}\n","import { Struct } from '@yume-chan/struct';\nimport { AdbBufferedStream } from '../../stream';\n\nexport enum AdbSyncRequestId {\n    List = 'LIST',\n    Send = 'SEND',\n    Lstat = 'STAT',\n    Stat = 'STA2',\n    Lstat2 = 'LST2',\n    Data = 'DATA',\n    Done = 'DONE',\n    Receive = 'RECV',\n}\n\nexport const AdbSyncNumberRequest =\n    new Struct({ littleEndian: true })\n        .string('id', { length: 4 })\n        .uint32('arg');\n\nexport const AdbSyncDataRequest =\n    AdbSyncNumberRequest\n        .arrayBuffer('data', { lengthField: 'arg' });\n\nexport async function adbSyncWriteRequest(\n    stream: AdbBufferedStream,\n    id: AdbSyncRequestId | string,\n    value: number | string | ArrayBuffer\n): Promise<void> {\n    let buffer: ArrayBuffer;\n    if (typeof value === 'number') {\n        buffer = AdbSyncNumberRequest.serialize({\n            id,\n            arg: value,\n        }, stream);\n    } else if (typeof value === 'string') {\n        buffer = AdbSyncDataRequest.serialize({\n            id,\n            data: stream.encodeUtf8(value),\n        }, stream);\n    } else {\n        buffer = AdbSyncDataRequest.serialize({\n            id,\n            data: value,\n        }, stream);\n    }\n    await stream.write(buffer);\n}\n","import { Struct, StructDeserializationContext, StructValueType } from '@yume-chan/struct';\nimport { AdbBufferedStream } from '../../stream';\n\nexport enum AdbSyncResponseId {\n    Entry = 'DENT',\n    Lstat = 'STAT',\n    Stat = 'STA2',\n    Lstat2 = 'LST2',\n    Done = 'DONE',\n    Data = 'DATA',\n    Ok = 'OKAY',\n    Fail = 'FAIL',\n}\n\n// DONE responses' size are always same as the request's normal response.\n// For example DONE responses for LIST requests are 16 bytes (same as DENT responses),\n// but DONE responses for STAT requests are 12 bytes (same as STAT responses)\n// So we need to know responses' size in advance.\nexport class AdbSyncDoneResponse {\n    private length: number;\n\n    public readonly id = AdbSyncResponseId.Done;\n\n    public constructor(length: number) {\n        this.length = length;\n    }\n\n    public async deserialize(context: StructDeserializationContext): Promise<this> {\n        await context.read(this.length);\n        return this;\n    }\n}\n\nexport const AdbSyncFailResponse =\n    new Struct({ littleEndian: true })\n        .uint32('messageLength')\n        .string('message', { lengthField: 'messageLength' })\n        .afterParsed(object => {\n            throw new Error(object.message);\n        });\n\nexport async function adbSyncReadResponse<T extends Record<string, { deserialize(context: StructDeserializationContext): Promise<any>; }>>(\n    stream: AdbBufferedStream,\n    types: T,\n): Promise<StructValueType<T[keyof T]>> {\n    const id = stream.backend.decodeUtf8(await stream.read(4));\n\n    if (id === AdbSyncResponseId.Fail) {\n        await AdbSyncFailResponse.deserialize(stream);\n    }\n\n    if (types[id]) {\n        return types[id].deserialize(stream);\n    }\n\n    throw new Error('Unexpected response id');\n}\n","import { placeholder, Struct, StructValueType } from '@yume-chan/struct';\nimport { AdbBufferedStream } from '../../stream';\nimport { AdbSyncRequestId, adbSyncWriteRequest } from './request';\nimport { adbSyncReadResponse, AdbSyncResponseId } from './response';\n\n// https://github.com/python/cpython/blob/4e581d64b8aff3e2eda99b12f080c877bb78dfca/Lib/stat.py#L36\nexport enum LinuxFileType {\n    Directory = 0o04,\n    File = 0o10,\n    Link = 0o12,\n}\n\nexport const AdbSyncLstatResponse =\n    new Struct({ littleEndian: true })\n        .int32('mode')\n        .int32('size')\n        .int32('mtime')\n        .extra({\n            id: AdbSyncResponseId.Lstat as const,\n            get type() { return this.mode >> 12 as LinuxFileType; },\n            get permission() { return this.mode & 0b00001111_11111111; },\n        })\n        .afterParsed((object) => {\n            if (object.mode === 0 &&\n                object.size === 0 &&\n                object.mtime === 0\n            ) {\n                throw new Error('lstat failed');\n            }\n        });\n\nexport type AdbSyncLstatResponse = StructValueType<typeof AdbSyncLstatResponse>;\n\nexport enum AdbSyncStatErrorCode {\n    EACCES = 13,\n    EEXIST = 17,\n    EFAULT = 14,\n    EFBIG = 27,\n    EINTR = 4,\n    EINVAL = 22,\n    EIO = 5,\n    EISDIR = 21,\n    ELOOP = 40,\n    EMFILE = 24,\n    ENAMETOOLONG = 36,\n    ENFILE = 23,\n    ENOENT = 2,\n    ENOMEM = 12,\n    ENOSPC = 28,\n    ENOTDIR = 20,\n    EOVERFLOW = 75,\n    EPERM = 1,\n    EROFS = 30,\n    ETXTBSY = 26,\n}\n\nexport const AdbSyncStatResponse =\n    new Struct({ littleEndian: true })\n        .uint32('error', undefined, placeholder<AdbSyncStatErrorCode>())\n        .uint64('dev')\n        .uint64('ino')\n        .uint32('mode')\n        .uint32('nlink')\n        .uint32('uid')\n        .uint32('gid')\n        .uint64('size')\n        .uint64('atime')\n        .uint64('mtime')\n        .uint64('ctime')\n        .extra({\n            id: AdbSyncResponseId.Stat as const,\n            get type() { return this.mode >> 12 as LinuxFileType; },\n            get permission() { return this.mode & 0b00001111_11111111; },\n        })\n        .afterParsed((object) => {\n            if (object.error) {\n                throw new Error(AdbSyncStatErrorCode[object.error]);\n            }\n        });\n\nexport type AdbSyncStatResponse = StructValueType<typeof AdbSyncStatResponse>;\n\nconst StatResponseType = {\n    [AdbSyncResponseId.Stat]: AdbSyncStatResponse,\n};\n\nconst LstatResponseType = {\n    [AdbSyncResponseId.Lstat]: AdbSyncLstatResponse,\n};\n\nconst Lstat2ResponseType = {\n    [AdbSyncResponseId.Lstat2]: AdbSyncStatResponse,\n};\n\nexport async function adbSyncLstat(\n    stream: AdbBufferedStream,\n    path: string,\n    v2: boolean,\n): Promise<AdbSyncLstatResponse | AdbSyncStatResponse> {\n    let requestId: AdbSyncRequestId.Lstat | AdbSyncRequestId.Lstat2;\n    let responseType: typeof LstatResponseType | typeof Lstat2ResponseType;\n\n    if (v2) {\n        requestId = AdbSyncRequestId.Lstat2;\n        responseType = Lstat2ResponseType;\n    } else {\n        requestId = AdbSyncRequestId.Lstat;\n        responseType = LstatResponseType;\n    }\n\n    await adbSyncWriteRequest(stream, requestId, path);\n    return adbSyncReadResponse(stream, responseType);\n}\n\nexport async function adbSyncStat(\n    stream: AdbBufferedStream,\n    path: string,\n): Promise<AdbSyncStatResponse> {\n    await adbSyncWriteRequest(stream, AdbSyncRequestId.Stat, path);\n    return adbSyncReadResponse(stream, StatResponseType);\n}\n","import { StructValueType } from '@yume-chan/struct';\nimport { AdbBufferedStream } from '../../stream';\nimport { AdbSyncRequestId, adbSyncWriteRequest } from './request';\nimport { AdbSyncDoneResponse, adbSyncReadResponse, AdbSyncResponseId } from './response';\nimport { AdbSyncLstatResponse } from './stat';\n\nexport const AdbSyncEntryResponse =\n    AdbSyncLstatResponse\n        .afterParsed()\n        .uint32('nameLength')\n        .string('name', { lengthField: 'nameLength' })\n        .extra({ id: AdbSyncResponseId.Entry as const });\n\nexport type AdbSyncEntryResponse = StructValueType<typeof AdbSyncEntryResponse>;\n\nconst ResponseTypes = {\n    [AdbSyncResponseId.Entry]: AdbSyncEntryResponse,\n    [AdbSyncResponseId.Done]: new AdbSyncDoneResponse(AdbSyncEntryResponse.size),\n};\n\nexport async function* adbSyncOpenDir(\n    stream: AdbBufferedStream,\n    path: string\n): AsyncGenerator<AdbSyncEntryResponse, void, void> {\n    await adbSyncWriteRequest(stream, AdbSyncRequestId.List, path);\n\n    while (true) {\n        const response = await adbSyncReadResponse(stream, ResponseTypes);\n        switch (response.id) {\n            case AdbSyncResponseId.Entry:\n                yield response;\n                break;\n            case AdbSyncResponseId.Done:\n                return;\n            default:\n                throw new Error('Unexpected response id');\n        }\n    }\n}\n","import { Struct } from '@yume-chan/struct';\nimport { AdbBufferedStream } from '../../stream';\nimport { AdbSyncRequestId, adbSyncWriteRequest } from './request';\nimport { AdbSyncDoneResponse, adbSyncReadResponse, AdbSyncResponseId } from './response';\n\nexport const AdbSyncDataResponse =\n    new Struct({ littleEndian: true })\n        .uint32('dataLength')\n        .arrayBuffer('data', { lengthField: 'dataLength' })\n        .extra({ id: AdbSyncResponseId.Data as const });\n\nconst ResponseTypes = {\n    [AdbSyncResponseId.Data]: AdbSyncDataResponse,\n    [AdbSyncResponseId.Done]: new AdbSyncDoneResponse(AdbSyncDataResponse.size),\n};\n\nexport async function* adbSyncPull(\n    stream: AdbBufferedStream,\n    path: string,\n): AsyncGenerator<ArrayBuffer, void, void> {\n    await adbSyncWriteRequest(stream, AdbSyncRequestId.Receive, path);\n    while (true) {\n        const response = await adbSyncReadResponse(stream, ResponseTypes);\n        switch (response.id) {\n            case AdbSyncResponseId.Data:\n                yield response.data!;\n                break;\n            case AdbSyncResponseId.Done:\n                return;\n            default:\n                throw new Error('Unexpected response id');\n        }\n    }\n}\n","import { Struct } from '@yume-chan/struct';\nimport { AdbBufferedStream } from '../../stream';\nimport { AdbSyncRequestId, adbSyncWriteRequest } from './request';\nimport { adbSyncReadResponse, AdbSyncResponseId } from './response';\nimport { LinuxFileType } from './stat';\n\nexport const AdbSyncOkResponse =\n    new Struct({ littleEndian: true })\n        .uint32('unused');\n\nconst ResponseTypes = {\n    [AdbSyncResponseId.Ok]: AdbSyncOkResponse,\n};\n\nexport function* chunkArrayLike(\n    value: ArrayLike<number> | ArrayBufferLike,\n    size: number\n): Generator<ArrayBuffer, void, void> {\n    if ('length' in value) {\n        value = new Uint8Array(value).buffer;\n    }\n\n    if (value.byteLength <= size) {\n        return yield value;\n    }\n\n    for (let i = 0; i < value.byteLength; i += size) {\n        yield value.slice(i, i + size);\n    }\n}\n\nexport async function* chunkAsyncIterable(\n    value: AsyncIterable<ArrayBuffer>,\n    size: number\n): AsyncGenerator<ArrayBuffer, void, void> {\n    let result = new Uint8Array(size);\n    let index = 0;\n    for await (let buffer of value) {\n        // `result` has some data, `result + buffer` is enough\n        if (index !== 0 && index + buffer.byteLength >= size) {\n            const remainder = size - index;\n            result.set(new Uint8Array(buffer, 0, remainder), index);\n            yield result.buffer;\n\n            result = new Uint8Array(size);\n            index = 0;\n\n            if (buffer.byteLength > remainder) {\n                // `buffer` still has some data\n                buffer = buffer.slice(remainder);\n            } else {\n                continue;\n            }\n        }\n\n        // `result` is empty, `buffer` alone is enough\n        if (buffer.byteLength >= size) {\n            let remainder = false;\n            for (const chunk of chunkArrayLike(buffer, size)) {\n                if (chunk.byteLength === size) {\n                    yield chunk;\n                    continue;\n                }\n\n                // `buffer` still has some data\n                remainder = true;\n                buffer = chunk;\n            }\n\n            if (!remainder) {\n                continue;\n            }\n        }\n\n        // `result` has some data but `result + buffer` is still not enough\n        // or after previous steps `buffer` still has some data\n        result.set(new Uint8Array(buffer), index);\n        index += buffer.byteLength;\n    }\n\n    if (index !== 0) {\n        yield result.buffer.slice(0, index);\n    }\n}\n\nexport const AdbSyncMaxPacketSize = 64 * 1024;\n\nexport async function adbSyncPush(\n    stream: AdbBufferedStream,\n    path: string,\n    file: ArrayLike<number> | ArrayBufferLike | AsyncIterable<ArrayBuffer>,\n    mode: number = (LinuxFileType.File << 12) | 0o666,\n    mtime: number = (Date.now() / 1000) | 0,\n    packetSize: number = AdbSyncMaxPacketSize,\n    onProgress?: (uploaded: number) => void,\n): Promise<void> {\n    const pathAndMode = `${path},${mode.toString()}`;\n    await adbSyncWriteRequest(stream, AdbSyncRequestId.Send, pathAndMode);\n\n    let chunkReader: Iterable<ArrayBuffer> | AsyncIterable<ArrayBuffer>;\n    if ('length' in file || 'byteLength' in file) {\n        chunkReader = chunkArrayLike(file, packetSize);\n    } else {\n        chunkReader = chunkAsyncIterable(file, packetSize);\n    }\n\n    let uploaded = 0;\n    for await (const buffer of chunkReader) {\n        await adbSyncWriteRequest(stream, AdbSyncRequestId.Data, buffer);\n        uploaded += buffer.byteLength;\n        onProgress?.(uploaded);\n    }\n\n    await adbSyncWriteRequest(stream, AdbSyncRequestId.Done, mtime);\n    await adbSyncReadResponse(stream, ResponseTypes);\n}\n","export enum AdbFeatures {\n    StatV2 = 'stat_v2',\n}\n","import { PromiseResolver } from '@yume-chan/async-operation-manager';\nimport { DisposableList } from '@yume-chan/event';\nimport { AdbAuthenticationHandler, AdbDefaultAuthenticators } from './auth';\nimport { AdbBackend } from './backend';\nimport { AdbFrameBuffer, AdbReverseCommand, AdbSync, AdbTcpIpCommand } from './commands';\nimport { AdbFeatures } from './features';\nimport { AdbCommand } from './packet';\nimport { AdbBufferedStream, AdbPacketDispatcher, AdbStream } from './stream';\n\nexport enum AdbPropKey {\n    Product = 'ro.product.name',\n    Model = 'ro.product.model',\n    Device = 'ro.product.device',\n    Features = 'features',\n}\n\nexport class Adb {\n    private packetDispatcher: AdbPacketDispatcher;\n\n    private backend: AdbBackend;\n    public get onDisconnected() { return this.backend.onDisconnected; }\n\n    private _connected = false;\n    public get connected() { return this._connected; }\n\n    public get name() { return this.backend.name; }\n\n    private _product: string | undefined;\n    public get product() { return this._product; }\n\n    private _model: string | undefined;\n    public get model() { return this._model; }\n\n    private _device: string | undefined;\n    public get device() { return this._device; }\n\n    private _features: AdbFeatures[] | undefined;\n    public get features() { return this._features; }\n\n    public readonly tcpip: AdbTcpIpCommand;\n\n    public readonly reverse: AdbReverseCommand;\n\n    public constructor(backend: AdbBackend) {\n        this.backend = backend;\n\n        this.packetDispatcher = new AdbPacketDispatcher(backend);\n\n        this.tcpip = new AdbTcpIpCommand(this);\n        this.reverse = new AdbReverseCommand(this.packetDispatcher);\n\n        backend.onDisconnected(this.dispose, this);\n    }\n\n    public async connect(authenticators = AdbDefaultAuthenticators) {\n        await this.backend.connect?.();\n        this.packetDispatcher.start();\n\n        const version = 0x01000001;\n\n        const features = [\n            'shell_v2', // 9\n            'cmd', // 7\n            AdbFeatures.StatV2, // 5\n            'ls_v2',\n            'fixed_push_mkdir', // 4\n            'apex', // 2\n            'abb', // 8\n            'fixed_push_symlink_timestamp', // 1\n            'abb_exec', // 6\n            'remount_shell', // 3\n            'track_app',\n            'sendrecv_v2',\n            'sendrecv_v2_brotli',\n            'sendrecv_v2_lz4',\n            'sendrecv_v2_zstd',\n            'sendrecv_v2_dry_run_send',\n        ].join(',');\n\n        const resolver = new PromiseResolver<void>();\n        const authHandler = new AdbAuthenticationHandler(authenticators, this.backend);\n        const disposableList = new DisposableList();\n        disposableList.add(this.packetDispatcher.onPacket(async (e) => {\n            e.handled = true;\n\n            const { packet } = e;\n            try {\n                switch (packet.command) {\n                    case AdbCommand.Connect:\n                        if (packet.arg0 !== version) {\n                            throw new Error('Version mismatch');\n                        }\n\n                        this.parseBanner(this.backend.decodeUtf8(packet.payload!));\n                        resolver.resolve();\n                        break;\n                    case AdbCommand.Auth:\n                        const authPacket = await authHandler.next(e.packet);\n                        await this.packetDispatcher.sendPacket(authPacket);\n                        break;\n                    case AdbCommand.Close:\n                        // Last connection was interrupted\n                        // Ignore this packet, device will recover\n                        break;\n                    default:\n                        throw new Error('Device not in correct state. Reconnect your device and try again');\n                }\n            } catch (e) {\n                resolver.reject(e);\n            }\n        }));\n\n        disposableList.add(this.packetDispatcher.onError(e => {\n            resolver.reject(e);\n        }));\n\n        await this.packetDispatcher.sendPacket(\n            AdbCommand.Connect,\n            version,\n            0x100000,\n            `host::features=${features}`\n        );\n\n        try {\n            await resolver.promise;\n            this._connected = true;\n        } finally {\n            disposableList.dispose();\n        }\n    }\n\n    private parseBanner(banner: string) {\n        const pieces = banner.split('::');\n        if (pieces.length > 1) {\n            const props = pieces[1];\n            for (const prop of props.split(';')) {\n                if (!prop) {\n                    continue;\n                }\n\n                const keyValue = prop.split('=');\n                if (keyValue.length !== 2) {\n                    continue;\n                }\n\n                const [key, value] = keyValue;\n                switch (key) {\n                    case AdbPropKey.Product:\n                        this._product = value;\n                        break;\n                    case AdbPropKey.Model:\n                        this._model = value;\n                        break;\n                    case AdbPropKey.Device:\n                        this._device = value;\n                        break;\n                    case AdbPropKey.Features:\n                        this._features = value.split(',') as AdbFeatures[];\n                        break;\n                }\n            }\n        }\n    }\n\n    public shell(): Promise<AdbStream> {\n        return this.createStream('shell:');\n    }\n\n    public spawn(command: string, ...args: string[]): Promise<AdbStream> {\n        // TODO: use shell protocol\n        return this.createStream(`shell:${command} ${args.join(' ')}`);\n    }\n\n    public exec(command: string, ...args: string[]): Promise<string> {\n        // TODO: use shell protocol\n        return this.createStreamAndReadAll(`shell:${command} ${args.join(' ')}`);\n    }\n\n    public async getProp(key: string): Promise<string> {\n        const output = await this.exec('getprop', key);\n        return output.trim();\n    }\n\n    public async sync(): Promise<AdbSync> {\n        const stream = await this.createStream('sync:');\n        return new AdbSync(this, stream);\n    }\n\n    public async framebuffer(): Promise<AdbFrameBuffer> {\n        const stream = await this.createStream('framebuffer:');\n        const buffered = new AdbBufferedStream(stream);\n        return AdbFrameBuffer.deserialize(buffered);\n    }\n\n    public async createStream(service: string): Promise<AdbStream> {\n        return this.packetDispatcher.createStream(service);\n    }\n\n    public async createStreamAndReadAll(service: string): Promise<string> {\n        const stream = await this.createStream(service);\n        const resolver = new PromiseResolver<string>();\n        let result = '';\n        stream.onData(buffer => {\n            result += this.backend.decodeUtf8(buffer);\n        });\n        stream.onClose(() => resolver.resolve(result));\n        return resolver.promise;\n    }\n\n    public async dispose() {\n        this.packetDispatcher.dispose();\n        await this.backend.dispose();\n    }\n}\n","import { AutoDisposable } from '@yume-chan/event';\nimport { Adb } from '../../adb';\nimport { AdbFeatures } from '../../features';\nimport { AdbBufferedStream, AdbStream } from '../../stream';\nimport { AutoResetEvent } from '../../utils';\nimport { AdbSyncEntryResponse, adbSyncOpenDir } from './list';\nimport { adbSyncPull } from './pull';\nimport { adbSyncPush } from './push';\nimport { adbSyncLstat, adbSyncStat } from './stat';\n\nexport class AdbSync extends AutoDisposable {\n    protected adb: Adb;\n\n    protected stream: AdbBufferedStream;\n\n    protected sendLock = this.addDisposable(new AutoResetEvent());\n\n    public get supportStat(): boolean {\n        return this.adb.features!.includes(AdbFeatures.StatV2);\n    }\n\n    public constructor(adb: Adb, stream: AdbStream) {\n        super();\n\n        this.adb = adb;\n        this.stream = new AdbBufferedStream(stream);\n    }\n\n    public async lstat(path: string) {\n        await this.sendLock.wait();\n\n        try {\n            return adbSyncLstat(this.stream, path, this.supportStat);\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async stat(path: string) {\n        if (!this.supportStat) {\n            throw new Error('Not supported');\n        }\n\n        await this.sendLock.wait();\n\n        try {\n            return adbSyncStat(this.stream, path);\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async isDirectory(path: string): Promise<boolean> {\n        try {\n            await this.stat(path + '/');\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    public async *opendir(\n        path: string\n    ): AsyncGenerator<AdbSyncEntryResponse, void, void> {\n        await this.sendLock.wait();\n\n        try {\n            yield* adbSyncOpenDir(this.stream, path);\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async readdir(path: string) {\n        const results: AdbSyncEntryResponse[] = [];\n        for await (const entry of this.opendir(path)) {\n            results.push(entry);\n        }\n        return results;\n    }\n\n    public async *read(path: string): AsyncGenerator<ArrayBuffer, void, void> {\n        await this.sendLock.wait();\n\n        try {\n            yield* adbSyncPull(this.stream, path);\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public async write(\n        path: string,\n        file: ArrayLike<number> | ArrayBufferLike | AsyncIterable<ArrayBuffer>,\n        mode?: number,\n        mtime?: number,\n        onProgress?: (uploaded: number) => void,\n    ): Promise<void> {\n        await this.sendLock.wait();\n\n        try {\n            await adbSyncPush(this.stream, path, file, mode, mtime, undefined, onProgress);\n        } finally {\n            this.sendLock.notify();\n        }\n    }\n\n    public dispose() {\n        super.dispose();\n        this.stream.close();\n    }\n}\n","import { AdbCommandBase } from './base';\n\nexport class AdbTcpIpCommand extends AdbCommandBase {\n    public async getAddresses(): Promise<string[]> {\n        const propAddr = await this.adb.getProp('service.adb.listen_addrs');\n        if (propAddr) {\n            return propAddr.split(',');\n        }\n\n        let port = await this.adb.getProp('service.adb.tcp.port');\n        if (port) {\n            return [`0.0.0.0:${port}`];\n        }\n\n        port = await this.adb.getProp('persist.adb.tcp.port');\n        if (port) {\n            return [`0.0.0.0:${port}`];\n        }\n\n        return [];\n    }\n\n    public async setPort(port: number): Promise<void> {\n        if (port <= 0) {\n            throw new Error(`Invalid port ${port}`);\n        }\n\n        const output = await this.adb.createStreamAndReadAll(`tcpip:${port}`);\n        if (output !== `restarting in TCP mode port: ${port}\\n`) {\n            throw new Error('Invalid response');\n        }\n    }\n\n    public async disable(): Promise<void> {\n        const output = await this.adb.createStreamAndReadAll('usb:');\n        if (output !== 'restarting in USB mode\\n') {\n            throw new Error('Invalid response');\n        }\n    }\n}\n","export class AdbWebBackendWatcher {\n    private callback: () => void;\n\n    public constructor(callback: () => void) {\n        this.callback = callback;\n\n        window.navigator.usb.addEventListener('connect', callback);\n        window.navigator.usb.addEventListener('disconnect', callback);\n    }\n\n    public dispose(): void {\n        window.navigator.usb.removeEventListener('connect', this.callback);\n        window.navigator.usb.removeEventListener('disconnect', this.callback);\n    }\n}\n","import { AdbBackend, decodeBase64, encodeBase64 } from '@yume-chan/adb';\nimport { EventEmitter } from '@yume-chan/event';\n\nexport * from './watcher';\n\nexport const WebUsbDeviceFilter: USBDeviceFilter = {\n    classCode: 0xFF,\n    subclassCode: 0x42,\n    protocolCode: 1,\n};\n\nconst PrivateKeyStorageKey = 'private-key';\n\nconst Utf8Encoder = new TextEncoder();\nconst Utf8Decoder = new TextDecoder();\n\nexport function encodeUtf8(input: string): ArrayBuffer {\n    return Utf8Encoder.encode(input);\n}\n\nexport function decodeUtf8(buffer: ArrayBuffer): string {\n    return Utf8Decoder.decode(buffer);\n}\n\nexport default class AdbWebBackend implements AdbBackend {\n    public static async getDevices(): Promise<AdbWebBackend[]> {\n        const devices = await window.navigator.usb.getDevices();\n        return devices.map(device => new AdbWebBackend(device));\n    }\n\n    public static async requestDevice(): Promise<AdbWebBackend | undefined> {\n        try {\n            const device = await navigator.usb.requestDevice({ filters: [WebUsbDeviceFilter] });\n            return new AdbWebBackend(device);\n        } catch (e) {\n            switch (e.name) {\n                case 'NotFoundError':\n                    return undefined;\n                default:\n                    throw e;\n            }\n        }\n    }\n\n    private _device: USBDevice;\n\n    public get serial(): string { return this._device.serialNumber!; }\n\n    public get name(): string { return this._device.productName!; }\n\n    private readonly disconnectEvent = new EventEmitter<void>();\n    public readonly onDisconnected = this.disconnectEvent.event;\n\n    private _inEndpointNumber!: number;\n    private _outEndpointNumber!: number;\n\n    public constructor(device: USBDevice) {\n        this._device = device;\n        window.navigator.usb.addEventListener('disconnect', this.handleDisconnect);\n    }\n\n    private handleDisconnect = (e: USBConnectionEvent) => {\n        if (e.device === this._device) {\n            this.disconnectEvent.fire();\n        }\n    };\n\n    public async connect(): Promise<void> {\n        if (!this._device.opened) {\n            await this._device.open();\n        }\n\n        for (const configuration of this._device.configurations) {\n            for (const interface_ of configuration.interfaces) {\n                for (const alternate of interface_.alternates) {\n                    if (alternate.interfaceSubclass === WebUsbDeviceFilter.subclassCode &&\n                        alternate.interfaceClass === WebUsbDeviceFilter.classCode &&\n                        alternate.interfaceSubclass === WebUsbDeviceFilter.subclassCode) {\n                        if (this._device.configuration?.configurationValue !== configuration.configurationValue) {\n                            await this._device.selectConfiguration(configuration.configurationValue);\n                        }\n\n                        if (!interface_.claimed) {\n                            await this._device.claimInterface(interface_.interfaceNumber);\n                        }\n\n                        if (interface_.alternate.alternateSetting !== alternate.alternateSetting) {\n                            await this._device.selectAlternateInterface(interface_.interfaceNumber, alternate.alternateSetting);\n                        }\n\n                        for (const endpoint of alternate.endpoints) {\n                            switch (endpoint.direction) {\n                                case 'in':\n                                    this._inEndpointNumber = endpoint.endpointNumber;\n                                    if (this._outEndpointNumber !== undefined) {\n                                        return;\n                                    }\n                                    break;\n                                case 'out':\n                                    this._outEndpointNumber = endpoint.endpointNumber;\n                                    if (this._inEndpointNumber !== undefined) {\n                                        return;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        throw new Error('Unknown error');\n    }\n\n    public *iterateKeys(): Generator<ArrayBuffer, void, void> {\n        const privateKey = window.localStorage.getItem(PrivateKeyStorageKey);\n        if (privateKey) {\n            yield decodeBase64(privateKey);\n        }\n    }\n\n    public async generateKey(): Promise<ArrayBuffer> {\n        const { privateKey: cryptoKey } = await crypto.subtle.generateKey(\n            {\n                name: 'RSASSA-PKCS1-v1_5',\n                modulusLength: 2048,\n                // 65537\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                hash: 'SHA-1',\n            },\n            true,\n            ['sign', 'verify']\n        );\n\n        const privateKey = await crypto.subtle.exportKey('pkcs8', cryptoKey);\n        window.localStorage.setItem(PrivateKeyStorageKey, decodeUtf8(encodeBase64(privateKey)));\n        return privateKey;\n    }\n\n    public encodeUtf8(input: string): ArrayBuffer {\n        return encodeUtf8(input);\n    }\n\n    public decodeUtf8(buffer: ArrayBuffer): string {\n        return decodeUtf8(buffer);\n    }\n\n    public async write(buffer: ArrayBuffer): Promise<void> {\n        await this._device.transferOut(this._outEndpointNumber, buffer);\n    }\n\n    public async read(length: number): Promise<ArrayBuffer> {\n        const result = await this._device.transferIn(this._inEndpointNumber, length);\n\n        if (result.status === 'stall') {\n            await this._device.clearHalt('in', this._inEndpointNumber);\n        }\n\n        const { buffer } = result.data!;\n        return buffer;\n    }\n\n    public async dispose() {\n        window.navigator.usb.removeEventListener('disconnect', this.handleDisconnect);\n        this.disconnectEvent.dispose();\n        await this._device.close();\n    }\n}\n","import { memo, NamedExoticComponent } from 'react';\n\nexport function withDisplayName<P extends object>(\n    name: string,\n    Component: React.FunctionComponent<P>\n): NamedExoticComponent<P> {\n    Component.displayName = name;\n    return memo(Component);\n}\n","import React, { CSSProperties, HTMLAttributes, PropsWithChildren, useCallback, useRef } from 'react';\nimport { withDisplayName } from './with-display-name';\n\nexport interface ResizeObserverProps extends HTMLAttributes<HTMLDivElement>, PropsWithChildren<{}> {\n    onResize: () => void;\n}\n\nconst iframeStyle: CSSProperties = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    visibility: 'hidden',\n};\n\nexport const ResizeObserver = withDisplayName('ResizeObserver', ({\n    onResize,\n    style,\n    children,\n    ...rest\n}: ResizeObserverProps): JSX.Element | null => {\n    const onResizeRef = useRef<() => void>(onResize);\n    onResizeRef.current = onResize;\n\n    const handleResize = useCallback(() => {\n        onResizeRef.current();\n    }, []);\n\n    const handleIframeRef = useCallback((element: HTMLIFrameElement | null) => {\n        if (element) {\n            element.contentWindow!.addEventListener('resize', handleResize);\n        }\n    }, []);\n\n    const containerStyle: CSSProperties = React.useMemo(() => {\n        if (!style) {\n            return { position: 'relative' };\n        }\n\n        if (!style.position) {\n            return { ...style, position: 'relative' };\n        }\n\n        return style;\n    }, [style]);\n\n    return (\n        <div style={containerStyle} {...rest}>\n            <iframe ref={handleIframeRef} style={iframeStyle} />\n            {children}\n        </div>\n    );\n});\n","import { Dialog, DialogFooter, DialogType, PrimaryButton } from '@fluentui/react';\nimport { useBoolean } from '@uifabric/react-hooks';\nimport React, { PropsWithChildren, useMemo, useState } from 'react';\nimport { withDisplayName } from './utils';\n\nexport interface ErrorDialogContext {\n    show(message: string): void;\n}\n\nexport const ErrorDialogContext = React.createContext<ErrorDialogContext>({\n    show() { }\n});\n\nexport default withDisplayName('ErrorDialogProvider', (props: PropsWithChildren<{}>) => {\n    const [errorDialogVisible, { setTrue: showErrorDialog, setFalse: hideErrorDialog }] = useBoolean(false);\n    const [errorMessage, setErrorMessage] = useState<string | undefined>();\n\n    const context = useMemo((): ErrorDialogContext => ({\n        show(message) {\n            setErrorMessage(message);\n            showErrorDialog();\n        }\n    }), []);\n\n    return (\n        <ErrorDialogContext.Provider value={context}>\n            {props.children}\n\n            <Dialog\n                hidden={!errorDialogVisible}\n                dialogContentProps={{\n                    type: DialogType.normal,\n                    title: 'Error',\n                    subText: errorMessage,\n                }}\n            >\n                <DialogFooter>\n                    <PrimaryButton text=\"OK\" onClick={hideErrorDialog} />\n                </DialogFooter>\n            </Dialog>\n        </ErrorDialogContext.Provider>\n    );\n});\n","import { DefaultButton, Dialog, Dropdown, IDropdownOption, PrimaryButton, ProgressIndicator, Stack, StackItem, TooltipHost } from '@fluentui/react';\nimport { Adb, AdbBackend } from '@yume-chan/adb';\nimport AdbWebBackend, { AdbWebBackendWatcher } from '@yume-chan/adb-backend-web';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { ErrorDialogContext } from './error-dialog';\nimport { withDisplayName } from './utils';\n\nconst DropdownStyles = { dropdown: { width: 250 - 8 } };\n\ninterface ConnectProps {\n    device: Adb | undefined;\n\n    onDeviceChange: (device: Adb | undefined) => void;\n}\n\nexport default withDisplayName('Connect', ({\n    device,\n    onDeviceChange,\n}: ConnectProps): JSX.Element | null => {\n    const { show: showErrorDialog } = useContext(ErrorDialogContext);\n\n    const [backendOptions, setBackendOptions] = useState<IDropdownOption[]>([]);\n    const [selectedBackend, setSelectedBackend] = useState<AdbBackend | undefined>();\n    useEffect(() => {\n        async function refresh() {\n            const backendList = await AdbWebBackend.getDevices();\n\n            const options = backendList.map(item => ({\n                key: item.serial,\n                text: `${item.serial} ${item.name ? `(${item.name})` : ''}`,\n                data: item,\n            }));\n            setBackendOptions(options);\n\n            setSelectedBackend(old => {\n                if (old && backendList.some(item => item.serial === old.serial)) {\n                    return old;\n                }\n                return backendList[0];\n            });\n        };\n\n        refresh();\n\n        const watcher = new AdbWebBackendWatcher(refresh);\n        return () => watcher.dispose();\n    }, []);\n\n    const handleSelectedBackendChange = (\n        _e: React.FormEvent<HTMLDivElement>,\n        option?: IDropdownOption,\n    ) => {\n        setSelectedBackend(option?.data as AdbBackend);\n    };\n\n    const requestAccess = useCallback(async () => {\n        const backend = await AdbWebBackend.requestDevice();\n        if (backend) {\n            setBackendOptions(list => {\n                for (const item of list) {\n                    if (item.key === backend.serial) {\n                        setSelectedBackend(item.data);\n                        return list;\n                    }\n                }\n\n                setSelectedBackend(backend);\n                return [...list, {\n                    key: backend.serial,\n                    text: `${backend.serial} ${backend.name ? `(${backend.name})` : ''}`,\n                    data: backend,\n                }];\n            });\n        }\n    }, []);\n\n    const [connecting, setConnecting] = useState(false);\n    const connect = useCallback(async () => {\n        try {\n            if (selectedBackend) {\n                const device = new Adb(selectedBackend);\n                try {\n                    setConnecting(true);\n                    await device.connect();\n                    onDeviceChange(device);\n                } catch (e) {\n                    device.dispose();\n                    throw e;\n                }\n            }\n        } catch (e) {\n            showErrorDialog(e.message);\n        } finally {\n            setConnecting(false);\n        }\n    }, [selectedBackend, onDeviceChange]);\n    const disconnect = useCallback(async () => {\n        try {\n            await device!.dispose();\n            onDeviceChange(undefined);\n        } catch (e) {\n            showErrorDialog(e.message);\n        }\n    }, [device]);\n    useEffect(() => {\n        return device?.onDisconnected(() => {\n            onDeviceChange(undefined);\n        });\n    }, [device, onDeviceChange]);\n\n    return (\n        <Stack\n            tokens={{ childrenGap: 8, padding: '0 0 8px 8px' }}\n        >\n            <Dropdown\n                disabled={!!device || backendOptions.length === 0}\n                label=\"Available devices\"\n                placeholder=\"No available devices\"\n                options={backendOptions}\n                styles={DropdownStyles}\n                dropdownWidth={300}\n                selectedKey={selectedBackend?.serial}\n                onChange={handleSelectedBackendChange}\n            />\n\n            {!device ? (\n                <Stack horizontal tokens={{ childrenGap: 8 }}>\n                    <StackItem grow shrink>\n                        <PrimaryButton\n                            text=\"Connect\"\n                            disabled={!selectedBackend}\n                            primary={!!selectedBackend}\n                            styles={{ root: { width: '100%' } }}\n                            onClick={connect}\n                        />\n                    </StackItem>\n                    <StackItem grow shrink>\n                        <TooltipHost\n                            content=\"WebADB can't connect to anything without your explicit permission.\"\n                        >\n                            <DefaultButton\n                                text=\"Add device\"\n                                primary={!selectedBackend}\n                                styles={{ root: { width: '100%' } }}\n                                onClick={requestAccess}\n                            />\n                        </TooltipHost>\n                    </StackItem>\n                </Stack>\n            ) : (\n                    <DefaultButton text=\"Disconnect\" onClick={disconnect} />\n                )}\n\n            <Dialog\n                hidden={!connecting}\n                dialogContentProps={{\n                    title: 'Connecting',\n                    subText: 'Please authorize the connection on your device'\n                }}\n            >\n                <ProgressIndicator />\n            </Dialog>\n        </Stack>\n    );\n});\n","import { AnimationClassNames, concatStyleSets, IStackProps, Stack } from '@fluentui/react';\nimport React, { useMemo, useRef } from 'react';\nimport { match, matchPath, RedirectProps, RouteProps, useLocation, useRouteMatch } from 'react-router-dom';\nimport { withDisplayName } from './utils';\n\nexport const DefaultStackProps: IStackProps = {\n    tokens: { childrenGap: 8, padding: 20 },\n    verticalFill: true,\n};\n\nexport const RouteStackProps: IStackProps = {\n    ...DefaultStackProps,\n    className: AnimationClassNames.slideUpIn10,\n    styles: { root: { overflow: 'auto' } },\n};\n\nexport interface CacheRouteProps extends RouteProps {\n    noCache?: boolean;\n}\n\nexport const CacheRoute = withDisplayName('CacheRoute', (props: CacheRouteProps) => {\n    const match = useRouteMatch(props);\n\n    const everMatched = useRef(!!match);\n    if (!everMatched.current && match) {\n        everMatched.current = true;\n    }\n\n    const stackProps = useMemo((): IStackProps => ({\n        ...RouteStackProps,\n        styles: concatStyleSets(\n            RouteStackProps.styles,\n            { root: { display: match ? 'flex' : 'none' } }\n        ),\n    }), [!!match]);\n\n    if (props.noCache && !match) {\n        return null;\n    }\n\n    if (!everMatched.current) {\n        return null;\n    }\n\n    return (\n        <Stack {...stackProps} >\n            {props.children}\n        </Stack>\n    );\n});\n\nexport interface CacheSwitchProps {\n    children: React.ReactNodeArray;\n}\n\nexport const CacheSwitch = withDisplayName('CacheSwitch', (props: CacheSwitchProps) => {\n    const location = useLocation();\n    let contextMatch = useRouteMatch();\n\n    let element: React.ReactElement | undefined;\n    let computedMatch: match | null | undefined;\n    let cached: React.ReactElement[] = [];\n    React.Children.forEach(props.children, child => {\n        if (React.isValidElement<RouteProps & RedirectProps>(child)) {\n            // Always render all cached routes\n            const isCacheRoute = child.type === CacheRoute;\n            if (isCacheRoute) {\n                cached.push(child);\n            }\n\n            // If we already found the matched route,\n            // Don't care about others\n            if (computedMatch) {\n                return;\n            }\n\n            const path = child.props.path ?? child.props.from;\n            const match = path\n                ? matchPath(location.pathname, { ...child.props, path })\n                : contextMatch;\n\n            if (match) {\n                computedMatch = match;\n\n                if (isCacheRoute) {\n                    // Don't render a CacheRoute twice\n                    element = undefined;\n                } else {\n                    element = child;\n                }\n            }\n        }\n    });\n\n    return (\n        <>\n            {cached}\n            {element ? React.cloneElement(element, { location, computedMatch }) : null}\n        </>\n    );\n});\n","import { Breadcrumb, CommandBar, concatStyleSets, ContextualMenu, ContextualMenuItem, DetailsListLayoutMode, Dialog, DirectionalHint, IBreadcrumbItem, IColumn, Icon, IContextualMenuItem, IDetailsHeaderProps, IDetailsList, IRenderFunction, Layer, MarqueeSelection, mergeStyleSets, Overlay, ProgressIndicator, Selection, ShimmeredDetailsList, StackItem } from '@fluentui/react';\nimport { FileIconType, getFileTypeIconProps, initializeFileTypeIcons } from '@uifabric/file-type-icons';\nimport { useConst } from '@uifabric/react-hooks';\nimport { AdbSyncEntryResponse, AdbSyncMaxPacketSize, LinuxFileType } from '@yume-chan/adb';\nimport path from 'path';\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport StreamSaver from 'streamsaver';\nimport { ErrorDialogContext } from '../error-dialog';\nimport { withDisplayName } from '../utils';\nimport { RouteProps } from './type';\n\ninitializeFileTypeIcons();\nStreamSaver.mitm = 'streamsaver/mitm.html';\n\ninterface ListItem extends AdbSyncEntryResponse {\n    key: string;\n}\n\nfunction toListItem(item: AdbSyncEntryResponse): ListItem {\n    return { ...item, key: item.name! };\n}\n\nconst classNames = mergeStyleSets({\n    name: {\n        cursor: 'pointer',\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    },\n});\n\nconst units = [' B', ' KB', ' MB', ' GB'];\nfunction formatSize(value: number): string {\n    let index = 0;\n    while (index < units.length && value > 1024) {\n        index += 1;\n        value /= 1024;\n    }\n    return value.toLocaleString(undefined, { maximumFractionDigits: 2 }) + units[index];\n}\n\nfunction extensionName(fileName: string): string {\n    const index = fileName.lastIndexOf('.');\n    if (index === -1) {\n        return '';\n    } else {\n        return fileName.slice(index);\n    }\n}\n\nconst renderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (props?, defaultRender?) => {\n    if (!props || !defaultRender) {\n        return null;\n    }\n\n    return defaultRender({\n        ...props,\n        styles: concatStyleSets(props.styles, { root: { paddingTop: 0 } })\n    });\n};\n\nfunction delay(time: number): Promise<void> {\n    return new Promise(resolve => {\n        setTimeout(resolve, time);\n    });\n}\n\nfunction createReadableStreamFromBufferIterator(\n    iterator: AsyncIterator<ArrayBuffer>\n): ReadableStream<Uint8Array> {\n    return new ReadableStream<Uint8Array>({\n        async pull(controller) {\n            const { desiredSize } = controller;\n            if (!desiredSize || desiredSize < 0) {\n                return;\n            }\n\n            let written = 0;\n            while (written < desiredSize) {\n                const result = await iterator.next();\n                if (result.done) {\n                    controller.close();\n                    return;\n                }\n\n                controller.enqueue(new Uint8Array(result.value));\n                written += result.value.byteLength;\n            }\n        },\n    });\n}\n\nasync function* chunkFile(file: File): AsyncGenerator<ArrayBuffer, void, void> {\n    for (let i = 0; i < file.size; i += AdbSyncMaxPacketSize) {\n        yield file.slice(i, i + AdbSyncMaxPacketSize, file.type).arrayBuffer();\n    }\n}\n\nexport const FileManager = withDisplayName('FileManager', ({\n    device,\n}: RouteProps): JSX.Element | null => {\n    const { show: showErrorDialog } = useContext(ErrorDialogContext);\n\n    const [currentPath, setCurrentPath] = useState('/');\n    const currentPathRef = useRef(currentPath);\n    currentPathRef.current = currentPath;\n\n    const breadcrumbItems = useMemo((): IBreadcrumbItem[] => {\n        let part = '';\n        const list: IBreadcrumbItem[] = currentPath.split('/').filter(Boolean).map(segment => {\n            part += '/' + segment;\n            return {\n                key: part,\n                text: segment,\n                onClick: (_e, item) => {\n                    if (!item) {\n                        return;\n                    }\n                    setCurrentPath(item.key);\n                },\n            };\n        });\n        list.unshift({\n            key: '/',\n            text: 'Device',\n            onClick: () => setCurrentPath('/'),\n        });\n        list[list.length - 1].isCurrentItem = true;\n        list[list.length - 1].onClick = undefined;\n        return list;\n    }, [currentPath]);\n\n    const [items, setItems] = useState<ListItem[]>([]);\n    const [loading, setLoading] = useState(false);\n    const listRef = useRef<IDetailsList | null>(null);\n    const load = useCallback(async () => {\n        setItems([]);\n\n        if (!device) {\n            setCurrentPath('/');\n            return;\n        }\n\n        setLoading(true);\n        const sync = await device.sync();\n\n        const items: ListItem[] = [];\n        const linkItems: AdbSyncEntryResponse[] = [];\n        const intervalId = setInterval(() => {\n            setItems(items.slice());\n        }, 1000);\n\n        try {\n            let lastBreak = Date.now();\n\n            for await (const entry of sync.opendir(currentPath)) {\n                if (currentPath !== currentPathRef.current) {\n                    break;\n                }\n\n                if (entry.name === '.' || entry.name === '..') {\n                    continue;\n                }\n\n                if (entry.type === LinuxFileType.Link) {\n                    linkItems.push(entry);\n                } else {\n                    items.push(toListItem(entry));\n                }\n\n                const now = Date.now();\n                if (now - lastBreak > 16) {\n                    await delay(0);\n                    lastBreak = now;\n                }\n            }\n\n            for (const entry of linkItems) {\n                if (!await sync.isDirectory(path.resolve(currentPath, entry.name!))) {\n                    entry.mode = (LinuxFileType.File << 12) | entry.permission;\n                    entry.size = 0;\n                    toListItem(entry);\n                }\n                items.push(toListItem(entry));\n            }\n\n            setItems(items);\n            listRef.current?.scrollToIndex(0);\n        } finally {\n            if (currentPath === currentPathRef.current) {\n                setLoading(false);\n            }\n            clearInterval(intervalId);\n            sync.dispose();\n        }\n    }, [device, currentPath]);\n    useEffect(() => {\n        load();\n    }, [load]);\n\n    const [sortedList, setSortedList] = useState<ListItem[]>([]);\n    const [sortKey, setSortKey] = useState<keyof ListItem>('name');\n    const [sortDescending, setSortDescendent] = useState(false);\n    useEffect(() => {\n        const list = items.slice();\n        list.sort((a, b) => {\n            const aIsFile = a.type === LinuxFileType.File ? 1 : 0;\n            const bIsFile = b.type === LinuxFileType.File ? 1 : 0;\n\n            let result: number;\n            if (aIsFile !== bIsFile) {\n                result = aIsFile - bIsFile;\n            } else {\n                const aSortKey = a[sortKey]!;\n                const bSortKey = b[sortKey]!;\n\n                if (aSortKey === bSortKey) {\n                    result = a.name! < b.name! ? -1 : 1;\n                } else {\n                    result = aSortKey < bSortKey ? -1 : 1;\n                }\n            }\n\n            if (sortDescending) {\n                result *= -1;\n            }\n            return result;\n        });\n        setSortedList(list);\n    }, [items, sortKey, sortDescending]);\n\n    const columns: IColumn[] = useMemo(() => {\n        const list: IColumn[] = [\n            {\n                key: 'type',\n                name: 'File Type',\n                iconName: 'Page',\n                isIconOnly: true,\n                minWidth: 20,\n                maxWidth: 20,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    switch (item.type) {\n                        case LinuxFileType.Link:\n                            return <Icon {...getFileTypeIconProps({ size: 20, type: FileIconType.linkedFolder })} />;\n                        case LinuxFileType.Directory:\n                            return <Icon {...getFileTypeIconProps({ size: 20, type: FileIconType.folder })} />;\n                        case LinuxFileType.File:\n                            return <Icon {...getFileTypeIconProps({ size: 20, extension: extensionName(item.name!) })} />;\n                        default:\n                            return <Icon {...getFileTypeIconProps({ size: 20, extension: 'txt' })} />;\n                    }\n                }\n            },\n            {\n                key: 'name',\n                name: 'Name',\n                minWidth: 0,\n                isRowHeader: true,\n                onRender(item: AdbSyncEntryResponse) {\n                    return (\n                        <span className={classNames.name} data-selection-invoke>\n                            {item.name}\n                        </span>\n                    );\n                }\n            },\n            {\n                key: 'permission',\n                name: 'Permission',\n                minWidth: 0,\n                onRender(item: AdbSyncEntryResponse) {\n                    return `${(item.mode >> 6 & 0b100).toString(8)}${(item.mode >> 3 & 0b100).toString(8)}${(item.mode & 0b100).toString(8)}`;\n                }\n            },\n            {\n                key: 'logicalSize',\n                name: 'Size',\n                minWidth: 0,\n                onRender(item: AdbSyncEntryResponse) {\n                    if (item.type === LinuxFileType.File) {\n                        return formatSize(item.size);\n                    }\n                    return '';\n                }\n            },\n            {\n                key: 'mtime',\n                name: 'Last Modified Time',\n                minWidth: 150,\n                onRender(item: AdbSyncEntryResponse) {\n                    return new Date(item.mtime * 1000).toLocaleString();\n                },\n            }\n        ];\n\n        for (const item of list) {\n            item.onColumnClick = (_e, column) => {\n                if (sortKey === column.key) {\n                    setSortDescendent(!sortDescending);\n                } else {\n                    setSortKey(column.key as keyof ListItem);\n                    setSortDescendent(false);\n                }\n            };\n\n            if (item.key === sortKey) {\n                item.isSorted = true;\n                item.isSortedDescending = sortDescending;\n            }\n        }\n\n        return list;\n    }, [sortKey, sortDescending]);\n\n    const [previewUrl, setPreviewUrl] = useState<string | undefined>();\n    const previewImage = useCallback(async (path: string) => {\n        const sync = await device!.sync();\n        try {\n            const readableStream = createReadableStreamFromBufferIterator(sync.read(path));\n            const response = new Response(readableStream);\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            setPreviewUrl(url);\n        } finally {\n            sync.dispose();\n        }\n    }, [device]);\n    const hidePreview = useCallback(() => {\n        setPreviewUrl(undefined);\n    }, []);\n\n    const handleItemInvoked = useCallback((item: AdbSyncEntryResponse) => {\n        switch (item.type) {\n            case LinuxFileType.Link:\n            case LinuxFileType.Directory:\n                setCurrentPath(path.resolve(currentPath, item.name!));\n                break;\n            case LinuxFileType.File:\n                switch (extensionName(item.name!)) {\n                    case '.jpg':\n                    case '.png':\n                    case '.svg':\n                    case '.gif':\n                        previewImage(path.resolve(currentPath, item.name!));\n                        break;\n                }\n                break;\n        }\n    }, [currentPath, previewImage]);\n\n    const [selectedItems, setSelectedItems] = useState<ListItem[]>([]);\n    const selection = useConst(() => new Selection({\n        onSelectionChanged() {\n            const selectedItems = selection.getSelection() as ListItem[];\n            setSelectedItems(selectedItems);\n        },\n    }));\n\n    const [uploading, setUploading] = useState(false);\n    const [uploadPath, setUploadPath] = useState('');\n    const [uploadProgress, setUploadProgress] = useState(0);\n    const [uploadedSize, setUploadedSize] = useState(0);\n    const [uploadTotalSize, setUploadTotalSize] = useState(0);\n    const [uploadSpeed, setUploadSpeed] = useState(0);\n    const upload = useCallback(async (file: File) => {\n        let lastSecondUploadedSize = 0;\n        let currentUploadedSize = 0;\n        const intervalId = window.setInterval(() => {\n            setUploadedSize(currentUploadedSize);\n            setUploadSpeed(currentUploadedSize - lastSecondUploadedSize);\n            lastSecondUploadedSize = currentUploadedSize;\n        }, 1000);\n\n        const sync = await device!.sync();\n        try {\n            const itemPath = path.resolve(currentPath, file.name);\n            setUploading(true);\n            setUploadPath(file.name);\n            setUploadTotalSize(file.size);\n            await sync.write(\n                itemPath,\n                chunkFile(file),\n                (LinuxFileType.File << 12) | 0o666,\n                file.lastModified / 1000,\n                (uploadedSize) => {\n                    setUploadProgress(uploadedSize / file.size);\n                    currentUploadedSize = uploadedSize;\n                },\n            );\n        } catch (e) {\n            showErrorDialog(e.message);\n        } finally {\n            sync.dispose();\n            load();\n            setUploading(false);\n            window.clearInterval(intervalId);\n        }\n    }, [currentPath, device]);\n\n    const [menuItems, setMenuItems] = useState<IContextualMenuItem[]>([]);\n    useEffect(() => {\n        let result: IContextualMenuItem[] = [];\n\n        switch (selectedItems.length) {\n            case 0:\n                result.push({\n                    key: 'upload',\n                    text: 'Upload',\n                    iconProps: { iconName: 'Upload' },\n                    disabled: !device,\n                    onClick() {\n                        const input = document.createElement('input');\n                        input.type = \"file\";\n                        input.onchange = async () => {\n                            if (input.files?.length) {\n                                for (let i = 0; i < input.files!.length; i++) {\n                                    const file = input.files!.item(i)!;\n                                    await upload(file);\n                                }\n                            }\n                        };\n                        input.click();\n\n                        return false;\n                    }\n                });\n                break;\n            // @ts-expect-error\n            case 1:\n                if (selectedItems[0].type === LinuxFileType.File) {\n                    result.push({\n                        key: 'download',\n                        text: 'Download',\n                        iconProps: { iconName: 'Download' },\n                        onClick() {\n                            (async () => {\n                                const sync = await device!.sync();\n                                try {\n                                    const itemPath = path.resolve(currentPath, selectedItems[0].name!);\n                                    const readableStream = createReadableStreamFromBufferIterator(sync.read(itemPath));\n\n                                    const writeableStream = StreamSaver.createWriteStream(selectedItems[0].name!, {\n                                        size: selectedItems[0].size,\n                                    });\n                                    await readableStream.pipeTo(writeableStream);\n                                } catch (e) {\n                                    showErrorDialog(e.message);\n                                } finally {\n                                    sync.dispose();\n                                }\n                            })();\n                            return false;\n                        },\n                    });\n                }\n            default:\n                result.push({\n                    key: 'delete',\n                    text: 'Delete',\n                    iconProps: { iconName: 'Delete' },\n                    onClick() {\n                        (async () => {\n                            try {\n                                for (const item of selectedItems) {\n                                    const output = await device!.exec(\n                                        'rm',\n                                        '-rf',\n                                        `\"${path.resolve(currentPath, item.name!)}\"`\n                                    );\n                                    if (output) {\n                                        showErrorDialog(output);\n                                        return;\n                                    }\n                                }\n                            } catch (e) {\n                                showErrorDialog(e.message);\n                            } finally {\n                                load();\n                            }\n                        })();\n                        return false;\n                    }\n                });\n                break;\n        }\n\n        setMenuItems(result);\n    }, [selectedItems, device, currentPath]);\n\n    const [contextMenuTarget, setContextMenuTarget] = useState<MouseEvent>();\n    const showContextMenu = useCallback((\n        _item?: AdbSyncEntryResponse,\n        _index?: number,\n        e?: Event\n    ) => {\n        if (!e) {\n            return false;\n        }\n\n        if (menuItems.length) {\n            setContextMenuTarget(e as MouseEvent);\n        }\n\n        return false;\n    }, [device, menuItems]);\n    const hideContextMenu = React.useCallback(() => {\n        setContextMenuTarget(undefined);\n    }, []);\n\n    return (\n        <>\n            <StackItem\n                styles={{\n                    root: {\n                        margin: '-20px -20px 0 -20px',\n                        borderBottom: '1px solid rgb(243, 242, 241)',\n                    }\n                }}\n            >\n                <CommandBar\n                    items={menuItems}\n                />\n            </StackItem>\n\n            <StackItem grow styles={{\n                root: {\n                    margin: '-8px -20px -20px -20px',\n                    padding: '8px 20px 20px 20px',\n                    minHeight: 0,\n                    overflow: 'auto',\n                }\n            }}>\n                <MarqueeSelection selection={selection}>\n                    <Breadcrumb items={breadcrumbItems} />\n\n                    <ShimmeredDetailsList\n                        componentRef={listRef}\n                        items={sortedList}\n                        columns={columns}\n                        setKey={currentPath}\n                        selection={selection}\n                        layoutMode={DetailsListLayoutMode.justified}\n                        enableShimmer={loading && items.length === 0}\n                        onItemInvoked={handleItemInvoked}\n                        onItemContextMenu={showContextMenu}\n                        onRenderDetailsHeader={renderDetailsHeader}\n                        usePageCache\n                    />\n                </MarqueeSelection>\n\n                {previewUrl && (\n                    <Layer>\n                        <Overlay onClick={hidePreview}>\n                            <div style={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                                <img src={previewUrl} style={{ maxWidth: '100%', maxHeight: '100%' }} />\n                            </div>\n                        </Overlay>\n                    </Layer>\n                )}\n\n                <ContextualMenu\n                    items={menuItems}\n                    hidden={!contextMenuTarget}\n                    directionalHint={DirectionalHint.bottomLeftEdge}\n                    target={contextMenuTarget}\n                    onDismiss={hideContextMenu}\n                    contextualMenuItemAs={props => <ContextualMenuItem {...props} hasIcons={false} />}\n                />\n\n                <Dialog\n                    hidden={!uploading}\n                    dialogContentProps={{\n                        title: 'Uploading...',\n                        subText: uploadPath\n                    }}\n                >\n                    <ProgressIndicator\n                        description={`${formatSize(uploadedSize)} / ${formatSize(uploadTotalSize)} at ${formatSize(uploadSpeed)}/s`}\n                        percentComplete={uploadProgress}\n                    />\n                </Dialog>\n            </StackItem>\n        </>\n    );\n});\n","import React, { useEffect, useRef } from 'react';\nimport { withDisplayName } from '../utils';\nimport { RouteProps } from './type';\n\nexport const FrameBuffer = withDisplayName('FrameBuffer', ({\n    device\n}: RouteProps): JSX.Element | null => {\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n    useEffect(() => {\n        if (!device) {\n            return;\n        }\n\n        let running = true;\n        let timeoutId: any;\n\n        async function capture() {\n            const start = window.performance.now();\n            const framebuffer = await device!.framebuffer();\n            const end = window.performance.now();\n            console.log('time', end - start);\n\n            const { width, height } = framebuffer;\n\n            const canvas = canvasRef.current;\n            if (!canvas) {\n                return;\n            }\n\n            canvas.width = width;\n            canvas.height = height;\n\n            const context = canvas.getContext(\"2d\")!;\n            const image = new ImageData(new Uint8ClampedArray(framebuffer.data!), width, height);\n            context.putImageData(image, 0, 0);\n\n            if (running) {\n                timeoutId = setTimeout(capture, 16);\n            }\n        }\n\n        capture();\n\n        return () => {\n            running = false;\n            clearTimeout(timeoutId);\n        };\n    }, [device]);\n\n    return (\n        <>\n            <canvas ref={canvasRef} style={{ maxWidth: '100%' }} />\n        </>\n    );\n});\n","import { Callout, DirectionalHint, Link, mergeStyleSets, Text } from '@fluentui/react';\nimport { useBoolean } from '@uifabric/react-hooks';\nimport React, { useCallback, useRef } from 'react';\nimport { withDisplayName } from '../utils';\n\nconst classNames = mergeStyleSets({\n    callout: {\n        padding: '8px 12px',\n    },\n});\n\nconst BoldTextStyles = { root: { fontWeight: '600' } };\n\ninterface CopyLinkProps {\n    href: string;\n}\n\nconst CopyLink = withDisplayName('CopyLink', ({\n    href,\n}: CopyLinkProps) => {\n    const calloutTarget = useRef<HTMLButtonElement | null>(null);\n    const [calloutVisible, { setTrue: showCallout, setFalse: hideCallout }] = useBoolean(false);\n    const copyLink = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n        navigator.clipboard.writeText(href);\n        calloutTarget.current = e.target as HTMLButtonElement;\n        showCallout();\n        setTimeout(hideCallout, 3000);\n    }, [href]);\n\n    return (\n        <>\n            <Link onClick={copyLink}>{href}</Link>\n            <Callout\n                directionalHint={DirectionalHint.topCenter}\n                hidden={!calloutVisible}\n                target={calloutTarget}\n                onDismiss={hideCallout}\n            >\n                <div className={classNames.callout}>\n                    Link copied. Open a new tab and paste into address bar.\n                </div>\n            </Callout>\n        </>\n    );\n});\n\nexport const Intro = withDisplayName('Intro', () => {\n    return (\n        <>\n            <Text block>\n                This page is a demo of my {' '}\n                <Link href=\"https://github.com/yume-chan/ya-webadb/\" target=\"_blank\">WebADB</Link>{' '}\n                library, which can connect to your Android devices with the {' '}\n                <Link href=\"https://developer.mozilla.org/en-US/docs/Web/API/USB\" target=\"_blank\">WebUSB</Link>{' '}\n                API.\n            </Text>\n            <Text block>\n                The latest version of Google Chrome (or Microsoft Edge) is recommended for best compatibility.\n            </Text>\n\n            <Text block styles={BoldTextStyles}>\n                Windows user?\n            </Text>\n            <Text block>\n                The experimental new backend is required. Enable from  {' '}\n                <CopyLink href=\"chrome://flags/#new-usb-backend\" />\n                .\n            </Text>\n\n            <Text block styles={BoldTextStyles}>\n                Got \"Unable to claim interface\" error?\n            </Text>\n            <Text block>\n                Only one software can connect to your device at a time.<br />\n                1. Make sure ADB server is not running (run `adb kill-server` to stop it).<br />\n                2. Make sure no other Android management tools are running\n            </Text>\n            <Text block styles={BoldTextStyles}>\n                Got \"Access denied\" error?\n            </Text>\n            <Text block>\n                If you have a Samsung device, it's caused by the custom driver. See {' '}\n                <Link href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1127206\">\n                    https://bugs.chromium.org/p/chromium/issues/detail?id=1127206\n                </Link>\n            </Text>\n            <Text block styles={BoldTextStyles}>\n                Can I connect my device wirelessly (ADB over WiFi)?\n            </Text>\n            <Text block>\n                No. Web browsers doesn't support TCP connections.<br />\n                Or maybe, with {' '}\n                <Link href=\"https://github.com/novnc/websockify\">websockify</Link>{' '}\n                running on your device and a WebSocket backend for WebADB.\n            </Text>\n        </>\n    );\n});\n","import { IconButton, SearchBox, Stack, StackItem } from '@fluentui/react';\nimport { encodeUtf8 } from '@yume-chan/adb-backend-web';\nimport React, { CSSProperties, useCallback, useEffect, useRef, useState } from 'react';\nimport { Terminal } from 'xterm';\nimport { FitAddon } from 'xterm-addon-fit';\nimport { SearchAddon } from 'xterm-addon-search';\nimport 'xterm/css/xterm.css';\nimport { ResizeObserver, withDisplayName } from '../utils';\nimport { RouteProps } from './type';\n\nconst ResizeObserverStyle: CSSProperties = {\n    width: '100%',\n    height: '100%',\n};\n\nconst UpIconProps = { iconName: 'ChevronUp' };\nconst DownIconProps = { iconName: 'ChevronDown' };\n\nexport const Shell = withDisplayName('Shell', ({\n    device,\n}: RouteProps): JSX.Element | null => {\n    const [findKeyword, setFindKeyword] = useState('');\n    const findAddonRef = useRef<SearchAddon>();\n    const handleFindKeywordChange = useCallback((e, newValue?: string) => {\n        setFindKeyword(newValue ?? '');\n        if (newValue) {\n            findAddonRef.current!.findNext(newValue, { incremental: true });\n        }\n    }, []);\n    const findPrevious = useCallback(() => {\n        findAddonRef.current!.findPrevious(findKeyword);\n    }, [findKeyword]);\n    const findNext = useCallback(() => {\n        findAddonRef.current!.findNext(findKeyword);\n    }, [findKeyword]);\n\n    const [terminal, setTerminal] = useState<Terminal>();\n    const fitAddonRef = useRef<FitAddon>();\n    const handleContainerRef = useCallback((element: HTMLDivElement | null) => {\n        if (!element) {\n            return;\n        }\n\n        const terminal = new Terminal({\n            scrollback: 9001,\n        });\n\n        const findAddon = new SearchAddon();\n        findAddonRef.current = findAddon;\n        terminal.loadAddon(findAddon);\n\n        const fitAddon = new FitAddon();\n        fitAddonRef.current = fitAddon;\n        terminal.loadAddon(fitAddon);\n\n        setTerminal(terminal);\n        terminal.open(element);\n        fitAddon.fit();\n    }, []);\n    useEffect(() => {\n        return () => terminal?.dispose();\n    }, []);\n\n    useEffect(() => {\n        if (!device || !terminal) {\n            return;\n        }\n\n        (async () => {\n            const shell = await device.shell();\n            terminal.onData(data => {\n                const buffer = encodeUtf8(data);\n                shell.write(buffer);\n            });\n            shell.onData(data => {\n                terminal.write(new Uint8Array(data));\n            });\n        })();\n\n        return () => {\n            terminal.reset();\n            terminal.clear();\n        };\n    }, [device, terminal]);\n\n    const handleResize = useCallback(() => {\n        fitAddonRef.current?.fit();\n    }, []);\n\n    return (\n        <>\n            <StackItem>\n                <Stack horizontal>\n                    <StackItem grow>\n                        <SearchBox\n                            placeholder=\"Find\"\n                            value={findKeyword}\n                            onChange={handleFindKeywordChange}\n                            onSearch={findNext}\n                        />\n                    </StackItem>\n                    <StackItem>\n                        <IconButton\n                            disabled={!findKeyword}\n                            iconProps={UpIconProps}\n                            onClick={findPrevious}\n                        />\n                    </StackItem>\n                    <StackItem>\n                        <IconButton\n                            disabled={!findKeyword}\n                            iconProps={DownIconProps}\n                            onClick={findNext}\n                        />\n                    </StackItem>\n                </Stack>\n            </StackItem>\n            <StackItem grow styles={{ root: { minHeight: 0 } }}>\n                <ResizeObserver style={ResizeObserverStyle} onResize={handleResize}>\n                    <div ref={handleContainerRef} style={{ height: '100%' }} />\n                </ResizeObserver>\n            </StackItem>\n        </>\n    );\n});\n","export const CommonStackTokens = { childrenGap: 8 };\n","import { Label, MessageBar, PrimaryButton, Stack, StackItem, Text, TextField } from '@fluentui/react';\nimport { useId } from '@uifabric/react-hooks';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { CommonStackTokens } from '../styles';\nimport { withDisplayName } from '../utils';\nimport { RouteProps } from './type';\n\nexport const TcpIp = withDisplayName('TcpIp', ({\n    device\n}: RouteProps): JSX.Element | null => {\n    const [tcpPort, setTcpAddresses] = useState<string[] | undefined>();\n    useEffect(() => {\n        if (!device) {\n            setTcpAddresses(undefined);\n        }\n    }, [device]);\n\n    const queryTcpAddress = useCallback(async () => {\n        if (!device) {\n            return;\n        }\n\n        const result = await device.tcpip.getAddresses();\n        setTcpAddresses(result);\n    }, [device]);\n\n    const [tcpPortValue, setTcpPortValue] = useState('5555');\n    const tcpPortInputId = useId('tcpPort');\n    const enableTcp = useCallback(async () => {\n        if (!device) {\n            return;\n        }\n\n        await device.tcpip.setPort(Number.parseInt(tcpPortValue, 10));\n    }, [device, tcpPortValue]);\n\n    const disableTcp = useCallback(async () => {\n        if (!device) {\n            return;\n        }\n\n        await device.tcpip.disable();\n    }, [device]);\n\n    return (\n        <>\n            <StackItem>\n                <MessageBar>\n                    <Text>Although WebADB can enable ADB over WiFi for you, it can't connect to your device wirelessly.</Text>\n                </MessageBar>\n            </StackItem>\n            <StackItem>\n                <MessageBar >\n                    <Text>Your device will disconnect after changing ADB over WiFi config.</Text>\n                </MessageBar>\n            </StackItem>\n            <Stack horizontal verticalAlign=\"center\" tokens={CommonStackTokens}>\n                <StackItem>\n                    <PrimaryButton text=\"Update Status\" disabled={!device} onClick={queryTcpAddress} />\n                </StackItem>\n                <StackItem>\n                    {tcpPort !== undefined &&\n                        (tcpPort.length !== 0\n                            ? `Enabled at ${tcpPort.join(', ')}`\n                            : 'Disabled')}\n                </StackItem>\n            </Stack>\n            <Stack horizontal verticalAlign=\"center\" tokens={CommonStackTokens}>\n                <StackItem>\n                    <Label htmlFor={tcpPortInputId}>Port: </Label>\n                </StackItem>\n                <StackItem>\n                    <TextField\n                        id={tcpPortInputId}\n                        width={300}\n                        disabled={!device}\n                        value={tcpPortValue}\n                        onChange={(e, value) => setTcpPortValue(value!)}\n                    />\n                </StackItem>\n                <StackItem>\n                    <PrimaryButton\n                        text=\"Enable\"\n                        disabled={!device}\n                        onClick={enableTcp}\n                    />\n                </StackItem>\n            </Stack>\n            <StackItem>\n                <PrimaryButton\n                    text=\"Disable\"\n                    disabled={!device || tcpPort === undefined || tcpPort.length === 0}\n                    onClick={disableTcp}\n                />\n            </StackItem>\n        </>\n    );\n});\n","import { Nav, Stack, StackItem } from '@fluentui/react';\nimport { initializeIcons } from '@uifabric/icons';\nimport { Adb } from '@yume-chan/adb';\nimport React, { useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Redirect, useLocation } from 'react-router-dom';\nimport Connect from './connect';\nimport ErrorDialogProvider from './error-dialog';\nimport './index.css';\nimport { CacheRoute, CacheSwitch } from './router';\nimport { FileManager, FrameBuffer, Intro, Shell, TcpIp } from './routes';\n\ninitializeIcons();\n\ninterface RouteInfo {\n    path: string;\n\n    exact?: boolean;\n\n    name: string;\n\n    children: JSX.Element | null;\n\n    noCache?: boolean;\n}\n\nfunction App(): JSX.Element | null {\n    const location = useLocation();\n\n    const [device, setDevice] = useState<Adb | undefined>();\n\n    const routes = useMemo((): RouteInfo[] => [\n        {\n            path: '/',\n            exact: true,\n            name: 'Introduction',\n            children: (\n                <Intro />\n            )\n        },\n        {\n            path: '/device-info',\n            name: 'Device Info',\n            children: (\n                <>\n                    <StackItem>\n                        Product: {device?.product}\n                    </StackItem>\n                    <StackItem>\n                        Model: {device?.model}\n                    </StackItem>\n                    <StackItem>\n                        Device: {device?.device}\n                    </StackItem>\n                    <StackItem>\n                        Features: {device?.features?.join(',')}\n                    </StackItem>\n                </>\n            )\n        },\n        {\n            path: '/adb-over-wifi',\n            name: 'ADB over WiFi',\n            children: (\n                <TcpIp device={device} />\n            )\n        },\n        {\n            path: '/shell',\n            name: 'Interactive Shell',\n            children: (\n                <Shell device={device} />\n            ),\n        },\n        {\n            path: '/file-manager',\n            name: 'File Manager',\n            children: (\n                <FileManager device={device} />\n            ),\n        },\n        {\n            path: '/framebuffer',\n            name: 'Screen Capture',\n            noCache: true,\n            children: (\n                <FrameBuffer device={device} />\n            ),\n        },\n    ], [device]);\n\n    return (\n        <Stack verticalFill>\n            <StackItem>\n                <div\n                    style={{\n                        padding: '4px 0',\n                        fontSize: 20,\n                        textAlign: 'center',\n                        borderBottom: '1px solid rgb(243, 242, 241)',\n                    }}\n                >\n                    WebADB Demo\n                </div>\n            </StackItem>\n            <StackItem grow styles={{ root: { minHeight: 0, overflow: 'hidden' } }}>\n                <Stack horizontal verticalFill>\n                    <StackItem styles={{\n                        root: {\n                            paddingRight: 8,\n                            borderRight: '1px solid rgb(243, 242, 241)',\n                        }\n                    }}>\n                        <Connect device={device} onDeviceChange={setDevice} />\n\n                        <Nav\n                            styles={{ root: { width: 250 } }}\n                            groups={[{\n                                links: routes.map(route => ({\n                                    key: route.path,\n                                    name: route.name,\n                                    url: `#${route.path}`,\n                                })),\n                            }]}\n                            selectedKey={location.pathname}\n                        />\n                    </StackItem>\n                    <StackItem grow>\n                        <CacheSwitch>\n                            {routes.map<React.ReactElement>(route => (\n                                <CacheRoute\n                                    exact={route.exact}\n                                    path={route.path}\n                                    noCache={route.noCache}>\n                                    {route.children}\n                                </CacheRoute>\n                            ))}\n\n                            <Redirect to=\"/\" />\n                        </CacheSwitch>\n                    </StackItem>\n                </Stack>\n            </StackItem>\n        </Stack>\n    );\n}\n\nReactDOM.render(\n    <HashRouter>\n        <ErrorDialogProvider>\n            <App />\n        </ErrorDialogProvider>\n    </HashRouter>,\n    document.getElementById('container')\n);\n"],"sourceRoot":""}